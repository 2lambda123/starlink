*+
*  Name:
*     ARD_COM

*  Purpose:
*     Define ARD_ common block.

*  Language:
*     Starlink Fortran 77

*  Type of Module:
*     Global variables include file.

*  Description:
*     This file defines global variables which describe the state of
*     ARD. 

*  Prior Requirements:
*     The SAE_PAR and ARD_CONST include files should be included before
*     this file, in order to define constants used here.

*  Authors:
*     DSB: D.S. Berry (STARLINK)
*     {enter_new_authors_here}

*  History:
*     21-FEB-1994 (DSB):
*        Original version
*     {enter_further_changes_here}

*-

*  Global Variables:

*  Operators
*  =========
*  The symbols used to represent each operator.
      CHARACTER CMN_OPSYM( ARD__NOPSY )*( ARD__SZOPR ) 

*  The actual length of each operator symbol (including dots).
      INTEGER CMN_OPLEN( ARD__NOPSY )

*  The integer codes for the instructions associated with each operator
*  symbol.
      INTEGER CMN_OPCOD( ARD__NOPSY )


*  Instructions
*  ============
*  Change in size of evaluation stack as a result of each instruction.
      INTEGER CMN_DSTK( ARD__NINST )

*  If set to one, then an operand is needed to the left of the
*  instruction.
      INTEGER CMN_OPL( ARD__NINST )

*  If set to one, then an operand is needed to the right of the
*  instruction.
      INTEGER CMN_OPR( ARD__NINST )

*  The number of operands required by the instruction.
      INTEGER CMN_OPS( ARD__NINST )

*  Precedence (seen from the left).
      INTEGER CMN_PRL( ARD__NINST )

*  Precedence (seen from the right).
      INTEGER CMN_PRR( ARD__NINST )

*  Set to one if the instruction writes a value to the FILO evaluation
*  stack.
      INTEGER CMN_WRT( ARD__NINST )

*  A string used to describe the instruction.
      CHARACTER CMN_INSTR( ARD__NINST )*( ARD__SZINS )

*  The number of arguments following the instruction in the evaluation
*  stack.
      INTEGER CMN_NARG( ARD__NINST )

*  Keyword
*  =======
*  The symbols used to represent each keyword.
      CHARACTER CMN_KWSYM( ARD__NKEYW )*( ARD__SZKEY ) 

*  The actual length of each keyword.
      INTEGER CMN_KWLEN( ARD__NKEYW )

*  The number of arguments taken by each keyword.
      INTEGER CMN_KWARG( ARD__NKEYW )


*  Statements
*  ==========
*  The symbols used to represent each statement.
      CHARACTER CMN_STSYM( ARD__NSTAT )*( ARD__SZSTA ) 

*  The actual length of each statement.
      INTEGER CMN_STLEN( ARD__NSTAT )

*  The number of arguments taken by each statement.
      INTEGER CMN_STARG( ARD__NSTAT )

*  Information passed to the ARD routines which "draw" zero-volume
*  regions, "fills" nonzero-volume regions.
*  ===============================================================
*  The MSKSIZ value passed to the ARD "drawing" routines.
      INTEGER CMN_MSKSC 

*  The RINDEX value passed to the ARD "drawing" routines.
      INTEGER CMN_RNDXC 

*  Pointer to the B array passed to the ARD "drawing" routines.
      INTEGER CMN_IPBC

*  Pointer to an array holding parameter values.
      INTEGER CMN_IPPAR

*  The lower bounds of the B array passed to the ARD "drawing" routines.
      INTEGER CMN_LBNDC( 2 ) 

*  The upper bounds of the B array passed to the ARD "drawing" routines.
      INTEGER CMN_UBNDC( 2 ) 

*  The lower bounds of the interior bounding box passed to the ARD 
*  "drawing" routines.
      INTEGER CMN_LBIBC( 2 ) 

*  The upper bounds of the interior bounding box passed to the ARD 
*  "drawing" routines.
      INTEGER CMN_UBIBC( 2 ) 

*  The region type.
      INTEGER CMN_TYPEC 

*  The number of region parameters supplied.
      INTEGER CMN_NPARC

*  A pointer to an AST Frame representign user coordinates.
      INTEGER CMN_FRMC

*  Should the service routine perform any required initialization?
      LOGICAL CMN_INIT

*  GRP identifier for group holding AST_ data.
      INTEGER CMN_IGRP 

*  Next element to use in group holding AST_ data.
      INTEGER CMN_NXTLN 

*  Misc.
*  =====
*  A pointer to dynamic memory holding an expanable array of axis values.
*  Zero if the list is currently not in use.
      INTEGER CMN_PSET

*  The number of dimensions for each point currently stored in CMN_PSET.
      INTEGER CMN_PDIM

*  The number of points currently stored in CMN_PSET.
      INTEGER CMN_PSIZ

*  The maximum number of points which can be stored in CMN_PSET.
      INTEGER CMN_PMAX

*  The application FrameSet used by ARD_WORK
      INTEGER CMN_AWCS

*  The Domain name corresponding to pixel coordinates in the mask array.
      CHARACTER CMN_ADOM*40

*  The index of ht enext GRP element to be read.
      INTEGER CMN_ASTLN

*  The index of the GRP group to use.
      INTEGER CMN_AGRP

*  Allow Mappings to be considered linear?
      LOGICAL CMN_LINOK

*  Declare the common block /ARD_C1/, to hold non-character variables.
      COMMON /ARD_C1/ CMN_DSTK, CMN_KWLEN, CMN_NARG, CMN_OPCOD,
     :                CMN_OPL, CMN_OPLEN, CMN_OPR, CMN_OPS, CMN_PRL,
     :                CMN_PRR, CMN_STARG, CMN_STLEN, CMN_WRT, CMN_KWARG,
     :                CMN_PSET, CMN_PDIM, CMN_PSIZ, CMN_PMAX, CMN_IPBC,
     :                CMN_LBNDC, CMN_UBNDC, CMN_LBIBC, CMN_UBIBC,
     :                CMN_MSKSC, CMN_RNDXC, CMN_TYPEC, CMN_NPARC,
     :                CMN_FRMC, CMN_IPPAR, CMN_INIT, CMN_IGRP,
     :                CMN_NXTLN, CMN_AWCS, CMN_AGRP, CMN_ASTLN, 
     :                CMN_LINOK

*  Declare the common block /ARD_C2/, to hold character variables.
      COMMON /ARD_C2/ CMN_OPSYM, CMN_KWSYM, CMN_STSYM, CMN_INSTR,
     :                CMN_ADOM

*  Ensure that common blocks are saved.
      SAVE /ARD_C1/, /ARD_C2/

*.


