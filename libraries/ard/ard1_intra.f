      SUBROUTINE ARD1_INTRA( THIS, NPOINT, NCOORD_IN, INDIM, IN, 
     :                       FORWARD, NCOORD_OUT, OUTDIM, OUT, STATUS )
*+
*  Name:
*     ARD1_INTRA

*  Purpose:
*     Transform distance along a curve into user coords

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL ARD1_INTRA( THIS, NPOINT, NCOORD_IN, INDIM, IN,
*                       FORWARD, NCOORD_OUT, OUTDIM, OUT, STATUS )

*  Description:
*     This routine applies a Mapping to transform distance along a curve
*     into the corresponding user coordinates.

*  Parameters:
*     THIS = INTEGER (Given)
*        Pointer to the Mapping to be applied.
*     NPOINT = INTEGER (Given)
*        The number of points to be transformed.
*     NCOORD_IN = INTEGER (Given)
*        The number of coordinates being supplied for each input point
*        (i.e. the number of dimensions of the space in which the
*        input points reside). 
*     INDIM = INTEGER (Given)
*        The number of elements along the first dimension of the IN
*        array (which contains the input coordinates). This value is
*        required so that the coordinate values can be correctly
*        located if they do not entirely fill this array. The value
*        given should not be less than NPOINT.
*     IN( INDIM, NCOORD_IN ) = DOUBLE PRECISION (Given)
*        An array containing the coordinates of the input
*        (untransformed) points. These should be stored such that the
*        value of coordinate number COORD for input point number POINT
*        is found in element IN(POINT,COORD).
*     FORWARD = LOGICAL (Given)
*        A .TRUE. value indicates that the Mapping's forward
*        coordinate transformation is to be applied, while a .FALSE.
*        value indicates that the inverse transformation should be
*        used.
*     NCOORD_OUT = INTEGER (Given)
*        The number of coordinates being generated by the Mapping for
*        each output point (i.e. the number of dimensions of the
*        space in which the output points reside). This need not be
*        the same as NCOORD_IN.
*     OUTDIM = INTEGER (Given)
*        The number of elements along the first dimension of the OUT
*        array (which will contain the output coordinates). This value
*        is required so that the coordinate values can be correctly
*        located if they will not entirely fill this array. The value
*        given should not be less than NPOINT.
*     OUT( OUTDIM, NCOORD_OUT ) = DOUBLE PRECISION (Returned)
*        An array into which the coordinates of the output
*        (transformed) points will be written. These will be stored
*        such that the value of coordinate number COORD for output
*        point number POINT will be found in element OUT(POINT,COORD).
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Authors:
*     DSB: David Berry (STARLINK)
*     {enter_new_authors_here}

*  History:
*     27-JUN-2001 (DSB):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'ARD_CONST'        ! ARD_ private constants

*  Global Variables:
      INCLUDE 'ARD_COM'          ! ARD common blocks
*        CMN_IPPAR = INTEGER (Read)
*           Pointer to na array holding parameter values.
*        CMN_FRMC = INTEGER (Read)
*           Pointer to the user coord Frame.
*        CMN_NPARC = INTEGER (Read)
*           The number of parameters in CMN_IPPAR.
*        CMN_TYPEC = INTEGER (Read)
*           The region type identifier.

*  Arguments Given:
      INTEGER THIS
      INTEGER NPOINT
      INTEGER NCOORD_IN
      INTEGER INDIM
      DOUBLE PRECISION IN( INDIM, NCOORD_IN )
      LOGICAL FORWARD
      INTEGER NCOORD_OUT
      INTEGER OUTDIM

*  Arguments Returned:
      DOUBLE PRECISION OUT( OUTDIM, NCOORD_OUT )

*  Status:
      INTEGER STATUS             ! Global status

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Call a lower level routine which can access the parameter array.
      CALL ARD1_INTRB( THIS, NPOINT, NCOORD_IN, INDIM, IN, FORWARD,
     :                 NCOORD_OUT, OUTDIM, CMN_TYPEC, CMN_NPARC, 
     :                 %VAL( CMN_IPPAR ), CMN_FRMC, OUT, STATUS )

      END
