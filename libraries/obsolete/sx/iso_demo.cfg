//
// time: Thu Nov 23 18:43:11 1995
//
// version: 3.0.0 (format), 3.1.0 (DX)
//
//
// panel[6]: position = (0.0107,0.1901), size = 0.2725x0.2253, startup = 0, devstyle = 0
// title: value = Select input file...
// comment: Enter a file name directly into the data entry box, or press the "..." button at the right hand end of the data entry box to select a file by browsing through your directories.
// comment: If you have no data you could try /usr/lpp/dx/samples/data/storm_data.dx.
// comment: 
// comment: DX files may contain more than one quantity (or "field" in DX parlance) , and the fields to be used may be selected using other controls. 
// comment: 
// comment: 
// comment: 
// comment: The data format MUST be specified using the "Data format:" menu  :-
// comment: 
// comment: "DX native" - These are files created by DX or by the "$SX_DIR/ndf2dx" application. They usually have a file extension of ".dx".  
// comment: 
// comment: "DX general" - These are text files describing data typically produced by a users own programs. The data itself can be either ASCII, or binary (so long as it is not produced by a Fortran program) , and may reside in another file referenced from within the supplied description file. See the DX User's Guide for details of the description file.
// comment: 
// comment: "DX general (Fortran binary)" - These are identical to "DX general" files, except that they refer to binary data created by a Fortran program, which consequently contains record control bytes in addition to the data bytes. The description file is identical to that for non-Fortran data.
// comment: 
// comment: "Starlink NDF" - These are standard Starlink NDFs, or any format which can be converted to NDF using the "on-the-fly" conversion facilities described in SSN/20
// comment: (note, SSN not SUN). The $SX_DIR/ndf2dx application is used to convert the file into native dx format.
// comment:  
//
//
// workspace: width = 276, height = 133
// layout: snap = 0, width = 50, height = 50, align = NN
//
// panel[7]: position = (0.0107,0.0404), size = 0.2002x0.1888, startup = 0, devstyle = 0
// title: value = Select field to "iso-surface"
// comment: Press the "Field to define iso-surface" button to see a menu of all the fields (i.e. defined quantities) in the input file. Select the field which you want to use to define the shape of the iso-surface. 
// comment: 
// comment: If the input file only contains a single un-named field, then it will be indicated in the menu by the base file name.
// comment: 
// comment: You can display the common logarithm of the data instead of the actual data by pressing the "Take common log of data". The shape of the iso-surfaces will not change, but linearly spaces sequences of iso-surfaces will become logarithmically spaced.  Negative or zero data values are excluded from the display.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 50, height = 50, align = NN
//
// panel[10]: position = (0.0107,0.3294), size = 0.3984x0.5768, startup = 0, devstyle = 0
// title: value = Set iso-surface values..
// comment: The default data value for the iso-surface is  the median value of the selected field. This can be over-ridden by  entering a value in the "Iso value" box, and then pressing the "Value selection method" button and selecting  and selecting "User-supplied value" from the menu.
// comment: 
// comment: Alternatively, an equally spaced sequence of values can be used in succesion. The maximum and minimum  values are entered in "Max. iso value" and "Min. iso value",
// comment: and the number of steps is entered in "No. of values". Executing the network will cause the "Sequencer" control panel to appear. This is similar to a video front-panel
// comment: with typical "play", "stop" and "rewind" buttons. Pressing the play button will start the sequence.
//
//
// decorator Separator	pos=(0,101) size=408x8
// decorator Separator	pos=(208,141) size=8x258
// decorator Label	pos=(16,137) size=139x28, font=oblique, value = User supplied value
// decorator Label	pos=(245,137) size=137x28, font=oblique, value = Sequence of values
// workspace: width = 500, height = 404
// layout: snap = 0, width = 20, height = 20, align = CC
//
// panel[11]: position = (0.0107,0.3138), size = 0.2998x0.5664, startup = 0, devstyle = 0
// title: value = Surface colouring...
// comment: If you want the colour of the iso-surface to represent  the data value in a second field (i.e. quantity in the data file), then  press the "Use another field to colour the surface?" button, so that it is shown in white, and select the field by pressing the "Field to use to colour surface" button, and selecting from the menu.
// comment: 
// comment:  If the "Use another field to colour the surface?" button is NOT pressed, then the surface will have a uniform blue-grey colour. 
// comment: 
// comment: The opacity value entered in the "Surface opacity" box applies to both sorts of colouring. A value of zero produces a completely clear (i.e. invisible) surface, and a 
// comment: value of one produces a completely opaque surface.
// comment: 
// comment: Press the "Take common log of data" to use the log of the data values to determine the colour. Zero or negative data valuesproduce holes in the surface.
//
//
// decorator Separator	pos=(61,126) size=175x8
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = CC
//
// panel[12]: position = (0.0107,0.2865), size = 0.2441x0.2669, startup = 0, devstyle = 0
// title: value = Mpeg control
// comment: If  displayed images are  to be captured as frames of a movie, press the "Save  frames" button and re-execute the network. Once all frames have been saved, release the "Save frames" button,  enter a file name, press the "Create mpeg" button, and re-execute the network.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 20, height = 20, align = UL
//
// interactor FileSelector[1]: num_components = 1, value = NULL
// instance: panel = 6, x = 4, y = 4, style = FileSelector, vertical = 1, size = 271x57
// label: value = Input file name:
// filter = ./*
//
// interactor Selector[6]: num_components = 1, value = 0 
// selections: maximum = 5, current = 4 
// option[0]: name = "Starlink NDF", value = 4
// option[1]: name = "DX general (Fortran binary)", value = 3
// option[2]: name = "DX native", value = 1
// option[3]: name = "DX general ", value = 2
// option[4]: name = "NULL", value = 0
// instance: panel = 6, x = 22, y = 74, style = Option Menu, vertical = 1, size = 229x58
// label: value = Data format:
//
// interactor Toggle[4]: num_components = 1, value = 2
// toggle : 0, set = 1, reset = 2
// instance: panel = 7, x = 0, y = 72, style = Toggle, vertical = 1, size = 203x32
// label: value = Take common log of data
//
// interactor Selector[1]: num_components = 1, value = 0 
// selections: maximum = 1, current = 0 
// option[0]: name = "cc.sdf", value = 0
// instance: panel = 7, x = 0, y = 0, style = Option Menu, vertical = 1, size = 198x58
// label: value = Field to define iso-surface:
//
// interactor Selector[5]: num_components = 1, value = 1 
// selections: maximum = 3, current = 0 
// option[0]: name = "Default value", value = 1
// option[1]: name = "User-supplied value", value = 2
// option[2]: name = "Sequence of values", value = 3
// instance: panel = 10, x = 114, y = 16, style = Option Menu, vertical = 1, size = 183x58
// label: value = Value selection method
//
// interactor Scalar[5]: num_components = 1, value = 120.375
// component[0]: minimum = 0, maximum = 234.281, global increment = 2.5, decimal = 1, global continuous = 0
// instance: panel = 10, x = 0, y = 181, style = Stepper, vertical = 1, size = 174x56
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[6]: num_components = 1, value = 12.623335
// component[0]: minimum = 0, maximum = 234.281, global increment = 2.5, decimal = 1, global continuous = 0
// instance: panel = 10, x = 228, y = 181, style = Stepper, vertical = 1, size = 174x56
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[7]: num_components = 1, value = 120.375
// component[0]: minimum = 0, maximum = 234.281, global increment = 2.5, decimal = 1, global continuous = 0
// instance: panel = 10, x = 228, y = 262, style = Stepper, vertical = 1, size = 174x56
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Integer[2]: num_components = 1, value = 10 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 1, decimal = 0, global continuous = 0
// instance: panel = 10, x = 249, y = 347, style = Stepper, vertical = 1, size = 126x56
// label: value = No. of values
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// node Sequencer[1]:
// vcr[1]: min = 1, max = 10, beg = 1, end = 10, cur = 1, inc = 1, loop = off, step = off, pal = off
// window: position = (0.6533,0.8229), size = 0.2734x0.1042
//
// interactor Toggle[5]: num_components = 1, value = 2
// toggle : 0, set = 1, reset = 2
// instance: panel = 11, x = 55, y = 363, style = Toggle, vertical = 1, size = 203x32
// label: value = Take common log of data
//
// interactor Selector[4]: num_components = 1, value = 0 
// selections: maximum = 1, current = 0 
// option[0]: name = "cc.sdf", value = 0
// instance: panel = 11, x = 46, y = 162, style = Option Menu, vertical = 1, size = 213x58
// label: value = Field to use to colour surface
//
// interactor Scalar[2]: num_components = 1, value = 120.375
// component[0]: minimum = 0, maximum = 234.281, global increment = 2.5, decimal = 1, global continuous = 0
// instance: panel = 11, x = 71, y = 221, style = Stepper, vertical = 1, size = 166x56
// label: value = Min. data value
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[3]: num_components = 1, value = 120.375
// component[0]: minimum = 0, maximum = 234.281, global increment = 2.5, decimal = 1, global continuous = 0
// instance: panel = 11, x = 71, y = 284, style = Stepper, vertical = 1, size = 166x56
// label: value = Max. data value
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Toggle[2]: num_components = 1, value =  2  
// toggle : 0, set = 1, reset =  2  
// instance: panel = 11, x = 0, y = 12, style = Toggle, vertical = 1, size = 306x32
// label: value = Use another field to colour the surface?
//
// node Colormap[1]:
// input[1]: defaulting = 0, value = { [0.0 0.666667] [1.0 0.0] }
// input[2]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[3]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[4]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[5]: defaulting = 0, value = "Colormap_1"
// input[7]: defaulting = 1, value = -8.0436544
// input[8]: defaulting = 1, value = -2.0129787e-06
// input[9]: defaulting = 1, value = 20
// input[12]: defaulting = 0, value = { -8.0436544 -2.0129787e-06 }
// input[13]: defaulting = 1, value = NULL
// input[14]: defaulting = 1, value = NULL
// input[15]: defaulting = 1, value = NULL
// input[16]: defaulting = 1, value = NULL
// input[17]: defaulting = 0, value = -8.0436544
// input[18]: defaulting = 0, value = -2.0129787e-06
// window: position = (0.1211,0.2018), size = 0.6348x0.5859
//
// interactor Scalar[4]: num_components = 1, value = 1.0 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 0.05, decimal = 5, global continuous = 0
// instance: panel = 11, x = 71, y = 51, style = Stepper, vertical = 1, size = 166x56
// label: value = Surface opacity
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// node Image[2]:
// depth: value = 8
// window: position = (0.6279,0.2500), size = 0.4824x0.5260
// input[1]: defaulting = 0, value = "Image_2"
// input[4]: defaulting = 0, value = 1
// input[5]: defaulting = 0, value = [117 77 0]
// input[6]: defaulting = 0, value = [117 77 909.769]
// input[7]: defaulting = 0, value = 487.545
// input[8]: defaulting = 0, value = 480
// input[9]: defaulting = 0, value = 0.75
// input[10]: defaulting = 0, value = [0 1 0]
// input[11]: defaulting = 1, value = 30.0001
// input[12]: defaulting = 0, value = 0
// input[14]: defaulting = 0, value = 1
// input[19]: defaulting = 0, value = 0
// input[29]: defaulting = 1, value = 0
// interaction mode = NONE
//
// interactor Toggle[3]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 12, x = 58, y = 132, style = Toggle, vertical = 1, size = 115x32
// label: value = Save frames
//
// interactor Reset[2]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 12, x = 58, y = 87, style = Toggle, vertical = 1, size = 119x32
// label: value = Create mpeg
//
// interactor String[1]: num_components = 1, value = NULL
// instance: panel = 12, x = 4, y = 0, style = Text, vertical = 1, size = 245x53
// label: value = Mpeg file name
