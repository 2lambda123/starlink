//
// time: Fri Nov 10 16:47:48 1995
//
// version: 3.0.0 (format), 3.1.0 (DX)
//
//
// panel[6]: position = (0.0107,0.1094), size = 0.2617x0.2253, startup = 0, devstyle = 0
// title: value = Select input file...
// comment: Enter a file name directly into the data entry box, or press the "..." button at the right hand end of the data entry box to select a file by browsing through your directories.
// comment: If you have no data you could try /usr/lpp/dx/samples/data/storm_data.dx.
// comment: 
// comment: DX files may contain more than one quantity (or "field" in DX parlance) , and the fields to be used may be selected using other controls. 
// comment: 
// comment: 
// comment: 
// comment: The data format MUST be specified using the "Data format:" menu  :-
// comment: 
// comment: "DX native" - These are files created by DX or by the "$SX_DIR/ndf2dx" application. They usually have a file extension of ".dx".  
// comment: 
// comment: "DX general" - These are text files describing data typically produced by a users own programs. The data itself can be either ASCII, or binary (so long as it is not produced by a Fortran program) , and may reside in another file referenced from within the supplied description file. See the DX User's Guide for details of the description file.
// comment: 
// comment: "DX general (Fortran binary)" - These are identical to "DX general" files, except that they refer to binary data created by a Fortran program, which consequently contains record control bytes in addition to the data bytes. The description file is identical to that for non-Fortran data.
// comment: 
// comment: "Starlink NDF" - These are standard Starlink NDFs, or any format which can be converted to NDF using the "on-the-fly" conversion facilities described in SSN/20
// comment: (note, SSN not SUN). The $SX_DIR/ndf2dx application is used to convert the file into native dx format.
// comment:  
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 50, height = 50, align = NN
//
// panel[7]: position = (0.0107,0.2721), size = 0.1992x0.2070, startup = 0, devstyle = 0
// title: value = Select field to display
// comment: Press the "Field to display" button to see a menu of all the fields (i.e. defined quantities) in the input file. Select the field which you want to use to display.
// comment: 
// comment: If the input file only contains a single un-named field, then it will be indicated in the menu by the base file name.
// comment: 
// comment: You can display the common logarithm of the data instead of the actual data by pressing the "Take common log of data".  Negative or zero data values are excluded from the display.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 50, height = 50, align = NN
//
// panel[10]: position = (0.0605,0.3385), size = 0.4277x0.5781, startup = 0, devstyle = 0
// title: value = Set slice position...
// comment: The "Show bounding box" button determines if a bounding box should be displayed with the slice. The bounding box encloses the entire data set.
// comment:  
// comment: The "Axis name" button allows you to select the orientation of the slice. The displayed slice will be perpendicular to the selected axis. The position at which the slice cuts the axis can be determined in four ways, selected using "Position selection method":
// comment: 
// comment: 1)  A default position can be used. This is the mid point of the selected axis.
// comment: 
// comment: 2) A user-supplied position can be used. This should be entered in the "Axis value". 
// comment: 
// comment: 3) An equally spaced sequence of positions can be used in succesion. The maximum and minimum  values are entered in "Max. axis value" and "Min. axis value",
// comment: and the number of steps is entered in "No. of values". 
// comment: 
// comment: Executing the network will cause the "Sequencer" control panel to appear. This is similar to a video front-panel with typical "play", "stop" and "rewind" buttons. Pressing the play button will start the sequence.
// comment: 
// comment: 4) A cursor can be used to set the position. Open the "View control" dialogue box by clicking on "View Control" in the "Options" menu of the Image window.  Then click on "Mode" and select "Cursors" from the displayed list of options.  Position the arrow cursor somewhere over the displayed image and double click. This will produce a small square cursor (or "probe")  which can be dragged around by pointing at it and holding the left mouse button down. 
// comment: 
// comment: The probe is constrained to move parallel to an axis, and the projection of the probe position on to each face of the enclosing box is displayed in order to ease the problem of positioning the probe in 3 dimensions. Once the probe is positioned, release the left mouse button and execute the network. 
//
//
// decorator Separator	pos=(0,105) size=381x8
// decorator Separator	pos=(223,145) size=8x259
// decorator Label	pos=(31,137) size=156x28, font=oblique, value = User supplied position
// decorator Label	pos=(254,137) size=154x28, font=oblique, value = Sequence of positions
// decorator Separator	pos=(0,271) size=175x8
// workspace: width = 500, height = 405
// layout: snap = 0, width = 20, height = 20, align = CC
//
// panel[11]: position = (0.0488,0.0990), size = 0.3115x0.4701, startup = 0, devstyle = 0
// title: value = Slice colouring...
// comment: The slice will be displayed with a colour table going from blue at low data values to red at high data values. The data values corresponding to pure red and blue can either be entered by the user, or default values can be used. The method is determined by the setting of the "Method" button. 
// comment: 
// comment: Any data values which fall outside the given limits will be produce "holes" in the 
// comment: slice (i.e. the background colour , black by default, will show through).
// comment: 
// comment: The default values are the maximum and minimum data values on the slice. Thus the default scaling will change as the slice is moved through the data volume.
// comment: 
// comment: This panel also allows you to change the size of the labels on the colour bar displayed at the right hand edge of the window. The default size is multiplied by the supplied factor.  The default size is dependant on the distance between tick marks
// comment: and so will in general alter if the data range covered by the colour bar is changed.  
//
//
// decorator Separator	pos=(54,170) size=137x8
// decorator Label	pos=(54,193) size=150x28, font=oblique, value = User supplied values:
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = CC
//
// panel[12]: position = (0.0107,0.6745), size = 0.2422x0.2669, startup = 0, devstyle = 0
// title: value = Mpeg control
// comment: If  displayed images are  to be captured as frames of a movie, press the "Save  frames" button and re-execute the network. Any images which are subsequently displayed will  be saved as ppm files on disk. 
// comment: 
// comment: Once all the required frames have been displayed, release the "Save frames" button,  enter a file name (REMEMBERING TO PRESS <RETURN> IN THE FILE NAME ENTRY BOX), press the "Create mpeg" button, and re-execute the network. This will create the named mpeg file and delete the individual ppm frames dumped to disk by earlier executions.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 20, height = 20, align = UL
//
// interactor FileSelector[1]: num_components = 1, value = NULL
// instance: panel = 6, x = 4, y = 4, style = FileSelector, vertical = 1, size = 260x57
// label: value = Input file name:
// filter = ./*
//
// interactor Selector[5]: num_components = 1, value = 1 
// selections: maximum = 4, current = 0 
// option[0]: name = "Default position", value = 1
// option[1]: name = "User-supplied position", value = 2
// option[2]: name = "Sequence of positions", value = 3
// option[3]: name = "Image window probe", value = 4
// instance: panel = 10, x = 9, y = 12, style = Option Menu, vertical = 1, size = 203x58
// label: value = Position selection method
//
// interactor Toggle[4]: num_components = 1, value = 2
// toggle : 0, set = 1, reset = 2
// instance: panel = 7, x = 0, y = 87, style = Toggle, vertical = 1, size = 203x32
// label: value = Take common log of data
//
// interactor Selector[6]: num_components = 1, value = 0 
// selections: maximum = 5, current = 4 
// option[0]: name = "Starlink NDF", value = 4
// option[1]: name = "DX general (Fortran binary)", value = 3
// option[2]: name = "DX native", value = 1
// option[3]: name = "DX general ", value = 2
// option[4]: name = "NULL", value = 0
// instance: panel = 6, x = 21, y = 74, style = Option Menu, vertical = 1, size = 229x58
// label: value = Data format:
//
// interactor Selector[1]: num_components = 1, value = 0 
// selections: maximum = 2, current = 0 
// option[0]: name = "cloudwater", value = 0
// option[1]: name = "rainwater", value = 1
// instance: panel = 7, x = 0, y = 0, style = Option Menu, vertical = 1, size = 198x58
// label: value = Field to display:
//
// interactor Selector[7]: num_components = 1, value = 1 
// selections: maximum = 3, current = 0 
// option[0]: name = "x", value = 1
// option[1]: name = "y", value = 2
// option[2]: name = "z", value = 3
// instance: panel = 10, x = 263, y = 12, style = Option Menu, vertical = 1, size = 91x58
// label: value = Axis name
//
// interactor Scalar[5]: num_components = 1, value = 10.5
// component[0]: minimum = 0, maximum = 100000, global increment = 1000, decimal = 1, global continuous = 0
// instance: panel = 10, x = 0, y = 182, style = Stepper, vertical = 1, size = 174x56
// label: value = Axis value
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[6]: num_components = 1, value = 0.0 
// component[0]: minimum = 0, maximum = 100000, global increment = 1000, decimal = 1, global continuous = 0
// instance: panel = 10, x = 263, y = 182, style = Stepper, vertical = 1, size = 174x56
// label: value = Min. axis value
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[7]: num_components = 1, value = 10.5
// component[0]: minimum = 0, maximum = 100000, global increment = 1000, decimal = 1, global continuous = 0
// instance: panel = 10, x = 263, y = 263, style = Stepper, vertical = 1, size = 174x56
// label: value = Max. axis value
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Integer[2]: num_components = 1, value = 10 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 1, decimal = 0, global continuous = 0
// instance: panel = 10, x = 285, y = 347, style = Stepper, vertical = 1, size = 126x56
// label: value = No. of slices
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// node Sequencer[1]:
// vcr[1]: min = 1, max = 10, beg = 1, end = 10, cur = 1, inc = 1, loop = off, step = off, pal = off
// window: position = (0.6855,0.7409), size = 0.2734x0.1042
//
// interactor Selector[8]: num_components = 1, value = 1 
// selections: maximum = 2, current = 0 
// option[0]: name = "Use default values", value = 1
// option[1]: name = "Use supplied values", value = 2
// instance: panel = 11, x = 0, y = 16, style = Option Menu, vertical = 0, size = 237x40
// label: value = Method
//
// interactor Scalar[2]: num_components = 1, value = 0.19 
// component[0]: minimum = -9.73355e-08, maximum = 4.17122, global increment = 0.05, decimal = 2, global continuous = 0
// instance: panel = 11, x = 0, y = 231, style = Stepper, vertical = 0, size = 286x38
// label: value = Maximum data value
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[3]: num_components = 1, value = 0.20861575
// component[0]: minimum = -9.73355e-08, maximum = 4.17122, global increment = 0.05, decimal = 2, global continuous = 0
// instance: panel = 11, x = 0, y = 282, style = Stepper, vertical = 0, size = 284x38
// label: value = Minimum data value
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// node Colormap[1]:
// input[1]: defaulting = 0, value = { [0.0 0.666667] [1.0 0.0] }
// input[2]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[3]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[4]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[5]: defaulting = 0, value = "Colormap_1"
// input[7]: defaulting = 1, value = -2.537714e-08
// input[8]: defaulting = 1, value = 0.37962407
// input[9]: defaulting = 1, value = 20
// input[12]: defaulting = 0, value = { -2.537714e-08 0.37962407 }
// input[13]: defaulting = 1, value = NULL
// input[14]: defaulting = 1, value = NULL
// input[15]: defaulting = 1, value = NULL
// input[16]: defaulting = 1, value = NULL
// input[17]: defaulting = 0, value = -2.537714e-08
// input[18]: defaulting = 0, value = 0.37962407
// window: position = (0.1211,0.2018), size = 0.6348x0.5859
//
// interactor Scalar[8]: num_components = 1, value = 0.8 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 0.05, decimal = 5, global continuous = 0
// instance: panel = 11, x = 0, y = 80, style = Stepper, vertical = 0, size = 318x38
// label: value = Color bar label scale:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Toggle[5]: num_components = 1, value = 1
// toggle : 1, set = 1, reset = 0
// instance: panel = 10, x = 18, y = 319, style = Toggle, vertical = 1, size = 178x32
// label: value = Show bounding box
//
// node Image[2]:
// depth: value = 8
// window: position = (0.3369,0.0000), size = 0.4824x0.4622
// input[1]: defaulting = 0, value = "Image_2"
// input[4]: defaulting = 0, value = 1
// input[5]: defaulting = 0, value = [50000 7750 27000]
// input[6]: defaulting = 0, value = [227336 185086 245427]
// input[7]: defaulting = 0, value = 178227.0
// input[8]: defaulting = 0, value = 480
// input[9]: defaulting = 0, value = 0.65
// input[10]: defaulting = 0, value = [0 1 0]
// input[11]: defaulting = 1, value = 30.0001
// input[12]: defaulting = 0, value = 0
// input[14]: defaulting = 0, value = 1
// input[19]: defaulting = 0, value = 0
// input[20]: defaulting = 1, value = NULL
// input[29]: defaulting = 0, value = 0
// input[30]: defaulting = 0, value = {"x", "y", "z"}
// input[31]: defaulting = 0, value = 15
// input[32]: defaulting = 1, value = {[0.000000 0.000000 0.000000] [100000.007813 15500.000977 54000.000000]}
// input[33]: defaulting = 0, value = 0
// input[34]: defaulting = 0, value = 0
// input[35]: defaulting = 1, value = NULL
// input[36]: defaulting = 0, value = 0
// input[37]: defaulting = 0, value = {"grey30", "grey5", "yellow", "white"}
// input[38]: defaulting = 0, value = {"background", "grid", "ticks", "labels"}
// input[39]: defaulting = 0, value = 0.600000
// input[41]: defaulting = 0, value = "none"
//
// interactor Toggle[3]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 12, x = 57, y = 132, style = Toggle, vertical = 1, size = 115x32
// label: value = Save frames
//
// interactor Reset[2]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 12, x = 57, y = 87, style = Toggle, vertical = 1, size = 119x32
// label: value = Create mpeg
//
// interactor String[1]: num_components = 1, value = NULL
// instance: panel = 12, x = 4, y = 0, style = Text, vertical = 1, size = 240x53
// label: value = Mpeg file name
