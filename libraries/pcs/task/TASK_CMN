*+
*  Name:
*     TASK_CMN

*  Purpose:
*     common blocks for TASK library.

*  Language:
*     VAX Fortran

*  Description:
*     {routine_description}

*  Copyright:
*     Copyright (C) 1989, 1991, 1993 Science & Engineering Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     W.F.Lupton (AAOEPP::WFL)
*     Dennis Kelly (ROE)
*     Alan Chipperfield (Starlink)
*     {enter_new_authors_here}

*  History:
*     29.04.1989:  original (AAOEPP::WFL)
*     30.04.1989:  distinguish between input and output VALUEs (AAOEPP::WFL)
*     23.04.1991:  merge into a single INCLUDE file (REVAD::BDK)
*     06.05.1991:  store CURACTNAME, use PAR__SZNAM, have
*        separate common block for characters (REVAD::BDK)
*     13.05.1991:  store INTRUPT_FLAG (REVAD::BDK)
*     24.05.1991:  remove CURMESVALUE (REVAD::BDK)
*     12.06.1991:  only store one value string, CURACTVALUE (REVAD::BDK)
*     22.08.1991:  store application requests (REVAD::BDK)
*     24.08.1993:  use subpar not par includes (RLVAD::AJC)
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*.


*
*    TASK_CURCOM - current d-task action common block
*     Holds details of the current d-task action, ie the one on whose
*     behalf the current call to ACT has been made.
*
      INTEGER CURACTPTR                    ! action pointer for current
                                           ! action
      INTEGER CURMESPATH                   ! message path resulting in
                                           ! current entry
      INTEGER CURMESMESSID                 ! message id resulting in
                                           ! current entry
      INTEGER CURMESCONTEXT                ! context in message
                                           ! resulting in entry

      INTEGER CURMESSTATUS                 ! status in message resulting
                                           ! in entry
      INTEGER CURACTCONTEXT                ! context for current action
      INTEGER CURACTNAMECODE               ! name code for current
                                           ! action
      INTEGER CURACTSEQ                    ! sequence number for current
                                           ! action

      INTEGER CURACTDELAY                  ! delay before next entry
      INTEGER CURACTREQUEST                ! request for rescheduling

      CHARACTER*(SUBPAR__NAMELEN) CURACTNAME    ! current action name
      CHARACTER*(SUBPAR__NAMELEN) CURMESNAME    ! action name in message
                                           ! resulting in entry

      CHARACTER*(MSG_VAL_LEN) CURACTVALUE  ! value string for current
                                           ! action

      COMMON / TASK_CURCOM / CURACTPTR, CURMESPATH, CURMESMESSID,
     :  CURMESCONTEXT, CURMESSTATUS, CURACTCONTEXT, CURACTNAMECODE,
     :  CURACTSEQ, CURACTDELAY, CURACTREQUEST

      COMMON / TASK_CURCOM_C / CURACTNAME, CURMESNAME, CURACTVALUE
*
*   TASK_MESCOM.INC - active subsidiary task action common block
*     Holds details of active actions that have been initiated in subsidiary
*     tasks. If an incoming message corresponds to one of the actions described
*     in this common block, it will result in an entry to ACT.
*
      INTEGER MESACTPTR(TASK__MAXSUB)      ! action pointer for initiating action
      INTEGER MESPATH(TASK__MAXSUB)        ! message path for initiated action
      INTEGER MESMESSID(TASK__MAXSUB)      ! message id for initiated action

      COMMON / TASK_MESCOM / MESACTPTR, MESPATH, MESMESSID

*
*   TASK_ASTCOM - common block for holding AST interrupt flag
*
      LOGICAL INTRUPT_FLAG                 ! flag set by TASK_ASTSIGNAL

      COMMON / TASK_ASTCOM / INTRUPT_FLAG

      SAVE / TASK_CURCOM /
      SAVE / TASK_CURCOM_C /
      SAVE / TASK_MESCOM /
      SAVE / TASK_ASTCOM /
