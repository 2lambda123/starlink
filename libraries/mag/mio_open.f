      SUBROUTINE MIO_OPEN(TAPE, ACMODE, TD, STATUS)
*+
*  Name:
*     MIO_OPEN
 
*  Purpose:
*     open a magnetic tape.
 
*  Language:
*     Starlink Fortran
 
*  Invocation:
*     CALL MIO_OPEN(DEVICE, MODE, TD, STATUS)
 
*  Description:
*     Access a tape drive with the specified access mode, and return a tape
*     descriptor which can be used to access the tape.
 
*  Arguments:
*     DEVICE=CHARACTER*(*) (Given)
*        A character string contining the name of the tape to be accessed.
*     MODE=CHARACTER*(*) (Given)
*        A character string containing the required access mode.
*        Valid modes are : 'READ', 'WRITE', 'UPDATE' (read and write).
*     TD=INTEGER (Returned)
*        A variable to contain the tape descriptor.
*     STATUS=INTEGER (Given and Returned)
*        Variable holding the status value.   If this variable is not
*        SAI__OK on input, then the routine will return without action.  If
*        the routine fails to complete, this variable will be set to an
*        appropriate error number.
*        N.B. This routine does not report its own errors.
 
*  Algorithm:
*     A free tape descriptor is obtained and the access mode is checked.   The
*     device name is then translated into an absolute reference and a channel
*     is to the tape drive is obtained using the ioc_open routine.
*     The MIO_BUF and MIO_FIL tables are then updated.
 
*  Copyright:
*     Copyright (C) 1980, 1983, 1984, 1991, 1992, 1993 Science & Engineering Research Council.
*     Copyright (C) 1995, 1996 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     Sid Wright (UCL::SLW)
*     Jon Fairclough (RAL::IPMAF)
*     {enter_new_authors_here}
 
*  History:
*     30-Jul-1980: Original. (UCL::SLW)
*     10-May-1983: Tidy up for Starlink version. (UCL::SLW)
*     22-Nov-1984: Modified MIO_BUF. (RAL::IPMAF)
*     15-Nov-1991: Changed to new style prologue (RAL::KFH)
*           Replaced tabs by spaces in end-of-line comments (RAL::KFH)
*           Changed any fac_$name into fac1_name (RAL::KFH)
*           Inserted IMPLICIT NONE (RAL::KFH)
*     15-Jan-1992: Changed to use ioc_open for Unix version.
*     22-Jan-1993:  Change include file names
*           Convert code to uppercase using SPAG (RAL::BKM)
*     29-Jun-1995: Annul errors possibly generated by MIO1_TRLN.
*      1-Oct-1996: Allow UPDATE mode (RAL::AJC)
*     {enter_further_changes_here}
 
*  Notes:
*     This is the Unix version.
 
*  Bugs:
*     {note_any_bugs_here}
 
*-
 
*  Type Definitions:
      IMPLICIT NONE
 
*  Global Constants:
      INCLUDE 'SAE_PAR'         ! Standard SAE constants
      INCLUDE 'MIO_SYS'         ! MIO Internal Constants
      INCLUDE 'MIO_ERR'         ! MIO Errors
 
*  Arguments Given:
      CHARACTER*(*) TAPE        ! tape name
      CHARACTER*(*) ACMODE      ! required access mode
 
*  Arguments Returned:
      INTEGER TD                ! tape descriptor
 
*  Status:
      INTEGER STATUS            ! status return
 
*  External References:
      INTEGER CHR_LEN           ! effective length of character string
      LOGICAL CHR_SIMLR         ! caseless string equality test
      EXTERNAL MIO1_BLK          ! Block data subprogram that
                                 ! initializes MIOINT
*  Global Variables:
      INCLUDE 'MIOBUF_CMN'
      INCLUDE 'MIOFIL_CMN'
 
*  Local Variables:
      CHARACTER*(MIO__SZNAM) TRANS   ! translated logical name
      INTEGER NCHAR             ! lenght of name
      INTEGER NAC               ! length of acmode
      INTEGER CHAN              ! channel number
 
*.
 
 
C      print *,'mio_open:status,tape,acmode',status,tape,acmode
      IF ( STATUS.NE.SAI__OK ) RETURN
 
*    Initialised ?
      IF ( .NOT.MIOINT ) CALL MIO_START(STATUS)
 
*    Get a Tape Descriptor
      CALL MIO1_GETTD(TD, STATUS)
C      print *,'mio_open:td,status',td,status
      IF ( STATUS.EQ.SAI__OK ) THEN
*       Check the access mode
         IF ( CHR_SIMLR(ACMODE,'READ')
     :   .OR. CHR_SIMLR(ACMODE,'WRITE')
     :   .OR. CHR_SIMLR(ACMODE,'UPDATE') )
     :        THEN
*          Translate device into absolute reference
*          Discard any error message generated by failure to translate
*          environment variable.
            CALL ERR_MARK
            CALL MIO1_TRLN(TAPE, TRANS)
            CALL ERR_ANNUL( STATUS )
            CALL ERR_RLSE
            NCHAR = CHR_LEN(TRANS)
            NAC = CHR_LEN(ACMODE)
 
*         Open the device
 
            CALL IOC_OPEN(TRANS, NCHAR, ACMODE, NAC, CHAN, STATUS)
 
         ELSE
            STATUS = MIO__IVACM
         END IF
 
*       Record current state
         IF ( STATUS.EQ.SAI__OK ) THEN
            MNAME(TD) = TAPE
            MTRANS(TD) = TRANS(1:NCHAR)
            MACMOD(TD) = ACMODE
            MFREE(TD) = .FALSE.      ! Mark buffer as in use
            MCHAN(TD) = CHAN
            MRECSZ(TD) = 0
            MBLKSZ(TD) = 0
            MNBYTE(TD) = 0
         END IF
      END IF
 
C      print *,'mio_open:status',status
      END
