These are the standard RAL GKS files with three exceptions:

gkcell.f has a bona fide bug fix

gkesc.f returns an error code 180 for escapes other than -1 and -2

gkvers.f disables printing on the GKS version to stdout on initialisation.
         This is simply commented out. We could enable this via a preprocessor
         directive if it needs to be resurrected.

gprec.f  Fix include of check.inc to use ../include

gesc.f   Add escape -3

It is the combined files from both the original 'sources' (the 
gk* files) directory and the 'fortran' directory.

All files compile to libgks_base.la for later inclusion into the
normal libgks library by the parent directory.

Note that in the original RAL GKS distribution optimization for gkclip.f
was disabled on sun3 and sun4 platforms.

Files also added from the machine specific system directories:

 gkan1.f - was not machine specific in any meaningful sense
 gkaton.f - "   "

 gkdate.f - mainly Uses IDATE(IARRAY)
        + Some use 1900 offset
        + disabled on RS6000
        + MIPS uses IDATE(MONTH,DAY,YEAR)
        + Cray uses DATE() function which returns different format
          to g77 DATE() builtin
        + Use DATE_AND_TIME Fortran intrinsic.
  GKS does not want the 4 digit year!
  Now runs with autoconf
  Should just use PSX_LOCALTIME

 gkdfop.f - Add READONLY check to open. Use .fpp

 gkfobo.f - no system specific interface

 gkfoco.f - Some versions use GKBUG, others just set the error
            Use the GKBUG version

 gkiobi.fpp
 gkiobo.fpp
 gkioco.fpp
 gkioci.fpp  - Check for FPUTC/FGETC intrinsics
               Also check for presence of FLUSH
 
 gkiocl.f    - Most systems identical (give or take a tweak
               that was not really required and only worked for Suns).
               Special code for cray and indigo currently
               ignored. [which were themselves identical]

 gkiofi.f    - no system specific code

 gkiofo.fpp  - Need to switch on LSHIFT vs SHIFTL vs ISHFT
                                 RSHIFT vs SHIFTR vs ISHFT
                                 AND vs IAND and OR vs IOR
               Include RS6000 tweak

 gkioop.f.in - Very different on different platforms.
               Use most current (solaris, alpha, linux) version as root
	       Older versions do not use GKDFOP routine
               Solaris version seems to be the same as linux and
               alpha versions except that Solaris uses UNIT=(A+B) syntax
               Note that CSSFN is disabled on Linux.
	       Presumably because SCRATCH files do not need a filename.
	       [verified in Balfour and Marwick]
               Use configure to insert version number into file names.

  gklor.fpp
  gkland.fpp - simple configure tests. Could use these functions in
               gkiofo.fpp to simplify that ifdef forest

  gkna1.f    - no system specific code
  ggkntoa.f  - no system specific code

  lnblnk.f   - no system specific code BUT this is sometimes a builtin
               (seemingly except for MIPS and RS6000) so should not
               really be required. Can be removed.

  gktime.fpp - Use ITIME built in. RS6000 does not allow this.
               Cray uses CLOCK builtin
               Should just use PSX_LOCALTIME

C routines
----------

  The three C routines:  gkgtsp_.c  gkiosb_.c gktset_.c

Are complicated and C portability issues carefully analyzed.
In addition to the non-portable C there is a fundamental requirement
that we can map a Fortran unit number to a Unix file descriptor.

It does not seem to be as complicated as first look would suggest since
all three of the above routines

  - Get the file stream
  - Translate to file descriptor
  - Check if isatty and do nothing if it is not a tty

ie all that is really required is for a ISATTY(LUN) function
to work.

At least g77 and Sun fortran supply ISATTY(LUN) directly.
They also supply a GETFD builtin.

g95, gfortran and g77 also have a FNUM function to return the file
descriptor.

Since we know that STDIN, STDOUT and STDERR are the only units
that can be a tty, we can simplify things by writing a GETFD
replacement that uses the builtin GETFD when available, else
maps the standard fortran unit number 0, 5 and 6 to stderr,stdin
and stdout, and ignores normal files.

  getfd.fpp does this.


C routine modifications:

  gktset.c     - rewritten for autoconf. Supports both the
                  termio and sgtty approach.

  gkgtsp.c      - rewritten for autoconf similarly to gktset.c

  gkiosb.c      -  "     "

Include files
=============

  f77_type.h    - needed although a switch to CNF is obvious.
  gkerr.h       - no system specific changes

  gkwca.h
  gkdt.h        - Cray does not require underscore in common block
                  name



Notes on Logical Unit to Unix Stream mapping
============================================

Note also that if fputc and fgetc are not present we will have to
provide an interface for them. These are posix routines and in
principal could be added to the PSX library. The real problem is that
in the case of fputc/fgetc we do need a means of translating Fortran
unit number to unix file stream. For the present a simple fallback
set of fputc and fgetc implementations are provided in getputc.c. These
use raw reads and writes to the file descriptors, avoiding the overhead
of wrapping into a stream, but beware.

Need to find out what the current status of FPUTC/FGETC/FLUSH 
intrinsics are. They are built in on g77, Sun Fortran and alpha
fortran.

For completeness, the following techniques are used by GKS to
do this mapping:

-   Suns provide a mapunit() function in the Fortran runtime library
    specifically so that this can be called from C

       FILE * mapunit( lun ) 

    How does configure find a C function in the Fortran runtime library?

-   g77 suggests using the fio.h header that comes with g77 (but which
    is not installed by g77) to get details of the C struct used internally
    that exposes the underlying FILE*.

     #define mapunit(channel) (f__units[channel].ufd)

    Other lunit.h files indicate that this technique is common on non-suns.
    (eg cray).

-   Use the GETFD intrinsic and from that use fdopen to get the FILE*
    (presumably using "ab").
    Note that this involves opening a stream and therefore this stream
    must be closed. Not sure if this approach can work with fgetc/fputc
    The systems that use this approach seem to do it purely to get the
    file descriptor (for isatty) and not the stream.

-   Use GETFILEP to get the FILE* directly in Fortran. Not portable. Sun only.
    Not needed because suns provide other methods.

-   Write simple wrapper (maplun.f/gkstrm_.c) that will take a unit
    and convert it to a filename using INQUIRE. Then reopen that file
    with fopen(name,"ab") and return the FILE*. This has to be closed.
    Note that maplun.f has special code for units 5 and 6 but then returns
    the file descriptor and not the FILE*. Must be a bug but implies that
    the code never worked  since isatty will only be true for
    stdout and stderr (and not for an actual file). This approach used
    on alpha/OSF1.
