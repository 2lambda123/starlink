      SUBROUTINE GKCRCE (XPTS,YPTS,XCEN,YCEN,RADIUS,THETA,ISTAT)
*----------------------------------------------------------------
*
*
*  GKS Function name:  UTILITY
*  Author:             KEVP
*
      INCLUDE '../include/check.inc'
*
*  PURPOSE
*  -------
*     Find centre, radius and turning angle for a
*     circular arc, defined by three points on it
*     This should be a utility (suggested name GKCRCE) in GKCRCS
*
*  MAINTENANCE LOG
*  ---------------
*     08/02/88  KEVP  Created  (based on part of old GKCRCS)
*     18/04/88  KEVP  Deleted GOTO statement, redundant from IF block
*     16/11/89  RMK   Removed unused local variables.
*     04/04/90  KEVP  Corrected centre calculation for anti-clockwise
*                     arc and used QTOL for comparing real numbers.
*
*  ARGUMENTS
*  ---------
*     INP XPTS,YPTS  Array of 3 points defining arc
*                    Arc starts at first point ends at third point
*                    and has second point in between
*     OUT XCEN,YCEN  The centre of the circle which the arc belongs
*     OUT RADIUS     The radius of this circle
*     OUT THETA      The angle of turn of the arc (-ve if clockwise)
*     OUT ISTAT      Status 0=bounded arc, 1=full circle, 2=line
*
      REAL XPTS(3),YPTS(3), XCEN,YCEN, RADIUS, THETA
      INTEGER ISTAT
*
*  COMMON BLOCK USAGE
*  ------------------
      INCLUDE '../include/gkmc.par'
*     for QTOL machine dependent tolerance for comparing reals
*
*  LOCALS
*  ------
*     XA,YA      arc start  A
*     XB,YB      intermediate point on arc  B
*     XC,YC      arc end  C
*
*     XAO,YAO    vector from A to CEN
*     XCO,YCO    vector from C to CEN
*
*     XAB,YAB    vector from A to B
*     XBC,YBC    vector from B to C
*     XAC,YAC    vector from A to C
*
*     AB2        square of distance between A and B
*     AC2        square of distance between A and C
*     ABC        cross product of AB and BC
*     ABC2       twice ABC2
*     AREA       area of parallelogram defined by arc points
*     BC2        square of distance between B and C
*     ICLOCK     direction of arc turn (+1 Anticlockwise, -1 Clockwise)
*     JENDS      ISTAT: Arc with end points
*     JFULL      ISTAT: Full Circle
*     JLINE      ISTAT: Line
*     THCOS,THSIN    Trig functions of THETA
*     TWOPI      Two PI

      REAL XA,YA,XB,YB,XC,YC
      REAL XAO,YAO,XCO,YCO,XAB,YAB,XBC,YBC,XAC,YAC,AC2
      REAL AB2,BC2,ABC,ABC2,AREA,THCOS,THSIN,TWOPI
      INTEGER ICLOCK, JENDS,JFULL,JLINE
      PARAMETER (JENDS=0, JFULL=1, JLINE=2)

*
*  COMMENTS
*  --------
*     In the event of the three points being collinear
*     ISTAT is set to JLINE
*     XCEN,YCEN and RADIUS are invalid
*     and THETA is set to 0.0 .
*     If the circle is full ISTAT is set to JFULL.
*     This eliminates the need to compare THETA with TWOPI
*     in order to determine this.
*
*     Any one system of coordinates can be used for which the arc is
*     circular. If the number of points on the curve is determined
*     by the utility GKCRCN, world coordinates should be used.
*
*  ALGORITHM
*  ---------
*     1: If end points are so close as to be equal
*        take centre as halfway point etc.
*        Set status to JFULL and quit.
*
*     2: Find area of paralellogram generated by the three points.
*
*     3: If this area is close to 0, the points are collinear
*        and treat as straight line between end points.
*        Set status to JLINE and quit.
*
*     4: Otherwise, calculate centre of arc's circle.
*
*     5: Calculate radius and arc angle.
*
*--------------------------------------------------------------------
*
*     Set TWOPI
      TWOPI = 8.0*ATAN(1.0)

*     Set points A, B and C
      XA = XPTS(1)
      YA = YPTS(1)
      XB = XPTS(2)
      YB = YPTS(2)
      XC = XPTS(3)
      YC = YPTS(3)
*
*     Set differences
      XAB = XB - XA
      YAB = YB - YA
      AB2 = XAB*XAB + YAB*YAB
      XAC = XC - XA
      YAC = YC - YA
      AC2 = XAC*XAC + YAC*YAC
*
*     -- if [A]=[C] treat arc as a circle assuming [B] is directly
*     --    opposite [A],[C]
      IF (AC2 .LT. QTOL*AB2) THEN
         XCEN   = (XA+XB)/2
         YCEN   = (YA+YB)/2
         RADIUS = SQRT((XA-XCEN)*(XA-XCEN) + (YA-YCEN)*(YA-YCEN))
         THETA  = TWOPI
         ISTAT  = JFULL
         GOTO 999
      ENDIF

*     Derive necessary quantities
      XBC = XC - XB
      YBC = YC - YB
      BC2 = XBC*XBC + YBC*YBC
      ABC  = XAB*YBC - XBC*YAB
      AREA = ABS(ABC)
      ABC2 = 2*ABC
      IF (AREA.LT.QTOL*(AB2+BC2)) THEN
*        -- colinear points --
         THETA  = 0.0
         ISTAT  = JLINE
      ELSE
*       -- normal case for arc --
        ISTAT = JENDS
        ICLOCK = NINT(ABC/AREA)
        XCEN = XB - (AB2*YBC + BC2*YAB)/ABC2
        YCEN = YB + (AB2*XBC + BC2*XAB)/ABC2
*       -- Obtain details of arc angle --
        XAO    = XCEN-XA
        YAO    = YCEN-YA
        XCO    = XCEN-XC
        YCO    = YCEN-YC
        RADIUS = SQRT(XAO*XAO + YAO*YAO)
        THCOS  = XAO*XCO + YAO*YCO / RADIUS*RADIUS
        THSIN  = XAO*YCO - XCO*YAO / RADIUS*RADIUS
        THETA  = ATAN2(THSIN,THCOS)
*       -- If arc is anticlockwise put THETA in (0:TWOPI)
        IF(ICLOCK .GT. 0)THEN
          IF(THETA .LT. 0)THETA = THETA + TWOPI
        ELSE
*       -- If arc is clockwise put THETA in (-TWOPI:0)
          IF(THETA .GT. 0)THETA = THETA - TWOPI
        ENDIF
      ENDIF
  999 CONTINUE
      END
