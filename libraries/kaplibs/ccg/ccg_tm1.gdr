      SUBROUTINE CCG_TM1<T>( ALPHA, NPIX, NLINES, STACK, VARS, MINPIX,
     :                     NMAT, COVEC, RESULT, RESVAR, WRK1, POINT,
     :                     USED, NCON, NBAD, STATUS )
*+
*  Name:
*     CCG_TM1x

*  Purpose:
*     Combines data lines using a trimmed mean.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG_TM1x( ALPHA, NPIX, NLINES, STACK, VARS, MINPIX, NMAT,
*                    COVEC, RESULT, RESVAR, WRK1, POINT, USED,
*                    NCON, NBAD, STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data.  The data values in the lines are then combined to
*     form an alpha trimmed mean line.  The output means are returned in
*     the array RESULT.  The variances are propagated through the
*     combination process and returned in the RESVAR array.

*  Arguments:
*     ALPHA = REAL (Given)
*        The fraction of data to trim from upper and lower orders.
*        It must be greater than 0.0 and less than 0.5.
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     VARS( NPIX, NLINES ) = ? (Given)
*        The data variances.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     NMAT = INTEGER (Given)
*        Size of the first dimension of COVEC.
*     COVEC( NMAT, NLINES ) = DOUBLE PRECISION (Given)
*        The packed variance-covariance matrix of the order statistics
*        from a normal distribution of sizes up to NLINES, produced by
*        CCD1_ORVAR.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of data.
*     RESVAR( NPIX ) = ? (Returned)
*        The output variance.
*     WRK1( NLINES ) = ? (Returned)
*        Workspace for calculations.
*     POINT( NLINES ) = INTEGER (Returned)
*        Workspace to hold pointers to the original positions of the
*        data before extraction and conversion in to the WRK1 array.
*     USED( NLINES ) = LOGICAL (Returned)
*        Workspace used to indicate which values have been used in
*        estimating a resultant value.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     NBAD = INTEGER (Returned)
*        The number of bad values in the output array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for real and double-precision: replace "x"
*     in the routine name by D or R as appropriate.  The STACK, VARS,
*     RESULT, RESVAR, WRK1, and WRK2 arguments supplied to the routine
*     must have the data type specified.

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     BRADC: Brad Cavanagh (JAC)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     20-MAY-1992 (PDRAPER):
*        Original version.
*     11-OCT-2004 (BRADC):
*        No longer use NUM_CMN.
*     2006 August 6 (MJC):
*        Exclude data with non-positive variance.
*     2009 July 4 (MJC):
*        Converted to generic and renamed from CCG_BM1x.  Added NBAD
*        argument.  Moved STACK, NMAT, and NCON to the normal order in
*        the API.  Made NCON Returned and therefore it is initialised.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      REAL ALPHA
      INTEGER NPIX
      INTEGER NLINES
      <TYPE> STACK( NPIX, NLINES )
      <TYPE> VARS( NPIX, NLINES )
      INTEGER MINPIX
      INTEGER NMAT
      DOUBLE PRECISION COVEC( NMAT, NLINES )

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> RESVAR( NPIX )
      <TYPE> WRK1( NLINES )
      <TYPE> WRK2( NLINES )
      INTEGER POINT( NLINES )
      LOGICAL USED( NLINES )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      INTEGER NGOOD              ! Number of good pixels
      DOUBLE PRECISION SUM       ! Sum of inverse variance
      DOUBLE PRECISION VAL       ! Weighted median
      DOUBLE PRECISION VAR       ! Population variance

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned values.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

*  Loop over for all possible output pixels.
      DO 1 I = 1, NPIX
         NGOOD = 0
         CALL NUM_CLEARERR()
         SUM = 0.0D0

*  Loop over all possible contributing pixels.
         DO 2 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> .AND.
     :            VARS( I, J ) .NE. VAL__BAD<T> .AND.
     :            VARS( I, J ) .GT. VAL__SML<T> ) THEN

*  Increment good value counter.
               NGOOD = NGOOD + 1

*  Update the pointers to the positions of the unextracted data.
               POINT( NGOOD ) = J

*  Copy data into work buffer, so we can process a line at a time.
               WRK1( NGOOD ) = STACK( I, J )

*  Sum inverse variances.
               SUM = SUM + 1.0D0 / NUM_<T>TOD( VARS( I, J ) )

*  Trap conversion failures.
               IF ( .NOT. NUM_WASOK() ) THEN

*  Decrement NGOOD, do not let it go below zero.
                  NGOOD = MAX( 0, NGOOD - 1 )
                  CALL NUM_CLEARERR()
               END IF
            END IF
    2    CONTINUE

*  Continue if more than one good value.
         IF ( NGOOD .GT. 1 ) THEN

*  Sort these values into increasing order.
            CALL CCG_IS2<T>( NGOOD, WRK1, POINT, STATUS )

*  Create population variance.
            SUM = 1.0D0 / SUM

*  Find the trimmed mean.
            CALL CCG_TRM2<T>( ALPHA, NGOOD, WRK1, SUM, USED,
     :                      COVEC( 1, NGOOD ), VAL, VAR, STATUS )

*  Update the used line counters.
            DO 3 J = 1, NGOOD
               IF ( USED ( J ) ) THEN
                  NCON( POINT( J ) ) = NCON( POINT( J ) ) + 1.0D0
               END IF
    3       CONTINUE

         ELSE IF ( NGOOD .EQ. 1 ) THEN 

*  Population of one value - just use it.
            VAR = 1.0D0 / SUM
            VAL = NUM_<T>TOD( WRK1( NGOOD ) )
         END IF

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN
            RESULT( I ) = NUM_DTO<T>( VAL )
            RESVAR( I ) = NUM_DTO<T>( VAR )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               RESVAR( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid.
            RESULT( I ) = VAL__BAD<T>
            RESVAR( I ) = VAL__BAD<T>
            NBAD = NBAD + 1
         END IF
    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
