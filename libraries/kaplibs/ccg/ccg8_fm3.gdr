      SUBROUTINE CCG8_FM3<T>( NPIX, NLINES, STACK, MINPIX, RESULT,
     :                     WRK1, POINT, USED, NCON, NBAD, STATUS )
*+
*  Name:
*     CCG8_FM3x

*  Purpose:
*     Combines data lines using a fast median.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG8_FM3x( NPIX, NLINES, STACK, MINPIX, RESULT, WRK1, NCON,
*                    POINT, USED, NCON, NBAD, STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data. The data values in the lines are then combined to
*     form a (fast) median line.  This method uses no weights and
*     returns no variances.
*
*     The method used is based on Wirth's algorithm for selecting the
*     Kth value, which is very fast compared to a full sort.
*
*     The output medians are returned in the array RESULT.

*  Arguments:
*     NPIX = INTEGER*8 (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER*8 (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     MINPIX = INTEGER*8 (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of data.
*     WRK1( NLINES ) = ? (Returned)
*        Workspace for calculations.
*     POINT( NLINES ) = INTEGER*8 (Returned)
*        Workspace to hold pointers to the original positions of the
*        data before extraction and conversion in to the WRK1 array.
*     USED( NLINES ) = LOGICAL (Returned)
*        Workspace used to indicate which values have been used in
*        estimating a resultant value.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     NBAD = INTEGER*8 (Returned)
*        The number of bad values in the output array created while
*        forming the statistics.  It excludes those bad values whose
*        corresponding values along the collapse axis are all bad.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for real and double-precision: replace "x"
*     in the routine name by D or R as appropriate.  The STACK, RESULT,
*     and WRK1 arguments supplied to the routine must have the data type
*     specified.

*  Copyright:
*     Copyright (C) 1998, 2004 Central Laboratory of the Research
*     Councils. Copyright (C) 2009 Science & Technology Facilities
*     Council. All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     BRADC: Brad Cavanagh (JAC)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     18-NOV-1998 (PDRAPER):
*        Original version.
*     11-OCT-2004 (BRADC):
*        No longer use NUM_CMN.
*     2009 July 3 (MJC):
*        Converted to generic and renamed from CCG8_FMR3R.  Added NBAD
*        argument.  Moved STACK to the normal order in the API.
*     2009 July 4 (MJC):
*         Made NCON Returned and therefore it is initialised.  Move NCON
*         to just before NBAD in API for consistency.
*     2009 July 17 (MJC):
*        Do not include collapsed data comprising only bad values
*        in argument NBAD.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER*8 NPIX
      INTEGER*8 NLINES
      <TYPE> STACK( NPIX, NLINES )
      INTEGER*8 MINPIX

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> WRK1( NLINES )
      INTEGER*8 POINT( NLINES )
      LOGICAL USED( NLINES )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER*8 NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Constants:
      DOUBLE PRECISION PIBY2
      PARAMETER ( PIBY2 = 1.57079632679  ) ! PI/2.0

*  Local Variables:
      INTEGER*8 I                ! Loop variable
      INTEGER*8 IMED             ! Position of median value
      INTEGER*8 J                ! Loop variable
      DOUBLE PRECISION MEDIAN    ! Weighted median
      INTEGER*8 NGOOD            ! Number of good pixels
      DOUBLE PRECISION SUM       ! Variance sum
      <LTYPE> VAL                ! Second median for even-numbered

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned values.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Avoid confusing the optimiser.
      MEDIAN = 0.0D0

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

*  Loop over for all possible output pixels.
      DO 1 I = 1, NPIX
         NGOOD = 0
         CALL NUM_CLEARERR()
         SUM = 0.0D0

*  Loop over all possible contributing pixels.
         DO 2 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> ) THEN

*  Increment good value counter.
               NGOOD = NGOOD + 1

*  Update the pointers to the positions of the unextracted data.
               POINT( NGOOD ) = J

*  Copy data into work buffer, so we can process a line at a time.
               WRK1( NGOOD ) = STACK( I, J )

*  Trap conversion failures.
               IF ( .NOT. NUM_WASOK() ) THEN

*  Decrement NGOOD, do not let it go below zero.
                  NGOOD = MAX( 0, NGOOD - 1 )
                  CALL NUM_CLEARERR()
               END IF
            END IF
    2    CONTINUE

*  Continue if more than one good value.
         IF ( NGOOD .GT. 0 ) THEN

*  If only one value is available then this is the median.
            IF ( NGOOD .EQ. 1 ) THEN
               MEDIAN = NUM_<T>TOD( WRK1( 1 ) )
            ELSE

*  Get position at median, or one above (for even)
               IMED = NGOOD / 2 + 1

*  If number is even we need the central two values.
               IF ( MOD( NGOOD, 2_8 ) .EQ. 0 ) THEN

*  Select the two values needed for median, update the used counters.
                  CALL CCG8_KTH<T>( NGOOD, IMED, WRK1, POINT, VAL,
     :                           STATUS )
                  MEDIAN = NUM_<T>TOD( VAL )
                  NCON( POINT( IMED ) ) = NCON( POINT( IMED ) ) + 1.0D0

                  IMED = IMED - 1
                  CALL CCG8_KTH<T>( NGOOD, IMED, WRK1, POINT, VAL,
     :                           STATUS )
                  NCON( POINT( IMED ) ) = NCON( POINT( IMED ) ) + 1.0D0

*  Median is mean of these two values.
                  MEDIAN = ( MEDIAN + NUM_<T>TOD( VAL ) ) * 0.5D0
               ELSE

*  Straight-forward case.
                  CALL CCG8_KTH<T>( NGOOD, IMED, WRK1, POINT, VAL,
     :                           STATUS )
                  NCON( POINT( IMED ) ) = NCON( POINT( IMED ) ) + 1.0D0
                  MEDIAN = NUM_<T>TOD( VAL )
               END IF
            END IF
         END IF

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN
            RESULT( I ) = NUM_DTO<T>( MEDIAN )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid unless all of them
*  are bad.
            RESULT( I ) = VAL__BAD<T>
            IF ( NGOOD .GT. 0 ) NBAD = NBAD + 1
         END IF
    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
