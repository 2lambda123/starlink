      SUBROUTINE CCG8_TC3<T>( VMIN, VMAX, NPIX, NLINES, STACK, VARS,
     :                     MINPIX, RESULT, WRK1, WRK2, POINT, USED,
     :                     NCON, NBAD, STATUS )
*+
*  Name:
*     CCG8_TC3x

*  Purpose:
*     Combines data lines using a threshold-clipped mean.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG8_TC3x( VMIN, VMAX, NPIX, NLINES, STACK, VARS, MINPIX,
*                    RESULT, WRK1, WRK2, POINT, USED, NCON, NBAD,
*                    STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data.  All values outside of the range VMIN to VMAX are
*     rejected before a estimate of the (weighted) mean is made.  The
*     output mean values are returned in the array RESULT.

*  Arguments:
*     VMIN = ? (Given)
*       Minimum allowed value.
*     VMAX = ? (Given)
*       Maximum allowed value.
*     NPIX = INTEGER*8 (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER*8 (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     VARS( NLINES ) = ? (Given)
*        The variance to to used for each line of data.
*     MINPIX = INTEGER*8 (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of data.
*     WRK1( NLINES ) = ? (Returned)
*        Workspace for calculations.
*     WRK2( NLINES ) = ? (Returned)
*        Workspace for calculations.
*     POINT( NLINES ) = INTEGER*8 (Returned)
*        Workspace to hold pointers to the original positions of the
*        data before extraction and conversion in to the WRK1 array.
*     USED( NLINES ) = LOGICAL (Returned)
*        Workspace used to indicate which values have been used in
*        estimating a resultant value.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for real and double-precision: replace "x"
*     in the routine name by D or R as appropriate.  The VMIN, VMAX,
*     STACK, VARS, RESULT, WRK1, and WRK2 arguments supplied to the
*     routine must have the data type specified.

*  Copyright:
*     Copyright (C) 1992 Science & Engineering Research Council.
*     Copyright (C) 2004 Central Laboratory of the Research Councils.
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2009 Science & Technology Facilities Council. All
*     Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     BRADC: Brad Cavanagh (JAC)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     19-MAY-1992 (PDRAPER):
*        Original version.
*     11-OCT-2004 (BRADC):
*        No longer use NUM_CMN.
*     2006 April 12 (MJC):
*        Remove unused variable.
*     2006 August 6 (MJC):
*        Exclude data with non-positive or bad variance.
*     2009 July 2 (MJC):
*        Converted to generic and renamed from CCG8_TCR3R.  Added NBAD
*        argument.  Made VARS, VMIN, and VMAX take the generic type.
*        Moved STACK to the normal order in the API.
*     2009 July 4 (MJC):
*         Made NCON Returned and therefore it is initialised.  Move NCON
*         to just before NBAD in API for consistency.
*     2009 July 17 (MJC):
*        Do not include collapsed data comprising only bad values
*        in argument NBAD.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      REAL VMIN
      REAL VMAX
      INTEGER*8 NPIX
      INTEGER*8 NLINES
      <TYPE> STACK( NPIX, NLINES )
      <TYPE> VARS( NLINES )
      INTEGER*8 MINPIX

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> WRK1( NLINES )
      <TYPE> WRK2( NLINES )
      INTEGER*8 POINT( NLINES )
      LOGICAL USED( NLINES )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER*8 NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER*8 I                ! Loop variable
      INTEGER*8 IGOOD            ! Number of unrejected pixels
      INTEGER*8 J                ! Loop variable
      DOUBLE PRECISION MEAN      ! Weighted mean
      INTEGER*8 NGOOD            ! Number of good pixels
      DOUBLE PRECISION SUM1      ! Weight sums
      DOUBLE PRECISION SUM2      ! Weighted value sums
      DOUBLE PRECISION WEIGHT    ! Weight

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned values.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Avoid confusing the optimiser.
      MEAN = 0.0D0

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

*  Loop over for all possible output pixels.
      DO 1 I = 1, NPIX
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels.
         DO 2 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> .AND.
     :           VARS( J ) .NE. VAL__BAD<T> .AND.
     :           VARS( J ) .GT. VAL__SML<T> ) THEN

*  Increment good value counter.
               NGOOD = NGOOD + 1

*  Update the pointers to the positions of the unextracted data.
               POINT( NGOOD ) = J

*  Copy data into work buffer, so we can process a line at a time.
               WRK1( NGOOD ) = STACK( I, J )

*  Change variance to weight.
               WRK2( NGOOD ) = 1.0D0 / VARS( J )

*  Finally trap numeric errors by rejecting all values.
               IF ( .NOT. NUM_WASOK() ) THEN

*  Decrement NGOOD, do not let it go below zero.
                  NGOOD = MAX( 0, NGOOD - 1 )
                  CALL NUM_CLEARERR()
               END IF
            END IF
    2    CONTINUE

*  Continue if more than one good value.
         IF ( NGOOD .GT. 0 ) THEN

*  Clip unwanted data.
            CALL CCG8_CLIP<T>( VMIN, VMAX, NGOOD, WRK1, IGOOD, STATUS )

*  Now form mean.
            IF ( IGOOD .GT. 0 ) THEN

*  Initialise sums.
               SUM1 = 0.0D0
               SUM2 = 0.0D0
               DO 3 J = 1, NGOOD
                  IF ( WRK1( J ) .NE. VAL__BAD<T> ) THEN

*  Increment sums.
                     WEIGHT = NUM_<T>TOD( WRK2( J ) )
                     SUM2 = SUM2 + NUM_<T>TOD( WRK1( J ) ) * WEIGHT
                     SUM1 = SUM1 + WEIGHT
                     USED( J ) = .TRUE.
                  ELSE
                     USED( J ) = .FALSE.
                  END IF
    3          CONTINUE

*  New mean.
               MEAN = SUM2 / SUM1

*  Increment line used buffer.
               DO 4 J = 1, NGOOD
                  IF ( USED ( J ) ) THEN
                     NCON( POINT( J ) ) = NCON( POINT( J ) ) + 1.0D0
                  END IF
    4          CONTINUE

*  Trap occasions when all values are rejected.
            ELSE
               NGOOD = 0
            END IF
         END IF

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN
            RESULT( I ) = NUM_DTO<T>( MEAN )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid unless all of them
*  are bad.
            RESULT( I ) = VAL__BAD<T>
            IF ( NGOOD .GT. 0 ) NBAD = NBAD + 1
         END IF
    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
