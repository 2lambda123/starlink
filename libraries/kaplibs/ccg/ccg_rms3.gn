      SUBROUTINE CCG_RMS3<T>( NPIX, NLINES, STACK, MINPIX,
     :                      RESULT, NCON, NBAD, STATUS )
*+
*  Name:
*     CCG_RMS3x

*  Purpose:
*     Combines data lines using the root mean square.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG_RMS3x( NPIX, NLINES, STACK, MINPIX, RESULT, RESVAR,
*                     NCON, NBAD, STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data.  The data values in each lines are then combined to
*     form the roor mean square of the values.  The output rot mean
*     squares are returned in the array RESULT.

*  Arguments:
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of data.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     NBAD = INTEGER (Returned)
*        The number of bad values in the output array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  This routine performs its work in double precision.
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate.  The
*     STACK and RESULT arguments supplied to the routine must
*     have the data type specified.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2005 December 28 (MJC):
*        Original version.
*     2007 March 15 (MJC):
*        Compute the root mean square not the mean square.
*     2009 July 4 (MJC):
*        Renamed from CCG1_CS1x.  Added NBAD argument.  Moved STACK and
*        NCON to the normal order in the API.  Made NCON Returned and 
*        therefore it is initialised.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER NPIX
      INTEGER NLINES
      <TYPE> STACK( NPIX, NLINES )
      INTEGER MINPIX

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      INTEGER NGOOD              ! Number of good pixels
      DOUBLE PRECISION SUMSQ     ! Sum of squared values
      DOUBLE PRECISION VAL       ! Present data value

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEC_<T>'      ! NUM_ functions
      INCLUDE 'NUM_DEF_CVT'      ! Define conversion functions...
      INCLUDE 'NUM_DEF_<T>'      ! Define functions...

*.

*  Initialise returned values.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Establish the numeric error handler.
      CALL NUM_HANDL( NUM_TRAP )
      DO 1 I = 1, NPIX

*  Loop over for all possible output pixels.  Initialise sums.
         SUMSQ = 0.0D0

*  Set good pixel count and reset num_error from any errors that have
*  occurred.
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels forming weighted mean
*  sums.
         DO 5 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> ) THEN

*  Convert input type to double precision before forming sums should be
*  no numeric errors on this attempt.
               VAL = NUM_<T>TOD( STACK( I, J ) )

*  Conversion increment good-value counter.
               NGOOD = NGOOD + 1

*  Form mean sum, and sum of the squares.
               SUMSQ = SUMSQ + ( VAL * VAL )

*  Update the contribution buffer; all values contribute when forming
*  the mean.
               NCON( J ) = NCON( J ) + 1.0D0
            END IF
    5    CONTINUE

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            ELSE

*  Calculate the rms.
               RESULT( I ) = NUM_SQRT<T>( 
     :                       NUM_DTO<T>( SUMSQ / DBLE( NGOOD ) ) )
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid.
            RESULT( I ) = VAL__BAD<T>
            NBAD = NBAD + 1
         END IF

    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
