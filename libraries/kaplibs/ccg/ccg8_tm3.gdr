      SUBROUTINE CCG8_TM3<T>( ALPHA, NPIX, NLINES, STACK, MINPIX,
     :                       RESULT, WRK1, POINT, USED, NCON, NBAD,
     :                       STATUS )
*+
*  Name:
*     CCG8_TM3x

*  Purpose:
*     Combines data lines using a trimmed mean.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG8_TM3x( ALPHA, NPIX, NLINES, STACK, MINPIX, RESULT,
*                    WRK1, POINT, USED, NCON, NBAD, STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data.  The data values in the lines are then combined to
*     form an alpha trimmed mean line.  The output means are returned in
*     the array RESULT.

*  Arguments:
*     ALPHA = REAL (Given)
*        The fraction of data to trim from upper and lower orders.
*        It must be greater than 0.0 and less 0.5.
*     NPIX = INTEGER*8 (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER*8 (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     MINPIX = INTEGER*8 (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of data.
*     WRK1( NLINES ) = ? (Returned)
*        Workspace for calculations.
*     POINT( NLINES ) = INTEGER*8 (Returned)
*        Workspace to hold pointers to the original positions of the
*        data before extraction and conversion in to the WRK1 array.
*     USED( NLINES ) = LOGICAL (Returned)
*        Workspace used to indicate which values have been used in
*        estimating a resultant value.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels.
*     NBAD = INTEGER*8 (Returned)
*        The number of bad values in the output array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for real and double-precision: replace "x"
*     in the routine name by D or R as appropriate.  The STACK, RESULT,
*     and WRK1 arguments supplied to the routine must have the data type
*     specified.

*  Copyright:
*     Copyright (C) 1992 Science & Engineering Research Council.
*     Copyright (C) 2004 Central Laboratory of the Research Councils.
*     Copyright (C) 2009 Science & Technology Facilities Council. All
*     Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     BRADC: Brad Cavanagh (JAC)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     19-MAY-1992 (PDRAPER):
*        Original version.
*     11-OCT-2004 (BRADC):
*        No longer use NUM_CMN.
*     2009 July 2 (MJC):
*        Converted to generic and renamed from CCG8_TMR3R.  Added NBAD
*        argument.  Moved STACK to the normal order in the API.
*     2009 July 4 (MJC):
*        Made NCON Returned and therefore it is initialised.  Move NCON
*        to just before NBAD in API for consistency.
*     2009 July 17 (MJC):
*        Do not include collapsed data comprising only bad values
*        in argument NBAD.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      REAL ALPHA
      INTEGER*8 NPIX
      INTEGER*8 NLINES
      <TYPE> STACK( NPIX, NLINES )
      INTEGER*8 MINPIX

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> WRK1( NLINES )
      INTEGER*8 POINT( NLINES )
      LOGICAL USED( NLINES )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER*8 NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER*8 I                ! Loop variable
      INTEGER*8 J                ! Loop variable
      INTEGER*8 NGOOD            ! Number of good pixels
      DOUBLE PRECISION VAL       ! Weighted median

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned values.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

*  Loop over for all possible output pixels.
      DO 1 I = 1, NPIX
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels.
         DO 2 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> ) THEN

*  Increment good value counter.
               NGOOD = NGOOD + 1

*  Update the pointers to the positions of the unextracted data.
               POINT( NGOOD ) = J

*  Copy data into work buffer, so we can process a line at a time.
               WRK1( NGOOD ) = STACK( I, J )

*  Trap conversion failures.
               IF ( .NOT. NUM_WASOK() ) THEN

*  Decrement NGOOD, do not let it go below zero.
                  NGOOD = MAX( 0, NGOOD - 1 )
                  CALL NUM_CLEARERR()
               END IF
            END IF
    2    CONTINUE

*  Continue if more than one good value.
         IF ( NGOOD .GT. 1 ) THEN

*  Sort these values into increasing order.
            CALL CCG8_IS2<T>( NGOOD, WRK1, POINT, STATUS )

*  Find the trimmed mean.
            CALL CCG8_TRM3<T>( ALPHA, NGOOD, WRK1, USED, VAL,
     :                      STATUS )

*  Update the used line counters.
            DO 3 J = 1, NGOOD
               IF ( USED ( J ) ) THEN
                  NCON( POINT( J ) ) = NCON( POINT( J ) ) + 1.0D0
               END IF
    3       CONTINUE

         ELSE IF ( NGOOD .EQ. 1 ) THEN

*  Population of one value - just use it.
            VAL = WRK1( NGOOD )
         END IF

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN
            RESULT( I ) = NUM_DTO<T>( VAL )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid unless all of them
*  are bad.
            RESULT( I ) = VAL__BAD<T>
            IF ( NGOOD .GT. 0 ) NBAD = NBAD + 1
         END IF
    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
