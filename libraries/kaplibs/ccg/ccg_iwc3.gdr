      SUBROUTINE CCG_IWC3<T>( NPIX, NLINES, STACK, COORDS, 
     :                         MINPIX, RESULT, NCON, NBAD, STATUS )
*+
*  Name:
*     CCG_IWC3x

*  Purpose:
*     Combines data lines using the intensity-weighted co-ordinate.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG_IWC3x( NPIX, NLINES, STACK, COORDS, MINPIX,
*                      RESULT, NCON, STATUS )

*  Description:
*     This routine accepts an array consisting of a series of
*     (vectorised) lines of data and their co-ordinates.  For each
*     pixel the subroutine forms a weighted mean co-ordinate along a
*     line of data.  The weights are the data values.  The output
*     weighted co-ordinates are returned in the array RESULT.

*  Arguments:
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     COORDS( NPIX, NLINES ) = ? (Given)
*        The world co-ordinates.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of data.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     NBAD = INTEGER (Returned)
*        The number of bad values in the output array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D or R as appropriate.  The STACK, COORDS, and
*     RESULT arguments supplied to the routine must have the data type
*     specified.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2006 January 6 (MJC):
*        Original version.
*     2006 January 26 (MJC):
*        Added a dimension to COORDS to provide a co-ordinate for each 
*        pixel.  This avoids the assumption of a constant AXIS-like
*        array applicable to output pixels.  Remove the WIDTHS now that
*        the AIPS++ definition is agreed to be wrong.
*     2009 July 3 (MJC):
*        Renamed from CCG1_IWC3x.  Added NBAD argument. 
*     2009 July 4 (MJC):
*        Made NCON Returned and therefore it is initialised.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER NPIX
      INTEGER NLINES
      <TYPE> STACK( NPIX, NLINES )
      <TYPE> COORDS( NPIX, NLINES )
      INTEGER MINPIX

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      INTEGER NGOOD              ! Number of good pixels
      DOUBLE PRECISION SUM       ! Sum of weighted co-ordinates
      DOUBLE PRECISION SUMW      ! Sum of weights
      DOUBLE PRECISION WEIGHT    ! Weight = present data value

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned value.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

      DO 1 I = 1, NPIX

*  Loop over for all possible output pixels.
         SUM = 0.0D0
         SUMW = 0.0D0
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels forming the required 
*  sums.
         DO 5 J = 1, NLINES
            IF (  STACK( I, J ) .NE. VAL__BAD<T> .AND.
     :           COORDS( I, J ) .NE. VAL__BAD<T> ) THEN

*  Conversion increment good value counter.
               NGOOD = NGOOD + 1

*  Convert input type to double precision before forming value-
*  co-ordinate product and sums.  There should be no numeric errors on
*  this attempt.
               WEIGHT = NUM_<T>TOD( STACK( I, J ) )

*  Sum the weights.
               SUMW = SUMW + WEIGHT

*  Sum the data value-co-ordinate product for the intensity-weighted
*  representative co-ordinate of the line.
               SUM = SUM + WEIGHT * NUM_<T>TOD( COORDS( I, J ) )

*  Update the contribution buffer; all values contribute when forming
*  the intensity-weighted co-ordinate.
               NCON( J ) = NCON( J ) + 1.0D0
            END IF
    5    CONTINUE

*  If there are sufficient good pixels, output the result.
         IF ( NGOOD .GE. MINPIX .AND. ABS( SUMW ) .GT. VAL__SMLD ) THEN
            RESULT( I ) = NUM_DTO<T>( SUM / SUMW )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid.
            RESULT( I ) = VAL__BAD<T>
            NBAD = NBAD + 1
         END IF

    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
