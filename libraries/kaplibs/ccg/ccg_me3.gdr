      SUBROUTINE CCG_ME3<T>( NPIX, NLINES, STACK, VARS, MINPIX,
     :                     RESULT, NCON, NBAD, STATUS )
*+
*  Name:
*     CCG_ME3x

*  Purpose:
*     Combines data lines using a weighted mean.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG_ME3x( NPIX, NLINES, STACK, VARS, MINPIX, RESULT, NCON, 
*                   NBAD, STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data.  The data values in the lines are then combined to
*     form a weighted mean.  The weights used are one-per-line and are
*     the reciprocal of values given in the array VARS.  The output 
*     means are returned in the array RESULT.

*  Arguments:
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     VARS( NLINES ) = ? (Given)
*        The variance to to used for each line of data.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of data.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     NBAD = INTEGER (Returned)
*        The number of bad values in the output array created while
*        forming the statistics.  It excludes those bad values whose
*        corresponding values along the collapse axis are all bad.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for real and double-precision: replace "x"
*     in the routine name by D or R as appropriate.  The STACK, VARS,
*     and RESULT arguments supplied to the routine must have the data 
*     type specified.
*     -  This routine performs its work in double precision.

*  Copyright:
*     Copyright (C) 1992 Science & Engineering Research Council.
*     Copyright (C) 2004 Central Laboratory of the Research Councils.
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2009 Science & Technology Facilities Council. All
*     Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     BRADC: Brad Cavanagh (JAC)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     18-MAY-1992 (PDRAPER):
*        Original version.
*     11-OCT-2004 (BRADC):
*        No longer use NUM_CMN.
*     2006 August 6 (MJC):
*        Exclude data with non-positive or bad variance.
*        No longer use NUM_CMN.
*     2009 July 2 (MJC):
*         Converted to generic and renamed from CCG_ME1x.  Added NBAD 
*         argument.  Made VARS take the generic type.  Move STACK to
*         standard order in the API.
*     2009 July 4 (MJC):
*         Made NCON Returned and therefore it is initialised.
*     2009 July 17 (MJC):
*        Do not include collapsed data comprising only bad values
*        in argument NBAD.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER NPIX
      INTEGER NLINES
      <TYPE> STACK( NPIX, NLINES )
      <TYPE> VARS( NLINES )
      INTEGER MINPIX

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      INTEGER NGOOD              ! Number of good pixels
      DOUBLE PRECISION SUM1      ! Sum of weights
      DOUBLE PRECISION SUM2      ! Sum of weighted values
      DOUBLE PRECISION VAL       ! Present data value
      DOUBLE PRECISION VAR       ! Present weight

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned values.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Establish the numeric error handler.
      CALL NUM_HANDL( NUM_TRAP )
      DO 1 I = 1, NPIX

*  Loop over for all possible output pixels. Initialise sums.
         SUM1 = 0.0D0
         SUM2 = 0.0D0

*  Set good pixel count and reset num_error from any errors that have
*  occurred.
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels forming weighted mean
*  sums.
         DO 5 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> .AND.
     :           VARS( J ) .NE. VAL__BAD<T> .AND.
     :           VARS( J ) .GT. VAL__SML<T> ) THEN

*  Convert input type to double precision before forming sums should be
*  no numeric errors on this attempt.
               VAL = NUM_<T>TOD( STACK( I, J ) )

*  Conversion increment good value counter.
               NGOOD = NGOOD + 1

*  Change variance to weight and sum weights.
               VAR = 1.0D0 / NUM_<T>TOD( VARS( J ) )
               SUM1 = SUM1 + VAR

*  Form weighted mean sum.
               SUM2 = SUM2 + VAL * VAR

*  Update the contribution buffer---all values contribute when forming
*  mean.
               NCON( J ) = NCON( J ) + 1.0D0
            END IF
    5    CONTINUE

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN
            RESULT( I ) = NUM_DTO<T>( SUM2 / SUM1 )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid unless all of them
*  are bad.
            RESULT( I ) = VAL__BAD<T>
            IF ( NGOOD .GT. 0 ) NBAD = NBAD + 1
         END IF

    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END

