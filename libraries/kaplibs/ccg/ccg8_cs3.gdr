      SUBROUTINE CCG8_CS3<T>( NSIGMA, NPIX, NLINES, STACK, VARS, MINPIX,
     :                      RESULT, WRK1, WRK2, POINT, USED, NCON,
     :                      NBAD, STATUS )
*+
*  Name:
*     CCG8_CS3x

*  Purpose:
*     Combines data lines using a sigma-clipped standard deviation.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG8_CS3x( NSIGMA, NPIX, NLINES, STACK, VARS, MINPIX,
*                    RESULT, WRK1, WRK2, POINT, USED, NCON, NBAD,
*                    STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data.  The weighted mean and standard deviation of each
*     input column in STACK is then used to estimate the range of values
*     that represent the required sigma clipping.  The standard
*     deviation is derived from the population of values at each
*     position along the lines (cf. each image pixel).  Values outside
*     of this range are then rejected and the resulting output
*     standard-deviation values are returned in the array RESULT.
*
*     Note that clipping will not be used when only two or three
*     values are available (unless in the case of three values NSIGMA
*     is less than 1.0).

*  Arguments:
*     NSIGMA = REAL (Given)
*        The number of sigma at which to reject data values.
*     NPIX = INTEGER*8 (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER*8 (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     VARS( NLINES ) = ? (Given)
*        The variance to to used for each line of data. These are
*        used as inverse weights when forming the mean and do not
*        need to be real variances, as they are not propagated.
*     MINPIX = INTEGER*8 (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of clipped standard deviations.
*     WRK1( NLINES ) = ? (Returned)
*        Workspace for calculations.
*     WRK2( NLINES ) = ? (Returned)
*        Workspace for calculations.
*     POINT( NLINES ) = INTEGER*8 (Returned)
*        Workspace to hold pointers to the original positions of the
*        data before extraction and conversion in to the WRK1 array.
*     USED( NLINES ) = LOGICAL (Returned)
*        Workspace used to indicate which values have been used in
*        estimating a resultant value.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     NBAD = INTEGER*8 (Returned)
*        The number of bad values in the output array created while
*        forming the statistics.  It excludes those bad values whose
*        corresponding values along the collapse axis are all bad.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for real and double-precision: replace "x"
*     in the routine name by D or R as appropriate.  The STACK, VARS,
*     RESULT, WRK1, and WRK2 arguments supplied to the routine must
*     have the data type specified.

*  Copyright:
*     Copyright (C) 2008-2009 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2008 September 7 (MJC):
*        Original version adapted from CCG8_SCR3R.
*     2009 July 2 (MJC):
*        Renamed from CCG1_CS3x.  Added NBAD argument.  Made VARS take
*        the generic type.  Moved STACK to the normal order in the API.
*     2009 July 4 (MJC):
*         Made NCON Returned and therefore it is initialised.
*     2009 July 17 (MJC):
*        Do not include collapsed data comprising only bad values
*        in argument NBAD.
*     2009 November 3 (MJC):
*        Return clipped standard deviations, not variances.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      REAL NSIGMA
      INTEGER*8 NPIX
      INTEGER*8 NLINES
      <TYPE> STACK( NPIX, NLINES )
      <TYPE> VARS( NLINES )
      INTEGER*8 MINPIX

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> WRK1( NLINES )
      <TYPE> WRK2( NLINES )
      INTEGER*8 POINT( NLINES )
      LOGICAL USED( NLINES )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER*8 NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      DOUBLE PRECISION DEV       ! Deviations from mean
      INTEGER*8 I                ! Loop variable
      INTEGER*8 IGOOD            ! Number of unrejected pixels
      INTEGER*8 J                ! Loop variable
      <LTYPE> LOWER              ! Lower limit
      DOUBLE PRECISION MEAN      ! Mean
      INTEGER*8 NGOOD            ! Number of good pixels
      DOUBLE PRECISION SUM1      ! Weight sums
      DOUBLE PRECISION SUM2      ! Weighted value sums
      <LTYPE> UPPER              ! Upper limit
      DOUBLE PRECISION VAR       ! Population variance before rejection
      DOUBLE PRECISION WEIGHT    ! Weight

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned values.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Avoid confusing the optimiser.
      VAR = 0.0D0

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

*  Loop over for all possible output pixels.
      DO 1 I = 1, NPIX
         NGOOD = 0
         CALL NUM_CLEARERR()
         SUM1 = 0.0D0
         SUM2 = 0.0D0

*  Loop over all possible contributing pixels.
         DO 2 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> .AND.
     :           VARS( J ) .NE. VAL__BAD<T> .AND.
     :           VARS( J ) .GT. VAL__SML<T> ) THEN

*  Increment good value counter.
               NGOOD = NGOOD + 1

*  Update the pointers to the positions of the unextracted data.
               POINT( NGOOD ) = J

*  Change variance to weight.
               VAR = 1.0D0 / NUM_<T>TOD( VARS( J ) )

*  Increment sums.
               SUM2 = SUM2 + NUM_<T>TOD( STACK( I, J ) ) * VAR
               SUM1 = SUM1 + VAR

*  Transfer values to working buffers for the current output pixel.
               WRK1( NGOOD ) = STACK( I, J )
               WRK2( NGOOD ) = NUM_DTO<T>( VAR )

*  Set USED buffer in case no values are rejected.
               USED( NGOOD ) = .TRUE.

*  Finally trap numeric errors by rejecting all values.
               IF ( .NOT. NUM_WASOK() ) THEN

*  Decrement NGOOD, do not let it go below zero.
                  NGOOD = MAX( 0, NGOOD - 1 )
                  CALL NUM_CLEARERR()
               END IF
            END IF
    2    CONTINUE

*  Continue if more than one good value.
         IF ( NGOOD .GT. 0 ) THEN
            IF ( NGOOD .EQ. 1 ) THEN
               VAR = VAL__BADD
            ELSE

*  Form the weighted mean and population variance.
               MEAN = SUM2 / SUM1
               SUM1 = 0.0D0
               DO 3 J = 1, NGOOD
                  DEV = MEAN - NUM_<T>TOD( WRK1( J ) )
                  SUM1 = SUM1 + DEV * DEV
    3          CONTINUE
               VAR = SUM1 / DBLE( NGOOD - 1 )

*  Clipping range.
               LOWER = NUM_DTO<T>( MEAN - DBLE( NSIGMA ) * SQRT( VAR ) )
               UPPER = NUM_DTO<T>( MEAN + DBLE( NSIGMA ) * SQRT( VAR ) )

*  Clip unwanted data.
               CALL CCG8_CLIP<T>( LOWER, UPPER, NGOOD, WRK1, IGOOD,
     :                          STATUS )

*  If any values have been rejected then form new mean.
               IF ( IGOOD .GT. 0 ) THEN
                  IF ( NGOOD .NE. IGOOD ) THEN

*  New standard deviation required.
                     SUM1 = 0.0D0
                     SUM2 = 0.0D0
                     DO 4 J = 1, NGOOD
                        IF ( WRK1( J ) .NE. VAL__BAD<T> ) THEN

*  Increment sums.
                           WEIGHT = NUM_<T>TOD( WRK2( J ) )
                           SUM2 = SUM2 + NUM_<T>TOD( WRK1( J ) ) *
     :                                   WEIGHT
                           SUM1 = SUM1 + WEIGHT
                           USED( J ) = .TRUE.
                        ELSE
                           USED( J ) = .FALSE.
                        END IF
    4                CONTINUE

*  Form the new mean and population variance.
                     MEAN = SUM2 / SUM1
                     SUM1 = 0.0D0
                     DO 5 J = 1, NGOOD
                        IF ( WRK1( J ) .NE. VAL__BAD<T> ) THEN
                           DEV = MEAN - NUM_<T>TOD( WRK1( J ) )
                           SUM1 = SUM1 + DEV * DEV
                        END IF
    5                CONTINUE
                     VAR = SUM1 / DBLE( IGOOD - 1 )
                  END IF

*  Increment line-used buffer.
                  DO 6 J = 1, NGOOD
                     IF ( USED ( J ) ) THEN
                        NCON( POINT( J ) ) = NCON( POINT( J ) ) + 1.0D0
                     END IF
    6             CONTINUE

*  Trap occasions when all values are rejected.
               ELSE
                  NGOOD = 0
               END IF
            END IF
         END IF

*  If there are sufficient good pixels output the standard deviation.
         IF ( NGOOD .GE. MINPIX .AND. VAR .NE. VAL__BADD ) THEN
            RESULT( I ) = NUM_DTO<T>( SQRT( VAR ) )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid unless all of them
*  are bad.
            RESULT( I ) = VAL__BAD<T>
            IF ( NGOOD .GT. 0 ) NBAD = NBAD + 1
         END IF
    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
