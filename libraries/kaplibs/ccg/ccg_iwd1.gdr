      SUBROUTINE CCG_IWD1<T>( NPIX, NLINES, STACK, VARS, COORDS,
     :                      MINPIX, RESULT, RESVAR, NCON, NBAD, STATUS )
*+
*  Name:
*     CCG_IWD1x

*  Purpose:
*     Combines data lines using the dispersion of the intensity-weighted
*     co-ordinate.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG_IWD1x( NPIX, NLINES, STACK, VARS, COORDS, MINPIX,
*                      RESULT, RESVAR, NCON, STATUS )

*  Description:
*     This routine accepts an array consisting of a series of
*     (vectorised) lines of data and their co-ordinates.  For each
*     pixel the subroutine forms the weighted dispersion of the
*     co-ordinate and an estimated variance along a line of data.  The
*     weights are the data values and their inverse variances.  The 
*     output co-ordinate dispersions are returned in the array RESULT.
*     The output variances in RESVAR are the standard error of RESULT.

*  Arguments:
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     VARS( NPIX, NLINES ) = ? (Given)
*        The data variances.
*     COORDS( NPIX, NLINES ) = ? (Given)
*        The world co-ordinates.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = ? (Returned)
*        The output line of data.
*     RESVAR( NPIX ) = ? (Returned)
*        The output variances.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     NBAD = INTEGER (Returned)
*        The number of bad values in the output RESULT array created while
*        forming the statistics.  It excludes those bad values whose
*        corresponding values along the collapse axis are all bad.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D or R as appropriate.  The STACK, VARS, 
*     COORDS, RESULT, and RESVAR arguments supplied to the routine must 
*     have the data type specified.
*     -  It uses the corrected two-pass algorithm of Chan, T.F.,
*     Golub, G.H., & LeVeque, R.J. (1983). "Algorithms for computing the 
*     sample variance: Analysis and recommendations", American 
*     Statistician, 37(3), 242-247.

*  Copyright:
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2009 Science & Technology Facilities Council. All
*     Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2006 January 6 (MJC):
*        Original version.
*     2006 January 26 (MJC):
*        Added a dimension to COORDS to provide a co-ordinate for each
*        pixel.  This avoids the assumption of a constant AXIS-like
*        array applicable to output pixels.  Remove the WIDTHS now that
*        the AIPS++ definition is agreed to be wrong.  Incorporate the
*        inverse data variance in the weights through the new VARS
*        argument.
*     2006 February 9 (MJC):
*        Correct normalisation of the RESULT array.
*     2006 February 17 (MJC):
*        Converted to two-pass algorithm.  It's slower but far more
*        stable.
*     2006 August 6 (MJC):
*        Exclude data with non-positive or bad variance.
*     2009 July 3 (MJC):
*        Renamed from CCG1_IWD1x.  Added NBAD argument. 
*     2009 July 4 (MJC):
*         Made NCON Returned and therefore it is initialised.
*     2009 July 17 (MJC):
*        Do not include collapsed data comprising only bad values
*        in argument NBAD.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER NPIX
      INTEGER NLINES
      <TYPE> STACK( NPIX, NLINES )
      <TYPE> VARS( NPIX, NLINES )
      <TYPE> COORDS( NPIX, NLINES )
      INTEGER MINPIX

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> RESVAR( NPIX )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation OK?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      DOUBLE PRECISION COORD     ! A co-ordinate
      DOUBLE PRECISION DEV       ! Deviation from the mean
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      DOUBLE PRECISION M1        ! M1 moment (intensity weighted
                                 ! co-ordinate)
      INTEGER NGOOD              ! Number of good pixels
      DOUBLE PRECISION SUM       ! Sum of weighted co-ordinates
      DOUBLE PRECISION SUMSQ     ! Sum of squared weighted co-ordinates
      DOUBLE PRECISION SUMW      ! Sum of weights
      DOUBLE PRECISION VAL       ! A data value
      DOUBLE PRECISION VAR       ! A variance
      DOUBLE PRECISION VARNCE    ! Almost variance
      DOUBLE PRECISION WEIGHT    ! Weight from intensity

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned value.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

      DO 1 I = 1, NPIX

*  Loop over for all possible output pixels.
         SUM = 0.0D0
         SUMSQ = 0.0D0
         SUMW = 0.0D0
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels forming the required 
*  sums to derive the mean.
         DO 5 J = 1, NLINES
            IF (  STACK( I, J ) .NE. VAL__BAD<T> .AND.
     :             VARS( I, J ) .NE. VAL__BAD<T> .AND.
     :             VARS( I, J ) .GT. VAL__SML<T> .AND.
     :           COORDS( I, J ) .NE. VAL__BAD<T> ) THEN

*  Conversion increment good value counter.
               NGOOD = NGOOD + 1

*  Convert input type to double precision before forming sums.  There
*  should be no numeric errors on this attempt.
               VAL = NUM_<T>TOD( STACK( I, J ) )
               VAR = NUM_<T>TOD( VARS( I, J ) )
               COORD = NUM_<T>TOD( COORDS( I, J ) )

*  Sum the intensity weights of the flux for the line.
               WEIGHT = VAL / VAR
               SUMW = SUMW + WEIGHT

*  Sum the weighted moment.
               SUM = SUM + COORD * WEIGHT

*  Update the contribution buffer; all values contribute when forming
*  the intensity-weighted co-ordinate.
               NCON( J ) = NCON( J ) + 1.0D0
            END IF
    5    CONTINUE

*  If there are sufficient good pixels and weight, form the mean.
         IF ( NGOOD .GE. MINPIX .AND. ABS( SUMW ) .GT. VAL__SMLD ) THEN
            M1 = NUM_DTO<T>( SUM / SUMW )

*  Now loop to sum the deviations from the mean.
            SUM = 0.0D0
            DO 6 J = 1, NLINES
               IF (  STACK( I, J ) .NE. VAL__BAD<T> .AND.
     :                VARS( I, J ) .NE. VAL__BAD<T> .AND.
     :                VARS( I, J ) .GT. VAL__SML<T> .AND.
     :              COORDS( I, J ) .NE. VAL__BAD<T> ) THEN

*  Convert input type to double precision before forming sums.
*  There should be no numeric errors on this attempt.  Form 
                  VAL = NUM_<T>TOD( STACK( I, J ) )
                  VAR = NUM_<T>TOD( VARS( I, J ) )

* Find the deviation from the mean and the weight.
                  DEV = NUM_<T>TOD( COORDS( I, J ) ) - M1
                  WEIGHT = VAL / VAR

*  Sum the deviations squared.
                  SUMSQ = SUMSQ + DEV * DEV * WEIGHT

*  Sum the data value-co-ordinate product for the intensity-weighted
*  representative co-ordinate of the line.
                  SUM = SUM + DEV * WEIGHT
               END IF
    6       CONTINUE

*  Obtain the variance correcting for rounding errors.
            VARNCE = ( SUMSQ - SUM * SUM / DBLE( NGOOD ) ) / SUMW

*  Correct from population to sample variance.
            IF ( VARNCE .GT. 0.0D0 ) THEN
               RESULT( I ) = NUM_DTO<T>( SQRT( VARNCE * DBLE( NGOOD ) / 
     :                                   DBLE( NGOOD - 1 ) ) )
            ELSE
               RESULT( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF

*  Just use the standard error on the dispersion.
            RESVAR( I ) = RESULT( I ) / DBLE( NGOOD )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               RESVAR( I ) = VAL__BAD<T>
               NBAD = NBAD + 1
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid unless all of them
*  are bad.
            RESULT( I ) = VAL__BAD<T>
            RESVAR( I ) = VAL__BAD<T>
            IF ( NGOOD .GT. 0 ) NBAD = NBAD + 1
         END IF

    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
