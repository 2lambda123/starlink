      SUBROUTINE CCG_MN3<T>( BAD, NPIX, NLINES, STACK, RESULT, POSIND,
     :                     WRK1, NCON, NBAD, STATUS )
*+
*  Name:
*     CCG_MN3x

*  Purpose:
*     Combines data lines using the minimum value.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG_MN3x( BAD, NPIX, NLINES, STACK, RESULT,
*                    POSIND, WRK1, NCON, NBAD, STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data.  The data values in the lines are then collapsed
*     to the minimum value in each line.  The output minima are 
*     returned in the array RESULT.  The vectorised pixel indices 
*     corresponding to the minima are also returned in POSIND.

*  Arguments:
*     BAD = LOGICAL (Given)
*        If true, there may be bad pixels present in the array.  If
*        false, it is safe not to check for bad values.
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = ? (Given)
*        The array of lines which are to be combined into a single line.
*     RESULT( NPIX ) = <TYPE> (Returned)
*        The output line of data.
*     POSIND( NPIX ) = INTEGER (Returned)
*        The pixel indices of the minima in each output pixel.
*     WRK1( NLINES ) = ? (Returned)
*        Workspace for calculations.
*     NCON( NLINES ) = DOUBLE PRECISION (Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     NBAD = INTEGER (Returned)
*        The number of bad values in the output array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate.  The
*     STACK, RESULT, and WRK1 arguments supplied to the routine must 
*     have the data type specified.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2005 December 22 (MJC):
*        Original version.
*     2009 July 3 (MJC):
*         Renamed from CCG_MNR3x.  Added NBAD argument. 
*     2009 July 9 (MJC):
*         Add NCON argument for consuistency with other routines.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      LOGICAL BAD
      INTEGER NPIX
      INTEGER NLINES
      <TYPE> STACK( NPIX, NLINES )

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> WRK1( NLINES )
      INTEGER POSIND( NPIX )
      DOUBLE PRECISION NCON( NLINES )
      INTEGER NBAD

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      INTEGER LBAD               ! Number of bad values
      <LTYPE> MAXMUM             ! Maximum value (dummy)
      <LTYPE> MINMUM             ! Minimum value
      INTEGER MAXPOS             ! Pixel index of maximum
      INTEGER MINPOS             ! Pixel index of minimum

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Initialise returned values.
      NBAD = 0
      DO I = 1, NLINES
         NCON( I ) = 0.0D0
      END DO

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Loop over for all possible output pixels.
      DO 1 I = 1, NPIX

*  Loop over all possible contributing pixels.
         DO 2 J = 1, NLINES

*  Copy data into work buffer, so we can process a line at a time.
            WRK1( J ) = STACK( I, J )

    2    CONTINUE

*  Find the extreme values in the contributing pixels, retaining just
*  the maximum.  Start a new error context so we can annul any errors
*  arising the KAPLIBS routine.
         CALL ERR_MARK
         CALL KPG1_MXMN<T>( BAD, NLINES, WRK1, LBAD, MAXMUM,
     :                    MINMUM, MAXPOS, MINPOS, STATUS )

*  We can cope with the error that all the supplied values are bad.
*  The bad-value count is incremented although strictly it is not a
*  bad value generated by the deriving the statistic.  However, it is
*  included for simplicity.
         IF ( STATUS .NE. SAI__OK ) THEN
            CALL ERR_ANNUL( STATUS )
            MINMUM = VAL__BAD<T>
            NBAD = NBAD + 1
         END IF

*  End the error context.
         CALL ERR_RLSE

*  Trap numeric errors.
         IF ( MINMUM .EQ. VAL__BAD<T> ) THEN
            RESULT( I ) = VAL__BAD<T>
            POSIND( I ) = VAL__BADI
            NBAD = NBAD + 1
         ELSE
            POSIND( I ) = MINPOS
            RESULT( I ) = MINMUM
            NCON( MINPOS ) = NCON( MINPOS ) + 1.0D0
         END IF

    1 CONTINUE

      END
