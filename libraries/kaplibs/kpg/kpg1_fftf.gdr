      SUBROUTINE KPG1_FFTF<T>( M, N, IN, WORK, OUT, STATUS )
*+
*  Name:
*     KPG1_FFTF<T>

*  Purpose:
*     Takes the forward FFT of a real image.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_FFTF<T>( M, N, IN, WORK, OUT, STATUS )

*  Description:
*     The Fourier transform of the input (purely real) image is taken 
*     and returned in OUT.  The returned FT is stored in Hermitian 
*     format, in which the real and imaginary parts of the FT are 
*     combined into a single array.  The FT can be inverted using 
*     KPG1_FFTB<T>, and two Hermitian FTs can be multipled together 
*     using routine KPG1_HMLT<T>.

*  Arguments:
*     M = INTEGER (Given)
*        Number of columns in the input image.
*     N = INTEGER (Given)
*        Number of rows in the input image.
*     IN( M, N ) = <COMM> (Given)
*        The input image.
*     WORK( * ) = <COMM> (Given)
*        Work space.  This must be at least ( 3*MAX( M, N ) + 15 )
*        elements long.
*     OUT( M, N ) = <COMM> (Returned)
*        The FFT in Hermitian form.  Note, the same array can be used
*        for both input and output, in which case the supplied values
*        will be over-written.
*    STATUS = INTEGER (Given and Returned)
*       The global status.

*  Notes:
*     -  There is a routine for the data types real or double precision:
*     replace "x" in the routine name by R or D respectively, as
*     appropriate.  The input and output data arrays plus a work space 
*     must have the data type specified.

*  Copyright:
*     Copyright (C) 1995, 2003, 2004 Central Laboratory of the Research 
*                   Councils.
*     Copyright (C) 2005 Particle Physics & Engineering Research
*                   Council.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*     
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 59, Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     DSB: David Berry (STARLINK)
*     MJC: Malcolm J. Currie (STARLINK)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     14-FEB-1995 (DSB):
*        Original version. Written to replace KPG1_RLFFT which
*        used NAG routines.
*     1995 March 27 (MJC):
*        Removed long lines and minor documentation revisions.  Used
*        modern-style variable declarations.
*     1995 September 7 (MJC):
*        Used PDA_ prefix for FFTPACK routines.
*     13-DEC-2003 (DSB):
*        Use KPG1_<T>2NAG in stead of PDA_<T>2NAG.  KPG1_<T>2NAG uses 
*        workspace to achieve greater speed.
*     2004 September 1 (TIMJ):
*        Use CNF_PVAL.
*     2005 September 17 (TIMJ):
*        Generic-ify.
*     2006 April 20 (MJC):
*        Added Notes and removed RETURN.
*     {enter_further_changes_here}

*  Implementation Status:
*     Some of the generated code looks a bit odd because the names of
*     the PDA subroutines do not match the standard type naming 
*     conventions required by GENERIC.  Explicit IF statements are 
*     included but since these compare constants (after generic is run) 
*     the compiler will optimize the checks out of the final runtime.
*     The real fix is to fix the names of the PDA routines (and 
*     associated KPG routine).

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'CNF_PAR'          ! For CNF_PVAL function

*  Arguments Given:
      INTEGER M
      INTEGER N
      <TYPE> IN( M, N )
      <TYPE> WORK( * )

*  Arguments Returned:
      <TYPE> OUT( M, N )

*  Status:
      INTEGER STATUS             ! Global status
 
*  Local Variables:
      INTEGER I                  ! Column counter
      INTEGER IPW                ! Pointer to work space
      INTEGER IW                 ! Index into work array
      INTEGER J                  ! Row counter

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

      IF ( '<HTYPE>' .NE. '_REAL' .AND. '<HTYPE>' .NE. '_DOUBLE') THEN
         STATUS = SAI__ERROR
         CALL ERR_REP( 'KPG1_FFTF<T>',
     :        'Routine only supports _REAL or _DOUBLE not <HTYPE>',
     :        STATUS )
         GOTO 999
      END IF

*  Allocate work space for use in KPG1_R2NAG. Abort if failure.
      CALL PSX_CALLOC( MAX( M, N ), '<HTYPE>', IPW, STATUS )
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Copy the input array to the output array.
      DO J = 1, N
         DO I = 1, M
            OUT( I, J ) = IN( I, J )
         END DO
      END DO

*  Initialise an array holding trig. functions used to form the FFT
*  of the input image rows.
      IF ( '<TYPE>' .EQ. 'REAL' ) THEN
         CALL PDA_RFFTI( M, WORK )
      ELSE
         CALL PDA_DRFFTI( M, WORK )
      END IF

*  Transform each row of the output array, and convert each array into
*  the equivalent NAG format.
      IF ( '<TYPE>' .EQ. 'REAL' ) THEN
         DO J = 1, N
            CALL PDA_RFFTF( M, OUT( 1, J ), WORK )
            CALL KPG1_R2NAG( M, OUT( 1, J ), %VAL( CNF_PVAL( IPW ) ) )
         END DO
      ELSE
         DO J = 1, N
            CALL PDA_DRFFTF( M, OUT( 1, J ), WORK )
            CALL KPG1_DR2NAG( M, OUT( 1, J ), %VAL( CNF_PVAL( IPW ) ) )
         END DO
      END IF

*  Re-initialise the work array to hold trig. functions used to form
*  the FFT of the image columns.
      IF ( '<TYPE>' .EQ. 'REAL' ) THEN
         CALL PDA_RFFTI( N, WORK )
      ELSE
         CALL PDA_DRFFTI( N, WORK )
      END IF

*  Store the index of the last-used element in the work array.
      IW = 2 * N + 15

*  Transform each column of the current output array.
      DO I = 1, M

*  Copy this column to the end of the work array, beyond the part used
*  to store trig. functions.
         DO  J = 1, N
            WORK( IW + J ) = OUT( I, J )
         END DO

*  Transform the copy of this column.
*  The compiler should be able to optimize out the IF that is
*  always true
         IF ( '<TYPE>' .EQ. 'REAL' ) THEN
            CALL PDA_RFFTF( N, WORK( IW + 1 ), WORK )
            CALL KPG1_R2NAG( N, WORK( IW + 1 ),
     :                       %VAL( CNF_PVAL( IPW ) ) )
         ELSE
            CALL PDA_DRFFTF( N, WORK( IW + 1 ), WORK )
            CALL KPG1_DR2NAG( N, WORK( IW + 1 ),
     :                        %VAL( CNF_PVAL( IPW ) ) )
         END IF

*  Copy the transformed column back to the output array.
         DO  J = 1, N
            OUT( I, J ) = WORK( IW + J ) 
         END DO

      END DO

*  Free the work space.
      CALL PSX_FREE( IPW, STATUS )

  999 CONTINUE

      END
