      SUBROUTINE KPG1_TRPI<T>( NDIMI, IDIMS, TRID, AXES, OEL, NDIMO,
     :                         OLBND, ODIMS, COIN, COOUT, FRIND, INDICE,
     :                         STATUS )
*+
*  Name:
*     KPG1_TRPIx
 
*  Purpose:
*     Finds vectorised pixel indices after applying a transformation to
*     an array's pixel co-ordinates.
 
*  Language:
*     Starlink Fortran 77
 
*  Invocation:
*     CALL KPG1_TRPIx( NDIMI, IDIMS, TRID, AXES, OEL, NDIMO, OLBND,
*                      ODIMS, COIN, COOUT, FRIND, INDICE, STATUS )
 
*  Description:
*     This routine applies a transformation to the pixel co-ordinates
*     of the elements of an (output) n-dimensional array of a specified
*     shape.  It then determines the nearest-neighbour element in the
*     transformed (input) m-dimensional array, as a vector index, which
*     is returned.  This array of vector indices may then be used by
*     another routine to fill the output array with values from the
*     input array.
 
*  Arguments:
*     NDIMI = INTEGER (Given)
*        The dimensionality of the input array.
*     IDIMS( NDIMI ) = INTEGER (Given)
*        The dimensions of the input n-D array.
*     TRID = INTEGER (Given)
*        The TRANSFORM identifier of the mapping.
*     AXES( * ) = ? (Given)
*        The concatenated axis co-ordinates of the input array.  This
*        array should therefore have a dimension at least as large as
*        the sum of the input array's dimensions.
*     OEL = INTEGER (Given)
*        The first dimension of the work arrays.  It should be at least
*        ODIMS( 1 ).
*     NDIMO = INTEGER (Given)
*        The dimensionality of the output array.
*     OLBND( NDIMO ) = INTEGER (Given)
*        The lower bounds of the output n-D array.
*     ODIMS( NDIMO ) = INTEGER (Given)
*        The dimensions of the output n-D array.
*     COIN( OEL, NDIMI ) = ? (Returned)
*        Workspace used to store the co-ordinates of a row of points
*        in the input array.
*     COOUT( OEL, NDIMO ) = ? (Returned)
*        Workspace used to store the co-ordinates of a row of points in
*        the output array.
*     FRIND( OEL, NDIMI ) = ? (Returned)
*        Workspace used to store the floating-point pixel indices of a
*        row of points in the input array.
*     INDICE( * ) = INTEGER (Returned)
*        The vector indices of the nearest-array element of the
*        transformed positions of the output array.  This array should
*        therefore have a dimension at least as large as the product of
*        the output array's dimensions.
*     STATUS  =  INTEGER (Given and Returned).
*        Global status value
 
*  Notes:
*     -  There is a routine for the following numeric data types:
*     replace "x" in the routine name by D or R as appropriate.  The
*     workspace and axis arrays must have the data type specified.
 
*  Algorithm:
*     -  Validate the dimensionality and compare the number of
*     transformation values with the number of dimensions.
*     -  Initialise the output co-ordinates for the first row.
*     -  Compute the strides of each dimension and initialise a pointer
*     to the region within the input array. Find the total number of
*     elements in the output array.
*     -  Loop until all the output elements have been evaluated.
*        o  Increment the co-ordinate of the output value for each new
*        row.  Reset the co-ordinates for all lower dimensions except
*        the first.
*        o  Convert the output to input-array co-ordinates for the row
*        and then to fractional element indices in the input array.
*        Immediately set the output element to the bad value when it's
*        transformed centre lies outside the input array, and go to the
*        next output-array element.  Find the weights for the linear
*        interpolation.
*        o  Find the vector input-array index of the transformed output
*        point, using the strides.
 
*  Authors:
*     MJC: Malcolm J. Currie  (STARLINK)
*     {enter_new_authors_here}
 
*  History:
*     1993 March 5 (MJC):
*        Original version.
*     {enter_changes_here}
 
*  Bugs:
*     {note_bugs_here}
 
*-
 
*  Type Definitions:
      IMPLICIT  NONE           ! no implicit typing allowed
 
*  Global Constants:
      INCLUDE  'SAE_PAR'       ! SSE global definitions
      INCLUDE  'PRM_PAR'       ! Magic-value and extreme constants
      INCLUDE  'NDF_PAR'       ! NDF constants
 
*  Arguments Given:
      INTEGER NDIMI
      INTEGER IDIMS( NDIMI )
      INTEGER TRID
      INTEGER OEL
      INTEGER NDIMO
      INTEGER OLBND( NDIMO )
      INTEGER ODIMS( NDIMO )
 
      <TYPE> AXES( * )
 
*  Arguments Returned:
      <TYPE> COIN( OEL, NDIMI )
      <TYPE> COOUT( OEL, NDIMO )
      <TYPE> FRIND( OEL, NDIMI )
      INTEGER INDICE( * )
 
*  Status:
      INTEGER  STATUS          ! Global status
 
*  Local Variables:
      INTEGER AXJUMP( NDF__MXDIM ) ! Dimension strides for concatenated
                               ! axes
      INTEGER EL               ! Number of elements in the output array
      LOGICAL END              ! True if a new box has been found
                               ! or there are no more boxes to sum
      INTEGER I                ! Loop counter
      INTEGER IAXIS            ! Loop counter for the axes
      INTEGER J                ! Loop counter
      INTEGER K                ! Output-array index
      INTEGER NCIN             ! Number of values in the inverse
                               ! transformation
      INTEGER NCOUT            ! Number of values in the forward
                               ! transformation
      INTEGER OFFSET           ! Offset within the first dimension
                               ! of the output array
      <TYPE> ORIGIN( NDF__MXDIM ) ! Origins of each axis
      INTEGER STRIDI( NDF__MXDIM ) ! Dimension strides for input array
      INTEGER STRIDO( NDF__MXDIM ) ! Dimension strides for output
                               ! co-ordinates
      INTEGER VOFF             ! Vector offset in the input array
 
*  Internal References:
      INCLUDE 'NUM_DEC_CVT'    ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'    ! NUM definitions for conversions
 
*.
 
*  Check the inherited status on entry.
      IF ( STATUS .NE. SAI__OK ) RETURN
 
*  Check the dimensionality.
      IF ( NDIMI .LT. 1 .OR. NDIMI .GT. NDF__MXDIM ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SETI( 'NDIM', NDIMI )
         CALL ERR_REP( 'KPG1_TRPIx_INVDIM',
     :     'Unable to find vectorised pixel indices for an array with '/
     :     /'dimensionality of ^NDIM. (Programming error.)', STATUS )
         GOTO 999
      END IF
 
*  Obtain the number of co-ordinates in the transformations.  The NCIN
*  and NCOUT seem to be reversed, but the supplied transformation is the
*  inverse, and "in" and "out" refer to the input and output arrays
*  respectively.
      CALL TRN_GTNVC( TRID, NCOUT, NCIN, STATUS )
 
*  Validate that the transformation is applicable to the supplied
*  arrays.
      IF ( NCOUT .NE. NDIMO .OR. NCIN .NE. NDIMI ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SETI( 'NCIN', NCIN )
         CALL MSG_SETI( 'NCOUT', NCOUT )
         CALL MSG_SETI( 'IN', NDIMI )
         CALL MSG_SETI( 'OUT', NDIMO )
         CALL ERR_REP( 'KPG1_TRPIx_MISMATCH',
     :    'There is a mismatch between the number of values '/
     :    /'(^NCIN -> NCOUT) in the supplied transformation and the '/
     :    /'number of dimensions of the arrays (^IN -> ^OUT).', STATUS )
         GOTO 999
      END IF
 
*  The co-ordinates of the first dimension are fixed throughout this
*  routine, as the transformation is applied row by row.
      ORIGIN( 1 ) = NUM_ITO<T>( OLBND( 1 ) )
      DO I = 1, ODIMS( 1 )
         COOUT( I, 1 ) = ORIGIN( 1 ) + NUM_ITO<T>( I -1 )
     :                   - 1<CONST> / 2<CONST>
      END DO
      AXJUMP( 1 ) = 1
 
*  Initialise the input co-ordinates for any higher dimensions.
      IF ( NDIMO .GT. 1 ) THEN
         DO IAXIS = 2, NDIMO
            ORIGIN( IAXIS ) = NUM_ITO<T>( OLBND( IAXIS ) )
            AXJUMP( IAXIS ) = AXJUMP( IAXIS - 1 ) + IDIMS( IAXIS - 1 )
            DO I = 1, ODIMS( 1 )
               COOUT( I, IAXIS ) = ORIGIN( IAXIS ) - 1<CONST> / 2<CONST>
            END DO
         END DO
      END IF
 
*  Compute the strides.
*  ====================
 
*  Initialise the stride of dimension number 1 for the input-array
*  dimensions. (The stride for a dimension is the amount by which the
*  vectorised array index increases when the n-dimensional array index
*  for that dimension increases by 1.)
      STRIDI( 1 ) = 1
 
*  Calculate the stride for each remaining dimension. Also calculate
*  the strides in the concatenated axes array.
      IF ( NDIMI .GT. 1 ) THEN
         DO I = 2, NDIMI
            STRIDI( I ) = STRIDI( I - 1 ) * IDIMS( I - 1 )
         END DO
      END IF
 
*  Do likewise for the output array.
      STRIDO( 1 ) = 1
      IF ( NDIMO .GT. 1 ) THEN
         DO I = 2, NDIMO
            STRIDO( I ) = STRIDO( I - 1 ) * ODIMS( I - 1 )
         END DO
      END IF
 
*  Find the number elements in the output array.
      EL = 1
      DO  I = 1, NDIMO
         EL = EL * ODIMS( I )
      END DO
 
*  Loop for every output element.
*  ==============================
 
*  K will count the index within the vector arrangement of the array.
      K = 1
      DO WHILE ( K .LE. EL )
 
*  For efficiency reasons we compute the transformation for all the
*  co-ordinates in a row with a single subroutine call.  So test
*  whether the current output element is at the start of a new row.
*  The co-ordinates have been set for the first element.
         IF ( MOD( K, ODIMS( 1 ) ) .EQ. 1 ) THEN
            IF ( K .GT. 1 ) THEN
 
*  There is no need to test whether there are higher dimensions since
*  ODIMS( 2 ) will always be defined...
               END = .FALSE.
               J = 2
 
*  Update the output co-ordinates.
*  ===============================
 
*  Find which co-ordinates have to change.  Normally this will just be
*  the next higher dimension.
               DO WHILE ( .NOT. END )
                  OFFSET = MOD( K, STRIDO( J ) )
                  IF ( OFFSET .NE. 0 ) THEN
                     DO I = 1, ODIMS( 1 )
                        COOUT( I, J ) = COOUT( I, J ) + 1<CONST>
                     END DO
 
*  The input co-ordinates have been updated and are ready for
*  conversion.
                     END = .TRUE.
                  ELSE
 
*  Just completed a stride in the Jth dimension, so we must reset it
*  to it's minimum value for the next stride.
                     DO I = 1, ODIMS( 1 )
                        COOUT( I, J ) = ORIGIN( J ) -
     :                                  1<CONST> / 2<CONST>
                     END DO
 
*  Now go to the next higher dimension to see if that has completed a
*  stride, or just needs to have its co-ordinate incremented.  There
*  must be a higher dimension since there are output elements to be
*  computed.
                     J = J + 1
                  END IF
               END DO
            END IF
 
*   Perform the transformation.
*   ===========================
 
*   Convert the co-ordinates for those of the output array, to those
*   of the input array.
            CALL TRN_TRN<T>( .TRUE., OEL, NCOUT, ODIMS( 1 ), COOUT,
     :                       TRID, OEL, NCIN, COIN, STATUS )
 
*   In turn convert those co-ordinates to fractional element indices.
*   Note that when elements are found beyond the axis range, the called
*   subroutine sets a bad status and a bad value for the element index.
*   The error can be handled transparently so set up a temporary error
*   context.
            IF ( STATUS .EQ. SAI__OK ) THEN
               DO IAXIS = 1, NDIMI
                  CALL ERR_MARK
                  CALL KPG1_AINB<T>( 1, IDIMS( IAXIS ), AXES(
     :                               AXJUMP( IAXIS ) ), ODIMS( 1 ),
     :                               COIN( 1, IAXIS ),
     :                               FRIND( 1, IAXIS ), STATUS )
                  CALL ERR_ANNUL( STATUS )
                  CALL ERR_RLSE
               END DO
            END IF
         END IF
 
*   Might as well exit if something has gone wrong performing the
*   transformation.
         IF ( STATUS .NE. SAI__OK ) GOTO 999
 
*   Find the vector index to the nearest-neighbour data.  Given a bad
*   co-ordinate, set the index to be bad.
         VOFF = 1
         DO IAXIS = 1, NDIMI
            I = MOD( K - 1, ODIMS( 1 ) ) + 1
            IF ( FRIND( I, IAXIS ) .EQ. VAL__BAD<T> ) THEN
               INDICE( K ) = VAL__BADI
               GO TO 100
 
*   Use INT rather than NINT for efficiency for certain compilers.
*   Allow for the sign of the value.  The 3/2 is -1/2 for the conversion
*   to NINT, and -1 for the fact that there are the index less one
*   strides to be applied to the vector offset.
            ELSE IF ( FRIND( I, IAXIS ) .LT. 0<CONST> ) THEN
               VOFF = VOFF + INT( FRIND( I, IAXIS ) -
     :                3<CONST> / 2<CONST> ) * STRIDI( IAXIS )
            ELSE
               VOFF = VOFF + INT( FRIND( I, IAXIS ) -
     :                1<CONST> / 2<CONST> ) * STRIDI( IAXIS )
            END IF
         END DO
         INDICE( K ) = VOFF
  100    CONTINUE
 
*   Move to the next output element.
         K = K + 1
 
*   Bottom of pixel iteration do-loop.
      END DO
 
  999 CONTINUE
 
      END
