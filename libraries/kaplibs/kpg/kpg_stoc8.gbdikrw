      SUBROUTINE KPG_STOC8<T>( EL, ARRAY, NGOOD, NUMPER, PERCNT, RANGE,
     :                         MEDIAN, PERVAL, STATUS )
*+
*  Name:
*     KPG_STOC8x

*  Purpose:
*     Calculates accurate order statistics by sorting an array

*  Language:
*     Starlink Fortran 77.

*  Invocation:
*     CALL KPG_STOC8x( EL, ARRAY, NGOOD, NUMPER, PERCNT, RANGE,
*                      MEDIAN, PERVAL, STATUS )

*  Description:
*     This routine calculates the median and optionally up to
*     one-hundred percentiles.  It achieves this by using Quicksort
*     to order the good array values, and hence provide correct values
*     (unlike the faster histogram approximation used by KPG1_HSTAx).
*
*     A clipped range may be supplied, such as found by KPG_OSTAx, to
*     derive ordered statistics after clipping of outliers.

*  Arguments:
*     EL = INTEGER*8 (Given)
*        Total number of pixels in the array.
*     ARRAY( EL ) = ? (Given)
*        The vectorised array of values whose ordered statistics are
*        to be calculated.
*     NGOOD = INTEGER*8 (Given)
*        Number of valid pixels which contributed to the statistics.
*     NUMPER = INTEGER (Given)
*        Number of percentiles values to report.  This should be in
*        the range 1 to 100.  Set this to 1 and PERCNT(1) to VAL__BADR
*        if percentiles are not required.
*     PERCNT( NUMPER ) = REAL (Given)
*        The percentiles to derive.  Valid percentiles must be in the
*        range 0.0 to 100.0, and preferably in ascending order.  If the
*        first element is set to the bad value, then no percentiles are
*        calculated.
*     RANGE( 2 ) = DOUBLE_PRECISION (Read)
*        The clipping limits between which to statistics are to be
*        determined, lower then upper.  A bad value means no limit
*        is needed at its respective end.
*     MEDIAN( 2 ) = DOUBLE PRECISION (Returned)
*        Median value.  If there is an even number of good values
*        present in the array, the median is the average of the middle
*        pair.  The second value is the clipped median after application
*        of the RANGE bounds.  If both RANGE values are bad no clipping
*        is performed and the clipped median is set to the bad value.
*     PERVAL( NUMPER, 2 ) = DOUBLE PRECISION (Returned)
*        Percentile values corresponding to the percentile fractions
*        in PERCNT.  The second set of percentiles are the clipped
*        values after application of the RANGE bounds.  If both RANGE
*        values are bad no clipping is performed and the clipped
*        percentiles are set to the bad value.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for byte, double-precision, integer, 64-bit
*     integer, real, and word data types: replace "x" in the routine name
*     by B, D, I, K, R, or W as  appropriate.  The data type of the
*     ARRAY argument must match the particular routine used.
*     -  If the value of NGOOD is not at least two, then this routine
*     will abort.  The median and percentiles will have the bad value.
*     -  The sorting is recorded in an index leaving the order of the
*     supplied array values intact.

*  Copyright:
*     Copyright (C) 2013 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2013 August 23 (MJC):
*        Original version adapted from KPG_STOSx.  The new routine
*        written to preserve the original API.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing allowed

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMSDAT public constants
      INCLUDE 'CNF_PAR'          ! For CNF_PVAL function
      INCLUDE 'MSG_PAR'          ! MSG_ constants

*  Arguments Given:
      INTEGER*8 EL
      <TYPE> ARRAY
      INTEGER*8 NGOOD
      INTEGER NUMPER
      REAL PERCNT( NUMPER )
      DOUBLE PRECISION RANGE ( 2 )

*  Arguments Returned:
      DOUBLE PRECISION MEDIAN( 2 )
      DOUBLE PRECISION PERVAL( NUMPER, 2 )

*  Status:
      INTEGER STATUS

*  External References:
      INTEGER KPG1_FLOOR         ! Most positive integer .LE. a given
                                 ! real

*  Local Constants:
      INTEGER NPRCTL             ! Maximum number of percentiles
      PARAMETER( NPRCTL = 100 )

*  Local Variables:
      INTEGER CPNTR              ! Pointer to clipped array
      LOGICAL DOPRCT             ! Calculate percentiles?
      INTEGER I                  ! Loop counter
      INTEGER J                  ! Loop counter
      LOGICAL INTYPE             ! Integer data type?
      INTEGER IPNTR              ! Pointer to sorted index
      DOUBLE PRECISION MEDIUN    ! Median of even no. of pixels in array
      INTEGER*8 NBGOOD           ! Number of good values after further
                                 ! bad values removed
      INTEGER NPERC              ! Constrained number of percentiles
      INTEGER*8 NREPHI           ! Number of replacements made above the
                                 ! threshold
      INTEGER*8 NREPLO           ! Number of replacements made below the
                                 ! threshold
      INTEGER*8 PERIND( NPRCTL ) ! Percentile indices in sorted array
      <TYPE> QUANT( NPRCTL )     ! Quantiles
      <TYPE> THRHI               ! Higher clipping threshold
      <TYPE> THRLO               ! Lower clipping threshold
      INTEGER*8 UPERIN( NPRCTL ) ! Percentile indices in unsorted array

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! Declarations of conversion routines
      INCLUDE 'NUM_DEF_CVT'      ! Definitions of conversion routines

*.

*  Initialise returned values.
      DO J = 1, 2
         MEDIAN( J ) = VAL__BADD
         DO I = 1, MIN( NPRCTL, MAX( 1, NUMPER ) )
            PERVAL( I, J ) = VAL__BADD
         END DO
      END DO

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Validate that there are sufficient valid values.
      IF ( NGOOD .LT. 2 ) THEN
         GOTO 999
      END IF

*  Can only calculate up to NPRCTL percentiles.
      IF ( NUMPER .GT. NPRCTL ) THEN
         CALL MSG_SETI( 'N', NUMPER )
         CALL MSG_SETI( 'NP', NPRCTL )
         CALL MSG_OUTIF( MSG__NORM, 'KPG_STOC8x_TOOMANY',
     :                   'You supplied ^N percentiles.  Only '/
     :                   /'the first ^NP are calculated.', STATUS )
      END IF
      NPERC = MIN( NUMPER, NPRCTL )

*  Use a brute-force sort of the data.
*  ===================================

*  Obtain workspace for pointers.
      CALL PSX_CALLOC8( EL, '_INT64', IPNTR, STATUS )
      INTYPE = '<T>' .EQ. 'I' .OR. '<T>' .EQ. 'B' .OR.
     :         '<T>' .EQ. 'W' .OR. '<T>' .EQ. 'K'

*  Convert to indices within the sorted array of good data values.
*  First check that percentiles have been supplied.
      DOPRCT = PERCNT( 1 ) .NE. VAL__BADR .AND. NUMPER .GT. 0
      IF ( DOPRCT ) THEN
         DO I = 1, NPERC
            PERIND( I ) = INT( PERCNT( I ) * 0.01 * REAL( NGOOD ) ) + 1
         END DO
      END IF

*  Call the appropriate routine to quicksort the array and then find the
*  order statistics.
      CALL PDA8_QSIA<T>( EL, ARRAY, %VAL( CNF_PVAL( IPNTR ) ) )

*  Obtain median
*  =============

*  Remove indices for any bad data values from the index array.  Indices
*  for good data values are shuffled down towards the start of the index
*  array to fill the gaps.  The order of the good data values is
*  unchanged by this.
      CALL KPG1_MVBD8<T>( EL, ARRAY, EL, %VAL( CNF_PVAL( IPNTR ) ),
     :                    NBGOOD, STATUS )

*  Extract the index of the median good value.
      CALL KPG1_RETR8K( EL, NBGOOD / 2 + 1, %VAL( CNF_PVAL( IPNTR ) ),
     :                  UPERIN( 1 ), STATUS )

*  Extract the median from the unsorted array.
      CALL KPG1_RETR8<T>( EL, UPERIN( 1 ), ARRAY, QUANT( 1 ), STATUS )
      MEDIAN( 1 ) = NUM_<T>TOD( QUANT( 1 ) )

*  Average the middle two of an even-numbered sample.
      IF ( MOD( NBGOOD, 2 ) .EQ. 0 ) THEN
         CALL KPG1_RETR8K( EL, NBGOOD / 2, %VAL( CNF_PVAL( IPNTR ) ),
     :                     UPERIN( 1 ), STATUS )
         CALL KPG1_RETR8<T>( EL, UPERIN( 1 ), ARRAY, QUANT( 2 ), STATUS )

         MEDIUN = NUM_<T>TOD( QUANT( 2 ) )
         MEDIAN( 1 ) = 0.5D0 * ( MEDIAN( 1 ) + MEDIUN )

         IF ( INTYPE ) THEN
            MEDIAN( 1 ) = DBLE( KPG1_FLOOR( REAL( MEDIAN( 1 ) ) ) )
         END IF
      END IF

*  Extract the percentiles.
*  ========================

*  Adopt the same approach as before, but now obtain multiple values.
      IF ( DOPRCT ) THEN

*  Determine the indices of percentiles.
         DO I = 1, NPERC
            PERIND( I ) = INT( PERCNT( I ) * 0.01 * REAL( NBGOOD ) ) + 1
         END DO

         CALL KPG1_RETV8K( EL, %VAL( CNF_PVAL( IPNTR ) ), NPERC,
     :                     PERIND, UPERIN, STATUS )
         CALL KPG1_RETV8<T>( EL, ARRAY, NPERC, UPERIN, QUANT, STATUS )

*  Convert to a whole number value in the double-precision PERVAL array
*  for an integer data array.
         IF ( INTYPE ) THEN
            DO I = 1, NPERC
               PERVAL( I, 1 ) = DBLE(
     :                          KPG1_FLOOR( NUM_<T>TOR( QUANT( I ) ) ) )
            END DO
         ELSE
            DO I = 1, NPERC
               PERVAL( I, 1 ) = NUM_<T>TOD( QUANT( I ) )
            END DO
         END IF
      END IF

*  Clipped statistics.
*  ===================
      IF ( RANGE( 1 ) .NE. VAL__BADD .OR.
     :     RANGE( 2 ) .NE. VAL__BADD ) THEN
         THRLO = NUM_DTO<T>( RANGE( 1 ) )
         THRHI = NUM_DTO<T>( RANGE( 2 ) )

*  Obtain workspace for clipped data.
         CALL PSX_CALLOC8( EL, '<HTYPE>', CPNTR, STATUS )

*  Replace the values in the output array outside the range with the
*  new values, otherwise copy from the input to the output NDF.
         CALL KPG1_THRS8<T>( .TRUE., EL, ARRAY, THRLO, THRHI,
     :                       VAL__BAD<T>, VAL__BAD<T>,
     :                       %VAL( CNF_PVAL( CPNTR ) ),
     :                       NREPLO, NREPHI, STATUS )

*  Call the appropriate routine to quicksort the array and then find the
*  order statistics.
         IF ( NREPLO .GT. 0 .OR. NREPHI .GT. 0 ) THEN
            CALL PDA8_QSIA<T>( EL, %VAL( CNF_PVAL( CPNTR ) ),
     :                         %VAL( CNF_PVAL( IPNTR ) ) )

*  Obtain median
*  =============

*  Remove indices for any bad data values from the index array.  Indices
*  for good data values are shuffled down towards the start of the index
*  array to fill the gaps.  The order of the good data values is
*  unchanged by this.
            CALL KPG1_MVBD8<T>( EL, %VAL( CNF_PVAL( CPNTR ) ), EL,
     :                          %VAL( CNF_PVAL( IPNTR ) ), NBGOOD, STATUS )

*  Extract the index of the median good value.
            CALL KPG1_RETR8K( EL, NBGOOD / 2 + 1, %VAL( CNF_PVAL( IPNTR ) ),
     :                        UPERIN( 1 ), STATUS )

*  Extract the median from the unsorted array.
            CALL KPG1_RETR8<T>( EL, UPERIN( 1 ), %VAL( CNF_PVAL( CPNTR ) ),
     :                          QUANT( 1 ), STATUS )
            MEDIAN( 2 ) = NUM_<T>TOD( QUANT( 1 ) )

*  Average the middle two of an even-numbered sample.
            IF ( MOD( NBGOOD, 2 ) .EQ. 0 ) THEN
               CALL KPG1_RETR8K( EL, NBGOOD / 2, %VAL( CNF_PVAL( IPNTR ) ),
     :                           UPERIN( 1 ), STATUS )
               CALL KPG1_RETR8<T>( EL, UPERIN( 1 ),
     :                             %VAL( CNF_PVAL( CPNTR ) ), QUANT( 2 ),
     :                             STATUS )

               MEDIUN = NUM_<T>TOD( QUANT( 2 ) )
               MEDIAN( 2 ) = 0.5D0 * ( MEDIAN( 2 ) + MEDIUN )

               IF ( INTYPE ) THEN
                  MEDIAN( 2 ) = DBLE( KPG1_FLOOR( REAL( MEDIAN( 2 ) ) ) )
               END IF
            END IF

*  Extract the percentiles.
*  ========================

*  Adopt the same approach as before, but now obtain multiple values.
            IF ( DOPRCT ) THEN

*  Re-determine the indices of percentiles as the number of good
*  values will have diminshed.
               DO I = 1, NPERC
                  PERIND( I ) = INT( PERCNT( I ) * 0.01 *
     :                               REAL( NBGOOD ) ) + 1
               END DO

               CALL KPG1_RETV8K( EL, %VAL( CNF_PVAL( IPNTR ) ), NPERC,
     :                           PERIND, UPERIN, STATUS )
               CALL KPG1_RETV8<T>( EL, %VAL( CNF_PVAL( CPNTR ) ),
     :                             NPERC, UPERIN, QUANT, STATUS )

*  Convert to a whole number value in the double-precision PERVAL array
*  for an integer data array.
               IF ( INTYPE ) THEN
                  DO I = 1, NPERC
                     PERVAL( I, 2 ) = DBLE( KPG1_FLOOR(
     :                                NUM_<T>TOR( QUANT( I ) ) ) )
                  END DO
               ELSE
                  DO I = 1, NPERC
                     PERVAL( I, 2 ) = NUM_<T>TOD( QUANT( I ) )
                  END DO
               END IF
            END IF

*  Clipping did not reject any elements, so the statistics are unchanged.
         ELSE
            MEDIAN( 2 ) = MEDIAN( 1 )
            IF ( DOPRCT ) THEN
               DO I = 1, NPERC
                  PERVAL( I, 2 ) = PERVAL( I, 1 )
               END DO
            END IF
         END IF

*  Release workspace for clipped data.
         CALL PSX_FREE( CPNTR, STATUS )

      END IF

*  Release index workspace.
      CALL PSX_FREE( IPNTR, STATUS )

  999 CONTINUE

      END
