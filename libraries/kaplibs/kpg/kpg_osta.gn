      SUBROUTINE KPG_OSTA<T>( BAD, EL, DATA, NCLIP, CLIP, ISTAT, DSTAT,
     :                        ISTATC, DSTATC, STATUS )
*+
*  Name:
*     KPG_OSTAx

*  Purpose:
*     Computes simple statistics for an array.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG_OSTAx( BAD, EL, DATA, NCLIP, CLIP, ISTAT, DSTAT,
*                     ISTATC, DSTATC, STATUS )

*  Description:
*     This routine computes simple statistics for an array, namely: the
*     number of valid pixels; the minimum and maximum pixel values (and
*     their positions); the pixel sum; the mean; and the population
*     standard deviation, skewness, and excess kurtosis.  Iterative
*     K-sigma clipping may also be optionally applied.
*
*     It uses a one-pass recursive algorithm for efficiency using the
*     formulae of Terriberry (2007).

*  Arguments:
*     BAD = LOGICAL (Given)
*        Whether checks for bad pixels should be performed on the array
*        being analysed.
*     EL = INTEGER (Given)
*        Number of pixels in the array.
*     DATA( EL ) = ? (Given)
*        Array to be analysed.
*     NCLIP = INTEGER (Given)
*        Number of K-sigma clipping iterations to apply (may be zero).
*     CLIP( NCLIP ) = REAL (Given)
*        Array of clipping limits for successive iterations, expressed
*        as standard deviations.
*     ISTAT( 3 ) = INTEGER (Returned)
*        The integer statistics before clipping.  The meanings of the
*        elements in order are as follows.
*        -  Number of valid pixels
*        -  Index where the pixel with the lowest value was (first)
*        found
*        -  Index where the pixel with the highest value was (first)
*        found
*     DSTAT( 7 ) = DOUBLE PRECISION (Returned)
*        The floating-point statistics before clipping derived from the
*        valid pixel values in DATA.  The meanings of the elements in
*        order are as follows.
*        -  Minimum value
*        -  Maximum value
*        -  Sum
*        -  Mean
*        -  Population standard deviation
*        -  Population skewness
*        -  Population excess kurtosis.  This is zero for a Gaussian.
*     ISTATC( 3 ) = INTEGER (Returned)
*        The integer statistics after clipping derived from the valid
*        pixel values in DATA.  The attributions of the elements are
*        the same as for argument ISTAT.  If NCLIP is zero, the
*        array will contain the same values as ISTAT.
*     DSTATC( 7 ) = DOUBLE PRECISION (Returned)
*        The floating-point statistics after clipping derived from the
*        valid pixel values in DATA.  The attributions of the elements
*        are the same as for argument DSTAT.  If NCLIP is zero, the
*        array will contain the same values as DSTAT.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each of the standard numeric types.
*     Replace "x" in the routine name by D, R, I, W, UW, B or UB as
*     appropriate. The data type of the array being analysed must match
*     the particular routine used.
*     -  If no clipping is performed (i.e. if NCLIP = 0) then the values
*     of arguments which return results after clipping will be the same
*     as for those returning results before clipping.
*     -  If ISTAT(1) or ISTATC(1) is zero, then the values of all the
*     derived statistics will be undefined and will be set to the "bad"
*     value appropriate to their data type (except for the pixel sum,
*     which will be zero).

*  References:
*     Terriberry, T.B., 2007, Computing Higher-order Moments Online,
*     http://people.xiph.org/~tterribe/notes/homs.html.

*  Copyright:
*     Copyright (C) 2010 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2010 July 21 (MJC):
*        Original version.
*     2010 August 4 (MJC):
*        Check the second moment is not zero when computing the
*        skewness and kurtosis.
*     2010 August 6 (MJC):
*        Always store statistics to the returned clipped-statistics
*        arrays.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT primitive data constants

*  Arguments Given:
      LOGICAL BAD
      INTEGER EL
      <TYPE> DATA( EL )
      INTEGER NCLIP
      REAL CLIP( * )

*  Arguments Returned:
      INTEGER ISTAT( 3 )
      DOUBLE PRECISION DSTAT( 7 )
      INTEGER ISTATC( 3 )
      DOUBLE PRECISION DSTATC( 7 )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER*8 EL8
      INTEGER*8 ISTAT8( 3 )
      INTEGER*8 ISTATC8( 3 )
*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

* Call the 64 bit versiuon, converting INTEGERs to and from INTEGER*8
      EL8 = EL
      CALL KPG_OSTA8<T>( BAD, EL8, DATA, NCLIP, CLIP, ISTAT8, DSTAT,
     :                  ISTATC8, DSTATC, STATUS )
      ISTAT( 1 ) = ISTAT8( 1 )
      ISTAT( 2 ) = ISTAT8( 2 )
      ISTAT( 3 ) = ISTAT8( 3 )
      ISTATC( 1 ) = ISTATC8( 1 )
      ISTATC( 2 ) = ISTATC8( 2 )
      ISTATC( 3 ) = ISTATC8( 3 )


      END
