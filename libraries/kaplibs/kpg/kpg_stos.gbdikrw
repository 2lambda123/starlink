      SUBROUTINE KPG_STOS<T>( EL, ARRAY, NGOOD, NUMPER, PERCNT, MEDIAN,
     :                        PERVAL, STATUS )
*+
*  Name:
*     KPG_STOSx

*  Purpose:
*     Calculates accurate order statistics by sorting an array

*  Language:
*     Starlink Fortran 77.

*  Invocation:
*     CALL KPG_STOSx( EL, ARRAY, NGOOD, NUMPER, PERCNT,
*                     MEDIAN, PERVAL, STATUS )

*  Description:
*     This routine calculates the median and optionally up to
*     one-hundred percentiles.  It achieves this by using Quicksort
*     to order the good array values, and hence provide correct values
*     (unlike the faster histogram approximation used by KPG1_HSTAx).

*  Arguments:
*     EL = INTEGER (Given)
*        Total number of pixels in the array.
*     ARRAY( EL ) = ? (Given)
*        The vectorised array of values whose ordered statistics are
*        to be calculated.
*     NGOOD = INTEGER (Given)
*        Number of valid pixels which contributed to the statistics.
*     NUMPER = INTEGER (Given)
*        Number of percentiles values to report.  This should be in
*        the range 1 to 100.  Set this to 1 and PERCNT(1) to VAL__BADR
*        if percentiles are not required.
*     PERCNT( NUMPER ) = REAL (Given)
*        The percentiles to derive.  Valid percentiles must be in the
*        range 0.0 to 100.0, and preferably in ascending order.  If the
*        first element is set to the bad value, then no percentiles are
*        calculated.
*     MEDIAN = DOUBLE PRECISION (Returned)
*        Median value.  If there is an even number of good values
*        present in the array, the median is the average of the middle
*        pair.
*     PERVAL( NUMPER ) = DOUBLE PRECISION (Returned)
*        Percentile values corresponding to the percentile fractions
*        in PERCNT.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for byte, double-precision, integer, 64-bit
*     integer, real, and word data types: replace "x" in the routine name
*     by B, D, I, K, R, or W as  appropriate.  The data type of the
*     ARRAY argument must match the particular routine used.
*     -  If the value of NGOOD is not at least two, then this routine
*     will abort.  The median and percentiles will have the bad value.
*     -  The sorting is recorded in an index leaving the order of the
*     supplied array values intact.

*  Copyright:
*     Copyright (C) 2009, 2013 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2009 August 20 (MJC):
*        Original version adapted from KAPPA STATS.
*     2009 August 21 (MJC):
*        Exclude one- and two-byte integer types as sorting code
*        does not support them.  Fix pasting bug involving KPG1_FLOOR.
*     2009 September 28 (MJC):
*        Do not report an error when NGOOD is too small.
*     2013 January 4 (MJC):
*        Protect against an index of zero for low percentiles.
*     2013 August 23 (MJC):
*        Do not revise readonly argument NGOOD; use a local variable
*        instead.  Determine the indices of the percentiles after
*        shifting the index array for all the bad values.
*     20-FEB-2020 (DSB)
*        Call 8-byte version to do the work.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing allowed

*  Arguments Given:
      INTEGER EL
      <TYPE> ARRAY
      INTEGER NGOOD
      INTEGER NUMPER
      REAL PERCNT( NUMPER )

*  Arguments Returned:
      DOUBLE PRECISION MEDIAN
      DOUBLE PRECISION PERVAL( NUMPER )

*  Status:
      INTEGER  STATUS

*  Local Variables:
      INTEGER*8 EL8
      INTEGER*8 NGOOD8

*.

*  Call the 8-byte version to do the work.
      EL8 = EL
      NGOOD8 = NGOOD
      CALL KPG_STOS8<T>( EL8, ARRAY, NGOOD8, NUMPER, PERCNT, MEDIAN,
     :                   PERVAL, STATUS )

      END
