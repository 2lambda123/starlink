      SUBROUTINE KPG1_AXVL<T>( LBND, UBND, AXIS, EL, PIXCO, DATCO,
     :                       STATUS )
*+
*  Name:
*     KPG1_AXVLx

*  Purpose:
*     Obtains the axis-array values given their corresponding pixel
*     co-ordinates.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_AXVLx( LBND, UBND, AXIS, EL, PIXCO, DATCO, STATUS )

*  Description:
*     This routine determines values within an axis array for a series
*     of non-integer pixel co-ordinates.  It assumes that the array is
*     monotonic and approximately linear, since it uses linear
*     interpolation to derive the axis values. This routine may be
*     used for arbitrary one-dimensional arrays in addition to axes,
*     provided this criterion is met.
*
*  Arguments:
*     LBND = INTEGER (Given)
*        The lower bound of the axis array.
*     UBND = INTEGER (Given)
*        The upper bound of the axis array.
*     AXIS( LBND:UBND ) = ? (Given)
*        The axis array.
*     EL = INTEGER (Given)
*        The number of pixel co-ordinates whose values in the axis
*        array are to be found.
*     PIXCO( EL ) = ? (Given)
*        The pixel co-ordinates of the values in the axis array.
*     DATCO( EL ) = ? (Returned)
*        The axis-array values.  A value is set to the bad value when
*        its input co-ordinate lies outside the range of co-ordinates
*        in the axis.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for the data types real or double precision:
*     replace "x" in the routine name by R or D respectively, as
*     appropriate.  The axis array and indices, and the returned values
*     should have this data type as well.
*     -  A pixel co-ordinate that lies within the lower-bound or
*     upper-bound element of the axis array but not between elements,
*     and hence cannot have interpolation (i.e. PIXCO is less than LBND
*     - 0.5 or greater than UBND + 0.5) return with the centre data
*     co-ordinate of the lower-bound or upper-bound pixel respectively.
*     -  An error report is made and bad status returned should any
*     input index lie outside the range of the bounds of the axis.
*     Processing will continue through the list.

*  [optional_subroutine_items]...
*  Copyright:
*     Copyright (C) 1991, 1993, 1994 Science & Engineering Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1991 April 29 (MJC):
*        Original version.
*     1991 May 31 (MJC):
*        Converted to generic.
*     1993 March 2 (MJC):
*        Made to continue when an input index is out of bounds.
*     1994 December 8 (MJC):
*        Made to use pixel co-ordinates consistently.  Prevously there
*        was ambiguity whether this routine expect input pixel indices
*        or co-ordinates.  Allowed for the special cases where the
*        value lies within the limiting elements of the axis array, but
*        cannot be interpolated.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT public constants

*  Arguments Given:
      INTEGER LBND
      INTEGER UBND
      INTEGER EL

      <TYPE> AXIS( LBND:UBND )
      <TYPE> PIXCO( EL )

*  Arguments Returned:
      <TYPE> DATCO( EL )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      LOGICAL BAD                ! True if an input value is out of
                                 ! bounds

      <LTYPE> FRAC               ! Fractional array index
      INTEGER I                  ! Loop counter
      INTEGER LB                 ! Truncated pixel index 
      <LTYPE> PIXIND             ! Input co-ordinate as a pixel index

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set the flag to indicate that none of the input indices are out of
*  range.
      BAD = .FALSE.

      DO  I = 1, MAX( EL, 1 )

*  Check the pixel co-ordinate does not lie outside the bounds.
         IF ( PIXCO( I ) .LT. NUM_ITO<T>( LBND ) - 1<CONST> .OR.
     :        PIXCO( I ) .GT. NUM_ITO<T>( UBND ) ) THEN
            STATUS = SAI__ERROR
            CALL MSG_SET<T>( 'PIXCO', PIXCO( I ) )
            CALL MSG_SETI( 'LBND', LBND - 1 )
            CALL MSG_SETI( 'UBND', UBND )

            CALL ERR_REP( 'KPG1_AXVLx_OUTBOUND',
     :        'The pixel co-ordinate ^PIXCO lies outside the '/
     :        /'bounds of the axis (^LBND to ^UBND).', STATUS )

*  Temporarily set the status to good so that the co-ordinates of the
*  remaining points may be found.  Record the fact so that a bad status
*  can be reset before exiting.
            STATUS = SAI__OK
            BAD = .TRUE.

*  Set the co-ordinate value to be bad.
            DATCO( I ) = VAL__BAD<T>

*  Deal with a co-ordinate within the axis lower-bound element, but
*  not between pixels, and so cannot be interpolated.
         ELSE IF ( PIXCO( I ) .LE. NUM_ITO<T>( LBND ) -
     :             NUM_RTO<T>( 0.5 ) ) THEN
            DATCO( I ) = AXIS( LBND )

*  Deal with a co-ordinate within the axis upper-bound element, but
*  not between pixels, and so cannot be interpolated.
         ELSE IF ( PIXCO( I ) .GE. NUM_ITO<T>( UBND ) -
     :             NUM_RTO<T>( 0.5 ) ) THEN
            DATCO( I ) = AXIS( UBND )

         ELSE

*  Find the next lower integer pixel index.
            PIXIND = PIXCO( I ) + 0.5
            LB = NINT( PIXCO( I ) )
            FRAC = ( PIXIND - NUM_ITO<T>( LB ) )

*  Derive the data value via linear interpolation.
            DATCO( I ) = FRAC * AXIS( LB + 1 ) +
     :                   ( 1<CONST> - FRAC ) * AXIS( LB )
         END IF
      END DO

*  Reset the status should any of the values be bad.
      IF ( BAD ) STATUS = SAI__ERROR

      END
