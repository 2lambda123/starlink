      SUBROUTINE KPG1_NUMB<T>( BAD, VABS, ABOVE, EL, INARR, VALUE,
     :                         NUMBER, STATUS )
*+
*  Name:
*     KPG1_NUMBx

*  Purpose:
*     Counts the number of elements with values or absolute values
*     above or below a limit.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_NUMBx( BAD, VABS, ABOVE, EL, INARR, VALUE, NUMBER,
*                      STATUS )

*  Description:
*     This routine returns the number of points in the input array
*     that have a value or absolute value greater than or less than
*     the input value.

*  Arguments:
*     BAD = LOGICAL (Given)
*        If true testing for bad pixels will be made.  This should not
*        be set to false unless there definitely no bad values within
*        the input array.
*     VABS = LOGICAL (Given)
*        If true the comparison is performed with the absolute value
*        of each array element.
*     ABOVE = LOGICAL (Given)
*        If true the criterion tests for array values greater than the
*        limit; if false the criterion tests for array values less than
*        the limit.
*     EL = INTEGER (Given)
*        The dimension of the input array.
*     INARR( EL ) = ? (Given)
*        The input data array
*     VALUE = ? (Given)
*        Value to test each array value against.
*     NUMBER = INTEGER (Returned)
*        The number of elements of the input array greater than the
*        specified value when VABS = FALSE, or the number of elements
*        of the input array whose absolute values are greater than the
*        specified value when VABS = TRUE.
*     STATUS = INTEGER (Given)
*        Global status value.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate. The
*     array and comparison value supplied to the routine must have the
*     data type specified.

*  Algorithm:
*     -  The routine loops around the whole input array, incrementing
*     the value of NUMBER by one each time the current pixel has an
*     value greater than the specified VALUE.  There are separate
*     processing paths for the eight states of VABS, ABOVE and BAD in
*     combination.

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council.
*     Copyright (C) 1995 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1991 November 11 (MJC):
*        Original version.
*     1995 February 21 (MJC):
*        Standardised comment alignment, and sorted the variables.
*     20-FEB-2020 (DSB):
*        Use 8-byte version to do the work.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE             ! No default typing allowed

*  Arguemnts Given:
      LOGICAL BAD
      LOGICAL VABS
      LOGICAL ABOVE
      INTEGER EL
      <TYPE> INARR( EL )
      <TYPE> VALUE

*  Arguments Returned:
      INTEGER NUMBER

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER*8 EL8
      INTEGER*8 NUMBER8

*  Use the 8-byte version to do the work.
      EL8 = EL
      CALL KPG1_NUMB8<T>( BAD, VABS, ABOVE, EL8, INARR, VALUE,
     :                    NUMBER8, STATUS )
      NUMBER = NUMBER8

      END
