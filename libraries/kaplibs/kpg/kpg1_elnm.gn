      SUBROUTINE KPG1_ELNM<T>( LBND, UBND, EL, ARRAY, STATUS )
*+
*  Name:
*     KPG1_ELNMx

*  Purpose:
*     Writes a range of element numbers into an array.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_ELNMBx( LBND, UBND, EL, ARRAY, STATUS )

*  Description:
*     This routine writes numbers sequentially to a one-dimensional
*     array, where the numbers are between defined integer limits and
*     are stepped by 1 (or -1) from one pixel to the next.  In other
*     words the array value takes the element number plus an offset.
*     Only the first EL elements can be accommodated in the output
*     array, should the section be larger than this.

*  Arguments:
*     LBND = INTEGER (Given)
*        The first value to be written to the output array.  If this is
*        larger than argument UBND, the values will decrease by 1 for
*        each element.
*     UBND = INTEGER (Given)
*        The last value to be written to the output array, provided
*        there are sufficient elements to accommodate it.  If not
*        only EL values will be stored.
*     EL = INTEGER (Given)
*        The number of elements in the output array.
*     ARRAY( EL ) = ? (Returned)
*        The array into which the sub-array is copied.
*     STATUS = INTEGER (Given)
*        The global status.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate.  The
*     ARRAY argument must have the data type specified.

*  Copyright:
*     Copyright (C) 1988, 1990 Science & Engineering Research Council.
*     Copyright (C) 1995 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*     
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 59, Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     MJC: Malcolm J. Currie  (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1988 October 25 (MJC):
*        Original version.
*     1990 July 29 (MJC):
*        Allowed the element value to decrease with increasing element
*        number.
*     1995 April 26 (MJC):
*        Renamed from ELNMB.  Added the Notes; and used modern-style
*        variable names and declarations, and commenting.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing allowed

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Global SSE definitions

*  Arguments Given:
      INTEGER LBND
      INTEGER UBND
      INTEGER EL

*  Arguments Returned:
      <TYPE> ARRAY( EL )

*  Status:
      INTEGER STATUS

*  Local Variables:
      INTEGER I                  ! Counter
      INTEGER J                  ! Counter
      INTEGER LOWER              ! Lower bound of the array values
      INTEGER UPPER              ! Upper bound of the array values

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Decide if the increment is positive or negative.
      IF ( UBND. GE. LBND ) THEN

*  Forward
*  =======
*
*  Only store as many values as can be accommodated.
         UPPER = MIN( UBND, EL + LBND - 1 )

*  Copy the elements of the array.
         J = 0
         DO  I = LBND, UPPER, 1
            J = J + 1
            ARRAY( J ) = NUM_ITO<T>( I )
         END DO

      ELSE

*  Reverse
*  =======

*  Only store as many values as can be accommodated.
         LOWER = MAX( UBND, LBND - EL + 1 )

*  Copy the elements of the array.
         J = 0
         DO  I = LBND, LOWER, -1
            J = J + 1
            ARRAY( J ) = NUM_ITO<T>( I )
         END DO
      END IF

      END
