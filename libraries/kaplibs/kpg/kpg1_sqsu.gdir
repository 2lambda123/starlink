      SUBROUTINE KPG1_SQSU<T>( EL, ARRAY, SUMSQ, STATUS )
*+
*  Name:
*     KPG1_SQSUx

*  Purpose:
*     Finds the sum of the squares of an array.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_SQSUx( EL, ARRAY, SUMSQ, STATUS )

*  Description:
*     This routine sums the squares of a supplied array and return the
*     sum.  This might used to sum the residuals for a minimisation.
*     Bad values are ignored.

*  Arguments:
*     EL = INTEGER (Given)
*        The number of elements in the array to sum.
*     ARRAY( EL ) = ? (Given)
*        The array whose sqaured values are to be summed.
*     SUMSQ = ? (Returned)
*        The sum of the squared array values.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  [optional_subroutine_items]...
*  Notes:
*     There is a routine for integer, real, and double precision data
*     types: replace "x" in the routine name by I, R, or D respectively.
*     The ARRAY and SUMSQ arguments supplied to the routine must have
*     the data type specified.

*  Copyright:
*     Copyright (C) 1996 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*     
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 59, Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1996 January 31 (MJC):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! VAL__ constants

*  Arguments Given:
      INTEGER EL
      <TYPE> ARRAY( EL )

*  Arguments Returned:
      <TYPE> SUMSQ

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER I                  ! Loop counter
      DOUBLE PRECISION SUM       ! Summation of squares
      DOUBLE PRECISION V         ! Array value

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Initialise the summation.  Use a double-precision value.
      SUM = 0.0D0

*  Loop through all array elements.
      DO I = 1, EL

*  Test for bad values.
         IF ( ARRAY( I ) .NE. VAL__BAD<T> ) THEN

*  Form the sum after converting the array value to double precision.
            V = NUM_<T>TOD( ARRAY( I ) )
            SUM = SUM + V * V
         END IF
      END DO

*  Check for a sum out of range.  This is for the integer instantiation.
      IF ( SUM .GT. NUM_<T>TOD( VAL__MAX<T> ) ) THEN
         SUMSQ = VAL__BAD<T>
      ELSE
         SUMSQ = NUM_DTO<T>( SUM )
      END IF

      END
