      SUBROUTINE KPG1_GAUF<T>( DATA, LBND, UBND, NITER, TOLL, AMP, X0,
     :                        SIGMA, BACK, STATUS )
*+
*  Name:
*     KPG1_GAUFx

*  Purpose:
*     To fit a Gaussian to a one-dimensional array of data.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_GAUFx( DATA, LBND, UBND, NITER, TOLL, AMP, X0,
*    :                  SIGMA, BACK, STATUS )

*  Description:
*     This routine fits a Gaussian to a 1-d array of data.  It finds
*     the amplitude, centre, sigma and background levels by an
*     iterative method.

*  Arguments:
*     DATA( LBND:UBND ) = ? (Given)
*        The data array to be fitted by a Gaussian.
*     LBND = INTEGER (Given)
*        The lower bound of the data array.
*     UBND = INTEGER (Given)
*        The upper bound of the data array.
*     NITER = INTEGER (Given)
*        The maximum number of refining iterations.
*     TOLL = REAL (Given)
*        The accuracy criterion: absolute for the centre and relative
*        for the amplitude and width.  The accuracy of back is assessed
*        as a fraction of the Gaussian amplitude.
*     AMP = REAL (Returned)
*        The Gaussian amplitude.
*     X0 = REAL (Returned)
*        The Gaussian centre.
*     SIGMA = REAL (Returned)
*        The 'sigma' of the Gaussian.
*     BACK = REAL (Returned)
*        The background signal level.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     There is a routine for each numeric data type: replace "x" in the
*     routine name by D, R, I, W, UW, B, UB as appropriate.  The array
*     supplied to the routine must have the data type specified.

*  Algorithm:
*     -  Find initial estimates of the gaussian amplitude, mean and
*     width by centroiding and linear least-squares, using the
*     lower quartile data point as an initial background estimate.
*     -  Refine the estimates by repeatedly solving the linearised
*     normal equations for a least-squares fit.

*  Copyright:
*     Copyright (C) 1981, 1990, 1992 Science & Engineering Research 
*                   Council.
*     Copyright (C) 1996 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     RFWS: R.F. Warren-Smith (Durham Univ.)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1981 (RFWS):
*        Original version.
*     1990 September 18 (MJC):
*        Made generic, renamed from GAUFIT, added STATUS, commented
*        the variables and converted the prologue.
*     1992 April 28 (MJC):
*        Returns values even if the iteration loop is completed without
*        convergence to the tolerance.  Assumes oscillation and takes
*        mean of last two values.
*     1996 January 26 (MJC):
*        Removed NAG calls.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! Bad-pixel constants

*  Arguments Given:
      INTEGER
     :  LBND,
     :  UBND,
     :  NITER

      REAL
     :  TOLL

      <TYPE>
     :  DATA( LBND:UBND )

*  Arguments Returned:
      REAL
     :  AMP,
     :  BACK,
     :  SIGMA,
     :  X0

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      REAL
     :  VAL_<T>TOR               ! Convert to real

*  Local Constants:
      REAL VARMIN                ! Minimum variance
      PARAMETER ( VARMIN = 0.3**2 )

      INTEGER NPAR               ! Number of parameters to find
      PARAMETER ( NPAR = 4 )

*  Local Variables:
      DOUBLE PRECISION
     :  A( NPAR, NPAR ),         ! LHS of normal equations
     :  R( NPAR ),               ! RHS and solutions of normal equations
     :  SUM0,                    ! Sum of Gaussian deviations
     :  SUM1,                    ! Sum zero-order  moment
     :  SUM2,                    ! Sum first-order moment
     :  SUM3,                    ! Sum second-order moment
     :  WKS1( NPAR )             ! Work space for PDA routine

      REAL
     :  C( NPAR ),               ! Parameters of the fit
     :  D,                       ! Background subtracted data value
     :  DELTA,                   ! Deviation of the fits from the data
     :  DEV,                     ! Deviation
     :  DEV2,                    ! Squared deviation
     :  DEVMAX,                  ! Maximum squared deviation for
                                 ! clipping
     :  DV,                      ! Data value
     :  EX,                      ! Gaussian value at the current data
                                 ! element
     :  OLDVAR,                  ! Previous variance
     :  POINTS,                  ! Number of points in the data
                                 ! sample
     :  RVAR,                    ! half/sigma squared term of Gaussian
     :  RVAR1,                   ! 1/sigma
     :  RVAR2,                   ! 1/sigma squared
     :  VAR,                     ! Current variance
     :  X( NPAR )                ! Statistics: 1=amplitude, 2=centre
                                 ! 3=sigma, 4=background

      INTEGER
     :  ERRCO,                   ! PDA error indicator
     :  I, J,                    ! Loop counters
     :  IFAIL,                   ! PDA-routine status
     :  ITER,                    ! Iteration loop counter
     :  NQUART,                  ! Index of lower quartile (or 25th
                                 ! pixel if smaller)
     :  WKS2( NPAR )             ! Work space for PDA routine

      <LTYPE>
     :  STAK( 25 )               ! The smallest data values

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*.

*    Check inherited global status.

      IF ( STATUS .NE. SAI__OK ) RETURN

*    Initialise sums for forming initial estimate of the data mean
*    and standard deviation.

      POINTS = REAL( UBND - LBND + 1 )
      SUM1 = 0.0D0
      SUM2 = 0.0D0
      SUM3 = 0.0D0

*    Find the lower quartile data point (or the 25th smallest if there
*    are too many) to use as an initial background estimate.

      NQUART = MIN( MAX( 1, NINT( POINTS * 0.25 ) ), 25 )
      CALL KPG1_NTHM<T>( .TRUE., DATA( LBND ), NINT( POINTS ),
     :                    NQUART, STAK, STATUS )

*    Watch for all bad pixels.

      IF ( STAK( 1 ) .EQ. VAL__MAX<T> ) THEN
         STATUS = SAI__ERROR
         CALL ERR_REP( 'KPG1_GAUFx_BADDA',
     :     'Cannot fit a Gaussian because all the data are bad.',
     :     STATUS )
         GOTO 100
      END IF

      X( 4 ) = VAL_<T>TOR( .FALSE., STAK( 1 ), STATUS )

*    Form sums for mean and standard deviation above the background.

      DO I = LBND, UBND

*       Do not count negative or bad data.

         IF ( DATA( I ) .NE. VAL__BAD<T> ) THEN
            D = MAX( 0.0, NUM_<T>TOR( DATA( I ) ) - X( 4 ) )
            SUM1 = SUM1 + D
            D = D * I
            SUM2 = SUM2 + D
            D = D * I
            SUM3 = SUM3 + D
         END IF
      END DO

*    If there are no positive data points, abort reporting an error.

      IF ( SUM1 .LE. 0.0D0 ) THEN
         STATUS = SAI__ERROR
         CALL ERR_REP( 'KPG1_GAUFX_NEGDA',
     :     'All the data are negative.  Unable to fit a Gaussian.',
     :     STATUS )
         GO TO 100
      END IF

*    Form mean and standard deviation.

      X( 2 ) = REAL( SUM2 / SUM1 )
      X( 3 ) = REAL( SQRT( MAX( DBLE( VARMIN ),
     :               ( SUM3 - SUM2 * X( 2 ) ) / SUM1 ) ) )

*    Initialise sums for forming an initial estimate of the Gaussian
*    amplitude.

      SUM0 = 0.0D0
      SUM1 = 0.0D0
      SUM2 = 0.0D0
      SUM3 = 0.0D0

*    Consider those data points within 5 standard deviations of the
*    mean.

      RVAR = 0.5 / ( X( 3 ) ** 2 )
      DEVMAX = ( 5.0 * X( 3 ) ) ** 2

      DO I = LBND, UBND
         DEV = REAL( I ) - X( 2 )
         DEV2 = DEV * DEV

*       Exclude those greater than 5 standard deviations from the 
*       summations and those that are bad.

         IF ( DEV2 .LE. DEVMAX .AND.
     :        DATA( I ) .NE. VAL__BAD<T> ) THEN

*          Form sums for positive and good pixels.

            EX = EXP( -RVAR * DEV2 )
            D = MAX( 0.0, NUM_<T>TOR( DATA( I ) ) - X( 4 ) )
            SUM0 = SUM0 + EX * EX
            SUM1 = SUM1 + D * EX
            SUM2 = SUM2 + D * DEV * EX
            SUM3 = SUM3 + D * DEV2 * EX
         END IF

      END DO

*    If there were no satisfactory data points, abort reporting an
*    error.

      IF ( SUM0 .LE. 0.0D0 .OR. SUM1 .LE. 0.0D0 ) THEN
         STATUS = SAI__ERROR
         CALL ERR_REP( 'KPG1_GAUFx_CONDA',
     :     'Unable to fit a Gaussian because the data have the same '/
     :     /'value.', STATUS )
         GO TO 100
      END IF

*    Form estimates of the Gaussian height and mean.

      X( 1 ) = REAL( SUM1 / SUM0 )
      X( 2 ) = X( 2 ) + REAL( SUM2 / SUM1 )

*    Estimate the variance, then make an approximate correction
*    for the fact that the data points were weighted with a Gaussian
*    using the old value for the variance.

      VAR = REAL( ( SUM3 - ( SUM2 * SUM2 ) / SUM1 ) / SUM1 )
      OLDVAR = X( 3 ) * X( 3 )
      VAR = ( OLDVAR * VAR ) / MAX( OLDVAR - VAR, 1.0E-10 )
      X( 3 ) = SQRT( MAX( VARMIN, VAR ) )

*    Start the iteration loop to refine the estimates of the Gaussian
*    parameters.

      DO ITER = 1, NITER

*       Initialise arrays for forming the linearised normal equations.

         DO I = 1, NPAR
            R( I ) = 0.0D0

            DO J = 1, NPAR
               A( I, J ) = 0.0D0
            END DO
         END DO

*       Consider data points within 5 standard deviations of the mean.

         RVAR1 = 1.0 / X( 3 )
         RVAR2 = RVAR1 * RVAR1
         RVAR = 0.5 * RVAR2
         DEVMAX = ( 5.0 * X( 3 ) ) ** 2

         DO I = LBND, UBND

*          Find the deviations from the approximate centre.      

            DEV = I - X( 2 )
            DEV2 = DEV * DEV

*          Check threshold and for good data.

            IF ( DEV2 .LE. DEVMAX .AND.
     :           DATA( I ) .NE. VAL__BAD<T> ) THEN

*             Form the quantities required in the normal equations.

               EX = EXP( - RVAR * DEV2 )
               C( 1 ) = EX
               C( 2 ) = EX * X( 1 ) * DEV * RVAR2
               C( 3 ) = C( 2 ) * DEV * RVAR1
               C( 4 ) = 1.0

*             Find the deviation of the fit from the data.

               DV = NUM_<T>TOR( DATA( I ) )
               DELTA = X( 1 ) * EX + X( 4 ) - DV

*             Form the sums for the normal equations to solve
*             Ax = R.

               R( 1 ) = R( 1 ) + DELTA * C( 1 )
               R( 2 ) = R( 2 ) + DELTA * C( 2 )
               R( 3 ) = R( 3 ) + DELTA * C( 3 )
               R( 4 ) = R( 4 ) + DELTA * C( 4 )
               A( 1, 1 ) = A( 1, 1 ) + C( 1 ) * C( 1 )
               A( 2, 1 ) = A( 2, 1 ) + C( 2 ) * C( 1 )
               A( 3, 1 ) = A( 3, 1 ) + C( 3 ) * C( 1 )
               A( 4, 1 ) = A( 4, 1 ) + C( 4 ) * C( 1 )
               A( 2, 2 ) = A( 2, 2 ) + C( 2 ) * C( 2 )
               A( 3, 2 ) = A( 3, 2 ) + C( 3 ) * C( 2 )
               A( 4, 2 ) = A( 4, 2 ) + C( 4 ) * C( 2 )
               A( 3, 3 ) = A( 3, 3 ) + C( 3 ) * C( 3 )
               A( 4, 3 ) = A( 4, 3 ) + C( 4 ) * C( 3 )
               A( 4, 4 ) = A( 4, 4 ) + C( 4 ) * C( 4 )
            END IF

         END DO

*       Form the complete symmetric matrix of normal coefficients.

         A( 1, 2 ) = A( 2, 1 )
         A( 1, 3 ) = A( 3, 1 )
         A( 2, 3 ) = A( 3, 2 )
         A( 1, 4 ) = A( 4, 1 )
         A( 2, 4 ) = A( 4, 2 )
         A( 3, 4 ) = A( 4, 3 )

*       Call a PDA routine to solve the linearised normal equations.
*       Contain its limited error handling in a new error context,
*       and report specific messages.  The fit is returned in R.

         CALL ERR_MARK
         IFAIL = 0
         CALL PDA_DGEFS( A, NPAR, NPAR, R, 1, ERRCO, WKS1, WKS2, IFAIL )
         IF ( IFAIL .NE. 0 ) CALL ERR_ANNUL( IFAIL )
         CALL ERR_RLSE

*       Watch for an error.

         IF ( ERRCO .EQ. -4 ) THEN
            STATUS = SAI__ERROR
            CALL MSG_SETI( 'IFAIL', ERRCO )
            CALL ERR_REP( 'KPG1_GAUFx_NORMEQ',
     :        'Error solving the normal equations for the Gaussian '/
     :        /'fit.  Normal-equation matrix is singular.', STATUS )
            GO TO 100
         END IF

*       Apply the corrections to the Gaussian parameters with damping
*       factors for large amplitude changes.

         X( 1 ) = X( 1 ) - R( 1 ) / ( 1.0 + 2.0 * ABS( R( 1 ) /
     :            MAX( X( 1 ), 1.0E-20 ) ) )
         X( 2 ) = X( 2 ) - R( 2 ) / ( 1.0 + 2.0 * ABS( R( 2 ) /
     :            POINTS ) )
         X( 3 ) = X( 3 ) - R( 3 ) / ( 1.0 + 2.0 * ABS( R( 3 ) /
     :            MAX( X( 3 ), 1.0E-20 ) ) )
         X( 4 ) = X( 4 ) - R( 4 ) / ( 1.0 + 2.0 * ABS( R( 4 ) /
     :            MAX( X( 1 ), 1.0E-20 ) ) )

*       If the accuracy criterion is met, exit from the iteration loop.

         IF ( ( ABS( R( 1 ) ) .LE. TOLL * X( 1 ) ) .AND.
     :        ( ABS( R( 2 ) ) .LE. TOLL ) .AND.
     :        ( ABS( R( 3 ) ) .LE. TOLL * X( 3 ) ) .AND.
     :        ( ABS( R( 4 ) ) .LE. TOLL * X( 1 ) ) ) THEN

*          Equation required parameters with the statistics.

            AMP = X( 1 )
            X0 = X( 2 )
            SIGMA = X( 3 )
            BACK = X( 4 )
            GO TO 100

*       Since convergence has not been reached, it is assumed that there
*       is an oscillation present.  Therefore take the approximate mean
*       of the last pair of values.

         ELSE IF ( ITER .EQ. NITER ) THEN

            AMP  = X( 1 ) + R( 1 ) / ( 2.0 + 4.0 * ABS( R( 1 ) /
     :             MAX( X( 1 ), 1.0E-20 ) ) )
            X0 = X( 2 ) + R( 2 ) / ( 2.0 + 4.0 * ABS( R( 2 ) /
     :           POINTS ) )
            SIGMA = X( 3 ) + R( 3 ) / ( 2.0 + 4.0 * ABS( R( 3 ) /
     :              MAX( X( 3 ), 1.0E-20 ) ) )
            BACK = X( 4 ) + R( 4 ) / ( 2.0 + 4.0 * ABS( R( 4 ) /
     :             MAX( X( 1 ), 1.0E-20 ) ) )

         END IF

      END DO

  100 CONTINUE

      END
