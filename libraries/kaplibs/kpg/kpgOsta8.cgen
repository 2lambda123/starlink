#include <stdint.h>
#include <math.h>
#include "sae_par.h"
#include "prm_par.h"
#include "ast.h"
#include "mers.h"
#include "star/thr.h"

#define MAX(a,b) (((a)>(b))?(a):(b))

/* Local data types */
typedef struct  CGEN_FUNCTION(KpgOstaData) {
   int operation;
   int64_t i1;
   int64_t i2;
   const CGEN_TYPE *data;
   int bad;
   double sum;
   double dmin;
   double dmax;
   int64_t ngood;
   double moment[ 4 ];
   double llim;
   double ulim;
   int64_t imax;
   int64_t imin;
} CGEN_FUNCTION(KpgOstaData);

/* Prototypes for local static functions. */
static void CGEN_FUNCTION(kpgOsta8_work)( void *job_data_ptr, int *status );




void CGEN_FUNCTION(kpgOsta8)( ThrWorkForce *wf, int bad, int64_t el,
                              const CGEN_TYPE *data, int nclip,
                              const float *clip, int64_t istat[3],
                              double dstat[7], int64_t istatc[3],
                              double dstatc[7], int *status ){
/*
*+
*  Name:
*     kpgOsta8<T>

*  Purpose:
*     Computes simple statistics for an array.

*  Synopsis:
*     void kpgOsta8<T>( ThrWorkForce *wf, int bad, int64_t el,
*                       const <TYPE> *data, int nclip, const float *clip,
*                       int64_t istat[3], double dstat[7], int64_t istatc[3],
*                       double dstatc[7], int *status )

*  Description:
*     This function computes simple statistics for an array, namely: the
*     number of valid pixels; the minimum and maximum pixel values (and
*     their positions); the pixel sum; the mean; and the population
*     standard deviation, skewness, and excess kurtosis.  Iterative
*     K-sigma clipping may also be optionally applied.
*
*     It uses a one-pass recursive algorithm for efficiency using the
*     formulae of Terriberry (2007).

*  Arguments:
*     wf = ThrWorkForce * (Given)
*        Pointer to a pool of worker threads (see thrGetWorkForce in the
*        Starlink "thr" library). If NULL is supplied, all calculations
*        will be done in the current thread.
*     bad
*        Whether checks for bad pixels should be performed on the array
*        being analysed.
*     el
*        Number of pixels in the array.
*     data
*        Point to array to be analysed.
*     nclip
*        Number of K-sigma clipping iterations to apply (may be zero).
*     clip
*        Pointer to array of clipping limits for successive iterations, expressed
*        as standard deviations. Its length is given by "nclip".
*     istat
*        Returned holding the integer statistics before clipping.  The meanings of
*        the elements in order are as follows.
*        -  Number of valid pixels
*        -  One-based index where the pixel with the lowest value was (first)
*        found
*        -  One-based Index where the pixel with the highest value was (first)
*        found
*     dstat
*        Returned holding the floating-point statistics before clipping derived
*        from the valid pixel values in "data". The meanings of the elements in
*        order are as follows.
*        -  Minimum value
*        -  Maximum value
*        -  Sum
*        -  Mean
*        -  Population standard deviation
*        -  Population skewness
*        -  Population excess kurtosis.  This is zero for a Gaussian.
*     istats
*        Returned holding the integer statistics after clipping derived from
*        the valid pixel values in "data". The attributions of the elements are
*        the same as for argument "istat". If "nclip" is zero, the array will
*        contain the same values as "istat".
*     dstatc
*        Returned holding the floating-point statistics after clipping derived
*        from the valid pixel values in "data". The attributions of the elements
*        are the same as for argument "dstat". If "nclip" is zero, the array will
*        contain the same values as "dstat".
*     status
*        The global status.

*  Notes:
*     -  There is a routine for each of the standard numeric types.
*     Replace "<T>" in the routine name by D, R, I, W, UW, B or UB as
*     appropriate. The data type of the array being analysed must match
*     the particular routine used.
*     -  If no clipping is performed (i.e. if "nclip" = 0) then the values
*     of arguments which return results after clipping will be the same
*     as for those returning results before clipping.
*     -  If "istat[0]" or "istatc[0]" is zero, then the values of all the
*     derived statistics will be undefined and will be set to the "bad"
*     value appropriate to their data type (except for the pixel sum,
*     which will be zero).

*  References:
*     Terriberry, T.B., 2007, Computing Higher-order Moments Online,
*     http://people.xiph.org/~tterribe/notes/homs.html.

*  Copyright:
*     Copyright (C) 2020 East Asian Observatory.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     DSB: David S Berry (EAO)
*     {enter_new_authors_here}

*  History:
*     10-JAN-2020 (DSB):
*        Original version transliterated from kpg_ostat8.gn (written by
*        MJC).
*     {enter_further_changes_here}

*-
*/

/* Local Constants: */
#define NMOM 4

/* Local Variables: */
   CGEN_FUNCTION(KpgOstaData) *pdata; /* Pointer to single job data structure */
   CGEN_FUNCTION(KpgOstaData) *job_data; /* Pointer to all job data structures */
   double dev;       /* Deviation from current mean */
   double devn;      /* Normalised deviation */
   double devsq;     /* Normalised deviation squared */
   double devsqn;    /* Normalised squared deviation */
   double dmax;      /* Maximum value */
   double dmin;      /* Minimum value */
   double kurt;      /* Excess kurtosis */
   double m1A;       /* nA*moment[1] for all previous contributions */
   double m1B;       /* nB*moment[1] for new contributions */
   double mean;      /* mean value of whole population */
   double moment[ NMOM ]; /* The moments */
   double skew;      /* Skewness */
   double stdev;     /* Standard deviation */
   double sum;       /* Sum of good values */
   double varnce;    /* Population variance */
   int iclip;        /* Loop counter for clipping iterations */
   int iw;           /* Index of worker thread */
   int m;            /* Loop counter for moments */
   int nclp;         /* Number of clipping iterations */
   int nw;           /* Number of threads to use */
   int64_t imax;     /* Pixel index of maximum value */
   int64_t imin;     /* Pixel index of minimum value */
   int64_t nA;       /* No of values in all previous contributions */
   int64_t nB;       /* No of values in new contribution */
   int64_t ngood;    /* Number of good values */
   int64_t step;     /* Number of data elements per thread */

/* Check inherited global status. */
   if( *status != SAI__OK ) return;

/* How many worker threads in the workforce? If the number of pixels is
   very low, do all the calculations in the current thread. */
   nw = wf ? wf->nworker : 1;
   if( el < 10*nw ) nw = 1;

/* Find how many data elements to process in each worker thread. Must be
   at least one. */
   if( nw > 0 ) {
      step = el/nw;
   } else {
      step = el;
   }

/* Allocate job data for threads. Each structure describes a single job
   to calculate the statistics for a subset of the pixels, and will be
   allocated to a single worker thread. Store the first and last array
   elements to be processed by the worker thread in each structure. The
   last worker picks up any remaining elements left over by the integer
   division used to calculate "step". Also store some other required
   constant values in each structure. */
   job_data = astCalloc( nw, sizeof(*job_data) );
   if( *status == SAI__OK ) {
      for( iw = 0; iw < nw; iw++ ) {
         pdata = job_data + iw;
         pdata->i1 = iw*step;
         if( iw < nw - 1 ) {
            pdata->i2 = pdata->i1 + step - 1;
         } else {
            pdata->i2 = el - 1;
         }
         pdata->data = data;
         pdata->bad = bad;
      }
   }

/* Loop through each clipping iteration, plus an initial iteration
   where no clipping is applied. */
   nclp = MAX( 0, nclip );
   for( iclip = 0; iclip <= nclp; iclip++ ) {

/* Initialise for forming statistics. */
      ngood = 0;
      sum = 0.0;
      for( m = 0; m < NMOM; m++ ) moment[ m ] = 0.0;
      dmin = VAL__MAXD;
      dmax = VAL__MIND;

/* For each section of the data array, submit a job to the workforce to
   calculate the moments for data values in the section. */
      for( iw = 0; iw < nw; iw++ ) {

/* Get a pointer to the structure used to describe the job. */
         pdata = job_data + iw;

/* If clipping is being applied, then calculate the clipping limits and
   store in the job description. */
         if( iclip == 0 ) {
            pdata->operation = 1;
            pdata->llim = VAL__MIND;
            pdata->ulim = VAL__MAXD;
         } else {
            pdata->operation = 2;
            pdata->llim = mean - stdev * (double)( clip[ iclip - 1 ] );
            pdata->ulim = mean + stdev * (double)( clip[ iclip - 1 ] );
         }

/* Submit the job to the workforce. */
         thrAddJob( wf, 0, pdata, CGEN_FUNCTION(kpgOsta8_work), 0, NULL,
                    status );
      }

/* Put the current thread to sleep until all the above jobs have completed. */
      thrWait( wf, status );

/* Now combine the results returned by each worker thread for its own
   section of the data array to get the moments for the whole array. This
   uses the equations given by Terriberry. */
      ngood = 0;
      sum = 0.0;
      for( m = 0; m < NMOM; m++ ) moment[ m ] = 0.0;
      dmin = VAL__MAXD;
      dmax = VAL__MIND;

      for( iw = 0; iw < nw; iw++ ) {
         pdata = job_data + iw;

         sum += pdata->sum;
         if( pdata->dmin < dmin ) {
            dmin = pdata->dmin;
            imin = pdata->imin;
         }
         if( pdata->dmax > dmax ) {
            dmax = pdata->dmax;
            imax = pdata->imax;
         }

         nB = pdata->ngood;
         nA = ngood;
         ngood = nA + nB;

         if( ngood > 0 ) {
            dev = pdata->moment[ 0 ] - moment[ 0 ];
            devn = dev/(double)( ngood );
            devsq = devn*devn;
            devsqn = dev*devn*nA*nB;
            m1A = nA*pdata->moment[1];
            m1B = nB*moment[1];
            moment[ 0 ] += devn*nB;
            moment[ 3 ] += pdata->moment[ 3 ] +
                           devsqn*devsq*(double)( nA*nA - nA*nB + nB*nB ) +
                           6.0*devsq*( m1A*nA + m1B*nB ) -
                           4.0*devn*( nA*pdata->moment[2] - nB*moment[2] );
            moment[ 2 ] +=  pdata->moment[ 2 ] + devsqn * devn * ( nA - nB ) -
                            3.0 * devn * ( m1A - m1B );
            moment[ 1 ] += pdata->moment[ 1 ] + devsqn;
         }
      }

/* If there were no valid pixels, then use null result values. */
      if( ngood == 0 ) {
         imin = VAL__BADK;
         dmin = VAL__BADD;
         imax = VAL__BADK;
         dmax = VAL__BADD;
         sum = 0.0;
         mean = VAL__BADD;
         stdev = VAL__BADD;
         skew = VAL__BADD;
         kurt = VAL__BADD;

/* Otherwise, calculate the pixel mean. */
      } else {
          mean = moment[ 0 ];

/* Before calculating the standard deviation, check for (a) only one
   contributing pixel, (b) all pixels having the same value and (c)
   rounding errors producing a negative variance value. in all these
   cases, calculate a standard deviation value of zero. */
         varnce = moment[ 1 ] / (double)( ngood );
         if( ngood == 1 || dmin == dmax || varnce < 0.0 ) {
            stdev = 0.0;

/* Otherwise, calculate the standard deviation normally. */
         } else {
            stdev = sqrt( varnce );
         }

/* Evaluate the skewness and kurtosis from the moments.  Note the
   kurtosis is not the pure kurtosis, but the excess kurtosis.  This
   evaluates to zero for a Gaussian.  Protect against a zero second
   moment with some tolerance for rounding. */
         if( fabs( moment[ 1 ] ) > 10.0 * VAL__EPSD ) {
            skew = sqrt( (double)( ngood ) / moment[ 1 ] ) *
                          moment[ 2 ] / moment[ 1 ];
            kurt = (double)( ngood ) * moment[ 3 ] /
                   ( moment[ 1 ] * moment[ 1 ] ) - 3.0;
         }
      }

/* Store the statistics in the returned arrays.  if no clipping was
   applied on this iteration, then set values for the un-clipped return
   arguments. */
      if( iclip == 0 ) {
         istat[ 0 ] = ngood;
         istat[ 1 ] = imin + 1;
         dstat[ 0 ] = dmin;
         istat[ 2 ] = imax + 1;
         dstat[ 1 ] = dmax;
         dstat[ 2 ] = sum;
         dstat[ 3 ] = moment[ 0 ];
         dstat[ 4 ] = stdev;
         dstat[ 5 ] = skew;
         dstat[ 6 ] = kurt;
      }

      istatc[ 0 ] = ngood;
      istatc[ 1 ] = imin + 1;
      dstatc[ 0 ] = dmin;
      istatc[ 2 ] = imax + 1;
      dstatc[ 1 ] = dmax;
      dstatc[ 2 ] = sum;
      dstatc[ 3 ] = moment[ 0 ];
      dstatc[ 4 ] = stdev;
      dstatc[ 5 ] = skew;
      dstatc[ 6 ] = kurt;

/* Quit performing clipping iterations if there are no valid pixels
   left.  */
      if( ngood == 0 ) break;
   }

/* Free resources. */
   job_data = astFree( job_data );
}




static void CGEN_FUNCTION(kpgOsta8_work)( void *job_data_ptr, int *status ){
/*
*  Name:
*     kpgOsta8_work<X>

*  Purpose:
*     Executed in a worker thread to do various calculations for
*     kpgOsta8.

*  Invocation:
*     void kpgOsta8_work<X>( void *job_data_ptr, int *status )

*  Arguments:
*     job_data_ptr = KpgOstaData<X> * (Given)
*        Data structure describing the job to be performed by the worker
*        thread.
*     status = int * (Given and Returned)
*        Inherited status.

*/

/* Local Variables: */
   CGEN_FUNCTION(KpgOstaData) *pdata; /* Pointer to job description */
   const CGEN_TYPE *data; /* Pointer to start of data array */
   const CGEN_TYPE *pd;   /* Pointer to current element of data array */
   double dev;       /* Deviation from current mean */
   double devn;      /* Normalised deviation */
   double devsq;     /* Normalised deviation squared */
   double devsqn;    /* Normalised squared deviation */
   double dmax;      /* Maximum value */
   double dmin;      /* Minimum value */
   double llim;      /* Lower clipping limit */
   double moment[ NMOM ]; /* The moments */
   double sum;       /* Sum of good values */
   double ulim;      /* Upper clipping limit */
   double value;     /* Double-precision array value */
   int bad;          /* CHeck for bad values? */
   int m;            /* Loop counter for moments */
   int64_t i;        /* Loop counter for array pixels */
   int64_t imax;     /* Index of minimum value */
   int64_t imin;     /* Index of minimum value */
   int64_t ngood;    /* Number of good values */
   int64_t nm1;      /* Previous number of good values */

/* Check inherited status */
   if( *status != SAI__OK ) return;

/* Get a pointer that can be used for accessing the required items in the
   supplied structure. */
   pdata = (CGEN_FUNCTION(KpgOstaData) *) job_data_ptr;

/* For convenience, store commonly used values in local variables */
   data = pdata->data;
   bad = pdata->bad;

/* Initialise the statistics for the array section to be processed by this
   worker. */
   ngood = 0;
   sum = 0.0;
   for( m = 0; m < NMOM; m++ ) moment[ m ] = 0.0;
   dmin = VAL__MAXD;
   dmax = VAL__MIND;

/* Calculate statistics without clipping... */
   if( pdata->operation == 1 ) {

/* Loop round all the good array elements to be processed by this worker. */
      pd = data + pdata->i1;
      for( i = pdata->i1; i <= pdata->i2; i++,pd++ ) {
         if( !bad || *pd != CGEN_BAD ) {

/* Convert the array values to double precision and count them. */
            value = (double) *pd;
            ngood++;
            nm1 = ngood - 1;
            sum += value;

/* Evaluate moments incrementally using the deviations about the
   current mean.  These are the formulae of Terriberry. */
            dev = value - moment[ 0 ];
            devn = dev / (double)( ngood );
            devsq = devn * devn;
            devsqn = dev * devn * nm1;
            moment[ 0 ] += devn;
            moment[ 3 ] += devsqn * devsq * (double)( ngood * ngood -
                           3 * ngood + 3 ) + 6.0 * devsq * moment[ 1 ] -
                           4.0 * devn * moment[ 2 ];
            moment[ 2 ] += devsqn * devn * (double)( ngood - 2 ) -
                           3.0 * devn * moment[ 1 ];
            moment[ 1 ] += devsqn;

/* Note the minimum and maximum pixel values and where they occur. */
            if( value < dmin ) {
               dmin = value;
               imin = i;
            }
            if( value > dmax ) {
               dmax = value;
               imax = i;
            }
         }
      }

/* Calculate statistics with clipping... */
   } else if( pdata->operation == 2 ) {
      ulim = pdata->ulim;
      llim = pdata->llim;

/* Loop round all the good array elements to be processed by this worker. */
      pd = data + pdata->i1;
      for( i = pdata->i1; i <= pdata->i2; i++,pd++ ) {
         if( !bad || *pd != CGEN_BAD ) {

/* Convert the array values to double precision, but this time select
   only those which lie within the clipping limits. */
            value = (double) *pd;
            if( value <= ulim && value >= llim ) {

/* Count the unclipped values. */
               ngood++;
               nm1 = ngood - 1;
               sum += value;

/* Evaluate moments incrementally using the deviations about the
   current mean.  These are the formulae of Terriberry. */
               dev = value - moment[ 0 ];
               devn = dev / (double)( ngood );
               devsq = devn * devn;
               devsqn = dev * devn * nm1;
               moment[ 0 ] += devn;
               moment[ 3 ] += devsqn * devsq * (double)( ngood * ngood -
                              3 * ngood + 3 ) + 6.0 * devsq * moment[ 1 ] -
                              4.0 * devn * moment[ 2 ];
               moment[ 2 ] += devsqn * devn * (double)( ngood - 2 ) -
                              3.0 * devn * moment[ 1 ];
               moment[ 1 ] += devsqn;

/* Note the minimum and maximum pixel values and where they occur. */
               if( value < dmin ) {
                  dmin = value;
                  imin = i;
               }
               if( value > dmax ) {
                  dmax = value;
                  imax = i;
               }
            }
         }
      }

/* Report an error if the requested operation is unknown. */
   } else if( *status == SAI__OK ) {
      *status = SAI__ERROR;
      errRepf( " ", "kpgOsta8_work: Unknown operation '%d'.", status,
               pdata->operation );
   }

/* Return the section's moments in the job data structure. */
   pdata->sum = sum;
   pdata->dmin = dmin;
   pdata->dmax = dmax;
   pdata->imin = imin;
   pdata->imax = imax;
   pdata->ngood = ngood;
   for( m = 0; m < NMOM; m++ ) pdata->moment[ m ] = moment[ m ];
}
