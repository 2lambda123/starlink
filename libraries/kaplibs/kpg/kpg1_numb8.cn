#include "f77.h"
#include "kaplibs.h"
#include "mers.h"
#include "star/thr.h"
#include "prm_par.h"
#include "ast.h"
#include "sae_par.h"

/* Local data types */
typedef struct  kpg1Numb8Data<T> {
   const <CTYPE> *in;
   <CTYPE> value;
   int bad;
   int vabs;
   int above;
   int64_t i1;
   int64_t i2;
   int64_t number;
} kpg1Numb8Data<T>;

/* Prototypes for local static functions. */
static void kpg1Numb8_work<T>( void *job_data_ptr, int *status );



/*
*+
*  Name:
*     KPG1_NUMB8<T>

*  Purpose:
*     Counts the number of elements with values or absolute values
*     above or below a limit.

*  Language:
*     C, designed to be called from Fortran.

*  Invocation:
*     CALL KPG1_NUMB8<T>( BAD, VABS, ABOVE, EL, INARR, VALUE, NUMBER,
*                         STATUS )

*  Description:
*     This routine returns the number of points in the input array
*     that have a value or absolute value greater than or less than
*     the input value.

*  Arguments:
*     BAD = LOGICAL (Given)
*        If true testing for bad pixels will be made.  This should not
*        be set to false unless there definitely no bad values within
*        the input array.
*     VABS = LOGICAL (Given)
*        If true the comparison is performed with the absolute value
*        of each array element.
*     ABOVE = LOGICAL (Given)
*        If true the criterion tests for array values greater than the
*        limit; if false the criterion tests for array values less than
*        the limit.
*     EL = INTEGER*8 (Given)
*        The dimension of the input array.
*     INARR( EL ) = ? (Given)
*        The input data array
*     VALUE = ? (Given)
*        Value to test each array value against.
*     NUMBER = INTEGER*8 (Returned)
*        The number of elements of the input array greater than the
*        specified value when VABS = FALSE, or the number of elements
*        of the input array whose absolute values are greater than the
*        specified value when VABS = TRUE.
*     STATUS = INTEGER (Given)
*        Global status value.

*  Notes:
*     -  There is a routine for each numeric data type: replace "<T>" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate. The
*     array and comparison value supplied to the routine must have the
*     data type specified.

*  Copyright:
*     Copyright (C) 2021 East Asian Observatory
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     DSB: David S Berry (EAO)

*  History:
*     2-JUN-2021 (DSB):
*        Original C version.

*-
*/

F77_SUBROUTINE(kpg1_numb8<TLC>)( LOGICAL(BAD), LOGICAL(VABS), LOGICAL(ABOVE),
                                 INTEGER8(EL), <CNFTYPE>_ARRAY(INARR),
                                 <CNFTYPE>(VALUE), INTEGER8(NUMBER),
                                 INTEGER(STATUS) ) {


/* Local Variables: */
   ThrWorkForce *wf;         /* Pointer to workforce (a pool of threads) */
   kpg1Numb8Data<T> *job_data; /* Pointer to all job data structures */
   kpg1Numb8Data<T> *pdata;    /* Pointer to single job data structure */
   int64_t step;             /* Number of data elements per thread */
   int iw;                   /* Index of worker thread */
   int nw;                   /* Number of threads to use */

/* Initialise returned values. */
   *NUMBER = 0;

/* Check inherited status */
   if( *STATUS != SAI__OK ) return;

/* Find the number of cores/processors available and create a pool of
   threads of the same size. */
   wf = thrGetWorkforce( thrGetNThread( "KAPPA_THREADS", STATUS ), STATUS );

/* How many worker threads in the workforce? May not be the same as
   requested if the workforce already existed. */
   nw = wf ? wf->nworker : 1;

/* Allocate job data for threads. Each structure describes a single job
   to be allocated to a single worker thread. */
   job_data = astCalloc( nw, sizeof(*job_data) );
   if( *STATUS == SAI__OK ) {

/* Find the number of pixels to check in each thread. If the array is
   very small, process it entirely in a single thread. */
      if( *EL > 100*nw ){
         step = *EL/nw;
      } else {
         step = *EL;
         nw = 1;
      }

/* Store the information needed by each thread, and then submit the job to
   the workforce for execution by the next available worker thread. */
      for( iw = 0; iw < nw; iw++ ) {
         pdata = job_data + iw;

         pdata->i1 = iw*step;
         if( iw < nw - 1 ) {
            pdata->i2 = pdata->i1 + step - 1;
         } else {
            pdata->i2 = *EL - 1;
         }

         pdata->in = INARR;
         pdata->value = *VALUE;
         pdata->bad = F77_ISTRUE(*BAD);
         pdata->vabs = F77_ISTRUE(*VABS);
         pdata->above = F77_ISTRUE(*ABOVE);

         thrAddJob( wf, 0, pdata, kpg1Numb8_work<T>, 0, NULL, STATUS );
      }

/* Put the current thread to sleep until all the above jobs have
   completed. */
      thrWait( wf, STATUS );

/* Accumulate the counts from all threads. */
      for( iw = 0; iw < nw; iw++ ) {
         pdata = job_data + iw;
         *NUMBER += pdata->number;
      }
   }

/* Free resources. */
   job_data = astFree( job_data );
}


static void kpg1Numb8_work<T>( void *job_data_ptr, int *status ){
/*
*  Name:
*     kpg1Numb8_work<T>

*  Purpose:
*     Executed in a worker thread to do various calculations for
*     kpg1_numb8<T>.

*  Invocation:
*     void kpg1Numb8_work<T>( void *job_data_ptr, int *status )

*  Arguments:
*     job_data_ptr = kpg1Numb8Data<X> * (Given)
*        Data structure describing the job to be performed by the worker
*        thread.
*     status = int * (Given and Returned)
*        Inherited status.

*/


/* Local Variables: */
   const <CTYPE> *pin;    /* Pointer to next input value */
   <CTYPE> value;         /* Test value */
   <CTYPE> absv;          /* Absolute pixel value */
   kpg1Numb8Data<T> *pdata; /* Pointer to single job data structure */
   int64_t i;             /* Loop variable */
   int64_t number;        /* Number of pixels that satisfy the requirements */

/* Check inherited status */
   if( *status != SAI__OK ) return;

/* Get a pointer that can be used for accessing the required items in the
   supplied structure. */
   pdata = (kpg1Numb8Data<T> *) job_data_ptr;
   value = pdata->value;
   pin = pdata->in + pdata->i1;
   number = 0;

/* There 8 possibily processing paths depending on the values of the
   three input logical arguments.

   Test is greater than the limit.
   =============================== */
   if( pdata->above ){

/* Compare absolute values.
   ======================== */
      if( pdata->vabs ) {

/* Check for bad values.
   ==================== */
         if( pdata->bad ) {

            if( value < 0.0 ){
               for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
                  if( *pin != VAL__BAD<T> ) number++;
               }
            } else {
               for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
                  absv = *pin;
                  if( absv != VAL__BAD<T> ) {
                     if( absv < 0 ) absv = -absv;
                     if( absv > value ) number++;
                  }
               }
            }

/* Do not check for bad values.
   ============================ */
         } else {

            if( value < 0.0 ){
               number = pdata->i2 - pdata->i1 + 1;
            } else {
               for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
                  absv = *pin;
                  if( absv < 0 ) absv = -absv;
                  if( absv > value ) number++;
               }
            }
         }

/* Compare actual values.
   ======================== */
      } else {

/* Check for bad values.
   ==================== */
         if( pdata->bad ) {
            for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
               if( *pin != VAL__BAD<T> && *pin > value ) number++;
            }

/* Do not check for bad values.
   ============================ */
         } else {
            for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
               if( *pin > value ) number++;
            }
         }
      }

/* Test is less than the limit.
   =============================== */
   } else {

/* Compare absolute values.
   ======================== */
      if( pdata->vabs ) {

/* Check for bad values.
   ==================== */
         if( pdata->bad ) {

            if( value > 0.0 ){
               for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
                  absv = *pin;
                  if( absv != VAL__BAD<T> ) {
                     if( absv < 0 ) absv = -absv;
                     if( absv < value ) number++;
                  }
               }
            }

/* Do not check for bad values.
   ============================ */
         } else {

            if( value > 0.0 ){
               for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
                  absv = *pin;
                  if( absv < 0 ) absv = -absv;
                  if( absv < value ) number++;
               }
            }
         }

/* Compare actual values.
   ======================== */
      } else {

/* Check for bad values.
   ==================== */
         if( pdata->bad ) {
            for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
               if( *pin != VAL__BAD<T> && *pin < value ) number++;
            }

/* Do not check for bad values.
   ============================ */
         } else {
            for( i = pdata->i1; i <= pdata->i2; i++,pin++ ){
               if( *pin < value ) number++;
            }
         }
      }
   }

   pdata->number = number;

}

