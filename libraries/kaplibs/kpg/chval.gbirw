      SUBROUTINE CHVAL<T>( DIM, INARR, OLDVAL, NEWVAL, OUTARR, STATUS )
*+
*  Name:
*     CHVAL<T>

*  Purpose:
*     Replaces a specified pixel value.
   
*  Description:
*     This routine replaces a specified pixel with an input
*     value and returns the old value of the pixel.
*
*  Invocation:
*     CALL CHVAL<T>( DIM, INARR, OLDVAL, NEWVAL, OUTARR, STATUS )

*  Arguments:
*     DIM = INTEGER( READ )
*         The dimension of the input array
*     INARR( DIM ) = <TYPE> ( READ )
*         The input data array
*     OLDVAL = <TYPE> ( READ )
*         Value to be replaced
*     NEWVAL = <TYPE> ( READ )
*         New value to be substituted for the %OLDVAL.
*     OUTARR( DIM ) = <TYPE> ( READ )
*         The output data array containing the modified pixel values
*     STATUS  =  INTEGER( READ )
*         Global status value

*  Method:
*     If global status is ok. then
*     For all pixels
*        If pixel value is the value to be removed then
*           Replace old value in data array with the new value
*        Endif
*     Endfor
*     End
*
*  Bugs:
*     None are known at this time.

*  Copyright:
*     Copyright (C) 1988, 1990 Science & Engineering Research Council.
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)

*  History:
*     26-OCT-1988 (MJC):
*         Original.
*     24-NOV-1990 (MJC):
*         Used double precision for processing large integer values.
*     17-APR-2006 (TIMJ):
*         Make generic.

*-

*  Type Definitions:
      IMPLICIT  NONE           ! No default typing allowed
 
*  Global constants:
      INCLUDE  'SAE_PAR'       ! Global SSE definitions
      INCLUDE  'PRM_PAR'       ! Machine-precision constant
 
*  Import:
      INTEGER
     :  DIM
 
      <TYPE>
     :  INARR( DIM ),
     :  NEWVAL,
     :  OLDVAL
 
*  Export:
      <TYPE>
     :  OUTARR( DIM )
 
*  Status:
      INTEGER  STATUS
 
*  External references:
      DOUBLE PRECISION
     :  VAL_<T>TOD             ! Data-conversion external function
 
*  Local variables:
      INTEGER
     :  I                      ! Loop counter
 
      DOUBLE PRECISION
     :  DIFF,                  ! Normalised maximum difference between
                               ! the data value and the value to change
                               ! for them to be regarded as identical
     :  FPOLD                  ! Floating-point value to be replaced
 
*.

*    Error check on entry - return if not ok.
 
      IF ( STATUS .NE. SAI__OK ) RETURN
 
*    To avoid testing two floating-point values for equality, they
*    are tested to be different by less than a small fraction of
*    the value to be replaced.  The machine precision defines the
*    minimum detectable difference.
 
      FPOLD = 0.5 * VAL_<T>TOD( .FALSE., OLDVAL, STATUS )
      DIFF = ABS( FPOLD * VAL__EPSD )
      DO  I = 1, DIM, 1
 
*       The halving is done to prevent overflows.
 
         IF ( ABS( ( VAL_<T>TOD( .FALSE., INARR( I ), STATUS ) * 0.5 )
     :        - FPOLD ) .LE. DIFF ) THEN
 
*          A match has been found so replace the value in the output
*          array.
 
            OUTARR( I ) = NEWVAL
         ELSE
 
*          There is no match so copy the value to the output array.
 
            OUTARR( I ) = INARR( I )
         END IF
      END DO
 
*    end and return
 
      END
