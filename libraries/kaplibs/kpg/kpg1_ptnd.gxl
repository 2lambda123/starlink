      SUBROUTINE KPG1_PTND<T>( NDIM, LBNDI, UBNDI, IN, LBNDO, UBNDO,
     :                         BAD, OUT, EL, STATUS )
*+
*  Name:
*     KPG1_PTNDx

*  Purpose:
*     Pastes a section of an n-dimensional array into another array.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_PTNDx( NDIM, LBNDI, UBNDI, IN, LBNDO, UBNDO, BAD,
*                      OUT, EL, STATUS )

*  Description:
*     This routine pastes a specified section of the supplied
*     n-dimensional array (IN) into an output array (OUT).

*  Arguments:
*     NDIM = INTEGER (Given)
*        The number of axes.
*     LBNDI( NDIM ) = INTEGER (Given)
*        The lower pixel index bounds of the IN array.
*     UBNDI( NDIM ) = INTEGER (Given)
*        The upper pixel index bounds of the IN array.
*     IN( * ) = ? (Given)
*        The input array. Bounds given by LBNDI and UBNDI.
*     LBNDO( NDIM ) = INTEGER (Given)
*        The lower pixel index bounds of the area of the IN array to be
*        pasted into OUT.
*     UBNDO( NDIM ) = INTEGER (Given)
*        The upper pixel index bounds of the area of the IN array to be
*        pasted into OUT.
*     BAD = LOGICAL (Given)
*        If .TRUE., then any sections of the output array that fall
*        outside the input array are filled with bad values. Otherwise,
*        the supplied values in such output array sections are left
*        unchanged. For the CHARACTER version, a string of spaces is used
*        as the bad value.
*     OUT( * ) = ? (Given and Returned)
*        The output array. Bounds given by LBNDO and UBNDO.
*     EL = INTEGER (Returned)
*        The number of elements in the output array. Derived from LBNDO
*        and UBNDO.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each numerical data type: replace "x" in
*     the routine name by C, B, D, I, R, W, UB or UW as appropriate.  The
*     IN and OUT arrays supplied to the routine must have the data type
*     specified.
*     - For the CHARACTER version, the input and output arrays are
*     assumed to hold EL contiguous fix-length strings, with no trailing
*     null characters. The length of each string is determined using the
*     Fortran built-in "LEN" function. This should work both for
*     CHARACATER arrays created by Fortran, and for _CHAR arrays mapped
*     by DAT_MAPV, etc.

*  Copyright:
*     Copyright (C) 2008, 2009 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     DSB: David Berry (STARLINK)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     4-FEB-2008 (DSB):
*        Original version (copied from older KPG1_CPND).
*     17-JUL-2009 (TIMJ):
*        Fix loop termination condition to prevent accessing
*        uninitialised entries in CUBND and PIX arrays.
*     13-DEC-2012 (DSB):
*        Add support for character arrays.
*     20-FEB-2020 (DSB):
*        Call the 8-byte version to do the work.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'NDF_PAR'          ! NDF constants

*  Arguments Given:
      INTEGER NDIM
      INTEGER LBNDI( NDIM )
      INTEGER UBNDI( NDIM )
      <TYPE> IN( * )
      INTEGER LBNDO( NDIM )
      INTEGER UBNDO( NDIM )
      LOGICAL BAD

*  Arguments Returned:
      <TYPE> OUT( * )
      INTEGER EL

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER I
      INTEGER*8 EL8
      INTEGER*8 LBNDO8( NDF__MXDIM)
      INTEGER*8 LBNDI8( NDF__MXDIM)
      INTEGER*8 UBNDO8( NDF__MXDIM)
      INTEGER*8 UBNDI8( NDF__MXDIM)
*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Call the 8-byte version to do the work.
      DO I = 1, NDIM
         LBNDI8( I ) = LBNDI( I )
         UBNDI8( I ) = UBNDI( I )
         LBNDO8( I ) = LBNDO( I )
         UBNDO8( I ) = UBNDO( I )
      END DO

      CALL KPG1_PTND8<T>( NDIM, LBNDI8, UBNDI8, IN, LBNDO8, UBNDO8,
     :                    BAD, OUT, EL8, STATUS )

      EL = EL8

      END
