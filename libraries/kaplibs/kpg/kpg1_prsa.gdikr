      SUBROUTINE KPG1_PRSA<T>( BUFFER, MAXVAL, VALUES, NVAL, STATUS )
*+
*  Name:
*     KPG1_PRSAx

*  Purpose:
*     Extracts a list of numerical values from a string.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_PRSAx( BUFFER, MAXVAL, VALUES, NVAL, STATUS )

*  Description:
*     A supplied string is search for words (separated by spaces, tabs
*     or commas), which are extracted and converted to the required
*     numerical data type.  The numerical values and their number are
*     returned.

*  Arguments:
*     BUFFER = CHARACTER * ( * ) (Given)
*        The string containing a list of numerical values.
*     MAXVAL = INTEGER (Given)
*        The maximum number of values that can be read from the buffer
*        and stored.
*     VALUES( MAXVAL ) = ? (Returned)
*        The numeric values extracted from the string.
*     NVAL = INTEGER (Returned)
*        The actual number of values extracted from the string.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  An appropriate bad value is returned for any word equal to
*     "BAD" (case insensitive).
*     -  There is a routine for four numeric data type: replace "x"
*     in the routine name by D, I, K, or R as appropriate.  The array
*     returned from the routine must have the data type specified.  The
*     limitation on other integer types is because there are no
*     conversion routines between them and character in the CHR library.

*  Copyright:
*     Copyright (C) 1990 Science & Engineering Research Council.
*     Copyright (C) 2012 Science & Technology Facilities Council.
*     Copyright (C) 2017 East Asian Observatory.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     DSB: David S Berry (EAO)
*     {enter_new_authors_here}

*  History:
*     1990 Jun 12 (MJC):
*        Original version.
*     2012 April 30 (MJC):
*        Add 64-bit integers.
*     1-FEB-2017 (DSB):
*        Check for BAD values.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'CHR_ERR'          ! CHR error codes
      INCLUDE 'PRM_PAR'          ! VAL__ constants

*  Arguments Given:
      INTEGER MAXVAL
      CHARACTER * ( * ) BUFFER

*  Arguments Returned:
      <TYPE> VALUES( MAXVAL )
      INTEGER NVAL

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      INTEGER CHR_LEN            ! Length of the string less trailing
                                 ! blanks
      LOGICAL CHR_SIMLR          ! Case-insensitive string comparison

*  Local Variables:
      INTEGER INDEXE             ! Location within the string of the end
                                 ! of the current word
      INTEGER INDEXS             ! Location within the string of the
                                 ! start of the current word
      INTEGER NCOM               ! Length of the input string less
                                 ! trailing blanks

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Start a new error context.
      CALL ERR_MARK

*  Get the length of the string.
      NCOM = CHR_LEN( BUFFER )
      NVAL = 0
      INDEXE = -1

*  Loop until the end of the buffer.
      DO WHILE ( INDEXE .LT. NCOM .AND. NVAL .LE. MAXVAL .AND.
     :           STATUS .EQ. SAI__OK )

*  Shift the search to the next value.
         INDEXS = INDEXE + 1

*  Find the start and end indices of the value.
         CALL CHR_FIWS( BUFFER, INDEXS, STATUS )
         INDEXE = INDEXS
         CALL CHR_FIWE( BUFFER, INDEXE, STATUS )

*  Watch for the case where the word terminates the line.  Since this
*  is quite normal, the error should be annulled.
         IF ( STATUS .EQ. CHR__ENDOFSENT ) CALL ERR_ANNUL( STATUS )

*  Extract the value required and convert to <COMM> type.
         NVAL = NVAL + 1
         IF( CHR_SIMLR( BUFFER( INDEXS:INDEXE ), 'BAD' ) ) THEN
            VALUES( NVAL ) = VAL__BAD<T>
         ELSE
            CALL CHR_CTO<T>( BUFFER( INDEXS:INDEXE ), VALUES( NVAL ),
     :                       STATUS )
         END IF
      END DO

*  Should an error have occurred in extracting the data values, it
*  either came from finding the value or converting it from characters.
*  If it was the latter then number of values is correct, otherwise if
*  the word was not found and therefore the number of values must be
*  decremented since it is not an abnormal way to exit the loop.
      IF ( STATUS .NE. SAI__OK ) THEN
         IF ( STATUS .EQ. CHR__WRDNOTFND )  THEN
            NVAL = NVAL - 1
            CALL ERR_ANNUL( STATUS )
         ELSE
            CALL MSG_SETI( 'N', NVAL )
            CALL MSG_SETC( 'S', BUFFER( INDEXS:INDEXE ) )
            CALL ERR_REP( 'KPG1_PRSA<T>_EXTR',
     :        'KPG1_PRSA<T>: Error extracting value ^N from string ^S.',
     :        STATUS )
         END IF
      END IF

* Release the error context.
      CALL ERR_RLSE

      END
