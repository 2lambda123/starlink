      SUBROUTINE COPA<T>( DIM, ARRIN, ARROUT, STATUS )
*+
*  Name:
*     COPA<T>

*  Purpose:
*     Copy 1D array.

*  Language:
*     VAX Fortran

*  Type of Module:
*     Subroutine

*  Invocation:
*     CALL COPA<T>( DIM, ARRIN, ARROUT, STATUS )

*  Arguments:
*     DIM = INTEGER ( READ )
*           Dimension of the input and output arrays.
*     ARRIN( DIM ) = <TYPE> ( READ )
*           1-D array to be copied.
*     ARROUT( DIM ) = <TYPE> ( WRITE )
*           Output array is returned as a copy of the input array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Description:
*     The input 1-D array, ARRIN, of dimension DIM, is copied into the
*     output 1-D array, ARROUT, of the same dimension.
*     An immediate return will occur if STATUS has an error value on
*     entry.

*  Algorithm:
*     If no error on entry then
*        For all points in the input array
*           Output array point is set to value of input array point.
*        Endfor
*     Endif

*  Authors:
*     ASOC5: Dave Baines (ROE)
*     MJC: Malcolm J. Currie  (STARLINK)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     02-DEC-1983 (ASOC5):
*         Original version
*     17-FEB-1984 (ASOC5):
*         Documentation brought up to standard
*     12-SEP-1986 (MJC):
*         Renamed parameters section to arguments and tidied
*     23-NOV-1986 (MJC):
*         Made generic.
*     17-APR-2006 (TIMJ):
*         Made generic (again!)
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE            ! No default typing


*  Global Constants:
      INCLUDE 'SAE_PAR'        ! Standard ADAM definitions


*  Arguments Given:
      INTEGER
     :  DIM

      <TYPE>
     :  ARRIN( DIM )


*  Arguments Returned:
      <TYPE>
     :  ARROUT( DIM )


*  Status:
      INTEGER STATUS


*  Local Variables:
      INTEGER
     :  X                      ! Index to input/output array elements

*.


*    check for error on entry

      IF ( STATUS .EQ. SAI__OK ) THEN

*       for all points in input/output arrays

         DO  X = 1, DIM

*          output array point is set to value of input array point

            ARROUT( X ) = ARRIN( X )
         END DO
      END IF

      END
