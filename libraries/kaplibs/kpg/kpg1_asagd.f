      SUBROUTINE KPG1_ASAGD( THIS, NPOINT, NCOORD_IN, INDIM, IN,
     :                       FORWARD, NCOORD_OUT, OUTDIM, OUT, STATUS )
*+
*  Name:
*     KPG1_ASAGD

*  Purpose:
*     Transforms AGI world co-ordinates to AGI data co-ordinates.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_ASAGD( THIS, NPOINT, NCOORD_IN, INDIM, IN, FORWARD,
*                      NCOORD_OUT, OUTDIM, OUT, STATUS )

*  Arguments:
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Description:
*     This routine transforms AGI world co-ordinates to AGI data co-ordinates
*     using the TRANSFORM structure associated with the current AGI
*     picture. It is intended for use as a transformation routine by an
*     AST IntraMap.

*  Arguments:
*     THIS = INTEGER (Given)
*        An AST pointer to the IntraMap in use.
*     NPOINT = INTEGER (Given)
*        The number of points to be transformed.
*     NCOORD_IN = INTEGER (Given)
*        The number of co-ordinates being supplied for each input point
*        (i.e. the number of dimensions of the space in which the
*        input points reside). This must be 2.
*     INDIM = INTEGER (Given)
*        The number of elements along the first dimension of the IN
*        array (which contains the input co-ordinates). This value is
*        required so that the co-ordinate values can be correctly
*        located if they do not entirely fill this array. The value
*        given should not be less than NPOINT.
*     IN( INDIM, NCo-ord_IN ) = DOUBLE PRECISION (Given)
*        An array containing the co-ordinates of the input
*        (untransformed) points. These should be stored such that the
*        value of co-ordinate number COORD for input point number POINT
*        is found in element IN(POINT,COORD).
*     FORWARD = LOGICAL (Given)
*        A .TRUE. value indicates that the forward co-ordinate transformation
*        is to be applied (from WORLD to DATA co-ordinates), while a .FALSE.
*        value indicates that the inverse transformation should be used.
*     NCOORD_OUT = INTEGER (Given)
*        The number of co-ordinates being generated by the Mapping for
*        each output point (i.e. the number of dimensions of the
*        space in which the output points reside). This must be 2.
*     OUTDIM = INTEGER (Given)
*        The number of elements along the first dimension of the OUT
*        array (which will contain the output co-ordinates). This value
*        is required so that the co-ordinate values can be correctly
*        located if they will not entirely fill this array. The value
*        given should not be less than NPOINT.
*     OUT( OUTDIM, NCOORD_OUT ) = DOUBLE PRECISION (Returned)
*        An array into which the co-ordinates of the output
*        (transformed) points will be written. These will be stored
*        such that the value of co-ordinate number COORD for output
*        point number POINT will be found in element OUT(POINT,COORD).
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  Bad input co-ordinates will be set to AST__BAD, but TRANSFORM uses
*     VAL__BADD to mark bad values. We assume here that VAL__BADD and
*     AST__BAD are the same.

*  Copyright:
*     Copyright (C) 1998, 1999 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     DSB: David Berry (STARLINK)
*     {enter_new_authors_here}

*  History:
*     3-SEP-1998 (DSB):
*        Original version.
*     23-SEP-1999 (DSB):
*        Added argument THIS.
*     {enter_further_changes_here}

*-
*  Type Definitions:
      IMPLICIT NONE              ! no default typing allowed

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants

*  Arguments Given:
      INTEGER THIS
      INTEGER NPOINT
      INTEGER NCOORD_IN
      INTEGER INDIM
      DOUBLE PRECISION IN( INDIM, NCOORD_IN )
      LOGICAL FORWARD
      INTEGER NCOORD_OUT
      INTEGER OUTDIM

*  Arguments Returned:
      DOUBLE PRECISION OUT( OUTDIM, NCOORD_OUT )

*  Status:
      INTEGER STATUS

*  Local Variables:
      INTEGER IPIC

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Attempt to get the AGI identifier for the current picture.
      CALL AGI_ICURP( IPIC, STATUS )

*  If this failed, annul the error and report a more appropriate error.
      IF( STATUS .NE. SAI__OK ) THEN
         STATUS = SAI__ERROR
         CALL ERR_REP( 'KPG1_ASAGD_ERR', 'The mapping to the '//
     :                 'requested co-ordinate Frame uses information '//
     :                 'which is only available in the AGI graphics '//
     :                 'database.', STATUS )
         CALL ERR_REP( 'KPG1_ASAGD_ERR', 'This application does not '//
     :                 'have any graphics capabilities and so the '//
     :                 'requested co-ordinate Frame cannot be used.',
     :                 STATUS )
      END IF

*  Forward transformation.
      IF ( FORWARD ) THEN
         CALL AGI_TWTDD( -1, NPOINT, IN( 1, 1 ), IN( 1, 2 ),
     :                   OUT( 1, 1 ), OUT( 1, 2 ), STATUS )

*  Inverse transformation.
      ELSE
         CALL AGI_TDDTW( -1, NPOINT, IN( 1, 1 ), IN( 1, 2 ),
     :                   OUT( 1, 1 ), OUT( 1, 2 ), STATUS )
      ENDIF

      END
