      SUBROUTINE KPG1_LITR<T>( SCALE, OFFSET, STATUS )
*+
*  Name:
*     KPG1_LITRx

*  Purpose:
*     Saves a transformation for a linear plot in the AGI database.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_LITRx( SCALE, OFFSET, STATUS )

*  Description:
*     This routine defines the transformations between world and a
*     linear data co-ordinate system that has eithe, neither or both
*     axes with reversed polarity (increasing right to left or top to
*     bottom), and saves the transformation in the AGI database with
*     the current picture.

*  Arguments:
*     SCALE( 2 ) = ? (Given)
*        The scale factors of each linear axis to transform from world
*        co-ordinates to data co-ordinates.
*     OFFSET( 2 ) = ? (Given)
*        The offsets of each linear axis at pixel 0 to transform from
*        world co-ordinates to data co-ordinates.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for real and double-precision data types:
*     replace "x" in the routine name by R or D respectively.  The scale
*     and offset supplied to the routine must have the data type
*     specified.

*  Prior Requirements:
*     -  There must be a current AGI picture.

*  Copyright:
*     Copyright (C) 1991, 1992 Science & Engineering Research Council.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*     
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 59, Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1991 April 4 (MJC):
*        Original version.
*     1991 June 14 (MJC):
*        Converted to generic.
*     1992 June 23 (MJC):
*        Used tokens to circumvent DECstation compiler bug.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      <TYPE>
     :  SCALE( 2 ),
     :  OFFSET( 2 )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Constants:
      INTEGER NCD                ! Number of data co-ordinates
      PARAMETER ( NCD = 2 )
      INTEGER NCW                ! Number of world co-ordinates
      PARAMETER ( NCW = 2 )

*  Local Variables:
      CHARACTER * ( 24 + 2 * VAL__SZ<T> )
     :  DTOW( NCW ),             ! Expressions for converting data to
                                 ! world co-ordinates
     :  WTOD( NCD )              ! Expressions for converting world to
                                 ! data co-ordinates

      INTEGER
     :  NSUBS                    ! Number of token substitutions

*.

*    Check the inherited global status.

      IF ( STATUS .NE. SAI__OK ) RETURN

*    Assign the transformations for the x co-ordinates.

      WTOD( 1 ) = 'XL = X * x_scale + x_offset'
      DTOW( 1 ) = 'X = ( XL - x_offset ) / x_scale'

*    Assign the transformations for the y co-ordinates.

      WTOD( 2 ) = 'YL = Y * y_scale + y_offset'
      DTOW( 2 ) = 'Y = ( YL - y_offset ) / y_scale'

*    Substitute the actual scales for the tokens.

      CALL TRN_STOK<T>( 'x_scale', SCALE( 1 ), WTOD( 1 ), NSUBS,
     :                  STATUS ) 
      CALL TRN_STOK<T>( 'y_scale', SCALE( 2 ), WTOD( 2 ), NSUBS,
     :                  STATUS ) 
      CALL TRN_STOK<T>( 'x_scale', SCALE( 1 ), DTOW( 1 ), NSUBS,
     :                  STATUS ) 
      CALL TRN_STOK<T>( 'y_scale', SCALE( 2 ), DTOW( 2 ), NSUBS,
     :                  STATUS ) 

*    Substitute the actual offsets for the tokens.

      CALL TRN_STOK<T>( 'x_offset', OFFSET( 1 ), WTOD( 1 ), NSUBS,
     :                  STATUS ) 
      CALL TRN_STOK<T>( 'y_offset', OFFSET( 2 ), WTOD( 2 ), NSUBS,
     :                  STATUS ) 
      CALL TRN_STOK<T>( 'x_offset', OFFSET( 1 ), DTOW( 1 ), NSUBS,
     :                  STATUS ) 
      CALL TRN_STOK<T>( 'y_offset', OFFSET( 2 ), DTOW( 2 ), NSUBS,
     :                  STATUS ) 

*    Save the transformation in the database associated with the current
*    picture.

      CALL AGI_TNEW( NCD, NCW, DTOW, WTOD, -1, STATUS )

      END
