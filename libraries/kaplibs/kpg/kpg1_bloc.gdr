      SUBROUTINE KPG1_BLOC<T>( BAD, SAMBAD, VAR, NX, NY, A, IBOXX,
     :                         IBOXY, NLIM, B, BADOUT, ASUM, NSUM,
     :                         STATUS )
*+
*  Name:
*     KPG1_BLOCx

*  Purpose:
*     Smooths a two-dimensional image using a rectangular box filter.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_BLOCx( BAD, SAMBAD, VAR, NX, NY, A, IBOXX,
*                      IBOXY, NLIM, B, BADOUT, ASUM, NSUM, STATUS )

*  Description:
*     The routine smooths a two-dimensional image using a rectangular
*     box filter; each pixel is replaced by the mean of those good
*     neighbours which lie within a box of specified size.

*  Arguments:
*     BAD = LOGICAL (Given)
*        Whether it is necessary to check for bad pixels in the input
*        image.
*     SAMBAD = LOGICAL (Given)
*        If a .TRUE. value is given for this argument, then bad input
*        pixels will be propagated to the output image unchanged (a
*        smoothed output value will be calculated for all other
*        pixels). If a .FALSE. value is given, then the NLIM argument
*        determines whether an output pixel is good or bad.  The value
*        of SAMBAD is not relevant if BAD is .FALSE..
*     VAR = LOGICAL (Given)
*        If a .FALSE. value is given for this argument, then the
*        smoothing applied will be appropriate to a data image. If a
*        .TRUE. value is given, then the smoothing will be appropriate
*        to an image containing variance values. In the latter case the
*        output values will be (on average) smaller than the input
*        values to take account of the variance-reducing effect which
*        smoothing produces.
*     NX = INTEGER (Given)
*        First dimension of the image to be smoothed.
*     NY = INTEGER (Given)
*        Second dimension of the image to be smoothed.
*     A( NX, NY ) = ? (Given)
*        Input image to be smoothed.
*     IBOXX = INTEGER (Given)
*        Half-size of the smoothing box in pixels in the X direction
*        (the actual size of the box used will be 2*IBOXX+1 pixels).
*     IBOXY = INTEGER (Given)
*        Half-size of the smoothing box in pixels in the Y direction
*        (the actual size of the box used will be 2*IBOXY+1 pixels).
*     NLIM = INTEGER (Given)
*        Minimum number of good pixels which must be present in the
*        smoothing box in order to calculate a smoothed output pixel.
*        If this minimum number is not satisfied, then a bad output
*        pixel will result. A value between 1 and the total number of
*        pixels in the smoothing box should be supplied.
*     B( NX, NY ) = ? (Returned)
*        The smoothed output image.
*     BADOUT = LOGICAL (Returned)
*        Whether bad pixels are present in the output image.
*     ASUM( NX ) = ? (Returned)
*        Workspace for the pixel sums.
*     NSUM( NX ) = INTEGER (Returned)
*        Workspace for counting good pixels.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for processing single- and double-precision
*     arrays; replace "x" in the routine name by R or D as appropriate.
*     The data type of the A, B and ASUM arguments must match the
*     routine used.

*  Copyright:
*     Copyright (C) 1990 Science & Engineering Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK)
*     {enter_new_authors_here}

*  History:
*     18-SEP-1990 (RFWS):
*        Original version.
*     24-SEP-1990 (RFWS):
*        Added the VAR argument to allow smoothing of variance images.
*     20-FEB-2020 (DSB):
*        Call the 8-byte version to do the work.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Arguments Given:
      LOGICAL BAD
      LOGICAL SAMBAD
      LOGICAL VAR
      INTEGER NX
      INTEGER NY
      <TYPE> A( NX, NY )
      INTEGER IBOXX
      INTEGER IBOXY
      INTEGER NLIM

*  Arguments Returned:
      <TYPE> B( NX, NY )
      LOGICAL BADOUT
      <TYPE> ASUM( NX )
      INTEGER NSUM( NX )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER*8 NX8
      INTEGER*8 NY8

*.

*  Call the 8-byte version to do the work.
      NX8 = NX
      NY8 = NY
      CALL KPG1_BLOC8<T>( BAD, SAMBAD, VAR, NX8, NY8, A, IBOXX,
     :                    IBOXY, NLIM, B, BADOUT, ASUM, NSUM, STATUS )

      END
