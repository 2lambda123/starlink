      SUBROUTINE KPG1_FRAC<T>( EL, ARRAY, NFRAC, FRAC, BAD, CLFRAC,
     :                       VALUES, STATUS )
*+
*  Name:
*     KPG1_FRACx

*  Purpose:
*     Finds values corresponding to specified fractions of an array's
*     ordered distribution.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_FRACx( EL, ARRAY, NFRAC, FRAC, BAD, CLFRAC, VALUES,
*                      STATUS )

*  Description:
*     This routine finds the values at defined fractions of an array's
*     ordered distribution, such as percentiles.  Thus to find the
*     upper-quartile value, the fraction would be 0.75.  Since it uses
*     an histogram technique rather than sorting the whole array, for
*     efficiency, the result may not be exactly correct.  However,
*     the histogram has a large number of bins (10000), combined with
*     linear interpolation between bins in the routine reduce the error.
*     The histogram extends between the minimum and maximum data values.

*     The routine also has an iterative method, whereby outliers, which
*     compress the vast majority of data values into a few bins, are
*     excluded from the histogram.  Clipping occurs from both ends.
*     A contiguous series of bins are removed until the largest
*     or smallest fraction is encountered.  Where the rejection of bins
*     end, defines new limits, encompassing the vast majority of values.
*     A new histogram is calculated using these revised limits.  The
*     excluded outliers are still counted in the evaluation of the
*     fractions.  The criterion for iteration may need tuning in the
*     light of experience.  At present it is when there are fewer than
*     4% non-zero bins.
*
*     The iteration can still fail to find accurate fractional values if
*     smallest and largest fractions are close to 0 or 1 and correspond
*     to extreme outliers.  The routine recognises this state and
*     determines the values for each outlier fraction separately, and
*     then uses the next interior fraction as the limit.  Then the
*     routine proceeds with the clipping described above.

*  Arguments:
*     EL = INTEGER (Given)
*        The number of elements of the array to be analysed.
*     ARRAY( EL ) = ? (Given)
*        The array for which the chosen statistics are required.
*     NFRAC = INTEGER (Given)
*        Number of fractional positions.
*     FRAC( NFRAC ) = REAL (Given and Returned)
*        Fractional positions in the histogram in the range 0.0--1.0.
*        On exit they are arranged into ascending order.
*     BAD = LOGICAL (Given and Returned)
*        True when bad pixels may be present.
*     CLFRAC( NFRAC ) = REAL (Returned)
*        The clipped fractional positions in the histogram in the range
*        0.0--1.0 after iterative clipping of the histogram.
*     VALUES( NFRAC ) = DOUBLE PRECISION (Returned)
*        Values corresponding to the ordered fractional positions in
*        the histogram.
*     STATUS = INTEGER (Given & Returned)
*        Global status.

*  Notes:
*     -  There is a routine for each numerical data type: replace "x" in
*     the routine name by B, D, I, R, W, UB or UW as appropriate.  The
*     array supplied to the routine must have the data type specified.
*     -  For integer types the number of bins does not exceed the
*     data range.  The number of bins is reduced as clipping occurs.

*  Deficiencies:
*     -  The iterative algorithm is not especially efficient; for data
*     with a very wide range the iterations can be numerous.  A
*     sigma-clipping approach to remove the outliers might be better.
*     -  The adjustment of the limiting fractions is done for each
*     limit separately, thus involving a further pass through the
*     array.  At present it finds the more extreme outlier first by
*     comparing the bin number of the limits with respect to the mean
*     bin number.

*  Copyright:
*     Copyright (C) 2000, 2001, 2002 Central Laboratory of the Research
*                   Councils.
*     Copyright (C) 2005, 2006 Particle Physics & Astronomy Research
*                   Council.
*     Copyright (C) 2009 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (JAC)
*     MT: Mark Taylor (STARLINK)
*     DSB: David Berry (STARLINK)
*     BEC: Brad Cavanagh (JAC)
*     PWD: Peter W. Draper (JAC, Durham University)
*     {enter_new_authors_here}

*  History:
*     2000 May 31 (MJC):
*        Original version.
*     2000 June 11 (MJC)
*        Improved the algorithm for efficiency and scope.  Fixed bugs
*        involving clipping fractions and made returned values double
*        precision.
*     2000 October 20 (MJC):
*        Adjusted the minimum binsize to be resolvable at the data
*        type's precision.  This includes testing for floating-point
*        integers which could lead to an artifically sparse histogram.
*        Use previous cycle's histogram for the case where the histogram
*        is naturally sparse and the increased resolution made no
*        difference to the clipping limits.
*     2000 October 24 (MJC):
*        Tested for extreme fractions and assign to the limiting values.
*        Fixed comparison bug finding clipped limits.  Changed non-empty
*        bin counting threshold from 1 to 0 (test is GT, not GE).
*        Remove initial experimental code introduced for previous fix.
*        Some corrections to NUM_<func> and intrinisc-function usage.
*        thus curing a potential divide-by-zero error if maximum were
*        -1 times the minimum.
*     21-NOV-2000 (DSB):
*        Added in corrections from MT to avoid numeric overflows in the
*        case of signed integral data types with a large dynamic range.
*     28-NOV-2000 (DSB):
*        More fixes from MT related to typing of MINV and MAXV.
*     18-JUL-2001 (DSB):
*        Add a STATUS check after the call to KPG1_GHST<T>.
*     4-SEP-2001 (DSB):
*        More fixes from MT related to checking for large numbers of
*        equal-valued pixels, and correcting generic arithmetic.
*     1-NOV-2001 (DSB):
*        Removed use of VAL_<T>TOI calls on MAXV and MINV.
*     2002 July 25 (MJC)
*        Allow for integer-spaced data.
*     2002 August 12 (MJC)
*        Corrections and improvements to the previous enhancement.
*     2005 November 28 (BEC)
*        Fix bug possibly related to G95 and upcasting of BYTE to
*        INTEGER.
*     2005 December 7 (PWD):
*        Change use of MIN to NUM_MIN<T> so that MIN(BYTE,BYTE) works.
*     2006 February 24 (MJC):
*        Added new CUMUL argument set to .FALSE. to KPG1_GHSTx call.
*     2009 June 24 (MJC):
*        Revised the sparseness checking iteration, and added a check
*        that the number of bins is not too few otherwise the routine
*        reports that it cannot handle such data.
*     2009 June 28 (MJC):
*        Constrain the integer-valued or integer spaced tests further
*        to exclude absolute values below 2.
*     2009 November 11 (MJC):
*        Switch a constraint used to determine whether or not values are
*        integer stored in a floating-point data type.
*     2009 November 19 (MJC):
*        Set flag in outlier-clipping loop so that a new histogram is
*        generated between the narrowed limits.  Increase the minimum
*        allowed sparseness from 4 to 16% and add commentary about it.
*        Fix non-physical looping criterion.
*     2012 February 23 (MJC):
*        Use new error code KPG__SPARS.
*     20-FEB-2020 (DSB):
*        Use 8-byte version to do the work.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE

*  Arguments Given:
      INTEGER EL
      <TYPE> ARRAY( EL )
      INTEGER NFRAC

*  Arguments Given and Returned:
      REAL FRAC( NFRAC )
      LOGICAL BAD

*  Arguments Returned:
      REAL CLFRAC( NFRAC )
      DOUBLE PRECISION VALUES( NFRAC )

*  Status:
      INTEGER STATUS

*  Local Variables:
      INTEGER*8 EL8

*  Call the 8-byte version to do the work.
      EL8 = EL
      CALL KPG1_FRAC8<T>( EL8, ARRAY, NFRAC, FRAC, BAD, CLFRAC, VALUES,
     :                    STATUS )

      END
