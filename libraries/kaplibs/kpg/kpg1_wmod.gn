      SUBROUTINE KPG1_WMOD<T>( X, W, NX, PBAD, NITER, TOLL, XMODE,
     :                         SIGMA, STATUS )
*+
*  Name:
*     KPG1_WMODx

*  Purpose:
*     To estimate the mean of a number of normally distributed data
*     values, some of which may be corrupt.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_WMODx( X, W, NX, PBAD, NITER, TOLL, XMODE, SIGMA,
*    :                  STATUS )

*  Description:
*     The routine is based on maximising the likelihood function for a
*     statistical model in which any of the data points has a constant
*     probability of being corrupt.  The data points have weights, to
*     allow for different intrinisic errors.  A weighted mean is chosen
*     according to the deviation of each data point from the current
*     estimate of the mean.  The weights are derived from the relative
*     probabilities of being valid or corrupt.  A sequence of these
*     iterations converges to a stationary point in the likelihood
*     function.  The routine approximates to a k-sigma clipping
*     algorithm for a large number of data points and to a
*     mode-estimating algorithm for fewer data points.

*  Arguments:
*     X( NX ) = ? (Given)
*        An array of data values.
*     W( NX ) = REAL (Given)
*        An array of data weights for each data value.  The weights are
*        inversely proportional to the square of the relative errors on
*        each data point.
*     NX = INTEGER (Given)
*        The number of data values.
*     PBAD = REAL (Given)
*        An estimate of the probability that any one data point will be
*        corrupt.  (This value is not critical.)
*     NITER = INTEGER (Given)
*        The maximum number of iterations required.
*     TOLL = REAL (Given)
*        The absolute accuracy required in the estimate of the
*        mean.  Iterations cease when two successive estimates
*        differ by less than this amount.
*     XMODE = REAL (Returned)
*        The estimate of the uncorrupted mean.
*     SIGMA = REAL (Returned)
*        An estimate of the uncorrupted normalised standard deviation of
*        the data points.  An estimate of the standard deviation of any
*        one point is:  SIGMA / SQRT( W ) where W is its weight.
*     STATUS = INTEGER (Returned)
*        The global status.

*  Notes:
*     There is a routine for each numeric data type: replace "x" in the
*     routine name by D, R, I, W, UW, B, UB as appropriate.  The array
*     supplied to the routine must have the data type specified.

*  Copyright:
*     Copyright (C) 1981, 1990 Science & Engineering Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     RFWS: R.F. Warren-Smith (Durham Univ.)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1981 (RFWS):
*        Original version.
*     1990 September 25 (MJC):
*        Made generic, renamed from WMODE, added STATUS, commented
*        the variables and converted the prologue.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! Bad-pixel constants

*  Arguments Given:
      INTEGER
     :  NX,
     :  NITER

      <TYPE>
     :  X( NX )

      REAL
     :  PBAD,
     :  TOLL,
     :  W( NX )

*  Arguments Returned:
      REAL
     :  SIGMA,
     :  XMODE

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      REAL
     :  DEV,                     ! Deviation from the current mean
     :  DEV2,                    ! Deviation from the current mean
                                 ! squared, weighted
     :  DEVLIM,                  ! Maximum deviation to be included
     :  DX2,                     ! Deviation squared
     :  DXMODE,                  ! Increment to the mean
     :  EX,                      ! Probability of a point being good
     :  PROB,                    ! Fractional probability of a point
                                 ! being good data
     :  PBNORM,                  ! Normalised probability
     :  SUMA,                    ! Sum zero-order  moment
     :  SUMB,                    ! Sum weighted zero-order moment
     :  SUMC,                    ! Sum first-order moment
     :  SUMD,                    ! Sum second-order moment
     :  W2,                      ! Work variable
     :  VAR                      ! Variance

      INTEGER
     :  I,                       ! Loop counter
     :  ITER,                    ! Number of iterations
     :  N                        ! Pixel counter

      DOUBLE PRECISION
     :  D,                       ! Data value
     :  DATA,                    ! Work variable
     :  SUM1,                    ! Sum zero-order  moment (first pass) 
     :  SUM2,                    ! Sum first-order moment (first pass)
     :  SUM3                     ! Sum second-order moment (first pass)

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*.

*    Check inherited global status.

      IF ( STATUS .NE. SAI__OK ) RETURN

*    Form the initial estimate of the mean and sigma.

      SUM1 = 0.0D0
      SUM2 = 0.0D0
      SUM3 = 0.0D0
      N = 0

      DO I = 1, NX

*       Ignore bad pixels.

         IF ( X( I ) .NE. VAL__BAD<T> ) THEN

*          Form sums in double precision to reduce rounding errors
*          giving large relative uncertainities in the statistics.

            N = N + 1
            DATA = DBLE( W( I ) )
            SUM1 = SUM1 + DATA
            D = NUM_<T>TOD( X( I ) )
            DATA = DATA * D
            SUM2 = SUM2 + DATA
            SUM3 = SUM3 + D * DATA
         END IF
      END DO

*    Check that there were sufficient data before forming the first
*    estimate of the statistics.

      IF ( N .GT. 1 ) THEN
         XMODE = REAL( SUM2 / SUM1 )
         VAR = REAL( ( SUM3 - ( SUM2 * SUM2 ) / SUM1 ) / REAL( N - 1 ) )
         VAR = MAX( VAR, 0.0 )
      ELSE
         STATUS = SAI__ERROR
         CALL ERR_REP( 'KPG1_WMODX_INSDA',
     :     'Insufficient data points to compute a variance.', STATUS )
         VAR = 0.0
         XMODE = REAL( SUM2 )
         GOTO 100
      END IF

*    Now start the iteration loop.

      PBNORM = PBAD * 0.707107

      DO ITER = 1, NITER
         VAR = MAX( VAR, 1.0E-20 )
         W2 = 0.5 / VAR

*    Initialise sums for forming new estimate.

         SUMA = 0.0
         SUMB = 0.0
         SUMC = 0.0
         SUMD = 0.0
         DEVLIM = 100.0 * VAR

*       Scan through the data points, forming weighted sums to calculate
*       new mean and variance.

         DO I = 1, NX
            IF ( X( I ) .NE. VAL__BAD<T> ) THEN
               DEV = NUM_<T>TOR( X( I ) ) - XMODE
               DX2 = DEV * DEV
               DEV2 = DX2 * W( I )

*             Ignore points more than 10 sigma from the mode.

               IF ( DEV2 .LE. DEVLIM ) THEN

*                The weights depend on the fractional probability of
*                being good data.

                  EX = EXP( - W2 * DEV2 )
                  PROB = EX / ( PBNORM + EX )
                  SUMA = SUMA + PROB
                  SUMB = SUMB + PROB * W( I )
                  SUMC = SUMC + DEV * PROB * W( I )
                  SUMD = SUMD + DEV2 * PROB
               END IF
            END IF

         END DO

*       Form the new estimates for the uncorrupted mean and standard
*       deviation.

         SUMA = MAX( SUMA, 1.0E-20 )
         SUMB = MAX( SUMB, 1.0E-20 )
         DXMODE = SUMC / SUMB
         XMODE = XMODE + DXMODE
         VAR = SUMD / SUMA

*       If the required accuracy has been met, return

         IF ( ABS( DXMODE ) .LE. TOLL ) GO TO 100
      END DO

  100 CONTINUE
      SIGMA = SQRT( VAR )

      END
