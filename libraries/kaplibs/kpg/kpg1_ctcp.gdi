      SUBROUTINE KPG1_CTCP<T>( CI, NAX, GI, NEL, OUT, STATUS )
*+
*  Name:
*     KPG1_CTCPx

*  Purpose:
*     Copies values from catalogue columns to an array.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_CTCPx( CI, NAX, GI, NEL, OUT, STATUS )

*  Description:
*     This routine gets NEL values for a set of given CAT (see SUN/181) 
*     columns, derived from rows 1 to NEL of a given catalogue, 
*     selection, or index, and stores them in array OUT.

*  Arguments:
*     CI = INTEGER (Given)
*        The CAT identifier for the catalogue, selection or index
*        containing the required data.
*     NAX= INTEGER (Given)
*        The number of columns from which values are to be read.
*     GI( NAX ) = INTEGER (Given)
*        The CAT identifiers for the column, expressions or parameters
*        to be evaluated for rows 1 to NEL of the component identified 
*        by CI. If any elements of this array are CAT__NOID, then the 
*        corresponding elements of OUT are filled with the row number.
*     NEL = INTEGER (Given)
*        The number of rows to copy.
*     OUT( NEL, NAX ) = ? (Returned)
*        The returned values.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each of the data types integer, and
*     double precision: replace "x" in the routine name by I, or D as
*     appropriate.  The output array from this routine should have the
*     specified data type.

*  Copyright:
*     Copyright (C) 1998 Central Laboratory of the Research Councils.
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     DSB: David S. Berry (STARLINK)
*     MJC: Malcolm J. Currie (STARLINK)
*     PWD: Peter W. Draper (JAC, Durham University)
*     {enter_new_authors_here}

*  History:
*     26-OCT-1998 (DSB):
*        Original version.
*     2006 May 17 (MJC):
*        Made generic version.
*     19-FEB-2007 (PWD):
*        Assign OUT to generic value VAL__BAD<T>, not VAL__BADD.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! VAL__ constants 
      INCLUDE 'CAT_PAR'          ! CAT constants 

*  Arguments Given:
      INTEGER CI
      INTEGER NAX
      INTEGER GI( NAX )
      INTEGER NEL

*  Arguments Returned:
      <TYPE> OUT( NEL, NAX )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER I                  ! Row index
      INTEGER J                  ! Column index
      LOGICAL NULL               ! Was no value available?

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*.

*  Check the inherited status. 
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Loop round each row.
      DO I = 1, NEL

*  Read the current row from the catalogue, selection or index into the
*  current row buffer.
         CALL CAT_RGET( CI, I, STATUS )

*  Loop round each column.
         DO J = 1, NAX

*  If this column ID is valid, get the column value.
            IF ( GI( J ) .NE. CAT__NOID ) THEN 
               CALL CAT_EGT0<T>( GI( J ), OUT( I, J ), NULL, STATUS )
               IF ( STATUS .NE. SAI__OK ) GO TO 999

*  Store a Starlink bad value if the value is null.
               IF ( NULL ) OUT( I, J ) = VAL__BAD<T>

*  If this column ID is null, store the row number. 
            ELSE
               OUT( I, J ) = NUM_ITO<T>( I )
            END IF

         END DO

      END DO

 999  CONTINUE

      END
