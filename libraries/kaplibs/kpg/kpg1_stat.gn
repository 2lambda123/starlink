      SUBROUTINE KPG1_STAT<T>( BAD, EL, DATA, NCLIP, CLIP, NGOOD,
     :                         IMIN, DMIN, IMAX, DMAX, SUM, MEAN,
     :                         STDEV, NGOODC, IMINC, DMINC, IMAXC,
     :                         DMAXC, SUMC, MEANC, STDEVC, STATUS )
*+
*  Name:
*     KPG1_STATx

*  Purpose:
*     Computes simple statistics for an array.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_STATx( BAD, EL, DATA, NCLIP, CLIP, NGOOD, IMIN, DMIN,
*                      IMAX, DMAX, SUM, MEAN, STDEV, NGOODC, IMINC,
*                      DMINC, IMAXC, DMAXC, SUMC, MEANC, STDEVC,
*                      STATUS )

*  Description:
*     This routine computes simple statistics for an array, namely: the
*     number of valid pixels, the minimum and maximum pixel values (and
*     their positions), the pixel sum, the mean, and the standard
*     deviation. Iterative K-sigma clipping may also be optionally
*     applied.

*  Arguments:
*     BAD = LOGICAL (Given)
*        Whether checks for bad pixels should be performed on the array
*        being analysed.
*     EL = INTEGER (Given)
*        Number of pixels in the array.
*     DATA( EL ) = ? (Given)
*        Array to be analysed.
*     NCLIP = INTEGER (Given)
*        Number of K-sigma clipping iterations to apply (may be zero).
*     CLIP( NCLIP ) = REAL (Given)
*        Array of clipping limits for successive iterations, expressed
*        as standard deviations.
*     NGOOD = INTEGER (Returned)
*        Number of valid pixels in the array before clipping.
*     IMIN = INTEGER (Returned)
*        Index where the pixel with the lowest value was (first) found
*        before clipping.
*     DMIN = DOUBLE PRECISION (Returned)
*        Minimum pixel value in the array before clipping.
*     IMAX = INTEGER (Returned)
*        Index where the pixel with the highest value was (first) found
*        before clipping.
*     DMAX = DOUBLE PRECISION (Returned)
*        Maximum pixel value in the array before clipping.
*     SUM = DOUBLE PRECISION (Returned)
*        Sum of the valid pixels before clipping.
*     MEAN = DOUBLE PRECISION (Returned)
*        Mean of the valid pixels before clipping.
*     STDEV = DOUBLE PRECISION (Returned)
*        Standard deviation of the valid pixels before clipping.
*     NGOODC = INTEGER (Returned)
*        Number of valid pixels in the array after clipping.
*     IMINC = INTEGER (Returned)
*        Index where the pixel with the lowest value was (first) found
*        after clipping.
*     DMINC = DOUBLE PRECISION (Returned)
*        Minimum pixel value in the array after clipping.
*     IMAXC = INTEGER (Returned)
*        Index where the pixel with the highest value was (first) found
*        after clipping.
*     DMAXC = DOUBLE PRECISION (Returned)
*        Maximum pixel value in the array after clipping.
*     SUMC = DOUBLE PRECISION (Returned)
*        Sum of the valid pixels after clipping.
*     MEANC = DOUBLE PRECISION (Returned)
*        Mean of the valid pixels after clipping.
*     STDEVC = DOUBLE PRECISION (Returned)
*        Standard deviation of the valid pixels after clipping.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each of the standard numeric types.
*     Replace "x" in the routine name by D, R, I, W, UW, B or UB as
*     appropriate. The data type of the array being analysed must match
*     the particular routine used.
*     -  If no clipping is performed (i.e. if NCLIP = 0) then the values
*     of arguments which return results after clipping will be the same
*     as for those returning results before clipping.
*     -  If NGOOD or NGOODC is zero, then the values of all the derived
*     statistics will be undefined and will be set to the "bad" value
*     appropriate to their data type (except for the pixel sum, which
*     will be zero).

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council.
*     Copyright (C) 2001 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK, RAL)
*     MJC: Malcolm J. Currie (STARLINK)
*     DSB: David Berry (STARLINK)
*     {enter_new_authors_here}

*  History:
*     18-MAR-1991 (RFWS):
*        Complete re-write of earlier routine to implement generic
*        processing and optional bad-pixel handling.
*     1991 August 8 (MJC):
*        Fixed bugs in computing the minimum and maximum values.
*     5-DEC-2001 (DSB):
*        Reconstructed generic source.
*     20-FEB-2020 (DSB):
*        Call 8 byte version to do the work.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT primitive data constants

*  Arguments Given:
      LOGICAL BAD
      INTEGER EL
      <TYPE> DATA( EL )
      INTEGER NCLIP
      REAL CLIP( * )

*  Arguments Returned:
      INTEGER NGOOD
      INTEGER IMIN
      DOUBLE PRECISION DMIN
      INTEGER IMAX
      DOUBLE PRECISION DMAX
      DOUBLE PRECISION SUM
      DOUBLE PRECISION MEAN
      DOUBLE PRECISION STDEV
      INTEGER NGOODC
      INTEGER IMINC
      DOUBLE PRECISION DMINC
      INTEGER IMAXC
      DOUBLE PRECISION DMAXC
      DOUBLE PRECISION SUMC
      DOUBLE PRECISION MEANC
      DOUBLE PRECISION STDEVC

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER*8 EL8
      INTEGER*8 NGOOD8
      INTEGER*8 IMAX8
      INTEGER*8 IMIN8
      INTEGER*8 NGOODC8
      INTEGER*8 IMAXC8
      INTEGER*8 IMINC8

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Call 8-byte version to do the work.
      EL8 = EL
      CALL KPG1_STAT8<T>( BAD, EL8, DATA, NCLIP, CLIP, NGOOD8,
     :                    IMIN8, DMIN, IMAX8, DMAX, SUM, MEAN,
     :                    STDEV, NGOODC8, IMINC8, DMINC, IMAXC8,
     :                    DMAXC, SUMC, MEANC, STDEVC, STATUS )

*  Convert returned INTEGER values, checking for VAL__BADK.
      IF( NGOOD8 .EQ. VAL__BADK ) THEN
         NGOOD = VAL__BADI
      ELSE
         NGOOD = NGOOD8
      END IF

      IF( IMIN8 .EQ. VAL__BADK ) THEN
         IMIN = VAL__BADI
      ELSE
         IMIN = IMIN8
      END IF

      IF( IMAX8 .EQ. VAL__BADK ) THEN
         IMAX = VAL__BADI
      ELSE
         IMAX = IMAX8
      END IF

      IF( NGOODC8 .EQ. VAL__BADK ) THEN
         NGOODC = VAL__BADI
      ELSE
         NGOODC = NGOODC8
      END IF

      IF( IMINC8 .EQ. VAL__BADK ) THEN
         IMINC = VAL__BADI
      ELSE
         IMINC = IMINC8
      END IF

      IF( IMAXC8 .EQ. VAL__BADK ) THEN
         IMAXC = VAL__BADI
      ELSE
         IMAXC = IMAXC8
      END IF

      END
