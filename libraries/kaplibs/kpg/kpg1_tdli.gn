      SUBROUTINE KPG1_TDLI<T>( NDIMI, IDIMS, INARR, VAR, INVAR, TRID,
     :                         FLUX, AXES, OEL, NDIMO, OLBND, ODIMS,
     :                         OUTARR, OUTVAR, COIN, COOUT, INDICE,
     :                         STATUS )
*+
*  Name:
*     KPG1_TDLIx
 
*  Purpose:
*     Applies a constant-determinant transformation to an array by
*     linear interpolation.
 
*  Language:
*     Starlink Fortran 77
 
*  Invocation:
*     CALL KPG1_TDLIx( NDIMI, IDIMS, INARR, VAR, INVAR, TRID, FLUX,
*                      AXES, OEL, NDIMO, OLBND, ODIMS, OUTARR, OUTVAR,
*                      COIN, COOUT, INDICE, STATUS )
 
*  Description:
*     This routine creates a new n-dimensional array from an input
*     m-dimensional array by applying a constant-determininant
*     transformation to all the elements of the output array.  Each
*     output value is calculated by linear interpolation between the
*     elements in the input array that surround each transformed
*     co-ordinate.  The transformation must convert from output
*     co-ordinates to input pixel indices.  The two arrays may have
*     different numbers of dimensions. In addition a variance array may
*     be created likewise.
 
*     This operates with double-precision co-ordinates.  Use KPG1_TRLIx
*     for single precision.
 
*  Arguments:
*     NDIMI = INTEGER (Given)
*        The dimensionality of the input arrays.  It must be greater
*        than one.  To handle a one-dimensional array, give it a second
*        dummy dimension of 1.
*     IDIMS( NDIMI ) = INTEGER (Given)
*        The dimensions of the input n-D arrays.
*     INARR( * ) = ? (Given)
*        The input n-D data array.
*     VAR = LOGICAL (Given)
*        If VAR is .TRUE. there is a variance array to create from an
*        input variance array.
*     INVAR( * ) = ? (Given)
*        The input n-D variance array.  When VAR is .FALSE., this can
*        contain an arbitrary number of elements.  When VAR is .TRUE.
*        it must have the shape of the input data array.
*     FLUX = DOUBLE PRECISION (Given)
*        The factor to multiply the values in the output arrays to
*        preserve the flux.  This will be the determinant of the
*        transformation.  Set this to 1.0 if no flux conservation is
*        required.
*     AXES( * ) = DOUBLE PRECISION (Given)
*        The concatenated axis co-ordinates of the input array.  This
*        array should therefore have a dimension at least as large as
*        the sum of the input array's dimensions.
*     OEL = INTEGER (Given)
*        The first dimension of the work arrays.  It should be at least
*        ODIMS( 1 ).
*     NDIMO = INTEGER (Given)
*        The dimensionality of the output arrays.
*     OLBND( NDIMO ) = INTEGER (Given)
*        The lower bounds of the output n-D arrays.
*     ODIMS( NDIMO ) = INTEGER (Given)
*        The dimensions of the output n-D arrays.
*     OUTARR( * ) = ? (Returned)
*        The transformed data array.
*     OUTVAR( * ) = ? (Returned)
*        The variance array of the transformed data.
*     COIN( OEL, NDIMI ) = DOUBLE PRECISION (Returned)
*        Workspace used to store the co-ordinates of a row of points
*        in the input arrays.
*     COOUT( OEL, NDIMO ) = DOUBLE PRECISION (Returned)
*        Workspace used to store the co-ordinates of a row of points in
*        the output arrays.
*     INDICE( OEL, NDIMI ) = DOUBLE PRECISION (Returned)
*        Workspace used to store the floating-point pixel indices of a
*        row of points in the input arrays.
*     STATUS  =  INTEGER (Given and Returned).
*        Global status value
 
*  Notes:
*     -  There is a routine for the following numeric data types:
*     replace "x" in the routine name by B, D, I, R, UB, UW, or W as
*     appropriate.  The input and output data and variance arrays must
*     have the data type specified.
*     -  There is no protection against overflows when the absolute data
*     values are very large.
 
*  Algorithm:
*     The n-dimensional boxes in the input array that surround the
*     transformed output point are derived from a recursive treatment of
*     the problem of traversing an arbitrary number of array dimensions
*     whilst processing data from a sub-region in each dimension.  It
*     may be written schematically as follows...
*
*        procedure LOOP( I )
*           for IDIM( I ) from 1 to DIMS( I ) do
*              if ( I = 1 ) then
*                 <store the elements in a temporary vector>
*                 return
*              else
*                 LOOP( I - 1 )
*              end
*           end
*        end
 
*     where DIMS( I ) is dimension of the region used to interpolate
*     linearly, and IDIM is the index along the dimension.  A
*     call of LOOP( NDIM ) then extracts the whole box.
*
*     Since Fortran does not allow recursive subroutine calls, they are
*     simulated here by branching back to the start of the algorithm,
*     having saved the previous dimension index in an appropriate
*     element of an array.  A similar process (in reverse) is used to
*     simulate a return from the recursively invoked algorithm.  To
*     avoid branching back into the range of a DO loop, looping has to
*     be implemented using IF and GO TO statements.
*
*     This approach is a little heavy handed for this application, but
*     is easily extensible to permit larger regions and functions to
*     be fitted to the neighbourhood around the transformed point.
*
*     The algorithm operates as follows:-
*     -  Validate the dimensionality and compare the number of
*     transformation values with the number of dimensions.
*     -  Initialise the output co-ordinates for the first row.
*     -  Compute the strides of each dimension and initialise a pointer
*     to the region within the input array. Find the total number of
*     elements in the output array.
*     -  Loop until all the output elements have been evaluated.
*        o  Increment the co-ordinate of the output value for each new
*        row.  Reset the co-ordinates for all lower dimensions except
*        the first.
*        o  Convert the output to input-array co-ordinates for the row
*        and then to fractional element indices in the input array.
*        Immediately set the output element to the bad value when it's
*        transformed centre lies outside the input array, and go to the
*        next output-array element.  Find the weights for the linear
*        interpolation.
*        o  Invoke the recursive algorithm.
*        o  Set the pointer to the start array regions to be skipped (in
*        front of the sub-region) in the current dimension.
*        o  If the current dimension is 1 copy the data (and variance)
*        element to a work vector, otherwise invoke the algorithm again
*        to handle the next lower dimension.
*        o  Adjust pointer to allow for data beyond the upper bound of
*        the region (after the sub-region) in the current dimension.
*        o  Return from the recursive algorithm.
*        o  Perform linear interpolation using the values in the work
*        vector, excluding bad values.  Set the output value to bad when
*        the total weight was below the input threshold. Do likewise for
*        a variance element.
 
*  Copyright:
*     Copyright (C) 1993 Science & Engineering Research Council.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*     
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie  (STARLINK)
*     MBT: Mark Taylor (STARLINK)
*     {enter_new_authors_here}
 
*  History:
*     1993 February 28 (MJC):
*        Original version.
*     1993 June 23 (MJC):
*        Added protection against out-of-bounds indexing, and assigned
*        ETSR to powers of two.
*     2002 September 5 (MBT):
*        Fixed bug; flux value was being ignored.
*     {enter_further_changes_here}
 
*  Bugs:
*     {note_bugs_here}
 
*-
 
*  Type Definitions:
      IMPLICIT  NONE           ! no implicit typing allowed
 
*  Global Constants:
      INCLUDE  'SAE_PAR'       ! SSE global definitions
      INCLUDE  'PRM_PAR'       ! Magic-value and extreme constants
      INCLUDE  'NDF_PAR'       ! NDF constants
 
*  Arguments Given:
      INTEGER NDIMI
      INTEGER IDIMS( NDIMI )
      INTEGER TRID
      INTEGER OEL
      INTEGER NDIMO
      INTEGER OLBND( NDIMO )
      INTEGER ODIMS( NDIMO )
 
      LOGICAL VAR
      <TYPE> INARR( * )
      <TYPE> INVAR( * )
 
      DOUBLE PRECISION AXES( * )
      DOUBLE PRECISION FLUX
 
*  Arguments Returned:
      <TYPE> OUTARR( * )
      <TYPE> OUTVAR( * )
 
      DOUBLE PRECISION COIN( OEL, NDIMI )
      DOUBLE PRECISION COOUT( OEL, NDIMO )
      DOUBLE PRECISION INDICE( OEL, NDIMI )
 
*  Status:
      INTEGER  STATUS          ! Global status
 
*  Local Variables:
      DOUBLE PRECISION ASUM    ! Sum of the weighted element values
                               ! around the transformed point
      INTEGER AXJUMP( NDF__MXDIM ) ! Dimension strides for concatenated
                               ! axes
      INTEGER EL               ! Number of elements in the output array
      LOGICAL END              ! True if a new box has been found
                               ! or there are no more boxes to sum
      INTEGER ESTR( NDF__MXDIM ) ! Dimension strides for extracted
                               ! section
      DOUBLE PRECISION F       ! Work variable for fraction
      DOUBLE PRECISION FRAC( NDF__MXDIM, 2 ) ! Interpolation fractions
      INTEGER FINISH( NDF__MXDIM ) ! Indices of far edge of current
                               ! search box
      INTEGER I                ! Loop counter
      INTEGER IAXIS            ! Loop counter for the axes
      INTEGER IEL              ! Number of elements in the input array
      INTEGER J                ! Loop counter
      INTEGER K                ! Output-array index
      INTEGER M                ! Counter for vector of elements
                               ! about the transformed point
      INTEGER ID               ! Pointer to the start of a line
                               ! segment within the search region
      INTEGER IDIM( NDF__MXDIM ) ! Indices of an array element
      INTEGER NCIN             ! Number of values in the inverse
                               ! transformation
      INTEGER NCOUT            ! Number of values in the forward
                               ! transformation
      <TYPE> NEIGH( 2 ** NDF__MXDIM ) ! Vector of input data values
                               ! about a transformed point
      INTEGER OFFSET           ! Offset within the first dimension
                               ! of the output array
      DOUBLE PRECISION ORIGIN( NDF__MXDIM ) ! Origins of each axis
      INTEGER START( NDF__MXDIM ) ! Indices of edge of current search
                               ! box
      INTEGER STRIDI( NDF__MXDIM ) ! Dimension strides for input arrays
                               ! and search region
      INTEGER STRIDO( NDF__MXDIM ) ! Dimension strides for output arrays
                               ! and co-ordinates
      <TYPE> VNEIGH( 2 ** NDF__MXDIM ) ! Vector of input variance
                               ! values about a transformed point
      LOGICAL VALDET           ! Current output data value determined
                               ! when true
      LOGICAL VARDET           ! Current output variance value
                               ! determined when true
      INTEGER VO               ! Offset in the input array
      DOUBLE PRECISION W       ! Product of the weights for an element
      DOUBLE PRECISION WSUM    ! Sum of the weights used in the
                               ! linear interpolation
 
*  Internal References:
      INCLUDE 'NUM_DEC_CVT'    ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'    ! NUM definitions for conversions
 
*.
 
*  Check the inherited status on entry.
      IF ( STATUS .NE. SAI__OK ) RETURN
 
*  Check the dimensionality.
      IF ( NDIMI .LT. 2 .OR. NDIMI .GT. NDF__MXDIM ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SETI( 'NDIM', NDIMI )
         CALL ERR_REP( 'KPG1_TRLIx_INVDIM',
     :     'Unable to interpolate an array with '/
     :     /'dimensionality of ^NDIM. (Programming error.)', STATUS )
         GOTO 999
      END IF
 
*  Obtain the number of co-ordinates in the transformations.  The NCIN
*  and NCOUT seem to be reversed, but the supplied transformation is the
*  inverse, and "in" and "out" refer to the input and output arrays
*  respectively.
      CALL TRN_GTNVC( TRID, NCOUT, NCIN, STATUS )
 
*  Validate that the transformation is applicable to the supplied
*  arrays.  Note that we must distinguish here the case where the
*  input array is really one dimensional, hence a simple comparison
*  is inadequate.
      IF ( ( NCOUT .NE. NDIMO ) .OR. ( ( NCIN .NE. NDIMI ) .AND.
     :     ( NDIMI .NE. 2 .OR.
     :     ( NDIMI .EQ. 2 .AND. IDIMS( 2 ) .NE. 1 ) ) ) ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SETI( 'NCIN', NCIN )
         CALL MSG_SETI( 'NCOUT', NCOUT )
         CALL MSG_SETI( 'IN', NDIMI )
         CALL MSG_SETI( 'OUT', NDIMO )
         CALL ERR_REP( 'KPG1_TRLIx_MISMATCH',
     :    'There is a mismatch between the number of values '/
     :    /'(^NCIN -> NCOUT) in the supplied transformation and the '/
     :    /'number of dimensions of the arrays (^IN -> ^OUT).', STATUS )
         GOTO 999
      END IF
 
*  The co-ordinates of the first dimension are fixed throughout this
*  routine, as the transformation is applied row by row.
      ORIGIN( 1 ) = DBLE( OLBND( 1 ) )
      DO I = 1, ODIMS( 1 )
         COOUT( I, 1 ) = ORIGIN( 1 ) + DBLE( I - 1 ) - 0.5D0
      END DO
      AXJUMP( 1 ) = 1
 
*  Initialise the input co-ordinates for any higher dimensions.
      IF ( NDIMO .GT. 1 ) THEN
         DO IAXIS = 2, NDIMO
            ORIGIN( IAXIS ) = DBLE( OLBND( IAXIS ) )
            AXJUMP( IAXIS ) = AXJUMP( IAXIS - 1 ) + IDIMS( IAXIS - 1 )
            DO I = 1, ODIMS( 1 )
               COOUT( I, IAXIS ) = ORIGIN( IAXIS ) - 0.5D0
            END DO
         END DO
      END IF
 
*  Compute the strides.
*  ====================
 
*  Initialise the stride of dimension number 1 for the input arrays.
*  (The stride for a dimension is the amount by which the vectorised
*  array index increases when the n-dimensional array index for that
*  dimension increases by 1.)
      STRIDI( 1 ) = 1
 
*  Calculate the stride for each remaining dimension. Also calculate
*  the strides in the concatenated axes array.
      DO I = 2, NDIMI
         STRIDI( I ) = STRIDI( I - 1 ) * IDIMS( I - 1 )
      END DO
 
*  Do likewise for the output array.
      STRIDO( 1 ) = 1
      IF ( NDIMO .GT. 1 ) THEN
         DO I = 2, NDIMO
            STRIDO( I ) = STRIDO( I - 1 ) * ODIMS( I - 1 )
         END DO
      END IF
 
*  Do likewise for the strides within the extracted region of the input
*  array.
      ESTR( 1 ) = 1
 
*  Calculate the stride for each remaining dimension.
      DO I = 2, NDIMI
         ESTR( I ) = ESTR( I - 1 ) * 2
      END DO
 
*  Find the number elements in the output file.
      EL = 1
      DO  I = 1, NDIMO
         EL = EL * ODIMS( I )
      END DO
 
*  Find the number elements in the input file.
      IEL = 1
      DO  I = 1, NDIMI
         IEL = IEL * IDIMS( I )
      END DO
 
*  Loop for every output element.
*  ==============================
 
*  K will count the index within the vector arrangement of the array.
      K = 1
      DO WHILE ( K .LE. EL )
 
*  Initialise the counter of the elements in the input array around
*  the transformed position of the output-array element.
         M = 0
 
*  For efficiency reasons we compute the transformation for all the
*  co-ordinates in a row with a single subroutine call.  So test
*  whether the current output element is at the start of a new row.
*  The co-ordinates have been set for the first element.
         IF ( MOD( K, ODIMS( 1 ) ) .EQ. 1 ) THEN
            IF ( K .GT. 1 ) THEN
 
*  There is no need to test whether there are higher dimensions since
*  ODIMS( 2 ) will always be defined...
               END = .FALSE.
               J = 2
 
*  Update the output co-ordinates.
*  ===============================
 
*  Find which co-ordinates have to change.  Normally this will just be
*  the next higher dimension.
               DO WHILE ( .NOT. END )
                  OFFSET = MOD( K, STRIDO( J ) )
                  IF ( OFFSET .NE. 0 ) THEN
                     DO I = 1, ODIMS( 1 )
                        COOUT( I, J ) = COOUT( I, J ) + 1.0D0
                     END DO
 
*  The input co-ordinates have been updated and are ready for
*  conversion.
                     END = .TRUE.
                  ELSE
 
*  Just completed a stride in the Jth dimension, so we must reset it
*  to it's minimum value for the next stride.
                     DO I = 1, ODIMS( 1 )
                        COOUT( I, J ) = ORIGIN( J ) - 0.5D0
                     END DO
 
*  Now go to the next higher dimension to see if that has completed a
*  stride, or just needs to have its co-ordinate incremented.  There
*  must be a higher dimension since there are output elements to be
*  computed.
                     J = J + 1
                  END IF
               END DO
            END IF
 
*   Perform the transformation to pixel indices.
*   ============================================
 
*   Convert the co-ordinates for those of the output array, to those
*   of the input array.
            CALL TRN_TRND( .TRUE., OEL, NCOUT, ODIMS( 1 ), COOUT,
     :                     TRID, OEL, NCIN, COIN, STATUS )
 
*   In turn convert those co-ordinates to fractional element indices.
*   Note that when elements are found beyond the axis range, the called
*   subroutine sets a bad status and a bad value for the element index.
*   The error can be handled transparently so set up a temporary error
*   context.
            IF ( STATUS .EQ. SAI__OK ) THEN
               DO IAXIS = 1, NDIMI
                  CALL ERR_MARK
                  CALL KPG1_AINBD( 1, IDIMS( IAXIS ),
     :                             AXES( AXJUMP( IAXIS ) ), ODIMS( 1 ),
     :                             COIN( 1, IAXIS ), INDICE( 1, IAXIS ),
     :                             STATUS )
                  CALL ERR_ANNUL( STATUS )
                  CALL ERR_RLSE
               END DO
            END IF
         END IF
 
*   Might as well exit if something has gone wrong performing the
*   transformation.
         IF ( STATUS .NE. SAI__OK ) GOTO 999
 
*   Preserve bad data.
*   ==================
 
*   See if the nearest-neighbour element is bad.  When it is bad the
*   output value becomes bad too, so that we preserve the bad pixels
*   and do not invent data.
 
*   Initialise some flags.
         VALDET = .FALSE.
         VARDET = .FALSE.
 
*   Find the vector index to the nearest-neighbour data.  When an index
*   has a bad value this means the point lies outside the input array,
*   and so the output array value is similarly undefined, and we move
*   onto the next output element.
         VO = 1
         DO IAXIS = 1, NDIMI
            I = MOD( K - 1, ODIMS( 1 ) ) + 1
            IF ( INDICE( I, IAXIS ) .EQ. VAL__BADD ) THEN
               OUTARR( K ) = VAL__BAD<T>
               IF ( VAR ) OUTVAR( K ) = VAL__BAD<T>
               GO TO 80
 
*   Use INT rather than NINT for efficiency for certain compilers.  The
*   -1/2 comprises 1/2 for the conversion to NINT, and -1 for the fact
*   that there are the index less one strides to be applied to the
*   vector offset.  There is no need to test for negative indices (and
*   use a difference formula to convert to NINT), since the value
*   cannot be less than zero because the input array's lower bound is
*   defined to be 1, and KPG1_AINBD returns a bad value for indices
*   less than the lower bound.
            ELSE
               VO = VO + INT( INDICE( I, IAXIS ) - 0.5D0 ) *
     :              STRIDI( IAXIS )
            END IF
         END DO
 
*   Test that the computed index lies within the input array.  If it
*   does not, just set the values to be bad and go to the next output
*   element.
         IF ( VO .LT. 1 .OR. VO .GT. IEL ) THEN
            OUTARR( K ) = VAL__BAD<T>
            IF ( VAR ) OUTVAR( K ) = VAL__BAD<T>
            GO TO 80
         END IF
 
*   Test for a bad input data value.
         IF ( INARR( VO ) .EQ. VAL__BAD<T> ) THEN
            OUTARR( K ) = VAL__BAD<T>
            VALDET = .TRUE.
         END IF
 
*   Test for a bad input variance value.
         IF ( VAR ) THEN
            IF ( INVAR( VO ) .EQ. VAL__BAD<T> ) THEN
               OUTVAR( K ) = VAL__BAD<T>
               VARDET = .TRUE.
            END IF
         ELSE
            VARDET = .TRUE.
         END IF
 
*   At this point it may be possible to movbe onto the next output
*   element when the data and any variance value is already bad.
         IF ( VALDET .AND. VARDET ) GOTO 80
 
*   Find the indices of the neighbourhood.
*   ======================================
 
*   Derive the start and end elements to process.  Using this pseudo-
*   recursion may be `over the top', however it is extensible for large
*   areas, say for fitting a low-order polynomial to the neighbourhood.
         DO IAXIS = 1, NDIMI
            I = MOD( K - 1, ODIMS( 1 ) ) + 1
            IF ( INDICE( I, IAXIS ) .LT. 0.0D0 ) THEN
               START( IAXIS ) = INT( INDICE( I, IAXIS ) ) - 1
            ELSE
               START( IAXIS ) = INT( INDICE( I, IAXIS ) )
            END IF
            FINISH( IAXIS ) = START( IAXIS ) + 1
 
*   Form the weights for linear interpolation.
            FRAC( IAXIS, 2 ) = INDICE( I, IAXIS ) -
     :                         DBLE( START( IAXIS ) )
            FRAC( IAXIS, 1 ) = 1.0D0 - FRAC( IAXIS, 2 )
         END DO
 
*   Initialise the vector index within the square/cube/hypercube.
         ID = 1
 
*   Recursive scanning of the array dimensions begins with the highest
*   dimension.
         I = NDIMI
 
*   Form a section via recursive invocation starting here.
*   ======================================================
 
*   This is quite complicated as the section of the array under
*   analysis has to be extracted via pseudo-recursion.  A list of
*   vector pointers is calculated for a series of sub-sections along
*   the first dimension, each of length given by the bounds of the
*   section along the first dimension.
*
*   Increment the pointer to the end of the region which lies before
*   the lower bound of the sub-region being extracted (in the current
*   dimension), and which is therefore excluded from the calculation of
*   the output array values.
   20 CONTINUE
         ID = ID + ( START( I ) - 1 ) * STRIDI( I )
 
*   This is a "DO UNTIL" loop, which starts with the current dimension
*   set to the lower bound of the sub-region and executes until it goes
*   beyond the upper bound.
         IDIM( I ) = START( I )
 
   30    CONTINUE
         IF ( IDIM( I ) .GT. FINISH( I ) ) GOTO 50
 
*   The algorithm calls itself recursively here.
*   ============================================
 
*   The algorithm invokes itself recursively to process the next lower
*   dimension.  Decrement the current dimension count and branch back
*   to the start.
         IF ( I .GT. 1 ) THEN
            I = I - 1
            GOTO 20
         ELSE
 
*   Extract the neighbouring elements.
*   ==================================
*
*   Sum along the line segment marked by the pointer.
            DO  J = START( 1 ), FINISH( 1 )
 
*   Calculate the offset within the whole array.
               VO = ID + J - START( 1 )
 
*   Assign the values of the extracted region to temporary arrays.
               M = M + 1
 
*   Test that the computed index lies within the input array.  If it
*   does not, just set the neighbour to be bad to prevent it being
*   used in the interpolation.
               IF ( VO .LT. 1 .OR. VO .GT. IEL ) THEN
                  NEIGH( M ) = VAL__BAD<T>
                  IF ( VAR ) VNEIGH( M ) = VAL__BAD<T>
               ELSE
                  NEIGH( M ) = INARR( VO )
                  IF ( VAR ) VNEIGH( M ) = INVAR( VO )
               END IF
 
*   Use IDIM to store the pixel number along the first
*   dimension so that the offset may be calculated.
               IDIM( 1 ) = J
            END DO
 
*   Update the dimension index to indicate that all of the sub-region
*   in this dimension has now been processed.
            IDIM( 1 ) = FINISH( 1 )
 
*   Move the pointer to allow for the pixels within the section along
*   the line.
            ID = ID + FINISH( 1 ) - START( 1 ) + 1
         END IF
 
*   The recursively invoked algorithm returns to this point.
*   =======================================================
   40    CONTINUE
 
*   The current dimension count is "popped" back to its previous value
*   before the recursively invoked algorithm returns, so increment the
*   dimension index and branch to continue execution of the "DO UNTIL"
*   loop.
         IDIM( I ) = IDIM( I ) + 1
         GOTO 30
 
   50    CONTINUE
 
*   Increment pointers to the end of the data region which lies after
*   the upper bound of the sub-region being processed (in the current
*   dimension), and which is therefore NOT going to be included in the
*   marginal profiles.
         ID = ID + ( IDIMS( I ) - FINISH( I ) ) * STRIDI( I )
 
*   The recursively invoked algorithm returns from here.
*   ===================================================
 
*   "Pop" the current dimension count and make a return from a
*   recursive invocation of the algorithm (unless this is the top level
*   invocation---i.e. the current dimension count is equal to NDIMI---in
*   which case all the data have been transferred, so make a final
*   exit).
         IF ( I .GE. NDIMI ) GOTO 60
         I = I + 1
         GOTO 40
 
   60    CONTINUE
 
*   Perform the linear interpolations.
*   ==================================
 
*   Evaluate the data-array value when not already known.
         IF ( .NOT. VALDET ) THEN
 
*   Initialise the summation variables.
            WSUM = 0.0D0
            ASUM = 0.0D0
 
*   Loop around the neighbourhood elements either side of the point.
            DO J = 1, 2 ** NDIMI
               IF ( NEIGH( J ) .NE. VAL__BAD<T> ) THEN
 
*   Form the weight for the current element.
                  W = 1.0D0
                  DO I = 1, NDIMI
                     W = W * FRAC( I, MOD( ( J - 1 ) / ESTR( I ), 2 )
     :                   + 1 )
                  END DO
 
*   Integrate the weights and the weighted value.
                  WSUM = WSUM + W
                  ASUM = ASUM + NUM_<T>TOD( NEIGH( J ) ) * W
               END IF
            END DO
 
*   Validate that the output element has been computed using sufficient
*   weight.
            IF ( WSUM .GT. VAL__SMLD ) THEN
               OUTARR( K ) = NUM_DTO<T>( FLUX * ASUM / WSUM )
            ELSE
               OUTARR( K ) = VAL__BAD<T>
            END IF
         END IF
 
*   Repeat for the variance when it is not already assigned.
         IF ( VAR .AND. .NOT. VARDET ) THEN
 
*   Initialise the summation variables.
            WSUM = 0.0D0
            ASUM = 0.0D0
 
*   Loop around the neighbourhood elements either side of the point.
            DO J = 1, 2 ** NDIMI
               IF ( VNEIGH( J ) .NE. VAL__BAD<T> ) THEN
 
*   Form the weight for the current variance element.
                  W = 1.0D0
                  DO I = 1, NDIMI
                     F = FRAC( I, MOD( ( J - 1 ) / ESTR( I ), 2 ) + 1 )
                     W = W * F * F
                  END DO
 
*   Integrate the weights and the weighted value.
                  WSUM = WSUM + W
                  ASUM = ASUM + NUM_<T>TOD( VNEIGH( J ) ) * W
               END IF
            END DO
 
*   Validate that the output variance element has been computed using
*   sufficient weight.
            IF ( WSUM .GT. VAL__SMLD ) THEN
               OUTVAR( K ) = NUM_DTO<T>( FLUX * ASUM / WSUM )
            ELSE
               OUTVAR( K ) = VAL__BAD<T>
            END IF
         END IF
 
*   Come here when an output value or values have been assigned for the
*   Kth element.
   80    CONTINUE
 
*   Move to the next output element.
         K = K + 1
 
*   Bottom of pixel iteration do-loop.
      END DO
 
  999 CONTINUE
 
      END
