      SUBROUTINE KPG1_CHE2<T>( NPTS, XMIN, XMAX, X, YMIN, YMAX, Y, XDEG,
     :                         YDEG, NCOEF, CC, NW, WORK, EVAL, STATUS )
*+
*  Name:
*     KPG1_CHE2X

*  Purpose:
*     Evaluates a 2-dimensional Chebyshev polynomial.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_CHE2X( NPTS, XMIN, XMAX, X, YMIN, YMAX, Y, XDEG,
*                      YDEG, NCOEF, CC, NW, WORK, EVAL, STATUS )

*  Description:
*     This routine evaluates a two-dimensional Chebyshev polynomial for
*     one or more arguments.  It uses Clenshaw's recurrence
*     relationship twice.

*  Arguments:
*     XMIN = ? (Given)
*        The lower endpoint of the range of the fit along the first
*        dimension.  The Chebyshev series representation is in terms of
*        a normalised variable, evaluated as (2x - (XMAX + XMIN) ) /
*        (XMAX - XMIN), where x is the original variable.  XMIN must be
*        less than XMAX.
*     XMAX = ? (Given)
*        The upper endpoint of the range of the fit along the second
*        dimension.  See XMIN.
*     X( NPTS ) = ? (Given)
*        The co-ordinates along the first dimension for which the
*        Chebyshev polynomial is to be evaluated.
*     YMIN = ? (Given)
*        The lower endpoint of the range of the fit along the first
*        dimension.  The Chebyshev series representation is in terms of
*        a normalised variable, evaluated as (2y - (YMAX + YMIN) ) /
*        (YMAX - YMIN), where y is the original variable.  YMIN must be
*        less than YMAX.
*     YMAX = ? (Given)
*        The upper endpoint of the range of the fit along the second
*        dimension.  See YMIN.
*     Y = ? (Given)
*        The co-ordinate along the second dimension for which the
*        Chebyshev polynomial is to be evaluated.
*     XDEG = INTEGER (Given)
*        The degree of the polynomial along the first dimension.
*     YDEG = INTEGER (Given)
*        The degree of the polynomial along the second dimension.
*     MCOEF = INTEGER (Given)
*        The number of coefficients.  This must be at least the product
*        of (XDEG+1) * (YDEG+1).
*     CC( MCOEF ) = ? (Given)
*        The Chebyshev coefficients.  These should be the order such
*        that CCij is in CC( i*(YDEG+1)+j+1 ) for i=0,XDEG; j=0,YDEG.
*        In other words the opposite order to Fortran standard.
*     NW = INTEGER (Given)
*        The number of elements in the work array.  It must be at least
*        XDEG + 1.
*     WORK( NW ) = ? (Returned)
*        Workspace.
*     EVAL( NPTS ) = ? (Returned)
*        The evaluated polynomial for the supplied arguments.  Should an
*        argument lie beyond the range ([XMIN,XMAX], [YMIN,YMAX] the
*        bad value is returned in the corresponding element of EVAL.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  [optional_subroutine_items]...
*  Notes:
*     There is a routine for the real and double precision data types:
*     replace "x" in the routine name by R or D respectively.  The
*     XMIN, XMAX, X, YMIN, YMAX, Y, CC, WORK, and EVAL arguments
*     supplied to the routine must have the data type specified.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1996 October 4 (MJC):
*        Original version.
*     1997 July 31 (MJC):
*        Corrected a couple of error messages and tests.  Made more
*        efficient for a constant (zero-order) fit.
*     1997 August 21 (MJC):
*        Fixed bug in evaluating linear case.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! VAL__ constants

*  Arguments Given:
      INTEGER NPTS
      <TYPE> XMIN
      <TYPE> XMAX
      <TYPE> X( NPTS )
      <TYPE> YMIN
      <TYPE> YMAX
      <TYPE> Y
      INTEGER XDEG
      INTEGER YDEG
      INTEGER NCOEF
      <TYPE> CC( NCOEF )
      INTEGER NW

*  Arguments Returned:
      <TYPE> WORK( NW )
      <TYPE> EVAL( NPTS )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER IOFFCC             ! Index offset of Chebyshev coefficient
      <LTYPE> D                  ! Summation to current order
      <LTYPE> DP1                ! Summation to current order plus one
      <LTYPE> DP2                ! Summation to current order plus two
      INTEGER ECOEF              ! Expected number of Chebyshev
                                 ! coefficients
      INTEGER I                  ! Loop counter for summation over
                                 ! second axis
      INTEGER K                  ! Loop counter for co-ordinates
      INTEGER ORDER              ! Loop counter for polynomial order
      <LTYPE> XN2                ! Twice the normalised first-axis
                                 ! co-ordinate
      <LTYPE> XNORM              ! Normalised first-axis co-ordinate
      <LTYPE> XR                 ! First-axis co-ordinate range
      <LTYPE> YN2                ! Twice the normalised second-axis
                                 ! co-ordinate
      <LTYPE> YNORM              ! Normalised second-axis co-ordinate
      <LTYPE> YR                 ! Second-axis co-ordinate range

*.

*  Set the returned values to be bad.
      DO K = 1, NPTS
         EVAL( K ) = VAL__BAD<T>
      END DO

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Validate the data limits.
      IF ( XMAX .LE. XMIN ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SET<T>( 'MX', XMAX )
         CALL MSG_SET<T>( 'MN', XMIN )
         CALL ERR_REP( 'KPG1_CHE2x_RANGEX',
     :     'Scaling range for Chebyshev polynomial along first '/
     :     /'dimension has minimum (^MN) not less than the maximum '/
     :     /'(^MX).  Programming error.', STATUS )
         GOTO 999
      END IF

*  Validate the data limits.
      IF ( YMAX .LE. YMIN ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SET<T>( 'MX', YMAX )
         CALL MSG_SET<T>( 'MN', YMIN )
         CALL ERR_REP( 'KPG1_CHE2x_RANGEY',
     :     'Scaling range for Chebyshev polynomial along second '/
     :     /'dimension has minimum (^MN) not less than the maximum '/
     :     /'(^MX).  Programming error.', STATUS )
         GOTO 999
      END IF

*  Validate the number of coefficients.
      IF ( NCOEF .LT. 1 ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SETI( 'NC', NCOEF )
         CALL ERR_REP( 'KPG1_CHE2x_NCOEF',
     :     'Chebyshev polynomial has fewer than 1 term.  '/
     :     /'Programming error.', STATUS )
         GOTO 999
      END IF

*  Validate the orders.
      IF ( XDEG .LT. 0 .OR. YDEG .LT. 0 ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SETI( 'XD', XDEG )
         CALL MSG_SETI( 'YD', YDEG )
         CALL ERR_REP( 'KPG1_CHE2x_ORDERS',
     :     'Both Chebyshev polynomial orders (^XD,^YD) are not '/
     :     /'positive.  Programming error.', STATUS )
         GOTO 999
      END IF

*  Check that the number of coefficients is not excessive.
      ECOEF = ( XDEG + 1 ) * ( YDEG + 1 )
      IF ( ECOEF .GT. NCOEF ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SETI( 'EC', ECOEF )
         CALL ERR_REP( 'KPG1_CHE2x_NCOEF',
     :     'Chebyshev polynomial has fewer than the required ^EC'/
     :     /'terms.  Programming error.', STATUS )
         GOTO 999
      END IF

*  Test for an invalid Y co-ordinate.
      IF ( ( Y - YMAX ) * ( Y - YMIN ) .GT. 0<CONST> ) THEN
         STATUS = SAI__ERROR
         CALL MSG_SET<T>( 'MX', YMAX )
         CALL MSG_SET<T>( 'MN', YMIN )
         CALL MSG_SET<T>( 'Y', Y )
         CALL ERR_REP( 'KPG1_CHE2x_BADY',
     :     'Cannot evaluate a Chebyshev polynomial for a y '/
     :     /'co-ordinate at ^Y.  It is outside the range [^MX,^MN].  '/
     :     /'Programming error.', STATUS )
         GOTO 999
      END IF

*  Evaluate results.
*  =================

*  First deal with the trivial case for efficiency.
      IF ( NCOEF .EQ. 1 ) THEN

*  Assign the constant to each point.  Note the convention where the
*  first coefficient is halved.
         DO K = 1, NPTS
            EVAL( K ) = CC( 1 ) / 2<CONST>
         END DO

*  Now tackle the general case.
      ELSE

*  Define two useful variables.
         XR = XMAX - XMIN
         YR = YMAX - YMIN

*  Normalise the variable to lie in the range -1 to +1.  This form of
*  the expression guarantees that the computed normalised value lies
*  no more than four times the machine precision from its true value.
         YNORM = ( ( Y - YMIN ) - ( YMAX - Y ) ) / YR

*  Initialise variable for recurrence relationship.
         YN2 = 2<CONST> * YNORM

*  Sum the coefficients times the second-axis Chebyshev polynomials.
*  =================================================================

*  Apply Clenshaw's recurrence relationship for efficiency.  For terms
*  greater than NCOEF the value is zero.  Note the
         DO I = 1, XDEG + 1
            IOFFCC = ( I - 1 ) * ( YDEG + 1 )
            DP2 = 0<CONST>
            DP1 = 0<CONST>
            IF ( YDEG .GE. 1 ) THEN
               DO ORDER = YDEG + 1, 2, -1
                  D = DP1
                  DP1 = YN2 * DP1 - DP2 + CC( IOFFCC + ORDER )
                  DP2 = D
               END DO
            END IF

*  The final iteration is different.  The constant term is half of the
*  coefficient in the Chebyshev series.
            WORK( I ) = DP1 * YNORM - DP2 + CC( IOFFCC + 1 ) / 2<CONST>
         END DO

*  Loop for each point to be evaluated.
         DO K = 1, NPTS

*  Check that the x co-ordinate is in range.
            IF ( ( X( K ) - XMAX ) *
     :           ( X( K ) - XMIN ) .LE. 0<CONST> ) THEN

*  Normalise the variable to lie in the range -1 to +1.  This form of
*  the expression guarantees that the computed normalised value lies
*  no more than four times the machine precision from its true value.
               XNORM = ( ( X( K ) - XMIN ) - ( XMAX - X( K ) ) ) / XR

*  Sum the C(I)s times the first-axis Chebyshev polynomials.
*  =========================================================

*  Initialise variable for recurrence relationship.
               XN2 = 2<CONST> * XNORM

*  Apply Clenshaw's recurrence relationship for efficiency.  For terms
*  greater than NCOEF the value is zero.
               DP2 = 0<CONST>
               DP1 = 0<CONST>
               IF ( XDEG .GE. 1 ) THEN
                  DO ORDER = XDEG + 1, 2, -1
                     D = DP1
                     DP1 = XN2 * DP1 - DP2 + WORK( ORDER )
                     DP2 = D
                  END DO
               END IF

*  The final iteration is different.  The constant term is half of the
*  coefficient in the Chebyshev series.
               EVAL( K ) = DP1 * XNORM - DP2 + WORK( 1 ) / 2<CONST>
            END IF
         END DO
      END IF

  999 CONTINUE

      END
