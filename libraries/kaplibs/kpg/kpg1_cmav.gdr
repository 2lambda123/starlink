      SUBROUTINE KPG1_CMAV<T>( NDIM, DIMS, INARR, COMPRS, NLIM,
     :                         OUTARR, SUM, NUM, STATUS )
*+
*  Name:
*     KPG1_CMAVx

*  Purpose:
*     Compresses an n-dimensional array by averaging in `rectangular'
*     boxes.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPG1_CMAVx( NDIM, DIMS, INARR, COMPRS, NLIM, OUTARR,
*                      SUM, NUM, STATUS )

*  Description:
*     This routine compresses an n-dimensional array by integer factors
*     along each dimension by averaging the array values in a
*     rectangular box.

*  Arguments:
*     NDIM = INTEGER (Given)
*        The dimensionality of the n-dimensional array.  It must be
*        greater than one.  To handle a one-dimensional array, give it
*        a second dummy dimension of 1.
*     DIMS( NDIM ) = INTEGER (Given)
*        The dimensions of the input n-dimensional array.
*     INARR( * ) = ? (Given)
*        The input n-dimensional data array.
*     COMPRS( NDIM ) = INTEGER (Given)
*        The factors along each dimension by which the input array is
*        compressed to form the output array.
*     NLIM = INTEGER (Given)
*        The minimum number of good input elements in a compression box
*        that permits the corresponding output array element to be good.
*        If fewer than NLIM pixels participated in the sum, the output
*        pixel will be bad.
*     OUTARR( * ) = ? (Write)
*        The compressed n-dimensional array.  Its dimension I must be
*        given by DIMS( I )/COMPRS( I ).
*     SUM( * ) = ? (Returned)
*        Workspace used for efficiency in computing the summations.
*        This should have size at least equal to DIMS( 1 ).
*     NUM( * ) = INTEGER (Returned)
*        Workspace used to count the number of good elements in the
*        input box. This should have size at least equal to DIMS( 1 ).
*     STATUS  =  INTEGER (Given and Returned).
*        Global status value

*  Notes:
*     -  There is a routine for the following numeric data types:
*     replace "x" in the routine name by D or R as appropriate.  The
*     input and output data arrays plus a work space must have the
*     data type specified.
*     -  There is no protection against overflows when the absolute data
*     values are very large.

*  Algorithm:
*     The n-dimensional boxes are derived from a recursive treatment of
*     the problem of traversing an arbitrary number of array dimensions
*     whilst processing data from a sub-region in each dimension.  It
*     may be written schematically as follows...
*
*        procedure LOOP( I )
*           for IDIM( I ) from 1 to DIMS( I ) do
*              if ( I = 1 ) then
*                 <sum in the rectangular box>
*                 return
*              else
*                 LOOP( I - 1 )
*              end
*           end
*        end

*     where DIMS( I ) is dimension of the region used to calculate the
*     marginal profiles, and IDIM is the index along the dimension.  A
*     call of LOOP( NDIM ) then performs the entire formation of the
*     marginal profiles.
*
*     Since Fortran does not allow recursive subroutine calls, they are
*     simulated here by branching back to the start of the algorithm,
*     having saved the previous dimension index in an appropriate
*     element of an array.  A similar process (in reverse) is used to
*     simulate a return from the recursively invoked algorithm.  To
*     avoid branching back into the range of a DO loop, looping has to
*     be implemented using IF and GO TO statements.
*
*     The algorithm operates as follows:-
*     -  Validate the dimensionality and compression factors.  Find the
*     total number of elements in the output array, and the effective
*     dimensions of the input array.  Constrain the minimum number of
*     good values within each box to be sensible.  Initialise the edges
*     of the first box.
*     -  Compute the strides of each dimension and initialise a pointer
*     to the region within the input array.
*     -  Loop until all the output elements have been evaluated.
*        o Initialise the arrays used to form the sums along the first
*        dimension (for all boxes along the first dimension).
*        o  Invoke the recursive algorithm.
*        o  Set the pointer to the start array regions to be skipped (in
*        front of the sub-region) in the current dimension.
*        o  If the current dimension is 1 sum within the bin and
*        increment the count (provided the input value is not bad),
*        otherwise invoke the algorithm again to handle the next lower
*        dimension.
*        o  Adjust pointer to allow for data beyond the upper bound of
*        the region (after the sub-region) in the current dimension.
*        o  Return from the recursive algorithm.
*        o  Calculate the averaged output-array element for each of
*        the boxes along the first dimension, incrementing the output
*        index.  The output element is bad when the number of
*        contributing input elements fails to exceed the minimum-number
*        criterion.

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council.
*     Copyright (C) 1998 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie  (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1991 November 25 (MJC):
*        Original version.
*     11-JUN-1998 (DSB):
*        Corrected the initialisation of the edges of the first
*        summation box so that it works for cases where NDIM > 2.
*     1998 October 20 (MJC):
*        Protect against accessing COMPRS elements with index > 2, when
*        NDIM is <3.
*     20-FEB-2020 (DSB):
*        Call the 8-byte version to do the work.
*     31-MAR-2020 (DSB):
*        Convert COMPRS from 4 to 8 byte before calling 8-byte version.
*     {enter_further_changes_here}

*  Bugs:
*     {note_bugs_here}

*-

*  Type Definitions:
      IMPLICIT  NONE             ! no implicit typing allowed

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! SSE global definitions
      INCLUDE 'NDF_PAR'          ! NDF constants

*  Arguments Given:
      INTEGER NDIM
      INTEGER DIMS( NDIM )
      <TYPE> INARR( * )
      INTEGER COMPRS( NDIM )
      INTEGER NLIM

*  Arguments Returned:
      <TYPE> OUTARR( * )
      <TYPE> SUM( * )
      INTEGER NUM( * )

*  Status:
      INTEGER STATUS

*  Local Variables:
      INTEGER*8 COMPRS8( NDF__MXDIM )
      INTEGER*8 DIMS8( NDF__MXDIM )
      INTEGER I

*.

*  Check the inherited status on entry.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Convert INTEGER dims to INTEGER*8 dims
      DO I = 1, NDIM
         DIMS8( I ) = DIMS( I )
         COMPRS8( I ) = COMPRS( I )
      END DO

*  Call the 8-byte version to do the work.
      CALL KPG1_CMAV8<T>( NDIM, DIMS8, INARR, COMPRS8, NLIM,
     :                    OUTARR, SUM, NUM, STATUS )

      END
