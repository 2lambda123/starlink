#!/bin/tcsh
#+
#  Purpose:
#     Does a few tests of the version of AST installed in $INSTALL.

#  Usage:
#     ast_tester <-nd>

#  Description:
#     Builds and runs various tests of an AST installation.
#     
#     Some tests produce graphical output. Postscript plots of the FITS 
#     headers in the current directory are produced for visual comparison 
#     with previous versions. For each file matching "*.head" in the current 
#     directory, a file is created called "*-new.ps". This file should be 
#     compared visually with the file "*.ps". The new files are displayed 
#     automatically unless the -nd option is supplied on the command line
#
#     This script assumes the gnu g77 compiler is available. If this is not 
#     the case, do a global edit of g77 to whatever fortran 77 compiler you 
#     have available (you will probably also need to change the compiler 
#     flags).

#  Options:
#     -nd : Suppresses display of test plots.

#  Prior Requirements:
#     - Unless the "-nd" option is specified, it requires the gv command (a 
#       frontend for ghostscript) to be on your PATH.
#     - The following environment variables are used:
#        STARLINK - should be set to the root of the tree in which the SSC is 
#              installed. A default of /star is used if not set.
#        AST - should be set to the root of the tree in which the version of 
#              AST to be tested is installed. A default of $HOME is used if not set.
#-

if( ! $?STARLINK ) then
   setenv STARLINK /star
endif

if( ! $?AST ) then
   setenv AST $HOME
endif

setenv PATH $AST/bin\:$STARLINK/bin\:$PATH


# List the test progs

# Build the progs
#f95 -fno-second-underscore -o regression regression.f -I$AST/include -I$STARLINK/include -L$AST/lib -L$STARLINK/lib `ast_link -ems` `chr_link`
f95 -fno-second-underscore -o plotter plotter.f -I$AST/include -I$STARLINK/include -L$AST/lib -L$STARLINK/lib `ast_link -pgp -ems` `pgplot_link`
f95 -fno-second-underscore -o wcsconverter wcsconverter.f -I$AST/include -I$STARLINK/include -L$AST/lib -L$STARLINK/lib `ast_link -ems` `chr_link` `err_link`
f95 -fno-second-underscore -o simplify simplify.f -I$AST/include -I$STARLINK/include -L$AST/lib -L$STARLINK/lib `ast_link -ems` `chr_link` `err_link`



## Run the main regression tester

# CURRENTLY COMMENTED OUT BECAUSE IT IS TOO FRAGILE 

#regression >& regression.out
#
## Compare the results with the current expected output.
#diff -c regression.out regression.current > regression.diff
#
#if( $status != 0 ) then
#   echo ""
#   echo "Regression output has changed"
#   echo "See file $PWD/regression.diff"
#else
#   rm -f regression.out regression.diff >& /dev/null
#   echo ""
#   echo "Regression output has NOT changed"
#endif





# Run the other test progs
echo "" 
foreach prog (testfitschan testswitchmap testrebin testtrangrid testnormmap teststc testtime testrate testflux testratemap testspecflux testxmlchan testregions testkeymap )

f95 -fno-second-underscore -w -o $prog -g $prog.f -I$AST/include \
     -I$STARLINK/include -L$AST/lib -L$STARLINK/lib `ast_link -ems` \
     `prm_link` `chr_link` `err_link`

$prog
rm $prog
end

# Make new plots.
echo ""
echo "Generating new plots..."
echo ""
if( $1 == "-nd" ) then
echo "   (but not displaying them because the -nd option was supplied)"
echo ""
endif

rm *-new.ps  >& /dev/null

foreach n (*.head)
   set bn = `basename $n .head`

   set atfile = "${bn}.attr"
   if( -e $atfile ) then
      set attr1 = `cat $atfile`
   else
      set attr1 = ' '
   endif

   set atfile = "${bn}.fattr"
   if( -e $atfile ) then
      set attr2 = `cat $atfile`
   else
      set attr2 = ' '
   endif
   
   set boxfile = "${bn}.box"
   if( -e $boxfile ) then
      set box = `cat $boxfile`
   else
      set box = ' '
   endif
   

   set psfile = "${bn}-new.ps"
   plotter $n "$attr1" "$attr2" a.ps $box

   if( -e $STARLINK/bin/psmerge ) then
      $STARLINK/bin/psmerge -t300x300 -r90 a.ps > $psfile
   else
      cp a.ps $psfile
   endif

   if( $1 != "-nd" ) then
      gv $psfile 
   endif

end

rm -f a.ps


# Make new fits headers 
echo ""
echo "Doing WCS conversion tests..."
echo ""

set ok = 1
foreach n ( "timj ast fits-wcs cdmatrix=1" \
            "timj ast fits-iraf" \
            "timj ast fits-aips" \
            "timj ast fits-pc" \
            "timj ast native" \
            "dss fit ast" \
            "dss ast dss" \
            "dss ast fits-wcs cdmatrix=1" \
            "degen1 ast fits-wcs cdmatrix=1" \
            "longslit fits-pc fits-wcs cdmatrix=1" )

  set a = `echo $n`
 
  set base = $a[1]
  set in_suffix = $a[2]
  set encoding = $a[3]
  if( $#a > 3 ) then
     set attrs = $a[4]
  else 
     set attrs = ""
  endif

  set in_file = "$base.$in_suffix"
  set old_file = "$base.$encoding"
  set new_file = "$base-new.$encoding"


   wcsconverter $in_file $encoding $new_file "$attrs,FitsDigits=8"
   diff -c $old_file $new_file > $old_file.diff

   if( $status == 0 ) then
      rm -f $old_file.diff  $new_file
   else
      echo "   $old_file and $new_file differ\!\! (see $old_file.diff)"
      set ok = 0
   endif

end

if( $ok == 1 ) then
   echo "   All WCS conversion tests passed"
   echo ""
endif


echo ""
echo "Doing Simplification tests..."
echo ""

set ok = 1
foreach n ( *.map )
   set a = `basename $n .map`
   simplify $n $a.out
   diff -c $a.simp $a.out > $a.diff

   if( $status == 0 ) then
      rm -f $a.out $a.diff  
   else
      echo "   $a.simp and $a.out differ\!\! (see $a.diff)"
      set ok = 0
   endif

end

if( $ok == 1 ) then
   echo "   All simplification tests passed"
   echo ""
   echo ""
endif






rm -f plotter wcsconverter simplify testxmlchan 
