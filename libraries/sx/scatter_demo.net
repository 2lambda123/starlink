//
// time: Tue Nov 21 19:52:18 1995
//
// version: 3.0.0 (format), 3.1.0 (DX)
//
//
// MODULE main
//
// comment: Contents of this help screen:
// comment: 
// comment:   1 - What this demo does
// comment:   2 - How the demo is executed
// comment:   3 - Use of the Image window to modify the display
// comment:   4 - How to make a movie
// comment:   5 - What to do once you have read this help
// comment: 
// comment: 
// comment: 1  -  WHAT THIS DEMO. DOES:
// comment: 
// comment: This demonstration allows the user to import and examine
// comment: scattered particle data. Each particle is defined by a
// comment: position in 3-dimensional space and any number of
// comment: additional data quantities, which may be vectors or
// comment: scalars.
// comment: 
// comment: Images are created which allow the user to view an
// comment: arbitrary subset of the particles from any point in
// comment: space. Each particle may be presented by a simple point,
// comment: or by a sphere (rendered in 3-D), or as a 3-dimensional
// comment: rocket-like object (useful for vector quantities). The
// comment: size and shape of each sphere or rocket can be determined by any arbitrary combination of the particle's data values, its position, its distance from the "camera",
// comment: etc.  The colour used to represent each particle can also
// comment: be determined independantly in a similar arbitrary
// comment: manner. Objects used to represent particles may be made 
// comment: partially transparent so that areas of high density can 
// comment: be identified.
// comment: 
// comment: Which particles are displayed can also be selected on
// comment: the basis of their data values, position, distance from
// comment: the camera, etc.
// comment: 
// comment: A series of data sets can be imported and displayed
// comment: automatically, and selected particles can be followed
// comment: from one frame to the next.
// comment: 
// comment: The scattered data can be binned or interpolated onto a regular grid which can then be saved on disk for visualisation using other demo networks.
// comment: 
// comment: The point from which the objects are viewed can be
// comment: automatically rotated in 3-D between succesive frames to
// comment: give a smooth rotation.
// comment: 
// comment: Any set of displayed images can be saved and encoded
// comment: into an mpeg animation.
// comment: 
// comment: A bounding box can optionally be displayed.
// comment: 
// comment: The input data files must be in one of the following formats:
// comment: 
// comment: o  A DX "Native" format file, as created by DX or by the
// comment:    "$SX_DIR/ndf2dx" application.
// comment: 
// comment: o  A DX "general" format file as described in the DX 
// comment:    User's Guide, containing ASCII or binary data 
// comment:    (potentially created by a Fortran program).
// comment: 
// comment: 
// comment: 
// comment: 2 - HOW THE DEMO. IS EXECUTED:
// comment: 
// comment: The demo is basically a large program with several input
// comment: parameters. To use the demo, all parameters values should
// comment: be set to the required values (or left at their default
// comment: values), and the program should then be executed once by
// comment: selecting the "Execute once" item from the pull-down
// comment: "Execution" menu in the Image window. This will create an
// comment: image in the image window as specified by the parameter
// comment: values, or else it will pop up a "message window" with an
// comment: error message in it if anything went wrong.  You can then
// comment: modify the parameter values, and re-execute the network
// comment: (using the same item in the "Execution" menu) to create a
// comment: modified display. ALWAYS PRESS RETURN AFTER TYPING A
// comment: VALUE INTO A DATA ENTRY BOX.
// comment: 
// comment: While the program is executing, the "Execute" menu in the
// comment: Image window will be coloured green.
// comment: 
// comment: The parameter values are displayed and entered using
// comment: several "control panels", each panel containing controls
// comment: related to a particular aspect of the demo. To open these
// comment: control panels, open the "Windows" menu on the menu-bar
// comment: of the Image window, and then select the "Open control
// comment: panel by name" item. This will display a list of the
// comment: control panels, and you can then open the panel by
// comment: clicking on its name. The panel will remain open until
// comment: you close it using the "Close" button at the bottom of
// comment: the panel.  Each panel has extra help information
// comment: describing its use which can be accessed by pressing the
// comment: "Help" button at the bottom of the panel.
// comment: 
// comment: 
// comment: 3 - USE OF THE IMAGE WINDOW TO MODIFY THE DISPLAY:
// comment: 
// comment: In addition to the demo control panels, the display can
// comment: also be modified using the "Options" pull-down menu
// comment: situated on the menu-bar of the Image window.  This menu
// comment: allows control of (amongst other things) the size and
// comment: position of the image, and the position in space from
// comment: which the object is viewed. It also provides facilities
// comment: for adding enumerated and labelled 3-d axes to the image.
// comment: 
// comment: NOTE, these facilities are effected by the setting of the
// comment: controls on the "Camera control..." control panel and you
// comment: should read the help information on this panel before
// comment: attempting to use them.
// comment: 
// comment: o View control: Select the "View control..." item from
// comment:   the "Options" menu. This produces a new window. You can
// comment:   press the "Set view" button to get a list of preset
// comment:   "view points" from which you can select, or you can press
// comment:   the "Mode" button, and then select "Rotate" to get a
// comment:   "virtual 3-d tracker-ball" which is controlled by
// comment:   pressing the left mouse button and moving the cursor over
// comment:   the image. Note, the image is not re-drawn until you
// comment:   release the mouse button. 
// comment: 
// comment: o Image size and position: Select the "View control..."
// comment:   item from the "Options" menu, and then press the
// comment:   "Mode" button. Then select the "Pan/Zoom" item from
// comment:   the displayed list. Now position the cursor at the place
// comment:   where you want the new image centre to be. To zoom in,
// comment:   the left mouse button and drag it until the displayed
// comment:   box encloses the area you are interested in, and then
// comment:   release the button. The image is re-drawn with the
// comment:   selected area filling the screen. To zoom out, press
// comment:   the right-hand mouse button instead. When the button
// comment:   is released, the image is redrawn with the whole
// comment:   screen compressed into the selected area.
// comment: 
// comment: o Axes control: Select the "Autoaxes..." item from the
// comment:   "Options" menu, and press the "Enabled" button at the
// comment:   top-left of the window which is then popped up. You can
// comment:   also enter labels for the axes using the three data entry
// comment:   boxes just below the "Enable" button. Other aspects of
// comment:   the axes can be controlled by pressing the "Expand"
// comment:   button at the bottom of the window. This displays more
// comment:   options which can then be set appropriately. Note, the
// comment:   axes do not appear until the program is re-executed, or
// comment:   the image window is reset by pressing control-F (which
// comment:   also resets the view to a default off-diagonal view).
// comment: 
// comment: o Resetting the Image window: The Image window retains
// comment:   its setting even if you select a new input file. Of
// comment:   course, the old settings may not be appropriate for the
// comment:   new data (e.g. the new data may cover a much larger
// comment:   volume and so may not all fit in the Image window).
// comment:   Presing control-F while in the Image window causes the
// comment:   view to reset to an off-diagonal display of size 
// comment:   appropriate for the data.
// comment: 
// comment: 
// comment: 4 - HOW TO MAKE A MOVIE:
// comment: 
// comment: Instructions for making an mpeg movie can be obtained by
// comment: pressing the "Help" button on the "Mpeg control" control 
// comment: panel. To access this information, press the "Windows" 
// comment: button on the menu-bar of the Image window. Then press 
// comment: "Open Control Panel by name..." from within the popped
// comment: up menu. Press "Mpeg control". The control panel will
// comment: then appear. Press the "Help" button.
// comment: 
// comment: 
// comment: 5 - WHAT TO DO ONCE YOU HAVE READ THIS HELP:
// comment: 
// comment: The first thing to do is to specify your input file.
// comment: Press the "Windows" button on the menu-bar of the Image
// comment: window. Then press "Open Control Panel by name..." from
// comment: within the popped up menu. Press "Select input file..."
// comment: from the displayed list. This will create a new window
// comment: with a data entry box for the file name (press the "Help"
// comment: button at the bottom of this new window for further help
// comment: if necessary). Once you have entered the file name, and
// comment: file format, execute the program by pressing "Execute" on
// comment: the Image window menu-bar, and then select "Execute
// comment: once". This should produce an image. You can then modify
// comment: the image by selecting the appropriate control panel
// comment: using the "Open control panel by name" option in the
// comment: "Windows" menu, set the new values, and re-execute the
// comment: program.
// comment: 
// comment: It's a good idea to browse through the help information
// comment: associated with each control panel, which contains more
// comment: detailed information about using the facilities of this
// comment: demo.
// workspace: width = 9236, height = 1982
// layout: snap = 1, width = 20, height = 20, align = CC
//
macro main(
) -> (
) {
    // 
    // node Reset[5]: x = 4567, y = 199, inputs = 6, label = Reset
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "main_Reset_5_out_1"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 0
    // toggle : 0
    //
    // 
    // node Toggle[14]: x = 4104, y = 579, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_14"
    // input[2]: defaulting = 0, visible = 0, type = 29, value =  1  
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 0, visible = 1, type = 29, value =  2  
    // input[5]: defaulting = 0, visible = 1, type = 29, value =  1  
    // output[1]: visible = 1, type = 29, value =  1  
    // toggle : 0
    //
main_Toggle_14_out_1[cache: 2] = 
    Toggle(
    main_Toggle_14_in_1,
    main_Toggle_14_in_2,
    main_Toggle_14_in_3,
    main_Toggle_14_in_4,
    main_Toggle_14_in_5,
    main_Toggle_14_in_6
    ) [instance: 14, cache: 1];
    // 
    // node Toggle[13]: x = 4084, y = 399, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_13"
    // input[2]: defaulting = 0, visible = 0, type = 29, value =  2  
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 1, type = 29, value = 1
    // input[5]: defaulting = 0, visible = 1, type = 29, value =  2  
    // output[1]: visible = 1, type = 29, value =  2  
    // toggle : 0
    //
main_Toggle_13_out_1[cache: 2] = 
    Toggle(
    main_Toggle_13_in_1,
    main_Toggle_13_in_2,
    main_Toggle_13_in_3,
    main_Toggle_13_in_4,
    main_Toggle_13_in_5,
    main_Toggle_13_in_6
    ) [instance: 13, cache: 1];
    // 
    // node Selector[6]: x = 838, y = 39, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_6"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "NULL" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 0 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Starlink NDF" "DX general (Fortran binary)" "DX native" "DX general " "NULL" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 4 3 1 2 0 }
    // output[1]: visible = 1, type = 29, value = 0 
    // output[2]: visible = 1, type = 32, value = "NULL" 
    //
    // 
    // node Compute[51]: x = 816, y = 139, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "1+($0>0)"
    // expression: value = 1+(a>0)
    // name[2]: value = a
    //
main_Compute_51_out_1 = 
    Compute(
    main_Compute_51_in_1,
    main_Selector_6_out_1
    ) [instance: 51, cache: 1];
    // 
    // node Route[21]: x = 846, y = 219, inputs = 2, outputs = 2, label = Route
    //
main_Route_21_out_1,
main_Route_21_out_2 = 
    Route(
    main_Compute_51_out_1,
    main_Selector_6_out_1
    ) [instance: 21, cache: 1];
    // 
    // node FileSelector[1]: x = 226, y = 19, inputs = 0, label = FileSelector
    // output[1]: visible = 1, type = 32, value = NULL
    // output[2]: visible = 1, type = 32, value = NULL
    //
    // 
    // node Inquire[6]: x = 194, y = 139, inputs = 3, label = Inquire
    //
main_Inquire_6_out_1[cache: 2] = 
    Inquire(
    main_FileSelector_1_out_1,
    main_Inquire_6_in_2,
    main_Inquire_6_in_3
    ) [instance: 6, cache: 1];
    // 
    // node Compute[10]: x = 196, y = 219, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0+1"
    // expression: value = a+1
    // name[2]: value = a
    //
main_Compute_10_out_1[cache: 2] = 
    Compute(
    main_Compute_10_in_1,
    main_Inquire_6_out_1
    ) [instance: 10, cache: 1];
    // 
    // node Route[1]: x = 286, y = 299, inputs = 2, outputs = 2, label = Route
    //
main_Route_1_out_1[cache: 2],
main_Route_1_out_2[cache: 2] = 
    Route(
    main_Compute_10_out_1,
    main_FileSelector_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Integer[2]: x = 43, y = 139, inputs = 11, label = Integer
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Integer_2"
    // input[3]: defaulting = 0, visible = 0, type = 1, value = 1 
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[6]: defaulting = 1, visible = 0, type = 1, value = 1000000
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 0
    // output[1]: visible = 1, type = 1, value = 1 
    //
    // 
    // node Sequencer[2]: x = 30, y = 219, inputs = 7, label = Sequencer
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Sequencer_2"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 1, visible = 1, type = 1, value = 1
    // input[6]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[7]: defaulting = 0, visible = 0, type = 16777217, value = { 1 1 1 1 1 1 }
    // vcr[2]: min = 1, max = 1, beg = 1, end = 1, cur = 2, inc = 1, loop = off, step = off, pal = off
    // window: position = (0.0164,0.1328), size = 0.2734x0.1045
    //
    main_Sequencer_2_in_3 = @frame;
main_Sequencer_2_out_1[cache: 2] = 
    Sequencer(
    main_Sequencer_2_in_1,
    main_Sequencer_2_in_2,
    main_Sequencer_2_in_3,
    main_Sequencer_2_in_4,
    main_Integer_2_out_1,
    main_Sequencer_2_in_6,
    main_Sequencer_2_in_7
    ) [instance: 2, cache: 1];
    // 
    // node Format[16]: x = 223, y = 479, inputs = 2, label = Format
    //
main_Format_16_out_1 = 
    Format(
    main_Route_1_out_1,
    main_Sequencer_2_out_1
    ) [instance: 16, cache: 1];
    // 
    // node Transmitter[12]: x = 223, y = 599, inputs = 1, label = filespec
    //
filespec = main_Format_16_out_1;
    // 
    // node Receiver[20]: x = 1123, y = 39, inputs = 1, label = filespec
    //
main_Receiver_20_out_1[cache: 2] = filespec;
    // 
    // node Import[1]: x = 934, y = 179, inputs = 6, label = Import
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "dx"
    //
main_Import_1_out_1[cache: 2] = 
    Import(
    main_Receiver_20_out_1,
    main_Import_1_in_2,
    main_Import_1_in_3,
    main_Import_1_in_4,
    main_Import_1_in_5,
    main_Import_1_in_6
    ) [instance: 1, cache: 1];
    // 
    // node Import[2]: x = 1034, y = 179, inputs = 6, label = Import
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "general"
    //
main_Import_2_out_1[cache: 2] = 
    Import(
    main_Receiver_20_out_1,
    main_Import_2_in_2,
    main_Import_2_in_3,
    main_Import_2_in_4,
    main_Import_2_in_5,
    main_Import_2_in_6
    ) [instance: 2, cache: 1];
    // 
    // node SXReadFortran[1]: x = 1114, y = 179, inputs = 5, label = SXReadFortran
    // input[2]: visible = 0
    // input[3]: visible = 0
    // input[4]: visible = 0
    // input[5]: visible = 0
    //
main_SXReadFortran_1_out_1[cache: 2] = 
    SXReadFortran(
    main_Receiver_20_out_1,
    main_SXReadFortran_1_in_2,
    main_SXReadFortran_1_in_3,
    main_SXReadFortran_1_in_4,
    main_SXReadFortran_1_in_5
    ) [instance: 1, cache: 1];
    // 
    // node SXReadNDF[1]: x = 1264, y = 179, inputs = 2, label = SXReadNDF
    // input[2]: visible = 0
    //
main_SXReadNDF_1_out_1[cache: 2] = 
    SXReadNDF(
    main_Receiver_20_out_1,
    main_SXReadNDF_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Switch[11]: x = 1070, y = 299, inputs = 5, label = Switch
    //
main_Switch_11_out_1[cache: 2] = 
    Switch(
    main_Route_21_out_2,
    main_Import_1_out_1,
    main_Import_2_out_1,
    main_SXReadFortran_1_out_1,
    main_SXReadNDF_1_out_1
    ) [instance: 11, cache: 1];
    // 
    // node Inquire[4]: x = 934, y = 399, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is group"
    //
main_Inquire_4_out_1[cache: 2] = 
    Inquire(
    main_Switch_11_out_1,
    main_Inquire_4_in_2,
    main_Inquire_4_in_3
    ) [instance: 4, cache: 1];
    // 
    // node Compute[4]: x = 936, y = 479, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "2-$0"
    // expression: value = 2-a
    // name[2]: value = a
    //
main_Compute_4_out_1[cache: 2] = 
    Compute(
    main_Compute_4_in_1,
    main_Inquire_4_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Collect[2]: x = 1043, y = 479, inputs = 2, label = Collect
    //
main_Collect_2_out_1[cache: 2] = 
    Collect(
    main_Collect_2_in_1,
    main_Collect_2_in_2
    ) [instance: 2, cache: 1];
    // 
    // node Inquire[5]: x = 1134, y = 399, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "has attribute"
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "name"
    //
main_Inquire_5_out_1[cache: 2] = 
    Inquire(
    main_Switch_11_out_1,
    main_Inquire_5_in_2,
    main_Inquire_5_in_3
    ) [instance: 5, cache: 1];
    // 
    // node Compute[8]: x = 1136, y = 479, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "2-$0"
    // expression: value = 2-a
    // name[2]: value = a
    //
main_Compute_8_out_1[cache: 2] = 
    Compute(
    main_Compute_8_in_1,
    main_Inquire_5_out_1
    ) [instance: 8, cache: 1];
    // 
    // node Attribute[1]: x = 1217, y = 379, inputs = 2, label = Attribute
    //
main_Attribute_1_out_1[cache: 2] = 
    Attribute(
    main_Switch_11_out_1,
    main_Attribute_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Switch[8]: x = 1234, y = 539, inputs = 3, label = Switch
    // input[3]: defaulting = 0, visible = 1, type = 16777248, value = {"data"}
    //
main_Switch_8_out_1[cache: 2] = 
    Switch(
    main_Compute_8_out_1,
    main_Attribute_1_out_1,
    main_Switch_8_in_3
    ) [instance: 8, cache: 1];
    // 
    // node Append[1]: x = 1074, y = 619, inputs = 3, label = Append
    //
main_Append_1_out_1[cache: 2] = 
    Append(
    main_Collect_2_out_1,
    main_Switch_11_out_1,
    main_Switch_8_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Switch[5]: x = 994, y = 679, inputs = 3, label = Switch
    //
main_Switch_5_out_1[cache: 2] = 
    Switch(
    main_Compute_4_out_1,
    main_Switch_11_out_1,
    main_Append_1_out_1
    ) [instance: 5, cache: 1];
    // 
    // node Transmitter[1]: x = 989, y = 779, inputs = 1, label = input_group
    //
input_group = main_Switch_5_out_1;
    // 
    // node Receiver[53]: x = 1749, y = 39, inputs = 1, label = input_group
    //
main_Receiver_53_out_1 = input_group;
    // 
    // node Selector[16]: x = 1778, y = 139, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_16"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Total_density" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 0 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Total_density" "Momentum" "Energy_density" "Jet_density" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 0 1 2 3 }
    // output[1]: visible = 1, type = 29, value = 0 
    // output[2]: visible = 1, type = 32, value = "Total_density" 
    //
main_Selector_16_out_1[cache: 2],
main_Selector_16_out_2[cache: 2] = 
    Selector(
    main_Selector_16_in_1,
    main_Selector_16_in_2,
    main_Selector_16_in_3,
    main_Receiver_53_out_1,
    main_Selector_16_in_5,
    main_Selector_16_in_6,
    main_Selector_16_in_7
    ) [instance: 16, cache: 1];
    // 
    // node Select[8]: x = 1766, y = 219, inputs = 3, label = Select
    //
main_Select_8_out_1 = 
    Select(
    main_Receiver_53_out_1,
    main_Selector_16_out_1,
    main_Select_8_in_3
    ) [instance: 8, cache: 1];
    // 
    // node Extract[7]: x = 1623, y = 299, inputs = 2, label = Extract
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "positions"
    //
main_Extract_7_out_1 = 
    Extract(
    main_Select_8_out_1,
    main_Extract_7_in_2
    ) [instance: 7, cache: 1];
    // 
    // node Inquire[30]: x = 1514, y = 379, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "shape"
    //
main_Inquire_30_out_1 = 
    Inquire(
    main_Extract_7_out_1,
    main_Inquire_30_in_2,
    main_Inquire_30_in_3
    ) [instance: 30, cache: 1];
    // 
    // node Compute[81]: x = 1516, y = 459, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0.x"
    // expression: value = a.x
    // name[2]: value = a
    //
main_Compute_81_out_1 = 
    Compute(
    main_Compute_81_in_1,
    main_Inquire_30_out_1
    ) [instance: 81, cache: 1];
    // 
    // node Compute[82]: x = 1596, y = 459, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[$0,0,0]"
    // expression: value = [a,0,0]
    // name[2]: value = a
    //
main_Compute_82_out_1 = 
    Compute(
    main_Compute_82_in_1,
    main_Extract_7_out_1
    ) [instance: 82, cache: 1];
    // 
    // node Compute[83]: x = 1676, y = 459, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[$0.x,$0.y,0]"
    // expression: value = [a.x,a.y,0]
    // name[2]: value = a
    //
main_Compute_83_out_1 = 
    Compute(
    main_Compute_83_in_1,
    main_Extract_7_out_1
    ) [instance: 83, cache: 1];
    // 
    // node Switch[55]: x = 1642, y = 599, inputs = 4, label = Switch
    //
main_Switch_55_out_1 = 
    Switch(
    main_Compute_81_out_1,
    main_Compute_82_out_1,
    main_Compute_83_out_1,
    main_Extract_7_out_1
    ) [instance: 55, cache: 1];
    // 
    // node Transmitter[37]: x = 1668, y = 719, inputs = 1, label = posns
    //
posns = main_Switch_55_out_1;
    // 
    // node Receiver[63]: x = 3468, y = 19, inputs = 1, label = posns
    //
main_Receiver_63_out_1 = posns;
    // 
    // node Receiver[86]: x = 7209, y = 399, inputs = 1, label = input_group
    //
main_Receiver_86_out_1 = input_group;
    // 
    // node Switch[56]: x = 1524, y = 599, inputs = 4, label = Switch
    // input[2]: defaulting = 0, visible = 0, type = 16777248, value = {"front"}
    // input[3]: defaulting = 0, visible = 0, type = 16777248, value = {"front"}
    // input[4]: defaulting = 0, visible = 0, type = 16777248, value = {"off diagonal"}
    //
main_Switch_56_out_1 = 
    Switch(
    main_Compute_81_out_1,
    main_Switch_56_in_2,
    main_Switch_56_in_3,
    main_Switch_56_in_4
    ) [instance: 56, cache: 1];
    // 
    // node Transmitter[50]: x = 1528, y = 719, inputs = 1, label = defdir
    //
defdir = main_Switch_56_out_1;
    // 
    // node Receiver[108]: x = 7328, y = 399, inputs = 1, label = defdir
    //
main_Receiver_108_out_1 = defdir;
    // 
    // node AutoCamera[4]: x = 7244, y = 479, inputs = 9, label = AutoCamera
    // input[2]: defaulting = 1, visible = 1, type = 32, value = "off-diagonal"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 350
    //
main_AutoCamera_4_out_1 = 
    AutoCamera(
    main_Receiver_86_out_1,
    main_Receiver_108_out_1,
    main_AutoCamera_4_in_3,
    main_AutoCamera_4_in_4,
    main_AutoCamera_4_in_5,
    main_AutoCamera_4_in_6,
    main_AutoCamera_4_in_7,
    main_AutoCamera_4_in_8,
    main_AutoCamera_4_in_9
    ) [instance: 4, cache: 1];
    // 
    // node Get[14]: x = 7266, y = 559, inputs = 3, label = Get
    //
main_Get_14_out_1,
main_Get_14_out_2 = 
    Get(
    main_AutoCamera_4_out_1,
    main_Get_14_in_2,
    main_Get_14_in_3
    ) [instance: 14, cache: 1];
    // 
    // node Transmitter[14]: x = 7264, y = 859, inputs = 1, label = camera
    //
camera = main_Get_14_out_1;
    // 
    // node Receiver[62]: x = 3544, y = 19, inputs = 1, label = camera
    //
main_Receiver_62_out_1 = camera;
    // 
    // node SXVisible[1]: x = 3494, y = 119, inputs = 3, label = SXVisible
    //
main_SXVisible_1_out_1,
main_SXVisible_1_out_2 = 
    SXVisible(
    main_SXVisible_1_in_1,
    main_Receiver_63_out_1,
    main_Receiver_62_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[43]: x = 3507, y = 219, inputs = 1, label = visible
    //
visible = main_SXVisible_1_out_2;
    // 
    // node Receiver[76]: x = 4047, y = 19, inputs = 1, label = visible
    //
main_Receiver_76_out_1 = visible;
    // 
    // node String[4]: x = 4106, y = 19, inputs = 0, label = String
    // output[1]: visible = 1, type = 32, value = "1"
    //
    // 
    // node Extract[4]: x = 1763, y = 299, inputs = 2, label = Extract
    // input[2]: defaulting = 1, visible = 0, type = 32, value = NULL
    //
main_Extract_4_out_1 = 
    Extract(
    main_Select_8_out_1,
    main_Extract_4_in_2
    ) [instance: 4, cache: 1];
    // 
    // node Transmitter[33]: x = 1778, y = 719, inputs = 1, label = a
    //
a = main_Extract_4_out_1;
    // 
    // node Receiver[56]: x = 4158, y = 19, inputs = 1, label = a
    //
main_Receiver_56_out_1 = a;
    // 
    // node Selector[17]: x = 1938, y = 139, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_17"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Total_density" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 0 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Total_density" "Momentum" "Energy_density" "Jet_density" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 0 1 2 3 }
    // output[1]: visible = 1, type = 29, value = 0 
    // output[2]: visible = 1, type = 32, value = "Total_density" 
    //
main_Selector_17_out_1[cache: 2],
main_Selector_17_out_2[cache: 2] = 
    Selector(
    main_Selector_17_in_1,
    main_Selector_17_in_2,
    main_Selector_17_in_3,
    main_Receiver_53_out_1,
    main_Selector_17_in_5,
    main_Selector_17_in_6,
    main_Selector_17_in_7
    ) [instance: 17, cache: 1];
    // 
    // node Select[9]: x = 1886, y = 219, inputs = 3, label = Select
    //
main_Select_9_out_1 = 
    Select(
    main_Receiver_53_out_1,
    main_Selector_17_out_1,
    main_Select_9_in_3
    ) [instance: 9, cache: 1];
    // 
    // node Extract[5]: x = 1883, y = 299, inputs = 2, label = Extract
    // input[2]: defaulting = 1, visible = 0, type = 32, value = NULL
    //
main_Extract_5_out_1 = 
    Extract(
    main_Select_9_out_1,
    main_Extract_5_in_2
    ) [instance: 5, cache: 1];
    // 
    // node Transmitter[35]: x = 1898, y = 719, inputs = 1, label = b
    //
b = main_Extract_5_out_1;
    // 
    // node Receiver[57]: x = 4198, y = 19, inputs = 1, label = b
    //
main_Receiver_57_out_1 = b;
    // 
    // node Selector[18]: x = 2078, y = 139, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_18"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Total_density" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 0 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Total_density" "Momentum" "Energy_density" "Jet_density" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 0 1 2 3 }
    // output[1]: visible = 1, type = 29, value = 0 
    // output[2]: visible = 1, type = 32, value = "Total_density" 
    //
main_Selector_18_out_1[cache: 2],
main_Selector_18_out_2[cache: 2] = 
    Selector(
    main_Selector_18_in_1,
    main_Selector_18_in_2,
    main_Selector_18_in_3,
    main_Receiver_53_out_1,
    main_Selector_18_in_5,
    main_Selector_18_in_6,
    main_Selector_18_in_7
    ) [instance: 18, cache: 1];
    // 
    // node Select[10]: x = 2026, y = 219, inputs = 3, label = Select
    //
main_Select_10_out_1 = 
    Select(
    main_Receiver_53_out_1,
    main_Selector_18_out_1,
    main_Select_10_in_3
    ) [instance: 10, cache: 1];
    // 
    // node Extract[6]: x = 2023, y = 299, inputs = 2, label = Extract
    // input[2]: defaulting = 1, visible = 0, type = 32, value = NULL
    //
main_Extract_6_out_1 = 
    Extract(
    main_Select_10_out_1,
    main_Extract_6_in_2
    ) [instance: 6, cache: 1];
    // 
    // node Transmitter[36]: x = 2038, y = 719, inputs = 1, label = c
    //
c = main_Extract_6_out_1;
    // 
    // node Receiver[59]: x = 4238, y = 19, inputs = 1, label = c
    //
main_Receiver_59_out_1 = c;
    // 
    // node Receiver[60]: x = 4268, y = 19, inputs = 1, label = posns
    //
main_Receiver_60_out_1 = posns;
    // 
    // node SXEnum[1]: x = 1434, y = 299, inputs = 3, label = SXEnum
    //
main_SXEnum_1_out_1 = 
    SXEnum(
    main_Select_8_out_1,
    main_SXEnum_1_in_2,
    main_SXEnum_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Extract[8]: x = 1443, y = 399, inputs = 2, label = Extract
    // input[2]: visible = 0
    //
main_Extract_8_out_1 = 
    Extract(
    main_SXEnum_1_out_1,
    main_Extract_8_in_2
    ) [instance: 8, cache: 1];
    // 
    // node Transmitter[38]: x = 1446, y = 719, inputs = 1, label = enums
    //
enums = main_Extract_8_out_1;
    // 
    // node Receiver[58]: x = 4326, y = 19, inputs = 1, label = enums
    //
main_Receiver_58_out_1 = enums;
    // 
    // node Transmitter[40]: x = 37, y = 599, inputs = 1, label = frame_no
    //
frame_no = main_Sequencer_2_out_1;
    // 
    // node Receiver[66]: x = 4377, y = 19, inputs = 1, label = frame_no
    //
main_Receiver_66_out_1 = frame_no;
    // 
    // node Receiver[94]: x = 4444, y = 19, inputs = 1, label = camera
    //
main_Receiver_94_out_1 = camera;
    // 
    // node Inquire[25]: x = 4434, y = 99, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "camera from"
    //
main_Inquire_25_out_1 = 
    Inquire(
    main_Receiver_94_out_1,
    main_Inquire_25_in_2,
    main_Inquire_25_in_3
    ) [instance: 25, cache: 1];
    // 
    // node Compute2[2]: x = 4194, y = 199, inputs = 15, label = Compute2
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "a"
    // input[4]: defaulting = 0, visible = 0, type = 32, value = "b"
    // input[6]: defaulting = 0, visible = 0, type = 32, value = "c"
    // input[8]: defaulting = 0, visible = 0, type = 32, value = "p"
    // input[10]: defaulting = 0, visible = 0, type = 32, value = "e"
    // input[12]: defaulting = 0, visible = 0, type = 32, value = "f"
    // input[14]: defaulting = 0, visible = 0, type = 32, value = "v"
    //
main_Compute2_2_out_1 = 
    Compute2(
    main_String_4_out_1,
    main_Compute2_2_in_2,
    main_Receiver_56_out_1,
    main_Compute2_2_in_4,
    main_Receiver_57_out_1,
    main_Compute2_2_in_6,
    main_Receiver_59_out_1,
    main_Compute2_2_in_8,
    main_Receiver_60_out_1,
    main_Compute2_2_in_10,
    main_Receiver_58_out_1,
    main_Compute2_2_in_12,
    main_Receiver_66_out_1,
    main_Compute2_2_in_14,
    main_Inquire_25_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Compute[52]: x = 4236, y = 299, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "byte( $0 <= 0 )"
    // expression: value = byte( a <= 0 )
    // name[2]: value = a
    //
main_Compute_52_out_1 = 
    Compute(
    main_Compute_52_in_1,
    main_Compute2_2_out_1
    ) [instance: 52, cache: 1];
    // 
    // node Compute[61]: x = 4176, y = 379, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "byte(  (!$0) || $1 )"
    // expression: value = byte(  (!a) || b )
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_61_out_1 = 
    Compute(
    main_Compute_61_in_1,
    main_Receiver_76_out_1,
    main_Compute_52_out_1
    ) [instance: 61, cache: 1];
    // 
    // node Switch[35]: x = 4194, y = 479, inputs = 3, label = Switch
    //
main_Switch_35_out_1 = 
    Switch(
    main_Toggle_13_out_1,
    main_Compute_61_out_1,
    main_Compute_52_out_1
    ) [instance: 35, cache: 1];
    // 
    // node Options[1]: x = 4214, y = 579, inputs = 3, label = Options
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "dep"
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "positions"
    //
main_Options_1_out_1 = 
    Options(
    main_Switch_35_out_1,
    main_Options_1_in_2,
    main_Options_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Get[7]: x = 4326, y = 639, inputs = 3, label = Get
    //
main_Get_7_out_1,
main_Get_7_out_2 = 
    Get(
    main_Get_7_in_1,
    main_Get_7_in_2,
    main_Get_7_in_3
    ) [instance: 7, cache: 1];
    // 
    // node Switch[36]: x = 4214, y = 719, inputs = 3, label = Switch
    //
main_Switch_36_out_1 = 
    Switch(
    main_Toggle_14_out_1,
    main_Options_1_out_1,
    main_Get_7_out_1
    ) [instance: 36, cache: 1];
    // 
    // node Statistics[2]: x = 4090, y = 799, inputs = 1, label = Statistics
    //
main_Statistics_2_out_1,
main_Statistics_2_out_2,
main_Statistics_2_out_3,
main_Statistics_2_out_4,
main_Statistics_2_out_5 = 
    Statistics(
    main_Switch_36_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Compute[62]: x = 4136, y = 879, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "( $0 == 1 ) + 1"
    // expression: value = ( a == 1 ) + 1
    // name[2]: value = a
    //
main_Compute_62_out_1 = 
    Compute(
    main_Compute_62_in_1,
    main_Statistics_2_out_4
    ) [instance: 62, cache: 1];
    // 
    // node Route[23]: x = 4226, y = 979, inputs = 2, outputs = 2, label = Route
    //
main_Route_23_out_1,
main_Route_23_out_2 = 
    Route(
    main_Compute_62_out_1,
    main_Switch_36_out_1
    ) [instance: 23, cache: 1];
    // 
    // node Transmitter[39]: x = 4175, y = 1159, inputs = 1, label = inv_posns
    //
inv_posns = main_Route_23_out_1;
    // 
    // node Receiver[104]: x = 4595, y = 19, inputs = 1, label = inv_posns
    //
main_Receiver_104_out_1 = inv_posns;
    // 
    // node Statistics[7]: x = 4550, y = 99, inputs = 1, label = Statistics
    //
main_Statistics_7_out_1,
main_Statistics_7_out_2,
main_Statistics_7_out_3,
main_Statistics_7_out_4,
main_Statistics_7_out_5 = 
    Statistics(
    main_Receiver_104_out_1
    ) [instance: 7, cache: 1];
    // 
    // node Inquire[29]: x = 4683, y = 99, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "items"
    // input[3]: visible = 0
    //
main_Inquire_29_out_1 = 
    Inquire(
    main_Receiver_104_out_1,
    main_Inquire_29_in_2,
    main_Inquire_29_in_3
    ) [instance: 29, cache: 1];
    // 
    // node Compute[80]: x = 4656, y = 199, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "int($1 - $1*$0)"
    // expression: value = int(b - b*a)
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_80_out_1 = 
    Compute(
    main_Compute_80_in_1,
    main_Statistics_7_out_1,
    main_Inquire_29_out_1
    ) [instance: 80, cache: 1];
    // 
    // node Route[29]: x = 4606, y = 299, inputs = 2, outputs = 2, label = Route
    //
main_Route_29_out_1,
main_Route_29_out_2 = 
    Route(
    main_Reset_5_out_1,
    main_Compute_80_out_1
    ) [instance: 29, cache: 1];
    // 
    // node Format[22]: x = 4603, y = 379, inputs = 2, label = Format
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "%d particle(s) will be displayed"
    //
main_Format_22_out_1 = 
    Format(
    main_Format_22_in_1,
    main_Route_29_out_1
    ) [instance: 22, cache: 1];
    // 
    // node Message[12]: x = 4596, y = 459, inputs = 3, label = Message
    // input[2]: visible = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 1
    //
    Message(
    main_Format_22_out_1,
    main_Message_12_in_2,
    main_Message_12_in_3
    ) [instance: 12, cache: 1];
    // 
    // node Reset[3]: x = 2827, y = 19, inputs = 6, label = Reset
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "main_Reset_3_out_1"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 0
    // toggle : 0
    //
    // 
    // node Toggle[19]: x = 2204, y = 659, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_19"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 1
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 1, type = 29, value = 2
    // input[5]: defaulting = 1, visible = 1, type = 29, value = 1
    // output[1]: visible = 1, type = 29, value = 1
    // toggle : 0
    //
    // 
    // node Toggle[20]: x = 2204, y = 399, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_20"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 2
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 1, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 1, type = 29, value = 2
    // output[1]: visible = 1, type = 29, value = 2
    // toggle : 0
    //
    // 
    // node Scalar[19]: x = 2205, y = 259, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_19"
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 1.0 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = -1000000.0
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1000000.0
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 5
    // output[1]: visible = 1, type = 5, value = 1.0 
    //
    // 
    // node Receiver[95]: x = 2327, y = 259, inputs = 1, label = visible
    //
main_Receiver_95_out_1 = visible;
    // 
    // node String[6]: x = 2206, y = 19, inputs = 0, label = String
    // output[1]: visible = 1, type = 32, value = "1"
    //
    // 
    // node Receiver[87]: x = 2278, y = 19, inputs = 1, label = a
    //
main_Receiver_87_out_1 = a;
    // 
    // node Receiver[88]: x = 2318, y = 19, inputs = 1, label = b
    //
main_Receiver_88_out_1 = b;
    // 
    // node Receiver[89]: x = 2358, y = 19, inputs = 1, label = c
    //
main_Receiver_89_out_1 = c;
    // 
    // node Receiver[90]: x = 2408, y = 19, inputs = 1, label = posns
    //
main_Receiver_90_out_1 = posns;
    // 
    // node Receiver[91]: x = 2490, y = 19, inputs = 1, label = enum
    //
main_Receiver_91_out_1 = enum;
    // 
    // node Receiver[92]: x = 2557, y = 19, inputs = 1, label = frame_no
    //
main_Receiver_92_out_1 = frame_no;
    // 
    // node Receiver[93]: x = 2664, y = 19, inputs = 1, label = camera
    //
main_Receiver_93_out_1 = camera;
    // 
    // node Inquire[24]: x = 2654, y = 99, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "camera from"
    //
main_Inquire_24_out_1 = 
    Inquire(
    main_Receiver_93_out_1,
    main_Inquire_24_in_2,
    main_Inquire_24_in_3
    ) [instance: 24, cache: 1];
    // 
    // node Compute2[5]: x = 2334, y = 179, inputs = 15, label = Compute2
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "a"
    // input[4]: defaulting = 0, visible = 0, type = 32, value = "b"
    // input[6]: defaulting = 0, visible = 0, type = 32, value = "c"
    // input[8]: defaulting = 0, visible = 0, type = 32, value = "p"
    // input[10]: defaulting = 0, visible = 0, type = 32, value = "e"
    // input[12]: defaulting = 0, visible = 0, type = 32, value = "f"
    // input[14]: defaulting = 0, visible = 0, type = 32, value = "v"
    //
main_Compute2_5_out_1 = 
    Compute2(
    main_String_6_out_1,
    main_Compute2_5_in_2,
    main_Receiver_87_out_1,
    main_Compute2_5_in_4,
    main_Receiver_88_out_1,
    main_Compute2_5_in_6,
    main_Receiver_89_out_1,
    main_Compute2_5_in_8,
    main_Receiver_90_out_1,
    main_Compute2_5_in_10,
    main_Receiver_91_out_1,
    main_Compute2_5_in_12,
    main_Receiver_92_out_1,
    main_Compute2_5_in_14,
    main_Inquire_24_out_1
    ) [instance: 5, cache: 1];
    // 
    // node Compute[72]: x = 2314, y = 359, inputs = 4, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$1?$0:$2"
    // expression: value = b?a:c
    // name[2]: value = a
    // name[3]: value = b
    // name[4]: value = c
    //
main_Compute_72_out_1 = 
    Compute(
    main_Compute_72_in_1,
    main_Scalar_19_out_1,
    main_Receiver_95_out_1,
    main_Compute2_5_out_1
    ) [instance: 72, cache: 1];
    // 
    // node Switch[45]: x = 2394, y = 479, inputs = 3, label = Switch
    //
main_Switch_45_out_1 = 
    Switch(
    main_Toggle_20_out_1,
    main_Compute_72_out_1,
    main_Compute2_5_out_1
    ) [instance: 45, cache: 1];
    // 
    // node Compute[93]: x = 2396, y = 559, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "float($0)"
    // expression: value = float(a)
    // name[2]: value = a
    //
main_Compute_93_out_1 = 
    Compute(
    main_Compute_93_in_1,
    main_Switch_45_out_1
    ) [instance: 93, cache: 1];
    // 
    // node Options[4]: x = 2394, y = 659, inputs = 3, label = Options
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "dep"
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "positions"
    //
main_Options_4_out_1 = 
    Options(
    main_Compute_93_out_1,
    main_Options_4_in_2,
    main_Options_4_in_3
    ) [instance: 4, cache: 1];
    // 
    // node Get[16]: x = 2486, y = 679, inputs = 3, label = Get
    // input[1]: defaulting = 1, visible = 1, type = 67108863, value = NULL
    // input[2]: defaulting = 1, visible = 1, type = 3, value = NULL
    //
main_Get_16_out_1,
main_Get_16_out_2 = 
    Get(
    main_Get_16_in_1,
    main_Get_16_in_2,
    main_Get_16_in_3
    ) [instance: 16, cache: 1];
    // 
    // node Switch[46]: x = 2394, y = 759, inputs = 3, label = Switch
    //
main_Switch_46_out_1 = 
    Switch(
    main_Toggle_19_out_1,
    main_Options_4_out_1,
    main_Get_16_out_1
    ) [instance: 46, cache: 1];
    // 
    // node Transmitter[46]: x = 2392, y = 899, inputs = 1, label = glyph_data
    //
glyph_data = main_Switch_46_out_1;
    // 
    // node Receiver[105]: x = 2912, y = 19, inputs = 1, label = glyph_data
    //
main_Receiver_105_out_1 = glyph_data;
    // 
    // node Route[25]: x = 2906, y = 139, inputs = 2, outputs = 2, label = Route
    //
main_Route_25_out_1,
main_Route_25_out_2 = 
    Route(
    main_Reset_3_out_1,
    main_Receiver_105_out_1
    ) [instance: 25, cache: 1];
    // 
    // node Inquire[31]: x = 2803, y = 239, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "is vector"
    // input[3]: visible = 0
    //
main_Inquire_31_out_1 = 
    Inquire(
    main_Route_25_out_1,
    main_Inquire_31_in_2,
    main_Inquire_31_in_3
    ) [instance: 31, cache: 1];
    // 
    // node Compute[84]: x = 2796, y = 319, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0+1"
    // expression: value = a+1
    // name[2]: value = a
    //
main_Compute_84_out_1 = 
    Compute(
    main_Compute_84_in_1,
    main_Inquire_31_out_1
    ) [instance: 84, cache: 1];
    // 
    // node Compute[85]: x = 2976, y = 239, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "mag($0)"
    // expression: value = mag(a)
    // name[2]: value = a
    //
main_Compute_85_out_1 = 
    Compute(
    main_Compute_85_in_1,
    main_Route_25_out_1
    ) [instance: 85, cache: 1];
    // 
    // node Switch[58]: x = 2894, y = 419, inputs = 3, label = Switch
    //
main_Switch_58_out_1 = 
    Switch(
    main_Compute_84_out_1,
    main_Route_25_out_1,
    main_Compute_85_out_1
    ) [instance: 58, cache: 1];
    // 
    // node Statistics[5]: x = 2810, y = 559, inputs = 1, label = Statistics
    //
main_Statistics_5_out_1,
main_Statistics_5_out_2,
main_Statistics_5_out_3,
main_Statistics_5_out_4,
main_Statistics_5_out_5 = 
    Statistics(
    main_Switch_58_out_1
    ) [instance: 5, cache: 1];
    // 
    // node Histogram[3]: x = 2952, y = 559, inputs = 5, label = Histogram
    //
main_Histogram_3_out_1,
main_Histogram_3_out_2 = 
    Histogram(
    main_Switch_58_out_1,
    main_Histogram_3_in_2,
    main_Histogram_3_in_3,
    main_Histogram_3_in_4,
    main_Histogram_3_in_5
    ) [instance: 3, cache: 1];
    // 
    // node Format[21]: x = 2858, y = 679, inputs = 6, label = Format
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "mean: %f  sigma: %f  min: %f  max: %f  median: %f"
    //
main_Format_21_out_1 = 
    Format(
    main_Format_21_in_1,
    main_Statistics_5_out_1,
    main_Statistics_5_out_2,
    main_Statistics_5_out_4,
    main_Statistics_5_out_5,
    main_Histogram_3_out_2
    ) [instance: 21, cache: 1];
    // 
    // node Message[11]: x = 2896, y = 759, inputs = 3, label = Message
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "message"
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 1
    //
    Message(
    main_Format_21_out_1,
    main_Message_11_in_2,
    main_Message_11_in_3
    ) [instance: 11, cache: 1];
    // 
    // node Reset[4]: x = 5687, y = 19, inputs = 6, label = Reset
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "main_Reset_4_out_1"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 0
    // toggle : 0
    //
    // 
    // node Toggle[17]: x = 5124, y = 919, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_17"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 1
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 1, type = 29, value = 2
    // input[5]: defaulting = 1, visible = 1, type = 29, value = 1
    // output[1]: visible = 1, type = 29, value = 1
    // toggle : 0
    //
    // 
    // node Receiver[101]: x = 5088, y = 779, inputs = 1, label = posns
    //
main_Receiver_101_out_1 = posns;
    // 
    // node Toggle[16]: x = 5004, y = 379, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_16"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 2
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 1, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 1, type = 29, value = 2
    // output[1]: visible = 1, type = 29, value = 2
    // toggle : 0
    //
    // 
    // node Scalar[18]: x = 5005, y = 239, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_18"
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 1.0 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = -1000000.0
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1000000.0
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 5
    // output[1]: visible = 1, type = 5, value = 1.0 
    //
    // 
    // node Receiver[85]: x = 5107, y = 199, inputs = 1, label = visible
    //
main_Receiver_85_out_1 = visible;
    // 
    // node String[5]: x = 5046, y = 19, inputs = 0, label = String
    // output[1]: visible = 1, type = 32, value = "1.0/mag(p-v)**2"
    //
    // 
    // node Receiver[79]: x = 5118, y = 19, inputs = 1, label = a
    //
main_Receiver_79_out_1 = a;
    // 
    // node Receiver[80]: x = 5178, y = 19, inputs = 1, label = b
    //
main_Receiver_80_out_1 = b;
    // 
    // node Receiver[81]: x = 5238, y = 19, inputs = 1, label = c
    //
main_Receiver_81_out_1 = c;
    // 
    // node Receiver[82]: x = 5288, y = 19, inputs = 1, label = posns
    //
main_Receiver_82_out_1 = posns;
    // 
    // node Receiver[83]: x = 5366, y = 19, inputs = 1, label = enums
    //
main_Receiver_83_out_1 = enums;
    // 
    // node Receiver[84]: x = 5437, y = 19, inputs = 1, label = frame_no
    //
main_Receiver_84_out_1 = frame_no;
    // 
    // node Receiver[78]: x = 5524, y = 19, inputs = 1, label = camera
    //
main_Receiver_78_out_1 = camera;
    // 
    // node Inquire[23]: x = 5514, y = 99, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "camera from"
    //
main_Inquire_23_out_1 = 
    Inquire(
    main_Receiver_78_out_1,
    main_Inquire_23_in_2,
    main_Inquire_23_in_3
    ) [instance: 23, cache: 1];
    // 
    // node Compute2[4]: x = 5174, y = 179, inputs = 15, label = Compute2
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "a"
    // input[4]: defaulting = 0, visible = 0, type = 32, value = "b"
    // input[6]: defaulting = 0, visible = 0, type = 32, value = "c"
    // input[8]: defaulting = 0, visible = 0, type = 32, value = "p"
    // input[10]: defaulting = 0, visible = 0, type = 32, value = "e"
    // input[12]: defaulting = 0, visible = 0, type = 32, value = "f"
    // input[14]: defaulting = 0, visible = 0, type = 32, value = "v"
    //
main_Compute2_4_out_1 = 
    Compute2(
    main_String_5_out_1,
    main_Compute2_4_in_2,
    main_Receiver_79_out_1,
    main_Compute2_4_in_4,
    main_Receiver_80_out_1,
    main_Compute2_4_in_6,
    main_Receiver_81_out_1,
    main_Compute2_4_in_8,
    main_Receiver_82_out_1,
    main_Compute2_4_in_10,
    main_Receiver_83_out_1,
    main_Compute2_4_in_12,
    main_Receiver_84_out_1,
    main_Compute2_4_in_14,
    main_Inquire_23_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Compute[71]: x = 5194, y = 339, inputs = 4, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$1?$0:$2"
    // expression: value = b?a:c
    // name[2]: value = a
    // name[3]: value = b
    // name[4]: value = c
    //
main_Compute_71_out_1 = 
    Compute(
    main_Compute_71_in_1,
    main_Scalar_18_out_1,
    main_Receiver_85_out_1,
    main_Compute2_4_out_1
    ) [instance: 71, cache: 1];
    // 
    // node Switch[42]: x = 5234, y = 459, inputs = 3, label = Switch
    //
main_Switch_42_out_1 = 
    Switch(
    main_Toggle_16_out_1,
    main_Compute_71_out_1,
    main_Compute2_4_out_1
    ) [instance: 42, cache: 1];
    // 
    // node Inquire[26]: x = 5143, y = 539, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is vector"
    // input[3]: visible = 0
    //
main_Inquire_26_out_1 = 
    Inquire(
    main_Switch_42_out_1,
    main_Inquire_26_in_2,
    main_Inquire_26_in_3
    ) [instance: 26, cache: 1];
    // 
    // node Compute[77]: x = 5136, y = 619, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0+1"
    // expression: value = a+1
    // name[2]: value = a
    //
main_Compute_77_out_1 = 
    Compute(
    main_Compute_77_in_1,
    main_Inquire_26_out_1
    ) [instance: 77, cache: 1];
    // 
    // node Compute[78]: x = 5316, y = 539, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "mag($0)"
    // expression: value = mag(a)
    // name[2]: value = a
    //
main_Compute_78_out_1 = 
    Compute(
    main_Compute_78_in_1,
    main_Switch_42_out_1
    ) [instance: 78, cache: 1];
    // 
    // node Switch[52]: x = 5214, y = 699, inputs = 3, label = Switch
    //
main_Switch_52_out_1 = 
    Switch(
    main_Compute_77_out_1,
    main_Switch_42_out_1,
    main_Compute_78_out_1
    ) [instance: 52, cache: 1];
    // 
    // node Options[2]: x = 5234, y = 779, inputs = 3, label = Options
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "dep"
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "positions"
    //
main_Options_2_out_1 = 
    Options(
    main_Switch_52_out_1,
    main_Options_2_in_2,
    main_Options_2_in_3
    ) [instance: 2, cache: 1];
    // 
    // node Construct[3]: x = 5222, y = 879, inputs = 4, label = Construct
    //
main_Construct_3_out_1 = 
    Construct(
    main_Receiver_101_out_1,
    main_Construct_3_in_2,
    main_Construct_3_in_3,
    main_Options_2_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Get[13]: x = 5346, y = 899, inputs = 3, label = Get
    // input[1]: defaulting = 1, visible = 1, type = 67108863, value = NULL
    // input[2]: defaulting = 1, visible = 1, type = 3, value = NULL
    //
main_Get_13_out_1,
main_Get_13_out_2 = 
    Get(
    main_Get_13_in_1,
    main_Get_13_in_2,
    main_Get_13_in_3
    ) [instance: 13, cache: 1];
    // 
    // node Switch[43]: x = 5234, y = 999, inputs = 3, label = Switch
    //
main_Switch_43_out_1 = 
    Switch(
    main_Toggle_17_out_1,
    main_Construct_3_out_1,
    main_Get_13_out_1
    ) [instance: 43, cache: 1];
    // 
    // node Transmitter[49]: x = 5204, y = 1119, inputs = 1, label = coldata
    //
coldata = main_Switch_43_out_1;
    // 
    // node Receiver[106]: x = 5764, y = 19, inputs = 1, label = coldata
    //
main_Receiver_106_out_1 = coldata;
    // 
    // node Route[26]: x = 5726, y = 119, inputs = 2, outputs = 2, label = Route
    //
main_Route_26_out_1,
main_Route_26_out_2 = 
    Route(
    main_Reset_4_out_1,
    main_Receiver_106_out_1
    ) [instance: 26, cache: 1];
    // 
    // node Statistics[4]: x = 5630, y = 199, inputs = 1, label = Statistics
    //
main_Statistics_4_out_1,
main_Statistics_4_out_2,
main_Statistics_4_out_3,
main_Statistics_4_out_4,
main_Statistics_4_out_5 = 
    Statistics(
    main_Route_26_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Histogram[2]: x = 5792, y = 199, inputs = 5, label = Histogram
    //
main_Histogram_2_out_1,
main_Histogram_2_out_2 = 
    Histogram(
    main_Route_26_out_1,
    main_Histogram_2_in_2,
    main_Histogram_2_in_3,
    main_Histogram_2_in_4,
    main_Histogram_2_in_5
    ) [instance: 2, cache: 1];
    // 
    // node Format[20]: x = 5678, y = 319, inputs = 6, label = Format
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "mean: %f  sigma: %f  min: %f  max: %f  median: %f"
    //
main_Format_20_out_1 = 
    Format(
    main_Format_20_in_1,
    main_Statistics_4_out_1,
    main_Statistics_4_out_2,
    main_Statistics_4_out_4,
    main_Statistics_4_out_5,
    main_Histogram_2_out_2
    ) [instance: 20, cache: 1];
    // 
    // node Message[10]: x = 5716, y = 399, inputs = 3, label = Message
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "message"
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 1
    //
    Message(
    main_Format_20_out_1,
    main_Message_10_in_2,
    main_Message_10_in_3
    ) [instance: 10, cache: 1];
    // 
    // node Set[16]: x = 2526, y = 839, inputs = 3, label = Set
    //
    Set(
    main_Switch_46_out_1,
    main_Get_16_out_2,
    main_Set_16_in_3
    ) [instance: 16, cache: 1];
    // 
    // node Selector[19]: x = 6698, y = 99, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_19"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Auto" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 0 
    // input[4]: defaulting = 1, visible = 0, type = 16777248, value = { "Auto-rotate" "Auto" "Manual" "Freeze" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 2 0 1 3 }
    // output[1]: visible = 1, type = 29, value = 0 
    // output[2]: visible = 1, type = 32, value = "Auto" 
    //
    // 
    // node Compute[69]: x = 6596, y = 179, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "($0>1)+1"
    // expression: value = (a>1)+1
    // name[2]: value = a
    //
main_Compute_69_out_1 = 
    Compute(
    main_Compute_69_in_1,
    main_Selector_19_out_1
    ) [instance: 69, cache: 1];
    // 
    // node Transmitter[16]: x = 158, y = 599, inputs = 1, label = kill
    //
kill = main_Compute_10_out_1;
    // 
    // node Receiver[103]: x = 6058, y = 1299, inputs = 1, label = kill
    //
main_Receiver_103_out_1 = kill;
    // 
    // node Toggle[22]: x = 5784, y = 959, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_22"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 0
    // toggle : 0
    //
    // 
    // node Receiver[109]: x = 5843, y = 959, inputs = 1, label = filespec
    //
main_Receiver_109_out_1 = filespec;
    // 
    // node Switch[57]: x = 5824, y = 1039, inputs = 2, label = Switch
    //
main_Switch_57_out_1 = 
    Switch(
    main_Toggle_22_out_1,
    main_Receiver_109_out_1
    ) [instance: 57, cache: 1];
    // 
    // node List[1]: x = 5835, y = 1119, inputs = 2, label = List
    // input[2]: defaulting = 0, visible = 0, type = 16777248, value = {" "}
    //
main_List_1_out_1 = 
    List(
    main_Switch_57_out_1,
    main_List_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Caption[1]: x = 5820, y = 1199, inputs = 9, label = Caption
    // input[2]: defaulting = 0, visible = 0, type = 8, value = [0.02,0.98]
    // input[6]: defaulting = 0, visible = 0, type = 1, value = 11
    //
main_Caption_1_out_1 = 
    Caption(
    main_List_1_out_1,
    main_Caption_1_in_2,
    main_Caption_1_in_3,
    main_Caption_1_in_4,
    main_Caption_1_in_5,
    main_Caption_1_in_6,
    main_Caption_1_in_7,
    main_Caption_1_in_8,
    main_Caption_1_in_9
    ) [instance: 1, cache: 1];
    // 
    // node Receiver[75]: x = 6038, y = 839, inputs = 1, label = kill
    //
main_Receiver_75_out_1 = kill;
    // 
    // node Selector[20]: x = 5898, y = 519, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_20"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Current" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 1 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Freeze" "None" "Current" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 3 2 1 }
    // output[1]: visible = 1, type = 29, value = 1 
    // output[2]: visible = 1, type = 32, value = "Current" 
    //
    // 
    // node Selector[21]: x = 5898, y = 359, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_21"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Points" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 2 
    // input[4]: defaulting = 1, visible = 0, type = 16777248, value = { "Glyphs" "Points" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 2 }
    // output[1]: visible = 1, type = 29, value = 2 
    // output[2]: visible = 1, type = 32, value = "Points" 
    //
    // 
    // node Selector[23]: x = 4898, y = 1539, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_23"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Grey scale" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 2 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Colour" "Grey scale" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 2 }
    // output[1]: visible = 1, type = 29, value = 2 
    // output[2]: visible = 1, type = 32, value = "Grey scale" 
    //
    // 
    // node Selector[22]: x = 5438, y = 1219, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_22"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "User-supplied" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 1 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "User-supplied" "Default" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 2 }
    // output[1]: visible = 1, type = 29, value = 1 
    // output[2]: visible = 1, type = 32, value = "User-supplied" 
    //
    // 
    // node Scalar[22]: x = 5285, y = 1219, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_22"
    // input[2]: visible = 0
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 0.0 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = -1e+08
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1e+08
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 1
    // output[1]: visible = 1, type = 5, value = 0.0 
    //
    // 
    // node Scalar[23]: x = 5345, y = 1219, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_23"
    // input[2]: visible = 0
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 1.0 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = -1e+08
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1e+08
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 1
    // output[1]: visible = 1, type = 5, value = 1.0 
    //
    // 
    // node Compute[75]: x = 5236, y = 1319, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "min($0,$1)"
    // expression: value = min(a,b)
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_75_out_1 = 
    Compute(
    main_Compute_75_in_1,
    main_Scalar_22_out_1,
    main_Scalar_23_out_1
    ) [instance: 75, cache: 1];
    // 
    // node Statistics[6]: x = 5030, y = 1319, inputs = 1, label = Statistics
    //
main_Statistics_6_out_1,
main_Statistics_6_out_2,
main_Statistics_6_out_3,
main_Statistics_6_out_4,
main_Statistics_6_out_5 = 
    Statistics(
    main_Switch_43_out_1
    ) [instance: 6, cache: 1];
    // 
    // node Switch[49]: x = 5234, y = 1439, inputs = 3, label = Switch
    //
main_Switch_49_out_1 = 
    Switch(
    main_Selector_22_out_1,
    main_Compute_75_out_1,
    main_Statistics_6_out_4
    ) [instance: 49, cache: 1];
    // 
    // node Compute[76]: x = 5376, y = 1319, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "max($0,$1)"
    // expression: value = max(a,b)
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_76_out_1 = 
    Compute(
    main_Compute_76_in_1,
    main_Scalar_22_out_1,
    main_Scalar_23_out_1
    ) [instance: 76, cache: 1];
    // 
    // node Switch[50]: x = 5374, y = 1419, inputs = 3, label = Switch
    //
main_Switch_50_out_1 = 
    Switch(
    main_Selector_22_out_1,
    main_Compute_76_out_1,
    main_Statistics_6_out_5
    ) [instance: 50, cache: 1];
    // 
    // node AutoColor[1]: x = 4971, y = 1539, inputs = 10, label = AutoColor
    // input[8]: visible = 1
    //
main_AutoColor_1_out_1,
main_AutoColor_1_out_2 = 
    AutoColor(
    main_Switch_43_out_1,
    main_AutoColor_1_in_2,
    main_AutoColor_1_in_3,
    main_AutoColor_1_in_4,
    main_AutoColor_1_in_5,
    main_AutoColor_1_in_6,
    main_Switch_49_out_1,
    main_Switch_50_out_1,
    main_AutoColor_1_in_9,
    main_AutoColor_1_in_10
    ) [instance: 1, cache: 1];
    // 
    // node AutoGrayScale[1]: x = 5155, y = 1539, inputs = 10, label = AutoGrayScale
    // input[7]: visible = 1
    // input[8]: visible = 1
    //
main_AutoGrayScale_1_out_1,
main_AutoGrayScale_1_out_2 = 
    AutoGrayScale(
    main_Switch_43_out_1,
    main_AutoGrayScale_1_in_2,
    main_AutoGrayScale_1_in_3,
    main_AutoGrayScale_1_in_4,
    main_AutoGrayScale_1_in_5,
    main_AutoGrayScale_1_in_6,
    main_Switch_49_out_1,
    main_Switch_50_out_1,
    main_AutoGrayScale_1_in_9,
    main_AutoGrayScale_1_in_10
    ) [instance: 1, cache: 1];
    // 
    // node Switch[51]: x = 5074, y = 1699, inputs = 3, label = Switch
    //
main_Switch_51_out_1 = 
    Switch(
    main_Selector_23_out_1,
    main_AutoColor_1_out_1,
    main_AutoGrayScale_1_out_1
    ) [instance: 51, cache: 1];
    // 
    // node Extract[9]: x = 5183, y = 1739, inputs = 2, label = Extract
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "colors"
    //
main_Extract_9_out_1 = 
    Extract(
    main_Switch_51_out_1,
    main_Extract_9_in_2
    ) [instance: 9, cache: 1];
    // 
    // node Transmitter[44]: x = 5084, y = 1879, inputs = 1, label = colours
    //
colours = main_Extract_9_out_1;
    // 
    // node Receiver[98]: x = 8604, y = 19, inputs = 1, label = colours
    //
main_Receiver_98_out_1 = colours;
    // 
    // node Receiver[99]: x = 8675, y = 19, inputs = 1, label = inv_posns
    //
main_Receiver_99_out_1 = inv_posns;
    // 
    // node Receiver[96]: x = 8788, y = 19, inputs = 1, label = posns
    //
main_Receiver_96_out_1 = posns;
    // 
    // node Receiver[97]: x = 8852, y = 19, inputs = 1, label = glyph_data
    //
main_Receiver_97_out_1 = glyph_data;
    // 
    // node Construct[2]: x = 8782, y = 99, inputs = 4, label = Construct
    //
main_Construct_2_out_1 = 
    Construct(
    main_Receiver_96_out_1,
    main_Construct_2_in_2,
    main_Construct_2_in_3,
    main_Receiver_97_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Remove[1]: x = 8819, y = 179, inputs = 2, label = Remove
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "connections"
    //
main_Remove_1_out_1 = 
    Remove(
    main_Construct_2_out_1,
    main_Remove_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Replace[3]: x = 8799, y = 259, inputs = 4, label = Replace
    // input[3]: defaulting = 0, visible = 0, type = 32, value = " "
    // input[4]: defaulting = 0, visible = 0, type = 32, value = "invalid positions"
    //
main_Replace_3_out_1 = 
    Replace(
    main_Receiver_99_out_1,
    main_Remove_1_out_1,
    main_Replace_3_in_3,
    main_Replace_3_in_4
    ) [instance: 3, cache: 1];
    // 
    // node Replace[4]: x = 8779, y = 339, inputs = 4, label = Replace
    // input[3]: defaulting = 0, visible = 0, type = 32, value = " "
    // input[4]: defaulting = 0, visible = 0, type = 32, value = "colors"
    //
main_Replace_4_out_1 = 
    Replace(
    main_Receiver_98_out_1,
    main_Replace_3_out_1,
    main_Replace_4_in_3,
    main_Replace_4_in_4
    ) [instance: 4, cache: 1];
    // 
    // node Include[1]: x = 8782, y = 419, inputs = 5, label = Include
    // input[2]: defaulting = 1, visible = 0, type = 5, value = 0.5
    // input[3]: defaulting = 1, visible = 0, type = 5, value = 1.5
    // input[4]: defaulting = 1, visible = 0, type = 3, value = 0
    // input[5]: visible = 0
    //
main_Include_1_out_1 = 
    Include(
    main_Replace_4_out_1,
    main_Include_1_in_2,
    main_Include_1_in_3,
    main_Include_1_in_4,
    main_Include_1_in_5
    ) [instance: 1, cache: 1];
    // 
    // node Scalar[25]: x = 8845, y = 419, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_25"
    // input[2]: visible = 0
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 1.0 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = 0.0
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 0.05
    // input[8]: defaulting = 1, visible = 0, type = 32, value = "absolute"
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 2
    // input[11]: defaulting = 1, visible = 0, type = 32, value = "Opacity"
    // output[1]: visible = 1, type = 5, value = 1.0 
    //
    // 
    // node Color[1]: x = 8826, y = 499, inputs = 5, label = Color
    // input[2]: visible = 0
    //
main_Color_1_out_1 = 
    Color(
    main_Include_1_out_1,
    main_Color_1_in_2,
    main_Scalar_25_out_1,
    main_Color_1_in_4,
    main_Color_1_in_5
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[47]: x = 8833, y = 579, inputs = 1, label = field
    //
field = main_Color_1_out_1;
    // 
    // node Receiver[100]: x = 6133, y = 19, inputs = 1, label = field
    //
main_Receiver_100_out_1 = field;
    // 
    // node Scalar[20]: x = 5905, y = 219, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_20"
    // input[2]: visible = 0
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 1.0 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = -1000000.0
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1000000.0
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 5
    // output[1]: visible = 1, type = 5, value = 1.0 
    //
    // 
    // node Toggle[21]: x = 5904, y = 119, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_21"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 2
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 1
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 2
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 1
    // output[1]: visible = 1, type = 29, value = 2
    // toggle : 1
    //
    // 
    // node Scalar[21]: x = 5905, y = 19, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_21"
    // input[2]: visible = 0
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 1.0 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = -1000000.0
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1000000.0
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 5
    // output[1]: visible = 1, type = 5, value = 1.0 
    //
    // 
    // node Switch[47]: x = 6014, y = 199, inputs = 3, label = Switch
    // input[3]: defaulting = 1, visible = 1, type = 16777245, value = NULL
    //
main_Switch_47_out_1 = 
    Switch(
    main_Toggle_21_out_1,
    main_Scalar_21_out_1,
    main_Switch_47_in_3
    ) [instance: 47, cache: 1];
    // 
    // node Glyph[1]: x = 6054, y = 339, inputs = 7, label = Glyph
    // input[2]: visible = 0
    // input[5]: visible = 0
    //
main_Glyph_1_out_1 = 
    Glyph(
    main_Receiver_100_out_1,
    main_Glyph_1_in_2,
    main_Scalar_20_out_1,
    main_Switch_47_out_1,
    main_Glyph_1_in_5,
    main_Glyph_1_in_6,
    main_Glyph_1_in_7
    ) [instance: 1, cache: 1];
    // 
    // node ShowPositions[1]: x = 6175, y = 339, inputs = 2, label = ShowPositions
    //
main_ShowPositions_1_out_1 = 
    ShowPositions(
    main_Receiver_100_out_1,
    main_ShowPositions_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Switch[48]: x = 6114, y = 479, inputs = 3, label = Switch
    //
main_Switch_48_out_1 = 
    Switch(
    main_Selector_21_out_1,
    main_Glyph_1_out_1,
    main_ShowPositions_1_out_1
    ) [instance: 48, cache: 1];
    // 
    // node ShowBox[1]: x = 5975, y = 579, inputs = 1, label = ShowBox
    //
main_ShowBox_1_out_1,
main_ShowBox_1_out_2 = 
    ShowBox(
    main_Switch_48_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Get[11]: x = 6066, y = 599, inputs = 3, label = Get
    //
main_Get_11_out_1,
main_Get_11_out_2 = 
    Get(
    main_Get_11_in_1,
    main_Get_11_in_2,
    main_Get_11_in_3
    ) [instance: 11, cache: 1];
    // 
    // node Switch[41]: x = 5962, y = 679, inputs = 4, label = Switch
    // input[3]: defaulting = 1, visible = 1, type = 16777245, value = NULL
    //
main_Switch_41_out_1 = 
    Switch(
    main_Selector_20_out_1,
    main_ShowBox_1_out_1,
    main_Switch_41_in_3,
    main_Get_11_out_1
    ) [instance: 41, cache: 1];
    // 
    // node Collect[3]: x = 6123, y = 819, inputs = 2, label = Collect
    //
main_Collect_3_out_1 = 
    Collect(
    main_Switch_41_out_1,
    main_Switch_48_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Route[24]: x = 6126, y = 919, inputs = 2, outputs = 2, label = Route
    //
main_Route_24_out_1,
main_Route_24_out_2 = 
    Route(
    main_Receiver_75_out_1,
    main_Collect_3_out_1
    ) [instance: 24, cache: 1];
    // 
    // node Mark[5]: x = 6130, y = 999, inputs = 2, label = Mark
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "box"
    //
main_Mark_5_out_1 = 
    Mark(
    main_Route_24_out_1,
    main_Mark_5_in_2
    ) [instance: 5, cache: 1];
    // 
    // node Compute[73]: x = 6116, y = 1099, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "1.1*($0-$1)+$1"
    // expression: value = 1.1*(a-b)+b
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_73_out_1 = 
    Compute(
    main_Compute_73_in_1,
    main_Mark_5_out_1,
    main_ShowBox_1_out_2
    ) [instance: 73, cache: 1];
    // 
    // node Unmark[4]: x = 6120, y = 1199, inputs = 2, label = Unmark
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "box"
    //
main_Unmark_4_out_1 = 
    Unmark(
    main_Compute_73_out_1,
    main_Unmark_4_in_2
    ) [instance: 4, cache: 1];
    // 
    // node Selector[24]: x = 5578, y = 1759, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_24"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "no" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 0 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "yes" "no" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 0 }
    // output[1]: visible = 1, type = 29, value = 0 
    // output[2]: visible = 1, type = 32, value = "no" 
    //
    // 
    // node Switch[53]: x = 5354, y = 1639, inputs = 3, label = Switch
    //
main_Switch_53_out_1 = 
    Switch(
    main_Selector_23_out_1,
    main_AutoColor_1_out_2,
    main_AutoGrayScale_1_out_2
    ) [instance: 53, cache: 1];
    // 
    // node Scalar[24]: x = 5545, y = 1659, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_24"
    // input[2]: visible = 0
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 0.5 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 0, visible = 0, type = 5, value = 0.0
    // input[6]: defaulting = 0, visible = 0, type = 5, value = 100.0
    // input[7]: defaulting = 0, visible = 0, type = 5, value = 0.05
    // input[8]: defaulting = 0, visible = 0, type = 32, value = "absolute"
    // input[9]: defaulting = 0, visible = 0, type = 1, value = 2
    // input[11]: defaulting = 0, visible = 0, type = 32, value = "Colour bar label scale"
    // output[1]: visible = 1, type = 5, value = 0.5 
    //
main_Scalar_24_out_1[cache: 2] = 
    Scalar(
    main_Scalar_24_in_1,
    main_Scalar_24_in_2,
    main_Scalar_24_in_3,
    main_Scalar_24_in_4,
    main_Scalar_24_in_5,
    main_Scalar_24_in_6,
    main_Scalar_24_in_7,
    main_Scalar_24_in_8,
    main_Scalar_24_in_9,
    main_Scalar_24_in_10,
    main_Scalar_24_in_11
    ) [instance: 24, cache: 1];
    // 
    // node ColorBar[1]: x = 5402, y = 1739, inputs = 12, label = ColorBar
    // input[2]: defaulting = 0, visible = 0, type = 8, value = [1,0.5]
    // input[3]: defaulting = 0, visible = 0, type = 8, value = [250,15]
    // input[4]: visible = 0
    // input[5]: defaulting = 0, visible = 0, type = 1, value = 8
    // input[6]: visible = 1
    // input[7]: visible = 1
    // input[8]: defaulting = 0, visible = 0, type = 32, value = "Colour data"
    // input[11]: defaulting = 1, visible = 1, type = 5, value = 0.6
    //
main_ColorBar_1_out_1 = 
    ColorBar(
    main_Switch_53_out_1,
    main_ColorBar_1_in_2,
    main_ColorBar_1_in_3,
    main_ColorBar_1_in_4,
    main_ColorBar_1_in_5,
    main_Switch_49_out_1,
    main_Switch_50_out_1,
    main_ColorBar_1_in_8,
    main_ColorBar_1_in_9,
    main_ColorBar_1_in_10,
    main_Scalar_24_out_1,
    main_ColorBar_1_in_12
    ) [instance: 1, cache: 1];
    // 
    // node Switch[54]: x = 5424, y = 1839, inputs = 2, label = Switch
    //
main_Switch_54_out_1 = 
    Switch(
    main_Selector_24_out_1,
    main_ColorBar_1_out_1
    ) [instance: 54, cache: 1];
    // 
    // node Transmitter[48]: x = 5417, y = 1919, inputs = 1, label = colourbar
    //
colourbar = main_Switch_54_out_1;
    // 
    // node Receiver[102]: x = 6237, y = 1199, inputs = 1, label = colourbar
    //
main_Receiver_102_out_1 = colourbar;
    // 
    // node Collect[4]: x = 6114, y = 1299, inputs = 3, label = Collect
    //
main_Collect_4_out_1 = 
    Collect(
    main_Caption_1_out_1,
    main_Unmark_4_out_1,
    main_Receiver_102_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Route[27]: x = 6126, y = 1399, inputs = 2, outputs = 2, label = Route
    //
main_Route_27_out_1,
main_Route_27_out_2 = 
    Route(
    main_Receiver_103_out_1,
    main_Collect_4_out_1
    ) [instance: 27, cache: 1];
    // 
    // node Transmitter[42]: x = 6128, y = 1479, inputs = 1, label = scene
    //
scene = main_Route_27_out_1;
    // 
    // node Receiver[73]: x = 6508, y = 19, inputs = 1, label = scene
    //
main_Receiver_73_out_1 = scene;
    // 
    // node Inquire[27]: x = 6383, y = 99, inputs = 3, label = Inquire
    // input[2]: visible = 0
    // input[3]: visible = 0
    //
main_Inquire_27_out_1 = 
    Inquire(
    main_Receiver_73_out_1,
    main_Inquire_27_in_2,
    main_Inquire_27_in_3
    ) [instance: 27, cache: 1];
    // 
    // node Inquire[28]: x = 6443, y = 99, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "is empty"
    // input[3]: visible = 0
    //
main_Inquire_28_out_1 = 
    Inquire(
    main_Receiver_73_out_1,
    main_Inquire_28_in_2,
    main_Inquire_28_in_3
    ) [instance: 28, cache: 1];
    // 
    // node Compute[79]: x = 6396, y = 179, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "!($0||$1)"
    // expression: value = !(a||b)
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_79_out_1 = 
    Compute(
    main_Compute_79_in_1,
    main_Inquire_27_out_1,
    main_Inquire_28_out_1
    ) [instance: 79, cache: 1];
    // 
    // node Route[28]: x = 6486, y = 259, inputs = 2, outputs = 2, label = Route
    //
main_Route_28_out_1,
main_Route_28_out_2 = 
    Route(
    main_Compute_79_out_1,
    main_Receiver_73_out_1
    ) [instance: 28, cache: 1];
    // 
    // node Compute[63]: x = 6676, y = 179, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0 == 0 || $0 == 1"
    // expression: value = a == 0 || a == 1
    // name[2]: value = a
    //
main_Compute_63_out_1 = 
    Compute(
    main_Compute_63_in_1,
    main_Selector_19_out_1
    ) [instance: 63, cache: 1];
    // 
    // node Get[10]: x = 6666, y = 339, inputs = 3, label = Get
    //
main_Get_10_out_1,
main_Get_10_out_2 = 
    Get(
    main_Route_28_out_1,
    main_Compute_63_out_1,
    main_Get_10_in_3
    ) [instance: 10, cache: 1];
    // 
    // node ClipBox[1]: x = 6500, y = 439, inputs = 2, label = ClipBox
    //
main_ClipBox_1_out_1 = 
    ClipBox(
    main_Route_28_out_1,
    main_Get_10_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Switch[40]: x = 6454, y = 539, inputs = 3, label = Switch
    //
main_Switch_40_out_1 = 
    Switch(
    main_Compute_69_out_1,
    main_Route_28_out_1,
    main_ClipBox_1_out_1
    ) [instance: 40, cache: 1];
    // 
    // node Compute[66]: x = 6836, y = 179, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0+1"
    // expression: value = a+1
    // name[2]: value = a
    //
main_Compute_66_out_1 = 
    Compute(
    main_Compute_66_in_1,
    main_Selector_19_out_1
    ) [instance: 66, cache: 1];
    // 
    // node Receiver[107]: x = 6968, y = 399, inputs = 1, label = defdir
    //
main_Receiver_107_out_1 = defdir;
    // 
    // node AutoCamera[2]: x = 6884, y = 479, inputs = 9, label = AutoCamera
    // input[2]: defaulting = 1, visible = 1, type = 32, value = "off-diagonal"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 350
    //
main_AutoCamera_2_out_1 = 
    AutoCamera(
    main_Get_10_out_1,
    main_Receiver_107_out_1,
    main_AutoCamera_2_in_3,
    main_AutoCamera_2_in_4,
    main_AutoCamera_2_in_5,
    main_AutoCamera_2_in_6,
    main_AutoCamera_2_in_7,
    main_AutoCamera_2_in_8,
    main_AutoCamera_2_in_9
    ) [instance: 2, cache: 1];
    // 
    // node Receiver[51]: x = 7204, y = 19, inputs = 1, label = camera
    //
main_Receiver_51_out_1 = camera;
    // 
    // node Scalar[17]: x = 7125, y = 119, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_17"
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 2.0 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = -1000000.0
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1000000.0
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 5
    // output[1]: visible = 1, type = 5, value = 2.0 
    //
    // 
    // node Inquire[22]: x = 7194, y = 119, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "camera to"
    //
main_Inquire_22_out_1 = 
    Inquire(
    main_Receiver_51_out_1,
    main_Inquire_22_in_2,
    main_Inquire_22_in_3
    ) [instance: 22, cache: 1];
    // 
    // node Inquire[21]: x = 7294, y = 119, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "camera from"
    //
main_Inquire_21_out_1 = 
    Inquire(
    main_Receiver_51_out_1,
    main_Inquire_21_in_2,
    main_Inquire_21_in_3
    ) [instance: 21, cache: 1];
    // 
    // node Inquire[20]: x = 7394, y = 119, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "camera up"
    //
main_Inquire_20_out_1 = 
    Inquire(
    main_Receiver_51_out_1,
    main_Inquire_20_in_2,
    main_Inquire_20_in_3
    ) [instance: 20, cache: 1];
    // 
    // node Compute[50]: x = 7202, y = 219, inputs = 5, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "norm( tan($0/57.3)*mag($1-$2)*norm( cross( $1-$2, $3 ) ) + $2 )*mag($2)"
    // expression: value = norm( tan(a/57.3)*mag(b-c)*norm( cross( b-c, d ) ) + c )*mag(c)
    // name[2]: value = a
    // name[3]: value = b
    // name[4]: value = c
    // name[5]: value = d
    //
main_Compute_50_out_1 = 
    Compute(
    main_Compute_50_in_1,
    main_Scalar_17_out_1,
    main_Inquire_22_out_1,
    main_Inquire_21_out_1,
    main_Inquire_20_out_1
    ) [instance: 50, cache: 1];
    // 
    // node UpdateCamera[1]: x = 7096, y = 319, inputs = 10, label = UpdateCamera
    // input[2]: visible = 0
    // input[4]: visible = 0
    // input[5]: visible = 0
    // input[6]: visible = 0
    // input[7]: visible = 0
    // input[8]: visible = 0
    // input[9]: visible = 0
    // input[10]: visible = 0
    //
main_UpdateCamera_1_out_1 = 
    UpdateCamera(
    main_Receiver_51_out_1,
    main_UpdateCamera_1_in_2,
    main_Compute_50_out_1,
    main_UpdateCamera_1_in_4,
    main_UpdateCamera_1_in_5,
    main_UpdateCamera_1_in_6,
    main_UpdateCamera_1_in_7,
    main_UpdateCamera_1_in_8,
    main_UpdateCamera_1_in_9,
    main_UpdateCamera_1_in_10
    ) [instance: 1, cache: 1];
    // 
    // node Switch[39]: x = 6910, y = 659, inputs = 5, label = Switch
    // input[3]: defaulting = 1, visible = 1, type = 16777245, value = NULL
    //
main_Switch_39_out_1 = 
    Switch(
    main_Compute_66_out_1,
    main_AutoCamera_2_out_1,
    main_Switch_39_in_3,
    main_UpdateCamera_1_out_1,
    main_Get_14_out_1
    ) [instance: 39, cache: 1];
    // 
    // node Compute[65]: x = 6756, y = 179, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0 != 1"
    // expression: value = a != 1
    // name[2]: value = a
    //
main_Compute_65_out_1 = 
    Compute(
    main_Compute_65_in_1,
    main_Selector_19_out_1
    ) [instance: 65, cache: 1];
    // 
    // node Image[2]: x = 6502, y = 739, inputs = 42, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 67108863, value = "Image_2"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 0, visible = 0, type = 8, value = [24.5 59.5 59.5]
    // input[6]: defaulting = 0, visible = 0, type = 8, value = [282.85 317.85 377.712]
    // input[7]: defaulting = 0, visible = 0, type = 5, value = 259.648
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 350
    // input[9]: defaulting = 0, visible = 0, type = 5, value = 0.75
    // input[10]: defaulting = 0, visible = 0, type = 8, value = [0 1 0]
    // input[11]: defaulting = 1, visible = 0, type = 5, value = 30.0001
    // input[12]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[20]: defaulting = 1, visible = 1, type = 64, value = NULL
    // input[21]: visible = 1
    // input[29]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[30]: defaulting = 0, visible = 0, type = 16777248, value = {"x", "y", "z"}
    // input[31]: defaulting = 0, visible = 0, type = 1, value = 15
    // input[32]: defaulting = 1, visible = 1, type = 16777224, value = {[-2.450001 -5.950005 -5.950005] [51.450001 124.950005 124.950005]}
    // input[33]: defaulting = 0, visible = 0, type = 3, value = 1
    // input[34]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[35]: defaulting = 1, visible = 0, type = 8, value = NULL
    // input[36]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[37]: defaulting = 0, visible = 0, type = 16777248, value = {"clear", "grey5", "yellow", "white"}
    // input[38]: defaulting = 0, visible = 0, type = 16777248, value = {"background", "grid", "ticks", "labels"}
    // input[39]: defaulting = 0, visible = 0, type = 5, value = 0.400000
    // input[41]: defaulting = 0, visible = 0, type = 32, value = "none"
    // depth: value = 8
    // window: position = (0.5633,0.0146), size = 0.3555x0.4326
    // internal caching: 1
    //
main_Image_2_out_1[cache: 2],
main_Image_2_out_2[cache: 2] = 
    Image(
    main_Image_2_in_1,
    main_Switch_40_out_1,
    main_Image_2_in_3,
    main_Image_2_in_4,
    main_Image_2_in_5,
    main_Image_2_in_6,
    main_Image_2_in_7,
    main_Image_2_in_8,
    main_Image_2_in_9,
    main_Image_2_in_10,
    main_Image_2_in_11,
    main_Image_2_in_12,
    main_Image_2_in_13,
    main_Image_2_in_14,
    main_Image_2_in_15,
    main_Image_2_in_16,
    main_Image_2_in_17,
    main_Image_2_in_18,
    main_Image_2_in_19,
    main_Switch_39_out_1,
    main_Compute_65_out_1,
    main_Image_2_in_22,
    main_Image_2_in_23,
    main_Image_2_in_24,
    main_Image_2_in_25,
    main_Image_2_in_26,
    main_Image_2_in_27,
    main_Image_2_in_28,
    main_Image_2_in_29,
    main_Image_2_in_30,
    main_Image_2_in_31,
    main_Get_10_out_1,
    main_Image_2_in_33,
    main_Image_2_in_34,
    main_Image_2_in_35,
    main_Image_2_in_36,
    main_Image_2_in_37,
    main_Image_2_in_38,
    main_Image_2_in_39,
    main_Image_2_in_40,
    main_Image_2_in_41,
    main_Image_2_in_42
    ) [instance: 2, cache: 1];
    // 
    // node Set[14]: x = 6566, y = 819, inputs = 3, label = Set
    //
    Set(
    main_Image_2_out_2,
    main_Get_14_out_2,
    main_Set_14_in_3
    ) [instance: 14, cache: 1];
    // 
    // node Set[13]: x = 5346, y = 1079, inputs = 3, label = Set
    //
    Set(
    main_Switch_43_out_1,
    main_Get_13_out_2,
    main_Set_13_in_3
    ) [instance: 13, cache: 1];
    // 
    // node Set[11]: x = 6066, y = 759, inputs = 3, label = Set
    //
    Set(
    main_Switch_41_out_1,
    main_Get_11_out_2,
    main_Set_11_in_3
    ) [instance: 11, cache: 1];
    // 
    // node Set[10]: x = 6666, y = 499, inputs = 3, label = Set
    //
    Set(
    main_Get_10_out_1,
    main_Get_10_out_2,
    main_Set_10_in_3
    ) [instance: 10, cache: 1];
    // 
    // node Format[17]: x = 2094, y = 419, inputs = 4, label = Format
    // input[1]: defaulting = 0, visible = 0, type = 32, value = " "
    //
main_Format_17_out_1 = 
    Format(
    main_Format_17_in_1,
    main_Extract_4_out_1,
    main_Extract_5_out_1,
    main_Extract_6_out_1
    ) [instance: 17, cache: 1];
    // 
    // node System[1]: x = 2102, y = 499, inputs = 1, label = System
    //
    System(
    main_Format_17_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Set[7]: x = 4326, y = 799, inputs = 3, label = Set
    //
    Set(
    main_Switch_36_out_1,
    main_Get_7_out_2,
    main_Set_7_in_3
    ) [instance: 7, cache: 1];
    // 
    // node Receiver[52]: x = 798, y = 359, inputs = 1, label = kill
    //
main_Receiver_52_out_1 = kill;
    // 
    // node Format[15]: x = 823, y = 299, inputs = 2, label = Format
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "You havn't specified a file format on control panel \"Select input file...\""
    //
main_Format_15_out_1 = 
    Format(
    main_Format_15_in_1,
    main_Route_21_out_1
    ) [instance: 15, cache: 1];
    // 
    // node Route[22]: x = 826, y = 459, inputs = 2, outputs = 2, label = Route
    //
main_Route_22_out_1,
main_Route_22_out_2 = 
    Route(
    main_Receiver_52_out_1,
    main_Format_15_out_1
    ) [instance: 22, cache: 1];
    // 
    // node Message[7]: x = 814, y = 559, inputs = 3, label = Message
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "warning"
    // input[3]: defaulting = 0, visible = 1, type = 3, value = 1
    //
    Message(
    main_Route_22_out_1,
    main_Message_7_in_2,
    main_Message_7_in_3
    ) [instance: 7, cache: 1];
    // 
    // node Format[2]: x = 383, y = 419, inputs = 2, label = For help on running this demo, 
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "For help on running this demo, select  \"Application comment\" \nfrom the \"Help\" menu in the Image window."
    //
main_Format_2_out_1[cache: 2] = 
    Format(
    main_Format_2_in_1,
    main_Route_1_out_2
    ) [instance: 2, cache: 1];
    // 
    // node Message[1]: x = 374, y = 499, inputs = 3, label = Message
    // input[3]: defaulting = 0, visible = 1, type = 3, value = 1
    //
    Message(
    main_Format_2_out_1,
    main_Message_1_in_2,
    main_Message_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[13]: x = 6486, y = 879, inputs = 1, label = render
    //
render = main_Image_2_out_1;
    // 
    // node Receiver[22]: x = 8986, y = 39, inputs = 1, label = render
    //
main_Receiver_22_out_1[cache: 2] = render;
    // 
    // node Receiver[21]: x = 9144, y = 39, inputs = 1, label = camera
    //
main_Receiver_21_out_1[cache: 2] = camera;
    // 
    // node Render[1]: x = 9062, y = 159, inputs = 3, label = Render
    //
main_Render_1_out_1[cache: 2] = 
    Render(
    main_Receiver_22_out_1,
    main_Receiver_21_out_1,
    main_Render_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Toggle[3]: x = 9144, y = 159, inputs = 6, label = Toggle
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Toggle_3"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 1, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 1, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 0
    // toggle : 0
    //
    // 
    // node Reset[2]: x = 8587, y = 159, inputs = 6, label = Reset
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "main_Reset_2_out_1"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 0
    // toggle : 0
    //
    // 
    // node Compute[11]: x = 9096, y = 259, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "max($0,$1)"
    // expression: value = max(a,b)
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_11_out_1[cache: 2] = 
    Compute(
    main_Compute_11_in_1,
    main_Toggle_3_out_1,
    main_Reset_2_out_1
    ) [instance: 11, cache: 1];
    // 
    // node Route[2]: x = 9126, y = 359, inputs = 2, outputs = 2, label = Route
    //
main_Route_2_out_1[cache: 2],
main_Route_2_out_2[cache: 2] = 
    Route(
    main_Compute_11_out_1,
    main_Reset_2_out_1
    ) [instance: 2, cache: 1];
    // 
    // node String[1]: x = 9186, y = 359, inputs = 0, label = String
    // output[1]: visible = 1, type = 32, value = NULL
    //
    // 
    // node SXMakeMpeg[1]: x = 9080, y = 459, inputs = 3, label = SXMakeMpeg
    //
    SXMakeMpeg(
    main_Render_1_out_1,
    main_Route_2_out_1,
    main_String_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[32]: x = 320, y = 599, inputs = 1, label = template
    //
template = main_Route_1_out_1;
    // 
    // node Format[18]: x = 4303, y = 1019, inputs = 2, label = No positions left to display!
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "No positions left to display!"
    //
main_Format_18_out_1 = 
    Format(
    main_Format_18_in_1,
    main_Route_23_out_2
    ) [instance: 18, cache: 1];
    // 
    // node Message[8]: x = 4294, y = 1159, inputs = 3, label = Message
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "warning"
    // input[3]: defaulting = 0, visible = 1, type = 3, value = 1
    //
    Message(
    main_Format_18_out_1,
    main_Message_8_in_2,
    main_Message_8_in_3
    ) [instance: 8, cache: 1];
    // 
    // node Selector[27]: x = 7558, y = 1179, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_27"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Mean data values" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 1 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Mean data values" "Density values" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 2 }
    // output[1]: visible = 1, type = 29, value = 1 
    // output[2]: visible = 1, type = 32, value = "Mean data values" 
    //
    // 
    // node Selector[26]: x = 7558, y = 1079, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_26"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Binning" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 1 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Binning" "Sampling" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 2 }
    // output[1]: visible = 1, type = 29, value = 1 
    // output[2]: visible = 1, type = 32, value = "Binning" 
    //
    // 
    // node Selector[25]: x = 7558, y = 279, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_25"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Input data" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 1 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "Input data" "Selected data" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 2 }
    // output[1]: visible = 1, type = 29, value = 1 
    // output[2]: visible = 1, type = 32, value = "Input data" 
    //
    // 
    // node Receiver[111]: x = 7609, y = 39, inputs = 1, label = input_group
    //
main_Receiver_111_out_1 = input_group;
    // 
    // node Receiver[110]: x = 7753, y = 39, inputs = 1, label = field
    //
main_Receiver_110_out_1 = field;
    // 
    // node Remove[2]: x = 7739, y = 119, inputs = 2, label = Remove
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "colors"
    //
main_Remove_2_out_1 = 
    Remove(
    main_Receiver_110_out_1,
    main_Remove_2_in_2
    ) [instance: 2, cache: 1];
    // 
    // node Inquire[32]: x = 7683, y = 199, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "has component"
    // input[3]: defaulting = 0, visible = 0, type = 32, value = "opacities"
    //
main_Inquire_32_out_1 = 
    Inquire(
    main_Remove_2_out_1,
    main_Inquire_32_in_2,
    main_Inquire_32_in_3
    ) [instance: 32, cache: 1];
    // 
    // node Compute[86]: x = 7676, y = 279, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0+1"
    // expression: value = a+1
    // name[2]: value = a
    //
main_Compute_86_out_1 = 
    Compute(
    main_Compute_86_in_1,
    main_Inquire_32_out_1
    ) [instance: 86, cache: 1];
    // 
    // node Remove[3]: x = 7839, y = 239, inputs = 2, label = Remove
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "opacities"
    //
main_Remove_3_out_1 = 
    Remove(
    main_Remove_2_out_1,
    main_Remove_3_in_2
    ) [instance: 3, cache: 1];
    // 
    // node Switch[59]: x = 7774, y = 359, inputs = 3, label = Switch
    //
main_Switch_59_out_1 = 
    Switch(
    main_Compute_86_out_1,
    main_Remove_2_out_1,
    main_Remove_3_out_1
    ) [instance: 59, cache: 1];
    // 
    // node Switch[60]: x = 7614, y = 459, inputs = 3, label = Switch
    //
main_Switch_60_out_1 = 
    Switch(
    main_Selector_25_out_1,
    main_Receiver_111_out_1,
    main_Switch_59_out_1
    ) [instance: 60, cache: 1];
    // 
    // node Select[11]: x = 7546, y = 559, inputs = 3, label = Select
    // input[2]: visible = 0
    //
main_Select_11_out_1 = 
    Select(
    main_Switch_60_out_1,
    main_Select_11_in_2,
    main_Select_11_in_3
    ) [instance: 11, cache: 1];
    // 
    // node Switch[64]: x = 7534, y = 699, inputs = 3, label = Switch
    //
main_Switch_64_out_1 = 
    Switch(
    main_Selector_25_out_1,
    main_Select_11_out_1,
    main_Switch_60_out_1
    ) [instance: 64, cache: 1];
    // 
    // node Scalar[26]: x = 7705, y = 699, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_26"
    // input[2]: visible = 0
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 0.0
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = 0.0
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1000000.0
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 5
    // output[1]: visible = 1, type = 5, value = 0.0
    //
    // 
    // node Mark[6]: x = 7850, y = 539, inputs = 2, label = Mark
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "positions"
    //
main_Mark_6_out_1 = 
    Mark(
    main_Switch_60_out_1,
    main_Mark_6_in_2
    ) [instance: 6, cache: 1];
    // 
    // node Compute[90]: x = 7836, y = 619, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0.x"
    // expression: value = a.x
    // name[2]: value = a
    //
main_Compute_90_out_1 = 
    Compute(
    main_Compute_90_in_1,
    main_Mark_6_out_1
    ) [instance: 90, cache: 1];
    // 
    // node Statistics[8]: x = 7810, y = 699, inputs = 1, label = Statistics
    //
main_Statistics_8_out_1,
main_Statistics_8_out_2,
main_Statistics_8_out_3,
main_Statistics_8_out_4,
main_Statistics_8_out_5 = 
    Statistics(
    main_Compute_90_out_1
    ) [instance: 8, cache: 1];
    // 
    // node Integer[4]: x = 8003, y = 699, inputs = 11, label = Integer
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Integer_4"
    // input[3]: defaulting = 0, visible = 0, type = 1, value = 50 
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 1, value = 2
    // input[6]: defaulting = 1, visible = 0, type = 1, value = 1000000
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 0
    // output[1]: visible = 1, type = 1, value = 50 
    //
    // 
    // node Compute[92]: x = 7822, y = 799, inputs = 5, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0>0?$0:($2-$1)/$3"
    // expression: value = a>0?a:(c-b)/d
    // name[2]: value = a
    // name[3]: value = b
    // name[4]: value = c
    // name[5]: value = d
    //
main_Compute_92_out_1 = 
    Compute(
    main_Compute_92_in_1,
    main_Scalar_26_out_1,
    main_Statistics_8_out_4,
    main_Statistics_8_out_5,
    main_Integer_4_out_1
    ) [instance: 92, cache: 1];
    // 
    // node SXConstruct[1]: x = 7663, y = 899, inputs = 5, label = SXConstruct
    // input[2]: visible = 0
    // input[3]: visible = 0
    // input[5]: visible = 0
    //
main_SXConstruct_1_out_1 = 
    SXConstruct(
    main_Switch_64_out_1,
    main_SXConstruct_1_in_2,
    main_SXConstruct_1_in_3,
    main_Compute_92_out_1,
    main_SXConstruct_1_in_5
    ) [instance: 1, cache: 1];
    // 
    // node SXBin[1]: x = 7646, y = 1039, inputs = 3, label = SXBin
    //
main_SXBin_1_out_1 = 
    SXBin(
    main_Switch_60_out_1,
    main_SXConstruct_1_out_1,
    main_SXBin_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Integer[3]: x = 8183, y = 799, inputs = 11, label = Integer
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Integer_3"
    // input[3]: defaulting = 0, visible = 0, type = 1, value = 5 
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 1, value = 2
    // input[6]: defaulting = 1, visible = 0, type = 1, value = 1000000
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 0
    // output[1]: visible = 1, type = 1, value = 5 
    //
    // 
    // node SXRegrid[1]: x = 7774, y = 1039, inputs = 8, label = SXRegrid
    // input[3]: visible = 1
    //
main_SXRegrid_1_out_1 = 
    SXRegrid(
    main_Switch_60_out_1,
    main_SXConstruct_1_out_1,
    main_Integer_3_out_1,
    main_SXRegrid_1_in_4,
    main_SXRegrid_1_in_5,
    main_SXRegrid_1_in_6,
    main_SXRegrid_1_in_7,
    main_SXRegrid_1_in_8
    ) [instance: 1, cache: 1];
    // 
    // node Switch[61]: x = 7754, y = 1179, inputs = 3, label = Switch
    //
main_Switch_61_out_1 = 
    Switch(
    main_Selector_26_out_1,
    main_SXBin_1_out_1,
    main_SXRegrid_1_out_1
    ) [instance: 61, cache: 1];
    // 
    // node SXBin[2]: x = 7966, y = 1039, inputs = 3, label = SXBin
    // input[3]: defaulting = 0, visible = 0, type = 1, value = 2
    //
main_SXBin_2_out_1 = 
    SXBin(
    main_Switch_60_out_1,
    main_SXConstruct_1_out_1,
    main_SXBin_2_in_3
    ) [instance: 2, cache: 1];
    // 
    // node Enumerate[1]: x = 8190, y = 879, inputs = 5, label = Enumerate
    // input[1]: defaulting = 0, visible = 0, type = 29, value = 1
    // input[2]: visible = 0
    // input[4]: defaulting = 0, visible = 0, type = 29, value = 1
    // input[5]: visible = 0
    //
main_Enumerate_1_out_1 = 
    Enumerate(
    main_Enumerate_1_in_1,
    main_Enumerate_1_in_2,
    main_Integer_3_out_1,
    main_Enumerate_1_in_4,
    main_Enumerate_1_in_5
    ) [instance: 1, cache: 1];
    // 
    // node Compute[87]: x = 8256, y = 959, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0>($1-2)?( 0.2387324*($1-1) )**0.3333333:0"
    // expression: value = a>(b-2)?( 0.2387324*(b-1) )**0.3333333:0
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_87_out_1 = 
    Compute(
    main_Compute_87_in_1,
    main_Enumerate_1_out_1,
    main_Integer_3_out_1
    ) [instance: 87, cache: 1];
    // 
    // node SXRegrid[2]: x = 8082, y = 1039, inputs = 8, label = SXRegrid
    // input[3]: visible = 1
    // input[5]: visible = 1
    // input[6]: defaulting = 0, visible = 0, type = 5, value = -3.
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 2
    //
main_SXRegrid_2_out_1 = 
    SXRegrid(
    main_Switch_60_out_1,
    main_SXConstruct_1_out_1,
    main_Integer_3_out_1,
    main_SXRegrid_2_in_4,
    main_Compute_87_out_1,
    main_SXRegrid_2_in_6,
    main_SXRegrid_2_in_7,
    main_SXRegrid_2_in_8
    ) [instance: 2, cache: 1];
    // 
    // node Switch[62]: x = 7974, y = 1179, inputs = 3, label = Switch
    //
main_Switch_62_out_1 = 
    Switch(
    main_Selector_26_out_1,
    main_SXBin_2_out_1,
    main_SXRegrid_2_out_1
    ) [instance: 62, cache: 1];
    // 
    // node Switch[63]: x = 7874, y = 1279, inputs = 3, label = Switch
    //
main_Switch_63_out_1 = 
    Switch(
    main_Selector_27_out_1,
    main_Switch_61_out_1,
    main_Switch_62_out_1
    ) [instance: 63, cache: 1];
    // 
    // node Reset[6]: x = 8227, y = 1119, inputs = 6, label = Reset
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "main_Reset_6_out_1"
    // input[2]: defaulting = 0, visible = 0, type = 29, value = 0
    // input[3]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[4]: defaulting = 1, visible = 0, type = 29, value = 1
    // input[5]: defaulting = 1, visible = 0, type = 29, value = 0
    // output[1]: visible = 1, type = 29, value = 0
    // toggle : 0
    //
    // 
    // node String[7]: x = 8386, y = 1039, inputs = 0, label = String
    // output[1]: visible = 1, type = 32, value = NULL
    //
    // 
    // node Inquire[33]: x = 8303, y = 1119, inputs = 3, label = Inquire
    // input[2]: visible = 0
    // input[3]: visible = 0
    //
main_Inquire_33_out_1 = 
    Inquire(
    main_String_7_out_1,
    main_Inquire_33_in_2,
    main_Inquire_33_in_3
    ) [instance: 33, cache: 1];
    // 
    // node Compute[88]: x = 8256, y = 1199, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0==1 && $1==0"
    // expression: value = a==1 && b==0
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_88_out_1 = 
    Compute(
    main_Compute_88_in_1,
    main_Reset_6_out_1,
    main_Inquire_33_out_1
    ) [instance: 88, cache: 1];
    // 
    // node Route[30]: x = 8386, y = 1279, inputs = 2, outputs = 2, label = Route
    //
main_Route_30_out_1,
main_Route_30_out_2 = 
    Route(
    main_Compute_88_out_1,
    main_String_7_out_1
    ) [instance: 30, cache: 1];
    // 
    // node Receiver[112]: x = 8457, y = 1279, inputs = 1, label = frame_no
    //
main_Receiver_112_out_1 = frame_no;
    // 
    // node Format[23]: x = 8423, y = 1379, inputs = 2, label = Format
    //
main_Format_23_out_1 = 
    Format(
    main_Route_30_out_1,
    main_Receiver_112_out_1
    ) [instance: 23, cache: 1];
    // 
    // node Export[1]: x = 7905, y = 1459, inputs = 3, label = Export
    // input[3]: visible = 0
    //
    Export(
    main_Switch_63_out_1,
    main_Format_23_out_1,
    main_Export_1_in_3
    ) [instance: 1, cache: 1];
// network: end of macro body
CacheScene("Image_2", main_Image_2_out_1, main_Image_2_out_2);
}
main_Reset_5_in_1 = "main_Reset_5_out_1";
main_Reset_5_in_2 = 0;
main_Reset_5_in_3 = 0;
main_Reset_5_in_4 = NULL;
main_Reset_5_in_5 = NULL;
main_Reset_5_in_6 = NULL;
main_Reset_5_out_1 = 0;
main_Toggle_14_in_1 = "Toggle_14";
main_Toggle_14_in_2 =  1  ;
main_Toggle_14_in_3 = 0;
main_Toggle_14_in_4 =  2  ;
main_Toggle_14_in_5 =  1  ;
main_Toggle_14_in_6 = NULL;
main_Toggle_14_out_1 =  1  ;
main_Toggle_13_in_1 = "Toggle_13";
main_Toggle_13_in_2 =  2  ;
main_Toggle_13_in_3 = 0;
main_Toggle_13_in_4 = NULL;
main_Toggle_13_in_5 =  2  ;
main_Toggle_13_in_6 = NULL;
main_Toggle_13_out_1 =  2  ;
main_Selector_6_in_1 = "Selector_6";
main_Selector_6_in_2 = "NULL" ;
main_Selector_6_in_3 = 0 ;
main_Selector_6_in_4 = NULL;
main_Selector_6_in_5 = NULL;
main_Selector_6_in_6 = NULL;
main_Selector_6_in_7 = NULL;
main_Selector_6_out_1 = 0 ;
main_Compute_51_in_1 = "1+($0>0)";
main_Compute_51_out_1 = NULL;
main_Route_21_out_1 = NULL;
main_Route_21_out_2 = NULL;
main_FileSelector_1_out_1 = NULL;
main_Inquire_6_in_2 = NULL;
main_Inquire_6_in_3 = NULL;
main_Inquire_6_out_1 = NULL;
main_Compute_10_in_1 = "$0+1";
main_Compute_10_out_1 = NULL;
main_Route_1_out_1 = NULL;
main_Route_1_out_2 = NULL;
main_Integer_2_in_1 = "Integer_2";
main_Integer_2_in_2 = NULL;
main_Integer_2_in_3 = 1 ;
main_Integer_2_in_4 = 0;
main_Integer_2_in_5 = NULL;
main_Integer_2_in_6 = NULL;
main_Integer_2_in_7 = NULL;
main_Integer_2_in_8 = NULL;
main_Integer_2_in_9 = NULL;
main_Integer_2_in_10 = NULL;
main_Integer_2_in_11 = NULL;
main_Integer_2_out_1 = 1 ;
main_Sequencer_2_in_1 = "Sequencer_2";
main_Sequencer_2_in_2 = NULL;
main_Sequencer_2_in_3 = NULL;
main_Sequencer_2_in_4 = 1;
main_Sequencer_2_in_6 = NULL;
main_Sequencer_2_in_7 = { 1 1 1 1 1 1 };
main_Sequencer_2_out_1 = NULL;

@startframe = 1;
@nextframe  = @startframe;
@endframe   = 1;
@deltaframe = 1;
main_Format_16_out_1 = NULL;
main_Transmitter_12_out_1 = NULL;
main_Receiver_20_out_1 = NULL;
main_Import_1_in_2 = NULL;
main_Import_1_in_3 = "dx";
main_Import_1_in_4 = NULL;
main_Import_1_in_5 = NULL;
main_Import_1_in_6 = NULL;
main_Import_1_out_1 = NULL;
main_Import_2_in_2 = NULL;
main_Import_2_in_3 = "general";
main_Import_2_in_4 = NULL;
main_Import_2_in_5 = NULL;
main_Import_2_in_6 = NULL;
main_Import_2_out_1 = NULL;
main_SXReadFortran_1_in_2 = NULL;
main_SXReadFortran_1_in_3 = NULL;
main_SXReadFortran_1_in_4 = NULL;
main_SXReadFortran_1_in_5 = NULL;
main_SXReadFortran_1_out_1 = NULL;
main_SXReadNDF_1_in_2 = NULL;
main_SXReadNDF_1_out_1 = NULL;
main_Switch_11_out_1 = NULL;
main_Inquire_4_in_2 = "is group";
main_Inquire_4_in_3 = NULL;
main_Inquire_4_out_1 = NULL;
main_Compute_4_in_1 = "2-$0";
main_Compute_4_out_1 = NULL;
main_Collect_2_in_1 = NULL;
main_Collect_2_in_2 = NULL;
main_Collect_2_out_1 = NULL;
main_Inquire_5_in_2 = "has attribute";
main_Inquire_5_in_3 = "name";
main_Inquire_5_out_1 = NULL;
main_Compute_8_in_1 = "2-$0";
main_Compute_8_out_1 = NULL;
main_Attribute_1_in_2 = NULL;
main_Attribute_1_out_1 = NULL;
main_Switch_8_in_3 = {"data"};
main_Switch_8_out_1 = NULL;
main_Append_1_out_1 = NULL;
main_Switch_5_out_1 = NULL;
main_Transmitter_1_out_1 = NULL;
main_Receiver_53_out_1 = NULL;
main_Selector_16_in_1 = "Selector_16";
main_Selector_16_in_2 = "Total_density" ;
main_Selector_16_in_3 = 0 ;
main_Selector_16_in_5 = NULL;
main_Selector_16_in_6 = NULL;
main_Selector_16_in_7 = NULL;
main_Selector_16_out_1 = 0 ;
main_Select_8_in_3 = NULL;
main_Select_8_out_1 = NULL;
main_Extract_7_in_2 = "positions";
main_Extract_7_out_1 = NULL;
main_Inquire_30_in_2 = "shape";
main_Inquire_30_in_3 = NULL;
main_Inquire_30_out_1 = NULL;
main_Compute_81_in_1 = "$0.x";
main_Compute_81_out_1 = NULL;
main_Compute_82_in_1 = "[$0,0,0]";
main_Compute_82_out_1 = NULL;
main_Compute_83_in_1 = "[$0.x,$0.y,0]";
main_Compute_83_out_1 = NULL;
main_Switch_55_out_1 = NULL;
main_Transmitter_37_out_1 = NULL;
main_Receiver_63_out_1 = NULL;
main_Receiver_86_out_1 = NULL;
main_Switch_56_in_2 = {"front"};
main_Switch_56_in_3 = {"front"};
main_Switch_56_in_4 = {"off diagonal"};
main_Switch_56_out_1 = NULL;
main_Transmitter_50_out_1 = NULL;
main_Receiver_108_out_1 = NULL;
main_AutoCamera_4_in_3 = NULL;
main_AutoCamera_4_in_4 = 350;
main_AutoCamera_4_in_5 = NULL;
main_AutoCamera_4_in_6 = NULL;
main_AutoCamera_4_in_7 = NULL;
main_AutoCamera_4_in_8 = NULL;
main_AutoCamera_4_in_9 = NULL;
main_AutoCamera_4_out_1 = NULL;
main_Get_14_in_2 = NULL;
main_Get_14_in_3 = NULL;
main_Get_14_out_1 = NULL;
main_Get_14_out_2 = NULL;
main_Transmitter_14_out_1 = NULL;
main_Receiver_62_out_1 = NULL;
main_SXVisible_1_in_1 = NULL;
main_SXVisible_1_out_2 = NULL;
main_Transmitter_43_out_1 = NULL;
main_Receiver_76_out_1 = NULL;
main_String_4_out_1 = "1";
main_Extract_4_in_2 = NULL;
main_Extract_4_out_1 = NULL;
main_Transmitter_33_out_1 = NULL;
main_Receiver_56_out_1 = NULL;
main_Selector_17_in_1 = "Selector_17";
main_Selector_17_in_2 = "Total_density" ;
main_Selector_17_in_3 = 0 ;
main_Selector_17_in_5 = NULL;
main_Selector_17_in_6 = NULL;
main_Selector_17_in_7 = NULL;
main_Selector_17_out_1 = 0 ;
main_Select_9_in_3 = NULL;
main_Select_9_out_1 = NULL;
main_Extract_5_in_2 = NULL;
main_Extract_5_out_1 = NULL;
main_Transmitter_35_out_1 = NULL;
main_Receiver_57_out_1 = NULL;
main_Selector_18_in_1 = "Selector_18";
main_Selector_18_in_2 = "Total_density" ;
main_Selector_18_in_3 = 0 ;
main_Selector_18_in_5 = NULL;
main_Selector_18_in_6 = NULL;
main_Selector_18_in_7 = NULL;
main_Selector_18_out_1 = 0 ;
main_Select_10_in_3 = NULL;
main_Select_10_out_1 = NULL;
main_Extract_6_in_2 = NULL;
main_Extract_6_out_1 = NULL;
main_Transmitter_36_out_1 = NULL;
main_Receiver_59_out_1 = NULL;
main_Receiver_60_out_1 = NULL;
main_SXEnum_1_in_2 = NULL;
main_SXEnum_1_in_3 = NULL;
main_SXEnum_1_out_1 = NULL;
main_Extract_8_in_2 = NULL;
main_Extract_8_out_1 = NULL;
main_Transmitter_38_out_1 = NULL;
main_Receiver_58_out_1 = NULL;
main_Transmitter_40_out_1 = NULL;
main_Receiver_66_out_1 = NULL;
main_Receiver_94_out_1 = NULL;
main_Inquire_25_in_2 = "camera from";
main_Inquire_25_in_3 = NULL;
main_Inquire_25_out_1 = NULL;
main_Compute2_2_in_2 = "a";
main_Compute2_2_in_4 = "b";
main_Compute2_2_in_6 = "c";
main_Compute2_2_in_8 = "p";
main_Compute2_2_in_10 = "e";
main_Compute2_2_in_12 = "f";
main_Compute2_2_in_14 = "v";
main_Compute2_2_out_1 = NULL;
main_Compute_52_in_1 = "byte( $0 <= 0 )";
main_Compute_52_out_1 = NULL;
main_Compute_61_in_1 = "byte(  (!$0) || $1 )";
main_Compute_61_out_1 = NULL;
main_Switch_35_out_1 = NULL;
main_Options_1_in_2 = "dep";
main_Options_1_in_3 = "positions";
main_Options_1_out_1 = NULL;
main_Get_7_in_1 = NULL;
main_Get_7_in_2 = NULL;
main_Get_7_in_3 = NULL;
main_Get_7_out_1 = NULL;
main_Get_7_out_2 = NULL;
main_Switch_36_out_1 = NULL;
main_Statistics_2_out_4 = NULL;
main_Compute_62_in_1 = "( $0 == 1 ) + 1";
main_Compute_62_out_1 = NULL;
main_Route_23_out_1 = NULL;
main_Route_23_out_2 = NULL;
main_Transmitter_39_out_1 = NULL;
main_Receiver_104_out_1 = NULL;
main_Statistics_7_out_1 = NULL;
main_Inquire_29_in_2 = "items";
main_Inquire_29_in_3 = NULL;
main_Inquire_29_out_1 = NULL;
main_Compute_80_in_1 = "int($1 - $1*$0)";
main_Compute_80_out_1 = NULL;
main_Route_29_out_1 = NULL;
main_Format_22_in_1 = "%d particle(s) will be displayed";
main_Format_22_out_1 = NULL;
main_Message_12_in_2 = NULL;
main_Message_12_in_3 = 1;
main_Reset_3_in_1 = "main_Reset_3_out_1";
main_Reset_3_in_2 = 0;
main_Reset_3_in_3 = 0;
main_Reset_3_in_4 = NULL;
main_Reset_3_in_5 = NULL;
main_Reset_3_in_6 = NULL;
main_Reset_3_out_1 = 0;
main_Toggle_19_in_1 = "Toggle_19";
main_Toggle_19_in_2 = 1;
main_Toggle_19_in_3 = 0;
main_Toggle_19_in_4 = NULL;
main_Toggle_19_in_5 = NULL;
main_Toggle_19_in_6 = NULL;
main_Toggle_19_out_1 = 1;
main_Toggle_20_in_1 = "Toggle_20";
main_Toggle_20_in_2 = 2;
main_Toggle_20_in_3 = 0;
main_Toggle_20_in_4 = NULL;
main_Toggle_20_in_5 = NULL;
main_Toggle_20_in_6 = NULL;
main_Toggle_20_out_1 = 2;
main_Scalar_19_in_1 = "Scalar_19";
main_Scalar_19_in_2 = NULL;
main_Scalar_19_in_3 = 1.0 ;
main_Scalar_19_in_4 = 0;
main_Scalar_19_in_5 = NULL;
main_Scalar_19_in_6 = NULL;
main_Scalar_19_in_7 = NULL;
main_Scalar_19_in_8 = NULL;
main_Scalar_19_in_9 = NULL;
main_Scalar_19_in_10 = NULL;
main_Scalar_19_in_11 = NULL;
main_Scalar_19_out_1 = 1.0 ;
main_Receiver_95_out_1 = NULL;
main_String_6_out_1 = "1";
main_Receiver_87_out_1 = NULL;
main_Receiver_88_out_1 = NULL;
main_Receiver_89_out_1 = NULL;
main_Receiver_90_out_1 = NULL;
main_Receiver_91_in_1 = NULL;
main_Receiver_91_out_1 = NULL;
main_Receiver_92_out_1 = NULL;
main_Receiver_93_out_1 = NULL;
main_Inquire_24_in_2 = "camera from";
main_Inquire_24_in_3 = NULL;
main_Inquire_24_out_1 = NULL;
main_Compute2_5_in_2 = "a";
main_Compute2_5_in_4 = "b";
main_Compute2_5_in_6 = "c";
main_Compute2_5_in_8 = "p";
main_Compute2_5_in_10 = "e";
main_Compute2_5_in_12 = "f";
main_Compute2_5_in_14 = "v";
main_Compute2_5_out_1 = NULL;
main_Compute_72_in_1 = "$1?$0:$2";
main_Compute_72_out_1 = NULL;
main_Switch_45_out_1 = NULL;
main_Compute_93_in_1 = "float($0)";
main_Compute_93_out_1 = NULL;
main_Options_4_in_2 = "dep";
main_Options_4_in_3 = "positions";
main_Options_4_out_1 = NULL;
main_Get_16_in_1 = NULL;
main_Get_16_in_2 = NULL;
main_Get_16_in_3 = NULL;
main_Get_16_out_1 = NULL;
main_Get_16_out_2 = NULL;
main_Switch_46_out_1 = NULL;
main_Transmitter_46_out_1 = NULL;
main_Receiver_105_out_1 = NULL;
main_Route_25_out_1 = NULL;
main_Inquire_31_in_2 = "is vector";
main_Inquire_31_in_3 = NULL;
main_Inquire_31_out_1 = NULL;
main_Compute_84_in_1 = "$0+1";
main_Compute_84_out_1 = NULL;
main_Compute_85_in_1 = "mag($0)";
main_Compute_85_out_1 = NULL;
main_Switch_58_out_1 = NULL;
main_Statistics_5_out_1 = NULL;
main_Statistics_5_out_2 = NULL;
main_Statistics_5_out_4 = NULL;
main_Statistics_5_out_5 = NULL;
main_Histogram_3_in_2 = NULL;
main_Histogram_3_in_3 = NULL;
main_Histogram_3_in_4 = NULL;
main_Histogram_3_in_5 = NULL;
main_Histogram_3_out_2 = NULL;
main_Format_21_in_1 = "mean: %f  sigma: %f  min: %f  max: %f  median: %f";
main_Format_21_out_1 = NULL;
main_Message_11_in_2 = "message";
main_Message_11_in_3 = 1;
main_Reset_4_in_1 = "main_Reset_4_out_1";
main_Reset_4_in_2 = 0;
main_Reset_4_in_3 = 0;
main_Reset_4_in_4 = NULL;
main_Reset_4_in_5 = NULL;
main_Reset_4_in_6 = NULL;
main_Reset_4_out_1 = 0;
main_Toggle_17_in_1 = "Toggle_17";
main_Toggle_17_in_2 = 1;
main_Toggle_17_in_3 = 0;
main_Toggle_17_in_4 = NULL;
main_Toggle_17_in_5 = NULL;
main_Toggle_17_in_6 = NULL;
main_Toggle_17_out_1 = 1;
main_Receiver_101_out_1 = NULL;
main_Toggle_16_in_1 = "Toggle_16";
main_Toggle_16_in_2 = 2;
main_Toggle_16_in_3 = 0;
main_Toggle_16_in_4 = NULL;
main_Toggle_16_in_5 = NULL;
main_Toggle_16_in_6 = NULL;
main_Toggle_16_out_1 = 2;
main_Scalar_18_in_1 = "Scalar_18";
main_Scalar_18_in_2 = NULL;
main_Scalar_18_in_3 = 1.0 ;
main_Scalar_18_in_4 = 0;
main_Scalar_18_in_5 = NULL;
main_Scalar_18_in_6 = NULL;
main_Scalar_18_in_7 = NULL;
main_Scalar_18_in_8 = NULL;
main_Scalar_18_in_9 = NULL;
main_Scalar_18_in_10 = NULL;
main_Scalar_18_in_11 = NULL;
main_Scalar_18_out_1 = 1.0 ;
main_Receiver_85_out_1 = NULL;
main_String_5_out_1 = "1.0/mag(p-v)**2";
main_Receiver_79_out_1 = NULL;
main_Receiver_80_out_1 = NULL;
main_Receiver_81_out_1 = NULL;
main_Receiver_82_out_1 = NULL;
main_Receiver_83_out_1 = NULL;
main_Receiver_84_out_1 = NULL;
main_Receiver_78_out_1 = NULL;
main_Inquire_23_in_2 = "camera from";
main_Inquire_23_in_3 = NULL;
main_Inquire_23_out_1 = NULL;
main_Compute2_4_in_2 = "a";
main_Compute2_4_in_4 = "b";
main_Compute2_4_in_6 = "c";
main_Compute2_4_in_8 = "p";
main_Compute2_4_in_10 = "e";
main_Compute2_4_in_12 = "f";
main_Compute2_4_in_14 = "v";
main_Compute2_4_out_1 = NULL;
main_Compute_71_in_1 = "$1?$0:$2";
main_Compute_71_out_1 = NULL;
main_Switch_42_out_1 = NULL;
main_Inquire_26_in_2 = "is vector";
main_Inquire_26_in_3 = NULL;
main_Inquire_26_out_1 = NULL;
main_Compute_77_in_1 = "$0+1";
main_Compute_77_out_1 = NULL;
main_Compute_78_in_1 = "mag($0)";
main_Compute_78_out_1 = NULL;
main_Switch_52_out_1 = NULL;
main_Options_2_in_2 = "dep";
main_Options_2_in_3 = "positions";
main_Options_2_out_1 = NULL;
main_Construct_3_in_2 = NULL;
main_Construct_3_in_3 = NULL;
main_Construct_3_out_1 = NULL;
main_Get_13_in_1 = NULL;
main_Get_13_in_2 = NULL;
main_Get_13_in_3 = NULL;
main_Get_13_out_1 = NULL;
main_Get_13_out_2 = NULL;
main_Switch_43_out_1 = NULL;
main_Transmitter_49_out_1 = NULL;
main_Receiver_106_out_1 = NULL;
main_Route_26_out_1 = NULL;
main_Statistics_4_out_1 = NULL;
main_Statistics_4_out_2 = NULL;
main_Statistics_4_out_4 = NULL;
main_Statistics_4_out_5 = NULL;
main_Histogram_2_in_2 = NULL;
main_Histogram_2_in_3 = NULL;
main_Histogram_2_in_4 = NULL;
main_Histogram_2_in_5 = NULL;
main_Histogram_2_out_2 = NULL;
main_Format_20_in_1 = "mean: %f  sigma: %f  min: %f  max: %f  median: %f";
main_Format_20_out_1 = NULL;
main_Message_10_in_2 = "message";
main_Message_10_in_3 = 1;
main_Set_16_in_3 = NULL;
main_Selector_19_in_1 = "Selector_19";
main_Selector_19_in_2 = "Auto" ;
main_Selector_19_in_3 = 0 ;
main_Selector_19_in_4 = NULL;
main_Selector_19_in_5 = NULL;
main_Selector_19_in_6 = NULL;
main_Selector_19_in_7 = NULL;
main_Selector_19_out_1 = 0 ;
main_Compute_69_in_1 = "($0>1)+1";
main_Compute_69_out_1 = NULL;
main_Transmitter_16_out_1 = NULL;
main_Receiver_103_out_1 = NULL;
main_Toggle_22_in_1 = "Toggle_22";
main_Toggle_22_in_2 = 0;
main_Toggle_22_in_3 = 0;
main_Toggle_22_in_4 = NULL;
main_Toggle_22_in_5 = NULL;
main_Toggle_22_in_6 = NULL;
main_Toggle_22_out_1 = 0;
main_Receiver_109_out_1 = NULL;
main_Switch_57_out_1 = NULL;
main_List_1_in_2 = {" "};
main_List_1_out_1 = NULL;
main_Caption_1_in_2 = [0.02,0.98];
main_Caption_1_in_3 = NULL;
main_Caption_1_in_4 = NULL;
main_Caption_1_in_5 = NULL;
main_Caption_1_in_6 = 11;
main_Caption_1_in_7 = NULL;
main_Caption_1_in_8 = NULL;
main_Caption_1_in_9 = NULL;
main_Caption_1_out_1 = NULL;
main_Receiver_75_out_1 = NULL;
main_Selector_20_in_1 = "Selector_20";
main_Selector_20_in_2 = "Current" ;
main_Selector_20_in_3 = 1 ;
main_Selector_20_in_4 = NULL;
main_Selector_20_in_5 = NULL;
main_Selector_20_in_6 = NULL;
main_Selector_20_in_7 = NULL;
main_Selector_20_out_1 = 1 ;
main_Selector_21_in_1 = "Selector_21";
main_Selector_21_in_2 = "Points" ;
main_Selector_21_in_3 = 2 ;
main_Selector_21_in_4 = NULL;
main_Selector_21_in_5 = NULL;
main_Selector_21_in_6 = NULL;
main_Selector_21_in_7 = NULL;
main_Selector_21_out_1 = 2 ;
main_Selector_23_in_1 = "Selector_23";
main_Selector_23_in_2 = "Grey scale" ;
main_Selector_23_in_3 = 2 ;
main_Selector_23_in_4 = NULL;
main_Selector_23_in_5 = NULL;
main_Selector_23_in_6 = NULL;
main_Selector_23_in_7 = NULL;
main_Selector_23_out_1 = 2 ;
main_Selector_22_in_1 = "Selector_22";
main_Selector_22_in_2 = "User-supplied" ;
main_Selector_22_in_3 = 1 ;
main_Selector_22_in_4 = NULL;
main_Selector_22_in_5 = NULL;
main_Selector_22_in_6 = NULL;
main_Selector_22_in_7 = NULL;
main_Selector_22_out_1 = 1 ;
main_Scalar_22_in_1 = "Scalar_22";
main_Scalar_22_in_2 = NULL;
main_Scalar_22_in_3 = 0.0 ;
main_Scalar_22_in_4 = 0;
main_Scalar_22_in_5 = NULL;
main_Scalar_22_in_6 = NULL;
main_Scalar_22_in_7 = NULL;
main_Scalar_22_in_8 = NULL;
main_Scalar_22_in_9 = NULL;
main_Scalar_22_in_10 = NULL;
main_Scalar_22_in_11 = NULL;
main_Scalar_22_out_1 = 0.0 ;
main_Scalar_23_in_1 = "Scalar_23";
main_Scalar_23_in_2 = NULL;
main_Scalar_23_in_3 = 1.0 ;
main_Scalar_23_in_4 = 0;
main_Scalar_23_in_5 = NULL;
main_Scalar_23_in_6 = NULL;
main_Scalar_23_in_7 = NULL;
main_Scalar_23_in_8 = NULL;
main_Scalar_23_in_9 = NULL;
main_Scalar_23_in_10 = NULL;
main_Scalar_23_in_11 = NULL;
main_Scalar_23_out_1 = 1.0 ;
main_Compute_75_in_1 = "min($0,$1)";
main_Compute_75_out_1 = NULL;
main_Statistics_6_out_4 = NULL;
main_Statistics_6_out_5 = NULL;
main_Switch_49_out_1 = NULL;
main_Compute_76_in_1 = "max($0,$1)";
main_Compute_76_out_1 = NULL;
main_Switch_50_out_1 = NULL;
main_AutoColor_1_in_2 = NULL;
main_AutoColor_1_in_3 = NULL;
main_AutoColor_1_in_4 = NULL;
main_AutoColor_1_in_5 = NULL;
main_AutoColor_1_in_6 = NULL;
main_AutoColor_1_in_9 = NULL;
main_AutoColor_1_in_10 = NULL;
main_AutoColor_1_out_1 = NULL;
main_AutoColor_1_out_2 = NULL;
main_AutoGrayScale_1_in_2 = NULL;
main_AutoGrayScale_1_in_3 = NULL;
main_AutoGrayScale_1_in_4 = NULL;
main_AutoGrayScale_1_in_5 = NULL;
main_AutoGrayScale_1_in_6 = NULL;
main_AutoGrayScale_1_in_9 = NULL;
main_AutoGrayScale_1_in_10 = NULL;
main_AutoGrayScale_1_out_1 = NULL;
main_AutoGrayScale_1_out_2 = NULL;
main_Switch_51_out_1 = NULL;
main_Extract_9_in_2 = "colors";
main_Extract_9_out_1 = NULL;
main_Transmitter_44_out_1 = NULL;
main_Receiver_98_out_1 = NULL;
main_Receiver_99_out_1 = NULL;
main_Receiver_96_out_1 = NULL;
main_Receiver_97_out_1 = NULL;
main_Construct_2_in_2 = NULL;
main_Construct_2_in_3 = NULL;
main_Construct_2_out_1 = NULL;
main_Remove_1_in_2 = "connections";
main_Remove_1_out_1 = NULL;
main_Replace_3_in_3 = " ";
main_Replace_3_in_4 = "invalid positions";
main_Replace_3_out_1 = NULL;
main_Replace_4_in_3 = " ";
main_Replace_4_in_4 = "colors";
main_Replace_4_out_1 = NULL;
main_Include_1_in_2 = NULL;
main_Include_1_in_3 = NULL;
main_Include_1_in_4 = NULL;
main_Include_1_in_5 = NULL;
main_Include_1_out_1 = NULL;
main_Scalar_25_in_1 = "Scalar_25";
main_Scalar_25_in_2 = NULL;
main_Scalar_25_in_3 = 1.0 ;
main_Scalar_25_in_4 = 0;
main_Scalar_25_in_5 = NULL;
main_Scalar_25_in_6 = NULL;
main_Scalar_25_in_7 = NULL;
main_Scalar_25_in_8 = NULL;
main_Scalar_25_in_9 = NULL;
main_Scalar_25_in_10 = NULL;
main_Scalar_25_in_11 = NULL;
main_Scalar_25_out_1 = 1.0 ;
main_Color_1_in_2 = NULL;
main_Color_1_in_4 = NULL;
main_Color_1_in_5 = NULL;
main_Color_1_out_1 = NULL;
main_Transmitter_47_out_1 = NULL;
main_Receiver_100_out_1 = NULL;
main_Scalar_20_in_1 = "Scalar_20";
main_Scalar_20_in_2 = NULL;
main_Scalar_20_in_3 = 1.0 ;
main_Scalar_20_in_4 = 0;
main_Scalar_20_in_5 = NULL;
main_Scalar_20_in_6 = NULL;
main_Scalar_20_in_7 = NULL;
main_Scalar_20_in_8 = NULL;
main_Scalar_20_in_9 = NULL;
main_Scalar_20_in_10 = NULL;
main_Scalar_20_in_11 = NULL;
main_Scalar_20_out_1 = 1.0 ;
main_Toggle_21_in_1 = "Toggle_21";
main_Toggle_21_in_2 = 2;
main_Toggle_21_in_3 = 1;
main_Toggle_21_in_4 = NULL;
main_Toggle_21_in_5 = NULL;
main_Toggle_21_in_6 = NULL;
main_Toggle_21_out_1 = 2;
main_Scalar_21_in_1 = "Scalar_21";
main_Scalar_21_in_2 = NULL;
main_Scalar_21_in_3 = 1.0 ;
main_Scalar_21_in_4 = 0;
main_Scalar_21_in_5 = NULL;
main_Scalar_21_in_6 = NULL;
main_Scalar_21_in_7 = NULL;
main_Scalar_21_in_8 = NULL;
main_Scalar_21_in_9 = NULL;
main_Scalar_21_in_10 = NULL;
main_Scalar_21_in_11 = NULL;
main_Scalar_21_out_1 = 1.0 ;
main_Switch_47_in_3 = NULL;
main_Switch_47_out_1 = NULL;
main_Glyph_1_in_2 = NULL;
main_Glyph_1_in_5 = NULL;
main_Glyph_1_in_6 = NULL;
main_Glyph_1_in_7 = NULL;
main_Glyph_1_out_1 = NULL;
main_ShowPositions_1_in_2 = NULL;
main_ShowPositions_1_out_1 = NULL;
main_Switch_48_out_1 = NULL;
main_ShowBox_1_out_1 = NULL;
main_ShowBox_1_out_2 = NULL;
main_Get_11_in_1 = NULL;
main_Get_11_in_2 = NULL;
main_Get_11_in_3 = NULL;
main_Get_11_out_1 = NULL;
main_Get_11_out_2 = NULL;
main_Switch_41_in_3 = NULL;
main_Switch_41_out_1 = NULL;
main_Collect_3_out_1 = NULL;
main_Route_24_out_1 = NULL;
main_Mark_5_in_2 = "box";
main_Mark_5_out_1 = NULL;
main_Compute_73_in_1 = "1.1*($0-$1)+$1";
main_Compute_73_out_1 = NULL;
main_Unmark_4_in_2 = "box";
main_Unmark_4_out_1 = NULL;
main_Selector_24_in_1 = "Selector_24";
main_Selector_24_in_2 = "no" ;
main_Selector_24_in_3 = 0 ;
main_Selector_24_in_4 = NULL;
main_Selector_24_in_5 = NULL;
main_Selector_24_in_6 = NULL;
main_Selector_24_in_7 = NULL;
main_Selector_24_out_1 = 0 ;
main_Switch_53_out_1 = NULL;
main_Scalar_24_in_1 = "Scalar_24";
main_Scalar_24_in_2 = NULL;
main_Scalar_24_in_3 = 0.5 ;
main_Scalar_24_in_4 = 0;
main_Scalar_24_in_5 = 0.0;
main_Scalar_24_in_6 = 100.0;
main_Scalar_24_in_7 = 0.05;
main_Scalar_24_in_8 = "absolute";
main_Scalar_24_in_9 = 2;
main_Scalar_24_in_10 = NULL;
main_Scalar_24_in_11 = "Colour bar label scale";
main_Scalar_24_out_1 = 0.5 ;
main_ColorBar_1_in_2 = [1,0.5];
main_ColorBar_1_in_3 = [250,15];
main_ColorBar_1_in_4 = NULL;
main_ColorBar_1_in_5 = 8;
main_ColorBar_1_in_8 = "Colour data";
main_ColorBar_1_in_9 = NULL;
main_ColorBar_1_in_10 = NULL;
main_ColorBar_1_in_12 = NULL;
main_ColorBar_1_out_1 = NULL;
main_Switch_54_out_1 = NULL;
main_Transmitter_48_out_1 = NULL;
main_Receiver_102_out_1 = NULL;
main_Collect_4_out_1 = NULL;
main_Route_27_out_1 = NULL;
main_Transmitter_42_out_1 = NULL;
main_Receiver_73_out_1 = NULL;
main_Inquire_27_in_2 = NULL;
main_Inquire_27_in_3 = NULL;
main_Inquire_27_out_1 = NULL;
main_Inquire_28_in_2 = "is empty";
main_Inquire_28_in_3 = NULL;
main_Inquire_28_out_1 = NULL;
main_Compute_79_in_1 = "!($0||$1)";
main_Compute_79_out_1 = NULL;
main_Route_28_out_1 = NULL;
main_Compute_63_in_1 = "$0 == 0 || $0 == 1";
main_Compute_63_out_1 = NULL;
main_Get_10_in_3 = NULL;
main_Get_10_out_1 = NULL;
main_Get_10_out_2 = NULL;
main_ClipBox_1_out_1 = NULL;
main_Switch_40_out_1 = NULL;
main_Compute_66_in_1 = "$0+1";
main_Compute_66_out_1 = NULL;
main_Receiver_107_out_1 = NULL;
main_AutoCamera_2_in_3 = NULL;
main_AutoCamera_2_in_4 = 350;
main_AutoCamera_2_in_5 = NULL;
main_AutoCamera_2_in_6 = NULL;
main_AutoCamera_2_in_7 = NULL;
main_AutoCamera_2_in_8 = NULL;
main_AutoCamera_2_in_9 = NULL;
main_AutoCamera_2_out_1 = NULL;
main_Receiver_51_out_1 = NULL;
main_Scalar_17_in_1 = "Scalar_17";
main_Scalar_17_in_2 = NULL;
main_Scalar_17_in_3 = 2.0 ;
main_Scalar_17_in_4 = 0;
main_Scalar_17_in_5 = NULL;
main_Scalar_17_in_6 = NULL;
main_Scalar_17_in_7 = NULL;
main_Scalar_17_in_8 = NULL;
main_Scalar_17_in_9 = NULL;
main_Scalar_17_in_10 = NULL;
main_Scalar_17_in_11 = NULL;
main_Scalar_17_out_1 = 2.0 ;
main_Inquire_22_in_2 = "camera to";
main_Inquire_22_in_3 = NULL;
main_Inquire_22_out_1 = NULL;
main_Inquire_21_in_2 = "camera from";
main_Inquire_21_in_3 = NULL;
main_Inquire_21_out_1 = NULL;
main_Inquire_20_in_2 = "camera up";
main_Inquire_20_in_3 = NULL;
main_Inquire_20_out_1 = NULL;
main_Compute_50_in_1 = "norm( tan($0/57.3)*mag($1-$2)*norm( cross( $1-$2, $3 ) ) + $2 )*mag($2)";
main_Compute_50_out_1 = NULL;
main_UpdateCamera_1_in_2 = NULL;
main_UpdateCamera_1_in_4 = NULL;
main_UpdateCamera_1_in_5 = NULL;
main_UpdateCamera_1_in_6 = NULL;
main_UpdateCamera_1_in_7 = NULL;
main_UpdateCamera_1_in_8 = NULL;
main_UpdateCamera_1_in_9 = NULL;
main_UpdateCamera_1_in_10 = NULL;
main_UpdateCamera_1_out_1 = NULL;
main_Switch_39_in_3 = NULL;
main_Switch_39_out_1 = NULL;
main_Compute_65_in_1 = "$0 != 1";
main_Compute_65_out_1 = NULL;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title) -> (
        object,
        camera)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            defaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 3, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 4, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 5, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($1 == $2) && ($3 == $4)) ? 2 : 3",
            RECenable,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 1, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 3, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_2_in_1 = "Image_2";
main_Image_2_in_3 = "X8,,";
main_Image_2_in_4 = 1;
main_Image_2_in_5 = [24.5 59.5 59.5];
main_Image_2_in_6 = [282.85 317.85 377.712];
main_Image_2_in_7 = 259.648;
main_Image_2_in_8 = 350;
main_Image_2_in_9 = 0.75;
main_Image_2_in_10 = [0 1 0];
main_Image_2_in_11 = NULL;
main_Image_2_in_12 = 0;
main_Image_2_in_13 = NULL;
main_Image_2_in_14 = 1;
main_Image_2_in_15 = NULL;
main_Image_2_in_16 = NULL;
main_Image_2_in_17 = NULL;
main_Image_2_in_18 = NULL;
main_Image_2_in_19 = 0;
main_Image_2_in_22 = NULL;
main_Image_2_in_23 = NULL;
main_Image_2_in_25 = NULL;
main_Image_2_in_26 = NULL;
main_Image_2_in_27 = NULL;
main_Image_2_in_28 = NULL;
main_Image_2_in_29 = 0;
main_Image_2_in_30 = {"x", "y", "z"};
main_Image_2_in_31 = 15;
main_Image_2_in_33 = 1;
main_Image_2_in_34 = 0;
main_Image_2_in_35 = NULL;
main_Image_2_in_36 = 0;
main_Image_2_in_37 = {"clear", "grey5", "yellow", "white"};
main_Image_2_in_38 = {"background", "grid", "ticks", "labels"};
main_Image_2_in_39 = 0.400000;
main_Image_2_in_40 = NULL;
main_Image_2_in_41 = "none";
main_Image_2_in_42 = NULL;
main_Image_2_out_1 = NULL;
main_Image_2_out_2 = NULL;
main_Set_14_in_3 = NULL;
main_Set_13_in_3 = NULL;
main_Set_11_in_3 = NULL;
main_Set_10_in_3 = NULL;
main_Format_17_in_1 = " ";
main_Format_17_out_1 = NULL;
main_Set_7_in_3 = NULL;
main_Receiver_52_out_1 = NULL;
main_Format_15_in_1 = "You havn't specified a file format on control panel \"Select input file...\"";
main_Format_15_out_1 = NULL;
main_Route_22_out_1 = NULL;
main_Message_7_in_2 = "warning";
main_Message_7_in_3 = 1;
main_Format_2_in_1 = "For help on running this demo, select  \"Application comment\" \nfrom the \"Help\" menu in the Image window.";
main_Format_2_out_1 = NULL;
main_Message_1_in_2 = NULL;
main_Message_1_in_3 = 1;
main_Transmitter_13_out_1 = NULL;
main_Receiver_22_out_1 = NULL;
main_Receiver_21_out_1 = NULL;
main_Render_1_in_3 = NULL;
main_Render_1_out_1 = NULL;
main_Toggle_3_in_1 = "Toggle_3";
main_Toggle_3_in_2 = 0;
main_Toggle_3_in_3 = 0;
main_Toggle_3_in_4 = NULL;
main_Toggle_3_in_5 = NULL;
main_Toggle_3_in_6 = NULL;
main_Toggle_3_out_1 = 0;
main_Reset_2_in_1 = "main_Reset_2_out_1";
main_Reset_2_in_2 = 0;
main_Reset_2_in_3 = 0;
main_Reset_2_in_4 = NULL;
main_Reset_2_in_5 = NULL;
main_Reset_2_in_6 = NULL;
main_Reset_2_out_1 = 0;
main_Compute_11_in_1 = "max($0,$1)";
main_Compute_11_out_1 = NULL;
main_Route_2_out_1 = NULL;
main_String_1_out_1 = NULL;
main_Format_18_in_1 = "No positions left to display!";
main_Format_18_out_1 = NULL;
main_Message_8_in_2 = "warning";
main_Message_8_in_3 = 1;
main_Selector_27_in_1 = "Selector_27";
main_Selector_27_in_2 = "Mean data values" ;
main_Selector_27_in_3 = 1 ;
main_Selector_27_in_4 = NULL;
main_Selector_27_in_5 = NULL;
main_Selector_27_in_6 = NULL;
main_Selector_27_in_7 = NULL;
main_Selector_27_out_1 = 1 ;
main_Selector_26_in_1 = "Selector_26";
main_Selector_26_in_2 = "Binning" ;
main_Selector_26_in_3 = 1 ;
main_Selector_26_in_4 = NULL;
main_Selector_26_in_5 = NULL;
main_Selector_26_in_6 = NULL;
main_Selector_26_in_7 = NULL;
main_Selector_26_out_1 = 1 ;
main_Selector_25_in_1 = "Selector_25";
main_Selector_25_in_2 = "Input data" ;
main_Selector_25_in_3 = 1 ;
main_Selector_25_in_4 = NULL;
main_Selector_25_in_5 = NULL;
main_Selector_25_in_6 = NULL;
main_Selector_25_in_7 = NULL;
main_Selector_25_out_1 = 1 ;
main_Receiver_111_out_1 = NULL;
main_Receiver_110_out_1 = NULL;
main_Remove_2_in_2 = "colors";
main_Remove_2_out_1 = NULL;
main_Inquire_32_in_2 = "has component";
main_Inquire_32_in_3 = "opacities";
main_Inquire_32_out_1 = NULL;
main_Compute_86_in_1 = "$0+1";
main_Compute_86_out_1 = NULL;
main_Remove_3_in_2 = "opacities";
main_Remove_3_out_1 = NULL;
main_Switch_59_out_1 = NULL;
main_Switch_60_out_1 = NULL;
main_Select_11_in_2 = NULL;
main_Select_11_in_3 = NULL;
main_Select_11_out_1 = NULL;
main_Switch_64_out_1 = NULL;
main_Scalar_26_in_1 = "Scalar_26";
main_Scalar_26_in_2 = NULL;
main_Scalar_26_in_3 = 0.0;
main_Scalar_26_in_4 = 0;
main_Scalar_26_in_5 = NULL;
main_Scalar_26_in_6 = NULL;
main_Scalar_26_in_7 = NULL;
main_Scalar_26_in_8 = NULL;
main_Scalar_26_in_9 = NULL;
main_Scalar_26_in_10 = NULL;
main_Scalar_26_in_11 = NULL;
main_Scalar_26_out_1 = 0.0;
main_Mark_6_in_2 = "positions";
main_Mark_6_out_1 = NULL;
main_Compute_90_in_1 = "$0.x";
main_Compute_90_out_1 = NULL;
main_Statistics_8_out_4 = NULL;
main_Statistics_8_out_5 = NULL;
main_Integer_4_in_1 = "Integer_4";
main_Integer_4_in_2 = NULL;
main_Integer_4_in_3 = 50 ;
main_Integer_4_in_4 = 0;
main_Integer_4_in_5 = NULL;
main_Integer_4_in_6 = NULL;
main_Integer_4_in_7 = NULL;
main_Integer_4_in_8 = NULL;
main_Integer_4_in_9 = NULL;
main_Integer_4_in_10 = NULL;
main_Integer_4_in_11 = NULL;
main_Integer_4_out_1 = 50 ;
main_Compute_92_in_1 = "$0>0?$0:($2-$1)/$3";
main_Compute_92_out_1 = NULL;
main_SXConstruct_1_in_2 = NULL;
main_SXConstruct_1_in_3 = NULL;
main_SXConstruct_1_in_5 = NULL;
main_SXConstruct_1_out_1 = NULL;
main_SXBin_1_in_3 = NULL;
main_SXBin_1_out_1 = NULL;
main_Integer_3_in_1 = "Integer_3";
main_Integer_3_in_2 = NULL;
main_Integer_3_in_3 = 5 ;
main_Integer_3_in_4 = 0;
main_Integer_3_in_5 = NULL;
main_Integer_3_in_6 = NULL;
main_Integer_3_in_7 = NULL;
main_Integer_3_in_8 = NULL;
main_Integer_3_in_9 = NULL;
main_Integer_3_in_10 = NULL;
main_Integer_3_in_11 = NULL;
main_Integer_3_out_1 = 5 ;
main_SXRegrid_1_in_4 = NULL;
main_SXRegrid_1_in_5 = NULL;
main_SXRegrid_1_in_6 = NULL;
main_SXRegrid_1_in_7 = NULL;
main_SXRegrid_1_in_8 = NULL;
main_SXRegrid_1_out_1 = NULL;
main_Switch_61_out_1 = NULL;
main_SXBin_2_in_3 = 2;
main_SXBin_2_out_1 = NULL;
main_Enumerate_1_in_1 = 1;
main_Enumerate_1_in_2 = NULL;
main_Enumerate_1_in_4 = 1;
main_Enumerate_1_in_5 = NULL;
main_Enumerate_1_out_1 = NULL;
main_Compute_87_in_1 = "$0>($1-2)?( 0.2387324*($1-1) )**0.3333333:0";
main_Compute_87_out_1 = NULL;
main_SXRegrid_2_in_4 = NULL;
main_SXRegrid_2_in_6 = -3.;
main_SXRegrid_2_in_7 = NULL;
main_SXRegrid_2_in_8 = 2;
main_SXRegrid_2_out_1 = NULL;
main_Switch_62_out_1 = NULL;
main_Switch_63_out_1 = NULL;
main_Reset_6_in_1 = "main_Reset_6_out_1";
main_Reset_6_in_2 = 0;
main_Reset_6_in_3 = 0;
main_Reset_6_in_4 = NULL;
main_Reset_6_in_5 = NULL;
main_Reset_6_in_6 = NULL;
main_Reset_6_out_1 = 0;
main_String_7_out_1 = NULL;
main_Inquire_33_in_2 = NULL;
main_Inquire_33_in_3 = NULL;
main_Inquire_33_out_1 = NULL;
main_Compute_88_in_1 = "$0==1 && $1==0";
main_Compute_88_out_1 = NULL;
main_Route_30_out_1 = NULL;
main_Receiver_112_out_1 = NULL;
main_Format_23_out_1 = NULL;
main_Export_1_in_3 = NULL;
Executive("product version 3 1 0");
$sync

sequence main();
play;
