//
// time: Fri Nov 10 16:49:04 1995
//
// version: 3.0.0 (format), 3.1.0 (DX)
//
//
// panel[6]: position = (0.0107,0.1094), size = 0.2598x0.2253, startup = 0, devstyle = 0
// title: value = Select input file...
// comment: Enter a file name directly into the data entry box, or press the "..." button at the right hand end of the data entry box to select a file by browsing through your directories.
// comment: If you have no data you could try /usr/lpp/dx/samples/data/velocity.dx.
// comment: 
// comment: DX files may contain more than one quantity (or "field" in DX parlance) , and the fields to be used may be selected using other controls. 
// comment: 
// comment: 
// comment: 
// comment: The data format MUST be specified using the "Data format:" menu  :-
// comment: 
// comment: "DX native" - These are files created by DX or by the "$SX_DIR/ndf2dx" application. They usually have a file extension of ".dx".  
// comment: 
// comment: "DX general" - These are text files describing data typically produced by a users own programs. The data itself can be either ASCII, or binary (so long as it is not produced by a Fortran program) , and may reside in another file referenced from within the supplied description file. See the DX User's Guide for details of the description file.
// comment: 
// comment: "DX general (Fortran binary)" - These are identical to "DX general" files, except that they refer to binary data created by a Fortran program, which consequently contains record control bytes in addition to the data bytes. The description file is identical to that for non-Fortran data.
// comment: 
// comment: "Starlink NDF" - These are standard Starlink NDFs, or any format which can be converted to NDF using the "on-the-fly" conversion facilities described in SSN/20
// comment: (note, SSN not SUN). The $SX_DIR/ndf2dx application is used to convert the file into native dx format.
// comment:  
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 50, height = 50, align = NN
//
// panel[12]: position = (0.0117,0.7148), size = 0.2373x0.2669, startup = 0, devstyle = 0
// title: value = Mpeg control
// comment: If  displayed images are  to be captured as frames of a movie, press the "Save  frames" button and re-execute the network. 
// comment: 
// comment: Once all frames have been saved, release the "Save frames" button,  enter a file name (remembering to press <RETURN> within the data entry box), press the "Create mpeg" button, and re-execute the network.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 20, height = 20, align = UL
//
// panel[16]: position = (0.0244,0.0625), size = 0.7910x0.8659, startup = 0, devstyle = 0
// title: value = Streamline positions...
// comment: This panel controls the number of stream lines displayed, their starting positions and maximum lengths. The stream lines are defined by the field selected with the "Field to define streamlines:" button, and this field must contain a vector quantity.
// comment: 
// comment: The stream line starting positions can be specified in three ways, as selected by the "Method" button:
// comment: 
// comment: 1) "Keyboard" - The positions are entered using the controls at the lower left of the panel, under the heading "Keyboard positions".  To add a new position, enter the x, y and z co-ordinates in the three "slider" boxes at the bottom, and then press "Add". To delete a position, click on the line holding the position  in the panel just above the "Add" and "Delete" buttons, and then press "Delete".
// comment: 
// comment: 2) "Grid" - An evenly spaced grid of positions is used as defined by the controlls at the lower right of the panel. The volume enclosing the grid is defined with "Grid lower bounds:" and "Grid upper bounds:", and the number of positions along each axis is defined with "No. of grid points:". 
// comment: 
// comment: 3) "Probes" - Positions are given using the cursor to control "probes" in the image window. Press "View control" in the "Options" menu of the Image window. Then select "Cursors" using the "Mode" button in the "View control" dialogue box. Position the arrow cursor somewhere over the image and double click on the left button. 
// comment: This should produce a small square "probe" which can be dragged around the 3-d volume represented by the displayed image. To do this point at the probe with the cursor, press the left mouse button and at the same time move the mouse. Note, you can only move the probe parallel to one of the axes at any one time. Spots are shown on a bounding box indicating the projection of the probe position onto the faces of the bounding box. 
// comment: Many probes may be introduced into the volume in this way. To delete a probe, point at it with the cursor and double click on the left mouse button again. When all the required probes have been positioned, re-execute the network to create the corresponding stream lines.
// comment: 
// comment: Once the positions have been defined by one of the above methods, they can be modified by entering an algebraic expression into the "Expression" box. This is an expression suitable for use by the "Compute" module (see the DX User's Reference Guide for details), in which the symbol "p" represents the original positions. For instance the expression "p+[0,1,0]" increments all the positions by 1 in the y direction. The default expression "p" leaves the positions unchanged. 
// comment: 
// comment: The symbol "i" can be used to represent the frame number within a sequence, starting at 1.  For instance, the expression "p+[i-1,0,0]" increments the stream line starting positions by 1 along the x axis for each frame in the sequence. 
// comment: The number of frames in the sequence is set in the "No. of frames" box. A sequence of more than one frame can be controlled using the "Sequencer control panel", which should automatically appear if "No. of frames" is larger than 1. This panel contains controls similar to a standard video recorder. To start the sequence, press the "play" button (an arrow pointing to the right). A sequence of 1 frame isn't really a sequence at all and is created as normal using the "execute" menu.
// comment: 
// comment: Stream lines end when they pass outside the bounding box, reach a point where the velocity has zero magnitude,or exceed the time given in the "Max. time" box. The units of time are defined by the data (i.e. a point moving at unit speed moves a unit distance in unit time). 
//
//
// decorator Separator	pos=(0,188) size=761x8
// decorator Separator	pos=(0,313) size=356x8
// decorator Separator	pos=(397,206) size=8x400
// decorator Label	pos=(721,231) size=19x28, value = x
// decorator Label	pos=(721,262) size=20x28, value = y
// decorator Label	pos=(721,300) size=18x28, value = z
// decorator Label	pos=(721,375) size=19x28, value = x
// decorator Label	pos=(721,419) size=20x28, value = y
// decorator Label	pos=(721,450) size=18x28, value = z
// decorator Label	pos=(721,531) size=19x28, value = x
// decorator Label	pos=(721,562) size=20x28, value = y
// decorator Label	pos=(721,594) size=18x28, value = z
// decorator Label	pos=(0,494) size=19x28, value = x
// decorator Label	pos=(0,531) size=20x28, value = y
// decorator Label	pos=(0,562) size=18x28, value = z
// workspace: width = 807, height = 623
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[17]: position = (0.0332,0.0924), size = 0.3496x0.2930, startup = 0, devstyle = 0
// title: value = Display control...
// comment: A yellow  box is displayed which encloses the entire data volume if the "Display bounding box" button is lit.
// comment: 
// comment: The size of the colour bar annotation  can be changed by entering a value in the "Scale for colour bar labels" box. The default size is multiplied by this factor. The default size depends on the distance between tick marks and so varies with the data range. Note, a colour bar is only displayed if the streamlines are coloured to show some data value (see the "Streamline colours..." control panel).  
// comment: 
// comment: The streamlines can be shown as thin lines, tubes or ribbons, and the "Rendering style" button is used to select the method to use. Ribbons can show twist in the vector field.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[18]: position = (0.0137,0.0482), size = 0.3682x0.5195, startup = 0, devstyle = 0
// title: value = Streamline colours...
// comment: If the "Ignore colour data" button is lit, the stream lines are coloured a uniform yellow colour irresecptive of the settings of the other controls on this panel. Otherwise the quantity selected using the "Field holding colour data" button is used to determine the colour  at each point of the streamline.
// comment: 
// comment: If the "Use default scaling for colour data" button is lit, the colour scaling is set so that the  minimum data value along any of the displayed streamlines is shown as blue, and the maximum value is shown as red.
// comment: 
// comment: If the "Use default scaling for colour data" button is not lit, the data values entered by the user  in the two boxes at the bottom of the panel are used to define blue and red. Any data values outside this range will be shown as gaps in the streamlines.
// comment: 
// comment: If the specified field is a vector quantity then the magnitude of the vector is used to determine the colour.  The common logarithm of the data is used to define the colour instead of the data itself  if the "Use common log of colour data" button is lit.
//
//
// decorator Separator	pos=(0,90) size=377x8
// decorator Separator	pos=(0,241) size=377x8
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[19]: position = (0.0234,0.0964), size = 0.3564x0.4076, startup = 0, devstyle = 0
// title: value = Iso-surface control...
// comment: If the "Display iso-surface" button is pressed, an iso-surface is displayed together with  the stream lines. The iso-surface shows a surface of constant value in the quantity selected using the "Field to define iso-surface" button, which may be a scalar or vector quantity. 
// comment: 
// comment: If the "Use default iso-surface value" button is lit, the median data value is used to define the iso-surface. Otherwise,  the data value entered in the "Iso-surface data value:" box is used. For vector fields this should be  the vector magnitude on the surface.
// comment: 
// comment: The surface has a uniform blue-grey colour, and it's  opacity can be set using the "Iso-surface opacity" data entry box. A value of 0.0 produces a completely clear (i.e. invisible) surface, and a value 1.0 produces a completely opaque surface.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[20]: position = (0.0410,0.3424), size = 0.2813x0.1823, startup = 0, devstyle = 0
// title: value = Auto rotation...
// comment: If the "Enable auto-rotation" button is lit, each displayed image is rotated in 3-D by the number of degrees given in the "Rotation speed:" box relative to the previous image. If the "Reset" button is lit the view point resets to the original view point. 
// comment: 
// comment: The rotation is around a great circle centred on the "to point" of the current camera. This is usually the centre of the object, but this can be changed using the "View control" facilities of the Image window.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 50, height = 50, align = NN
//
// interactor Selector[6]: num_components = 1, value = 0 
// selections: maximum = 5, current = 4 
// option[0]: name = "Starlink NDF", value = 4
// option[1]: name = "DX general (Fortran binary)", value = 3
// option[2]: name = "DX native", value = 1
// option[3]: name = "DX general ", value = 2
// option[4]: name = "NULL", value = 0
// instance: panel = 6, x = 21, y = 74, style = Option Menu, vertical = 1, size = 229x58
// label: value = Data format:
//
// interactor FileSelector[1]: num_components = 1, value = NULL
// instance: panel = 6, x = 4, y = 4, style = FileSelector, vertical = 1, size = 261x57
// label: value = Input file name:
// filter = ./*
//
// interactor Selector[9]: num_components = 1, value = 1 
// selections: maximum = 4, current = 1 
// option[0]: name = " ", value = 0
// option[1]: name = " ", value = 1
// option[2]: name = " ", value = 2
// option[3]: name = " ", value = 3
// instance: panel = 16, x = 0, y = 0, style = Option Menu, vertical = 0, size = 385x40
// label: value = Field to define streamlines:
//
// interactor VectorList[1]: num_components = 3, value = {[0 0 0 ] [12.25 29.75 29.75 ] [24.5 59.5 59.5 ] [36.75 89.25 89.25 ] [49 119 119 ] }
// component[0]: minimum = 0, maximum = 49, global increment = 0.5, decimal = 1, global continuous = 0
// component[1]: minimum = 0, maximum = 119, global increment = 2, decimal = 1, global continuous = 0
// component[2]: minimum = 0, maximum = 119, global increment = 2, decimal = 1, global continuous = 0
// instance: panel = 16, x = 29, y = 349, style = List Editor, vertical = 1, size = 306x233
// label: value = Keyboard positions:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
// local increment[1]: value = 1, mode = global
// local increment[2]: value = 1, mode = global
//
// interactor Vector[5]: num_components = 3, value = [0 0 0 ]
// component[0]: minimum = 0, maximum = 49, global increment = 0.5, decimal = 1, global continuous = 0
// component[1]: minimum = 0, maximum = 119, global increment = 2, decimal = 0, global continuous = 0
// component[2]: minimum = 0, maximum = 119, global increment = 2, decimal = 0, global continuous = 0
// instance: panel = 16, x = 446, y = 206, style = Stepper, vertical = 1, size = 174x110
// label: value = Grid lower bounds:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
// local increment[1]: value = 1, mode = global
// local increment[2]: value = 1, mode = global
//
// interactor Vector[6]: num_components = 3, value = [12 22 18 ]
// component[0]: minimum = 0, maximum = 49, global increment = 0.5, decimal = 1, global continuous = 0
// component[1]: minimum = 0, maximum = 119, global increment = 2, decimal = 0, global continuous = 0
// component[2]: minimum = 0, maximum = 119, global increment = 2, decimal = 0, global continuous = 0
// instance: panel = 16, x = 446, y = 356, style = Stepper, vertical = 1, size = 170x110
// label: value = Grid upper bounds:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
// local increment[1]: value = 1, mode = global
// local increment[2]: value = 1, mode = global
//
// interactor Vector[7]: num_components = 3, value = [4 4 4 ]
// component[0]: minimum = 1, maximum = 10, global increment = 1, decimal = 0, global continuous = 0
// component[1]: minimum = 1, maximum = 10, global increment = 1, decimal = 0, global continuous = 0
// component[2]: minimum = 1, maximum = 10, global increment = 1, decimal = 0, global continuous = 0
// instance: panel = 16, x = 446, y = 506, style = Stepper, vertical = 1, size = 166x110
// label: value = No. of grid points:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
// local increment[1]: value = 1, mode = global
// local increment[2]: value = 1, mode = global
//
// interactor Selector[14]: num_components = 1, value = 2 
// selections: maximum = 3, current = 0 
// option[0]: name = "Keyboard", value = 2
// option[1]: name = "Probes", value = 1
// option[2]: name = "Grid", value = 3
// instance: panel = 16, x = 0, y = 231, style = Option Menu, vertical = 0, size = 231x40
// label: value = Method
//
// interactor Toggle[7]: num_components = 1, value =  1  
// toggle : 0, set =  2  , reset =  1  
// instance: panel = 18, x = 4, y = 190, style = Toggle, vertical = 1, size = 266x32
// label: value = Use common log of colour data
//
// interactor Selector[12]: num_components = 1, value = 0 
// selections: maximum = 4, current = 0 
// option[0]: name = " ", value = 0
// option[1]: name = " ", value = 1
// option[2]: name = " ", value = 2
// option[3]: name = " ", value = 3
// instance: panel = 18, x = 4, y = 29, style = Option Menu, vertical = 0, size = 365x40
// label: value = Field holding colour data
//
// interactor Scalar[11]: num_components = 1, value = 0.0610657 
// component[0]: minimum = 0.0610657, maximum = 318.705, global increment = 5, decimal = 1, global continuous = 0
// instance: panel = 18, x = 4, y = 258, style = Stepper, vertical = 0, size = 306x38
// label: value = Min. colour data to use
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[12]: num_components = 1, value = 318.705 
// component[0]: minimum = 0.0610657, maximum = 318.705, global increment = 5, decimal = 1, global continuous = 0
// instance: panel = 18, x = 4, y = 320, style = Stepper, vertical = 0, size = 308x38
// label: value = Max. colour data to use
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor String[2]: num_components = 1, value = "p"
// instance: panel = 16, x = 4, y = 75, style = Text, vertical = 0, size = 802x35
// label: value = Expression:
//
// interactor Integer[1]: num_components = 1, value = 1 
// component[0]: minimum = 1, maximum = 10000, global increment = 1, decimal = 0, global continuous = 0
// instance: panel = 16, x = 0, y = 119, style = Stepper, vertical = 0, size = 257x38
// label: value = No. of frames:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// node Sequencer[1]:
// vcr[1]: min = 0, max = 10, beg = 0, end = 10, cur = 0, inc = 1, loop = off, step = off, pal = off
// window: position = (0.6367,0.7669), size = 0.2734x0.1042
//
// interactor Scalar[16]: num_components = 1, value = 25000.0 
// component[0]: minimum = 0, maximum = 25000, global increment = 1, decimal = 2, global continuous = 0
// instance: panel = 16, x = 429, y = 119, style = Stepper, vertical = 0, size = 198x38
// label: value = Max. time:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Selector[13]: num_components = 1, value = 3 
// selections: maximum = 3, current = 1 
// option[0]: name = "thin lines", value = 1
// option[1]: name = "tubes", value = 3
// option[2]: name = "ribbons", value = 2
// instance: panel = 17, x = 4, y = 144, style = Option Menu, vertical = 0, size = 236x40
// label: value = Rendering style:
//
// interactor Toggle[8]: num_components = 1, value =  1  
// toggle : 1, set =  1  , reset =  2  
// instance: panel = 18, x = 4, y = 108, style = Toggle, vertical = 1, size = 180x32
// label: value = Ignore colour data
//
// interactor Toggle[9]: num_components = 1, value = 1
// toggle : 1, set = 1, reset = 2
// instance: panel = 18, x = 4, y = 151, style = Toggle, vertical = 1, size = 288x32
// label: value = Use default scaling for colour data
//
// node Colormap[2]:
// input[1]: defaulting = 0, value = { [0.0 0.666667] [1.0 0.0] }
// input[2]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[3]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[4]: defaulting = 0, value = { [0.0 1.0] [1.0 1.0] }
// input[5]: defaulting = 0, value = "Colormap_2"
// input[7]: defaulting = 1, value = 0.22941762
// input[8]: defaulting = 1, value = 81.7435
// input[9]: defaulting = 1, value = 20
// input[12]: defaulting = 0, value = { 0.22941762 81.7435 }
// input[17]: defaulting = 0, value = 0.22941762
// input[18]: defaulting = 0, value = 81.7435
// window: position = (31.9990,42.6654), size = 31.9990x42.6654
//
// interactor Toggle[5]: num_components = 1, value = 1
// toggle : 1, set = 1, reset = 0
// instance: panel = 17, x = 4, y = 6, style = Toggle, vertical = 1, size = 209x32
// label: value = Display bounding box
//
// interactor Scalar[13]: num_components = 1, value = 0.6 
// component[0]: minimum = 0, maximum = 100, global increment = 0.05, decimal = 2, global continuous = 0
// instance: panel = 17, x = 4, y = 72, style = Stepper, vertical = 0, size = 352x38
// label: value = Scale for colour bar labels
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Toggle[10]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 19, x = 4, y = 3, style = Toggle, vertical = 1, size = 177x32
// label: value = Display iso-surface: 
//
// interactor Selector[15]: num_components = 1, value = 3 
// selections: maximum = 4, current = 3 
// option[0]: name = " ", value = 0
// option[1]: name = " ", value = 1
// option[2]: name = " ", value = 2
// option[3]: name = " ", value = 3
// instance: panel = 19, x = 4, y = 112, style = Option Menu, vertical = 0, size = 360x40
// label: value = Field to define iso-surface: 
//
// interactor Toggle[11]: num_components = 1, value = 1
// toggle : 1, set = 1, reset = 0
// instance: panel = 19, x = 4, y = 44, style = Toggle, vertical = 1, size = 235x32
// label: value = Use default iso-surface value
//
// interactor Scalar[14]: num_components = 1, value = 0.012 
// component[0]: minimum = 0, maximum = 0.417231, global increment = 0.005, decimal = 3, global continuous = 0
// instance: panel = 19, x = 4, y = 183, style = Stepper, vertical = 0, size = 335x38
// label: value = Iso-surface data value: 
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[15]: num_components = 1, value = 0.3 
// component[0]: minimum = 0, maximum = 1, global increment = 0.02, decimal = 2, global continuous = 0
// instance: panel = 19, x = 4, y = 235, style = Stepper, vertical = 0, size = 335x38
// label: value = Iso-surface opacity:      
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Toggle[12]: num_components = 1, value =  1  
// toggle : 0, set =  0  , reset =  1  
// instance: panel = 20, x = 3, y = 5, style = Toggle, vertical = 1, size = 177x32
// label: value = Enable auto-rotation
//
// node Image[2]:
// depth: value = 8
// window: position = (0.4619,0.0000), size = 0.4824x0.4622
// input[1]: defaulting = 0, value = "Image_2"
// input[4]: defaulting = 0, value = 1
// input[5]: defaulting = 0, value = [24.5 59.5 59.5]
// input[6]: defaulting = 0, value = [290.965 441.038 272.648]
// input[7]: defaulting = 0, value = 272.358
// input[8]: defaulting = 0, value = 480
// input[9]: defaulting = 0, value = 0.65
// input[10]: defaulting = 0, value = [-0.51838 0.663429 -0.539578]
// input[11]: defaulting = 1, value = 29.7962
// input[12]: defaulting = 0, value = 0
// input[14]: defaulting = 0, value = 1
// input[19]: defaulting = 0, value = 0
// input[20]: defaulting = 1, value = NULL
// input[29]: defaulting = 0, value = 0
// input[30]: defaulting = 0, value = {"x", "y", "z"}
// input[31]: defaulting = 0, value = 15
// input[32]: defaulting = 1, value = {[0.000000 0.000000 0.000000] [49.000000 119.000000 119.000000]}
// input[33]: defaulting = 0, value = 0
// input[34]: defaulting = 0, value = 0
// input[35]: defaulting = 1, value = NULL
// input[36]: defaulting = 0, value = 0
// input[37]: defaulting = 0, value = {"grey30", "grey5", "yellow", "white"}
// input[38]: defaulting = 0, value = {"background", "grid", "ticks", "labels"}
// input[39]: defaulting = 0, value = 0.400000
// input[41]: defaulting = 0, value = "rotate"
//
// interactor Toggle[3]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 12, x = 56, y = 132, style = Toggle, vertical = 1, size = 115x32
// label: value = Save frames
//
// interactor Reset[2]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 12, x = 56, y = 87, style = Toggle, vertical = 1, size = 119x32
// label: value = Create mpeg
//
// interactor String[1]: num_components = 1, value = NULL
// instance: panel = 12, x = 4, y = 0, style = Text, vertical = 1, size = 235x53
// label: value = Mpeg file name
//
// interactor Reset[3]: num_components = 1, value = 2
// toggle : 0, set = 1, reset = 2
// instance: panel = 20, x = 204, y = 5, style = Toggle, vertical = 1, size = 82x32
// label: value = Reset
//
// interactor Scalar[17]: num_components = 1, value = 10.0 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 1, decimal = 5, global continuous = 0
// instance: panel = 20, x = 6, y = 42, style = Stepper, vertical = 0, size = 281x38
// label: value = Rotation speed:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
