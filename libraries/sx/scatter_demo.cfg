//
// time: Tue Nov 21 19:52:19 1995
//
// version: 3.0.0 (format), 3.1.0 (DX)
//
//
// panel[6]: position = (0.0320,0.2588), size = 0.3508x0.3037, startup = 0, devstyle = 0
// title: value = Select input file...
// comment: Enter a file name directly into the data entry box, or press the "..." button at
// comment: the right hand end of the data entry box to select a file by browsing through
// comment: your directories. If you have no data you could try the data in the files scattered_data.1.dx to scattered_data.9.dx in the directory  $INSTALL/etc/sx 
// comment: (where $INSTALL is the directory into which sx was installed - probably "/star").
// comment: These files are in DX native format.
// comment: 
// comment: If you want to look at a sequence of files, you can include the string "%d" in the file name. This string will be replaced by the current frame number returned by the 
// comment: sequencer. This number starts at 1 and increases up to the  value given in the
// comment: "Max. frame number" data entry box. To start the sequence playing, select 
// comment: "Sequencer" from the "Execute" menu on the Image window. This will pop up a new window containing controls for the sequencer. These controls are similar to those for a standard video recorder. Pressing the "play" button (an arrow pointing to the right) will start the sequence.
// comment: 
// comment: The data format MUST be specified using the "Data format:" menu  :-
// comment: 
// comment: "DX native" - These are files created by DX or by the "$SX_DIR/ndf2dx" application. They usually have a file extension of ".dx".  
// comment: 
// comment: "DX general" - These are text files describing data typically produced by a users own programs. The data itself can be either ASCII, or binary (so long as it is not produced by a Fortran program) , and may reside in another file referenced from within the supplied description file. See the DX User's Guide for details of the description file.
// comment: 
// comment: "DX general (Fortran binary)" - These are identical to "DX general" files, except that they refer to binary data created by a Fortran program, which consequently contains record control bytes in addition to the data bytes. The description file is identical to that for non-Fortran data.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[12]: position = (0.0117,0.7148), size = 0.2148x0.2666, startup = 0, devstyle = 0
// title: value = Mpeg control
// comment: If  displayed images are  to be captured as frames of a movie, press the "Save  frames" button and re-execute the network. All subsequently displayed images will be saved to disk as frames for the final movie.  
// comment: 
// comment: Once all frames have been saved, release the "Save frames" button,  enter a file name (remembering to press <RETURN> within the data entry box), press the "Create mpeg" button, and re-execute the network. The saved frames will be encoded into an MPEG. Note, you must have the Berkeley "mpeg_encode" program installed for this to work.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 20, height = 20, align = UL
//
// panel[20]: position = (0.0258,0.0498), size = 0.2844x0.1865, startup = 0, devstyle = 0
// title: value = Camera control...
// comment: This panel controls the projection between 3D space and the 2D screen. This projection is determined by the current "camera". The camera can be controlled in several ways, determined by the setting of the "Camera update mode:" button:
// comment: 
// comment: "Auto" - This is the default. The camera is chosen automatically to suit the displayed object. This will be an off-diagonal (if the data is 3D) orthographic view from a distance such that the object fills most of the screen. Each time the object changes, the camera is updated automatically. NOTE, in this mode the "View control" facilities
// comment: provided by the Image window are inoperative.
// comment: 
// comment: "Manual" - The camera is not updated automatically, but retains its parameters even if the object is changed.  This mode allows the user to change the camera manually using the "View control" facilities of the Image window. 
// comment: 
// comment: "Freeze" -  The camera is frozen at its current state. The view remains the same even if the viewed object changes, and the "view control" facilities of the  image window are inoperative.
// comment: 
// comment: "Auto-rotate" - The view point is rotated in 3-D by the number of degrees given in the "Rotation speed:" data entry box each time the network is executed, but the camera is otherwise frozen. The "View control" facilities of the Image window are inoperative.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[21]: position = (0.1813,0.1611), size = 0.3148x0.2490, startup = 0, devstyle = 0
// title: value = Define data quantities...
// comment: Several aspects of the displayed image (such as the colour and size of the glyphs used to represent each particle) can be controlled by the values stored in the imported data file. Upto three different quantities can be used in this way, and these quantities are refered to as "a", "b"  and "c" within the demonstration. The correspondance between these names and the quantities in the data file can be specified using the buttons on this control panel. 
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[22]: position = (0.3453,0.0820), size = 0.3063x0.3037, startup = 0, devstyle = 0
// title: value = Select positions to display... 
// comment: Particles may be excluded from the displayed image by entering a string in the "Selection expression" data entry box (remember to press RETURN after you have typed in the string). 
// comment: This string is an algebraic expression which is passed to the "Compute" module for evaluation (see the DX User's Reference Guide for a description of the syntax). It is evaluated for each particle, and only those particle for which the resulting value is greater than zero are displayed. 
// comment: 
// comment: The expression may refer to any of the following variables:
// comment: 
// comment: "a", "b" and "c" - These are the imported data values specified on the "Define data quantities..." control panel. They may be vector or scalar.
// comment: 
// comment: "p" - This is the position of the current particle, padded with trailing zeros if necessary to make it 3D. It is a 3D vector.
// comment: 
// comment: "v" - This is the position in 3D space from which the object is being viewed. It is a 3D vector.
// comment: 
// comment: "f" - This is the current frame number. It is a scalar.
// comment: 
// comment: "e" - This is the offset of the current particle from the start of  the list of particles. The first particle in the data file has "e=0", the second has "e=1", etc. It is a scalar.  
// comment: 
// comment: 
// comment: Here are some  example expressions:
// comment: 
// comment: "1" - causes all particles to be displayed. This is the default.
// comment: 
// comment: "0" - causes no particles to be displayed.
// comment: 
// comment: "a-b" - causes particles to be displayed only if  the value of the "a" quantity for the particle is greater than the "b" quantity. These quantities are defined on the "Define data quantities..." control panel.
// comment: 
// comment: "e<3" - causes only the first 3 particles to be displayed.
// comment: 
// comment: "p.x>10" - causes only particles with x co-ordinates larger than 10 to be displayed. 
// comment: 
// comment: "mag(p-v)>10 && a<0" - displays particles which are further than 10 units away from the observers view point (in the spatial co-ordinate system of the data), and which also have an "a" value greater than zero.
// comment: 
// comment: Particles may also be selected for display using the "View control" facilities of the Image window. To do this you must first select "Manual" camera-update mode on the "Camera control..." control panel. The view point may then be adjusted manually by panning, zooming, navigating through the data space, etc, until the view contains only the positions in which  you are interested. 
// comment: Then press "Exclude non-visible particles" and re-execute the network. This will exclude all particles which do not currently fall within the bounds of the image window. You will normally then press the "Freeze particle selection" in order to stop particles being re-selected as the view changes. You can then change the view-point, and only the selected particles will remain in the image.
// comment: 
// comment: Pressing the "Freeze particle selection" button causes the current selection of particles to be frozen. This is useful, for instance, if you  want to follow selected particle through a sequence of input files. If you don't freeze the selection,  different particles may be displayed from each input file (for instance if the selection expression depends on the data quantities in the file).
// comment: 
// comment: Pressing the  "Show no. of selected particles" button causes a window to pop up telling you the number of selected particles.
//
//
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[23]: position = (0.0258,0.0664), size = 0.3273x0.3428, startup = 0, devstyle = 0
// title: value = Display control...
// comment: This panel controls several extra objects  which can be included in the display along with the particle data. 
// comment: 
// comment: The "Bounding box:" button determines if a bounding box is to be displayed. If it is set to "Current" then a box which just encompasses the currently selected positions is displayed. This box is updated as the positions change. If it is set to "Freeze" then the box is  not updated as the positions change. If it is set to "None" then no bounding box is displayed. 
// comment: 
// comment: A colour bar may be included showing the data value associated with each colour (as set by the "Colour control..." panel), and the scale of the labels on the colour bar
// comment: may be changed.
// comment: 
// comment: A caption showing the current input file can be added to the display. 
// comment:  
//
//
// decorator Separator	pos=(0,60) size=335x8
// decorator Separator	pos=(0,169) size=335x8
// workspace: width = 500, height = 500
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[24]: position = (0.0547,0.1260), size = 0.3344x0.5166, startup = 0, devstyle = 0
// title: value = Colour control...
// comment: The colour used to represent each selected particle is determined by a two-stage process:
// comment: 
// comment: 1) a scalar  value known as the "colour value" is associated with each particle.
// comment: 
// comment: 2) these "colour values" are mapped onto actual colours using one of two standard colour look-up tables (one gives a grey-scale image and the other gives a colour image).
// comment: 
// comment: In addition, the objects used to represent each particle may be made partially transparent by setting an opacity value of less than 1. This gives some idea of the density of particles (crowded areas with many overlapping particles will look more opaque than sparsely populated areas).
// comment: 
// comment: The colour value for each particle is determined by a text string entered in the "Colour value expression" data entry box (remember to press RETURN after you have typed in the string). This string is an algebraic expression which is passed to the "Compute" module for evaluation (see the DX User's Reference Guide for a description of the syntax).
// comment: It is evaluated for each particle, and gives the colour value. If the supplied expression produces vector values, then the modulus of the vector is used as the colour value.
// comment: 
// comment: The expression may refer to any of the following variables:
// comment: 
// comment: "a", "b" and "c" - These are the imported data values specified on the "Define data quantities..." control panel. They may be vector or scalar.
// comment: 
// comment: "p" - This is the position of the current particle, padded with trailing zeros if necessary to make it 3D. It is a 3D vector.
// comment: 
// comment: "v" - This is the position in 3D space from which the object is being viewed. It is a 3D vector.
// comment: 
// comment: "f" - This is the current frame number. It is a scalar.
// comment: 
// comment: "e" - This is the offset of the current particle from the start of the list of particles. The first particle in the data file has "e=0", the second has "e=1", etc. It is a scalar.
// comment: 
// comment: Here are some  example expressions:
// comment: 
// comment: "1.0" - causes all particles to have a constant colour value determined by the colour look-up table). This is the default.
// comment: 
// comment: "a" - causes each particle's colour value to be equal to the "a" quantity defined on the "Define data quantities..." control panel.
// comment: 
// comment: "sin(a*b)" - causes each particle's colour value to be the sine of the product of the "a" and "b" quantities as defined in the "Define data quantities..." control panel.
// comment: 
// comment: "1.0/mag(p-v)**2" - causes each particle's colour value to be inversely proportional to the square of the distance to the observer.
// comment: 
// comment: In addition, a constant colour value may be assigned to all currently visible particles (i.e. particles which are within the bounds of the Image window) by pressing the "Use specified constant colour value for visible particles" button. The value to use is entered in the "Colour value for visible particles" data entry box. All particles which are outside the bounds of the Image window retain the colour values established by the "Colour value expression" box.
// comment: This facility can be useful for following selected particles between succesive frames in a sequence. You would typically display the first frame, and then use the "View control" options of the Image window to adjust the view so that only the particles of interest are visible. 
// comment: You then press the "Use specified constant colour value for visible particles" button, and re-execute the network. This will assigned the given colour value to the visible particles. You would normally then press the "Freeze colour values" button so that these colour values are not updated each time the view changes, and then change the view to  show a larger volume. 
// comment: 
// comment: If the "Show colour value statistics" button is lit, a pop-up wiundow is created showing the mean, standard deviation , maximum, minimum and median colour values for the current frame. 
// comment: 
// comment: Having assigned a colour value to each particle, these are mapped into actual colours using either a grey-scale or colour look-up table, as selected by the "Colour table" button.  The grey-scale table uses black to represent the minimum  colour value, and white the maximum colour value, with shades of grey in-between.
// comment: The colour table uses blue and red instead of black and white, smoothly varying colours in-between. A bar giving a key to the colour used for each colour value can be displayed using the "Display control..." control panel. 
// comment: The maximum and minimum colour values used by the table can either be specified by the user (in which case the colour table remains fixed for all frames), or default values can be used which covers the entire range of the colour values of the current frame (in this case the colour table may change between frames). This chose is made using the 
// comment: "Colour table range" button.  In "User-supplied" mode, the user enters values into the "Colour table minimum" and "Colour table maximum" data entry boxes.
//
//
// decorator Separator	pos=(0,430) size=428x8
// workspace: width = 429, height = 489
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[25]: position = (0.0344,0.2148), size = 0.3859x0.6240, startup = 0, devstyle = 0
// title: value = Glyph control...
// comment: Each particle may be represented by either a point, or a "glyph", as selected by the "Marker type" button.  Glyphs are 3D objects which are rendered to show light and shade, and which get smaller as they recede from the observer as a normal 3D object would do. Spheres are used to represent a scalar value at a given position, and "rocket"-like structures are used to represent a vector value at a given position. Points are single screen pixels which do not have a  3D appearance.
// comment: 
// comment: The size of  the glyph for each particle is defined using the string entered in the "Glyph size expression" data entry box (remember to press RETURN after you have typed in the string). This string is an algebraic expression which is passed to the "Compute" module for evaluation (see the DX User's Reference Guide for a description of the syntax).
// comment: It is evaluated for each particle and gives the size of the associated glyph. If the expression evaluates to a scalar quantity then spherical glyphs are used  with radius given by the expression. If the expression evaluates to a vector quantity then "rocket" glyphs are used with length given by the expresion. 
// comment: The expression may refer to any of the following variables:
// comment: 
// comment: "a", "b" and "c" - These are the imported data values specified on the "Define data quantities..." control panel. They may be vector or scalar.
// comment: 
// comment: "p" - This is the position of the current particle, padded with trailing zeros if necessary to make it 3D. It is a 3D vector.
// comment: 
// comment: "v" - This is the position in 3D space from which the object is being viewed. It is a 3D vector.
// comment: 
// comment: "f" - This is the current frame number. It is a scalar.
// comment: 
// comment: "e" - This is the offset of the current particle from the start of the list of particles. The first particle in the data file has "e=0", the second has "e=1", etc. It is a scalar.
// comment: 
// comment: Here are some  example expressions:
// comment: 
// comment: "1" - causes all particles to be displayed with the same sized spherical glyph. This is the default.
// comment: 
// comment: "a" - causes all particles to be displayed as a glyph with size (and direction if "a" is a vector)  given by the "a" quantity.
// comment: 
// comment: "[a,b,c]" - causes particles to be represented as rocket glyphs with direction and length determined by the three quantities "a", "b" and "c" which should be scalar values.  
// comment: 
// comment: The resulting glyph sizes are measured in the data's spatial co-ordinate system, and may be modified by a  constant scale factor by entering the factor in the "Glyph scale factor" data entry box, and ensuring that the "Use default glyph scale" is not lit. If this button is lit, the value in the "Glyph scale factor" box is ignored and a default value is used which attempts to avoid either very large or very small glyphs.
// comment: 
// comment: The thickness of rocket glyphs can be modified by entering a factor in the "Glyph thickness:" box.
// comment: 
// comment: A constant  glyph size can be assigned to all particles which are currently within the bounds of the Image window by entering the value in the "Constant size for visible glyphs" box, pressing the "Use constant size for visible glyphs" button and re-executing the network. 
// comment: 
// comment: You can press the "Freeze glyph sizes" button if you want to retain the current glyph sizes between successive frames.
//
//
// decorator Separator	pos=(0,44) size=395x8
// workspace: width = 500, height = 438
// layout: snap = 0, width = 10, height = 10, align = UL
//
// panel[27]: position = (0.0352,0.1436), size = 0.2945x0.5850, startup = 0, devstyle = 0
// title: value = Export gridded data...
// comment: If the "Save gridded data" button is lit, then the data specified by the "Data to grid" button is converted to a regular grid, and exported to a disk file in native DX format. The button is automatically reset once the data has been exported.
// comment: 
// comment: The name of the disk file is given in the "Output filename:" box. The supplied string may contain a single occurence of the sub-string "%d" which will be replaced with the current frame number (see the "Select input file..." control panel).
// comment: 
// comment: The "Data to grid" button determines which data is exported.  Selecting "Selected data" causes only the positions selected using the "Select positions to display..." control panel to be exported. Selecting "Input data" causes the entire input data file to be exported. 
// comment: 
// comment: The grid onto which the scattered data is mapped encompasses the selected data, and each cell is cubic with dimension given by "Grid cell dimension". If zero is given for the grid cell dimension, then a replacement value is chosen which gives the required number of cells along the X axis, as entered in the "X axis cell count" box.
// comment: 
// comment: The data values stored at each output grid point are determined by the setting of the "Data to grid" button and the "Output data" button:
// comment: 
// comment:  - If "Output data" is set to "Density values", then each output grid point holds a single scalar value which is an estimate of the density of particles in the neighbourhood of the grid point. 
// comment: 
// comment: - If "Output data" is set to "Mean data values" and  "Data to grid" is set to "Selected data", then each grid point contains a single data value which is an estimate of the mean "glyph size" value of the particles in the neighbourhood of the grid point (see control panel "Glyph control...").
// comment: 
// comment: - If  "Output data" is set to "Mean data values" and "Data to grid" is set to "Input data", then each grid point has the same number of data values as each input particle, and each output data value is an estimate of the mean of the corresponding input data value in the neighbourhood of the output grid point.
// comment: 
// comment: There are two ways of obtaining these estimates, selected by the "Gridding method" button:
// comment: 
// comment: Sampling - The input data is interpolated at the positions of the output grid points. For each output grid point, the nearest "N" input particles are identified (where "N" is given by the value in the "No. of neighbours to use" box). The output data values are either the mean of these input data values (if "Output data" is set to "Mean data values"), or an estimate of the density of the "N" particles (if "Output data" is set to "Density values").  
// comment: The output data are "position-dependant". Note, this method is very slow. Progress reports are given in the DX "Message window" showing how far the re-gridding has to go. 
// comment: 
// comment: Binning - The input particles are binned into the output grid. Each output grid cell contains either the mean of the particle data values in the cell, or the density of particles in the cell (dependant on the setting of "Output data"). The output data are "connection-dependant". 
//
//
// decorator Separator	pos=(0,49) size=278x8
// workspace: width = 500, height = 407
// layout: snap = 0, width = 10, height = 10, align = UL
//
// interactor Reset[5]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 22, x = 0, y = 160, style = Toggle, vertical = 1, size = 238x32
// label: value = Show no. of selected particles
//
// interactor Toggle[14]: num_components = 1, value =  1  
// toggle : 0, set =  2  , reset =  1  
// instance: panel = 22, x = 0, y = 120, style = Toggle, vertical = 1, size = 199x32
// label: value = Freeze particle selection
//
// interactor Toggle[13]: num_components = 1, value =  2  
// toggle : 0, set = 1, reset =  2  
// instance: panel = 22, x = 0, y = 79, style = Toggle, vertical = 1, size = 234x32
// label: value = Exclude non-visible particles
//
// interactor Selector[6]: num_components = 1, value = 0 
// selections: maximum = 5, current = 4 
// option[0]: name = "Starlink NDF", value = 4
// option[1]: name = "DX general (Fortran binary)", value = 3
// option[2]: name = "DX native", value = 1
// option[3]: name = "DX general ", value = 2
// option[4]: name = "NULL", value = 0
// instance: panel = 6, x = 4, y = 152, style = Option Menu, vertical = 0, size = 318x40
// label: value = Data format:
//
// interactor FileSelector[1]: num_components = 1, value = NULL
// instance: panel = 6, x = 4, y = 10, style = FileSelector, vertical = 1, size = 351x57
// label: value = Input file template
// filter = ./*
//
// interactor Integer[2]: num_components = 1, value = 1 
// component[0]: minimum = 1, maximum = 1e+06, global increment = 1, decimal = 0, global continuous = 0
// instance: panel = 6, x = 4, y = 91, style = Stepper, vertical = 0, size = 258x38
// label: value = Max. frame number:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// node Sequencer[2]:
// vcr[2]: min = 1, max = 1, beg = 1, end = 1, cur = 1, inc = 1, loop = off, step = off, pal = off
// window: position = (0.0164,0.1328), size = 0.2734x0.1045
//
// interactor Selector[16]: num_components = 1, value = 0 
// selections: maximum = 4, current = 0 
// option[0]: name = "Total_density", value = 0
// option[1]: name = "Momentum", value = 1
// option[2]: name = "Energy_density", value = 2
// option[3]: name = "Jet_density", value = 3
// instance: panel = 21, x = 0, y = 9, style = Option Menu, vertical = 0, size = 320x40
// label: value = "a" quantity:
//
// interactor String[4]: num_components = 1, value = "1"
// instance: panel = 22, x = 4, y = 0, style = Text, vertical = 1, size = 306x53
// label: value = Selection expression
//
// interactor Selector[17]: num_components = 1, value = 0 
// selections: maximum = 4, current = 0 
// option[0]: name = "Total_density", value = 0
// option[1]: name = "Momentum", value = 1
// option[2]: name = "Energy_density", value = 2
// option[3]: name = "Jet_density", value = 3
// instance: panel = 21, x = 0, y = 60, style = Option Menu, vertical = 0, size = 319x40
// label: value = "b" quantity:
//
// interactor Selector[18]: num_components = 1, value = 0 
// selections: maximum = 4, current = 0 
// option[0]: name = "Total_density", value = 0
// option[1]: name = "Momentum", value = 1
// option[2]: name = "Energy_density", value = 2
// option[3]: name = "Jet_density", value = 3
// instance: panel = 21, x = 0, y = 110, style = Option Menu, vertical = 0, size = 319x40
// label: value = "c" quantity:
//
// interactor Reset[3]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 25, x = 0, y = 140, style = Toggle, vertical = 1, size = 213x32
// label: value = Show  glyph size statistics
//
// interactor Toggle[19]: num_components = 1, value = 1
// toggle : 0, set = 2, reset = 1
// instance: panel = 25, x = 0, y = 180, style = Toggle, vertical = 1, size = 157x32
// label: value = Freeze glyph sizes
//
// interactor Toggle[20]: num_components = 1, value = 2
// toggle : 0, set = 1, reset = 2
// instance: panel = 25, x = 0, y = 259, style = Toggle, vertical = 1, size = 276x32
// label: value = Use constant size for visible glyphs
//
// interactor Scalar[19]: num_components = 1, value = 1.0 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 1, decimal = 5, global continuous = 0
// instance: panel = 25, x = 0, y = 320, style = Stepper, vertical = 0, size = 392x38
// label: value = Constant size for visible glyphs:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor String[6]: num_components = 1, value = "1"
// instance: panel = 25, x = 4, y = 70, style = Text, vertical = 1, size = 387x53
// label: value = Glyph size expression:
//
// interactor Reset[4]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 24, x = 0, y = 196, style = Toggle, vertical = 1, size = 226x32
// label: value = Show colour value statistics
//
// interactor Toggle[17]: num_components = 1, value = 1
// toggle : 0, set = 2, reset = 1
// instance: panel = 24, x = 0, y = 156, style = Toggle, vertical = 1, size = 174x32
// label: value = Freeze colour values
//
// interactor Toggle[16]: num_components = 1, value = 2
// toggle : 0, set = 1, reset = 2
// instance: panel = 24, x = 0, y = 117, style = Toggle, vertical = 1, size = 423x32
// label: value = Use  specified constant colour value for  visible particles
//
// interactor Scalar[18]: num_components = 1, value = 1.0 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 1, decimal = 5, global continuous = 0
// instance: panel = 24, x = 0, y = 64, style = Stepper, vertical = 0, size = 400x38
// label: value = Colour value for visible particles:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor String[5]: num_components = 1, value = "1.0"
// instance: panel = 24, x = 4, y = 0, style = Text, vertical = 1, size = 352x53
// label: value = Colour value expression:
//
// interactor Selector[19]: num_components = 1, value = 0 
// selections: maximum = 4, current = 1 
// option[0]: name = "Auto-rotate", value = 2
// option[1]: name = "Auto", value = 0
// option[2]: name = "Manual", value = 1
// option[3]: name = "Freeze", value = 3
// instance: panel = 20, x = 9, y = 10, style = Option Menu, vertical = 0, size = 279x40
// label: value = Camera update mode:
//
// interactor Toggle[22]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 23, x = 0, y = 190, style = Toggle, vertical = 1, size = 190x32
// label: value = Show file name caption
//
// interactor Selector[20]: num_components = 1, value = 1 
// selections: maximum = 3, current = 2 
// option[0]: name = "Freeze", value = 3
// option[1]: name = "None", value = 2
// option[2]: name = "Current", value = 1
// instance: panel = 23, x = 0, y = 9, style = Option Menu, vertical = 0, size = 220x40
// label: value = Bounding box: 
//
// interactor Selector[21]: num_components = 1, value = 2 
// selections: maximum = 2, current = 1 
// option[0]: name = "Glyphs", value = 1
// option[1]: name = "Points", value = 2
// instance: panel = 25, x = 0, y = 0, style = Option Menu, vertical = 0, size = 218x40
// label: value = Marker type:
//
// interactor Selector[23]: num_components = 1, value = 2 
// selections: maximum = 2, current = 1 
// option[0]: name = "Colour", value = 1
// option[1]: name = "Grey scale", value = 2
// instance: panel = 24, x = 0, y = 245, style = Option Menu, vertical = 0, size = 382x40
// label: value = Colour table:
//
// interactor Selector[22]: num_components = 1, value = 1 
// selections: maximum = 2, current = 0 
// option[0]: name = "User-supplied", value = 1
// option[1]: name = "Default", value = 2
// instance: panel = 24, x = 0, y = 289, style = Option Menu, vertical = 0, size = 381x40
// label: value = Colour table range:
//
// interactor Scalar[22]: num_components = 1, value = 0.0 
// component[0]: minimum = -1e+08, maximum = 1e+08, global increment = 1, decimal = 1, global continuous = 0
// instance: panel = 24, x = 0, y = 337, style = Stepper, vertical = 0, size = 384x38
// label: value = Colour table minimum:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[23]: num_components = 1, value = 1.0 
// component[0]: minimum = -1e+08, maximum = 1e+08, global increment = 1, decimal = 1, global continuous = 0
// instance: panel = 24, x = 0, y = 381, style = Stepper, vertical = 0, size = 385x38
// label: value = Colour table maximum:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[25]: num_components = 1, value = 1.0 
// component[0]: minimum = 0, maximum = 1, global increment = 0.05, decimal = 2, global continuous = 0
// instance: panel = 24, x = 0, y = 450, style = Stepper, vertical = 0, size = 385x38
// label: value = Opacity:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[20]: num_components = 1, value = 1.0 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 1, decimal = 5, global continuous = 0
// instance: panel = 25, x = 0, y = 360, style = Stepper, vertical = 0, size = 390x38
// label: value = Glyph thickness:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Toggle[21]: num_components = 1, value = 2
// toggle : 1, set = 2, reset = 1
// instance: panel = 25, x = 0, y = 220, style = Toggle, vertical = 1, size = 192x32
// label: value = Use default glyph scale
//
// interactor Scalar[21]: num_components = 1, value = 1.0 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 1, decimal = 5, global continuous = 0
// instance: panel = 25, x = 0, y = 399, style = Stepper, vertical = 0, size = 390x38
// label: value = Glyph scale factor:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Selector[24]: num_components = 1, value = 0 
// selections: maximum = 2, current = 1 
// option[0]: name = "yes", value = 1
// option[1]: name = "no", value = 0
// instance: panel = 23, x = 0, y = 80, style = Option Menu, vertical = 0, size = 300x40
// label: value = Show colour bar:
//
// interactor Scalar[24]: num_components = 1, value = 0.5 
// component[0]: minimum = 0, maximum = 100, global increment = 0.05, decimal = 2, global continuous = 0
// instance: panel = 23, x = 0, y = 120, style = Stepper, vertical = 0, size = 329x38
// label: value = Colour bar label scale:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Scalar[17]: num_components = 1, value = 2.0 
// component[0]: minimum = -1e+06, maximum = 1e+06, global increment = 1, decimal = 5, global continuous = 0
// instance: panel = 20, x = 9, y = 65, style = Stepper, vertical = 0, size = 281x38
// label: value = Rotation speed:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// node Image[2]:
// depth: value = 8
// window: position = (0.5633,0.0146), size = 0.3555x0.4326
// input[1]: defaulting = 0, value = "Image_2"
// input[4]: defaulting = 0, value = 1
// input[5]: defaulting = 0, value = [24.5 59.5 59.5]
// input[6]: defaulting = 0, value = [282.85 317.85 377.712]
// input[7]: defaulting = 0, value = 259.648
// input[8]: defaulting = 0, value = 350
// input[9]: defaulting = 0, value = 0.75
// input[10]: defaulting = 0, value = [0 1 0]
// input[11]: defaulting = 1, value = 30.0001
// input[12]: defaulting = 0, value = 0
// input[14]: defaulting = 0, value = 1
// input[19]: defaulting = 0, value = 0
// input[20]: defaulting = 1, value = NULL
// input[29]: defaulting = 0, value = 0
// input[30]: defaulting = 0, value = {"x", "y", "z"}
// input[31]: defaulting = 0, value = 15
// input[32]: defaulting = 1, value = {[-2.450001 -5.950005 -5.950005] [51.450001 124.950005 124.950005]}
// input[33]: defaulting = 0, value = 1
// input[34]: defaulting = 0, value = 0
// input[35]: defaulting = 1, value = NULL
// input[36]: defaulting = 0, value = 0
// input[37]: defaulting = 0, value = {"clear", "grey5", "yellow", "white"}
// input[38]: defaulting = 0, value = {"background", "grid", "ticks", "labels"}
// input[39]: defaulting = 0, value = 0.400000
// input[41]: defaulting = 0, value = "none"
//
// interactor Toggle[3]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 12, x = 51, y = 132, style = Toggle, vertical = 1, size = 115x32
// label: value = Save frames
//
// interactor Reset[2]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 12, x = 51, y = 87, style = Toggle, vertical = 1, size = 119x32
// label: value = Create mpeg
//
// interactor String[1]: num_components = 1, value = NULL
// instance: panel = 12, x = 4, y = 0, style = Text, vertical = 1, size = 212x53
// label: value = Mpeg file name
//
// interactor Selector[27]: num_components = 1, value = 1 
// selections: maximum = 2, current = 0 
// option[0]: name = "Mean data values", value = 1
// option[1]: name = "Density values", value = 2
// instance: panel = 27, x = 0, y = 237, style = Option Menu, vertical = 0, size = 300x40
// label: value = Output data:
//
// interactor Selector[26]: num_components = 1, value = 1 
// selections: maximum = 2, current = 0 
// option[0]: name = "Binning", value = 1
// option[1]: name = "Sampling", value = 2
// instance: panel = 27, x = 0, y = 200, style = Option Menu, vertical = 0, size = 300x40
// label: value = Gridding method:
//
// interactor Selector[25]: num_components = 1, value = 1 
// selections: maximum = 2, current = 0 
// option[0]: name = "Input data", value = 1
// option[1]: name = "Selected data", value = 2
// instance: panel = 27, x = 0, y = 160, style = Option Menu, vertical = 0, size = 299x40
// label: value = Data to grid:
//
// interactor Scalar[26]: num_components = 1, value = 0.0
// component[0]: minimum = 0, maximum = 1e+06, global increment = 1, decimal = 5, global continuous = 0
// instance: panel = 27, x = 0, y = 331, style = Stepper, vertical = 0, size = 301x38
// label: value = Grid cell dimension:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Integer[4]: num_components = 1, value = 50 
// component[0]: minimum = 2, maximum = 1e+06, global increment = 1, decimal = 0, global continuous = 0
// instance: panel = 27, x = 0, y = 368, style = Stepper, vertical = 0, size = 300x38
// label: value = X axis cell count:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Integer[3]: num_components = 1, value = 5 
// component[0]: minimum = 2, maximum = 1e+06, global increment = 1, decimal = 0, global continuous = 0
// instance: panel = 27, x = 0, y = 290, style = Stepper, vertical = 0, size = 299x38
// label: value = No. of neighbours to use:
// local continuous: value = 0, mode = global
// local increment[0]: value = 1, mode = global
//
// interactor Reset[6]: num_components = 1, value = 0
// toggle : 0, set = 1, reset = 0
// instance: panel = 27, x = 9, y = 8, style = Toggle, vertical = 1, size = 157x32
// label: value = Save gridded data
//
// interactor String[7]: num_components = 1, value = NULL
// instance: panel = 27, x = 4, y = 78, style = Text, vertical = 1, size = 294x53
// label: value = Output filename:
