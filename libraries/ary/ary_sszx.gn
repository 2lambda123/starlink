      SUBROUTINE ARY_SSZ<T>( IARY, SCALE, ZERO, STATUS )
*+
*  Name:
*     ARY_SSZ<T>

*  Purpose:
*     Set new scale and zero values for a scaled array.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL ARY_SSZ<T>( IARY, SCALE, ZERO, STATUS )

*  Description:
*     The routine sets new values for the scale and zero values
*     associated with an array. If the array is stored in simple form, 
*     then the storage form is changed to scaled.

*  Arguments:
*     IARY = INTEGER (Given)
*        Array identifier.
*     SCALE = <TYPE> (Given)
*        The new value for the scaling factor.
*     ZERO = <TYPE> (Given)
*        The new value for the zero offset.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  This routine may only be used to change the type of a base
*     array. If it is called with an array which is not a base array,
*     then it will return without action. No error will result.
*     -  An error will result if the array, or any part of it, is
*     currently mapped for access (e.g. through another identifier).

*  Copyright:
*     Copyright (C) 2006 Particle Physics and Astronomy Research
*     Council. All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     DSB: David S Berry (JAC)
*     {enter_new_authors_here}

*  History:
*     15-MAY-2006 (DSB):
*        Original version.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'DAT_PAR'          ! DAT_ public constants
      INCLUDE 'ARY_PAR'          ! ARY_ public constants
      INCLUDE 'ARY_CONST'        ! ARY_ private constants

*  Global Variables:
      INCLUDE 'ARY_DCB'          ! ARY_ Data Control Block
      INCLUDE 'ARY_ACB'          ! ARY_ Access Control Block

*  Arguments Given:
      INTEGER IARY
      <TYPE> SCALE
      <TYPE> ZERO

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      CHARACTER LOCC*(DAT__SZLOC)! Locator for component
      INTEGER IACB               ! Index to array entry in the ACB
      INTEGER IDCB               ! Index to array entry in the DCB

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Import the array identifier.
      CALL ARY1_IMPID( IARY, IACB, STATUS )

*  Check that SCALE access to the array is available.
      CALL ARY1_CHACC( IACB, 'SCALE', STATUS )
      IF( STATUS .EQ. SAI__OK ) THEN 

*  Get the DCB entry associated with this ACB entry.
         IDCB = ACB_IDCB( IACB )

*  Ensure that components exist in the data object to hold the scale and
*  zero values. Then put the supplied values into them.
         CALL CMP_MOD( DCB_LOC( IDCB ), 'SCALE', '<HTYPE>', 0, 0, STATUS )
         CALL DAT_FIND( DCB_LOC( IDCB ), 'SCALE', LOCC, STATUS )
         CALL DAT_PUT( LOCC, '<HTYPE>', 0, 0, SCALE, STATUS )
         CALL DAT_ANNUL( LOCC, STATUS )
   
         CALL CMP_MOD( DCB_LOC( IDCB ), 'ZERO', '<HTYPE>', 0, 0, STATUS )
         CALL DAT_FIND( DCB_LOC( IDCB ), 'ZERO', LOCC, STATUS )
         CALL DAT_PUT( LOCC, '<HTYPE>', 0, 0, ZERO, STATUS )
         CALL DAT_ANNUL( LOCC, STATUS )

*  Ensure the array storage form is scaled, in both the DCB and the data
*  object.
         CALL CMP_MODC( DCB_LOC( IDCB ), 'VARIANT', 6, 0, 0, STATUS )
         CALL CMP_PUT0C( DCB_LOC( IDCB ), 'VARIANT', 'SCALED', STATUS )
         CALL ARY1_DFRM( IDCB, STATUS )

         IF( STATUS .EQ. SAI__OK ) THEN 
            DCB_FRM( IDCB ) = 'SCALED'

*  Remove any scaling information in the DCB.
            IF( DCB_KSCL( IDCB ) ) THEN
               CALL DAT_ANNUL( DCB_SCLOC( IDCB ), STATUS )
               DCB_KSCL( IDCB ) = .FALSE.  
            END IF

*  Import the scaling information from the data object into the DCB.
            CALL ARY1_DSCL( IDCB, STATUS )
         END IF
      END IF

*  If an error occurred, then report context information and call the
*  error tracing routine.
      IF ( STATUS .NE. SAI__OK ) THEN
         CALL ERR_REP( 'ARY_SSZ<T>_ERR', 'ARY_SSZ<T>: Error setting '//
     :                 'new scale and zero values for an array.',
     :                 STATUS )
         CALL ARY1_TRACE( 'ARY_SSZ<T>', STATUS )
      END IF

      END
