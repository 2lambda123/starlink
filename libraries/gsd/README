GSD read-only library for Unix.
===============================

This library provides read-only access to files created using the GSD
format as used on the James Clerk Maxwell Telescope (JCMT) for
heterodyne data. It is currently used by SPECX and JCMTDR.


Installation
------------

This library uses the standard Gnu tools for building so it should be 
simply a case of

   % ./configure
   % make
   % make install


Different platforms
-------------------

This library has only been tested on ix86 Linux, Solaris, and Digital
Unix (Alpha).

All platform dependenceies are in gsd2.h, hopefully the configure
script will set up the correct settings for your architecture.

gsd2.h initialises unions, which is possible only in ANSI C. This is
a problem on the VAX.



Source files
------------

C_ROUTINES are the C source code of the library. This excludes
   gsd_print.c, which does not enter the library but becomes an
   executable.

PUBLIC_INCLUDES are include files needed by applications calling this
   library.

PRIVATE_INCLUDES are include files needed only within the library.

gsd2_nativx.c and gsd2_copya.c have main modules for testing at the ends
   of the files. These are commented out. When uncommented, the .c files
   can be compiled into executables (linking with -lm). nativx will read
   the file TEST_ARRAY.DAT and produce output similar to
   gsd2_nativx.out. copya works without input file and should produce
   output similar to gsd2_copya.out. TEST_ARRAY.DAT was written on a VAX
   with the programme write_test_array.for.

gsd_print.f is just a tutorial file showing how to port Fortran code
   that calls GSD.

gsd_print.c is compiled into the executable gsd_print by the build
   target. This replaces the old GSD_PRINT utility, which was written in
   Fortran and used VAX LIB$ calls.



C routines
----------

The outermost layer of routines is the Fortran binding. This is in
gsd_f77.c. The routines can only be called from Fortran. They share
static external variables amongst themselves (but with no other
routines) to record references to up to 100 open GSD files. The calling
code only needs to keep the old file identifier returned by
gsd_open_read. The routine gsd_inquire_array is not implemented,
gsd_inq_size must be used instead.

The next inner layer is the external C binding. The C binding is similar
to the Fortran binding in that there is a one-to-one relationship
between routines. The C binding does not use inherited status, but
returns a status as the function value. Also, given scalar arguments are
passed by value, not by reference. An open GSD file is identfied by no
less than four pointers, all of which must be kept by the calling code.
The C binding consists of gsdOpenRead.c, gsdClose.c, gsdFind.c,
gsdItem.c, gsdInqSize.c, gsdGet0x.c, gsdGet1x.c.

The next inner layer are the gsd1_ routines. There are three routines
used by gsdOpenRead to open the file and read its contents into memory.
The fourth routine gsd1_getval returns information about and values of
items to the caller. It retrieves this information from the memory copy
of the file as created by gsdOpenRead.

The innermost layer are the gsd2_ routines. There are the gsd2_nativx
routines, which are used by the gsd1_ routines. They convert VAX binary
file contents to equivalent numbers in the format of the local machine.
They also convert VAX/GSD bad values to local/PRIMDAT bad values. Then
there is the gsd2_copya routine, which is used by gsd1_getval to convert
from the data type as copied from the file to the data type as required
by the calling routine.



Features of the library
-----------------------

The library provides only read access.

Only VAX-binary GSD files can be read.

Bad values in the file are converted to PRIMDAT bad values, which differ
from the traditional VAX/GSD bad values. (This conversion is in memory
only, the file itself is unchanged.)

Type conversion is possible only between numeric types (including
logical). Numeric to character or character to numeric conversion is not
provided by the library.

The recommended binding is the C binding.

The Fortran binding is incomplete and existing code calling GSD may need
modifications. See gsd_print.f.

   Only a rudimentary include file GSD_PAR is provided. It also requires
   prior inclusion of PRM_PAR.

   Error status values have changed. Zero is good status, non-zero is
   bad status, but no particular status value can be expected.

   gsd_inquire_array is not implemented. Instead gsd_inq_size must be
   used, although it was previously labelled "obsolete".

Other language bindings
-----------------------

  A perl binding to this library is available. It is currently
  shipped as part of the Starlink STARPERL package.

  A native java implementation of a GSD reader is also available.
  Please contact Tim Jenness (t.jenness@jach.hawaii.edu) if you are
  interested.
