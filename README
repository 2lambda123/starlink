This directory contains the following directories:

  libraries
     Starlink Fortran/C libraries

  applications
     Starlink Fortran/C applications

  java
     Starlink Java libraries and applications

  buildsupport
     Starlink support applications required to build configure-based
     Starlink applications.

  thirdparty
     Third party applications and libraries required to build
     Starlink classic applications

  pubs
     Starlink publications

  docs
     General documentation not associated with a particular application
     or library.



To build the COMPLETE set of Starlink classic applications the
following steps are required:

 - Specify where you want the installed files to end up (_PREFIX)
   and where you want the build to find previously installed files (_STARLINK)
   (defaults to /star)

      % setenv STARCONF_DEFAULT_STARLINK /local-star
      % setenv STARCONF_DEFAULT_PREFIX   /local-star

-  Delete previous Starlink environment variables. 

      % unsetenv INSTALL
      % unsetenv STARLINK

   and also make sure that an old-style Starlink system is not in your
   path (since tools like messgen will get very confused).

 - First build the buildsupport system (the tools in the buildsupport
   directory, plus third-party applications autoconf, automake and
   libtool).  Some of these applications have been patched
   specifically for building Starlink applications so the default
   versions shipped with the OS will not work.  These applications
   will be installed into $STARCONF_DEFAULT_PREFIX/buildsupport, so
   you should add $STARCONF_DEFAULT_PREFIX/buildsupport/bin to your
   path at this point, BEFORE you run the ./bootstrap script.  In
   order for the `make' below to work, you also need to add the
   default bin directory to your path, so you should do that now.

      % setenv PATH $STARCONF_DEFAULT_PREFIX/bin:$STARCONF_DEFAULT_PREFIX/buildsupport/bin:$PATH
      % ./bootstrap

 - Now configure and build the system.  The dependencies within the
   Makefile ensure that everthing in built in the correct order.

      % ./configure -C   # -C means caching results
      % make world

 - If you wish to build only as far as a given component, then specify
   it by giving the name of the associated `manifest' file.

      % make /local-star/manifests/ast

   This will build, and install under STARCONF_DEFAULT_PREFIX, this
   component and everything it depends on.



Note that this sequence of './bootstrap; ./configure; make' is a
`make world' command -- it builds everything in the repository that
has been brought into the configure-based system, and will fail if
some components have not been checked out.  If you wish to build a
specific component, the instructions are slightly different.

 - Specify the _PREFIX and _STARLINK variables as before, though this
   time it might be appropriate to give them different values, if you
   want to build against one installation tree (_STARLINK), but
   install into another (_PREFIX).  As above, unset the INSTALL and
   STARLINK variables, and make sure there is no old-style Starlink
   system in your path.

 - If you have already built the buildsupport tools (autoconf,
   automake, libtool and starconf), then make sure these are in your
   path.  If not, you can build just these by going to the top-level
   of your checkout and giving the command

      % ./bootstrap --buildsupport-only

 - Now you can go into a specific directory and build the library/application
   as normal (a bootstrap is required if building from CVS)

      % ./bootstrap
      % ./configure -C
      % make
      % make install-manifest

 - After a `cvs update' in a component, it is possible that some
   generated files will be out of date (if configure.ac or Makefile.am
   had been updated).  Any required updating is generally handled
   automatically by makefile rules, but if you wish to guarantee that
   everything is up to date, then you can give the command
   `autoreconf'.  This does no harm in any case, since it does
   nothing if it is not required.



See SSN/78 (in docs/ssn78) for more details on building Starlink classic
applications.

