//
// time: Mon Sep 22 17:27:58 1997
//
// version: 3.0.0 (format), 3.1.2 (DX)
//
//
// MODULE main
//
// comment: In this visual program, the leftmost Isosurface tool is computing the isosurface of a 3D field at the value .3. The rightmost Isosurface tool is computing 4 contour lines on a 2D field (a cutplane of the original 3D field). The 4 contour lines are at the values .1, .2, .3, and .4.
// workspace: width = 985, height = 750
// layout: snap = 0, width = 50, height = 50, align = NN
//
macro main(
) -> (
) {
    // 
    // node FileSelector[1]: x = 50, y = 350, inputs = 0, label = FileSelector
    // output[1]: visible = 1, type = 32, value = NULL
    // output[2]: visible = 1, type = 32, value = NULL
    //
    // 
    // node Selector[3]: x = 50, y = 0, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_3"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "Normalised" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 2 
    // input[4]: defaulting = 0, visible = 1, type = 16777248, value = { "Physical units" "Normalised" }
    // input[5]: defaulting = 0, visible = 0, type = 16777245, value = { 1 2 }
    // input[7]: defaulting = 0, visible = 0, type = 32, value = "Axis units:"
    // output[1]: visible = 1, type = 29, value = 2 
    // output[2]: visible = 1, type = 32, value = "Normalised" 
    //
main_Selector_3_out_1[cache: 2],
main_Selector_3_out_2[cache: 2] = 
    Selector(
    main_Selector_3_in_1,
    main_Selector_3_in_2,
    main_Selector_3_in_3,
    main_Selector_3_in_4,
    main_Selector_3_in_5,
    main_Selector_3_in_6,
    main_Selector_3_in_7
    ) [instance: 3, cache: 1];
    // 
    // node FileSelector[4]: x = 150, y = 0, inputs = 0, label = FileSelector
    // output[1]: visible = 1, type = 32, value = "/tmp_mnt/net/reaxp02/axpacd/jcmt/prog/atasks/l1689bsub.dx"
    // output[2]: visible = 1, type = 32, value = "l1689bsub.dx"
    //
    // 
    // node Import[2]: x = 150, y = 100, inputs = 6, label = Import
    // input[1]: defaulting = 1, visible = 1, type = 32, value = "fred.dx"
    // input[2]: defaulting = 1, visible = 1, type = 32, value = "Sloping"
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "dx"
    //
main_Import_2_out_1 = 
    Import(
    main_FileSelector_4_out_1,
    main_Import_2_in_2,
    main_Import_2_in_3,
    main_Import_2_in_4,
    main_Import_2_in_5,
    main_Import_2_in_6
    ) [instance: 2, cache: 1];
    // 
    // node Transmitter[5]: x = 100, y = 200, inputs = 1, label = wireless_5
    //
wireless_5 = main_Import_2_out_1;
    // 
    // node Receiver[5]: x = 750, y = 0, inputs = 1, label = wireless_5
    //
main_Receiver_5_out_1 = wireless_5;
    // 
    // node Extract[1]: x = 750, y = 100, inputs = 2, label = Extract
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "box"
    //
main_Extract_1_out_1 = 
    Extract(
    main_Receiver_5_out_1,
    main_Extract_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Compute[1]: x = 550, y = 200, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "($0.x)"
    // expression: value = (a.x)
    // name[2]: value = a
    //
main_Compute_1_out_1 = 
    Compute(
    main_Compute_1_in_1,
    main_Extract_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Statistics[1]: x = 550, y = 300, inputs = 1, label = Statistics
    //
main_Statistics_1_out_1,
main_Statistics_1_out_2,
main_Statistics_1_out_3,
main_Statistics_1_out_4,
main_Statistics_1_out_5 = 
    Statistics(
    main_Compute_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Compute[2]: x = 700, y = 200, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "($0.y)"
    // expression: value = (a.y)
    // name[2]: value = a
    //
main_Compute_2_out_1 = 
    Compute(
    main_Compute_2_in_1,
    main_Extract_1_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Statistics[2]: x = 700, y = 300, inputs = 1, label = Statistics
    //
main_Statistics_2_out_1,
main_Statistics_2_out_2,
main_Statistics_2_out_3,
main_Statistics_2_out_4,
main_Statistics_2_out_5 = 
    Statistics(
    main_Compute_2_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Compute[3]: x = 781, y = 200, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "($0.z)"
    // expression: value = (a.z)
    // name[2]: value = a
    //
main_Compute_3_out_1 = 
    Compute(
    main_Compute_3_in_1,
    main_Extract_1_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Statistics[3]: x = 864, y = 400, inputs = 1, label = Statistics
    //
main_Statistics_3_out_1,
main_Statistics_3_out_2,
main_Statistics_3_out_3,
main_Statistics_3_out_4,
main_Statistics_3_out_5 = 
    Statistics(
    main_Compute_3_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Compute[5]: x = 600, y = 450, inputs = 4, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[-$0, -$1, -$2]"
    // expression: value = [-a, -b, -c]
    // name[2]: value = a
    // name[3]: value = b
    // name[4]: value = c
    //
main_Compute_5_out_1 = 
    Compute(
    main_Compute_5_in_1,
    main_Statistics_1_out_4,
    main_Statistics_2_out_4,
    main_Statistics_3_out_4
    ) [instance: 5, cache: 1];
    // 
    // node Transmitter[3]: x = 600, y = 550, inputs = 1, label = wireless_3
    //
wireless_3 = main_Compute_5_out_1;
    // 
    // node Receiver[3]: x = 350, y = 150, inputs = 1, label = wireless_3
    //
main_Receiver_3_out_1 = wireless_3;
    // 
    // node Translate[1]: x = 250, y = 200, inputs = 2, label = Translate
    //
main_Translate_1_out_1 = 
    Translate(
    main_Import_2_out_1,
    main_Receiver_3_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Compute[4]: x = 700, y = 450, inputs = 7, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[1.0/($1-$0), 1.0/($3-$2), 1.0/($5-$4)]"
    // expression: value = [1.0/(b-a), 1.0/(d-c), 1.0/(f-e)]
    // name[2]: value = a
    // name[3]: value = b
    // name[4]: value = c
    // name[5]: value = d
    // name[6]: value = e
    // name[7]: value = f
    //
main_Compute_4_out_1 = 
    Compute(
    main_Compute_4_in_1,
    main_Statistics_1_out_4,
    main_Statistics_1_out_5,
    main_Statistics_2_out_4,
    main_Statistics_2_out_5,
    main_Statistics_3_out_4,
    main_Statistics_3_out_5
    ) [instance: 4, cache: 1];
    // 
    // node Transmitter[4]: x = 776, y = 550, inputs = 1, label = wireless_4
    //
wireless_4 = main_Compute_4_out_1;
    // 
    // node Receiver[4]: x = 350, y = 250, inputs = 1, label = wireless_4
    //
main_Receiver_4_out_1 = wireless_4;
    // 
    // node Scale[1]: x = 250, y = 300, inputs = 2, label = Scale
    // input[2]: defaulting = 1, visible = 1, type = 8, value = [3 3 3]
    //
main_Scale_1_out_1 = 
    Scale(
    main_Translate_1_out_1,
    main_Receiver_4_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Switch[2]: x = 150, y = 400, inputs = 3, label = Switch
    //
main_Switch_2_out_1 = 
    Switch(
    main_Selector_3_out_1,
    main_Import_2_out_1,
    main_Scale_1_out_1
    ) [instance: 2, cache: 1];
    // 
    // node ShowBox[1]: x = 50, y = 500, inputs = 1, label = ShowBox
    //
main_ShowBox_1_out_1,
main_ShowBox_1_out_2 = 
    ShowBox(
    main_Switch_2_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Scalar[3]: x = 450, y = 0, inputs = 11, label = Scalar
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Scalar_3"
    // input[3]: defaulting = 0, visible = 0, type = 5, value = 3.5 
    // input[4]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 5, value = -1000000.0
    // input[6]: defaulting = 1, visible = 0, type = 5, value = 1000000.0
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.0
    // input[9]: defaulting = 0, visible = 0, type = 1, value = 5
    // input[11]: defaulting = 0, visible = 0, type = 32, value = "Contour level (Kelvin):"
    // output[1]: visible = 1, type = 5, value = 3.5 
    //
main_Scalar_3_out_1[cache: 2] = 
    Scalar(
    main_Scalar_3_in_1,
    main_Scalar_3_in_2,
    main_Scalar_3_in_3,
    main_Scalar_3_in_4,
    main_Scalar_3_in_5,
    main_Scalar_3_in_6,
    main_Scalar_3_in_7,
    main_Scalar_3_in_8,
    main_Scalar_3_in_9,
    main_Scalar_3_in_10,
    main_Scalar_3_in_11
    ) [instance: 3, cache: 1];
    // 
    // node Isosurface[1]: x = 150, y = 500, inputs = 6, label = Isosurface
    // input[3]: defaulting = 0, visible = 1, type = 1, value = 1
    //
main_Isosurface_1_out_1 = 
    Isosurface(
    main_Switch_2_out_1,
    main_Scalar_3_out_1,
    main_Isosurface_1_in_3,
    main_Isosurface_1_in_4,
    main_Isosurface_1_in_5,
    main_Isosurface_1_in_6
    ) [instance: 1, cache: 1];
    // 
    // node AutoColor[2]: x = 150, y = 600, inputs = 10, label = AutoColor
    //
main_AutoColor_2_out_1,
main_AutoColor_2_out_2 = 
    AutoColor(
    main_Isosurface_1_out_1,
    main_AutoColor_2_in_2,
    main_AutoColor_2_in_3,
    main_AutoColor_2_in_4,
    main_AutoColor_2_in_5,
    main_AutoColor_2_in_6,
    main_AutoColor_2_in_7,
    main_AutoColor_2_in_8,
    main_AutoColor_2_in_9,
    main_AutoColor_2_in_10
    ) [instance: 2, cache: 1];
    // 
    // node Format[1]: x = 300, y = 500, inputs = 3, label = Format
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "Temperature contour: %-.1f Kelvin"
    //
main_Format_1_out_1 = 
    Format(
    main_Format_1_in_1,
    main_Scalar_3_out_1,
    main_Format_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Caption[1]: x = 250, y = 600, inputs = 9, label = Caption
    // input[2]: defaulting = 0, visible = 1, type = 8, value = [0.05,0.05]
    //
main_Caption_1_out_1 = 
    Caption(
    main_Format_1_out_1,
    main_Caption_1_in_2,
    main_Caption_1_in_3,
    main_Caption_1_in_4,
    main_Caption_1_in_5,
    main_Caption_1_in_6,
    main_Caption_1_in_7,
    main_Caption_1_in_8,
    main_Caption_1_in_9
    ) [instance: 1, cache: 1];
    // 
    // node Collect[1]: x = 150, y = 687, inputs = 3, label = Collect
    //
main_Collect_1_out_1 = 
    Collect(
    main_ShowBox_1_out_1,
    main_AutoColor_2_out_1,
    main_Caption_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Image[3]: x = 300, y = 687, inputs = 42, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 67108863, value = "Image_3"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 0, visible = 0, type = 8, value = [0.5 0.4375 0.5]
    // input[6]: defaulting = 0, visible = 0, type = 8, value = [-0.220933 3.12639 -0.220933]
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.54108
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 800
    // input[9]: defaulting = 0, visible = 0, type = 5, value = 1.001
    // input[10]: defaulting = 0, visible = 0, type = 8, value = [0 0 -1]
    // input[11]: defaulting = 0, visible = 0, type = 5, value = 30.0
    // input[12]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[15]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[16]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[17]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[18]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[29]: defaulting = 0, visible = 0, type = 3, value = 1
    // input[30]: defaulting = 0, visible = 0, type = 16777248, value = {"Velocity", "RA Offset", "Dec. Offset"}
    // input[31]: defaulting = 0, visible = 0, type = 16777217, value = { 4 4 4 }
    // input[32]: defaulting = 1, visible = 0, type = 16777224, value = NULL
    // input[33]: defaulting = 0, visible = 0, type = 3, value = 1
    // input[34]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[35]: defaulting = 1, visible = 0, type = 8, value = NULL
    // input[36]: defaulting = 0, visible = 0, type = 3, value = 1
    // input[37]: defaulting = 0, visible = 0, type = 16777248, value = {"grey30", "yellow", "yellow", "white"}
    // input[38]: defaulting = 0, visible = 0, type = 16777248, value = {"background", "grid", "ticks", "labels"}
    // input[39]: defaulting = 0, visible = 0, type = 5, value = 1.000000
    // input[41]: defaulting = 0, visible = 0, type = 32, value = "navigate"
    // depth: value = 8
    // window: position = (0.1467,0.0556), size = 0.7066x0.9378
    // internal caching: 1
    //
main_Image_3_out_1,
main_Image_3_out_2 = 
    Image(
    main_Image_3_in_1,
    main_Collect_1_out_1,
    main_Image_3_in_3,
    main_Image_3_in_4,
    main_Image_3_in_5,
    main_Image_3_in_6,
    main_Image_3_in_7,
    main_Image_3_in_8,
    main_Image_3_in_9,
    main_Image_3_in_10,
    main_Image_3_in_11,
    main_Image_3_in_12,
    main_Image_3_in_13,
    main_Image_3_in_14,
    main_Image_3_in_15,
    main_Image_3_in_16,
    main_Image_3_in_17,
    main_Image_3_in_18,
    main_Image_3_in_19,
    main_Image_3_in_20,
    main_Image_3_in_21,
    main_Image_3_in_22,
    main_Image_3_in_23,
    main_Image_3_in_24,
    main_Image_3_in_25,
    main_Image_3_in_26,
    main_Image_3_in_27,
    main_Image_3_in_28,
    main_Image_3_in_29,
    main_Image_3_in_30,
    main_Image_3_in_31,
    main_Image_3_in_32,
    main_Image_3_in_33,
    main_Image_3_in_34,
    main_Image_3_in_35,
    main_Image_3_in_36,
    main_Image_3_in_37,
    main_Image_3_in_38,
    main_Image_3_in_39,
    main_Image_3_in_40,
    main_Image_3_in_41,
    main_Image_3_in_42
    ) [instance: 3, cache: 1];
// network: end of macro body
CacheScene("Image_3", main_Image_3_out_1, main_Image_3_out_2);
}
main_Selector_3_in_1 = "Selector_3";
main_Selector_3_in_2 = "Normalised" ;
main_Selector_3_in_3 = 2 ;
main_Selector_3_in_4 = { "Physical units" "Normalised" };
main_Selector_3_in_5 = { 1 2 };
main_Selector_3_in_6 = NULL;
main_Selector_3_in_7 = "Axis units:";
main_Selector_3_out_1 = 2 ;
main_FileSelector_4_out_1 = "/tmp_mnt/net/reaxp02/axpacd/jcmt/prog/atasks/l1689bsub.dx";
main_Import_2_in_2 = NULL;
main_Import_2_in_3 = "dx";
main_Import_2_in_4 = NULL;
main_Import_2_in_5 = NULL;
main_Import_2_in_6 = NULL;
main_Import_2_out_1 = NULL;
main_Transmitter_5_out_1 = NULL;
main_Receiver_5_out_1 = NULL;
main_Extract_1_in_2 = "box";
main_Extract_1_out_1 = NULL;
main_Compute_1_in_1 = "($0.x)";
main_Compute_1_out_1 = NULL;
main_Statistics_1_out_4 = NULL;
main_Statistics_1_out_5 = NULL;
main_Compute_2_in_1 = "($0.y)";
main_Compute_2_out_1 = NULL;
main_Statistics_2_out_4 = NULL;
main_Statistics_2_out_5 = NULL;
main_Compute_3_in_1 = "($0.z)";
main_Compute_3_out_1 = NULL;
main_Statistics_3_out_4 = NULL;
main_Statistics_3_out_5 = NULL;
main_Compute_5_in_1 = "[-$0, -$1, -$2]";
main_Compute_5_out_1 = NULL;
main_Transmitter_3_out_1 = NULL;
main_Receiver_3_out_1 = NULL;
main_Translate_1_out_1 = NULL;
main_Compute_4_in_1 = "[1.0/($1-$0), 1.0/($3-$2), 1.0/($5-$4)]";
main_Compute_4_out_1 = NULL;
main_Transmitter_4_out_1 = NULL;
main_Receiver_4_out_1 = NULL;
main_Scale_1_out_1 = NULL;
main_Switch_2_out_1 = NULL;
main_ShowBox_1_out_1 = NULL;
main_Scalar_3_in_1 = "Scalar_3";
main_Scalar_3_in_2 = NULL;
main_Scalar_3_in_3 = 3.5 ;
main_Scalar_3_in_4 = 0;
main_Scalar_3_in_5 = NULL;
main_Scalar_3_in_6 = NULL;
main_Scalar_3_in_7 = NULL;
main_Scalar_3_in_8 = NULL;
main_Scalar_3_in_9 = 5;
main_Scalar_3_in_10 = NULL;
main_Scalar_3_in_11 = "Contour level (Kelvin):";
main_Scalar_3_out_1 = 3.5 ;
main_Isosurface_1_in_3 = 1;
main_Isosurface_1_in_4 = NULL;
main_Isosurface_1_in_5 = NULL;
main_Isosurface_1_in_6 = NULL;
main_Isosurface_1_out_1 = NULL;
main_AutoColor_2_in_2 = NULL;
main_AutoColor_2_in_3 = NULL;
main_AutoColor_2_in_4 = NULL;
main_AutoColor_2_in_5 = NULL;
main_AutoColor_2_in_6 = NULL;
main_AutoColor_2_in_7 = NULL;
main_AutoColor_2_in_8 = NULL;
main_AutoColor_2_in_9 = NULL;
main_AutoColor_2_in_10 = NULL;
main_AutoColor_2_out_1 = NULL;
main_Format_1_in_1 = "Temperature contour: %-.1f Kelvin";
main_Format_1_in_3 = NULL;
main_Format_1_out_1 = NULL;
main_Caption_1_in_2 = [0.05,0.05];
main_Caption_1_in_3 = NULL;
main_Caption_1_in_4 = NULL;
main_Caption_1_in_5 = NULL;
main_Caption_1_in_6 = NULL;
main_Caption_1_in_7 = NULL;
main_Caption_1_in_8 = NULL;
main_Caption_1_in_9 = NULL;
main_Caption_1_out_1 = NULL;
main_Collect_1_out_1 = NULL;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title) -> (
        object,
        camera)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title,
        renderMode,
        buttonUpApprox,
        buttonDownApprox,
        buttonUpDensity,
        buttonDownDensity) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    coloredDefaultCamera = 
	 UpdateCamera(defaultCamera,
            background=backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            coloredDefaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",
            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    object_tag = Inquire(
            object,
            "object tag")[instance: 3, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "object tag",
            object_tag,
            "ddcamera",
            whichCamera,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "button state",
            buttonState,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 4, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 6, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 7, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($1 == $2) && ($3 == $4)) ? 2 : 3",
            RECenable,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 2, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 3, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_3_in_1 = "Image_3";
main_Image_3_in_3 = "X8,,";
main_Image_3_in_4 = 1;
main_Image_3_in_5 = [0.5 0.4375 0.5];
main_Image_3_in_6 = [-0.220933 3.12639 -0.220933];
main_Image_3_in_7 = NULL;
main_Image_3_in_8 = 800;
main_Image_3_in_9 = 1.001;
main_Image_3_in_10 = [0 0 -1];
main_Image_3_in_11 = 30.0;
main_Image_3_in_12 = 1;
main_Image_3_in_13 = NULL;
main_Image_3_in_14 = 1;
main_Image_3_in_15 = NULL;
main_Image_3_in_16 = NULL;
main_Image_3_in_17 = NULL;
main_Image_3_in_18 = NULL;
main_Image_3_in_19 = 0;
main_Image_3_in_20 = NULL;
main_Image_3_in_21 = NULL;
main_Image_3_in_22 = NULL;
main_Image_3_in_23 = NULL;
main_Image_3_in_25 = NULL;
main_Image_3_in_26 = NULL;
main_Image_3_in_27 = NULL;
main_Image_3_in_28 = NULL;
main_Image_3_in_29 = 1;
main_Image_3_in_30 = {"Velocity", "RA Offset", "Dec. Offset"};
main_Image_3_in_31 = { 4 4 4 };
main_Image_3_in_32 = NULL;
main_Image_3_in_33 = 1;
main_Image_3_in_34 = 0;
main_Image_3_in_35 = NULL;
main_Image_3_in_36 = 1;
main_Image_3_in_37 = {"grey30", "yellow", "yellow", "white"};
main_Image_3_in_38 = {"background", "grid", "ticks", "labels"};
main_Image_3_in_39 = 1.000000;
main_Image_3_in_40 = NULL;
main_Image_3_in_41 = "navigate";
main_Image_3_in_42 = NULL;
Executive("product version 3 1 2");
$sync
main();
