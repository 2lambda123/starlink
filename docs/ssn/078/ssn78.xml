<?xml version="1.0"?>
<!DOCTYPE ssn PUBLIC
              "-//Starlink//DTD Starlink SSN 0.7 (XML)//EN"
              "ssn-xml-0.7.dtd" [
  <!ENTITY autoconfman 
           "http://www.gnu.org/software/autoconf/manual/autoconf-2.57">
  <!ENTITY autoconfhtml "&autoconfman;/html_node">
  <!ENTITY automakeman "http://www.gnu.org/software/automake/manual">
  <!ENTITY automakehtml "&automakeman;/html_node">
  <!ENTITY fig-autoheader-gif SYSTEM "ssn78-1.gif" NDATA gif89a>
  <!ENTITY fig-autoheader-eps SYSTEM "ssn78-1.eps" NDATA eps>
  <!ENTITY fig-autoheader-pdf SYSTEM "ssn78-1.pdf" NDATA pdf>
  <!ENTITY fig-autoconf-gif   SYSTEM "ssn78-2.gif" NDATA gif89a>
  <!ENTITY fig-autoconf-eps   SYSTEM "ssn78-2.eps" NDATA eps>
  <!ENTITY fig-autoconf-pdf   SYSTEM "ssn78-2.pdf" NDATA pdf>
  <!ENTITY fig-automake-gif   SYSTEM "ssn78-3.gif" NDATA gif89a>
  <!ENTITY fig-automake-eps   SYSTEM "ssn78-3.eps" NDATA eps>
  <!ENTITY fig-automake-pdf   SYSTEM "ssn78-3.pdf" NDATA pdf>
  <!ENTITY fig-configure-gif  SYSTEM "ssn78-4.gif" NDATA gif89a>
  <!ENTITY fig-configure-eps  SYSTEM "ssn78-4.eps" NDATA eps>
  <!ENTITY fig-configure-pdf  SYSTEM "ssn78-4.pdf" NDATA pdf>
]>
<!-- $Revision$ -->

<!-- Tell psgmls not to auto-indent verbatim elements -->
<?PSGML nofill verbatim ?>

<ssn>
  <docinfo>
    <title>The Starlink Build System</title>
    <authorlist>
      <author id="nxg">Norman Gray</author>
    </authorlist>
    <docnumber>78</docnumber>
    <history>
      <version number="0" date="26-Feb-2004" author="nxg">
        <px>Initial draft release: $Revision$</px>
      </version>
    </history>
  </docinfo>

  <docbody>
    <abstract>
      <px>An introduction to the Starlink build system.  At present, this
        document covers only the configuration and build aspects of
        the system, but it should expand to cover tagging, branching,
        and other source maintenance patterns as well.</px>

      <px><strong>This is a draft document, in more-or-less constant
          flux.</strong></px>
      <px><tabular>
          <tgroup cols="1">
            <tbody>
              <row>
                <entry>$Revision$</entry>
              </row>
              <row>
                <entry>$Date$</entry>
              </row>
            </tbody>
          </tgroup>
        </tabular>
      </px>

      <px>See <span
          media="print"><url>http://cvsweb.starlink.ac.uk/cvsweb.cgi/docs/ssn78/ssn78.xml</url></span><span media='screen'><webref url="http://cvsweb.starlink.ac.uk/cvsweb.cgi/docs/ssn78/ssn78.xml">the repository</webref></span> for 
        changes and its current status.</px>

    </abstract>

    <sect id="intro" export="export">
      <subhead>
        <title>Introduction</title>
      </subhead>

      <p><strong>This is a draft document</strong></p>

      <p>The Starlink build system consists of
        <ul>
          <li>
            <p>the Starlink CVS repository;</p>
          </li>
          <li>
            <p>build tools, consisting of modified versions of the GNU
              autotools <code>autoconf</code> <code>automake</code>
              and <code>libtool</code>;</p>
          </li>
          <li>
            <p>configuration and bootstrap code, consisting of the
              <code>starconf</code> system and the scripts at the top
              level of the Starlink source tree; and</p>
          </li>
          <li>
            <p>the conventions for branching and tagging which are at
              present only documented in the wiki, on the pages
              <url>http://wiki.starlink.ac.uk/twiki/bin/view/Starlink/BranchingPolicy</url> and <url>http://wiki.starlink.ac.uk/twiki/bin/view/Starlink/CvsTagging</url>.</p>
          </li>
        </ul>
      </p>

      <p>The repository is on the machine
        <code>cvs.starlink.ac.uk</code>, and when you are making a
        fresh checkout, or giving other commands not within the
        context of a local check-out, you should refer to it as
        <verbatim>
% cvs -d :ext:username@cvs.starlink.ac.uk:/cvs &lt;cvs-command&gt;
</verbatim>
        where <code>username</code> is your username on that system.
        You will need to set the environment variable
        <code>CVS_RSH</code> to <code>ssh</code> to connect to the
        repository.  If you need an account on this machine, get in
        touch with <webref url="mailto:ussc@star.rl.ac.uk"
          ><code>ussc@star.rl.ac.uk</code></webref>.  There is
        currently anonymous web-based access to the repository at
        <url>http://cvsweb.starlink.ac.uk</url>, and we expect to
        offer anonymous CVS access in the near future.  See
        <url>http://dev.starlink.ac.uk/</url> for news.</p>

      <p>The build system is intended to cover two main cases.
        Firstly, it covers the problem of building code directly from
        the CVS repository, both when building the entire software set
        from scratch (as during the nightly test build for example),
        and when working on a development version of a particular
        component, within the context of an otherwise built software
        set.  This includes the problem of abiding by long-standing
        Starlink conventions on documentation, auxiliary tools and
        installation locations.  The build system at present is
        concerned primarily with the `classic' applications, which are the
        large volume of legacy Starlink code which, though it is no
        longer being developed, must still be maintained and be
        buildable by the community.  It has no contact with the large
        volume of Java code, apart from having the same tagging and
        branching conventions, since the building of the Java
        applications is currently completely handled by the
        <code>ant</code> system.</p>

      <p>Each component in the CVS repository is intended to be built
        separately, as opposed to being built only by a make running
        at the top of the tree.  Many components require other
        components to be installed, and the role of the top-level
        makefile is to manage these dependencies, when it is necessary
        to build the entire tree from scratch.  After a fresh CVS
        checkout, and presuming that any dependencies are in place,
        each component in the tree should be built with the sequence
        of commands
        <verbatim>
% ./bootstrap
% ./configure
% make
% make install
</verbatim>
        The `install' target generated by Starlink automake installs
        the component as usual,
        but additionally creates a manifest file which is then installed in
        the <code>manifests/</code> subdirectory under the Starlink
        installation directory.  The building of the whole tree from
        scratch is described in <ref id="bootstrapping"/>, and the
        procedure to build a single component, though little more
        complicated than described here, is discussed in more detail
        in <ref id="buildingcomponents"/>.  You should read both of
        these sections before trying the commands above.</p>

      <p>Secondly, the build system handles the construction of
        portable source-code sets -- distribution tarballs -- so that
        individual components can be built by users,
        from source, as straightforwardly as possible.  Since we are
        using the GNU autotools, much of this functionality comes for
        free, and we simply have to do the relatively small amount of
        configuration work required to ensure that the source set is
        complete (rather than requiring non-distributed build tools)
        and has clearly expressed dependencies between packages.  It
        is an absolute requirement that the build process for users
        must consist of no more than
        <verbatim>
% ./configure
% make
% make install
        </verbatim>
        with the usual options available for <code>./configure</code>
        and the usual relocations available for GNU-style makefiles.
        This document does not discuss building from a distribution
        tarball in any more detail than this, since there is really
        very little more detail to discuss.</p>

      <p>The system does not cover the precise mechanism by which these
        tarballs are distributed to users, nor the means by which they
        are informed of, or helped to satisfy, the dependencies
        between components; but in generating manifests and assembling
        the component dependency graph, it provides the information
        which such a distribution portal would need.</p>

      <p>In other sections of this document, we discuss the tools used
        to support developing within the CVS tree, including the
        specific starconf tools and an overview of the GNU autotools
        autoconf, automake and libtool (<ref id="tools"/>); we discuss
        the procedure for building applications within the repository
        (<ref id="building"/>); and we describe the process of
        adapting a currently working package to the build system's
        conventions (<ref id="autoconfing"/>).</p>

    </sect>

    <sect id="tools" export="export">
      <subhead>
        <title>Tools</title>
      </subhead>

      <p>This section is concerned with the tools which make up the 
        Starlink build system.  There are generally very few
        adjustments you need to make to the program source code
        (though the autotools can help you manage such things as
        installation directories and platform dependencies), and the
        changes you will make are to the auxiliary files which manage
        the build, most prominently the <code>configure.ac</code> file
        which organises the configuration, and the
        <code>Makefile.am</code> file which controls generating the
        makefile which does the work.</p>

      <p>The build system as a whole consists of a number of components:
        <dl>

          <dt>The Starlink autotools</dt>
          <dd>
            <p>These consist of versions of the GNU autotools, which
              are part of the Starlink CVS repository, and which are
              built and installed as part of the top-level bootstrap.
              They should be installed in <code
                type="fspath">/star/buildsupport/bin</code>, or its
              equivalent if you have installed a set of tools in a tree
              other than <code>/star</code>.  Since they have been
              extended and customised, they are essential; you cannot
              build the Starlink collection without them.  There is an
              introduction to the autotools in <ref id="tooloverview"/>,
              covering their interrelationships and basic usage.</p>

            <p>We use (at the time of writing) an unmodified libtool,
              a moderately extended autoconf, and an extended and
              customised automake.  The description below explains the
              use of these tools as modified; see <ref id="gnutools"/>
              for details of the differences from the stock
              autotools.</p>

          </dd>

          <dt>The Starlink autoconf macros</dt>
          <dd>

            <p>There is an extensive set of autoconf macros which
              support building Starlink applications.  You use these
              as you would any of the standard autoconf macros, by
              invoking them within the <code>configure.ac</code> file.</p>

            <p>The macros are described in detail in <ref
                id="starconfmacros"/>.</p>

            <p>The autoconf program which is used is not itself
              customised for Starlink use.  Instead, the macros are
              installed using the standard autoconf
              extension mechanism, which uses the standard file
              <code>acinclude.m4</code> and the application
              <em>aclocal</em>.  This is discussed in passing in <ref
                id="tooloverview"/>, and we mention it here only to explain
              the presence of this important file.  The
              <code>acinclude.m4</code> file is managed by the
              starconf application.</p>
          </dd>

          <dt>starconf</dt>
          <dd>
            <p>This is the program which handles installing required
              macros, and configuring your directory ready to use
              the build system.  Associated with <em>starconf</em>
              is the <em>starconf-validate</em> program which checks
              that your directory is configured correctly, and the
              program <em>./starconf.status</em>, which unpacks
              required files, and allows you to make the link back
              to the configuration used to build the software.  All
              these are described in detail in <ref
                id="starconf"/>.</p>
          </dd>

        </dl>
      </p>

      <subsect id="tooloverview" export="export">
        <subhead>
          <title>Overview of the Autotools</title>
        </subhead>

        <p>The autotools as a group help you create software
          distributions which will build reliably on a large variety
          of platforms.  They are most obviously associated with unix
          systems, but in fact support the larger class of POSIX
          systems which have an implementation of <code>/bin/sh</code>
          available -- a class which includes Windows machines,
          through the <webref url="http://www.cygwin.com/" >cygwin
            environment</webref>.</p>

        <p>The minimum required contact with the autotools is to
          generate the files which will let you configure a freshly
          checked-out directory before working on it, since these
          configuration files are not checked in to the repository.
          The <code>./bootstrap</code> script (see <ref
            id="starconf"/>) will do this for
          you, but it can only do this if the autotools are installed
          (see <ref id="bootstrappingonly"/>).</p>

        <p>The aim of the notes below is to give you an overview of
          autoconf and automake functionality, enough to make it
          possible for you to roughly understand the existing
          configuration files, and to make it easier to approach the full
          autoconf and automake documentation.  We start off with a
          broad overview, and provide a few further details in the
          subsections which follow.</p>

        <p>The two most obvious and important files are
          <code>configure.ac</code> and <code>Makefile.am</code>.  The
          first tells autoconf how to make the
          <code>./configure</code> script which does the actual
          configuration work, and which will be distributed with your
          package, the second (assuming you're using automake rather
          than hand-maintaining the input Makefile) tells automake how
          to create the template makefile <code>Makefile.in</code>,
          which is also distributed with your package, and which is
          edited by the <code>./configure</code> script to (finally!)
          produce the <code>Makefile</code> which (finally!) builds the
          code on the user's system.</p>

        <p>It's useful to illustrate the inputs and outputs of the
          various tools.  First are autoconf and automake:</p>

        <figure float="nofloat">
          <caption><px>Inputs to, and outputs from, autoconf</px></caption>
          <figurecontent image="fig-autoconf-gif"/>
          <figurecontent image="fig-autoconf-eps"/>
          <figurecontent image="fig-autoconf-pdf"/>
        </figure>

        <figure float="nofloat">
          <caption><px>Inputs to, and outputs from, automake</px></caption>
          <figurecontent image="fig-automake-gif"/>
          <figurecontent image="fig-automake-eps"/>
          <figurecontent image="fig-automake-pdf"/>
        </figure>

        <p>As you can see, although <code>configure.ac</code> is most
          associated with autoconf, automake reads it, too, to
          discover for example whether you have invoked
          <code>AC_PROG_LIBTOOL</code> or <code>STAR_MONOLITHS</code>,
          and so whether it needs to add the appropriate support in
          the generated <code>Makefile.in</code>.</p>

        <p>Once the <code>./configure</code> script is created, it is
          able to interrogate the system (the user's system, that is,
          not the developer's), and based on that edit the various
          <code>.in</code> files to produce their corresponding
          outputs.</p>

        <figure float="nofloat">
          <caption>
            <px>Inputs and outputs to configure</px>
          </caption>
          <figurecontent image="fig-configure-gif"/>
          <figurecontent image="fig-configure-eps"/>
          <figurecontent image="fig-configure-pdf"/>
        </figure>

        <p>This diagram for <code>./configure</code> shows a file
          <code>config.h.in</code> being edited.  This file -- which
          we will have more to say about in <ref
            id="autoconfoverview"/> -- is a template list of C
          preprocessor definitions, which can be
          <code>#include</code>d in a C source file, and so used to
          configure the use of functions and definitions there.  Like
          any of the other <code>.in</code> files, it is possible to
          maintain this by hand, but it is more reliable to maintain
          it using another application <em>autoheader</em>, which
          looks as follows.</p>

        <figure float="nofloat">
          <caption>
            <px>Inputs and outputs to autoheader</px>
          </caption>
          <figurecontent image="fig-autoheader-gif"/>
          <figurecontent image="fig-autoheader-eps"/>
          <figurecontent image="fig-autoheader-pdf"/>
        </figure>

        <p>The other file we have not mentioned yet is
          <code>starconf.m4</code>.  This file contains macros (in
          the implementation language of autoconf, m4) which are
          used to extend autoconf's functionality, supplying the
          Starlink-specific autoconf support.  You will
          not typically have anything to do with this file, and we
          mention it only to indicate schematically where (some of)
          the Starlink magic comes from.  This file is not in your
          working directory, but is installed in the place the
          autotools expect to find it, by the <em>starconf</em>
          application described in <ref id="starconf"/>.  You may also
          notice a file <code>aclocal.m4</code> in your directory.
          This is a cache of autoconf macros, maintained by the
          autoreconf program; it should not be checked in.</p>

        <p>Of the applications mentioned above, automake, autoconf and
          (usually implicitly) autoheader are run on the developer's
          machine before or while making a distribution; thus the
          products of these programs, <code>./configure</code>,
          <code>config.h.in</code> and <code>Makefile.in</code>, are
          included in the distribution, and the <code>.in</code> files
          edited by the <code>./configure</code> script into the
          <code>config.h</code> and <code>Makefile</code> which
          actually control the build.</p>

        <p>We have elided some details here, for simplicity, and we
          could possibly have elided more, since you generally don't
          have to concern yourself with autoheader or
          <code>aclocal.m4</code>.  You don't even have to worry
          about the dependencies between these files and applications,
          since the <code>Makefile.in</code> which automake generates
          knows about these dependencies and will generally keep
          things up to date for you.  If you wish to be sure things
          are up to date, then you can simply run application
          <em>autoreconf</em> (see <ref id="autoreconf"/>), which
          knows enough about the relationships between them to run
          each of the required ones in the correct order.  This is
          likely the only one of the autotools commands which you will
          run yourself.</p>

        <p>For more details on the relationships between these
          applications, and fuller diagrams, see the online copy of the
          book <webref url="http://sources.redhat.com/autobook/" >`GNU
            Autoconf, Automake, and Libtool'</webref>, and in particular
          <webref
            url="http://sources.redhat.com/autobook/autobook/autobook_276.html"
            >Appendix C of that book, `Generated file dependencies'</webref>.</p>

        <p>Comprehensive details of the autotools are to be found in their
          respective manuals, which are available online at
          <ul>
            <li>
              <p><url>&autoconfman;/autoconf.html</url></p>
            </li>
            <li>
              <p><url>&automakeman;/</url></p>
            </li>
            <li>
              <p><url>http://www.gnu.org/software/libtool/manual.html</url></p>
            </li>
          </ul>
          The autoconf manual is relatively clear, once you have a
          basic idea of what it's trying to do, but it's more
          effective as a reference manual than as a tutorial.  The
          automake manual should be regarded as a reference manual
          only: you might not guess from the manual, that 
          automake will make your life simpler, rather than full of
          anguish, suffering and confusion.  It doesn't really matter
          how good or bad the libtool manual is, since if you discover you
          have to look at it, you already know your future holds pain,
          and the manual isn't going to make things better or worse.
        </p>

        <p>It's also worth looking at the <webref
            url="http://www.gnu.org/prep/standards_48.html">`Release
            Process'</webref> section of the GNU Coding Standards
          document.  Though we are not necessarily following these
          standards, this section both describes what is conventional
          packaging in the open-source world, and outlines the
          conventions which the autotools are designed to support.</p>

        <subsubsect id="autoconfoverview">
          <subhead>
            <title>Autoconf</title>
          </subhead>

          <p>We use an extended version of autoconf 2.59.</p>

          <p>The goal of autoconf is to help you make your program
            portable, by allowing you, at build time, to adapt the
            program to the facilities available on the machine on
            which the program is being built.</p>

          <p>You control this through a script called
            <code>configure.ac</code> (which was called
            <code>configure.in</code> in older versions of autoconf).
            The autoconf program produces from this a very portable
            <code>/bin/sh</code> script called <code>configure</code>,
            which is distributed as part of your package, and which
            the person building the package runs as the first part of
            the <kbd>./configure; make; make install</kbd>
            incantation.</p>

          <p>The <code>./configure</code> script probes the system it
            is running on, finding compilers, testing the behaviour of
            the local unix system, testing whether specific include files
            exist or not, testing whether required functions are
            available and working as expected, and managing some
            configuration by the user, such as allowing them to
            specify where the package is to be installed.</p>

          <p>This information is only useful if it can be communicated
            to your program in some way.  This is done by the
            configure script by editing the values of certain
            `substitution variables' into a list of template files.</p>

          <p>For example, you might have a version header file
            <code>version.h.in</code>, containing the line
            <verbatim>
const char version[] = "@PACKAGE_VERSION@";
</verbatim>
            The configure variable <code>PACKAGE_VERSION</code> is one of those
            substituted by default, and if this file were listed as
            one of those to be substituted (by mentioning it in the
            autoconf macro <code>AC_CONFIG_FILES(version.h)</code>),
            then a file <code>version.h</code> would be created
            containing the contents of the <code>version.h.in</code>
            file with the <code>@PACKAGE_VERSION@</code> substituted by the
            version number declared within the
            <code>configure</code> file.</p>

          <p>Although this substitution process can be done for any
            template file, there are two template files which are used
            particularly often.</p>

          <p>The first is <code>Makefile.in</code>, which is a
            skeleton makefile which
            you might write by hand (though see the discussion of
            automake in <ref id='automakeoverview'/>).  There is an
            example of this at the top level of the Starlink build
            tree.  A typical <code>Makefile.in</code> might include
            lines like
            <verbatim>
LN_S = @LN_S@
CC = @CC@
myfile.o: myfile.c
        $(CC) -o myfile.o myfile.c
</verbatim>
            That, combined with autoconf macros
            <code>AC_PROG_CC</code> and <code>AC_PROG_LN_S</code>,
            would allow you to produce a file <code>Makefile</code>
            which was customised to use the C compiler appropriate to
            the local environment, and which had, in the makefile
            variable <code>$(LN_S)</code> a command which makes links
            between files if the local platform supports that, or
            makes hard links or simple copies if that is all that is
            possible.</p>

          <p>As well as configuring the makefile, you may also want to
            configure the source code, so that you can take different
            actions in your code depending on whether certain
            functions or headers are available.  That is is most
            often done via a particular configured file,
            conventionally named <code>config.h</code>.  This second
            way of communicating with your source code has the
            <code>config.h</code> file substituted with a number of C
            preprocessor <code>#define</code> statements.  For
            example, if you included in your <code>configure.ac</code>
            file the lines
            <verbatim>
AC_CHECK_HEADERS([sys/wait.h])
AC_CHECK_FUNCS([strchr])
</verbatim>
            then the configure script generated from that source would
            include a test of whether the <code>sys/wait.h</code>
            header file was available, and whether the
            <code>strchr</code> function was available in the C
            library.  If so, the resulting <code>config.h</code> file
            would include the lines
            <verbatim>
#define HAVE_SYS_WAIT_H 1
#define HAVE_STRCHR 1
</verbatim>
            Whereas most configured files are substituted as a result
            of being mentioned in a <code>AC_CONFIG_FILES()</code>
            macro, the <code>config.h.in</code> input file is
            configured through
            <code>AC_CONFIG_HEADERS(config.h)</code>, which does its
            configuration in a slightly different way.</p>

          <p>After including this file into your source code with 
            <verbatim>
#include &lt;config.h&gt;
</verbatim>
            you can adjust the compiled code with suitable
            <code>#if</code> preprocessor conditionals, such as
            <verbatim>
#if HAVE_SYS_WAIT_H
#include &lt;sys/wait.h&gt;
#endif
</verbatim></p>  

          <p>It is possible to maintain the <code>config.h.in</code>
            file by hand, but generally better to generated it by using
            the <em>autoheader</em> application which is part of
            autoconf.  This scans your <code>configure.ac</code> and
            extracts into <code>config.h.in</code> mentions of all those
            preprocessor defines it finds.  Autoheader knows about
            macros such as <code>AC_CHECK_HEADERS</code> above; if you
            wish to add further switches to the <code>config.h.in</code>
            file, you should do so by calling the autoconf macro
            <code>AC_DEFINE</code>.  See the section <webref
              url="&autoconfhtml;/autoconf_82.html" >7.1 Defining C
              Preprocessor Symbols</webref> in the autoconf manual for
            further details.  Autoheader is one of those applications
            run on your behalf by autoreconf (see <ref id="autoreconf"/>).</p>

          <p>Note the angle brackets round <code>config.h</code>: this
            is preferred to double quotes, as it gives the makefile the
            option of controlling where the source code is; in the
            simplest case this is handed by simply adding
            <code>-I.</code> to the compile line.  We don't take take
            advantage of this particular flexibility, but it is a good
            habit to get into.</p>

          <p>An illustrative <code>configure.ac</code> might look like
            this (with line numbers inserted):
            <verbatim>
1   AC_INIT(mypack, 1.2, ussc@star.rl.ac.uk)
2   AC_CONFIG_SRCDIR(src.c)
3   STAR_DEFAULTS
4   AC_PROG_CC
5   AC_PATH_PROG(PERL, perl)
6   AC_CHECK_HEADERS([sys/time.h])
7   STAR_MESSGEN(mypack_err.msg)
8   AC_CONFIG_HEADERS(config.h)
9   AC_CONFIG_FILES(Makefile)
10  AC_CONFIG_FILES(myscript.pl, [chmod +x myscript.pl])
11  AC_OUTPUT
</verbatim></p>

          <!-- The media selectors below are currently at 'all': might be
               useful to switch these back to 'screen' and add other
               branches for other media. -->

          <p>Line 1: This line is required.  It declares the package
            name, version number, and bug-report address.  Each of
            these is available for substitution via the substitution
            variables <code>PACKAGE_NAME</code>,
            <code>PACKAGE_VERSION</code> and
            <code>PACKAGE_BUGREPORT</code>.  <span media='all'>See
              autoconf
            <webref url='&autoconfhtml;/autoconf_16.html' >4.1 Initializing configure</webref></span></p>

          <p>Line 2: This is largely a sanity check, and produces an
            error if the named file (in this case <code>src.c</code>)
            is not in the source directory.  The source directory is
            typically the current directory, but you can specify a
            different one using the <code>--srcdir</code> option to
            <code>./configure</code>, if you have a good reason for
            doing that.  <span media="all">See autoconf
              <webref url='&autoconfhtml;/autoconf_18.html' >4.3 Finding configure Input</webref></span></p>

          <p>Line 3: This macro is one of the Starlink extensions, and
            the only required Starlink macro.  It
            sets up the defaults required for building Starlink
            applications, and assures the <code>starconf</code>
            program that it's being run in the correct directory.  See
            <ref id='starconf'/> for a description of the starconf
            application, and <ref id="starconfmacros"/> for details of
            the associated macros.</p>

          <p>Line 4: This finds a working C compiler, and prepares to
            substitute it in the substitution variable
            <code>CC</code>.  Presumably the Makefile.in has a line
            <code>CC=@CC@</code>.
            <span media="all">See autoconf 
              <webref url='&autoconfhtml;/autoconf_64.html' >5.10.3 C Compiler Characteristics</webref></span></p>

          <p>Line 5: Find a binary called <code>perl</code> in the
            current <code>PATH</code> and assign the substitution
            variable <code>PERL</code> the full path to it.  The most
            common way of using this would be for the file
            <code>myscript.pl.in</code> to start off with the line
            <verbatim>
#! @PERL@ -w
</verbatim>
            so that the script ends up with the correct full path.
            See line 10<span media="all"> and autoconf
              <webref url='&autoconfhtml;/autoconf_41.html' >5.2.2 Generic Program and File Checks</webref></span>.</p>

          <p>Line 6: check that the system has an include file
            <code>sys/time.h</code> in the include path, and if it
            has, make sure that the <code>cpp</code> variable
            <code>HAVE_SYS_TIME_H</code> is defined.  If this were a
            real configure file, you would likely have several other
            header tests here (in a space-separated list, surrounded
            by square brackets), and cpp branching inside your source
            code to handle the various cases.  See line 8<span
              media="all"> and autoconf
              <webref url='&autoconfhtml;/autoconf_51.html' >5.6.3 Generic Header Checks</webref></span>.</p>

          <p>Line 7: Another Starlink extension.  It
            declares that this package has a set of ERR messages in
            the given file, and that autoconf and automake should
            prepare to handle them.</p>

          <p>Line 8: This is the macro that makes cpp configuration
            information available, by editing the header file
            <code>config.h.in</code> (this file name is conventional, but
            not required).  <span media="all">See autoconf
              <webref url="&autoconfhtml;/autoconf_27.html">4.8
                Configuration Header Files</webref>.</span>  If you
            want to put extra information into this file, use the
            <code>AC_DEFINE</code> macro: a declaration like
            <code>AC_DEFINE(SPECIALCASE,1)</code> would insert
            <code>#define SPECIALCASE 1</code> into the
            <code>config.h</code>; autoheader also spots this and puts
            a suitable template into <code>config.h.in</code>.  See
            the autoconf manual, section <webref
              url="&autoconfhtml;/autoconf_82.html">Defining C
              preprocessor symbols</webref>, for further details.</p>

          <p>Line 9: This does the work of substituting the results of
            the various tests into the files being configured.  For each
            of the files named in the (space-separated list) argument,
            which most typically includes <code>Makefile</code>,
            autoconf expects to find a file of the same name but with
            <code>.in</code> appended, and this is the file which has
            the substitutions edited in.</p>

          <p>Line 10: This is a variant of line 9.  The
            <code>AC_CONFIG_FILES</code> macro takes a second argument
            consisting of one or more lines of shell script to
            post-process the file in question, in this case making
            sure that the generated file is executable.</p>

          <p>Line 11: This is the line which <em>really</em> does the
            work.  <span media='all'>See <webref
                url="&autoconfhtml;/autoconf_19.html" >4.4 Outputting
                Files</webref>.</span></p>

          <p>Of this script, it is lines 1, 2 and 11 which are
            absolutely required, along with something like line 9 to
            make the configure script do something useful.</p>

          <p>It is useful to think of the <code>configure.ac</code>
            file as being the template for the final
            <code>./configure</code> script, with the autoconf macros
            simply expanding to (large chunks of) shell script during
            translation by the autoconf program.  This isn't the whole
            truth, but it suffices for almost all purposes.  About the
            only place where this view might deceive you is if you
            wished to modify a file after it was generated by
            <code>AC_CONFIG_FILES</code> for example; if you did that
            immediately after the <code>AC_CONFIG_FILES</code> line it
            would fail -- that is why <code>AC_CONFIG_FILES</code> has
            its second argument.  With this view it is natural that
            you can add any other shell scripting to your
            configure.ac, adding any tests and switches you fancy.
            You communicate the results of your scripting to the
            output files by making shell variables into substitution
            variables, and the way you do that is by calling
            <code>AC_SUBST</code> on them.  Thus, after
            <verbatim>
wibble=''
... # lots of clever scripting
AC_SUBST(wibble)
</verbatim>
            any occurrences of the string <code>@wibble@</code> in the
            substituted files will be replaced by the value of
            <code>wibble</code> at the end of the
            <code>./configure</code> script.</p>

          <subsubsubsect>
            <subhead>
              <title>M4 syntax and traps</title>
            </subhead>

            <p>Autoconf does its work by running the
              <code>configure.ac</code> file through the text processor
              GNU <code>m4</code>, and this can cause occasional
              surprises.</p>

            <p>M4 is a macro language, intended for very much the sort
              of rewriting that autoconf does.  When m4 processes a
              file, anything at all that looks like an m4 macro is
              substituted, so that there is no macro invocation
              character like the backslash in &tex;.  Macros can take
              arguments, delimited by round brackets and separated by
              commas, as illustrated above.</p>

            <p>The first oddity is to do with comment characters.  The
              default m4 comment character is <code>#</code>, but
              since this is also the shell script and makefile comment
              character, autoconf makes it an ordinary character.
              Thus to add comments to a <code>configure.ac</code> file
              which won't make it into the <code>./configure</code>
              file, you should prefix them with the m4 <em>macro</em>
              <code>dnl</code>, as in
              <verbatim>
dnl   This is a comment
AC_INIT(...)
</verbatim>
              There's no harm in including <code>#</code>-style
              comments in your <code>configure.ac</code> file and
              allowing these to be passed through to the output file,
              since `got-here' type comments can sometimes help you
              debug the <code>./configure</code> script.</p>

            <p>The default m4 quote characters are the left and right
              single quotes, but autoconf changes these to left and
              right square brackets.  You need to use these in two
              circumstances, firstly when you have a multi-word
              argument to a macro, and particularly when that argument
              contains a comma, and secondly if a piece of text looks
              like a current m4 macro.  In general, if you need to
              care about m4 quoting, you're in trouble, but see
              section <webref url="&autoconfhtml;/autoconf_90.html"
                >8.1 M4 Quotation</webref> in the autoconf manual, for
              some advice.</p>

          </subsubsubsect>
        </subsubsect>

        <subsubsect id='automakeoverview'>
          <subhead>
            <title>Automake</title>
          </subhead>

          <p>The most typical use of autoconf is to configure a file
            <code>Makefile.in</code>.  You can write this yourself, as
            described in <ref id='autoconfoverview' >the discussion of
              autoconf</ref>, but since so much of a typical makefile
            is boilerplate, automake exists to write this boilerplate
            for you.  This has the additional advantage that we can
            support and enforce Starlink-specific conventions with a
            customised installation of automake.  We (currently) use
            an adapted version of automake 1.8.2 -- see <ref
              id="gnutools"/> for a summary of the differences.</p>

          <p>The file which controls automake is
            <code>Makefile.am</code>.  Automake reads both this file and
            <code>configure.ac</code>, and based on these emits a
            <code>Makefile.in</code>.  It is this latter file which
            you distribute, and which is substituted at build time by the 
            <code>./configure</code> script which autoconf generates
            in turn.</p>

          <p>The resulting <code>Makefile</code> has rules to do all
            the required building and installation in a very portable
            fashion, as well as targets to make distributions
            (<kbd>make dist</kbd>), do tests (<kbd>make
              check</kbd>), clean up (<kbd>make clean</kbd>,
            <kbd>make distclean</kbd> and <kbd>make
              maintainer-clear</kbd>) and, in the case of Starlink
            automake, do an install along with an installation
            manifest.</p>

          <p>The <code>Makefile.am</code> script consists, in its
            simplest form, of a sequence of declarations of the
            relationships between the source files in your
            distribution and the programs and libraries they are
            intended to produce.  For example, here is the
            <code>Makefile.am</code> for the PAR library, slightly edited:
            <verbatim>
## Process this file with automake to produce Makefile.in

lib_LTLIBRARIES = libpar_adam.la
libpar_adam_la_SOURCES = $(F_ROUTINES)

include_HEADERS = $(PUBLIC_INCLUDES)

F_ROUTINES = \
         par1_menu.f \
         par_cancl.f \
         [blah...]

PUBLIC_INCLUDES = \
	PAR_ERR \
	PAR_PAR \
	par.h \
	parwrap.h \
	par_err.h \
	par_par.h

BUILT_SOURCES = PAR_ERR par_err.h
</verbatim></p>

          <p>Overall, you can see that this automake source file is
            syntactically a makefile -- the statements in this example
            look like makefile variable settings, and it is possible
            to put makefile rules in the <code>Makefile.am</code>
            file, though that is not illustrated here.  This is
            slightly deceptive, however, and while it was useful to
            think, above, of the <code>configure.ac</code> file as
            being the template of the eventual
            <code>./configure</code> script, for automake you should
            think of the match between the input syntax and the
            makefile as a happy coincidence.  You provide information
            to automake through the <code>Makefile.am</code> file,
            and based on that it then emits the <code>Makefile.in</code> it
            thinks you want (or need, at least).</p>

          <p>The first line is a conventional comment.  It starts with
            a doubled hash mark <code>##</code>, which causes automake
            to discard the text after it; lines beginning with a
            single comment character are copied verbatim into the
            generated <code>Makefile.in</code>.</p>

          <p>The next stanza declares that there is to be a library
            <code>libpar_adam.la</code>, and that the sources for this
            file are in the `makefile variable'
            <code>F_ROUTINES</code>.</p>

          <p>Though the variables <code>F_ROUTINES</code> and
            <code>PUBLIC_INCLUDES</code> are specific to this
            makefile, and arbitrary, the other variable names have both
            structure and meaning for automake.</p>

          <p>The variable <code>lib_LTLIBRARIES</code> consists of the
            `prefix' <code>lib</code> and the `primary'
            <code>LTLIBRARIES</code>.  The primary tells automake that
            you wish to build the libtool library
            <code>libpar_adam.la</code>, and the prefix indicates that
            this is to be installed with the other libraries (the
            variable <code>pkglib_LTLIBRARIES</code>, for example, would tell
            automake that you wanted to install the result in a
            package-specific library).  For each of the libraries
            listed in this variable, separated by spaces, there must
            be a corresponding <code>_SOURCES</code> variable, which
            has the `primary' <code>SOURCES</code> and a prefix
            formed from the library name, which lists
            the set of source files for that library.
            The prefix must be canonicalised by replacing
            with underscores everything other than letters and numbers.
            As well as declaring the files which are to be compiled
            into the library, this
            indicates to automake that these source files are to be
            distributed as part of the final tarball, and that it must
            emit makefile rules to install the library in the correct
            place, with the correct installation commands.
            For the list of such associated primaries, see section <webref
              url="&automakehtml;/Program-and-Library-Variables.html"
              >Program and Library Variables</webref> of the automake
            documentation.</p>

          <p>If we only wanted to build static libraries, we would
            replace this line with <code>lib_LIBRARIES =
              libpar_adam.a</code>, and the given library would be
            built in the usual way, without involving libtool.</p>

          <p>The <code>LIBRARIES</code> and <code>LTLIBRARIES</code>
            primaries can have any one of the prefixes
            <code>libdir</code>, <code>pkglibdir</code>,
            <code>check</code> or <code>noinst</code>, with the latter
            indicating that the library should be built but not
            installed.  Having non-installed libraries can be useful
            when you are building a library conditionally, or in stages.
            Libtool refers to these as `convenience libraries', and they
            are discussed in section <webref
              url="&automakehtml;/Libtool-Convenience-Libraries.html"
              >Libtool Convenience Libraries</webref> of the automake
            manual.</p>

          <p>The other very important primary (not shown here) is
            <code>PROGRAMS</code>, which describes programs which are to
            be built and installed (the special Starlink case of
            monoliths is described below).  This can have the prefixes
            <code>bin</code>, <code>sbin</code>, <code>libexec</code>,
            <code>pkglib</code>, <code>check</code> or
            <code>noinst</code>: <code>check</code> is for tests, and is
            described in <ref id="regressiontests"/>;
            <code>noinst</code> indicates that the program should be
            built but not installed, and is useful for programs which
            are used during the build -- for generating header files for
            example -- but which are not part of the final product.
            There is no single standard list of prefixes, since each
            primary supports only a subset of them (you cannot declare
            <code>bin_LIBRARIES</code>, for example), but several are
            mentioned in automake's <webref
              url="&automakehtml;/Install.html" >What Gets
              Installed</webref>, and the directories in question are
            discussed in autoconf's <webref
              url="&autoconfhtml;/autoconf_24.html" >4.7.2 Installation
              Directory Variables</webref>.</p>

          <p>The <code>include_HEADERS</code> line is similar: it
            indicates that the listed files are to be distributed, and
            are to be installed in the correct place for include
            files.</p>

          <p>The final line which is significant to automake is the
            <code>BUILT_SOURCES</code> line.  This says that, even
            though <code>PAR_ERR</code> and <code>par_err.h</code> are
            to be installed and distributed, they are not actually
            genuine source files, but must be built; adding the
            <code>BUILT_SOURCES</code> line forces automake to add a
            dependency for these files at an artificially early stage.
            It is not always
            necessary to include a line like this.  If one of the
            source files were in this category, then it would
            naturally be built when it was required, without any
            need to add it to <code>BUILT_SOURCES</code>.  As it happens,
            there is no rule in this file for building these targets;
            that is added automatically by automake when it spots that
            the <code>STAR_MESSGEN</code> macro has been used in the
            <code>configure.ac</code> file which partners this
            <code>Makefile.am</code>.  In a more general case,
            however, you would add a make-style rule to the
            <code>Makefile.am</code> file to build these files from
            their (presumably undistributed) sources.  See also <webref
              url="&automakehtml;/Sources.html" >Built sources</webref> in
            the automake manual.</p>

          <p>For a second example, we can look at the
            <code>Makefile.am</code> for the <code>sst</code>
            application (this is a non-distributed application for
            building documentation).
            <verbatim>
## Process this file with automake to produce Makefile.in

bin_SCRIPTS = start

bin_MONOLITHS = sst_mon
sst_mon_SOURCES = \
	sst_mon.f \
	$(sst_mon_TASKS:=.f) \
	$(SUBSRC) \
	$(SUBCSRC) \
	$(PRIVATE_INCLUDES)
sst_mon_TASKS = forstats procvt prohlp prolat propak prohtml
sst_mon_LDADD = $(LDADD) `fio_link`


SUBSRC = sst_clean.f sst_fwild.f sst_latex.f sst_puts.f  sst_trcvt.f \
         sst_cntac.f sst_get.f sst_latp.f sst_rdad1.f sst_trhlp.f \
         [blah...]

SUBCSRC = find_file.c

PRIVATE_INCLUDES = SST_PAR SST_SCB

sstsupportdir = $(bindir)
sstsupport_DATA = sun.tex sst.tex layout.tex forstats.dat html.sty

# The `start' script needs to have installation locations edited into it
edit = sed \
	-e 's,@bindir\@,$(bindir),g' \
	-e 's,@VERSION\@,$(VERSION),g'
start: start.in
	rm -f start.tmp start
	$(edit) \
	    -e 's,@edited_input\@,start: produced from start.in by Makefile.am,' \
	    $(srcdir)/start.in >start.tmp
	mv start.tmp start

EXTRA_DIST = start.in $(sstsupport_DATA)
</verbatim></p>

          <p>This makefile configures and installs a script, builds
            and installs a monolith, and adds some supporting data
            files in a non-standard place.</p>

          <p>The <code>SCRIPTS</code> primary indicates to automake
            where and how to install the <code>start</code> script.
            The <code>start</code> script must be generated, since it
            is to include the version number and installation
            location.  Since it includes the installation location, it
            should <em>not</em> be generated at configure time or
            install time, but instead at make time, so that the user
            is free to specify one installation prefix at configure time
            (through <kbd>./configure --prefix=www</kbd>), override
            this with another prefix at make time (through
            <kbd>make prefix=xxx</kbd>) and specify a
            <em>different</em> one -- presumably a staging location or
            something similar -- at installation time (through
            <kbd>make prefix=yyy install</kbd>).  It is the prefix at
            <em>build</em> time that is to be baked into the code, if
            any such baking has to be done.  This is one of the GNU
            conventions mentioned in <ref id="tooloverview"/>, and is
            discussed in a little more detail in section
            <webref url="&autoconfhtml;/autoconf_24.html">4.7.2
              Installation Directory Variables</webref> of the autoconf
            manual.  This is why we have to include a makefile-style
            rule for deriving the file <code>start</code> from its
            template <code>start.in</code>.  This substitutes in the
            values of the makefile variables <code>bindir</code> and
            <code>VERSION</code>; these get their values, in the
            resulting <code>Makefile</code>, by having those values
            substituted in to the generated <code>Makefile.in</code>
            by the generated <code>./configure</code> script; the
            careful escaping of the @-signs in the sed command is to
            match the <code>@...@</code> in <code>start.in</code>
            while <em>not</em> matching this in
            <code>Makefile.am</code> or the resulting
            <code>Makefile.in</code> (yes, this can get a little
            confusing).</p>

          <p>This <code>Makefile.am</code> also declares a single
            monolith (this and the <code>TASKS</code> primary below
            are obviously part of the Starlink extensions to automake)
            and its associated <code>SOURCES</code>, along with its
            component tasks.  For fuller details of the monoliths
            support, see <ref id="monoliths"/>.  This incidentally
            illustrates that automake allows variable reuse and
            rewriting very similar to that supported by make.</p>

          <p>When we are linking this monolith, we need to add a
            couple of link options, and we do this with a
            <code>LDADD</code> primary associated with the
            <code>sst_mon</code> prefix.  The extra link options we
            declare here are added to the eventual link command,
            replacing the default set of option
            options <code>$(LDADD)</code>, so we include that variable
            in our version.  We also add <code>`fio_link`</code>,
            because this monolith needs to be linked against the FIO
            library (automake constrains what can appear in the
            <code>LDADD</code> variable, and the
            <code>`fio_link`</code> is permissable only in Starlink
            automake -- see <ref id="gnutools"/> for details).</p>

          <p>The variables <code>SUBSRC</code>, <code>SUBCSRC</code>
            and <code>PRIVATE_INCLUDES</code> are purely user
            variables, with no special meaning to automake.</p>

          <p>The next bit of magic in this file is
            <code>sstsupport_DATA</code>.  In this particular case, we
            want to install data files in the same location as the
            binaries (why, and whether this is a good thing, is not
            for us to worry about here).  The obvious thing (trust
            me!) would be to say <code>bin_DATA = sun.tex ...</code>,
            but automake forbids that particular combination of prefix
            and primary, precisely because it wouldn't generally make
            sense (see <webref url="&automakehtml;/Data.html"
              >Architecture-independent data files</webref> in the
            automake manual).  Instead, we can take advantage of an
            escape-hatch that automake provides: a given prefix, such
            as <code>sstsupport</code>, is valid if you also define a
            variable of the same name, but with <code>dir</code>
            appended.  Thus we define <code>sstsupport_DATA</code> and
            <code>sstsupportdir</code>, and define the latter to have
            the same value as the <code>$(bindir)</code> makefile
            variable, as eventually substituted (see section <webref
              url="&automakehtml;/Uniform.html" >The Uniform Naming
              Scheme</webref> in the automake manual).</p>

          <p>This is a rather special case, and you should not have to
            do this sort of semi-licensed hacking very often.  In
            particular, you do not need to do it in the case of the
            Starlink standard directories <code>/star/docs</code>,
            <code>/star/etc</code> and <code>/star/help</code>, since
            you can give these directories as prefixes to the
            <code>DATA</code> primary.  As an example, the HDS
            makefile installs a file containing the information it has
            determined about the build machine's floating point model,
            and this is declared there as follows:
            <verbatim>
noinst_PROGRAMS = hds_machine
starhelp_DATA = hds_machine.txt

hds_machine_SOURCES = hds_machine.f
hds_machine_LDADD = libhds.la `ems_link` `chr_link` `cnf_link`

hds_machine.txt: hds_machine
        ./hds_machine >$@
</verbatim>
            This is enough to build the <code>hds_machine</code>
            application at install time, run it, and install the
            results in <code>/star/help</code> (with the obvious
            changes for prefixes <code>stardocs</code> and
            <code>staretc</code>).  The Starlink autoconf macros <ref
            id="macro-doc-files" ><code>STAR_DOC_FILES</code></ref>,
            <ref id="macro-etc-files"
            ><code>STAR_ETC_FILES</code></ref> and <ref
            id="macro-help-files" ><code>STAR_HELP_FILES</code></ref>
            allow you to do the same thing from within the
            <code>configure.ac</code> file.</p>

          <p>The remaining magic in this file is the
            <code>EXTRA_DIST</code> variable.  For all its cleverness,
            automake cannot work out that the <code>start.in</code>
            source, nor any of the <code>sstsupport_DATA</code> files
            are to be distributed, and you need to declare that
            explicitly by setting the <code>EXTRA_DIST</code>
            variable.  Though it is of course deterministic (see
            section <webref url="&automakehtml;/Dist.html" >What Goes
              in a Distribution</webref> of the manual), I find the
            most straightforward way to work out whether anything
            needs to go here is to build a distribution and spot what
            was missed out.</p>
          
        </subsubsect>

        <subsubsect>
          <subhead>
            <title>Libtool</title>
          </subhead>

          <p>We are using unmodified Libtool 1.5.</p>

          <p>Libtool contains the darkest magic of the autotools, so
            it is fortunate that we need barely concern ourselves with
            it.  This is because all of the technicalities of calling
            libtool are handled for us by the makefile generated by
            automake.</p>

          <p>The function of libtool is to build libraries.  While
            this is generally straightforward for static libraries,
            usually involving little more than working out whether
            <code>ranlib</code> is necessary, doing the same thing for
            dynamic libraries is extremely platform dependent.</p>

          <p>Libtool consists of a large body of platform-dependent
            code which implements a single platform-independent
            interface.  Libtool has been ported to a broad range of
            operating systems.</p>

          <p>For more details, see the libtool manual at
            <url>http://www.gnu.org/software/libtool/manual.html</url>.</p>

        </subsubsect>

        <subsubsect id="autoreconf">
          <subhead>
            <title>Autoreconf: why you don't need to know about aclocal</title>
          </subhead>

          <p>You don't have to know anything very much about
            <code>autoreconf</code>, other than that, if you change one
            of the autotools files <code>Makefile.am</code> or
            <code>configure.ac.</code>, you should probably run
            <code>autoreconf</code> to bring everything up to date.  In
            fact, you probably don't even need that, since the generated
            makefiles have these dependencies explicit.  The problem
            that <code>autoreconf</code> addresses is that when one of
            these files is updated, there are
            several commands which might need to be re-run, including
            <code>aclocal</code>, <code>autoheader</code>,
            <code>libtoolize</code> and others, and it's a headache
            trying to remember which ones are which.</p>

        </subsubsect>

        <subsubsect id="configure-script">
          <subhead>
            <title>Running ./configure</title>
          </subhead>

          <p>Running the configure script is basically very simple:
            <kbd>./configure</kbd>.  There are, however, options and
            arguments which can help you, or catch you out.  You can
            see the full list of options with the command
            <kbd>./configure --help</kbd>.</p>

          <p>You set the place where the configured component will be
            installed with the <code>--prefix</code> option.  This
            names a directory which will end up with the standard directories
            <code>bin</code>, <code>manifests</code> and so on.  The
            default is reported by <kbd>./configure --help</kbd>, and
            is ultimately controlled by <em>starconf</em> (see <ref
              id="bootstrappingonly"/> and <ref
              id="tool-state"/>).</p>

          <p>The Starlink autoconf adds a couple of extra standard
            options.<dl>
              <dt><code>--with-starlink[=location]</code></dt>
              <dd>
                <p>If no <code>location</code> is provided, this does
                  nothing.  This is effectively the default.</p>
                <p>If a <code>location</code> is provided, it
                  overrides the STARLINK environment variable which will
                  be used.  Very rarely needed.</p>
                <p>Option <code>--without-starlink</code> causes the
                  <code>STARLINK</code> shell variable to be unset.
                  Some packages might with to configure themselves
                  differently in this case.</p>
              </dd>
              <dt><code>--without-stardocs</code></dt>
              <dd>
                <p>Controls whether documentation is built and
                installed.  You might want to turn this off, since it
                can take quite a long time.  The default is
                <code>--with-stardocs</code>, and so you can disable
                this with the configure option
                <code>--without-stardocs</code>.</p>
              </dd>
            </dl>
</p>

          <p>A <em>few</em> components have extra options on the
            <code>./configure</code> command.  For example, the
            component <code>docs/ssn78</code> (the component which
            holds this document) has a <code>--with-pstoimg</code>
            option, the value of which must be the full path to a copy
            of the <code>pstoimg</code> program, to help in the cases
            where this cannot be discovered automatically (this may be
            a temporary feature of this component).</p>

          <p>All of the components have ``Some influential environment
            variables'' listed in the help message.  This will include
            at least <code>STARLINK</code>, and in the (very common!)
            case of components which include a compiler, an
            environment variable such as <code>CC</code> or
            <code>FC</code> which allows you to override the compiler
            which the configure script will find.  This is useful
            if you want to avoid a default compiler and use a specific
            one instead.  For example, if you wished to use
            the Sun C++ compiler specifically (while on a Sun,
            obviously), you would put <code>/opt/SUNWspro/bin</code>
            in your path, and set the <code>CXX</code> variable:
            <verbatim>
% export CXX=CC   # best avoided
% ./configure
</verbatim>
            or
            <verbatim>
% env CXX=CC ./configure   # best avoided
</verbatim>
            where the latter is probably preferable, inasmuch as it
            does not leave this important variable set, in such a way
            that it can make a difference unexpectedly.</p>

          <p>Better than either of these is
            <verbatim>
% ./configure CXX=CC
</verbatim>
            This doesn't set <code>CXX</code> as an environment
            variable, but sets it in a similar-looking way as one of the
            <code>./configure</code> arguments.  This way is
            preferable to either of the above for two reasons: firstly, it does not leave the
            variable set; secondly this way <code>./configure</code>
            `knows' that the compiler has been overridden, so that if
            you are using a configure cache, and
            you <em>fail</em> to do this when the directory is
            reconfigured, <code>./configure</code> can warn you of
            this, in case this is not deliberate.</p>

          <p>If you change one of these variables between runs, and
            are using a configure cache, then the
            <code>./configure</code> script will warn you like this:
<verbatim>
% ./configure -C
configure: loading cache config.cache
configure: error: `STARLINK' has changed since the previous run:
configure:   former value:  /somewhere/else
configure:   current value: /export3/sun
configure: error: changes in the environment can compromise the build
configure: error: run `make distclean' and/or `rm config.cache' and start over
</verbatim>
            To deal with this, simply remove the
            <code>config.cache</code> file, check that the environment
            variable is indeed set as you wish, and rerun
            <code>./configure</code>.</p>

          <p>You can pass options to the compiler using environment
            variables, but you will <em>not</em> need to do this in
            general, other than perhaps to set <code>CFLAGS=-g</code>
            to turn on debugging in the code you are building.  The
            variables <code>CFLAGS</code> and <code>LDFLAGS</code> are
            variables you might potentially set and export in the
            environment, for example to point <code>./configure</code>
            to software installed in non-standard places (perhaps you
            are on a Mac and have installed Fink in <code>/sw</code>
            or OpenDarwin in <code>/opt/local</code>, or are on a Sun
            and have extra software in <code>/opt</code>).  In this
            case you might set
            <code>CFLAGS=-I/opt/local/include</code> and
            <code>LDFLAGS=-L/opt/local/lib</code> in the environment
            to help configure and the compiler find libraries.  Note
            that this is rather a blunt instrument, and because you
            cannot really control where the respective flags appear in
            generated compiler commands, you can end up picking up
            inconsistent versions of software.  That is, this is a mechanism
            for getting yourself out of a fix, not a recommended way
            of building the software.</p>

          <p>The important point of this is that these environment variables
            <em>do matter</em>, and implicitly <em>change the
              behaviour of <code>./configure</code></em>.  You should
            not have them set in your environment if you don't want
            this to happen.</p>
        </subsubsect>

      </subsect>

      <subsect id="starconf" export="export">
        <subhead>
          <title>Starconf, and the Starlink autoconf macros</title>
        </subhead>

        <p>The starconf application does some of the work of
          ensuring that your build directory is correctly
          organised.  It does the following:
          <ul>
            <li>
              <p>ensures that you have a <code>./bootstrap</code>
                script;</p>
            </li>
            <li>
              <p>runs the <em>starconf-validate</em> application to
                check that your <code>configure.ac</code> and 
                <code>Makefile.am</code> files look at least
                plausible by checking, amongst other things, for the
                presence of a <code>STAR_DEFAULTS</code> invocation
                in the former, and to check that the right files have
                been checked in to the repository;</p>
            </li>
            <li>
              <p>creates the script <code>./starconf.status</code>,
                which allows you to inspect some of the starconf
                parameters.</p>
            </li>
          </ul>
        </p>

        <p>The <code>./bootstrap</code> script is `owned' by
          starconf, and you should not change it, since it will be
          overritten by starconf if a newer release of starconf
          includes an updated bootstrap script.  If you <em>do</em>
          have some pressing reason to change it, then remove the word
          `original' from the second line of the bootstrap file, which
          signals to starconf that it should leave the file
          untouched.  The standard bootstrap script:
          <ul>
            <li>
              <p>runs <em>starconf</em>, using
                <code>./starconf.status</code> if necessary to find
                the path to the program;</p>
            </li>
            <li>
              <p>bootstraps any subdirectories named in the
                <code>AC_CONFIG_SUBDIRS</code> macro within
                <code>configure.ac</code>;</p>
            </li>
            <li>
              <p>runs <em>autoreconf</em> to regenerate configuration
                files if necessary.</p>
            </li>
          </ul>
        </p>

        <p>You need to run starconf explicitly only once, when you
          first prepare a directory for configuration.  The
          <code>./bootstrap</code> file which this creates itself
          runs starconf, so that each time you run the bootstrap
          script, you run starconf also.  This has no effect unless
          either the bootstrap script or the macro set has been
          updated in the starconf installation, in which case starconf
          will propagate the updates to your directory.
          The <code>./starconf.status</code> script should not be
          checked into the repository.  The command
          <code>starconf-validate</code> (which is
          invoked by <code>starconf</code> in passing but which may be
          invoked explicitly also) will tell you what should and
          shouldn't be checked in.</p>

        <p>You might on other occasions run the
          <code>./starconf.status</code> script.  You will do this
          firstly to query important locations, such as the location
          of the starconf templates:
          <verbatim>
% ./starconf.status --show buildsupportdata
/export3/sun/buildsupport/share
</verbatim>
          See <kbd>./starconf.status --show --all</kbd> or
          <kbd>./starconf.status --help</kbd> for the list
          of all the things which you can show in this way (though
          be warned that this list is not yet completely stable, and
          may yet change).</p>

        <p>These variables are fixed for a particular installation of
          starconf (you can in principle have more than one
          installation of starconf, and choose which one to invoke,
          but there is unlikely any need for that).</p>

        <p>Two important variables are
          <code>STARCONF_DEFAULT_PREFIX</code> and
          <code>STARCONF_DEFAULT_STARLINK</code>.  The first is the
          default installation prefix of the software you are
          building; the second is the location of a currently built
          Starlink tree, which will be used for applications and
          include files if they are not found under
          <code>STARCONF_DEFAULT_PREFIX</code>.  The value for each of
          these was set when starconf was itself installed (see
          <kbd>./configure --help</kbd> within
          <code>buildsupport/starconf</code>: having different values
          for this is one possible reason why you might have more than
          one starconf installation), but their value is typically
          something like <code>/star</code>.  When you configure a
          particular package, you can set the installation prefix with
          the <code>--prefix</code> option to
          <code>./configure</code>, and you can set the location of
          the `backup' Starlink directory by setting the
          <code>STARLINK</code> environment variable.  In general,
          however, we recommend that you do not adjust
          <code>--prefix</code>, and that you leave the
          <code>STARLINK</code> variable unset.</p>

        <p>A companion to the starconf application is the
          <em>starconf-validate</em> application.  When run, this
          examines the current directory, checking that all required
          files are present, and checking that you have the correct
          files checked in to the repository.  The command
          <kbd>starconf-validate --help</kbd> shows which files are
          in which category.  Note that this applies only to
          directories which are fully Starlink applications -- those
          in the <code>libraries</code> and
          <code>applications</code> directories; components
          in the <code>thirdparty</code> tree, on the other hand,
          have some starconf features such as a
          <code>component.xml</code> file, but are not valid
          according to <em>starconf-validate</em>; also `bundle'
          directories such as <code>libraries/pcs</code>, which have
          no actual code in them, are not valid in this sense.</p>

        <p>There are templates available for the most important
          starconf files.  See <ref id="templates"/>.</p>

        <p>The final component of the starconf system is the file
          <code>component.xml</code>.  This is an XML file
          containing information about the particular component in
          the directory.  The information in this file is redundant
          with some of the information you specify in
          <code>configure.ac</code>, and so the best way to ensure
          the two are consistent is to configure
          <code>component.xml</code> from
          <code>configure.ac</code>.  To this end, there is a
          template <code>component.xml.in</code> file in the starconf
          `buildsupportdata' directory.  When you are preparing a
          directory to be build with the Starlink tools, copy this
          <code>template-component.xml.in</code> into the current
          directory under the name <code>component.xml.in</code>,
          and fill in those field which are not configured.  See
          <ref id="componentxml"/> for details.  The files
          <code>component.xml</code> and
          <code>component.xml.in</code> should both be
          checked in.</p>

        <subsubsect id='templates'>
          <subhead>
            <title>File templates</title>
          </subhead>

          <p>There are three templates available as part of the
            starconf system.  They are located in the starconf
            `buildsupportdir': given that the starconf application
            is in your path, you can find this location with
            <kbd>starconf --show buildsupportdata</kbd>, and if you
            have a <code>starconf.status</code> script in your local
            directory, you can find this directory with
            <kbd>./starconf.status --show buildsupportdata</kbd>.</p>

          <p>The three templates present are
            <code>template-Makefile.am</code>,
            <code>template-configure.ac</code> and
            <code>template-configure.xml.in</code>.</p>

        </subsubsect>

        <subsubsect id="componentxml">
          <subhead>
            <title>The format of the component.xml file</title>
          </subhead>

          <p>The meaning of the elements in the component.xml DTD is
            as follows.  The term `component' is used here rather
            than `package': no great distinction is being drawn
            here, except that the components within the CVS tree
            might not be reflected in ultimately distributed packages.
            <dl>
              <dt>component/id</dt>
              <dd>
                <p>The ID for this component.  This must match the
                  package name in <code>configure.ac</code>, and is
                  the name under which the manifest file is
                  installed.  Let this remain under the control
                  of <code>configure.ac</code></p>
              </dd>

              <dt>version</dt>
              <dd>
                <p>The version number of this component.  This
                  must match the version number in
                  <code>configure.ac</code>.</p>
              </dd>

              <dt>path</dt>
              <dd>
                <p>This is the path to this package within the CVS
                  repository, without any leading slash. Make sure
                  this is correct, or else the top-level build will
                  probably fail.</p>
              </dd>

              <dt>description</dt>
              <dd>
                <p>A brief description of the component.</p>
              </dd>

              <dt>abstract</dt>
              <dd>
                <p>A fuller description of the component.</p>
              </dd>

              <dt>dependencies</dt>
              <dd>
                <p>This is the set of component IDs which this
                  component depends on.  This is managed by the
                  <code>STAR_DECLARE_DEPENDENCIES</code> macros, and
                  should not be adjusted by hand.</p>
              </dd>

             <dt>developers</dt>
              <dd>
                <p>This is a non-exhaustive list of those who have
                  worked on this package.  Little use is made of
                  this at present, but its use is likely to extend,
                  for example to be the source of recipients for CVS
                  commit messages.  The fields within it are
                  <code>&lt;name&gt;</code>, which is the real name
                  of the individual; <code>&lt;uname&gt;</code>,
                  which is the username of the developer on the CVS
                  system; and <code>&lt;email&gt;</code>, which is
                  the person's email address.  The last two elements
                  are not required.</p>
              </dd>

              <dt>documentation</dt>
              <dd>
                <p>A list of SUNs and the like.  At this stage the
                  format of this element is 
                  not completely finalised, and it is best to leave
                  its maintenance to the
                  <code>STAR_LATEX_DOCUMENTATION</code> macro.</p>
              </dd>

              <dt>bugreports</dt>
              <dd>
                <p>The email address for bug reports.</p>
              </dd>

              <dt>notes</dt>
              <dd>
                <p>Any other notes that might be of interest or utility.</p>
              </dd>

            </dl></p>

        </subsubsect>

      </subsect>

      <subsect id="tool-state" export="export">
        <subhead>
          <title>A few remarks on state</title>
        </subhead>

        <p>There is quite a lot of state held within the starconf
          build tree.  This section contains a few notes on where this
          state is, and how to handle it.</p>

        <p>Since most of the details here are rather intricate, you
          might save time by looking at the list of FAQs on state in <ref
            id="state-faqs"/>.</p>

          <p><em>Autotool state</em>: The most obvious state within the
            tree is the existence of the <code>configure</code> and
            <code>Makefile.in</code> files which are the generated by
            autoconf and automake.  Files <code>config.h.in</code> and
            <code>aclocal.m4</code>, are also part of this process,
            inasmuch as they are generated by autoreconf:
            <code>config.h.in</code> is based on the declarations
            within <code>configure.ac</code>; <code>aclocal.m4</code> is a
            local cache of m4 macros, drawn from the starconf,
            autoconf, automake
            and libtool installations.  Other objects
            generated by the autotools are the cache directory
            <code>autom4te.cache</code> and the tool links
            <code>config.guess</code>, <code>config.sub</code>,
            <code>depcomp</code>, <code>install-sh</code>,
            <code>ltmain.sh</code>, <code>missing</code> and
            <code>stamp-h1</code>.  All of this can be happily blown away
            by hand, and a lot of it is removed by <kbd>make
              maintainer-clean</kbd>, though this doesn't remove things like
            <code>config.h.in</code> which are required for
            <code>./configure</code> to run.  Most of this state is
            maintained reliably by the dependencies within
            <code>Makefile.in</code> -- for example if you update
            <code>Makefile.am</code>, then a simple <kbd>make</kbd> will
            remake <code>Makefile.in</code> and regenerate
            <code>Makefile</code> before using the new
            <code>Makefile</code> to do the build.  If you have removed
            this state or suspect that it may be out of date, then
            autoreconf will always regenerate it -- it's always safe to
            rerun autoreconf.</p>

          <p><em>Configuration state</em>: When <code>./configure</code>
            runs, its most obvious effect is to transform the
            <code>.in</code> files into their corresponding configured
            results.  However at the same time, it creates a log file in
            <code>config.log</code> (which can be handy to examine if a
            configure script fails or appears to give wrong answers), a
            cache in <code>config.cache</code> if you ran
            <code>./configure</code> with the <code>-C</code> option, it
            creates the directory-specific <code>./libtool</code> script,
            and it creates a file <code>config.status</code>.  This last
            file holds most of <code>./configure</code>'s state, and can
            be used to either regenerate a particular file
            (<kbd>./config.status Makefile</kbd>) or else to update itself
            (<kbd>./config.status --recheck</kbd> has the effect of
            rerunning <code>./configure</code> with the same options such
            as <code>--prefix</code> which were given to the
            <code>./configure</code> script last time).  You won't often
            have to run <code>./config.status</code> yourself, but it's
            reassuring to know what it's doing when the makefile runs it
            for you.  It is always regenerated afresh by running
            <code>./configure</code>.</p>

          <p><em>Build state</em>: The compiled files are obviously part
            of the build state, and can be removed by <kbd>make
              clean</kbd> and regenerated with plain <kbd>make</kbd>.  Less
            obviously part of this state are the directory
            <code>.libs</code>, which is libtool's' workspace and holds
            different types of objects and libraries, and
            <code>.deps</code>, which holds dependency information gleaned
            as part of the last build.  Less obviously still are those
            (few) <code>.in</code> files which are configured as part of
            the build.  As mentioned in <ref id="automakeoverview"/>,
            so-called `installation directory variables' should be
            substituted at make time rather than build time, with a
            hand-written makefile rule in
            <code>Makefile.am</code>.</p>

        <p><em>Starconf state</em>: There is essentially no starconf
          state, since the starconf system's only role is to manage
          the <code>bootstrap</code> file and provide the extra
          autoconf macros (installed in the buildsupport part
          of the tree when starconf itself is installed). The
          <code>starconf.status</code> file is purely a cache of
          starconf variables, and allows you to locate the starconf
          installation which was used most recently.  At one time, the
          <code>starconf.status</code> file did hold state, and
          allowed you to manipulate it, and was even checked in; this
          is no longer the case.</p>

          <p><em>Build tree and installation state</em>: The last
            noteworthy state is that in the build tree as a whole.  The
            top-level makefile requires some state in order to manage its
            bootstrapping `make world' build.  This build is organised by
            representing the build and link dependencies between
            components by makefile dependencies between the components'
            installed manifests, which are installed in the
            <code>.../manifests</code> directory alongside, and at the
            same time, as the component is installed by the
            <code>install</code> Makefile target.  Thus this is state held
            <em>outside of the build tree</em>.  If the `make world' build
            sees that a manifest file is up-to-date with respect to the
            dependencies expressed in <code>Makefile.dependencies</code>,
            it makes <em>no attempt to build it</em>, even if the
            component itself has been updated and itself needs rebuilding
            and reinstalling.  A slight wrinkle here is that the
            `buildsupport' tools -- namely starconf and the autotools --
            are not explicitly listed as being a dependency of anything,
            since they are in fact a dependency of everything.  Since they
            are rather a special case, these are built within the
            top-level bootstrap script, and the best way to run that `by
            hand' is via the command <kbd>./bootstrap
              --buildsupport-only</kbd>, noting that the remarks about
            dependencies above apply to this process also.  Thus, if you
            update a component -- including one of the buildsupport
            components -- and wish the top-level `make world' build to
            notice this, the best way to do this is to first delete that
            component's manifest file from the installation tree.  This
            process might change slightly with starconf developments
            (see <ref id="developments"/>).</p>

          <p><em>CVS state</em>: This isn't really part of the build
            system as such, but this seems a good place to point out, or
            reassure you, that all the state for a CVS checkout
            directory is in the files in the CVS subdirectory, and that
            all the repository state for the directory is in the files
            in the corresponding directory within the repository.</p>

      </subsect>

      <subsect id="fortran" export="export">
        <subhead>
          <title>Preprocessable Fortran</title>
        </subhead>

        <p>The Starlink build system includes support for
          preprocessable Fortran, in both autoconf and automake.</p>

        <p>As described in <ref id="gnutools"/>, the installed version
          of autoconf is extended with support for preprocessable
          Fortran, by adding the two macros <code>AC_PROG_FC</code> and
          <code>AC_PROG_FPP</code>.</p>

        <p>You should use <code>AC_PROG_FC</code> in preference to the
          macro <code>AC_PROG_F77</code> described in the autoconf
          manual, since the `FC' support in autoconf is more flexible
          and more developed than the `F77' support, and the
          older macro is likely to be deprecated in coming autoconf
          releases.  However a potential problem with the
          <code>AC_PROG_FC</code> macro is that it searches for Fortran
          9x compilers before Fortran 77 ones.  Fortran 9x incorporates
          all of <em>strict</em> Fortran 77 as a subset, but no more, so
          if you have used any of the common Fortran extensions (which
          is sometimes unavoidable), you might find the Fortran compiler
          objecting.  In this case, you should use the second optional
          argument to <code>AC_PROG_FC</code> to specify Fortran 77 as
          the required dialect:
          <verbatim>
AC_PROG_FC([], 77)
</verbatim>
          See <ref id="macro-ac-prog-fc"/> for full details.</p>

        <p>Unlike C, there is no preprocessor defined as part of the
          Fortran standard, and this is inconvenient if you wish to
          use a Fortran extension if it is available, but not have the
          compilation fail if it is absent.  This most commonly
          applies to the <code>READONLY</code> keyword on the Fortran
          <code>OPEN</code> statement.  It is possible to use the C
          preprocessor, <em>cpp</em>, with Fortran, though not
          completely reliably, since the underlying syntaxes of C and
          Fortran are so different that <em>cpp</em> is capable of
          emitting invalid Fortran in some circumstances.</p>

        <p>Both the Sun and GNU Fortran compilers can handle cpp-style
          preprocessor constructs in a Fortran file, avoiding any
          separate preprocessing stage.  Sun have produced a Fortran
          preprocessor, <em>fpp</em>, which is available at
          <url>http://www.netlib.org/fortran/</url>: it's freely
          available, but not open-source.  And more often than not we
          can in fact fall back on simple <em>cpp</em>, as long as we have
          confined ourselves to the <code>#include</code>,
          <code>#define</code> and <code>#if...</code> constructs.  If
          it comes to that, such simple preprocessing could be mostly
          handled with a simple Perl script.</p>

        <p>Starlink autoconf and automake between them add support for
          preprocessable Fortran.  Autoconf supplies the
          <code>AC_PROG_FPP</code> macro described in <ref
            id="macro-ac-prog-fpp"/>, to investigate what compiler and
          preprocessor are available, and automake works with the
          results of that test to add appropriate support to the
          generated <code>Makefile.in</code>.</p>

        <p>For example, you might have in your
          <code>configure.ac</code> file the lines
          <verbatim>
AC_PROG_FC
AC_PROG_FPP
AC_FC_OPEN_SPECIFIERS(readonly)
</verbatim>
          and have in your <code>my_io.fpp</code> the lines
          <verbatim>
#include &lt;config.h&gt;
      SUBROUTINE MYIO(...)

* blah...

      OPEN ( UNIT = LUCON, FILE = IFCNAM, STATUS = 'OLD',
#ifdef HAVE_FC_OPEN_READONLY
     :       READONLY, 
#endif
     :       FORM = 'UNFORMATTED', IOSTAT = ISTAT )
</verbatim></p>

        <p>The file <code>my_io.fpp</code> is listed in the
          <code>Makefile.am</code> as one of the <code>_SOURCES</code> of
          whatever library or application it contributes to, alongside
          the other Fortran files.  If the compiler discovered by
          the <code>./configure</code> script can support preprocessor
          statements itself, then the <code>.fpp</code> file is
          treated like any other; if not, and a separate preprocessing
          stage is required, then the Makefile handles this
          itself.</p>

        <p>Note that we are using <code>.fpp</code> here as the file
          extension for preprocessable Fortran.  The extension
          <code>.F</code> is more common, but causes problems on
          case-insensitive filesystems, such as the default HFS+ on
          MacOS X, and Windows filesystems, since it is
          indistinguishable from plain <code>.f</code>.</p>

      </subsect>

      <subsect id="tool-cvs" export="export">
        <subhead>
          <title>CVS</title>
        </subhead>

        <p>There is a compact CVS Primer on the web at
          <url>http://www.astro.gla.ac.uk/users/norman/note/2003/cvsprimer/</url>,
          and that includes pointers to fuller documentation.  This
          section includes a few tips on using CVS which go beyond
          that document, or which are more specific to the Starlink
          CVS repository.</p>

        <subsubsect id="tool-cvs-tagging">
          <subhead>
            <title>CVS and tagging</title>
          </subhead>

          <p>Tagging is very important, as it is through tagging that
            you create branches, and mark certain sets of files as a
            set, so that they can be recovered as a set in future.  The
            current tagging policy is at
            <url>http://wiki.starlink.ac.uk/twiki/bin/view/Starlink/CvsTagging</url>.</p>

          <p>You make a tag with the <kbd>cvs tag</kbd> command, while
            you are in a directory with a part of the repository checked
            out:
            <verbatim>
cvs tag &lt;tag-name&gt;
</verbatim>
            This applies the tag to the repository versions indicated by
            the files in the current directory.  In the most common
            case, you have just finished preparing the set of files for
            a release, so all the files in the directory are as you want
            them to be, and committed.  There's a slight trap here: if
            there are any files which are <em>not</em> committed, then
            it is the repository version which corresponds to the
            modified file which is tagged, not the
            modified file itself (this is never useful; it is simply a
            warning to use the <code>tag</code> command only in a
            fully-committed directory).  If you tag a set of files which
            are on a branch, then it is (probably unsurprisingly) the
            branched files which are tagged.</p>

          <p>There is also a <kbd>cvs rtag</kbd> command which is
            similar, but operates only on the repository.  You won't
            need to use <code>rtag</code>; don't confuse the two.</p>

        </subsubsect>

        <subsubsect id="tool-cvs-recursion">
          <subhead>
            <title>CVS and recursion -- checking out only a subtree</title>
          </subhead>
          
          <p>There are two traps in the way that CVS recurses into
            subdirectories.  The first is that if a subdirectory is
            present in the repository but not in your checkout (most
            commonly because it has been recently added to the repository
            by someone else), then CVS will not by default add that
            subdirectory when you do an update, and will give no
            indication that it is there.  It is not clear to me why this is
            a sensible default, but it is the case nonetheless.  Only if
            the <code>-d</code> option is present on the <kbd>cvs
              update</kbd> command will the `missing' directory
            appear.</p>

          <p>The other `trap' is that CVS does recurse by default when
            you do a checkout.  This is almost always the right thing, but
            it can be inconvenient when you want just the top level of the
            repository.  If you wanted to check out only the top level, or
            only the buildsupport tools, then the command <kbd>cvs -d ??? 
              checkout .</kbd> would not be the right thing, since it would
            check out the top level and everything underneath it.
            A better set of commands would be
            <verbatim>
cvs -d username@cvs.starlink.ac.uk:/cvs co -l .
cvs -d username@cvs.starlink.ac.uk:/cvs co buildsupport
cvs -d username@cvs.starlink.ac.uk:/cvs co thirdparty/fsf
</verbatim>
            The first line checks out the top level directory but,
            because of the <code>-l</code> (`local') flag, does
            <em>not</em> recurse and check out the complete repository.
            The following lines check out particular directories,
            usefully recursing into their children.</p>

          <p>If you want to check out just the
            <code>applications</code> directory, but none of its
            children, use
            <verbatim>
cvs -d username@cvs.starlink.ac.uk:/cvs co -l applications
</verbatim>
            while in the top-level directory.  Don't do <kbd>... co -l
              .</kbd> in the <code>applications</code> directory --
            you'll get the top-level directory again.</p>

        </subsubsect>

      </subsect>

    </sect>

    <sect id="building" export="export">
      <subhead>
        <title>Building applications and libraries</title>
      </subhead>

      <p>This section applies <em>only</em> to building code which has
        been checked out of the CVS repository.  It does <em>not</em>
        apply to building a distribution tarball: that process is
        nothing more than the usual:
        <verbatim>
% ./configure
% make
% make install
</verbatim>
        with the usual options for the <code>./configure</code>
        script, of which the most important is <code>--prefix</code>
        to control the installation location of the code.  The default
        location is typically <code>/star</code>, though a particular
        distribution might have a different value (see
        <kbd>./configure --help</kbd> for more details).</p>

      <p>Recall that the <kbd>make install</kbd>, above, installs a
        manifest listing the files actually installed, in the directory
        <code>/star/manifests</code> (depending on the value of
        <code>--prefix</code>, which defaults to the value shown by
        <kbd>./starconf.status --show STARCONF_DEFAULT_PREFIX</kbd>).</p>

      <p>Most users of this document will likely be concerned only
        with the details of building a particular component, and thus
        concerned primarily with <ref id="buildingcomponents"/>.</p>

      <p>Only rather few users are concerned with building the entire
        tree, for example for the nightly build: this is dealt with in
        <ref id="bootstrapping"/>.</p>

      <p><strong>Note</strong>: In all cases, you should <em>not</em>
        have the <code>INSTALL</code> environment variable defined.
        In old-style Starlink makefiles this indicated the install
        location; in the new-style build system, this location is
        indicated by the `prefix' described above abd elsewhere, and
        the generated Makefiles take the <code>INSTALL</code> variable
        to be the name of a program to use to perform the actual
        installation.</p>

      <subsect id="top-level-makefile" export="export">
        <subhead>
          <title>The top-level Makefile</title>
        </subhead>

        <p>The important targets in the top-level makefile are:
          <dl>
            <dt><code>make world</code></dt>
            <dd>
              <p>This target builds the whole tree, in an order which
                respects the dependencies between components.  It builds
                all the targets listed in the variable
                <code>ALL_TARGETS</code> within the top-level
                <code>Makefile.in</code>.  Those targets are install
                manifests, in the default manifest directory
                (<code>/local/star/manifests</code> in the example
                below), so that <kbd>make world</kbd> both builds and
                installs the entire software set.</p>
              <p>The bootstrap that this is part of is described in
                more detail in <ref id="bootstrapping">the next
                  section</ref>.</p>
            </dd>

            <dt><code>make &lt;manifest-file&gt;</code></dt>
            <dd>
              <p>As an alternative to <kbd>make world</kbd>, you may
                specify a single manifest file.  This builds and
                installs the corresponding component, and all of its
                dependencies.  Note that this does nothing if the
                given manifest file is up-to-date with respect to its
                dependencies on other manifest files.  If you have
                just updated a component, then you can rebuild and
                reinstall it by deleting the component's manifest file
                and remaking it.</p>
            </dd>

            <dt><code>make</code> or <code>make all</code></dt>
            <dd>
              <p>This recurses into each of the directories listed in
                <code>AC_CONFIG_SUBDIRS</code> within the top-level
                <code>configure.ac</code>, and invokes <kbd>make
                  all</kbd> there.  This target brings the tree up-to-date
                after a CVS update, but it does so without respecting
                the dependencies between components.  This target is
                present for the sake of consistency, and as a
                convenience for bringing the local tree up-to-date
                after a CVS update, and you should not use it as a
                shorthand or alternative for <kbd>make world</kbd>
                above.</p>
            </dd>

            <dt><code>make clean</code></dt>
            <dd>
              <p>The targets <code>clean</code>,
                <code>distclean</code> and
                <code>maintainer-clean</code> simply recurse into the
                children and invoke the corresponding target there.</p>
            </dd>

            <dt><code>make install</code></dt>
            <dd>
              <p>This targets does nothing, and is also present
                largely for the sake of consistency.  Depending on the
                context, you should use <kbd>make world</kbd> or, if you
                have just updated and rebuild a particular component,
                then either delete and remake its manifest file (as
                mentioned above), or go to the component's directory and
                use <kbd>make install</kbd>.</p>
            </dd>

          </dl>
          Note that the building above presumes that all the required
          code is checked out of the repository -- it does not handle
          the checkouts for you, and if you do not have a required
          component checked out, it will simply fail.
        </p>

      </subsect>

      <subsect id="bootstrapping" export="export">
        <subhead>
          <title>Bootstrapping and building the entire tree</title>
        </subhead>

        <p>If you wish to build the entire tree after a fresh
          checkout, you do so at the top level, using the
          <code>./bootstrap</code> script and <code>Makefile.in</code>
          located there.  Neither of these is a `standard' one, as
          installed by <em>starconf</em> or Starlink automake.</p>

        <p>These instructions are echoed in the file
          <code>README</code> in the top-level directory.</p>

        <p>The complete procedure for a full build is as shown
          below, for an installation into the notional directory
          <code>/local/star</code>; explanations follow.
          <verbatim>
1% cvs -d :ext:username@cvs.starlink.ac.uk:/cvs checkout .
2% unset STARLINK INSTALL
3% export STARCONF_DEFAULT_STARLINK=/local/star
4% export STARCONF_DEFAULT_PREFIX=/local/star
5% rm -Rf /local/star
6% PATH=/local/star/bin:/local/star/buildsupport/bin:$PATH
7% ./bootstrap
... a few harmless warnings, and miscellaneous other chatter
... takes quite a while
8% ./configure -C
... mucho blah-blah-blah
9% make world
... etc
10% ls /local/star/manifests
adam      automake  ems     hlp      messgen  par       sae   star2html  task
ams       chr       fio     lex      messys   parsecon  sla   starconf
atimer    cnf       hds     libtool  misc     pcs       sock  string
autoconf  dtask     hdspar  mers     msp      psx       sst   subpar
</verbatim></p>

        <p>Line 1: check out the entire collection from the
          repository.  See <ref id="tool-cvs-recursion"/> for hints on
          how to be more discriminating, which may be desirable, since
          not everything in the repository is controlled by this
          bootstrapping build, most notably the contents of the
          <code>java</code> directory.</p>

        <p>Lines 2-4: unset the <code>STARLINK</code> and
          <code>INSTALL</code> variables, and
          set the two starconf variables as shown.  For a whole-tree
          build, these two should have the same value, to ensure that
          the build uses only tools and libraries which have been
          built at an earlier point in the build.  For fuller details
          of these variables, and more information about controlling
          the bootstrapping process, see <ref
            id="bootstrappingonly"/>.  This example shows sh-style
          commands for manipulating the environment; you will of
          course use the csh-style <code>setenv</code> and
          <code>unsetenv</code> if you're using that shell.</p>

        <p>Line 5: the directory where the components are to be
          installed can be empty, and need not exist at the
          start.  It doesn't matter if this is not empty in fact,
          since most of the installation tree is not examined by the
          build.  The only exception is
          <code>/local/star/manifests</code>, since the files in this
          directory control what is actually built -- see the notes
          for line 9.</p>

        <p>Line 6: put <code>/local/star/bin</code> and
          <code>/local/star/buildsupport/bin</code> in the path, and
          make sure that there are <em>no</em> Starlink binary
          directories elsewhere in the path.</p>

        <p>Line 7: run the <code>./bootstrap</code> script.  This
          configures, builds and installs the `buildsupport' tools --
          the autotools plus the starconf application -- then
          recursively runs the bootstrap code in a selection of the
          directories beneath this one.  The directories the bootstrap
          recurses into, in this directory and its children, are those
          listed in a <code>AC_CONFIG_SUBDIRS</code> macro in
          <code>configure.ac</code>.  After this, you should be able
          to do
<verbatim>
% which autoconf
/local/star/buildsupport/bin/autoconf
% autoconf --version
autoconf (GNU Autoconf) 2.59
...
%
          </verbatim>
          to verify that the correct tools have indeed been installed
          in the correct place.</p>

        <p>Line 8: configure the entire tree (the <code>-C</code>
          option indicates that configure should cache its results,
          speeding up the process).  This configures this
          directory and recurses into the children named in
          <code>AC_CONFIG_SUBDIRS</code> in this
          <code>configure.ac</code> and those below it.</p>

        <p>If you will need to give <code>./configure</code> some help
          to find include files and libraries, you <em>might</em> try
          setting the <code>CFLAGS</code> or <code>LDFLAGS</code>
          variables in the environment, in the manner described in
          <ref id="configure-script"/>.  Note, however, that this is
          not a recommended practice.</p>

        <p>Line 9: build the entire tree, using the <kbd>make
            world</kbd> target described in <ref
            id="top-level-makefile"/>.  The make builds all the
          components in an order which ensures that each component is
          build after the components it depends on, as declared in
          <code><ref id="macro-declare-dependencies"
              >STAR_DECLARE_DEPENDENCIES</ref></code> invocations in
          those components' <code>configure.ac</code> files.  The set
          of dependencies can be examined (if you're interested) in
          the file <code>componentset.xml</code>, which is built up
          from the various directories' <code>component.xml</code>
          files, as reprocessed into
          <code>Makefile.dependencies</code>.</p>

        <p>Note that the
          dependencies are expressed as dependencies of components'
          <em>manifest</em> files on each other, and the top-level
          makefile is written so that each component is built with the
          pair of commands <code>make; make install</code>,
          which builds the component then installs both it and its manifest.
          Thus, if you need to ask
          for a particular component, foo, to be built, you can do so from
          the top-level directory with <kbd>make
            /local/star/manifests/foo</kbd>.</p>

        <p>Line 10: after the make, a manifest is installed for each
          of the built components.</p>

      </subsect>

      <subsect id="buildingcomponents" export="export">
        <subhead>
          <title>Building a single component</title>
        </subhead>

        <p>In <ref id='bootstrapping' /> we saw
          how you would bootstrap and build the entire tree, building
          each component's dependencies before building the component
          itself.</p>

        <p>If, on the other hand, you wish to build only one
          component, because you wish to install the latest and
          greatest version of some application, or because you want to
          work on the CVS version, then you do not want to build the
          entire code collection, but only the component you are
          interested in.</p>

        <p>In this case, you <em>may</em> want to control two things,
          namely where
          your newly-built component is to be installed, and where it
          is to find any other Starlink applications and libraries it
          requires.</p>

        <p>Generally, however, you don't have to worry about
          intricate configuration matters.  You simply give the
          commands
          <verbatim>
% ./bootstrap
% ./configure
% make
% make install
</verbatim>
          to build the single component from a CVS checkout.</p>

        <p>One of the functions of the <code>./bootstrap</code> script
          is to regenerate the <code>./configure</code> script if
          necessary, since it is not checked in to the repository.  This
          requires that the Starlink-specific autotools are in your
          path, and so you must first install these `buildsupport'
          tools if they are not installed already.  Instructions for
          that are in the <ref id="bootstrappingonly">next
            section</ref>.</p>

        <p>That should be all you have to do before starting work.
          The above will generate a <code>Makefile</code> which will
          build the current component, and install it in the default
          location which <em>starconf</em> has been configured with.</p>

        <p>If you do need to adjust things, however, here's how.</p>

        <p>You control where the component is to be installed with the
          <code>--prefix</code> option to the <code>./configure</code>
          script.  The default value for this prefix is baked in to
          the <code>./configure</code> script, and controlled by the
          starconf application.
        </p>

        <p>You can control where the configuration process finds other
          Starlink applications in a broadly similar way.  The default
          location which is examined is specified by the
          <code>STARCONF_DEFAULT_STARLINK</code> variable, which is
          examined just as the
          <code>STARCONF_DEFAULT_PREFIX</code> variable was above.
          That can be overridden by setting the environment variable
          <code>STARLINK</code>, and that can be overridden in turn by
          the <code>--with-starlink</code> option to the
          <code>./configure</code> script.  We recommend that you
          generally leave the <code>STARLINK</code> variable unset,
          and use either the first or the last of these methods
          instead.</p>

        <p>Note that part of the function of the
          <code>./configure</code> script is to find the location of
          important files and freeze them in to the Makefile.  Thus
          you cannot, in general, change the <code>STARLINK</code> variable or
          change your path, and have new binaries picked up.</p>

      </subsect>

      <subsect id="monoliths" export="export">
        <subhead>
          <title>Building monoliths</title>
        </subhead>

        <p>As illustrated in <ref id="automakeoverview"/>, you can
          build monoliths in an analogous way to the way you build
          programs, by declaring the monoliths as the value of the
          <code>bin_MONOLITHS</code> variable.</p>

        <p>Along with the <code>bin_MONOLITHS</code> variable, a
          Makefile must also declare a set of tasks using the
          <code>TASKS</code> primary, and this set will be empty if
          the monolith is an ATASK.</p>

        <p>The <code>foo_TASKS</code> primary indicates to automake
          that there will be <code>.ifl</code> files in the local
          directory corresponding to each of the tasks in the
          monolith, that these <code>.ifl</code> files should be
          distributed, and that the appropriate extra links should
          be made, in the binary directory, when the monolith is
          installed.  The tasks variable is also used in the
          <code>foo_SOURCES</code> variable to declare the
          dependence of the monolith on the Fortran files
          corresponding to the tasks (it would be possible to
          automake to have inferred this last step, but it seems
          clearer overall to have this dependency at least made
          explicit).</p>

        <p>The generated <code>Makefile.in</code> will install each of
          the task <code>.ifc</code> files, plus the monolith
          <code>.ifc</code> file.  The monolith <code>.ifl</code> file
          is constructed by appending each of the task
          <code>.ifl</code> files, wrapped in <code>begin
          monolith</code> and <code>end monolith</code>, and this
          generated <code>.ifl</code> file should not be included in
          the repository or the distribution.</p>

        <p>If you are building an ATASK, then the task is the same
          name as the program, so you should simply
          declare the <code>..._TASKS</code> variable to be empty:
<verbatim>
foo_TASKS =
</verbatim>
          In this case, the only <code>.ifl</code> file is that for
          the ATASK, and automake checks that this file either exists
          in the current directory (in which case the
          <code>.ifl</code> file should be checked in and
          distributed), or else it is explicitly listed in
          <code>BUILT_SOURCES</code>, in the case where it is a
          generated file; in this second case it is not enough that a
          rule for the <code>.ifl</code> file exists.</p>

        <p>The <code>MONOLITH</code> primary allows the prefixes
          <code>bin</code>, <code>check</code> and
          <code>noinst</code>, rather like <code>PROGRAMS</code>.</p>
        
        <p>In order to use the monolith support, you must to request
          this by including the declaration
          <code>STAR_MONOLITHS</code> in the <code>configure.ac</code>
          file, most rationally near the <code>AC_PROG_CC</code>-style
          declarations.</p>

      </subsect>

      <subsect id="bootstrappingonly" export="export">
        <subhead>
          <title>Bootstrapping without building: configuring
          starconf and the autotools</title>
        </subhead>

        <p>If you intend to work only on a single component, then you
          can configure and build it as described in <ref
            id="buildingcomponents" >the previous section</ref>.  As
          described there, the bootstrapping procedure requires that the
          `buildsupport' tools -- <em>starconf</em> plus
          Starlink-specific autotools -- be installed and in your
          path.</p>

        <p>You <em>must</em> install the autotools which are part of
          the CVS repository, since these have been extended and
          customised specially for the Starlink build tree (for the
          details of the differences, see <ref id="gnutools"/>).  The
          standard autotools will not work.</p>

        <p>The way to do this is to make sure
          you have the required components checked out (see <ref
            id="tool-cvs-recursion"/>), then go to the
          top of the tree and give the command
          <verbatim>
% ./bootstrap --buildsupport-only
</verbatim>
          This builds and installs the `buildsupport' tools -- namely
          the autotools plus starconf -- but does not go on to
          bootstrap the rest of the tree.  The functions of the
          variables <code>STARCONF_DEFAULT_PREFIX</code> and
          <code>STARCONF_DEFAULT_STARLINK</code> were described in the
          previous section: in order to configure starconf at this
          stage, you must define these two variables <em>as environment
            variables</em> before running the <code>./bootstrap</code>
          script.  This will cause the tools to be installed in the
          directory
          <code>$STARCONF_DEFAULT_PREFIX/buildsupport/bin</code>, and
          the configured starconf to configure components, when it is
          itself invoked, so that the default value of
          <code>STARCONF_DEFAULT_PREFIX</code> is the value given
          here, as described in the previous section.</p>

        <p>You must use this method of configuring starconf and the
          three autotools -- autoconf, automake and libtool.</p>

        <p>After that, you should put the
          <code>.../buildsupport/bin</code> directory in your path,
          and start work.</p>

      </subsect>

    </sect>

    <sect id="autoconfing" export="export">
      <subhead>
        <title>Adapting a package to the Starlink build system</title>
      </subhead>

      <p>The process of adding a package to the build system, and
        autoconfing it, is reasonably mechanical.  The main
        differences from the traditional build system are as follows.</p>

      <p>There is now no <code>./mk</code> file, and so no platform
        configuration using the <code>$SYSTEM</code> environment
        variable.  Instead, all platform dependencies should be
        discovered by the configuration process.  It is only in
        rather extreme cases that you will need to resort to
        platform-specific code, and that should be handled by
        the starconf macro <ref
          id="macro-platform-sources"><code>STAR_PLATFORM_SOURCES</code></ref>. </p>

      <p>You should try to avoid mentioning or referring to any
        specific platform when configuring.  Test for <em>features</em>,
        working with those you find, and working around those you don't;
        don't test for platforms and believe you can reliably then
        deduce what features are available.</p>

      <p>Traditional Starlink makefiles had two phases, `build' and
        `install' (plus the various export targets).  These makefiles
        often did on-the-fly editing of scripts as they were being
        installed, to edit in version numbers, or the correct path to
        Perl, for example.  There was also implicit configuration done
        in the <code>./mk</code> script, which specified
        platform-specific compiler flags, or versions of `tar'.</p>

      <p>GNU-style projects, on the other hand, have three phases,
        `configure', `build' and `install', and source file editing
        happens only in the first two -- installation consists only of
        the installation of static files.  Most configuration editing
        happens at configure time, when <code>.in</code> files are
        substituted with static information, such as the absolute paths
        to programs, determined as part of configuration.  In the case
        where the substitution involves installation directory
        variables, GNU (and thus general) conventions demand that this
        be done at build time, since these directories involve the
        <code>$(prefix)</code> makefile variable, and it is deemed
        legitimate for the user to specify a different value at build
        time (<kbd>make prefix=xxx</kbd>) from that specified or implied
        at configuration time.  The user may then specify a different
        prefix again at install time (<kbd>make prefix=yyy
          install</kbd>) for the purposes of relocating or staging the
        install, but this must not invalidate the value of
        <code>$(prefix)</code> which may have been compiled into
        applications.  This is discussed in some detail in section
        <webref url="&autoconfhtml;/autoconf_24.html">4.7.2 Installation
          Directory Variables</webref> of the autoconf manual, but you
        generally do not have to worry about it, since it is rather rare
        in practice that you have to compile installation directories
        into the applications and libraries that you build.</p>

      <p>In general, whereas traditional Starlink makefiles quite
        often performed spectacular gymnastics at install time,
        GNU-style makefiles generally do nothing at install time,
        other than occasionally adding extra material to the install
        via one of the installation hooks supplied by automake (see section
        <webref url="&automakehtml;/Install.html" >What gets
          installed</webref> of the automake manual).</p>

      <p>In the traditional build system, the master source was
        regarded as rather private to the developer who `owned' the
        code, who was free to use whatever occult means they desired
        to produce the sources which were put into the three
        distribution objects, `export_source' (just the source),
        `export_run' (just the executable) and `export' (both).  Now,
        everything should be put into the CVS repository, including
        any code-generation tools either as separate packages or as
        local scripts, and it is this source set which is
        used for nightly builds and the like.  If you need tools to
        generate some of the distributed sources, and they cannot be
        included in the package for some reason, they should be
        checked in, and your component should declare a `sourceset'
        dependency on the required tool (see <ref
          id="macro-declare-dependencies"/>).</p>

      <p>With these remarks out of the way, the following is a
        description of the steps involved in bringing first an application
        into the new fold, and then a third-party component.</p>

      <subsect id="autoconfingexample" export="export">
        <subhead>
          <title>Autoconfing a library</title>
        </subhead>

        <p>The example here shows the autoconfing of the adam library,
          chosen simply because it's relatively simple.</p>

        <p>Make a directory to hold the package, and add it to the
          repository
<verbatim>
% pwd
&lt;cvs-checkout&gt;/libraries/pcs
% mkdir adam
% cvs add adam
Directory /cvs/libraries/pcs/adam added to the repository
% cd adam
          </verbatim></p>

        <p>Get the complete set of source files, and check them in to
          the repository.  This means unpacking all the files in
          <code>adam_source.tar</code>, which you can find in
          <code>/star/sources/pcs/adam</code> (as it happens).</p>

        <p>In this case, the <code>adam_source.tar</code> distribution
          tarball is a suitable set of sources.  This is not always
          true, since some Starlink distributions -- especially some of
          the larger libraries and applications -- do quite elaborate
          processing of their sources in the process of creating this
          `source' tarball; in these cases, you should attempt to obtain
          a more fundamental set of sources from the package's developer
          (if that is not you).</p>

        <p>The ideal source for new code is a CVS or RCS repository.
          A CVS repository is easy to import -- you just tar it up and
          unpack it into the correct place within the Starlink
          repository.  An RCS repository is barely harder, with the
          only difference being that you have to create the Starlink
          repository directory structure by hand, and copy the RCS
          files into place within it.  The only gotcha with this route
          is that you must make sure that the permissions are correct
          on the resulting repository: you must make sure that
          everyone who should have any access to the repository can
          read <em>and write</em> each of the directories.</p>

        <p>CVS repository access is controlled by groups (at least
          when the repository is shared), and so each directory within
          the repository must have a suitable group ownership, with
          group-write permissions.  Each directory must also have the
          setgid bit set, so that any directories created within it
          inherit its gid.  Within the Starlink repository in
          particular, all participants are part of the
          <code>cvs</code> group.  In short, you can set the correct
          permissions on an imported directory <code>foo</code> with
          the commands
<verbatim>
% find foo -type d | xargs chgrp cvs
% find foo -type d | xargs chmod g+sw
</verbatim>
          This sets the group-owner of each directory to be
          <code>cvs</code>, and sets the group-write and set-group-id
          bits in the permissions mask (don't tinker with file
          permissions, since these affect the permissions of the
          checked out files).  You need not worry about file or
          directory ownership, since this always ends up being the
          last person who committed a file.  Note: The instructions
          here are based on observation of CVS repositories; the
          actual requirements don't seem to be formally documented
          anywhere.</p>

        <p>Add <em>all</em> of the source files, including files like
          the <code>mk</code> script and the old <code>makefile</code>,
          which we are about to remove.  Tag this initial import with a
          tag <em>&lt;component&gt;</em><code>-initial-import</code>, so
          that it is possible to recover this old-style distribution if
          necessary.  As mentioned above, it is not
          always completely clear what constitutes the old-style source
          set: so don't do this step mechanically, use your judgement,
          and above all avoid losing information.  Note also that some
          of the infrastructure libraries were added before we settled
          on this particular tagging practice, and so lack such an
          initial tag.</p>

        <p>In this present case, the <code>adam_source.tar</code>
          file includes a Fortran include file containing error codes,
          <code>adam_err</code>; there are two problems with this.</p>

        <p>Firstly, the filename should be uppercase: the file is
          generally specified within the program in uppercase, and it
          should appear thus on the filesystem.  The traditional
          makefile works around this by creating a link from
          <code>adam_err</code> to <code>ADAM_ERR</code>, but this won't
          work (and indeed will fail messily) on a case-insensitive
          filesystem like HFS+, used on OS X.</p>

        <p>The second problem is that this is a generated file, though
          the source is not distributed, is probably misplaced, and in any
          case the generation was probably done on a VAX a decade ago.
          All is not lost, however.  The functionality of the VAX
          `message' utility is duplicated in the application
          <em>messgen</em>, in a component of the same name, along with
          an application <em>cremsg</em> which constructs a source file
          from this message file.  Thus it is neither
          <code>adam_err</code> nor <code>ADAM_ERR</code> which we
          should check in, but the source file <code>adam_err.msg</code>
          which we reconstruct using <em>cremsg</em>.  Thus with error
          files, it is the (probably reconstructed) <code>.msg</code>
          file which should be checked in to the repository, and
          <em>not</em> the <code>_err</code>, <code>_err.h</code> or
          <code>fac_xxx_err</code> files which you may have found in
          the old-style distribution.</p>

        <p>The file <code>adam_defns</code> is similar, but this is
          genuinely a source file, so we need do nothing more elaborate
          than rename it to <code>ADAM_DEFNS</code>, then add it to the
          repository and remove the original lowercased version.  Many
          packages have one or two <code>xxx_par</code> files,
          and these should be similarly renamed to <code>XXX_PAR</code>.
<verbatim>
% tar xf /star/sources/pcs/adam/adam_source.tar
% chmod +x adam_link_adam
% cremsg adam_err
% cvs add *.f mk makefile adam_link_adam adam_defns.h adam_defns adam_err.msg
...
cvs server: scheduling file `adam_err.msg' for addition
cvs server: use 'cvs commit' to add these files permanently
% cvs commit -m "Initial import"
% cvs tag adam-initial-import
% mv adam_defns ADAM_DEFNS
% cvs remove adam_defns
% cvs add ADAM_DEFNS
% rm mk makefile
% cvs remove mk makefile
          </verbatim>
        </p>

        <p>Note that CVS preserves access modes when it
          stores files, so we should make sure that the script
          <code>adam_link_adam</code> is executable <em>before</em>
          checking it in, and we need not bother to make it executable
          as part of the build process.  On the other hand, scripts
          which are substituted by configure do need to be made
          executable explicitly, which you do by a variant of the
          <code>AC_CONFIG_FILES</code> macro.  The macro invocation
<verbatim>
AC_CONFIG_FILES(foo, [chmod +x foo])
</verbatim>
          substitutes <code>foo</code> from source file
          <code>foo.in</code> and then makes it executable.  Note that
          the sequence
<verbatim>
AC_CONFIG_FILES(foo)
chmod +x foo
</verbatim>
          would <em>not</em> work, since this is one of the cases
          where autoconf macros do not simply expand inline to shell
          code.  For further discussion, see the section <webref
            url="&autoconfhtml;/autoconf_20.html" >Performing
          Configuration Actions</webref> in the autoconf manual.</p>

        <p>Create files <code>configure.ac</code>,
          <code>Makefile.am</code> and <code>component.xml.in</code> by
          copying the templates in the starconf buildsupport directory
          (<kbd>starconf --show buildsupportdata</kbd>); the fields in
          the <code>component.xml.in</code> file are discussed in <ref
            id="componentxml"/>.  If you have an editor that can use it,
          you might also want to create a link to the DTD used for the
          <code>component.xml</code> file, which is in the same
          directory.  Edit these files as appropriate, using information
          in the original Starlink makefile for guidance (so it's
          useful to keep a copy of the original <code>makefile</code> handy,
          rather than simply deleting it as illustrated above).  Then
          check the files in.</p>

        <p>What edits should you make?</p>

        <p>The adam <code>Makefile.am</code> file looks as follows:
          <verbatim>
bin_SCRIPTS = adam_link_adam
lib_LTLIBRARIES = libadam_adam.la
libadam_adam_la_SOURCES = $(PUBLIC_INCLUDES) $(F_ROUTINES)
include_HEADERS = $(PUBLIC_INCLUDES)
PUBLIC_INCLUDES = ADAM_ERR ADAM_DEFNS adam_defns.h
F_ROUTINES = \
        adm_acknow.f adm_getreply.f adm_getreplyt.f adm_path.f \
        adm_prcnam.f adm_receive.f adm_reply.f adm_send.f \
        adm_sendonly.f adm_sendt.f adm_trigger.f
</verbatim>
          Four out of six of these variable declarations are variables
          meaningful to automake (see <ref id="automakeoverview"/>),
          and the other two are simply copied from the original
          <code>makefile</code>.</p>

        <p>The adam <code>configure.ac</code> looks like this:
          <verbatim>
AC_INIT(adam, 3.0, ussc@star.rl.ac.uk)
AC_PREREQ(2.50)
AM_INIT_AUTOMAKE(1.8.2-starlink)
AC_CONFIG_SRCDIR([ADAM_DEFNS])
STAR_DEFAULTS

AC_PROG_FC
AC_PROG_LIBTOOL
STAR_CNF_COMPATIBLE_SYMBOLS

STAR_DECLARE_DEPENDENCIES(build, [sae messys])
STAR_DECLARE_DEPENDENCIES(link,  [chr psx ems messys])

dnl    There is no .msg file in this directory.  The ADAM_ERR file 
dnl    contains only a single definition, of the parameter ADAM__OK.

AC_CONFIG_FILES(Makefile component.xml)
AC_OUTPUT
</verbatim>
          The first five lines are straightforward boilerplate (see
          <ref id="autoconfoverview"/>).  The next three find a
          Fortran compiler, declare that we want to use libtool to
          build our libraries, and finally that we wish the symbols in
          that library to be of the sort that the CNF package is able
          to handle (see <ref id="macro-cnf-compatible-symbols"/>).
          The `FC' autoconf macros will search for a Fortran compiler
          by looking for a f95 compiler before looking for a f77
          compiler; if you know or discover this is inappropriate,
          then you can constrain the Fortran dialect that
          <code>AC_PROG_FC</code> will look for by giving a value for
          its optional dialect argument.  Macro
          <code>AC_PROG_FC</code> is not yet documented in the
          autoconf manual, but see <ref id="gnutools"/>.</p>

        <p>After that, we declare the dependencies.  The dependencies
          you work out by any and all means you can.  For a library, the set
          of `build' dependencies is determined by the set of
          components which supply files which the code here includes.
          Grepping for all the Fortran <code>INCLUDE</code> statements
          and all the C <code>#include</code> directives is a good
          start.  For link dependencies, grepping for
          <code>CALL</code> lines is useful for Fortran, and grepping
          for
          <verbatim>
= *\([A-Za-z][A-Za-z]*__*[A-Za-z][A-Za-z]*\) *(.*
</verbatim> will probably be handy.  In fact, the script
          <verbatim>
#! /bin/sh -
sed -n \
        -e 's/^ *\(INCLUDE\|include\) *'\(.*\)'.*/_ \2/p' \
        -e 's/^ *\(CALL\|call\) *\([A-Za-z]*_[A-Za-z]*\).*/\2/p' \
        -e 's/.*= *\([A-Za-z][A-Za-z]*__*[A-Za-z][A-Za-z]*\) *(.*/\1/p' \
        ${1+"$@"} | \
    sort | \
    uniq
</verbatim>
          should give you the raw material for most of the
          dependencies you need.  It doesn't really matter too much
          if you get this wrong -- you might cause something to be
          built slightly later than it might be in the top-level
          bootstrap, might cause some eventual user to have to
          download one package more than they have to, or might create
          a circular dependency and break the nightly build, in which
          case you'll find out soon enough.</p>

        <p>The next couple of lines tells you that we lied
          outrageously, above, when we were talking about
          <code>.msg</code> files.  Though the remarks there are true
          enough in general, the <code>ADAM_ERR</code> file is special,
          and doesn't come from any <code>.msg</code> file.  This is
          surprising enough that it's worth making a remark to this
          effect in the <code>configure.ac</code> file.</p>

        <p>Finally, we list the files that should be configured.
          Essentially all starconf-style configure files should have
          at least these two files mentioned here.</p>

        <p>Now run starconf.  As described in <ref
            id="starconf"/>, this adds some required files, and
          checks that the directory looks right.  It will look
          something like this:
<verbatim>
% starconf
starconf-validate: the following files are required but do not exist:
        bootstrap
starconf-validate: the following files should be checked in, but aren't
        Makefile.am configure.ac bootstrap component.xml.in component.xml
Configuring with STARCONF_DEFAULT_STARLINK=/export3/sun
Configuring with STARCONF_DEFAULT_PREFIX=/export3/sun
Creating bootstrap
          </verbatim>
        </p>

        <p>That complained that the file bootstrap wasn't present, and
          then went on to install one for you; it listed a number of
          files which should be checked in; and it added a bootstrap
          script.  The starconf application actually does the
          checking by running the <em>starconf-validate</em> script,
          which you can run yourself independently if you wish.</p>

        <p>Now you have a bootstrap file, so run it:
<verbatim>
% ./bootstrap 
starconf-validate: the following files should be checked in, but aren't
        Makefile.am configure.ac bootstrap component.xml.in component.xml
Configuring with STARCONF_DEFAULT_STARLINK=/export3/sun
Configuring with STARCONF_DEFAULT_PREFIX=/export3/sun
File bootstrap already exists, not overwriting
autoreconf --install --symlink
configure.ac: installing `./install-sh'
configure.ac: installing `./missing'
          </verbatim>
          The bootstrap script always re-runs starconf if it can, so
          this reminds you that you still haven't checked those files
          in.  It also runs autoreconf (<ref id="autoreconf"/>) for
          you, installing the helper files that requires, and
          constructing <code>configure</code> from
          <code>configure.ac</code> and <code>Makefile.in</code> from
          <code>configure.ac</code> and <code>Makefile.am</code>.</p>

        <p>Now, finally, you can try <code>./configure</code> and
          <code>make</code>.  That might just work.</p>

        <p>Iterate until success.</p>

        <p>When the code is working, you will might want to add it to the
          set of components which are explicitly built.  To do
          this, add it to the <code>ALL_TARGETS</code> variable in the
          top-level <code>Makefile.in</code>.  Next, go to the parent
          directory of the directory you have just added: the
          <code>configure.ac</code> file there will almost certainly
          have a skeleton <code>configure.ac</code> which includes a
          <code>AC_CONFIG_SUBDIRS</code> line, to which you should add
          your newly working directory.</p>

      </subsect>

      <subsect id="autodistrib" export="export">
        <subhead>
          <title>Distribution of components</title>
        </subhead>

        <p>The <code>Makefile.in</code> files which automake generates
          generally handles distribution pretty successfully, and the
          command <kbd>make dist</kbd> will usually do almost all the
          work of packing your files into a distribution which can be
          built portably.  In some cases, however, you have to give it
          a little help.</p>

        <p>There are two potential problems.  Firstly, automake may
          not be able to accurately work out the set of files which
          ought to be distributed.  Consider the following makefile
          fragment (this, along with the other examples in this
          section, is from the AST distribution, which presents a
          variety of distribution problems):
<verbatim>
noinst_PROGRAMS = astbad
astbad_SOURCES = astbad.c pointset.h
AST_PAR: ast_par.source astbad
    sed -e 's/&lt;AST__BAD>/'`./astbad | tr 'E' 'D'`'/' ast_par.source >$@
</verbatim>
          Automake packages anything mentioned in a
          <code>_SOURCES</code> variable, so <code>astbad.c</code> and
          <code>pointset.h</code> are included in the distribution
          automatically.  However it does not attempt to work out
          every consequence of the makefile rules, and so fails to
          spot that <code>ast_par.source</code> is going to be needed
          on the build host.  In general, a file which is mentioned
          only in a makefile dependency will not be automatically
          distributed by automake.  Files such as this should be
          included by the distribution by listing them in the value of
          the <code>EXTRA_DIST</code> variable:
<verbatim>
EXTRA_DIST = ast_par.source
</verbatim></p>

        <p>Automake also supports the <code>dist_</code> and
          <code>nodist_</code> prefixes to automake variables.  These
          can be used to adjust automake's defaults for certain
          primaries.  Automake does not distribute
          <code>_SCRIPTS</code> by default (this is since they are
          sometimes generated, but I for one find this
          counter-intuitive), so if you want a script to be
          distributed, you must use a prefix:
<verbatim>
bin_SCRIPTS = ast_link
dist_bin_SCRIPTS = ast_link_adam
noinst_SCRIPTS = ast_cpp
dist_noinst_SCRIPTS = makeh
</verbatim>
          We see all four common possibilities here:
          <code>ast_link_adam</code> and <code>makeh</code> are needed
          in the distribution but need no configuration, and so should
          be distributed as they stand; <code>ast_link</code> and
          <code>ast_cpp</code> are configured, so these files should
          not be distributed, since the corresponding <code>.in</code>
          files are (as a result of being mentioned in
          <code>AC_CONFIG_FILES</code>).  Also <code>ast_cpp</code>
          and <code>makeh</code> are used only to build the library,
          and are not installed.  You could get the same effect by
          listing <code>ast_link_adam</code> and <code>makeh</code> in
          <code>EXTRA_DIST</code>, but it is probably a little less
          opaque if all the information about particular files is kept
          in one place.</p>

        <p>On the other hand, files in <code>_SOURCES</code> variables
          are distributed by default, so you must turn this off if one
          of these files is generated at configure time:
<verbatim>
libast_la_SOURCES = \
    $(GRP_C_ROUTINES) \
    $(GRP_C_INCLUDE_FILES) \
    $(GRP_F_INCLUDE_FILES) \
    ast_err.h
nodist_libast_la_SOURCES = \
    ast.h \
    AST_PAR
</verbatim></p>

        <p>Though the set of included files is deterministic, I find
          it is not terribly predictable, and the best way to do this
          sort of tidyup is by making a distribution, trying to build
          it, and thus discovering which files were left out or
          included by accident.  There is no harm in listing a file in
          <code>EXTRA_DIST</code> which would be included
          automatically.</p>

        <p>For fuller detail on automake's distribution calculations,
          see section <webref url="&automakehtml;/Dist.html" >What
          Goes in a Distribution</webref> of the automake manual.</p>

        <p>The second distribution problem is that some Starlink
          components do quite a lot of work at distribution time,
          building documentation or generating sources, generally
          using programs or scripts which are not reasonably available
          on the eventual build host.  This is in principle out of
          scope for automake and autoconf, but since it is common and
          fairly standardised in Starlink applications, Starlink automake
          and autoconf provide some support for pre-distribution
          configuration.</p>

        <p>All configuration tests in <code>configure.ac</code> should
          be done unconditionally, even if they are only meaningful
          prior to a distribution -- they are redundant afterwards,
          but cause no problems.  Any files which should be present
          <em>only</em> prior to the distribution should be listed in
          <code>configure.ac</code> inside macro <ref
            id="macro-predist-sources" >STAR_PREDIST_SOURCES</ref>.
          The <code>./configure</code> script expects to find either
          all of these files or none of them, and if it finds some
          other number, it will warn you.  If it finds these files, it
          concludes that you are in a pre-distribution checkout, and
          sets the substitution variable <code>@PREDIST@</code> to be
          empty; if it finds none, it concludes that you are in a
          distributed package, and defines <code>@PREDIST@</code> to
          be the comment character <code>#</code>.  This means that
          makefile fragments which are only usable prior to
          distribution should all be prefixed with the string
          <code>@PREDIST@</code>, and they will thus be enabled or
          disabled as appropriate.  The distribution rules mentioned
          above mean that any configuration of such undistributed
          files must be done by hand in the <code>Makefile.am</code>,
          and not by <code>AC_CONFIG_FILES</code>, since this macro
          automatically distributes the files implied by its
          arguments.</p>

        <p>For example, the AST <code>configure.ac</code> has:
<verbatim>
STAR_LATEX_DOCUMENTATION([sun210 sun211], [sun210.htx_tar sun211.htx_tar])
STAR_PREDIST_SOURCES(sun_master.tex)
STAR_CHECK_PROGS(star2html)
STAR_CHECK_PROGS(prolat, sst)   # prolat is part of SST
</verbatim>
          The <code>sun_master.tex</code> file is used when the
          SUN/210 and SUN/211 files are being generated, and should
          not be distributed.  Since the process of generating the
          documentation uses application <code>star2html</code>, we
          check for this and for <code>prolat</code> (and thus do this
          redundantly even after distribution).  Most components can
          get away with the one-argument version of
          <code>STAR_LATEX_DOCUMENTATION</code> which avoids these
          complications, and does the equivalent of the
          <code>star2html</code> check internally.</p>

        <p>This AST configure script also has
<verbatim>
STAR_PREDIST_SOURCES(error.h.in version.h.in)
</verbatim>
          and carefully avoids calling <code>AC_CONFIG_FILES(error.h
          version.h)</code>.  It still has to configure these files
          prior to distribution, so this has to be done in the
          <code>Makefile.am</code>:
<verbatim>
@PREDIST@predist_subs = sed \
@PREDIST@    -e 's,@star_facilitycode\@,$(star_facilitycode),' \
@PREDIST@    -e 's,@PACKAGE_VERSION\@,$(PACKAGE_VERSION),' \
@PREDIST@    -e 's,@PACKAGE_VERSION_MAJOR\@,$(PACKAGE_VERSION_MAJOR),' \
@PREDIST@    -e 's,@PACKAGE_VERSION_MINOR\@,$(PACKAGE_VERSION_MINOR),' \
@PREDIST@    -e 's,@PACKAGE_VERSION_RELEASE\@,$(PACKAGE_VERSION_RELEASE),' \
@PREDIST@    -e 's,@PERL\@,$(PERL),'
@PREDIST@error.h: error.h.in
@PREDIST@	rm -f $@; $(predist_subs) $< >$@
@PREDIST@version.h: version.h.in
@PREDIST@	rm -f $@; $(predist_subs) $< >$@
</verbatim>
          (this is the same technique that was illustrated in passing
          in the discussion of `installation locations' in <ref
            id="automakeoverview"/>).  The leading
          <code>@PREDIST@</code> strings mean that this stanza causes
          no problems after distribution, when the
          <code>error.h.in</code> files are not present.
        </p>

        <p>This is admittedly a rather crude technique, but it is a
          lot less fragile than the more elegant alternatives.</p>

        <subsubsect id="rolldistribution">
          <subhead>
            <title>Making a distribution</title>
          </subhead>

          <p>In general, the details of making distributions are
            outside the (current) scope of this document.  However
            there is one error we can usefully mention.</p>

          <p>Normally, when you <code>./bootstrap</code> a directory,
            it arranges to install it by default in a location
            governed by starconf (see <ref id="starconf"/> for
            details).  Since this default is a location on your local
            machine, it might not be appropriate for a distribution
            tarball.  Thus when you have checked out the appropriate
            version of your software (probably via a CVS export of a
            particular tag), you should configure it in the following
            way:
<verbatim>
% STARCONF_DEFAULT_PREFIX=/star STARCONF_DEFAULT_STARLINK=/star ./bootstrap 
</verbatim>
            (or <kbd>env ...</kbd> on csh-type shells).  This will
            make the default installation prefix <code>/star</code>
            (perhaps <code>/stardev</code> would be appropriate in
            some circumstances).  After that, the sequence
<verbatim>
% ./configure
% make dist
</verbatim>
            will make the distribution properly.</p>

        </subsubsect>

      </subsect>

      <subsect id="regressiontests" export="export">
        <subhead>
          <title>Regression tests</title>
        </subhead>

        <p>Automake provides some simple support for regression tests.
          There is a (terse) description of these in the automake
          manual, in the section <webref
            url="&automakehtml;/Tests.html">Support for test
            suites</webref>, but it lacks any example.  You run the tests
          with <kbd>make check</kbd>, after the build, but before the
          component is installed.</p>

        <p>You can set up tests as follows.
          <verbatim>
TESTS = test1 test2
check_PROGRAMS = test1 test2

test1_SOURCES = test1.f
test1_LDADD = libemsf.la libems.la `cnf_link`

test2_SOURCES = test2.c
</verbatim></p>

        <p>The <code>TESTS</code> variable lists a set of programs
          which are run in turn.  Each should be a program which returns
          zero on success, and if all the programs return zero, the test
          is reported as a success overall.  If a non-portable test
          makes no sense on a particular platform, the program should
          return the magic value 77; such a program will not be counted
          as a failure (so it's actually no different from `success',
          and the difference seems rather pointless to me).  A
          <code>PROGRAMS</code> `primary' (see <ref
            id="automakeoverview"/> for this term) indicates that
          these are programs to be built, but the `prefix'
          <code>check</code> indicates that they need be built only at
          `make check' time, and are not to be installed.</p>

        <p>The <code>SOURCES</code> primary is as usual, but while the
          <code>test2</code> program is standalone (it's not clear quite
          how this will test anything, but let that pass), the
          <code>test1</code> program needs to be linked against two
          libraries, presumably part of the build.  We specify these
          with a <code>LDADD</code> primary, but note that we specify
          the two libraries which are actually under test as two
          <em>libtool libraries</em>, with the extension
          <code>.la</code>, rather than using the <code>-lemsf
            -lems `cnf_link`</code> which <code>`ems_link`</code>
          uses as its starting point
          (this example comes from the <code>ems</code> component).
          That tells libtool to use the libraries in this directory,
          rather than any which have been installed.</p>

        <p>The fact that test programs must return non-zero on error
          is problematic, since Fortran has no standardised way of
          controlling the exit code.  Many Fortran compilers will let
          you use the <code>exit</code> intrinsic:
          <verbatim>
rval = 1
call exit(rval)
</verbatim>
          to return a status.  Since this is test code, it doesn't
          really matter that this <em>might</em> fail on some
          platforms, but if this worries you, then write the test code
          as a function which returns a non-zero integer value on
          error, and wrap it in a dummy C program:
          <verbatim>
test1_SOURCES = test1.f test1_wrap.c
test1_wrap.c:
	echo "int main() { exit (test1_()); }" >test1_wrap.c
</verbatim></p>

        <p>If the tests you add use components other than those
          declared or implied as component dependencies (see <ref
            id="macro-declare-dependencies"/>), then you should
          declare the full set of test dependencies using
          <code>STAR_DECLARE_DEPENDENCIES([test], [...])</code>.</p>

      </subsect>

      <subsect id="importing-thirdparty" export="export">
        <subhead>
          <title>Importing third-party sources</title>
        </subhead>

        <p><strong>NOTE: this section is subject to change.</strong>
          It's not yet clear what the best mechanism is for doing this
          work, because it's not yet clear how general the support
          should be.  Therefore the autoconf/automake support is likely to
          change.  The documentation below is almost certain to
          change.  If you're working on this area, let Norman know.</p>

        <p>If an application needs to rely on a non-Starlink
          application, and especially if it relies on a modified
          version, then the sources for that application should be
          checked in to the <code>thirdparty/</code> part of the
          tree.</p>

        <p>The example here is the GNU m4 distribution, which is
          one of the buildsupport tools necessary on Solaris, which
          has a non-GNU m4 (autoconf relies on language extensions in
          GNU m4, which is therefore required).</p>

        <p>First, we get and import the sources (see the fuller
          details in the <webref
            url="http://www.cvshome.org/docs/manual/" >CVS manual</webref>):
          <verbatim>
% cd /tmp
% wget http://ftp.gnu.org/pub/gnu/m4/m4-1.4.tar.gz
% tar xzf m4-1.4.tar.gz
% cd m4-1.4
% cvs -d :ext:username@cvs.starlink.ac.uk:/cvs import \
    -ko -m "Import of GNU m4 1.4" \
    thirdparty/fsf/m4 FSF m4-1-4
</verbatim></p>

        <p>The <code>-ko</code> option turns off any keyword expansion
          for the newly-imported files.  Thus they will retain the
          values they had when they were imported.  This appears to be
          the practice recommended by the CVS manual, though it is not
          absolutely clear that it is best, and this should not be
          taken as a firm recommendation.</p>

        <p>The <code>thirdparty/fsf/m4</code> argument is the location
          of the new component within <em>our</em> repository, the
          path to which will be created for you if necessary.  FSF --
          the `Free Software Foundation' -- is the `vendor' in this
          case, and this is used for the location within the
          <code>thirdparty/</code> tree as well as the next CVS
          argument.  CVS uses this vendor argument as the name of the
          branch this new import is nominally located on.</p>

        <p>Finally, this import command tags the imported files with
          the tag you give as the last argument.  This should use the
          same convention as other tags within the Starlink
          repository, namely the component name and version
          number.</p>

        <p>Now that the source set is in the repository, you can go
          back to your checkout tree and check the new component out:
          <verbatim>
% cd &lt;checkout-tree&gt;
% cvs -d :ext:username@cvs.starlink.ac.uk:/cvs co thirdparty/fsf/m4
[blah...]
% cd thirdparty/fsf/m4
% cvs status -v configure.in
===================================================================
File: configure.in      Status: Up-to-date

   Working revision:    1.1.1.1
   Repository revision: 1.1.1.1 /cvs/thirdparty/fsf/m4/configure.in,v
   Sticky Tag:          (none)
   Sticky Date:         (none)
   Sticky Options:      -ko

   Existing Tags:
        m4-1-4                          (revision: 1.1.1.1)
        FSF                             (branch: 1.1.1)
</verbatim>
          We see that the newly-imported files have been put on the
          1.1.1 branch, named <code>FSF</code>.  Any files we add to
          this component, and any files we modify, will go on the
          trunk.</p>

        <p>What you do next depends on how easy it is to configure the
          new component.  We'll look at two examples, the tclsys
          component, containing a distribution of Tcl, and the m4
          component, containing the GNU version of m4.  The tclsys
          component comes with its own fearsomely intricate configuration,
          which we want to disturb as little as possible, but the m4
          configuration is more regular (as befits a core GNU
          component), and admits of reasonable adaptation.</p>

        <subsubsect id="config-tclsys">
          <subhead>
            <title>Configuring tclsys</title>
          </subhead>

          <p>The <code>tclsys</code> component is actually quite easy to
            configure, partly because its distributed
            <code>./configure</code> script is generated by a version
            of autoconf too old for us to handle directly, which means
            that we want to avoid touching it as much as possible.
	    After being unpacked and imported as described above, the
            top-level of the checked out Tcl distribution looks like this:
<verbatim>
ptolemy:tcl> ls
CVS/       README   compat/  generic/  license.terms  tests/  unix/
ChangeLog  changes  doc/     library/  mac/           tools/  win/
</verbatim>
            The way that the distributed <code>README</code> tells us
            to compile Tcl is to change to the <code>unix/</code>
            subdirectory, and type <code>./configure; make</code>.  We
            want to create files <code>Makefile.am</code> and
            <code>configure.ac</code> in this directory, which handle
            this for us.</p>

        <p>The first thing to do is to add the
          <code>component.xml.in</code> file:
<verbatim>
% cp `starconf --show buildsupportdata`/template-component.xml.in \
    component.xml.in
</verbatim>
          after which we edit <code>component.xml.in</code>
          appropriately.  We could similarly copy the template
          <code>Makefile.am</code> and <code>configure.ac</code>
          files, but these are sufficiently special that it wouldn't
          help.</p>

          <!-- NB: section variable-special-install-command refers to
               this section as an example. -->

          <p>The <code>configure.ac</code> should look like this:
<verbatim>
dnl    Process this file with autoconf to produce a configure script
AC_REVISION($Revision$)
AC_INIT(tclsys, 8.2.3, ussc@star.rl.ac.uk)

AC_PREREQ(2.50)
AM_INIT_AUTOMAKE(1.8.2-starlink)

AC_CONFIG_SRCDIR([license.terms])

STAR_DEFAULTS

AC_PROG_MAKE_SET

dnl    To configure Tcl, run ./configure in the `unix' directory.
dnl    Do not invoke AC_CONFIG_SUBDIRS, since that prompts autoreconf
dnl    to try to reconfigure that directory, and automake to assume 
dnl    it's allowed to play there, too.
(
    cd unix
    echo ./configure --prefix=$prefix --cache-file=config.cache
    ./configure --prefix=$prefix --cache-file=config.cache
)

AC_CONFIG_FILES([Makefile component.xml])
AC_OUTPUT
</verbatim>
            Note that we must use <code>STAR_DEFAULTS</code>, and we
            must <em>not</em> use <code>AC_CONFIG_SUBDIRS</code>, for
	    the reason described in the comments above, even
            though configuring the subdirectories is exactly what we
            want to do.  This particular combination of commands is
            exactly what we need to do to configure Tcl -- you might
            need to do different things for different third-party
            packages.</p>

          <p>The <code>Makefile.am</code> file is even simpler:
<verbatim>
## Process this file with automake to produce Makefile.in

@SET_MAKE@
RECURSIVE_TARGETS = all clean

default: all

$(RECURSIVE_TARGETS):
        cd unix; $(MAKE) $@

STAR_SPECIAL_INSTALL_COMMAND = cd unix; \
	$(MAKE) INSTALL_ROOT=$$DESTDIR install
</verbatim>
            As described in
            <ref id="variable-special-install-command"/>, this adapts the 
            standard Makefile <code>install</code> target so that it
            uses the given command to make an installation.  Note that
            the version of autoconf which generated the Tcl
            <code>Makefile.in</code> template was one which used the
            <code>INSTALL_ROOT</code> variable instead of the
            <code>DESTDIR</code> variable used by more modern
            versions, and so we have to adjust this in this command
            line.  This <code>DESTDIR</code> variable is important, as
            it is used during the installation of the component, to do
            a staged installation.</p>

          <p>After writing the <code>Makefile.am</code> and
            <code>configure.ac</code> files, all you need to do is run
            starconf to create a <code>./bootstrap</code> file, and
            check in the files which starconf suggests.</p>

          <p>That's it!</p>

        </subsubsect>

        <subsubsect>
          <subhead>
            <title>Configuring m4</title>
          </subhead>

        <p>The first thing to do is to add the
        <code>component.xml.in</code> file:
<verbatim>
% cp `starconf --show buildsupportdata`/template-component.xml.in \
    component.xml.in
</verbatim>
          after which we edit <code>component.xml.in</code>
          appropriately.  This turns out to be more intricate than
          usual: the <code>configure.in</code> file is old-fashioned
          enough that it does not define the substitution variables
          that <code>component.xml.in</code> is expecting, and it
          requires a slightly closer inspection of
          <code>configure.in</code> to determine what these should be
          (<code>@PRODUCT@</code> and <code>@VERSION@</code> in this
          case).  Although this step seems redundant, it is best to
          have this file configured rather than completely static, so
          that the generated <code>component.xml</code> will remain
          correct when and if a new version of the `m4' component were
          imported.  Having said that, ensure that the
          <code>&lt;bugreports&gt;</code> element in the
          <code>component.xml.in</code> file points to a Starlink
          address -- we don't want bugs in <em>our</em> modifications to
          be reported to the original maintainers.</p>

        <p>Note that it is the now-deprecated
          <code>configure.in</code> file that is the autoconf source in
          this component, and that it has now-deprecated syntax; there
          is no need to update this.  When we run autoreconf, we
          discover that this is not the only obsolete feature, and we
          have to do some futher mild editing of
          <code>configure.in</code> before it is acceptable to the
          repository version of autoconf, though it still produces a
          good number of warnings.  These don't matter for our present
          purposes: the <code>./configure</code> which autoreconf
          produces still works, and the component builds and runs
          successfully.</p>

        <p>In order for the new component to be a good citizen in the
          Starlink build tree, it needs to install a file manifest as
          part of the <code>install</code> target.
          Add to the <code>configure.in</code> file the lines
          <verbatim>
: ${STAR_MANIFEST_DIR='$(prefix)/manifests'}
AC_SUBST(STAR_MANIFEST_DIR)
</verbatim>
          If we were using Starlink automake, this would be enough to
          prompt it to include support for installing a manifest in the
          <code>Makefile.in</code> it generates.  The GNU m4
          distribution does not, however, use automake, so we need to
          add this by hand.  The following additions to
          <code>Makefile.in</code> do the right thing, though they are
          rather clumsier than the support that Starlink automake adds:
          <verbatim>
STAR_MANIFEST_DIR = @STAR_MANIFEST_DIR@

[...]

# Change the install target from the default
install: config.h install-manifest.xml
        for subdir in $(SUBDIRS); do \
          echo making $@ in $$subdir; \
          (cd $$subdir && $(MAKE) $(MDEFINES) $@) || exit 1; \
        done
        $(srcdir)/mkinstalldirs $(STAR_MANIFEST_DIR)
        $(INSTALL_DATA) install-manifest.xml $(STAR_MANIFEST_DIR)/$(PRODUCT)
 
# Add the install-manifest.xml target
install-manifest.xml: all
        rm -Rf STAGING
        mkdir STAGING
        $(MAKE) prefix=`pwd`/STAGING install
        rm -f $@
        echo "&lt;?xml version='1.0'?>"                            >$@
        echo "&lt;!DOCTYPE manifest SYSTEM 'componentinfo.dtd'>"   >>$@
        echo "&lt;manifest component='$(PACKAGE_NAME)'>"           >>$@
        echo "&lt;version>$(PACKAGE_VERSION)&lt;/version>"            >>$@
        echo "&lt;files>"                                          >>$@
        find STAGING -type f | sed 's,^.*STAGING,$(prefix),'    >>$@
        echo "&lt;/files>"                                         >>$@
        echo "&lt;/manifest>"                                      >>$@
        rm -Rf STAGING
</verbatim>
          (if you look at <code>thirdparty/fsf/m4/Makefile.in</code>
          you will see that we actually need to have <code>PRODUCT</code> and
          <code>VERSION</code> there instead of the more general
          <code>PACKAGE_NAME</code> and <code>PACKAGE_VERSION</code>
          above).  Note that the actual installation happens within
          the rule for <code>install-manifest.xml</code> -- this
          guarantees that the <code>$(prefix)</code> stored in the
          manifest is the same as the <code>$(prefix)</code> actually
          used for the installation.</p>

        <p>We add the <code>component.xml.in</code> file to the
          repository, and look at what we have.
          <verbatim>
% cvs add component.xml.in
% cvs -n update
</verbatim>
          This tells us that <code>configure</code>,
          <code>configure.in</code> and <code>config.h.in</code> have
          been modified, and <code>component.xml.in</code> added, but
          we also discover that files <code>stamp-h.in</code>,
          <code>doc/stamp-vti</code> and <code>doc/version.texi</code>
          have also been modified, as part of the regeneration of the
          <code>./configure</code> script.  The modification to the
          stamp file <code>stamp-h.in</code> we should probably
          commit, to avoid dependency niggles in the future, but the
          meaningless changes to the two <code>doc/</code> files we
          can just discard:
          <verbatim>
% cvs commit -m "Add component.xml template" component.xml.in 
% cvs commit -m "...blah..." configure configure.in config.h.in 
% cvs commit -m "Stamp file regenerated by autoreconf" stamp-h.in
% rm doc/stamp-vti doc/version.texi 
% cvs update doc
</verbatim></p>

        <p>We can see
          <verbatim>
% cvs status configure.in
===================================================================
File: configure.in      Status: Up-to-date

   Working revision:    1.2
   Repository revision: 1.2     /cvs/thirdparty/fsf/m4/configure.in,v
   Sticky Tag:          (none)
   Sticky Date:         (none)
   Sticky Options:      -ko
</verbatim>
          that the changes to <code>configure.in</code> are now on the
          trunk for this component, rather than the FSF branch.</p>
        </subsubsect>
      </subsect>

      <subsect id="autoconfing-final" export="export">
        <subhead>
          <title>Adding components: the final step</title>
        </subhead>

        <p>In both cases, the final step, after you have committed your
          changes, is to go to the top level of a <em>full checkout</em>
          of the repository, make sure your new component is checked out
          there, then delete <code>Makefile.dependencies</code> and
          remake it.
          <verbatim>
% rm Makefile.dependencies
% make Makefile.dependencies
# ... remakes componentset.xml, and from that Makefile.dependencies
% cvs -n update
M componentset.xml
M Makefile.dependencies
</verbatim>
          (you might need to run <kbd>./configure --no-recursion</kbd>
          to bring the <code>Makefile</code> there up to date with
          respect to <code>Makefile.in</code>).  Check, with
          <kbd>cvs diff Makefile.dependencies</kbd>, that the right
          material has been added, before committing these two
          files.</p>

        <p>If the component you have added should be included in the
          `make world' build, then you should add it to the list of
          targets listed in the <code>ALL_TARGETS</code> variable at
          the top of the top-level <code>Makefile.in</code>.  You
          should do this only if both this component <em>and anything
          it depends upon</em> build successfully from scratch.</p>
      </subsect>

    </sect>

    <sect id="faqs" export="export">
      <subhead>
        <title>FAQs</title>
      </subhead>

     <subsect id="general-faqs" export="export">
        <subhead>
          <title>General FAQs</title>
        </subhead>

        <p><dl>
            <dt>If a executable is built that is used to create some
              file during the build, how do I prevent it from being
              installed?</dt>
            <dd>
              <p>Use the <code>noinst</code> prefix when you declare
                the program.  See <ref id="automakeoverview"/>.</p>
            </dd>

            <dt>How do I put things in
              <code>/star/{docs,etc,help}</code>?</dt>
            <dd>
              <p>Use the <code>stardocs</code>, <code>staretc</code>
                and <code>starhelp</code> <code>DATA</code> prefixes.
                The Starlink autoconf macros <ref id="macro-doc-files"
                ><code>STAR_DOC_FILES</code></ref>, <ref
                id="macro-etc-files"
                ><code>STAR_ETC_FILES</code></ref> and <ref
                id="macro-help-files"
                ><code>STAR_HELP_FILES</code></ref> allow you to do
                the same thing from within the
                <code>configure.ac</code> file.  See <ref
                id="automakeoverview"/> for an example.</p>
            </dd>

            <dt>How do I control which compiler and compiler options I
              use?</dt>
            <dd>
              <p>You can control the compiler at configure time by
              specifying the variable <code>F77</code>,
              <code>FC</code>, <code>CC</code> or <code>CXX</code>, as
              appropriate; and you add compiler options with the
              <code>FFLAGS</code>, <code>FCFLAGS</code> or
                <code>CFLAGS</code> variables.  For details and
              warnings, see <ref id="configure-script"/>.</p>
            </dd>

            <dt>What's the best way to generate files at build
              time?</dt>
            <dd>
              <p>Look at the <code>Makefile.am</code> for the
                <code>prm</code> component.  It's a good example of
                using <code>noinst_</code> tools, the Fortran
                preprocessor, and <code>./configure</code> variables
                in a reasonably tidy way.</p>
            </dd>

            <dt>I want to do odd things at install time.  How?</dt>
            <dd>
              <p>Automake provides a couple of escape hatches for
                installing extra material.  These are the
                <code>install-exec-local</code> and
                <code>install-data-local</code> targets for installing
                platform-dependent and -independent files.  The
                associated rules are run at install time, and can do
                anything, the similar <code>install-exec-hook</code>
                and <code>install-data-hook</code> targets are run
                after all other install targets, and can do
                post-installation cleanup and the like.  See section
                <webref url="&automakehtml;/Install.html" >What Gets
                  Installed</webref> in the automake manual for
                details.</p>

              <p>For example, the <code>dtask</code> component
                installs a special object file in the library
                directory.  This isn't a program, or script, or
                library, and so isn't naturally handled by any other
                automake mechanism.  The <code>Makefile.am</code>
                there includes the following:
<verbatim>
dtask_main.o: dtask_main.f
install-exec-local: dtask_main.o
	$(INSTALL_PROGRAM) dtask_main.o $(DESTDIR)$(libdir)
	if test -n "$$MANIFEST_FD"; then \
	    echo "$(DESTDIR)$(libdir)/dtask_main.o" >&$$MANIFEST_FD; \
	fi
</verbatim>
                This uses the <code>$(INSTALL_PROGRAM)</code> command to
                install the object file in the library directory (you'd
                use <code>$(INSTALL_DATA)</code> command for a data
                target).  The installation location is
                <code>$(libdir)</code>, which is a location which
                includes the <code>$(prefix)</code> variable, so that
                this install rule behaves as other such rules do.
                Also, it prefixes the installation location with
                <code>$(DESTDIR)</code>: this is usually the empty
                string, but it can be set to something else to perform
                a staged installation.  Finally, the location of the
                installed file is written to the file-descriptor in the
                environment variable <code>$MANIFEST_FD</code>,
                <em>if</em> that variable is non-empty.  This is a
                Starlink extension, and is how the manifest file is
                built up.  Each of these features is important if this
                hand-made install rule is to behave the same way as
                the automatically-generated rules.</p>

              <p>You often need to create links in this situation.  To
                do that portably (symbolic links are not required by
                POSIX, and so the autoconf macros are able to emulate
                them if necessary), put the <code>AC_PROG_LN_S</code> macro in
                your <code>configure.ac</code>, and use the
                <code>$(LN_S)</code> macro in your
                <code>Makefile.am</code>.  Note that the autoconf
                manual <webref url="&autoconfhtml;/autoconf_40.html"
                  >notes</webref> that this macro does not in
                principle support a path in the second argument; thus
                do not write
                <code>$(LN_S) /path/to/target/TARGET
                  /path/to/link/LINK</code>, but instead
<verbatim>
cd /path/to/link; rm -f LINK; $(LN_S) /path/to/target/TARGET LINK
</verbatim>
                The option <code>rm -f</code> is portable.</p>
            </dd>

            <dt>I want to do odd things at clean/distribution time.  How?</dt>
            <dd>
              <p>Odder than what is described in <ref
                  id="autodistrib"/>?</p>

              <p>Automake also has support for extending what is cleaned
                and what is included in the distribution, though this
                does not have to be as elaborate as the support for
                extended installation above.  See the
                documentation on <code>CLEANFILES</code> and
                <code>EXTRA_DIST</code> in the Automake manual.</p>
            </dd>

            <dt>I want to make distribution tarballs install into
              <code>/star</code>.  How?</dt>
            <dd>
              <p>See the description of <code>./bootstrap</code> in
                <ref id="rolldistribution"/>.</p>
            </dd>

            <dt>How do I write portable Makefiles and shell scripts?</dt>
            <dd>
              <p>The autoconf manual has a very useful collection of
                portability advice in its section
                manual <webref url="&autoconfhtml;/autoconf_114.html"
                  ><em>Portable Shell Programming</em></webref>.  Also,
                the <webref
                  url="http://www.unix.org/version3/"
                  >Single Unix Specification, version 3</webref>
                provides standardised specifications of the behaviour
                of Unix library functions and system utilities.  The
                Single Unix core specification is identical to POSIX.3
                (IEEE Std 1003.1) and ISO/IEC 9945:2003.
              </p>
            </dd>

            <dt>I've just been told that libtool is ``unable to infer
              tagged configuration''.  What on earth does that
              mean?</dt>

            <dd>
              <p>I'm not what this is supposed to mean
                <em>exactly</em>, but what it seems to mean in
                practice is that libtool has become terribly confused
                about your compiler.  Very probably, you forced
                <code>./configure</code> to use a particular compiler
                by specifying one of the <code>F77</code>,
                <code>FC</code> or <code>CC</code> environment
                variables at configure time.  You may have forgotten
                that you have that variable set.  Alternatively, you
                may be unaware that that variable is set: a known
                manifestation of this problem is that the IRAF startup
                script sets <code>F77</code> to be an IRAF-specific
                script, which works OK from the command-line (given
                that you want to use IRAF), but which leaves libtool
                in a confused heap.</p>

              <p>See <ref id="configure-script"/> for more discussion
                of these variables.</p>
            </dd>

          </dl>
        </p>
        
      </subsect>

      <subsect id="state-faqs" export="export">
        <subhead>
          <title>State FAQs</title>
        </subhead>

        <p>This is only a summary of the various ways that state is
          held within the Starlink build system.  The details are in
          <ref id="tool-state"/>.</p>

        <p>
          <dl>
            <dt>How do I get rid of state in a checked-out directory?</dt>
            <dd>
              <p>One of <kbd>make clean</kbd>, <kbd>make
                  distclean</kbd> or <kbd>make maintainer-clean</kbd>
                should do what you want.  The first gets rid of
                compiled files, the second everything but distributed
                files, and the third returns the directory to an
                almost pristine state, though without deleting
                <code>./configure</code> or the files it needs to
                run.</p>
              <p>The nuclear option for clearing state from a
                directory <code>ping</code> is to delete it and check
                it out afresh:
<verbatim>
% cd ..
% cvs release -d ping      # or: mv ping ping-old
% cvs update -d ping
</verbatim>
                The CVS `release' command tells CVS you have finished
                with a particular checkout.  With the <code>-d</code>
                option, it is basically <kbd>rm -rf</kbd>
                <em>except</em> that it checks you have no modified but
                uncommited files left within <code>ping</code>.</p>
            </dd>

            <dt>How do I start again?</dt>
            <dd>
              <p>As mentioned above, <code>make
                  maintainer-clean</code> in the top level should
                recurse and make <code>maintainer-clean</code> in each
                of the children.  That unmakes and unconfigures
                everything, but doesn't undo the bootstrapping.  The
                bootstrapping done by <code>./bootstrap</code> doesn't
                depend on any state except the contents of the
                manifest files, and to undo that, you need only delete
                the manifest.</p>

              <p>For maintainer-clean to work, one sometimes needs
                to make extra declarations in
                <code>Makefile.am</code>.  There could well be
                components where maintainer-clean doesn't work as
                fully as it ought.  Do mention those if you spot them.
              </p>
            </dd>

            <dt>How do I determine where a component is installed?</dt>
            <dd>
              <p>In a variety of ways.  In the list below, each mechanism
                effectively supplies the default for the mechanism
                before it.
                <ol>
                  <li>
                    <p>You can specify an installation prefix at
                      install time:
<verbatim>
% make prefix=/odd/place install
</verbatim>
                      This might break your installation if there was
                      a prefix baked in to your component at build
                      time.  Do this only if you have a particular
                      reason for doing so, and know what you're doing.</p>
                  </li>
                  <li>
                    <p>At make time:
<verbatim>
% make prefix=/odd/place
</verbatim>
                      This builds your component with the Makefile
                      variable <code>${prefix}</code> set to the given
                      value.  The component will be installed into
                      this location at install time, unless you
                      override the location as described above.  See
                      the discussion of `installation directory
                      variables' in <ref id="automakeoverview"/>.</p>
                  </li>
                  <li>
                    <p>At configure time:
<verbatim>
% ./configure --prefix=/odd/place
</verbatim>
                      This is usually the most appropriate way to do
                      this.</p>
                  </li>
                  <li>
                    <p>By setting a `sticky variable':
<verbatim>
% ./starconf.status STARCONF_DEFAULT_PREFIX=/odd/place
</verbatim>
                      This sets the default for the
                      <code>./configure</code> script's
                      <code>--prefix</code> option.</p>
                  </li>
                  <li>
                    <p>By configuring <em>starconf</em>:
<verbatim>
% pwd
.../buildsupport/starconf
% ./configure STARCONF_DEFAULT_PREFIX=/odd/place
...
% make; make install
</verbatim>
                      This sets the default for all directories
                      configured using this <em>starconf</em> application.
                      This is effectively what you do when you set the
                      environment variable
                      <code>STARCONF_DEFAULT_PREFIX</code> before you
                      run the top-level <code>./bootstrap</code>
                      script, as described in <ref
                        id="bootstrapping"/>.</p>
                  </li>
                </ol>
              </p>
            </dd>

            <dt>OK, now I've changed my mind about where I want components
              to be installed -- the `prefix'.  How do I tell the
              build system?</dt>

            <dd>
              <p>Easy.  Set the <code>STARCONF_...</code> variables
                as you want them, as described in <ref
                  id="bootstrapping"/>, and in the top level of the
                checkout, do
<verbatim>
% ./bootstrap --force-starconf
% rm config.cache
</verbatim>
                The <code>--force-starconf</code> option forces the
                bootstrap to remake and reinstall the starconf
                component, taking the current values of the
                <code>STARCONF_...</code> variables into account.  In
                fact, the same effect would be obtained with the
                simple <kbd>./bootstrap</kbd> command, if you'd done
                <kbd>rm &lt;my-star&gt;/manifests/starconf</kbd>
                first.  The starconf component holds the rather little
                state associated with the <code>STARCONF_...</code>
                variables.</p>

              <p>You should also remove any
                <code>config.cache</code> files, both in the
                top-level directory and elsewhere, since these often
                store paths to applications and libraries which
                are probably not appropriate for your new prefix.</p>

              <p>For more details, see the notes on state in <ref
                  id="tool-state"/>.</p>
            </dd>

            <dt>Why does <kbd>make world</kbd> not do anything?</dt>
            <dd>
              <p>The <kbd>make world</kbd> build works by comparing
                timestamps of the <em>installed</em> files in the
                manifests directory -- that is, in something like
                <code>/my-star/manifests</code>, outside of the build
                tree.  It only checks whether each component was
                <em>installed</em> after each of the components it
                depends on.  If you wish to use this to (rebuild and)
                reinstall a given component, then simply delete the
                manifest file for the component in question and re-run
                <kbd>make world</kbd>.</p>
              <p>Alternatively, <kbd>make</kbd> in the top-level
                checkout directory will recurse, and invoke <kbd>make
                  all</kbd> in each of its children, and thus bring
                the whole tree up to date.</p>
              <p>You can check the default installation location --
                shown as <code>/my-star</code> above -- with
                <kbd>./starconf-status --show
                STARCONF_DEFAULT_PREFIX</kbd></p>
              <p>Also, <kbd>make world</kbd> only makes those targets
                listed in the variable <code>ALL_TARGETS</code> within
                the top-level Makefile.  Thus if the component you're
                interested in isn't there, nor required by something
                that is there and will be rebuilt, nothing will
                happen.  See also <ref id="autoconfing-final"/>.</p>
            </dd>

            <dt>I know the buildsupport tools have been updated in the
              repository.  What's the best way to install the new
              versions locally?</dt>
            <dd>
              <p>The most straightforward way is to update your
                checkout of the component in question, then invoke
                <kbd>./configure; make; make install</kbd>
                within that checkout directory.</p>
              <p>Alternatively, and much as described above, you could
                update your checkout of the component in question,
                then delete its manifest file and run
                <kbd>./bootstrap --buildsupport-only</kbd> in the
                top level of the checkout.</p>
            </dd>

            <dt>What does this mean?: <code>required file
                `./install-sh' not found</code></dt>
            <dd>
              <p>It means that you need to run
                <em>autoreconf</em> with different options.</p>

              <p>You have just run <em>autoreconf</em> by hand
                (haven't you?) and it is complaining that it cannot
                find the <code>./install-sh</code> file which
                <em>automake</em> requires (in fact
                <em>autoreconf</em> has spotted a
                <code>Makefile.am</code> in your directory, and so has
                invoked <em>automake</em>, and it is this which is
                reporting the error).  Give <em>autoreconf</em> the
                <code>--install --symlink</code> options, which
                installs required files, and does so by symlinking
                rather than copying them.</p>

            </dd>

            <dt>What does this mean?: <code>configure: error:
                `&lt;env-var&gt;' has changed since the previous
                run</code></dt>
            <dd>
              <p>The message might say:
<verbatim>
% ./configure -C
configure: loading cache config.cache
configure: error: `STARLINK' has changed since the previous run:
configure:   former value:  /somewhere/else
configure:   current value: /export3/sun
configure: error: changes in the environment can compromise the build
configure: error: run `make distclean' and/or `rm config.cache' and start over
</verbatim>
              You have changed an `influential environment variable'.
                See <ref id="configure-script"/>.</p>
            </dd>

          </dl>
        </p>
      </subsect>

    </sect>

    <appendices>
      <sect id='starconfmacros' export='export'>
        <subhead>
          <title>The Starconf macros and variables</title>
        </subhead>

        <p>The following macros may be used within the
          <code>configure.ac</code> file.  Of these, only the
          <code>STAR_DEFAULTS</code> macro is required to be in the
          file.</p>

        <p>In the descriptions below, optional arguments are shown in
          square brackets, along with their default value.  If the
          sole argument is optional (for example in the case of
          <code>STAR_DEFAULTS</code>), you do not need to supply the
          brackets.</p>

        <p>The macros below ultimately do their work by expanding into
          shell script, and these results are exposed in the
          <code>./configure</code> file.  Although it can occasionally
          be useful to examine these implementation details, resist the
          temptation to write your <code>configure.ac</code> scripts
          based on what you find there.  If macro behaviour is not
          documented here, you should not rely on it.  If you
          <em>need</em> to rely on it, then consult with the starconf
          maintainer to have the documentation changed, and the
          behaviour thus fixed.</p>

        <subsect id="macro-ac-f77-have-open-readonly" export="export">
          <subhead>
            <title>AC_F77_HAVE_OPEN_READONLY</title>
          </subhead>

          <p><strong>AC_F77_HAVE_OPEN_READONLY</strong></p>

          <p>Obsolete -- use <ref id="macro-ac-fc-open-specifiers"
              ><code>AC_FC_OPEN_SPECIFIERS</code></ref> instead</p>

        </subsect>

        <subsect id="macro-ac-fc-check-intrinsics" export="export">
          <subhead>
            <title>AC_FC_CHECK_INTRINSICS</title>
          </subhead>

          <p><strong>AC_FC_CHECK_INTRINSICS (function...)</strong></p>

          <p>Like <code>AC_CHECK_FUNCS</code>, but instead determine
            the intrinsics available to the Fortran compiler.  For
            each intrinsic in the (whitespace-separated and
            case-insensitive) argument list, define
            <code>HAVE_INTRINSIC_intrinsic</code> if it is available.
            For example, <code>AC_FC_CHECK_INTRINSICS(sin)</code>
            would define <code>HAVE_INTRINSIC_SIN</code> if the `sin'
            intrinsic function were available (there are probably
            rather few Fortrans which don't have this function).
          </p>
        </subsect>

        <subsect id="macro-ac-fc-check-headers" export="export">
          <subhead>
            <title>AC_FC_CHECK_HEADERS</title>
          </subhead>
          <p><strong><code>AC_FC_CHECK_HEADERS(include-file...)</code></strong></p>

          <p>Fortran analogue of <code>AC_CHECK_HEADERS</code>, though
            it only takes the first argument, giving the list of
            include files to check.  For each include file, defines
            <code>HAVE_</code><em>include-file</em> (in all capitals)
            if the include file is found.  Respects the current value
            of <code>FCFLAGS</code>.</p>

        </subsect>

        <subsect id="ac-fc-have-percentval" export="export">
          <subhead>
            <title>AC_FC_HAVE_PERCENTVAL</title>
          </subhead>
          <p><strong><code>AC_FC_HAVE_PERCENTVAL</code></strong></p>

          <p>Test whether the <code>FC</code> compiler has the
            <code>%VAL</code> extension.  If so, define the preprocessor
            variable <code>HAVE_PERCENTVAL</code> to be 1.  If the
            compiler has <code>%VAL</code>, it presumably has
            <code>%LOC</code> also.</p>
        </subsect>

        <subsect id="macro-ac-fc-open-specifiers" export="export">
          <subhead>
            <title>AC_FC_OPEN_SPECIFIERS</title>
          </subhead>

          <p><strong>AC_FC_OPEN_SPECIFIERS(specifier ...)</strong></p>

          <p>The Fortran OPEN statement is a rich source of
            portability problems, since there are numerous common
            extensions which consiste of extra specifiers, several of
            which are useful when they are available.  For each of the
            specifiers in the (whitespace-separated) argument list,
            define <code>HAVE_FC_OPEN_mungedspecifier</code> if the
            specifier may be given as argument to the OPEN statement.
            The <code>mungedspecifier</code> is the
            <code>specifier</code> converted to uppercase and with all
            characters outside <code>[a-zA-Z0-9_]</code> deleted.
            Note that this may include `specifiers' such as
            <code>access='append'</code> and
            <code>[access='sequential',recl=1]</code> (note quoting of
            comma) to check combinations of specifiers.  You may not
            include a space in the `specifier', even quoted.  Each
            argument must be a maximum of 65 characters in length (to
            abide by Fortran 77 line-length limits).</p>

          <p>See <ref id="fortran"/> for an example of using this
            preprocessor definition in a Fortran program.</p>

        </subsect>

        <subsect id="macro-ac-fc-recl-unit" export="export">
          <subhead>
            <title>AC_FC_RECL_UNIT</title>
          </subhead>

          <p><strong>AC_FC_RECL_UNIT</strong></p>

          <p>When opening a file for direct access, you must specify
            the record length with the <code>OPEN</code> specifier
            <code>RECL</code>; however in the case of unformatted
            direct access files, the <em>units</em> of this specifier
            are processor dependent, and may be words or bytes.  This
            macro determines the units and defines
            <code>FC_RECL_UNIT</code> to contain the number of bytes
            (1, 2, 4, 8, ...) in the processor's unit of measurement.</p>

          <p>Note that unformatted files are not themselves portable,
            and should only be used as either temporary files, or as
            data files which will be read by a program or library
            compiled with the same Fortran processor.  With this
            macro, however, you can read and write such files in a
            portable way.</p>
        </subsect>

        <subsect id="macro-ac-prog-fc" export="export">
          <subhead>
            <title>AC_PROG_FC</title>
          </subhead>

          <p><strong><code>AC_PROG_FC([COMPILERS...], [DIALECT])</code></strong></p>

          <p><code>[COMPILERS...]</code> is a list of specific
            compilers you want it to try, so you could give it
            <code>[f77 g77]</code> as an argument.  That's useful if you
            have rather specific demands or need to more-or-less
            customize this.</p>

          <p>More useful is the <code>DIALECT</code>, which can
            be 77, 90, 95 or 2000.  Thus if you give this as
            <code>AC_PROG_FC([], 77)</code> or
            <code>AC_PROG_FC([], 1977)</code> then this will
            search only its internal list of Fortran 77 compilers
            (which happens to be [g77 f77 xlf frt pgf77 fort77
            fl32 af77] currently).</p>
        </subsect>

        <subsect id="macro-ac-prog-fpp" export="export">
          <subhead>
            <title>AC_PROG_FPP</title>
          </subhead>

          <p><strong><code>AC_PROG_FPP(required-features, [FPP-SRC-EXT=fpp])</code></strong></p>

          <p><code>required-features</code> is a space-separated
            list of features that the Fortran preprocessor must
            have for the code to compile.  It is up to the package
            maintainer to properly set these requirements. </p>

          <p><code>FPP-SRC-EXT</code> is an optional specification
            of the file extension for preprocessable Fortran
            source files (without a leading dot).  It defaults to
            <code>fpp</code>: <code>.fpp</code> is better than
            <code>.F</code> in general, since <code>.F</code> and
            <code>.f</code> are indistinguishable on
            case-insensitive filesystems (such as HFS+ on MacOS
            X).</p>

          <p>The macro works out if the Fortran compiler discovered by
            macro <code>AC_PROG_FC</code> has the requested set of
            features.  If so, it arranges for the compilation to be done
            `directly'; if not, it arranges for `indirect' compilation,
            where the preprocessable Fortran code is converted to pure
            Fortran code and only subsequently passed to the Fortran
            compiler.</p>

          <p>The configure variables which this macro sets, and which
            are available for substitution, are as follows.
            <dl>
              <dt><code>FPP</code></dt>
              <dd>
                <p>The Fortran preprocessor which the macro decides is
                suitable.</p>
              </dd>

              <dt><code>FPPFLAGS</code></dt>
              <dd>
                <p>The flags which will be given to the compiler (in
                  direct mode) or preprocessor (in indirect mode).</p>
              </dd>

              <dt><code>FPP_SRC_EXT</code></dt>
              <dd><p>This is the file extension (without a dot) of
                  preprocessable Fortran files; by default this is
                  `fpp', but `F' is also common.</p></dd>

              <dt><code>FPP_COMPILE_EXT</code></dt>
              <dd><p>This contains the file extension which the
                  Fortran compiler will accept.  It is the same as
                  <code>FPP_SRC_EXT</code> if the compiler itself can
                  do preprocessing (`direct' compilation), or a dummy
                  value (not .f, since that would conflict with the
                  pre-existing rule for compiling Fortran) if it
                  cannot, and the file must be preprocessed separately
                  (`indirect').</p></dd>

              <dt><code>FPP_PREPROCESS_EXT</code></dt>
              <dd><p>The partner of FPP_COMPILE_EXT.  This is
                  <code>FPP_SRC_EXT</code> for indirect compilation,
                  or a dummy value for direct compilation, when the
                  corresponding separate-processing generated rule
                  should be ignored.</p></dd>

              <dt><code>FPP_MAKE_FLAGS</code></dt>
              <dd><p>This is used
                  to pass flags to the <code>cpp</code> or
                  <code>fpp</code> command if we compile directly, and
                  leave them out otherwise.</p></dd>

              <dt><code>FPP_OUTPUT</code></dt>
              <dd><p>This is used to redirect FPP output to the .f
                  file in those cases where FPP writes to stdout rather
                  than to a file: it is either blank or something like
                  <code>&gt;$@</code></p></dd>
            </dl>
            You do not generally need to know or care about the above
            variables, since if you have any preprocessable source
            files in your source set, then automake will insert
            appropriate build rules in the generated
            <code>Makefile.in</code> on your behalf.  If, however, you
            need to run the preprocessor `by hand' for some reason
            (perhaps because you are using the preprocessor to do
            something other than compiling <code>.fpp</code> to
            <code>.o</code>, so that the <code>.fpp</code> file is not
            being mentioned in a <code>_SOURCES</code> primary),
            then a suitable stanza in a <code>Makefile.am</code>
            or <code>Makefile.in</code> would be:
<verbatim>
file.f: file.$(FPP_SRC_EXT)
        $(FPP) $(FPPFLAGS) $(CPPFLAGS) file.$(FPP_SRC_EXT) $(FPP_OUTPUT)
</verbatim>
            where we have ensured that the input file has the
            extension <code>$(FPP_SRC_EXT)</code>.  You can
            add extra options such as <code>-I.</code> if necessary
            (automake puts these in the variable
            <code>$(DEFAULT_INCLUDES)</code>).
          </p>

          <p><strong>NOTE</strong>: There are some features of this
            macro support which are arguably bad autoconf style, and it
            is <em>very</em> likely that this macro will change.  The
            documentation below is only for completeness, and you are
            advised not to pay any attention to it.  See <ref
              id="developments"/>.</p>

          <p>Supported features are:
            <dl>
              <dt>include</dt>
              <dd><p>the preprocessor must correctly process
                  <code>#include</code> directives and
                  <code>-I</code> options</p></dd>

              <dt>define</dt>
              <dd><p>correctly process <code>-D</code> options</p></dd>

              <dt>substitute</dt>
              <dd><p>substitute macros in Fortran code 
                  (some preprocessors touch only lines starting with #)</p>
              </dd>

              <dt>wrap</dt>
              <dd><p>wrap lines that become too long through macro
                  substitution.  <code>fpp</code> is probably the
                  only preprocessor that does this.</p></dd>

              <dt>cstyle</dt>
              <dd><p>Do not suppress C style comments (the
                  <code>-C</code> option in cpp)</p>
              </dd>

              <dt>CSTYLE</dt>
              <dd><p><em>Do</em> suppress C style comments
                  (e.g. code contains C-style comments, and
                  compiler may not know how to handle them)</p>
              </dd>
            </dl></p>

          <p>Features can be abbreviated: i, in, inc etc. are
            equivalent to include. Features can be deselected
            (feature not needed) by prepending "no",  e.g. nodef
            (=nodefine), now (=nowrap).</p>

          <p>Default for the feature list is 
            [include define substitute nowrap nocstyle noCSTYLE]</p>

          <p>Feature requirements corresponding to the defaults may be
            omitted</p>

          <p>Note that "wrap" implies "substitute", and CSTYLE and
            cstyle cannot be requested at the same time. The macro
            adjusts this automatically. </p>

        </subsect>

        <subsect id='macro-check-progs' export='export'>
          <subhead>
            <title>STAR_CHECK_PROGS</title>
          </subhead>

          <p><strong><code>STAR_CHECK_PROGS(progs-to-check-for, [package=''])</code></strong></p>

          <p><strong>Note: The functionality of this macro is very likely to change.</strong></p>

          <p>For each of the programs in
            <code>PROGS-TO-CHECK-FOR</code>, define a variable whose
            name is the upcased version of the program name, and whose
            value is the full path to that program, or the expected
            installation location of that program if no absolute path
            can be found.  Because of this default behaviour, this
            macro should _only_ be used for locating Starlink programs
            such as messgen or alink, and not as a general replacement
            for <code>AC_CHECK_PROG</code>.  Any characters in the
            program outside of the set of alphanumerics and
            underscores are normalised to underscores.</p>

          <p>The optional second argument gives the name of the
            package containing the program in question.  Some packages
            install their binaries in package-specific directories, and
            this argument allows this macro to look there as well.</p>

          <p>For example: <code>STAR_CHECK_PROGS(messgen)</code>
            would define the variable <code>MESSGEN</code> to have the
            full path to the messgen application.</p>

          <p>Calls AC_SUBST and AC_ARG_VAR on the generated variable
            name.</p>

          <p>This is the analogue of <code>AC_CHECK_PROG</code>,
            except that: (1) the variable name defaults to the program
            name, (2) if the program is not found, the variable value
            is the program's name without any path at all.</p>

          <p>The current value of the <code>PATH</code> variable is
            augmented by the location of the binary installation
            directory, using the current default value of the prefix
            (not ideal, since this may in principle change when the
            component being configured is installed, but it's the best
            we can do at configure time); and by the
            <code>$STARLINK/bin</code> directory.</p>

        </subsect>

        <subsect id='macro-cnf-compatible-symbols' export='export'>
          <subhead>
            <title>STAR_CNF_COMPATIBLE_SYMBOLS</title>
          </subhead>

          <p><strong><code>STAR_CNF_COMPATIBLE_SYMBOLS</code></strong></p>

          <p>Work out what is required to have the Fortran compiler
            produce library symbols which are compatible with those
            expected by the CNF package.  If you are building a
            library which includes Fortran code, then you should call
            this macro, which possibly adjusts the
            <code>FCFLAGS</code> variable.</p>

          <p>At present, all this macro has to do is simply work out
            whether it needs to stop g77 adding a second underscore to
            generated symbol names (it adds a single underscore to
            most Fortran symbols, but by default adds two when the
            symbol name already contains an underscore); the other
            Fortran compilers we use don't need any extra options, as
            it happens.  However this could potentially be much more
            complicated.  The autoconf <code>AC_F77_WRAPPERS</code>
            macro detects more possibilities, but probably not a
            completely exhaustive set.  In future it might be
            necessary to extend the CNF macros, by somehow merging the
            results of <code>AC_F77_WRAPPERS</code> into it, and at
            that point it might be necessary to extend this macro.</p>

          <p>This macro is designed to work with CNF, however it
            does <em>not</em> require the <code>cnf.h</code> headers
            to be installed, because it should remain callable at
            configuration time before <em>anything</em> has been
            installed.  Instead we fake the functionality of the
            definition <code>F77_EXTERNAL_NAME</code> in
            <code>cnf.h</code>, which appends an underscore (just one)
            to the end of C symbols.</p>

        </subsect>

        <subsect id='macro-declare-dependencies' export='export'>
          <subhead>
            <title>STAR_DECLARE_DEPENDENCIES</title>
          </subhead>

          <p><strong><code>STAR_DECLARE_DEPENDENCIES(type, deplist, [option=''])</code></strong></p>

          <p>Declare dependencies of this component.  The
            <code>TYPE</code> is one of `sourceset', `build', `link',
            `use' or `test', and the <code>DEPLIST</code> is a space
            separated list of component names, which this component
            depends on in the given way.
            <ul>
              <li><p>Sourceset dependencies are those components
                  which must be installed in order to build the complete
                  set of sources, either for building or for
                  distribution.  This includes documentation, so it
                  would include star2html as well as messgen.</p>
              </li>

              <li>
                <p>Build dependencies are those which are required
                  in order to build this component.  This typically
                  means include files, but if part of the component is
                  an executable file (such as <code>compifl</code>
                  within the <code>parsecon</code> component), then
                  that's a build dependence also (but see the
                  discussion of `option', below).  You may not have
                  two components which have a build dependency on each
                  other, since that would mean that each would have to
                  be built before the other, which is impossible.</p>
              </li>

              <li>
                <p>Link dependencies are those required to link
                  against the libraries in a component.  That means
                  all the libraries that this component's libraries
                  use.  These are not necessarily build dependencies,
                  since if you are building a library <em>X</em>,
                  which uses functions in library <em>Y</em>, the
                  library <em>Y</em> does not have to be present in
                  order to <em>build</em> library <em>X</em>, only
                  when you subsequently want to actually link against
                  it.  Thus you can have two components which have 
                  mutual link dependencies.  If you are building an
                  application, however, all its link dependencies
                  will actually be build dependencies and should be
                  declared as such.  In other words, the distinction
                  between build and link dependencies is important
                  only for library components.</p>
              </li>

              <li>
                <p>Use dependencies are those which are required in
                  order for the component to be used by something
                  else, after it has been built and installed.  For
                  example a library which called another application
                  as part of its functionality would have only a use
                  dependency on the component which contained that
                  application.  If no use dependencies are declared,
                  we take the use dependencies to be the same as the
                  link dependencies.</p>
              </li>

             <li>
                <p>Test dependencies are those which are required in
                  order to run any regression tests which come with
                  the component.  It's generally a good idea to avoid
                  making this a larger set than the use dependencies,
                  but sometimes this is unavoidable.  If no test
                  dependencies are declared, we take the test
                  dependencies to be the same as the use
                  dependencies.  Note that the system does not
                  currently make any use of this information.</p>
              </li>
            </ul>
          </p>

          <p>The point of this is that different dependencies are
            required at different times.  The set of dependencies in
            the master makefile is composed of all the `sourceset' and
            `build' dependencies, but not `link' or `use'
            dependencies, and since the core Starlink libraries are
            closely interdependent, the set of `build' dependencies
            needs to be kept as small as possible in order to avoid
            circularities (that is, A depending on B, which depends,
            possibly indirectly, on A).</p>

          <p>All these relationships are transitive: if A has a
            build dependency on B, and B has one on C, then A has a
            build dependency on C.  You can augment this by using the
            final `option' argument: if, in component A's declaration
            element, you say <code>STAR_DECLARE_DEPENDENCIES(build, B,
              link)</code>, then you declare that A has a build-time
            dependency on B, but that (presumably because you are
            building an application within a component which is mostly
            libraries) you need to link against B, so component A has
            a dependency on all of B's <em>link</em> dependencies, not just
            its build dependencies.  This is (I believe) the only case
            where this `option' attribute is useful, though it is
            legal for each of the dependency types.</p>

          <p>You need only declare direct dependencies.  If package
            A depends on package B, which depends in turn on package
            C, then package A need not declare a dependency on C.</p>

          <p>The macro may be called more than once.  The results of
            this macro are expressed in the file
            <code>component.xml</code> in the component directory.</p>
        </subsect>


        <subsect id='macro-defaults' export='export'>
          <subhead>
            <title>STAR_DEFAULTS</title>
          </subhead>

          <p><strong><code>STAR_DEFAULTS([options=''])</code></strong></p>

          <p>Sets up the defaults for Starlink
            <code>configure.ac</code> files.  The optional
            <code>OPTIONS</code> argument holds a space-separated list
            of option keywords, of which the only one defined at
            present is `per-package-dirs', which causes applications
            and help to be installed in a package-specific
            directory (see <ref id="developments"/>).
          </p>

          <p>As part of its initialisation, this macro does the following:
            <ul>
              <li>
                <p>Makes sure that the variable <code>STARLINK</code>
                  is defined, so that you can use it elsewhere in your
                  <code>configure.ac</code> file.  The value of this
                  variable depends on the
                  <code>STARCONF_DEFAULT_STARLINK</code> 
                  variable which is defined by the
                  <code>./starconf.status</code> script (see <ref
                    id="starconf"/>), and can be
                  overridden by a setting of <code>STARLINK</code> in
                  the environment, though you are discouraged from
                  doing that.</p>
              </li>
              <li>
                <p>Sets appropriate values for variables
                  <code>FCFLAGS</code>, <code>FFLAGS</code>,
                  <code>CFLAGS</code> and <code>LDFLAGS</code>.</p>
              </li>
              <li>
                <p>Defines and substitutes variables
                  <code>PACKAGE_VERSION_MAJOR</code>,
                  <code>..._MINOR</code>, <code>..._RELEASE</code> and
                  <code>..._INTEGER</code>.  These are respectively
                  the major, minor and release numbers extracted from
                  <code>PACKAGE_VERSION</code>, and an integer
                  representation of these consisting of <code>major *
                  1000000 + minor * 1000 + release</code>.</p>
              </li>
            </ul>
          </p>

          <p>This macro also sets the <code>prefix</code> shell
            variable to its default value.  Standard autoconf
            <code>./configure</code> scripts also do this, but at a
            slightly later stage, which prevents the variable being
            used safely within <code>configure.ac</code> scripts.
            This is useful if you have to configure a thirdparty
            package in a subdirectory, by calling its
            <code>./configure</code> script with a suitable
            <code>--prefix</code> option.</p>

        </subsect>

        <subsect id='macro-doc-files' export='export'>
          <subhead>
            <title>STAR_DOC_FILES and the stardocs prefix</title>
          </subhead>

          <p><strong><code>STAR_DOC_FILES(docfiles)</code></strong></p>

          <p><strong><code>stardocs_DATA</code></strong></p>

          <p>Declare a list of files to be installed into the
            Starlink documentation directory.  This can be used both
            internally and in user <code>configure.ac</code>
            files.</p>

          <p>You can achieve the same effect by giving the list of
            files as the value of <code>stardocs_DATA</code> in
            Makefile.am, if that is more appropriate.</p>
        </subsect>

        <subsect id='macro-etc-files' export='export'>
          <subhead>
            <title>STAR_ETC_FILES and the staretc prefix</title>
          </subhead>

          <p><strong><code>STAR_ETC_FILES(etcfiles)</code></strong></p>

          <p><strong><code>staretc_DATA</code></strong></p>

          <p>Declare a list of files to be installed into the
            Starlink <code>etc</code> directory.  This can be used
            both internally and in user <code>configure.ac</code>
            files.</p>

          <p>You can achieve the same effect by giving the list of
            files as the value of <code>staretc_DATA</code> in
            Makefile.am, if that is more appropriate.</p>
        </subsect>

        <subsect id="macro-fc-library-ldflags" export="export">
          <subhead>
            <title>STAR_FC_LIBRARY_LDFLAGS</title>
          </subhead>

          <p><strong><code>STAR_FC_LIBRARY_LDFLAGS</code></strong></p>

          <p>This is a wrapper for AC_FC_LIBRARY_LDFLAGS, which adds
            any platform-specific magic required.</p>

          <p>The only place where this does anything different at
            present is on OSX 10.3.  There's a library problem using
            gcc under OSX 10.3 (10.3.4 Panther = Darwin 7.4.0), which
            results in the symbols restFP and saveFP being undefined
            at link time.  There's a shortage of authoritative
            explanations, but
            <webref url="http://www.ccp4.ac.uk/problems/mac_4_2.html#29"/>
            gives at least one resolution.  It's not clear (to Norman)
            what the real cause of this is, but it apparently doesn't
            affect OSX versions before 10.3, and will presumably be
            fixed in versions soon after this.  The following isn't
            terribly pretty, and will need maintainance.
          </p>
        </subsect>

        <subsect id='macro-have-fc-open-readonly' export='export'>
          <subhead>
            <title>STAR_HAVE_FC_OPEN_READONLY</title>
          </subhead>

          <p><strong><code>STAR_HAVE_FC_OPEN_READONLY</code></strong></p>

          <p>Obsolete -- use <ref id="macro-ac-fc-open-specifiers"
              ><code>AC_FC_OPEN_SPECIFIERS</code></ref> instead</p>

        </subsect>

        <subsect id='macro-help-files' export='export'>
          <subhead>
            <title>STAR_HELP_FILES and the starhelp prefix</title>
          </subhead>

          <p><strong><code>STAR_HELP_FILES(helpfiles)</code></strong></p>

          <p><strong><code>starhelp_DATA</code></strong></p>

          <p>Declare a list of files to be installed into the
            Starlink <code>help</code> directory.  This can be used
            both internally and in user <code>configure.ac</code>
            files.</p>

          <p>You can achieve the same effect by giving the list of
            files as the value of <code>starhelp_DATA</code> in
            Makefile.am, if that is more appropriate.</p>
        </subsect>

        <subsect id='macro-latex-documentation' export='export'>
          <subhead>
            <title>STAR_LATEX_DOCUMENTATION</title>
          </subhead>

          <p><strong><code>STAR_LATEX_DOCUMENTATION(documentcode, [targets=''])</code></strong></p>

          <p>Generate the standard makefile targets to handle
            &latex; documentation source.  The parameter documentcode
            should be something like `sun123' -- it should not include
            any .tex extension.</p>

          <p>The second, optional, argument gives an explicit list
            of the targets which are build.  If this is <em>not</em>
            specified, then a standard list is used
            (<code>.tex</code>, <code>.ps</code> and
            <code>.tar_htx</code>) and corresponding rules added to
            the generated makefile.  If it is specified, it must be
            non-null, and its value is a list of files which are to be
            added to the distribution, and no extra Makefile rules are
            added.  Thus if users need anything complicated done, they
            should use this second argument and provide rules for
            satisfying the given targets.</p>

          <p>In the latter case, the <code>.tex -> htx_tar</code>
            rule is still emitted, so you can use it, but it requires
            the substitution variable @STAR2HTML@, and so if you _do_
            use it, you will have to make that available, either
            through <code>STAR_CHECK_PROGS(star2html)</code> or
            otherwise (see <ref id="macro-check-progs"/>).</p>

        </subsect>

        <subsect id="variable-manifest-dir" export="export">
          <subhead>
            <title>Variable STAR_MANIFEST_DIR</title>
          </subhead>

          <p>The <code>STAR_MANIFEST_DIR</code> substitution variable
            is slightly special.  If it is defined in your
            <code>configure.ac</code> file, then Starlink automake
            will include in the generated <code>Makefile.in</code>
            code to create and install a manifest of all the files
            installed.</p>

          <p>You define it as follows:
<verbatim>
: ${STAR_MANIFEST_DIR='$(prefix)/manifests'}
AC_SUBST(STAR_MANIFEST_DIR)
</verbatim>
            This sets the variable to be
            <code>$(prefix)/manifests</code>, but allows it to be
            overridden by a setting of the variable in the
            environment.  Note that is is set to be relative to the
            value of the <code>$(prefix)</code> makefile variable.</p>

          <p>You do <em>not</em> have to set this in general, as this
            is one of the things that the <code>STAR_DEFAULTS</code>
            macro (<ref id="macro-defaults"/>) takes care of.  The
            only time you need to use this feature is when you are
            importing a third-party code set into the tree (as
            described in <ref id="importing-thirdparty"/>).  In that
            case, you do not want to specify <code>STAR_DEFAULTS</code> in the
            <code>configure.ac</code>, but you do need to install a
            manifest.</p>

          <p>See also <ref id="variable-special-install-command"/>.</p>
        </subsect>

        <subsect id="variable-special-install-command"
            export="export">
          <subhead>
            <title>Makefile.am variable STAR_SPECIAL_INSTALL_COMMAND</title>
          </subhead>

          <p>Third-party sources will not come with a
            <code>make install</code> target which installs a manifest.  It is
            reasonably easy to add such support, however, as
            described in <ref id="config-tclsys"/>.  The crucial
            feature is the installation command declared in
            <code>STAR_SPECIAL_INSTALL_COMMAND</code>.  If this
            variable is present in a <code>Makefile.am</code> file,
            then Starlink automake will generate an
            <code>install</code> target which uses this command to do
            the installation, in such a way that a manifest file can
            be generated automatically.  For this to work, the command
            must have the following features:
            <ol>
              <li>
                <p>It must include the string <code>$(MAKE)</code> (as
                opposed to plain `<code>make</code>'), as part of some
                <code>$(MAKE) ... install</code> command.</p>
              </li>
              <li>
                <p>It must be prepared to install its files in a
                  location which is prefixed by the value of the
                  environment variable <code>$DESTDIR</code>.  Recent
                  versions of automake generate support for this
                  variable automatically, older versions appear to
                  have had the same functionality, but used a variable
                  <code>$INSTALL_ROOT</code> for it.</p>
              </li>
            </ol>
            The example shown in <ref id="config-tclsys"/> shows a use
            of this variable which satisfies these constraints.</p>

          <p>The command may be as complicated as you like, but must
            be on a single line, possibly continued over several lines
            of the <code>Makefile.am</code> file by escaping the
            end-of-line characters.</p>

          <p>The generated Makefile rule requires that the makefile
            variables <code>$(PACKAGE_NAME)</code> and
            <code>$(PACKAGE_VERSION)</code> be set.</p>

          <p>See <ref id="importing-thirdparty"/> for general
            discussion of importing third-party sources.</p>
        </subsect>

        <subsect id='macro-messgen' export='export'>
          <subhead>
            <title>STAR_MESSGEN</title>
          </subhead>

          <p><strong><code>STAR_MESSGEN(msgfile-list)</code></strong></p>

          <p>Handle generating message, error, and facility files.</p>

          <p>The argument is a space-separated list of files, each
            of which has a set of message declarations in it, in the
            format prescribed by the messgen utility.  There is no
            default, though the usual name for this file is
            <code>${PACKAGE}_err.msg</code>.  The macro may be called
            more than once if you have more than one <code>.msg</code>
            file in the directory.</p>

          <p>This causes automake to add makefile rules to create
            the appropriate <code>_err</code>, <code>_ERR</code>,
            <code>_err.h</code> and <code>fac_nnn_err</code> files,
            and handles installing the latter file to the help
            directory, and including it in the distribution.</p>

          <p>The files which this generates should be declared as
            sources in the Makefile.am if they are to be used in code,
            or are to be installed.  If they are used in building the
            package, you will probably need to declare them
            additionally as <code>BUILT_SOURCES</code>.  The package
            also implicitly declares a `sourceset' dependency on the
            messgen package (see <ref
              id="macro-declare-dependencies"/>).</p>

          <p>This macro also declares that the .msg files are
            pre-distribution files (it calls <ref
              id="macro-predist-sources"
              ><code>STAR_PREDIST_SOURECS</code></ref>) on them, and so
            the resulting configure script should expect not to find
            them in an unpacked distribution.</p>
          
          <p>This macro leaves the discovered facility code in the
            shell variable <code>star_facilitycode</code> (this
            corresponds to the last message file, if there is more
            than one), from where it may be scavenged by the calling
            configure script.  No component should <em>need</em> to
            use this number -- it is present for historical reasons,
            and is potentially useful if a component needs an integer
            which is guaranteed unique to that component.</p>

        </subsect>

        <subsect id='macro-monoliths' export='export'>
          <subhead>
            <title>STAR_MONOLITHS</title>
          </subhead>
          <p><strong><code>STAR_MONOLITHS</code></strong></p>

          <p>Declare that we will be creating monoliths.  This is
            conceptually similar to the various
            <code>AC_PROG_FC</code> declarations, and does
            whatever configuration is necessary to handle these.</p>

          <p>Note that the declarations done in the
            <code>Makefile.am</code>, declaring the name of the
            monolith and the names and source files of the tasks, are
            slightly redundant inasmuch as some of that information
            could be implied.  However, this is required to be
            explicit for clarity and consistency, and so accomodate
            the (currently unexploited) possibility that the tasks and
            <code>.ifl</code> files longer have the one-task-per-file
            relationship they have now.</p>

          <p>See <ref id="monoliths"/> for discussion.</p>

        </subsect>

        <subsect id="path-tcltk" export="export">
          <subhead>
            <title>STAR_PATH_TCLTK</title>
          </subhead>

          <p><strong><code>STAR_PATH_TCLTK([minversion=0])</code></strong></p>

          <p>Finds a tclsh and wish, and the associated libraries.
            Sets substitution variable <code>TCL_CFLAGS</code> to the
            C compiler flags necessary to compile with Tcl,
            <code>TCL_LIBS</code> to the required library flags, and
            variables <code>TCLSH</code> and <code>WISH</code> to the
            full path of the matching <code>tclsh</code> and
            <code>wish</code> executables.  Define the cpp variable
            <code>TCL_MISSING</code> to 1 if Tcl is not available.</p>

          <p>If argument minversion is present, it specifies the
            minimum Tcl/Tk version number required.  The macro
            searches first in the path, and then in a selection of
            platform-specific standard locations.  The configure
            option <code>--with-tcl</code> allows you to provide a
            path to a tclsh binary, which is put at the head of the
            list of locations to search.</p>

          <p>This is intended to be similar to macro
            <code>AC_PATH_XTRA</code>.</p>

        </subsect>

        <subsect id='macro-platform-sources' export='export'>
          <subhead>
            <title>STAR_PLATFORM_SOURCES</title>
          </subhead>

          <p><strong><code>STAR_PLATFORM_SOURCES(target-file-list, platform-list)</code></strong></p>

          <p>Generate the given target-file for each of the files in
            the list <code>TARGET-FILE-LIST</code>, by selecting the
            appropriate element of the <code>PLATFORM-LIST</code>
            based on the value of <code>AC_CANONICAL_BUILD</code>.
            Both lists are space-separated lists.</p>

          <p>For each of the platforms, <code>&lt;p&gt;</code>, in
            platform-list, there should be a file
            <code>&lt;target-file&gt;&lt;p&gt;</code>.  There should
            always be a file <code>&lt;target-file&gt;default</code>,
            and if none of the platform-list strings matches, this is
            the file which is used.  If the `default' file is listed
            in the `platform-list', then it is matched in the normal
            run of things; if it is not listed, it still matches, but
            a warning is issued.</p>

          <p>If you wish no match <em>not</em> to be an error --
            perhaps because there is a platform-dependent file which
            is redundant on unlisted platforms -- then end the
            platform-list with <code>NONE</code>.  In this case, if no
            file matches, then no link is made, with no error or
            warning.</p>

          <p>This macro uses the results of ./config.guess to
            determine the current platform.  That returns a triple
            consisting of cpu-vendor-os, such as
            `<code>i686-pc-linux-gnu</code>' (OS=linux-gnu),
            `<code>sparc-sun-solaris2.9</code>', or
            `<code>alphaev6-dec-osf5.1</code>'.</p>

          <p>The extensions <code>&lt;p&gt;</code> in platform-list
            should all have the form `<code>cpu_vendor[_os]</code>',
            where each of the components `cpu', `vendor' and `os' may
            be blank.  If not blank, they are matched as a prefix of
            the corresponding part of the config.guess value.  Thus
            `<code>_sun_solaris</code>' would match
            `<code>sparc-sun-solaris2.9</code>' but not
            `<code>sparc-sun-sunos</code>', and `<code>_sun</code>'
            would match both.  For a <code>&lt;target-file&gt;</code>
            file foo.c, this would result in `code:ln -s foo.c_sun
            <code>foo.c</code>'.</p>

          <p>Calls <code>AC_LIBSOURCE</code> for each of the implied
            platform-specific files. </p>
        </subsect>

        <subsect id="macro-predist-sources" export="export">
          <subhead>
            <title>STAR_PREDIST_SOURCES</title>
          </subhead>
          <p><strong><code>STAR_PREDIST_SOURCES(source-files)</code></strong></p>

          <p>Give a (space-separated) list of files which should exist
            only in the pre-distribution (ie, repository checkout)
            state.  If one of these is found, then the substitution
            variable <code>PREDIST</code> is set to a blank rather
            than the comment character <code>#</code>.  This means
            that Makefile rules which are intended to work only in the
            pre-distribution state -- for example to generate
            distributed sources -- should appear in
            <code>Makefile.am</code> with each line prefixed by
            <code>@PREDIST@</code>.  After configuration, these rules
            will be enabled or disabled depending on the presence or
            absence of the marker files listed in this macro.</p>

          <p>We should find either all of the marker files or none of
            them; if some but not all are found, this is probably an
            error of some type, so warn about it.  This means, by the
            way, that it is the presence or absence of the first
            marker file which determines whether we are in the
            pre-distribution or post-distribution state, with the rest
            providing consistency checks.</p>

          <p>The macro may be called more than once.  Multiple calls
            are equivalent to a single call with all the marker files
            in the list.  Automake checks that the files listed here
            are not in the list of distributed files, and issues a
            warning if they are.</p>

          <p>For examples of use, see <ref id="autodistrib"/></p>

        </subsect>
      </sect>

      <sect id="gnutools" export="export">
        <subhead>
          <title>The relationship with the GNU autotools</title>
        </subhead>

        <p>The build system is based heavily on the GNU autotools,
          autoconf, automake and
          libtool.  Each of these is checked in to the CVS
          repository, and built and installed during the top-level
          <code>./bootstrap</code> process.</p>

        <p>The checked-in
          libtool is an unmodified libtool 1.5
          distribution.</p>

        <p>The Starlink autoconf is based on
          version 2.59, with additions to support preprocessable
          Fortran; these modifications have been submitted to the
          autoconf maintainers, so it is hoped that these
          will become part of the autoconf distribution, at
          which point the Starlink autoconf will revert to
          being an unmodified one.</p>

        <p>The additions are the macros which start <code>AC_...</code>
          described in <ref id="starconfmacros"/>.</p>

        <p>The Starlink automake is a more heavily modified
          version of automake version 1.8.2.  There are a few
          generic changes to support the added Fortran
          autoconf macros, but the majority of the changes
          are in the service of Starlink's specific requirements.  They
          are summarised here.
          <ul>
            <li>
              <p>Addition of the <code>MONOLITHS</code> and
                <code>TASKS</code> primaries: These function rather like
                the <code>PROGRAMS</code> primary, in that the the
                <code>MONOLITHS</code> primary specifies one or more
                monoliths to install, and the <code>TASKS</code> one or
                more IFL tasks to associate with it.  Like the
                <code>PROGRAMS</code> primary, each <code>MONOLITHS</code>
                variable should have a <code>xxx_SOURCES</code> variable
                associated with it.  Starlink <code>automake</code> also
                emits the makefile rules to compile <code>.ifl</code>
                files to <code>.ifc</code> files.</p>
            </li>

            <li>
              <p>Addition of the
                <code>stardocs</code>,
                <code>staretc</code>
                and
                <code>starhelp</code>
                prefixes to
                the <code>DATA</code> primary.  Setting these variables has
                the same effect as giving an argument to the
                <ref id='macro-doc-files' ><code>STAR_DOC_FILES</code></ref>,
                <ref id='macro-etc-files' ><code>STAR_ETC_FILES</code></ref>
                and
                <ref id='macro-help-files' ><code>STAR_HELP_FILES</code></ref>
                starconf macros</p>
            </li>

            <li>
              <p>Extra <code>LDADD</code> options: In standard
                <code>automake</code>, the content of the
                <code>LDADD</code> variables must be a list of extra
                objects to add to a program, or extra libraries,
                specified through <code>-l</code> and <code>-L</code>
                flags.  In Starlink <code>automake</code>, you can
                additionally specify extra libraries using the standard
                Starlink <code>*_link</code> and
                <code>*_link_adam</code> commands.  You can add to the
                <code>LDADD</code> variable tokens matching
                <code>`[a-z_]*_link`</code> or
                <code>`[a-z_]*_link_adam`</code> (that is, a sequence
                of lowercase letters and underscore), or either of
                these preceded by <em>exactly</em>
                <code>$(srcdir)/</code>, which you would need to do
                only in the case of test code or the case below.</p>

              <p>You cannot include any options or arguments.  If you
                want, for example, <code>ast_link -pgplot</code>, then
                you should create a local script named, for example,
                <code>my_ast_pgplot_link</code> (that is, matching the
                pattern above), which simply invokes the correct link
                script.  In this case, you will have to include the
                <code>$(srcdir)/</code> element in the line, so that
                the script will be picked up from the current
                directory.</p>
            </li>

            <li>
              <p>Starlink <code>automake</code> spots use of the
                <code>STAR_MESSGEN</code> and
                <code>STAR_LATEX_DOCUMENTATION</code> macros in the associated
                <code>configure.ac</code>, and produces
                appropriate extra build rules in the generated
                <code>Makefile.in</code>.  If the
                <code>STAR_MANIFEST_DIR</code> is to be substituted by
                autoconf, then Starlink automake adds support for
                installing manifests to the generated makefile.</p>
            </li>

            <li>
              <p>Default strictness: Starlink automake adds the
                <code>--startree</code> strictness level to the default
                <code>--foreign</code>, <code>--gnu</code> and
                <code>--gnits</code>.  At present, it
                is almost indistinguishable from <code>--foreign</code>, and
                is the default (the default for GNU automake is
                <code>--gnu</code> strictness -- see also <ref
                  id="developments"/>).</p>
            </li>

            <li>
              <p>All of the installation rules have been modified to recognise
                the presence of the <code>MANIFEST_FD</code> environment
                variable, and if it is present, to write the path to the
                installed file to the file descriptor named in the
                variable.  The modified <code>install</code>
                target manages this variable.  The makefile `install'
                target has been modified to create and install such
                manifests by default.</p>
            </li>

            <li>
              <p>The <code>missing</code> script which is installed as part of
                Starlink automake respects the
                <code>MISSING_SUPPRESS_RUN</code> environment variable.</p>
            </li>

            <li>
              <p>The package version is reported as
                <code>1.8.2-starlink</code> rather than plain
                1.8.2.</p>
            </li>
          </ul>
        </p>
      </sect>

      <sect id="developments" export="export">
        <subhead>
          <title>Possible future changes</title>
        </subhead>

        <p>The starconf system is still quite new, and there are
          certain features of it which might change in the light of
          experience.  These are summarised here, as a warning of
          what is not finalised, as reassurance if some of the
          documentation here seems out of date (in which case tell the
          document maintainer), and as a note of what aspects might
          need further discussion.
          <ul>
            <li>
              <p>The starconf application currently only generates two
                files -- you should not assume this will always be so.</p>
            </li>

            <li>
              <p>There is only one option to
                <code>STAR_DEFAULTS</code> -- the set will likely expand.</p>
            </li>

            <li>
              <p>The description of the tree-wide bootstrapping
                process in <ref id="bootstrapping"/> is likely to
                change as more of the Starlink legacy and new code is
                brought under this build system umbrella.  The
                interface to the `make world' build may well change
                (see <ref id="tool-state"/>).</p>
            </li>

            <li>
              <p>The default automake strictness is
                <code>--starlink</code>, which is currently almost
                identical to the standard automake
                <code>--foreign</code> strictness.  We may change
                this, and add other files.</p>
            </li>

            <li>
              <p>The <code>AC_PROG_FPP</code> macro described in <ref
                  id="gnutools"/> will <em>very</em> likely change its
              interface.</p>
            </li>
          </ul></p>

      </sect>
    </appendices>

  </docbody>
</ssn>

<!-- Local Variables: -->
<!-- outline-regexp: " *<\\(sub\\)*sect" -->
<!-- End: -->
