.!           Template RUNOFF file for an ADAM Environment Description
.!           --------------------------------------------------------
.!
.!  Replace n.m by the document number
.!     "    dd,mm,yyyy by the date
.!     "    *Author* by the document author(s)
.!     "    *Title* by the title
.!--------------------------------------------------------
.title AED/17.1
.set date 5,11,1987
.autoparagraph
.set paragraph 0,1,2
.layout 3,2
.page size 57,69
.flags substitute
.nofill
.keep
.justify
SCIENCE#AND#ENGINEERING#RESEARCH#COUNCIL AED/17.1
ROYAL#OBSERVATORY#EDINBURGH
and#UNIVERSITY#OF#EDINBURGH

ADAM#Project Issued#by
ADAM#Environment#Description#17.1

.right;B D Kelly       
.right;$$date

.fill
.repeat 70,"-"
.blank
.centre;The TASK library of routines for task control
.centre;---------------------------------------------
.!
.!now switch off overstrike, substitute, accept and uppercase flags
.!as we wish to use %, $, ^ and _ regularly
.no flags overstrike
.no flags substitute
.no flags accept
.no flags uppercase
.!
.blank 2

.hl 1 INTRODUCTION
This document describes the TASK library. This library is released with 
ADAM v1.3, but can be supplied on request to sites with earlier 
versions.

The TASK subroutines are designed to be used by Ctask writers for 
communicating with other ADAM tasks. They provide wrap-arounds for 
routines such as ADAM_SEND and ADAM_GETREPLYT, but add the function of 
forwarding output messages and parameter requests to the user interface. 
Routines are also provided to assist the building of the VALUE string, 
that is, the list of parameter values to be sent to a task.
.hl 1 BACKGROUND READING
A very simple overview of ADAM is provided by AON/5. An initial 
introduction to Atask writing is provided by AED/8. A fuller guide to 
Atask writing is in AED/12. Ctask writing is described in AED/11. 
Dtask writing is described in AED/1.
CDtask writing is described in AED/6.
Interface modules are described in AED/3.
The ADAM command language manual is in AON/1.
.hl 1 TASK CONTROL
These routines implement GET SET OBEY and CANCEL, and also provide a 
timed-out wait for an OBEY to complete. Use of these routines has the 
side-effect of making the Ctask recover more easily from the case where 
the task being controlled is killed and reloaded.

Here is a summary of these routines.
.literal

TASK_GET (TASK_NAME, NAME, OUTVAL, STATUS )
TASK_SET (TASK_NAME, NAME, INVAL, STATUS )
TASK_OBEY ( TASK_NAME, NAME, INVAL, OUTVAL, PATH, MESSID, STATUS )
TASK_CANCEL ( TASK_NAME, NAME, INVAL, OUTVAL, STATUS )
TASK_DONE ( TIMEOUT, PATH, MESSID, OUTVAL, STATUS )

.end literal
.hl 1 BUILDING PARAMETER VALUES
The VALUE string sent in a TASK_SET call may be a scalar value, or it 
may be an array of one or more dimensions. In the latter case, the 
syntax is, taking 2-D as an example
.literal

[[val,val,...],[val,val...]]

.end literal
The TASK_VALn<T> routines provide a mechanism for building a string with 
the correct syntax.

The VALUE string sent in a TASK_OBEY or TASK_CANCEL call may contain a 
list of parameter values. TASK_CNCAT concatenates a list of character
string values such as those generated by calls to TASK_VALn<T> into a
string with the correct syntax. 

The routines are
.literal

TASK_VAL0<T> ( VAL, STRING, STATUS )
TASK_VAL1<T> ( NVALS, VALS, STRING, STATUS )
TASK_VALN<T> ( NDIMS, DIMS, VALS, STRING, STATUS )
TASK_CNCAT ( NVALS, STRINGS, VALUE, STATUS )

.end literal
.hl1 EXAMPLE
The example consists of a Ctask and a Dtask. The Ctask assembles a 
parameter list and sends an OBEY to the Dtask. The Dtask gets the 
parameter values and outputs the values obtained using MSG_OUT.
For this to work, the Dtask has to use a call to DTASK_RPON to enable 
communications. This routine is available under ADAM v1.3 or on request.

.literal

INTERFACE DRIVER
ENDINTERFACE


*+  DRIVER - an example Ctask
      SUBROUTINE DRIVER ( STATUS )
*    Description :
*     Use the TASK library to send commands to a task. The task 
*     produces output using MSG_OUT which is automatically forwarded 
*     to the user interface while DRIVER is waiting for TASK_DONE to 
*     return.
*    Invocation :
*     CALL DRIVER ( STATUS )
*    Parameters :
*     STATUS=INTEGER
*    Method :
*     Use the TASK routines to create a list of command-line 
*     parameters consisting of a 2-D array followed by a string. 
*     Send the command to the task called TASKTEST, and wait for it 
*     to complete.
*    Deficiencies :
*     <description of any deficiencies>
*    Bugs :
*     <description of any "bugs" which have not been fixed>
*    Authors :
*     B.D.Kelly (REVAD::BDK)
*    History :
*     06.11.1987:  original (REVAD::BDK)
*    endhistory
*    Type Definitions :
      IMPLICIT NONE
*    Global constants :
      INCLUDE 'SAE_PAR'
      INCLUDE 'ADAMDEFNS'
      INCLUDE 'DTERRS'

*    Status :
      INTEGER STATUS

*    Local Constants :
      INTEGER INFINITE       ! infinite timeout
      PARAMETER ( INFINITE = -1 )
      INTEGER NDIMS          ! number of dimensions in RVALS
      PARAMETER ( NDIMS = 2 )
*    Local variables :
      REAL RVALS(2,2)        ! array to be sent
      CHARACTER*10 CVAL      ! string to be sent
      CHARACTER*80 CARRAY(2) ! work strings
      CHARACTER*200 INVAL    ! command-line parameter string
      CHARACTER*200 OUTVAL   ! returned string
      INTEGER DIMS(NDIMS)    ! dimensions of RVALS
      INTEGER PATH           ! path to task
      INTEGER MESSID         ! message id for obey
      CHARACTER*15 TASK_NAME ! name of task
      CHARACTER*15 NAME      ! name of action
*-

      IF ( STATUS .NE. SAI__OK ) RETURN

*
*   The command-line parameters to TASKTEST consist of a 2-D array 
*   followed by a character string
*
      RVALS(1,1) = 1.0
      RVALS(2,1) = 1.1
      RVALS(1,2) = 1.2
      RVALS(2,2) = 1.3
      CVAL = '''HI THERE'''      ! quotes needed because of 
                                 ! embedded space
*
*   Convert the array to characters and concatenate into the first 
*   element of the work array.
*
      DIMS(1) = 2
      DIMS(2) = 2
      CALL TASK_VALNR ( NDIMS, DIMS, RVALS, CARRAY(1), STATUS )
*
*   Put the string parameter into the next element of the work array 
*   and build the parameter list.
*
      CARRAY(2) = CVAL
      CALL TASK_CNCAT ( 2, CARRAY, INVAL, STATUS )
      CALL MSG_OUT ( ' ', 'command string is', STATUS )
      CALL MSG_OUT ( ' ', INVAL, STATUS )
*
*   Send a command to the task
*
      TASK_NAME = 'TASKTEST'
      NAME = 'TEST'
      CALL TASK_OBEY ( TASK_NAME, NAME, INVAL, OUTVAL, PATH, MESSID, 
     :  STATUS )
      IF ( STATUS .EQ. DTASK__ACTSTART ) STATUS = SAI__OK
*
*   Wait for final acknowledgement with infinite timeout
*
      CALL TASK_DONE ( INFINITE, PATH, MESSID, OUTVAL, STATUS )
*
*   Check completion condition or OBEY failure
*
      IF ( STATUS .EQ. DTASK__ACTCOMPLETE ) THEN
         STATUS = SAI__OK
      ELSE
         CALL ERR_OUT ( ' ', '^STATUS', STATUS )
         CALL MSG_OUT ( ' ', OUTVAL, STATUS )
      ENDIF

      END



INTERFACE TASKTEST

   PARAMETER ARRAY
      TYPE '_REAL'
   ENDPARAMETER
   PARAMETER STRING
      TYPE '_CHAR'
   ENDPARAMETER

   ACTION TEST
      OBEY 
         NEEDS ARRAY
         NEEDS STRING
      ENDOBEY
   ENDACTION

ENDINTERFACE


      SUBROUTINE DEVINIT ( STATUS ) 
      INTEGER STATUS
      END 

*+  ACT - Top routine for TASKTEST Dtask
      SUBROUTINE ACT ( CONTEXT, NAME, SEQ, VALUE, RETVAL, STATUS ) 
*    Description : 
*    Invocation : 
*    Parameters : 
*     CONTEXT=INTEGER (given)
*           OBEY or CANCEL 
*     NAME=CHARACTER*(*) (given)
*           name of action 
*     SEQ=INTEGER (given)
*           0 on first entry, incremented subsequently 
*     VALUE=CHARACTER*(*) (given and returned)
*           character string value 
*     RETVAL=INTEGER (returned)
*           allows return value whose meaning depends on status 
*     STATUS=INTEGER (given and returned)
*    Method :
*     The expected action name is TEST.
*     This has two parameters, an (2,2) real array and a character 
*     string. Get the parameters and report their values using 
*     MSG_OUT.
*     To enable MSG_OUT to work, enable communications back to the 
*     process which issued the OBEY message using DTASK_RPON.
*    Deficiencies :
*     <description of any deficiencies>
*    Bugs :
*     <description of any "bugs" which have not been fixed>
*    Authors :
*     B.D.Kelly (REVAD::BDK)
*    History :
*     06.11.1987:  original (REVAD::BDK)
*    endhistory
*    Type Definitions : 
      IMPLICIT NONE 
*    Global constants : 
      INCLUDE 'ADAMDEFNS' 
      INCLUDE 'ADAMERRS' 
      INCLUDE 'DTDEFNS' 
      INCLUDE 'DTERRS' 
*    Import : 
      INTEGER CONTEXT       !  ( OBEY or CANCEL ) 
      CHARACTER NAME*(*)    !  name of action 
      INTEGER SEQ           !  0 on first entry, 
                            !  incremented subsequently 
*    Import-Export : 
      CHARACTER VALUE*(*)   !  character string value 
*    Export : 
      INTEGER RETVAL        !  allows return value whose meaning 
                            !  depends on status 
*    Status : 
      INTEGER STATUS 

*    Local Constants :
      INTEGER NDIM                ! no of dimensions of VALUES
      PARAMETER ( NDIM = 2 )
*    Local variables :
      INTEGER MAXD(NDIM)          ! dimensions of VALUES
      REAL VALUES(2,2)            ! value of array parameter
      INTEGER ACTD(NDIM)          ! dimensions received
      CHARACTER*30 STRING         ! value of string parameter
      CHARACTER*30 OUTSTR         ! output string
      INTEGER I                   ! loop counter
      INTEGER J                   ! loop counter
*-

      IF ( STATUS .NE. ADAM__OK ) RETURN 

*
*   Enable communications
*
      CALL DTASK_RPON ( NAME, STATUS )

      IF ( CONTEXT .EQ. OBEY ) THEN

         IF ( NAME .EQ. 'TEST' ) THEN

            MAXD(1) = 2
            MAXD(2) = 2
            CALL PAR_GETNR ( 'ARRAY', NDIM, MAXD, VALUES, ACTD, 
     :        STATUS )
            CALL PAR_GET0C ( 'STRING', STRING, STATUS )

            DO J = 1, ACTD(2)
               DO I = 1, ACTD(1)
                  WRITE ( OUTSTR, 
     :              '( ''I = '', I2, '' J = '', I2, F10.2 )' ) 
     :              I, J, VALUES(I,J)
                  CALL MSG_OUT ( ' ', OUTSTR, STATUS )
               ENDDO
            ENDDO

            CALL MSG_OUT ( ' ', STRING, STATUS )
            IF ( STATUS .EQ. ADAM__OK ) STATUS = ACT__END

         ELSE
            STATUS = ACT__UNIMP
         ENDIF

      ELSE IF ( CONTEXT .EQ. CANCEL ) THEN 

         STATUS = ACT__CANCEL 

      ENDIF 

*
*   Disable communications
*
      CALL DTASK_RPOFF ( STATUS )

      END 
.end literal

.page
.hl 1 CALL ARGUMENTS FOR THE TASK ROUTINES
.page
.literal
+-------------------------------------------------------------------+
|  TASK_CANCEL  |  request a task to cancel an action               |
+-------------------------------------------------------------------+
|                                                                   |
|  Request the named task to cancel the named action.               |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_CANCEL ( TASK_NAME, NAME, INVAL, OUTVAL, STATUS )      |
|                                                                   |
|                                                                   |
|  TASK_NAME=CHARACTER*(*) (given)                                  |
|        the name of the task                                       |
|                                                                   |
|  NAME=CHARACTER*(*) (given)                                       |
|        the name of the action                                     |
|                                                                   |
|  INVAL=CHARACTER*(*) (given)                                      |
|        the parameter list to be sent to the task                  |
|                                                                   |
|  OUTVAL=CHARACTER*(*) (returned)                                  |
|        the string returned from the task                          |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
.page
.literal
+-------------------------------------------------------------------+
|  TASK_CNCAT   |  concatenate an array of strings into an argument |
|               | list                                              |
+-------------------------------------------------------------------+
|                                                                   |
|  Given an array of strings, concatenate them with separating      |
|  single  spaces, having removed leading and trailing spaces.      |
|  This generates an argument list suitable for passing through the |
|  ADAM message system.                                             |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_CNCAT ( NVALS, STRINGS, VALUE, STATUS )                |
|                                                                   |
|                                                                   |
|  NVALS=INTEGER (given)                                            |
|        number of strings in the array                             |
|                                                                   |
|  STRINGS=CHARACTER*(*) (given)                                    |
|        the array of strings                                       |
|                                                                   |
|  VALUE=CHARACTER*(*) (returned)                                   |
|        the concatenated string                                    |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
.page
.literal
+-------------------------------------------------------------------+
|  TASK_DONE  |  wait for final acknowledgement from task           |
+-------------------------------------------------------------------+
|                                                                   |
|  Wait for a final acknowledgement from a task executing an obey.  |
|  The routine will return when the required message arrives, or if |
|  it times-out, or if there is an EXTINT event. Requests from the  |
|  task for parameter prompts or output of messages associated with |
|  the action are automatically forwarded to the user interface.    |
|  Parameter values sent by the user interface are forwarded to the |
|  task.                                                            |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_DONE ( TIMEOUT, PATH, MESSID, OUTVAL, STATUS )         |
|                                                                   |
|                                                                   |
|  TIMEOUT=INTEGER (given)                                          |
|        timeout in millisecs. -1 gives infinite timeout.           |
|                                                                   |
|  PATH=INTEGER (given)                                             |
|        path to the task                                           |
|                                                                   |
|  MESSID=INTEGER (given)                                           |
|        messid for the action.                                     |
|                                                                   |
|  OUTVAL=CHARACTER*(*) (returned)                                  |
|        The value string from the task                             |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
.page
.literal
+-------------------------------------------------------------------+
|  TASK_GET  |  get a parameter value from a task                   |
+-------------------------------------------------------------------+
|                                                                   |
|  Get the value of a parameter from a task as a character string.  |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_GET (TASK_NAME, NAME, OUTVAL, STATUS )                 |
|                                                                   |
|                                                                   |
|  TASK_NAME=CHARACTER*(*) (given)                                  |
|        the name of the task                                       |
|                                                                   |
|  NAME=CHARACTER*(*) (given)                                       |
|        the name of the parameter                                  |
|                                                                   |
|  OUTVAL=CHARACTER*(*) (returned)                                  |
|        the returned parameter value                               |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
.page
.literal
+-------------------------------------------------------------------+
|  TASK_OBEY  |  send an OBEY to a task                             |
+-------------------------------------------------------------------+
|                                                                   |
|  Send an OBEY command and command-line parameter string to a      |
|  task.                                                            |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_OBEY ( TASK_NAME, NAME, INVAL, OUTVAL, PATH,           |
|    MESSID, STATUS )                                               |
|                                                                   |
|                                                                   |
|  TASK_NAME=CHARACTER*(*) (given)                                  |
|        the name of the task                                       |
|                                                                   |
|  NAME=CHARACTER*(*) (given)                                       |
|        the name of the action                                     |
|                                                                   |
|  INVAL=CHARACTER*(*) (given)                                      |
|        the command-line parameter values                          |
|                                                                   |
|  OUTVAL=CHARACTER*(*) (returned)                                  |
|        the string returned from the task                          |
|                                                                   |
|  PATH=INTEGER (returned)                                          |
|        the path to the task                                       |
|                                                                   |
|  MESSID=INTEGER (returned)                                        |
|        the message identifier for the OBEY                        |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
.page
.literal
+-------------------------------------------------------------------+
|  TASK_SET  |  set a parameter value in a task                     |
+-------------------------------------------------------------------+
|                                                                   |
|  Set the value of a parameter in a task.                          |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_SET (TASK_NAME, NAME, INVAL, STATUS )                  |
|                                                                   |
|                                                                   |
|  TASK_NAME=CHARACTER*(*) (given)                                  |
|        the name of the task                                       |
|                                                                   |
|  NAME=CHARACTER*(*) (given)                                       |
|        the name of the parameter                                  |
|                                                                   |
|  INVAL=CHARACTER*(*) (returned)                                   |
|        the parameter value                                        |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
.page
.literal
+-------------------------------------------------------------------+
|  TASK_VAL0<T>  |  convert a value to a character string           |
+-------------------------------------------------------------------+
|                                                                   |
|  Convert the given value of type <TYPE> into a character          |
|  string and return it in STRING.                                  |
|  A routine exists for each type C, D, L, I, R.                    |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_VAL0<T> ( VAL, STRING, STATUS )                        |
|                                                                   |
|                                                                   |
|  VAL=<TYPE> (given)                                               |
|        the value to be converted                                  |
|                                                                   |
|  STRING=CHARACTER*(*) (returned)                                  |
|        the returned character string                              |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
.page
.literal
+-------------------------------------------------------------------+
|  TASK_VAL1<T>  |  convert a vector into a character string        |
+-------------------------------------------------------------------+
|                                                                   |
|  Convert the given 1-D array into characters and concatenate the  |
|  result into a string with the ADAM syntax, that is the elements  |
|  of the array are separated and the whole is surrounded by [].    |
|  There is a routine for each type C, D, I, L, R.                  |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_VAL1<T> ( NVALS, VALS, STRING, STATUS )                |
|                                                                   |
|                                                                   |
|  NVALS=INTEGER (given)                                            |
|        number of values in the 1-D array                          |
|                                                                   |
|  VALS(NVALS)=<TYPE> (given)                                       |
|        the array to be converted                                  |
|                                                                   |
|  STRING=CHARACTER*(*) (returned)                                  |
|        the returned character string                              |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
.page
.literal
+-------------------------------------------------------------------+
|  TASK_VALN<T>  |  convert an array to a character string          |
+-------------------------------------------------------------------+
|                                                                   |
|  Convert the given multidimensional array into characters and     |
|  concatenate the values into a string with separators. The        |
|  dimensions of the array are delimited by [] following the ADAM   |
|  syntax.                                                          |
|  There is a routine for each type C, D, I, L, R.                  |
|                                                                   |
+-------------------------------------------------------------------+
|                                                                   |
|  CALL TASK_VALN<T> ( NDIMS, DIMS, VALS, STRING, STATUS )          |
|                                                                   |
|                                                                   |
|  NDIMS=INTEGER (given)                                            |
|        number of dimensions of the given array                    |
|                                                                   |
|  DIMS(NDIMS)=INTEGER (given)                                      |
|        the dimensions of the given array                          |
|                                                                   |
|  VALS(1:*)=<TYPE> (given)                                         |
|        the given array, treated as a vector                       |
|                                                                   |
|  STRING=CHARACTER*(*) (returned)                                  |
|        the returned string                                        |
|                                                                   |
|  STATUS=INTEGER                                                   |
|        <no parameter description>                                 |
|                                                                   |
+-------------------------------------------------------------------+
|  B.D.Kelly (REVAD::BDK)                                           |
+-------------------------------------------------------------------+
.end literal
