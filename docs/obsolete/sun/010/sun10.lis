


SCIENCE AND ENGINEERING RESEARCH COUNCIL                      SUN/10.3
RUTHERFORD APPLETON LABORATORY
SPACE & ASTROPHYSICS DIVISION

Starlink Project                                             Issued by
Starlink User Note 10.3

                                               J R Gallop & M D Lawden
                                                         1 August 1986

----------------------------------------------------------------------

                  ARGSLIB - ARGS Subroutine Library
                  ---------------------------------



1  INTRODUCTION

The ARGS FORTRAN-callable subroutine library "ARGSLIB" provides access
to the following facilities in the ARGS:

      o  allocate and optionally reset the ARGS - (SRINIT)

      o  draw image - (SRPXP, SRPXI2)

      o  draw filled rectangle - (SRBLOC)

      o  alter colour table - (SRCOLS, SRCOL1)

      o  buffer control - (SRSEND)

      o  trackerball/cursor control - (ARGS_*)

Some ARGS facilities are also available through the device-independent
graphics system GKS (see ref [1]).

In this note, the ARGS coordinate system used is 0 to 511 in each of x
and  y.   (0,0)  is  bottom  left and (511,511) is top right.  A pixel
value can be written at each point.

The least significant 8 bits of each value are used as an index  to  a
colour  table.   The  colour  table can be altered at any time and any
change has an effect on an image already present.  Each entry  in  the
table is a triad of intensity values in the range 0-255.  These values
represent the red, green and blue intensities which combine to  create
a particular colour.

The image is contained in the ARGS pixel store and this is scanned  in
conjunction  with  the  colour  table  by  a  video  processor,  which
refreshes a colour monitor on which the image is visible.


                                - 1 -
SUN/10.3                                                        Page 2


An  ARGS  is  SELECTED  by  routine  SRINIT  using  the  logical  name
ARGS_DEVICE.   A  default value for this exists when the user logs in,
but can be overridden:

        $ ASSIGN IDB0: ARGS_DEVICE

The device names are set up by each Site  Manager,  but  are  normally
IDA0:, IDB0:  etc.

An ARGS is ALLOCATED by routine SRINIT.  The ARGS is released when the
program  stops,  unless  the program is broken into.  If required, the
ARGS can be allocated to your process indefinitely  before  running  a
program which calls SRINIT:

        $ ALLOC IDA0:

Be sure to deallocate the ARGS you are using when  you  have  finished
with it:

        $ DEALLOC IDA0:

Routine SRINIT must  be  called  before  any  other  routine  in  this
package,  otherwise  all sorts of error messages will go to an obscure
stream (probably zero).



2  LINKING

The library is available in shared and  unshared  forms.   The  shared
library  leads  to  smaller  executable programs and is linked with as
follows:

        $ LINK <prog>,ARGSOPT/OPT

The unshared library is linked with as follows:

        $ LINK <prog>,@ARGSLIB




3  ERRORS

Error messages from the package go to stream 6 if SRINIT  is  properly
called.  Error messages are of 3 sorts:

      o  Those resulting from  mistakes  in  the  application  program
         begin:




                                - 2 -
SUN/10.3                                                        Page 3


         *      ARGSLIB error

         and are followed by an error code, a text message and a  list
         of auxiliary values.

      o  Those resulting from some hardware or operating system event.
         These  do  not begin with a predefined text pattern, but each
         makes it obvious that it concerns the ARGS.

      o  Those resulting  from  internal  errors  in  ARGSLIB.   These
         begin:

         *      ARGSLIB INTERNAL ERROR

         and continue with an error  code  and  a  list  of  auxiliary
         values.   Such  errors  should  be  reported to Starlink User
         Support (RLVAD::STAR).

Error messages in the first two classes are listed in Appendix B.



4  REFERENCES

[1] SUN/83 - GKS - Version 7.2



5  SUBROUTINE SPECIFICATIONS

The routines are described in alphabetical order.  The  arguments  are
described  in  the order in which they must be supplied by the caller.
An argument marked as 'entry' is one whose value(s) is/are significant
on  entry  to  the  routine.   An  argument  marked as 'exit' might be
altered at some time during the execution of the routine.  The  ARGS_*
routines  have  not yet been documented.  However, the example program
in Appendix C illustrates their use and should give enough information
for them to be used properly.















                                - 3 -
SUN/10.3                                                        Page 4


                    SRBLOC - Draw filled rectangle
                    ------------------------------




DESCRIPTION

        Fills a rectangle, whose sides are parallel to the axes,  with
        one pixel value.




ARGUMENTS

        INTEGER X1,Y1 (entry) - One corner  of  the  rectangle  to  be
                            drawn.

        INTEGER X2,Y2 (entry) -  Diagonally  opposite  corner  of  the
                            rectangle.

        INTEGER Z (entry) - Pixel value to be used  (range  0  to  255
                            inclusive).

        X1, Y1, X2 and Y2  should  all  be  in  the  range  0  to  511
                            inclusive.




EXAMPLE

        Draw a red rectangle.

                CALL SRCOL1(15, 255,0,0)
                CALL SRBLOC(200,200, 300,300, 15)
                CALL SRSEND















                                - 4 -
SUN/10.3                                                        Page 5


            SRCOL1 - Change one entry in the colour table
            ---------------------------------------------




DESCRIPTION

        Puts red,green and blue intensities into one entry of the ARGS
        colour table.




ARGUMENTS

        INTEGER N (entry) - Index of  entry  in  colour  table  to  be
                            updated.  Must be in range 0 to 255.

        INTEGER RED,GREEN,BLUE (entry) - Intensities of the 3  primary
                            colours  to  be  put into the table entry.
                            Range of each intensity is 0 to 255.




EXAMPLE

        The example for SRBLOC includes  a  example  of  SRCOL1  being
        used.























                                - 5 -
SUN/10.3                                                        Page 6


           SRCOLS - Change all or part of the colour table
           -----------------------------------------------




DESCRIPTION

        Changes all or part of the ARGS colour table.




ARGUMENTS

        INTEGER FIRST (entry) - Index of first entry  in  ARGS  colour
                            table to be altered.  Range is 0 to 255.

        INTEGER N (entry) - Number of entries in colour  table  to  be
                            altered.  Range is 1 to 256.

        INTEGER COLOUR(3,N) (entry) -  Colour  array  to  be  used  to
                            update  the  selected  part  of  the  ARGS
                            colour  table.   COLOUR(1,x),  COLOUR(2,x)
                            and  COLOUR(3,x)  are  the  red, green and
                            blue values respectively for colour  table
                            entry (FIRST-x+1).




EXAMPLE

        Define a grey scale.

                  INTEGER COLOUR(3,256)
                  DO J=1,256
                    K=J-1
                    COLOUR(1,J)=K
                    COLOUR(2,J)=K
                    COLOUR(3,J)=K
                  ENDDO
                  CALL SRCOLS(0,256,COLOUR)










                                - 6 -
SUN/10.3                                                        Page 7


           SRINIT - Allocate and optionally reset the ARGS
           -----------------------------------------------




DESCRIPTION

        Allocates the ARGS identified by ARGS_DEVICE to your  process.
        If  required,  the  ARGS is reset:  the pixel store is cleared
        and  the  colour  table  is  reset.   If  a   failure   occurs
        (FAIL.NE.0),  the  remainder  of the ARGS package can still be
        obeyed, but will not produce any more ARGS output.




ARGUMENTS

        INTEGER ARGSID (entry) - Currently unused so any integer value
                            can  be  put here.  An ARGS is selected by
                            the logical name ARGS_DEVICE.

        LOGICAL RESET (entry) - If and only if RESET is .TRUE.,  reset
                            the ARGS after allocating.

        INTEGER FAIL (exit) - Failure code; 0 is OK.




EXAMPLE

        Allocate the ARGS, but do not reset.

               INTEGER FAIL
               CALL SRINIT(0,.FALSE.,FAIL)
               IF (FAIL.NE.0) THEN
                 WRITE (6,*) 'FAIL CODE FROM ALLOCATING ARGS IS',FAIL
               ENDIF













                                - 7 -
SUN/10.3                                                        Page 8


              SRPXI2 - Draw image using unpacked values
              -----------------------------------------




DESCRIPTION

        The pixel values in array PIXELS are transferred to the  ARGS.
        The colour table is not altered.




ARGUMENTS

        INTEGER*2  PIXELS(D1,NY)  (entry)  -  Array   containing   the
                            unpacked   pixel  values  (each  pixel  is
                            contained in  one  array  element  at  the
                            least   significant   end).    The   first
                            subscript increases  as  the  x-coordinate
                            increases  (going  toward the right).  The
                            second  subscript   increases   with   the
                            y-coordinate (going upwards).

        INTEGER D1 (entry) - 1st dimension of PIXELS array.

        INTEGER NX,NY  (entry)  -  Number  of  pixels  in  NX  and  NY
                            directions.

        INTEGER X,Y (entry) - Position at which PIXELS(1,1) is placed.

        INTEGER BITS (entry) - Number of bits in  pixel  value  to  be
                            sent  to  the ARGS (must be power of 2 and
                            between 1  and  16  inclusive).   Anything
                            other  than  16,  causes  packing  to take
                            place internally.  In the current  version
                            of the package, 16 can always be used even
                            if  the  spread  of  pixel  values   would
                            suggest  a  much  smaller  bit value.  The
                            high I/O rate to the ARGS ensures that the
                            time  taken  to  send  a  16-bit  image is
                            smaller than the time  the  VAX  takes  to
                            pack.

        LOGICAL OGICAL (entry) - For the time  being  this  should  be
                            .FALSE.

        INTEGER*2 WORK(DWORK) (exit) - Array for workspace.   This  is
                            used for the pixel packing.



                                - 8 -
SUN/10.3                                                        Page 9


        INTEGER DWORK (entry) - Dimension  of  WORK.   If  no  packing
                            takes  place  (BITS=16),  this  can  be 1.
                            Otherwise it must be big enough to contain
                            at  least  one  row of pixels (ie at least
                            NX/(16/BITS)+1).




EXAMPLE

        Calculate pixel values, position image and transfer it to the ARGS.

              INTEGER*2 PIXELS(512,512),DUMMY(1)
              INTEGER OX,OY,FUNC
                :
                :
              NX=400
              NY=450

        *   Calculate pixel values using external function 'FUNC'
              DO JY=1,NY
                DO JX=1,NX
                  PIXELS(JX,JY)=MOD(FUNC(JX,JY),32768)
                ENDDO
              ENDDO

        *   Set the origin so the picture is centred
              OX=(SIZE-NX)/2
              OY=(SIZE-NY)/2

        *   Send to the ARGS
              CALL SRPXI2(PIXELS,SIZE,NX,NY,OX,OY,16,.FALSE.,DUMMY,1)




















                                - 9 -
SUN/10.3                                                       Page 10


                SRPXP - Draw image using packed values
                --------------------------------------




DESCRIPTION

        The pixel values in array BUFF are transferred  to  the  ARGS.
        The colour table is not altered.




ARGUMENTS

        INTEGER*2 BUFF(DIM) (entry) -  Array  containing  the  closely
                            packed   pixel  values.   The  values  are
                            written to the ARGS pixel store  from  the
                            least  significant  end  of each INTEGER*2
                            element first.

        INTEGER NX,NY (entry) - Number of pixels in X and Y directions
                            respectively.   This gives the size of the
                            image.

        INTEGER X,Y (entry) - X and Y coordinates of the  bottom  left
                            corner  of  the  rectangular  array.  This
                            positions the image on the screen.

        INTEGER BITS (entry) - Number of bits in pixel value  (1,2,4,8
                            or 16).

        INTEGER DIM (entry) - Size of array BUFF.




EXAMPLE














                                - 10 -
SUN/10.3                                                       Page 11


                   SRSEND - Output and clear buffer
                   --------------------------------




DESCRIPTION

        The contents of the ARGS buffer is built up by  calls  to  the
        other  routines.  Some of these routines do not output this to
        the ARGS.  SRSEND guarantees that this is done.  The  routines
        that output the buffer automatically are:  SRCOLS, SRPXI2, and
        SRPXP.




ARGUMENTS

        None.




EXAMPLE

        Prepare a colour table and transfer it to the ARGS.

                  N=127
                  DO J=1,N
                    CALL SRCOL1(J, J*2,J,0)
                  ENDDO
                  CALL SRSEND




















                                - 11 -












                              APPENDIX A

                                NAMES



The global names used in this package are as follows:

      o  public  routines  beginning  with  SR  (described   in   this
         document)

      o  internal subprograms beginning with ARGS_

      o  internal subprograms beginning with GRP_

      o  COMMON blocks of the form CARGSn (where n is an integer)




























                                - 12 -












                              APPENDIX B

                            ERROR MESSAGES



B.1  ERRORS IN CALLING SEQUENCE

These begin 'ARGSLIB error' and also contain an  error  code,  a  text
message and a list of auxiliary values.

CODE ROUTINE            ERROR                        ARGUMENTS

  1. SRBLOC   Rectangle corners are out of range.    X1,Y1,X2,Y2

  2. SRBLOC   Z value is out of range.               Z

  3. SRCOL1   Index of entry in colour table is      <-
     SRCOLS   out of range. For SRCOLS, the
              auxiliary values are the arguments
              FIRST and N. For SRCOL1, only the
              first auxiliary value is significant
              and this is the faulty index.

  4. SRCOL1   One or more of the R,G or B            R,G and B
     SRCOLS   intensities for a particular table
              entry is out of range.

  5. SRPXI2   The number of bits is wrong.           Number of bits
     SRPXP

  6. SRPXP    The length of the pixel array is       NX,NY,BITS,DIM
              insufficient to accommodate the
              information specified.

  7. SRPXI2   The length of the array provided       DWORK
              by the caller to accommodate the     (NX-1)/(16/BITS)+1
              workspace is not enough.






                                - 13 -
ERROR MESSAGES                                                Page B-2


B.2  HARDWARE AND OPERATING SYSTEM EVENTS

If an error is detected by the hardware or  the  operating  system,  a
flag  is  set  which prevents further system service calls to the ARGS
until SRINIT is called again.  This  allows  ARGSLIB  routines  to  be
executed without causing an encyclopaedia of error messages.

(a) ASSIGNING ARGS ARGS_DEVICE
        This is mainly for information.  ARGS_DEVICE  is  the  logical
        name  used  for  the ARGS and SRINIT causes this message to be
        output before the VMS routine SYS$ASSIGN is called.

(b) ARGS ALREADY ALLOCATED TO ANOTHER USER
        ARGS device driver prevents use  by  2  users  simultaneously.
        SRINIT  causes  this message to be output after SYS$ASSIGN has
        failed from this cause.

(c) ARGS OF THIS ID DOES NOT EXIST
        Expansion of  the  logical  name  ARGS_DEVICE  results  in  an
        unrecognised  device  name.  Could be due to user error or due
        to device not being connected by  the  site  manager.   Device
        names  normally  used are _IDA0:  or _IDB0:.  This error could
        also be due to ARGS_DEVICE not having been set up as a logical
        name.

(d) FAILED TO ALLOCATE ARGS -- REPLY FROM SYS$ASSIGN IS <code>
        The SYS$QIO(W) used to reset the ARGS has returned  a  failure
        code not recognised as corresponding to situations (b) or (c).

(e) FAILED TO RESET ARGS <code>
        The SYS$QIO(W) used to reset the ARGS has returned  a  failure
        code.

(f) FAILED TO SEND BUFFER TO ARGS <code>
        Failure code from SYS$QIO(W).

(g) RESULT OF ARGS SYSTEM SERVICE CALL IS ....  <code>
        This is output after some of the above messages.  The code  is
        the  result  of  the  system service call when considered as a
        function.













                                - 14 -












                              APPENDIX C

                           EXAMPLE PROGRAM



This program illustrates the use of some trackerball/cursor  routines.
The  source  code  is  stored in file LIBDIR:TBC.FOR and is reproduced
below:


              PROGRAM TBC

        *+
        *
        *  - - - - - -
        *  :  T B C  :
        *  - - - - - -
        *
        *
        *  TEST ARGS TRACKERBALL/CURSOR PACKAGE
        *
        *
        *  PTW/JUN-81
        *  ALTERED BY JRG AUGUST 1981
        *    REFERS ONLY TO SYSTEM CURSOR
        *
        *-


        *  ALLOCATE ARGS
              CALL SRINIT(0,.FALSE.,JSTAT)
              IF (JSTAT.NE.0) GO TO 9000

        *  ENABLE ONLY SYSTEM CURSOR
              CALL ARGS_CURS('+')

        *  CENTRE CURSOR
              CALL ARGS_CURP(0,255,255)

        *  SET CURSOR COLOUR
              CALL ARGS_CURC('W')


                                - 15 -
EXAMPLE PROGRAM                                               Page C-2


        *  LOAD TRACKERBALL/CURSOR PROGRAM INTO ARGS
              CALL ARGS_TBCL(0)

        *  SWITCH ON LAMPS
              CALL ARGS_LAMPS(0,0,1,1)

        *  LOOP UNTIL BUTTON 4 PRESSED
              IB4=0
              NPOINT=0
              DO WHILE (IB4.EQ.0)

        *     GET A CURSOR X,Y
                 CALL ARGS_TBCX(IX,IY,IB1,IB2,IB3,IB4)

        *     IF BUTTON 3 PRESSED DISPLAY X,Y
                 IF (IB3.NE.0) THEN
                    NPOINT=NPOINT+1
                    PRINT *,NPOINT,IX,IY
                 END IF
              END DO

        *  SWITCH OFF LAMPS
              CALL ARGS_LAMPS(0,0,0,0)

        *  DISABLE CURSOR
              CALL ARGS_CURS('0')
              CALL SRSEND

        *  EXIT
              GO TO 9999

        *  ERRORS
         9000 CONTINUE
              PRINT *,'ARGS ERROR'
         9999 CONTINUE
              END

This program can  be  compiled,  linked  and  run  from  your  default
directory as follows:

        $ FOR LIBDIR:TBC
        $ LINK TBC,ARGSOPT/OPT
        $ RUN TBC

When run, the cursor will appear and two buttons will light.  The  red
button  causes  termination.   The other button causes the position of
the cursor to be output on the terminal.   The  cursor  can  be  moved
using the trackerball.





                                - 16 -
