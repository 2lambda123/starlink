                                                                 



SCIENCE AND ENGINEERING RESEARCH COUNCIL                      ARN/4.1
ROYAL OBSERVATORY EDINBURGH 
and UNIVERSITY OF EDINBURGH 

ADAM Project                                                Issued by
ADAM Release Note 4.1 

                                             John Cooke, Dennis Kelly
                                                           26.11.1984

---------------------------------------------------------------------

                      ADAM Software Release 0.5                       _________________________ 







1. SUMMARY 


This release incorporates an almost-complete version of the parameter
system  + interface files, the data storage system, and enhanced user
interfaces with the ability to respond  to  parameter  requests  from
A-tasks.  There  are  also  'development'  copies of the software for
rapid  communication  of   monitored   values,   and   the   advanced
user-interface SMS. 

Note that it is now necessary to have the  two  GROUP  logical  names
ADAM_USER  and ADAM_IFL set-up before tasks can be run. These are set
up  by  the  command  ADAMSTART.  The  logical  names   for   program
development are set up by ADAMDEV. 

The system is provided as a single shareable image for linking.  This
requires  that  an entry has to be put in the VMS System logical name
table, defining ADAMSHARE to be (depending on  the  actual  directory
structure in use) disk:[ADAM.LIB]ADAMSHARE. 

Running the system requires the following quotas. 

   Open file quota                  20 
   Subprocess quota                 10 
   Buffered i/o byte count       20480 











                                                                 ARN/4.1                           2                           ARN/4.1






2. CONTENTS 


          3. INTRODUCTION 
          4. NEW FEATURES IN THIS RELEASE 
               4.1 Organisation 
               4.2 Linking 
               4.3 The 'engineering' user interface 
               4.4 D-tasks 
               4.5 A-tasks 
               4.6 Interface files 
               4.7 C-tasks 
               4.8 The RGO Adam command language 
          5. UPPER/LOWER CASE CONSIDERATIONS 
          6. STILL MISSING FROM THIS RELEASE 
          7. BUGS FIXED FROM PREVIOUS RELEASE 
          8. KNOWN BUGS 



3. INTRODUCTION 


The overall ADAM directory structure is the same as that  in  release
0.0;  for  details refer to ARN/2.  Further logical names and symbols
have been added. 

Note that in this, as in all releases, the  logical  name  "ADAM_DIR"
must  be set up correctly in the "DEVLOGIN.COM" file in the top level
directory;  all sub-directories are defined relative to this one. 

This release contains the whole  of  the  ADAM  directory  structure;
note  that  there  are  several  undocumented  directories containing
experimental or development work. 




4. NEW FEATURES IN THIS RELEASE 




4.1 Organisation     ____________ 

There are no major changes in the way that the ADAM  directories  are
organised.   Additional  help is provided, in the form of the symbols
"logicals" and "symbols".  Typing one of these produces a listing  at
the  terminal  of  the  ADAM  logical names or symbols, with one-line
descriptions of their function. 



                                                                 ARN/4.1                           3                           ARN/4.1





4.2 Linking     _______ 

The commands ALINK and DLINK are used to  produce  A-  and  D-  tasks
linked with the shareable image. 



4.3 The 'engineering' user interface     ________________________________ 

The following features have been added: 

(1) Requests from A-tasks for parameter values are  displayed,  along
with  their  default  values, and the typed-in values are returned to
the A-task. Special possible responses to prompts are: 

A carriage-return causes the default to be taken, if there is one. 

? results in one-line help (as given in the  A-task  interface  file)
being displayed. 

! means 'give this parameter a null value. 

!! means 'abort', ie stop trying to run. 

These are Starlink conventions. 

(2) In the prevous release, only the first  value  in  the  parameter
list  at the end of a message typed-in was sent. This has been fixed.
It is, therefore, now possible to send a command such as 

Adameng:> SEND ADD OBEY RUN 33 44 

and the given values  are  automatically  put  into  ADD's  parameter
system. 



4.4 D-tasks     _______ 

An example of a D-task with interface file is  to  be  found  in  the
directory SIMP_DIR. 



4.5 A-tasks     _______ 

Some A-tasks are to be found in the directory ATASKS. 

These include: 





                                                                 ARN/4.1                           4                           ARN/4.1



LS - list the contents of an HDS structure 

TRACE - more extensive listing of a structure 

SDFCREATE - create an HDS container  file,  or  a  scalar  within  an
existing container file. 

SDFCREATE acts as  a  simple  example  A-task.  Note  that  SDFCREATE
consists   of   a  subroutine  SDFCREATE(STATUS).  This  is  compiled
producing  an  object  module  which  MUST  be  in  a   file   called
SDFCREATE.OBJ  (ie.  the same name as the subroutine). It can then be
linked by the command 

ALINK SDFCREATE 

It also needs SDFCREATE.IFL before it can be loaded  by  one  of  the
user interfaces and sent the command to RUN. 



4.6 Interface Files     _______________ 

Examples of interface files for A- C- and D-tasks are to be found  in
the relevant subdirectories. When a task is loaded by one of the user
interfaces, it first attempts to find its compiled interface file  in
the subdirectory ADAM_IFL - eg. ADAM_IFL:SDFCREATE.IFC. If it doesn't
find  such  a  file,  it  attempts  to  read  the  text   file   (eg.
SDFCREATE.IFL)  from  the  current  default directory. When a task is
being developed, probably its interface file will be changing, and so
the  IFL  is the one that is wanted. Once a task has become 'stable',
however, its startup time is reduced if the IFL is compiled using the
command COMPIFL: 

COMPIFL SDFCREATE 

This produces the IFC file which can be copied to ADAM_IFL. 



4.7 C-tasks     _______ 

There is an  example  C-task  in  CTASKS.  This  is  called  CONTROL.
Producing  it  is  identical with the procedure for A-tasks. The only
distinction is  that  it  calls  ADAM_SENDT  and  ADAM_RECEIVE,  and,
therefore, could never be mistaken for a Starlink program. 



4.8 The RGO Adam command language     _____________________________ 

The ADAM command language has been extended to make it easier to  run
A-tasks. One can now: 




                                                                 ARN/4.1                           5                           ARN/4.1



Adamcl:> load sdfcreate 

Adamcl:> define sdfcreate sdfcreate 

Adamcl:> sdfcreate 

The final command causes the task to be sent the RUN  command,  along
with any parameters which were put on the command line. 

As the command language uses Adameng, it will also handle prompts for
parameters requested by A-tasks. 

For D-tasks one can 

Adamcl:> define junk junk /dtask 

Adamcl:> junk obey command values 

Some simple help information is also available via the command HELP. 




5. UPPER/LOWER CASE CONSIDERATIONS 


Several decisions  regarding  upper/lower  alphabetic  case  and  its
conversion  have  been  arbitrarily  made  in this release, to try to
facilitate use of the system.  Feedback from programmers  (and  users
or  potential  users) of the ADAM system would be appreciated to help
to resolve problems encountered here. 

Like the previous parameter system, the new one causes the  parameter
names  to  be converted internally to a single case.  This means that
it does not matter whether upper or lower case is  used  outside  the
system to specify the parameters (i.e. FILTER, filter, and Filter are
all considered to be the same parameter). 

The problem about the naming of  actions  inside  D-tasks  continues.
These  are  usually given as explicit character strings in the D-task
device dependent code (i.e. in ACT or  below).   However  the  action
name is passed to the D-task from software over which the user has no
direct control.  Currently the 'engineering' interface forces  action
names to upper case, which assumes that they have been given as upper
case in the D-task code. 











                                                                 ARN/4.1                           6                           ARN/4.1



6. STILL MISSING FROM THIS RELEASE 


The following list is not complete but indicates  major  areas  where
some  action  might  be  expected  soon.   In particular, the work on
networking has started, and initial work on graphics will start soon.

Major items missing: 
Graphics packages 
Networking 




7. BUGS FIXED FROM PREVIOUS RELEASE 


Tasks now close down cleanly 




8. KNOWN BUGS 


These are the most important bugs found that can potentially  produce
unwanted  effects and may cause confusion.  Please let us know of any
unusual behaviour of the system ! 

(1) At present, any task can open channels to  other  tasks  no  more
than 20 times. 

(2) When the "engineering interface" is started up, it can be  "hung"
completely by typing something before the prompt appears. (Get out of
this with ctrl-Y.) 

(3) If the command "SPAWN" is used in the Adam command language,  two
carriage  returns  are  needed  to  obtain the DCL "$" prompt.  After
logout  from  the  spawned  subprocess,  the  extra  carriage  return
reappears as a blank command line. 

(4) If a number of SEND commands are issued within a command language
loop,  action  stops  after  the first few until a carriage return is
typed. Sometimes the terminal receives a non-printable  character  at
this point. 

(5) The CANCEL context does not always work correctly.  Sometimes  an
action  can  be  reported  to  have been cancelled, but the timer for
rescheduling may not be cancelled and the action re-starts  when  the
timer expires. 






                                                                 
