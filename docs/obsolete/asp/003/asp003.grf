.af geroffdir:prelude.grf
.aspa 3.1 "ADAMCL logging, remoting and prompts" "B.D.Kelly" "19.12.1985"
.level1 "INTRODUCTION"
This document describes proposed changes to ADAMCL. The changes involve 
the production of the logfile (REPORT facility) and the implementation 
of a REMOTE facility. The latter involves the generation of a logfile 
which can be written by multiple processes and read incrementally by a 
process transferring the log across a network. Finally, it is proposed 
that the appearance of the task name at the beginning of prompt strings 
and messages should be made switchable.
.level1 "LOGGING"
.level2 "The meaning of logging"
Only logging directly relevant to ADAMCL is considered. The logging of 
information known to tasks but not explicitly known to ADAMCL is 
ignored. A superficial definition of logging then becomes

"Writing to a file all information known to ADAMCL which also appears on 
the terminal screen"

In practice, this definition includes a heterogeneous collection of 
information which it is useful to split into classes.

.nf
command prompts from ADAMCL
commands input by user
value prompts from ADAMCL
values input by user
program parameter prompts
program parameter values input by user
messages from tasks
output from ADAMCL PRINT
HELP output
error messages
.fi

It is probably also useful to add input to ADAMCL from a batch file, 
although this does not appear on the terminal.
.level2 "Present REPORT facility"
This consists of two commands. REPORT switches reporting on. Reports are 
appended to a text file called <process_name>.REP in the current 
directory. This has been known to cause trouble when a user's 
process_name is not a valid filename. Reporting is switched off by the 
command NOREP, which also closes the output file. The information logged 
consists only of commands typed by the user and error messages.
.level2 "Proposed REPORT facility"
.level3 "Logging categories"
It makes sense to group prompts with the corresponding user input. For 
implementation reasons, it is also convenient to group together command 
prompts with value prompts from built-in ADAMCL commands (eg. ASKNUM).

.nf
COMMS
command prompts from ADAMCL //  commands input by user
value prompts from ADAMCL  //  values input by user

PROMPTS
program parameter prompts//program parameter values input by user

MSG
messages from tasks

PRINT
output from ADAMCL PRINT

HELP
HELP output

ERRORS
error messages

BATCH
echo of batch input
.fi

Experience is likely to extend or modify this classification.
.level3 "Control of logging"
It is proposed that the various logging categories should be 
independently switchable. This will be done by the commands

LOG <list>

NOLOG <list>

where <list> is a list of one or more category names.

LOG HELP ERRORS

would enable logging of HELP and ERRORS output, without disabling any 
previously enabled categories.
.level3 "The REPORT command"
It is proposed that the REPORT command should become

REPORT [filename]

where filename is the name of the file to which the log will be 
appended. If filename is not specified, it will be invented as 
previously. A default choice of logging categories will be set up on 
initial entry to ADAMCL. The REPORT and NOREP commands will have no 
effect on the enabled categories.

It is proposed that the default logging categories should be

COMMS PROMPTS MSG PRINT ERRORS
.level1 "REMOTE OBSERVING"
The intention remains that implementation of remote command entry should 
require no special features in ADAMCL, but should be handled 
automatically by the message system. However, the biggest use of remote 
observing is likely to fall in the category of remote eavesdropping. In 
this case, the remote observer has to be presented with information 
about what is happening on the computer at the telescope.
.level2 "General approach to remote eavesdropping"
Arguably, the remote eavesdropper is seeing the 'log' as it is updated. 
However, he also wants to see information not going via a specific user 
interface. It seems that the simplest solution is to have a disk file on 
the telescope computer which has relevant information appended to it, 
and to have a task which reads the file and copies new information to 
the remote observer. The task has to keep track of how much of the log 
has been transferred successfully so that it can recommence at the 
correct place in the event of network breaks. The log file is accessed 
by multiple writers, so this has to be handled carefully. The individual 
entries probably ought to be time-stamped.
.level2 "Requirement specific to ADAMCL"
ADAMCL has to append information to the eavesdropping log. At first 
sight this appears to be the same requirement as the reporting facility. 
The report file, however, is written to only by a single copy of ADAMCL. 
Furthermore, it is a simple text file, which means that DCL commands 
such as TYPE, EDIT and PRINT can be used on it successfully. As an 
experiment, it seems that commands to enable and disable copying of the 
currently enabled logging categories would be sufficient.

.nf
eg.

$ ADAMCL

Adamcl:> EAVES
.fi

Would cause the default categories of information to go to the 
eavesdropping file, while no REPORTing would be occurring.
.level1 "PROMPT STRINGS"
From time to time requests have been made for changes to the display of 
messages and prompts which ADAMCL has received from tasks.
.level2 "Present prompt and message output"
Currently, all messages and prompts from tasks are displayed on the 
terminal preceded by the name of the originating task. This can be 
useful when multitasking, but can be annoying during simple sequential 
use of the system, particularly for data analysis. Apart from showing 
extraneous information, it also reduces the space on a line available 
for prompts and responses.
.level2 "Proposed change"
It is proposed that the presence of the taskname should be made 
switchable by the commands SHOWTASK and HIDETASK. It is not obvious 
whether the contents of the log files should be affected.
.level1 "COMMAND NAMES"
This document has been concerned with a number of areas where ADAMCL 
options are switchable. This involves the creation of commands for 
toggling logical values. It is desirable that such commands should 
conform to some pattern so that a user can deduce the negative command 
from knowing the positive command. 

A simple pattern would be

.nf
SET LOG ON <list>
SET LOG OFF <list>
SET REPORTING ON [filename]
SET REPORTING OFF
SET SHOWTASK ON
SET SHOWTASK OFF
.fi

However, this might be considered rather verbose. It also has a bad 
effect on the presentation of HELP information. One might be tempted to 
simply leave the SET off the beginning, however, one can see a 
requirement for commands such as

.nf
SHOW LOG
SHOW REPORTING
SHOW SHOWTASK
SHOW DICTIONARY
SHOW VARIABLES
.FI

Suggestions of ways to resolve these problems will be gratefully 
received.
