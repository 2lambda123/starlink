
The files in the automake, autoconf, libtool and m4 directories are
more or less patched versions of the FSF tools.  The FSF tools have
each been imported onto the 'FSF' vendor branch.

All four have been modified to the extent of having
component.xml{,.in} files added, and configure.ac patched to trigger
Starlink automake to include the manifest support code in it.  Beyond this:

  * autoconf: lightly patched, but has an extensively modified
  lib/autoconf/fortran.m4 file.  This file forms the basis of a patch 
  submitted to the autoconf maintainers, and the portable work on that
  is done on the branch dev-nxg-20040116-add-fpp-support.

  * automake: a number of extra templates in lib/am/starlink*, and a
  substantially extended automake.in.

  * libtool, m4: unmodified, beyond the component.xml and configure.ac
  changes above.

In general, if you make a change which modifies one of the committed
generated files, then you should commit that generated file later than
the file it was generated for, to avoid repository timestamp problems
(see below for more agonising detail).  However the checkout-fixup
technique described at the bottom is potentially the most robust of all.

In each case, the changes can be seen with the command

  % cvs diff -r FSF

All these tools should be kept in sync with their FSF counterparts as
much as possible, and new releases of the upstream tools imported when
convenient.  There are more detailed notes in each directory, in the
file README.Starlink, but the general procedure is the same.  For
example (presuming the previous libtool version was 1.5.10, and
starcvs=:ext:nxg@cvs.starlink.ac.uk:/cvs):

  % cd /tmp
  % tar xzf libtool-1.5.18.tar.gz
  % cd libtool-1.5.18
  % cvs -d $starcvs import -m "Import Libtool 1.5.18" thirdparty/fsf/libtool \
      FSF libtool-1-5-18
  % cd /tmp
  % cvs -d $starcvs co -jlibtool-1-5-10 -jlibtool-1-5-18 \
      thirdparty/fsf/libtool 
  % cd thirdparty/fsf/libtool
  % ...

Then resolve conflicts in these merged files (you are working on, and
thus will commit the changes to, the trunk).  Now you should
regenerate the configuration files (./configure, Makefile.in, and so
on) using the _Starlink_ autotools, NOT the standard ones, to ensure
that the Starlink manifest support is included in the configuration
files.  The procedure for that is to ensure that an already-built
version of the Starlink autotools is in your path, and:

  % rm -f missing
  % aclocal  # probably redundant, but does no harm
  % autoreconf --install --symlink

(then './configure;make;make install' should work as usual).

At that point, you should commit the modified source files
(Makefile.am, configure.ac, and so on).  You should SEPARATELY commit
any generated files (configure, aclocal.m4, Makefile.in), to guarantee
that they have a later timestamp in the CVS repository; this will
avoid them being checked out with timestamps in the wrong order, and
thus avoid spurious and erroneous rebuildings of the generated files
during system-wide bootstrapping.  There are some non-obvious
generated files, most notably .info files in doc/ directories.
Probably the best general procedure for discovering these is:

  % make maintainer-clean
  % rm configure # not removed by maintainer-clean
  % date >TIMESTAMP
  % aclocal; autoreconf --install --symlink
  % ./configure; make
  % find . -type f -newer TIMESTAMP

This finds cache and log files as well, so the resulting list needs to
be examined.

The problem is as follows: When these tools are being build as part of
the bootstrapping of the Starlink build system, they are built in a
context which does not have any of the autotools available
(obviously), it is therefore important that they do not invoke any.
CVS preserves timestamps on checkout, though it doesn't on updates:
what's checked in, therefore, must be checked out in such a way that
generated files (configure, aclocal.m4, Makefile.in, and the various
stamp files that the tools use) are newer than the source files they
are generated from (configure.{ac,in}, Makefile.am, and so on).  Note
that CVS appears to use the one-second-resolution _commit_ time as a
timestamp in the repository.

A more general solution is illustrated in automake/Makefile.am and
libtool/Makefile.am, where a checkout-fixup target, mentioned in
BUILT_SOURCES, is used to guarantee that the timestamps on the
generated files are as they would be if all the generated targets were
satisfied.  It might be worth adapting this mechanism to autoconf, and
possibly m4, in which case the notes above about these staged commits
should be deleted as terribly confusing.

M4 appears to be slightly more fragile (and indeed peculiar) than the
others in this respect -- see the separate notes in
m4/README.Starlink.

