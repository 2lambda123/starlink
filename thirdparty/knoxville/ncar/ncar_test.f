      PROGRAM NCAREX
*+
*  Name:
*     NCAREX

*  Purpose:
*     Test program for NCAR demonstration subroutines.

*  Language:
*     Starlink Fortran 77

*  Description:
*     Edit 'CALL GOPWK' for GKS connection id (5) and workstation (201).
*     Edit 'CALL TAUTOG' for demonstration subroutine T*.
*     IUNIT is for TISOHR which requires a scratch file.
*     Link with NCAR and GKS.

*  Authors:
*     PWH: P.W. Hill (St Andrews)
*     PCTR: P.C.T. Rees (STARLINK)

*  History:
*     3-SEP-1991 (PXWH):
*        Original version.
*     11-DEC-1991 (PCTR):
*        Added workstation prompt.
*        Use UNIT 0 for errors.

*  Bugs:

*-

*  Type Declarations:
      IMPLICIT NONE

*  Global Variables:
      INTEGER IUNIT
      COMMON / UNITS / IUNIT

*  Local Constants:
      INTEGER ICONID
      PARAMETER ( ICONID = 5 )

      INTEGER IWKID
      PARAMETER ( IWKID = 1 )

      INTEGER KERRFL
      PARAMETER ( KERRFL = 0 )

*  Local Variables:
      INTEGER IERR
      INTEGER IOSTAT
      INTEGER IWKSTN

*  Local Data:
      DATA IUNIT / 23 /

*  Open GKS.
      CALL GOPKS( KERRFL, -1 )

*  Prompt for and read the GKS worstation number.
 10   CONTINUE
      WRITE( *, '( ''Enter workstation number: '' )', IOSTAT=IOSTAT )

      IF ( IOSTAT .EQ. 0 ) THEN
         READ( *, *, IOSTAT=IOSTAT ) IWKSTN

         IF ( IOSTAT .EQ. -1 ) THEN
            WRITE( *, '( ''Exit test.'' )', IOSTAT=IOSTAT )
            GO TO 999
         ELSE IF ( IOSTAT .NE. 0 ) THEN
            WRITE( *, '( ''Error: read error.'' )', IOSTAT=IOSTAT )
            GO TO 10
         END IF
      ELSE
         WRITE( *, '( ''Error: unable to write to standard output.'' )', 
     :   IOSTAT=IOSTAT )
         GO TO 999
      END IF

      CALL GOPWK( IWKID, ICONID, IWKSTN )
      CALL GACWK( IWKID )

*  NCAR example to be run.
      CALL TEZMAP ( IERR )

*  Close the GKS workstation.
      CALL GDAWK( IWKID )
      CALL GCLWK( IWKID )
      CALL GCLKS

      CLOSE ( IUNIT, STATUS='DELETE' )

 999  CONTINUE

      END

      SUBROUTINE TEZMAP (IERROR)
C
C
C PURPOSE                TO PROVIDE A SIMPLE DEMONSTRATION OF THE
C                        EZMAP PACKAGE.
C
C USAGE                  CALL TEZMAP (IERROR)
C
C ARGUMENTS
C
C ON OUTPUT              IERROR
C                          AN INTEGER VARIABLE
C                        = 0 IF THE TEST WAS SUCCESSFUL
C                        = 1 OTHERWISE
C
C I/O                    IF EACH CALL TO EZMAP ROUTINES RESULTS IN
C                        A NORMAL EXIT, THE MESSAGE
C                          EZMAP TEST SUCCESSFUL  . .  SEE PLOT TO
C                          VERIFY PERFORMANCE
C                        IS PRINTED ON UNIT 6.
C
C                        TEN CONTINENTAL OUTLINE PLOTS, EACH
C                        RESULTING FROM A DIFFERENT SPECIFIED
C                        PROJECTION, ARE PRODUCED ON THE MACHINE
C                        GRAPHICS DEVICE.
C                        TO DETERMINE IF THE TEST WAS SUCCESSFUL,
C                        IT IS NECESSARY TO EXAMINE THESE PLOTS.
C
C PRECISION              SINGLE
C
C REQUIRED LIBRARY       EZMAP
C FILES
C
C LANGUAGE               FORTRAN
C
C ALGORITHM              SUBROUTINE TEZMAP CALLS ROUTINE MAPROJ ONCE
C                        FOR EACH OF THE TEN PROJECTION TYPES
C                        IN SUPMAP.  SPECIFICALLY, THESE ARE
C                          STEREOGRAPHIC
C                          ORTHOGRAPHIC
C                          LAMBERT CONFORMAL CONIC WITH TWO
C                            STANDARD PARALLELS
C                          LAMBERT EQUAL AREA
C                          GNOMONIC
C                          AZIMUTHAL EQUIDISTANT
C                          CYLINDRICAL EQUIDISTANT
C                          MERCATOR
C                          MOLLWEIDE TYPE
C                          SATELLITE VIEW
C
C HISTORY                WRITTEN OCTOBER, 1976 FOR USE WITH SUPMAP
C                        UPDATED SEPTEMBER, 1985 FOR USE WITH EZMAP
C
C PORTABILITY            ANSI FORTRAN 77
C
      DIMENSION PLM1(2),PLM2(2),PLM3(2),PLM4(2)
      COMMON /ERROR/ IFRAME, IERRR
C
      DATA PLM1,PLM2,PLM3,PLM4 /8*0.0/

C
C SPECIFY COORDINATES FOR PLOT TITLES.  ON AN ABSTRACT PLOTTER GRID
C WHERE THE  COORDINATES RANGE FROM 0.0 TO 1.0, THE VALUES TX
C AND TY DEFINE THE CENTER OF THE TITLE STRING.
C
      DATA TX/0.5/, TY/0.9765/
C
C INITIALIZE ERROR FLAG
C
      IERRR = 0
C
C TURN ON ERROR RECOVERY MODE
C
      CALL ENTSR(IDUM,1)
C
C FRAME 1
       IFRAME = 1
C
C SET THE PROJECTION-TYPE PARAMETER
C
      CALL MAPROJ('ST',80.0,-160.0,0.0)
C
C SET THE LIMIT PARAMETERS
C
      CALL MAPSET('MA',PLM1,PLM2,PLM3,PLM4)
C
C SET THE OUTLINE-DATASET PARAMETER
C
      CALL MAPSTC('OU','PS')
C
C DRAW THE MAP
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
C
C SELECT NORMALIZATION TRANS TO WRITE TITLE
C
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,'EZMAP DEMONSTRATION:  STEREOGRAPHIC PROJECTION'
     +           ,2,0,0)
      CALL FRAME
 10   CONTINUE
C
C FRAME 2
      IFRAME = 2
C
C
C SET THE PROJECTION-TYPE PARAMETER
C
      CALL MAPROJ('OR',60.0,-120.0,0.0)
C
C DRAW THE MAP
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
C
C WRITE THE TITLE
C
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,
     +     'EZMAP DEMONSTRATION:  ORTHOGRAPHIC PROJECTION',2,0,0)
      CALL FRAME
 20   CONTINUE
C
C FRAME 3
      IFRAME = 3
C
C
C SET THE PROJECTION-TYPE, LIMITS, AND OUTLINE-DATASET PARAMETERS
C
      CALL MAPROJ('LC',45.0,-100.0,45.0)
      CALL MAPSET('CO',50.0,-130.0,20.0,-75.0)
      CALL MAPSTC('OU','US')
C
C DRAW THE ABOVE DEFINED MAP AND WRITE THE TITLE
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,
     +     'EZMAP DEMONSTRATION: LAMBERT CONFORMAL CONIC PROJECTION',
     +           2,0,0)
      CALL FRAME
 30   CONTINUE
C
C FRAME 4
      IFRAME = 4
C
C SET THE PROJECTION-TYPE, LIMITS, AND OUTLINE-DATASET PARAMETERS
C
      CALL MAPROJ('LE',20.0,-40.0,0.0)
      CALL MAPSET('MA',PLM1,PLM2,PLM3,PLM4)
      CALL MAPSTC('OU','CO')
C
C DRAW THE ABOVE DEFINED MAP AND WRITE THE TITLE
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,
     +     'EZMAP DEMONSTRATION:  LAMBERT EQUAL AREA PROJECTION',2,0,0)
      CALL FRAME
 40   CONTINUE
C
C FRAME 5
      IFRAME = 5
C
C SET THE MAP PROJECTION-TYPE PARAMETER
C
      CALL MAPROJ('GN',0.0,0.0,0.0)
C
C DRAW THE ABOVE DEFINED MAP AND WRITE THE TITLE
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,'EZMAP DEMONSTRATION:  GNOMONIC PROJECTION',
     +           2,0,0)
      CALL FRAME
 50   CONTINUE
C
C FRAME 6
      IFRAME = 6
C
C SET THE MAP PROJECTION-TYPE PARAMETER
C
      CALL MAPROJ('AE',-20.0,40.0,0.0)
C
C SET THE GRID SPACING
C
      CALL MAPSTR('GR',5.0)
C
C DRAW THE ABOVE DEFINED MAP AND WRITE THE TITLE
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,
     +     'EZMAP DEMONSTRATION:  AZIMUTHAL EQUIDISTANT PROJECTION',
     +           2,0,0)
      CALL FRAME
 60   CONTINUE
C
C FRAME 7
      IFRAME = 7
C
C SET THE MAP PROJECTION TYPE PARAMETER
C
      CALL MAPROJ('CE',-40.0,80.0,0.0)
C
C DRAW THE ABOVE DEFINED MAP AND WRITE THE TITLE
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,
     +     'EZMAP DEMONSTRATION:  CYLINDRICAL EQUIDISTANT PROJECTION',
     +           2,0,0)
      CALL FRAME
 70   CONTINUE
C
C FRAME 8
      IFRAME = 8
C
C SET THE MAP PROJECTION-TYPE PARAMETER
C
      CALL MAPROJ('ME',-60.0,120.0,0.0)
C
C DRAW THE ABOVE DEFINED MAP AND DRAW THE TITLE
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,'EZMAP DEMONSTRATION: MERCATOR PROJECTION',
     +           2,0,0)
      CALL FRAME
 80   CONTINUE
C
C FRAME 9
      IFRAME = 9
C
C SET THE MAP PROJECTION-TYPE PARAMETER
C
      CALL MAPROJ('MO',-80.0,160.0,0.0)
C
C DRAW THE ABOVE DEFINED MAP AND WRITE THE TITLE
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,
     +     'EZMAP DEMONSTRATION:  MOLLWEIDE-TYPE PROJECTION',2,0,0)
      CALL FRAME
 90   CONTINUE
C
C FRAME 10
      IFRAME = 10
C
C SET THE MAP PROJECTION-TYPE PARAMETER
C
      CALL MAPROJ('SV',0.0,-135.0,0.0)
C
C SET SATELLITE DISTANCE AND SUPPRESS GRID LINES
C
      CALL MAPSTR('SA',6.631)
      CALL MAPSTI('GR',0)
C
C DRAW THE ABOVE DEFINED MAP AND WRITE TITLE
C
      CALL MAPDRW
                    IF( NERRO(IERR).NE.0) CALL RPTERR
      CALL GSELNT(0)
      CALL WTSTR(TX,TY,
     +     'EZMAP DEMONSTATION: SATELLITE VIEW PROJECTION',2,0,0)
      CALL FRAME
 100  CONTINUE
C
      IF(IERRR.EQ.0) WRITE(6,1000)
      IF(IERRR.EQ.1) WRITE(6,1001)
      IERROR = IERR
      RETURN
C
C

 1000 FORMAT('     EZMAP TEST SUCCESSFUL',24X,
     +       'SEE PLOT TO VERIFY PERFORMANCE')
 1001 FORMAT('     EZMAP TEST UNSUCCESSFUL')
      END


      SUBROUTINE RPTERR
C
C ROUTINE TO REPORT ERROR MESSEGES
C
      COMMON /ERROR/ IFRAME,IERRR
C
      WRITE(6,1000) IFRAME
      CALL EPRIN
      WRITE(6,1001)
      CALL ERROF
      IERRR = 1
      RETURN
C
 1000 FORMAT(' ERROR IN FRAME ',I2,5X,'ERROR MESSAGE FOLLOWS:')
 1001 FORMAT(' ******',//)
      END
