# Process this file with autoconf to generate the Makefile
# @configure_input@

# MANIFEST and prefix must match the value defaulted in starconf.
# FIXME: tie these together, and link with starconf values.
prefix=@prefix@
MANIFEST=$(prefix)/manifests

# Keep the following in alphabetical order
ALL_TARGETS = \
	$(MANIFEST)/adam \
	$(MANIFEST)/ams \
	$(MANIFEST)/atimer \
	$(MANIFEST)/chr \
	$(MANIFEST)/cnf \
	$(MANIFEST)/dtask \
	$(MANIFEST)/ems \
	$(MANIFEST)/fio \
	$(MANIFEST)/hds \
	$(MANIFEST)/hdspar \
	$(MANIFEST)/hlp \
	$(MANIFEST)/lex \
	$(MANIFEST)/mers \
	$(MANIFEST)/messgen \
	$(MANIFEST)/messys \
	$(MANIFEST)/misc \
	$(MANIFEST)/msp \
	$(MANIFEST)/par \
	$(MANIFEST)/parsecon \
	$(MANIFEST)/pcs \
	$(MANIFEST)/psx \
	$(MANIFEST)/sae \
	$(MANIFEST)/sla \
	$(MANIFEST)/sock \
	$(MANIFEST)/sst \
	$(MANIFEST)/starconf \
	$(MANIFEST)/string \
	$(MANIFEST)/subpar \
	$(MANIFEST)/task

# Targets present in tree, but excluded from list
#   adamnet -- obsolete

# The other important target is `buildsupport', the dependencies of
# which are defined in the Makefile.dependencies which is included below.



SUBDIRS = @subdirs@
@SET_MAKE@
LN_S=@LN_S@

# Java support: need a java runtime
JAVA=@JAVA@

RECURSIVE_TARGETS = clean maintainer-clean



all: $(ALL_TARGETS)

# The Makefile dependencies are built using a Java program.  This
# isn't installed (it should be -- see the comments in
# buildsupport/starconf/Makefile.am) so we have to hack it.  Ugly: FIXME.
#
# Avoid doing anything if the variable JAVA is null -- this is true if
# we're using this file unconfigured during bootstrap (see ./bootstrap
# for the relevant gymnastics).
#
# It might seem like a good idea to create a set of dependencies for
# componentset.xml at the same time, saying that it depends on all the
# component.xml files beneath it in the tree.  It's a bad idea,
# however, since it means that the Makefile can be used only if the
# entire tree is checked out.  If we only check out part of the tree,
# because we only want to build one component, then any make at the
# top level will fail because one or other of the dependencies of
# componentset.xml is missing.
#
# The test of whether $(JAVA) is zero-length is important.  An edited
# version of this file is used by the ./bootstrap script, in which the
# JAVA variable is empty (since the directory may not have been
# configured yet); we must not fail in this case, nor may we attempt
# to make GenerateDependencies.class.  In this case simply do nothing,
# because the Makefile.dependencies file can be assumed to be up-to-date.
Makefile.dependencies: componentset.xml
	if test -n "$(JAVA)"; then \
	    (cd buildsupport/starconf/java \
	        && $(MAKE) GenerateDependencies.class) \
	    && $(JAVA) -classpath buildsupport/starconf/java \
		GenerateDependencies componentset.xml >$@; \
	else :; fi

# Make a componentset.xml by concatenating all the component.xml files
# we can find.  Sort the list of files to make the order
# deterministic.  The removal of the DOCTYPE lines and PIs is
# admittedly lame, but good enough for the moment.
#
# componentset.xml `really' depends on all the component.xml files
# below it, but don't state this, for the reason explained above
# Makefile.dependencies.  If you add a component, then delete
# componentset.xml here and remake it.
componentset.xml: componentinfo.dtd
	echo '<!DOCTYPE componentset SYSTEM "componentinfo.dtd">' >$@
	echo '<componentset>' >>$@
	find . -name component.xml | sort | { \
	    while read cname; do \
		sed -e '/^<?/d' -e '/^<!DOCTYPE/d' $$cname >>$@; \
	    done; }
	echo '</componentset>' >>$@

# Make a link to an installed componentinfo.dtd file.  This will not
# work at bootstrap time (so the bootstrap file takes care of this
# link).  It does no harm to have the rule in, just in case this is
# used at some other time.
componentinfo.dtd:
	$(LN_S) `starconf --show buildsupportdata`/componentinfo.dtd componentinfo.dtd

# Makefile.dependencies expresses all the dependencies between components.
# It expects the current file to define variable MANIFEST to be the directory
# which holds the manifest files, typically /star/manifests
#
# This include file also contains the TARGET buildsupport
include Makefile.dependencies

$(MANIFEST)/starconf: buildsupport/starconf/install-sh

buildsupport/starconf/install-sh: $(MANIFEST)/automake $(MANIFEST)/autoconf
	cd buildsupport/starconf && \
	    aclocal && \
	    automake --add-missing && \
	    autoconf

$(RECURSIVE_TARGETS):
	for d in $(SUBDIRS); do \
	    (cd $$d; $(MAKE) $@); \
	done
