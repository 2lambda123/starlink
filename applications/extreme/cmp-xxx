#!/usr/bin/perl -w

#  Get filename.
      my( $name ) = $0;
      $name =~ s%^.*/%%;

#  Get name of filter.
      my( $filter ) = $name;
      $filter =~ s/cmp_//;
      $filter =~ s/\.pl//;

#  Open.
      if ( @ARGV < 1 || @ARGV >2 ) {
         die( "Usage: $name file [ modified-file ]\n" );
      }
      my( $f1, $f2 ) = @ARGV[ 0, 1 ];
      open( F1, "<$f1" ) or die( "Failed to open $f1\n" );
      if ( defined( $f2 ) ) {
         open( F2, "<$f2" ) or die( "Failed to open $f2\n" );
      }
      else {
         my( $cmd ) = "$filter $f1";
         open( F2, "$cmd |" ) or die( "Failed to pipe from '$cmd'\n" );
      }

#  Get normalised text.
      my( $s1 ) = normalise( $filter, join( "", <F1> ) );
      my( $s2 ) = normalise( $filter, join( "", <F2> ) );

#  Close.
      close( F1 ) or die( "Trouble with first file\n" );
      close( F2 ) or die( "Trouble with second file\n" );

#  Compare.
      if ( $s1 eq $s2 ) {
         exit( 0 );
      }
      else {
         my( @s1 ) = split( "\n", $s1 );
         my( @s2 ) = split( "\n", $s2 );
         my( $l1, $l2 );
         my( $n ) = 0;
         while ( ( $l1 = shift( @s1 ) ) eq ( $l2 = shift( @s2 ) ) ) { $n++; }
         print( " *** Edit error near line $n?:\n$l1\n$l2\n" );
         exit( 1 );
      }

   exit;


#  Fortran normalisation routine.  Gets rid of continuation lines, 
#  spaces, and (most) CNF_PVAL invocations.


#  Normalisation routine.  Depending on the name of the filter which 
#  has operated on the file, it basically removes syntactically 
#  uninteresting text, and removes changes which the filter might
#  have legitimately have inserted.  It is not very rigourous.

   sub normalise {
      my( $filter ) = shift;     # Name of filter
      local( $_ ) = shift;       # Text of file 

#  inscnf: Gets rid of continuation lines, spaces, and (most) CNF_PVAL 
#  invocations.
      if ( $filter =~ /inscnf/ ) {
         s/^\* *inscnf:.*\n//g;
         s/^ *include *'cnf_par' *(!.*)?\n//mig;
         s/\n[^*cCdD!]....[^ 0]//g;
         s/ *//g;
         s/cnf_pval\(([^)]*)\)/$1/ig;
      }

#  crepint: Changes INT_BIG back to int and collapses spaces.
      elsif ( $filter =~ /crepint/ ) {
         s%^/\* *crepint:.*?\*/ *\n%%msg;
         s/INT_BIG_(MIN|MAX)/INT_$1/g;
         s/INT_BIG/int/g;
         s/  +/ /g;
      }

#  frepint: Gets rid of continuation lines, spaces, and changes INTEGER*8
#  to INTEGER.
      elsif ( $filter =~ /frepint/ ) {
         s/^\t/      /mg;
         s%^/\* *frepint:.*?\*/ *\n%%msg;
         s/\n[^*cCdD!]....[^ 0]//g;
         s/^([ \t]*integer) *\* *8/$1/mig;
         s/[ \t]+/ /g;
      }

#  Return normalised text.
      return( $_ );
   }
      
