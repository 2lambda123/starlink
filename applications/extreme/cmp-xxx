#!/usr/bin/perl -w

#  Get filename.
      my( $name ) = $0;
      $name =~ s%^.*/%%;

#  Get name of filter.
      my( $filter ) = $name;
      $name =~ s/cmp_//;
      $name =~ s/\.pl//;

#  Open.
      my( $f1, $f2 ) = @ARGV[ 0, 1 ];
      open( F1, "<$f1" ) or die( "Failed to open $f1\n" );
      open( F2, "<$f2" ) or die( "Failed to open $f2\n" );

#  Get normalised text.
      my( $s1 ) = normalise( $filter, join( "", <F1> ) );
      my( $s2 ) = normalise( $filter, join( "", <F2> ) );

#  Close.
      close( F1 );
      close( F2 );

#  Compare.
      if ( $s1 eq $s2 ) {
         exit( 0 );
      }
      else {
         print( " *** Edit error?\n" );
         exit( 1 );
      }

   exit;


#  Fortran normalisation routine.  Gets rid of continuation lines, 
#  spaces, and (most) CNF_PVAL invocations.


#  Normalisation routine.  Depending on the name of the filter which 
#  has operated on the file, it basically removes syntactically 
#  uninteresting text, and removes changes which the filter might
#  have legitimately have inserted.  It is not very rigourous.

   sub normalise {
      my( $filter ) = shift;     # Name of filter
      local( $_ ) = shift;       # Text of file 

#  inscnf: Gets rid of continuation lines, spaces, and (most) CNF_PVAL 
#  invocations.
      if ( $filter =~ /inscnf/ ) {
         s/^\* *inscnf:.*$//g;
         s/^ *include *'cnf_par' *(!.*)?\n//mig;
         s/\n[^*cCdD!]....[^ 0]//g;
         s/ *//g;
         s/cnf_pval\(([^)]*)\)/$1/ig;
      }

#  crepint: Changes INT_BIG back to int and collapses spaces.
      elsif ( $filter =~ /crepint/ ) {
         s%^/\* *crepint:.*\*/ *$%%msg;
         s/INT_BIG/int/g;
         s/\s+/ /g;
      }

#  frepint: Gets rid of continuation lines, spaces, and changes INTEGER*8
#  to INTEGER.
      elsif ( $filter =~ /frepint/ ) {
         s/^\* *frepint:.*$//g;
         s/\n[^*cCdD!]....[^ 0]//g;
         s/ *//g;
         s/^\s*integer\*8/integer/mig;
      }

#  Return normalised text.
      return( $_ );
   }
      
