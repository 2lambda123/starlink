#!/usr/bin/perl -w

#+
#  Name:
#     extmk.pl
#
#  Purpose:
#     Modify mk file for use with EXTREME data sets.
#
#  Usage:
#     extmk.pl < mk > mk.new
#
#  Description:
#     This is a simple filter which takes a Starlink mk file as input and
#     writes as output a file which should provide the additional 
#     functionality required by the EXTREME package, i.e. it adds new 
#     SYSTEM types of alpha_OSF1_64 and sun4_Solaris_64, provides 
#     for use of the INTEGER8 macro to preprocess Fortran source code
#     before compilation, and modifies the C compilation flags for 
#     use with the INT_BIG macro.
#
#     The changes it attempts to make are as follows:
#        - Add comment blocks describing the two new values of SYSTEM
#        - Modify the comment describing the default value of CFLAGS
#        - Add a comment describing the INTEGER8 environment variable
#        - Export the INTEGER8 environment variable
#        - Modify SYSTEM-specific settings for existing SYSTEMs
#        - Add support for the two new SYSTEMs 
#
#     If it is unable to make any of the modifications it would like to,
#     it will print an explanatory message saying what it could not do.
#
#     The only change which might be required which this script does not
#     make is to set values for the SOURCE_VARIANT variable.  Depending
#     on how the system-specific compilation is going to be done, it 
#     may be desirable to add SOURCE_VARIANT='alpha_OSF1' in the new 
#     alpha_OSF1_64 stanza, and SOURCE_VARIANT='sun4_Solaris' in the 
#     new sun4_Solaris_64 stanza.  If required, this must be done by hand.
#
#     This script is not extremely intelligent - unless the mk file
#     follows the usual pattern quite closely, the output may be in
#     error, or complete rubbish.  It is intended as a convenience, 
#     and if it does not work, then it will be necessary to make the
#     modifications by hand; this is not too arduous.
#
#  Authors:
#     MBT: Mark Taylor (Starlink)
#
#  History:
#     22-FEB-2000 (MBT):
#        Initial version.
#-

#  Safe programming.
      use strict;

#  Read input.
      my( @mk );
      while (<>) {
         push( @mk, $_ );
      }
      my( $mk ) = join( '', @mk );

#  Perform some rudimentary checks on the input.
      if ( $mk =~ /alpha_OSF1_64|sun4_Solaris_64/i ) {
         print( STDERR 
                "Warning: mk file already contains 64-bit adaptations.\n",
                "         Proceeding anyway.\n" );
      }
      if ( $mk !~ /\n\# *mk *\n/ || $mk !~ /TAR_OUT/ ) {
         print( STDERR
                "Warning: input doesn't look exactly like a mk file.\n",
                "         Proceeding anyway.\n" );
      }

#  Perform the edits.
      my( %done );

#  Change the comment block describing supported systems.
      $done{ "Comment block entry for alpha_OSF1_64" } =
      $mk =~ s{
                (   ^\#  \ +  alpha_OSF1 )        \ * \n
                (   ^\#  \ +     DEC .*? )        \ * \n
                (   ^\#                           \ * \n )?
             }{
                my( $a, $b, $blank ) = ( $1, $2, ( $3 || '' ) );
                "$a\n" . "$b\n" . $blank .
                $a . "_64" . "\n" .
                $b . ", long integers" . "\n" .
                $blank;
             }mxie;

      $done{ "Comment block entry for sun4_Solaris_64" } =
      $mk =~ s{
                (   ^\#                           \ * \n )?
                (   ^\#  \ +  sun4_Solaris )      \ * \n
                (   ^\#  \ +     SUN .*?   )      \ * \n
             }{
                my( $blank, $a, $b ) = ( ( $1 || '' ), $2, $3 );
                my( $bx ) = $b;
                $bx =~ s/running /running 64-bit /i;
                $blank . "$a\n" . "$b\n" .
                $blank .
                $a . "_64" . "\n" .
                $bx . ", long integers" . "\n";
             }mxie;

#  Change the comment block describing macro defaults; modify the entry
#  for CFLAGS and insert a new entry for INTEGER8.
      $done{ "Comment block entry for new CFLAGS default" } =
      $mk =~ s{ 
                (   ^\#  \ +  CFLAGS \ *  \(  [^)]*  \)  \ * \n )
             }{
                my( $a ) = $1;
                $a =~ s/\)/ -DINT_BIG=int)/;
                $a;
             }mxe;

      $done{ "Comment block entry for INTEGER8 environment variable" } =
      $mk =~ s{
                (   ^\#                                 \ * \n )?
                (   ^\#  \ +  LINK  \ *  \(  [^)]*  \)  \ * \n )
             }{
                my( $blank, $a ) = ( ( $1 || '' ), $2 );
                my( $ax ) = $a;
                $ax =~ s/LINK/INTEGER8/;
                $ax =~ s/\([^)]*\)/(INTEGER    )/;
                my( $descrip ) = q(
                 Replacement text for 'INTEGER * 8' declarations in the original
                 original Fortran source code.  If set to the empty string,
                 INTEGER * 8 declarations will not be modified.  For 64-bit
                 systems which must be able to deal with very large images
                 this should be set to the empty string (or 'INTEGER*8').
                 Otherwise, more efficient code may be generated by setting
                 it to 'INTEGER' or 'INTEGER*4'.  The trailing whitespace is
                 optional but may make source code more readable. );
                $descrip =~ s/^\n//;
                $descrip =~ s/^ */#           /mg;
                $blank . $ax . $descrip . "\n" .
                $blank . $a;
             }mxie;

#  Change environment variable exports; add a new entry for INTEGER8.
      $done{ "INTEGER8 environment variable export" } =
      $mk =~ s{
                (   ^  \ +  export  \ +  LINK         \ * \n )
             }{
                my( $a ) = $1;
                my( $ax ) = $a;
                $ax =~ s/LINK/INTEGER8/;
                $a . $ax;
             }mxe;
                
#  We have now dealt with everything apart from the case stanzas 
#  dealing with each SYSTEM in turn.  Output the initial part of the
#  text and forget about it.
      $mk =~ s{ 
                (   .*                                   \n
                      \ + case [^\n] \$ SYSTEM  [^\n]*   \n )
             }{
                print( $1 );
                '';
             }sxe;


#  Now identify each 'case "$SYSTEM"' stanza and modify it.
#  In general these just get INTEGER8 and CFLAGS modified to reflect the 
#  new defaults, but for SYSTEM values of alpha_OSF1 and sun4_Solaris,
#  a new stanza is written for the corresponding 64-bit system.
      my( $sys );
      foreach $sys ( qw/alpha_OSF1 alpha_OSF1_64 
                        sun4_Solaris sun4_Solaris_64
                        ix86_Linux/ ) {
         $done{ "Variable settings for system $sys" } = 0;
      }
                        
      $mk =~ s{
                ( ^\# .*                                  \n )
                ( ^\# \ *  -----*    \ *                  \n )
                ( ^   \ *  \w+  \ *  \)   \ *             \n )
                (  (?: ^  .*   \S   .*   \n )+?              )
                ( ^   \ * ;;  \ *                         \n )
             }{
                my( $a, $b, $c, $d, $e ) = ( $1, $2, $3, $4, $5 );
                $c =~ /^ *(\w+) *\)/;
                my( $sys ) = $1;
                $d =~ s/(CFLAGS=.*)'/$1 -DINT_BIG=int'/g;
                $d =~ s{^( *)(LINK=.*\n)}{$1$2$1INTEGER8='INTEGER    '\n}m;
                my( $block ) = "$a$b$c$d$e";
                my( $blockx ) = '';
                $done{ "Variable settings for system $sys" } = 1;
                if ( $sys eq 'alpha_OSF1' || $sys eq 'sun4_Solaris' ) {
                   $blockx = $block;
                   $blockx =~ s/-DINT_BIG=int/-DINT_BIG=long/g;
                   $blockx =~ s/INTEGER8='INTEGER    '/INTEGER8=''/;
                   $blockx =~ s/$sys/${sys}_64/g;
                   $blockx =~ s/(\.?) *\n/, long integers$1\n/;
                   $blockx =~ s/^(\# *---)/$1---------------/;
                   $blockx = "\n" . $blockx;
                   if ( $sys eq 'sun4_Solaris' ) {
                      $blockx =~ s/(^.* running)/$1 64-bit/;
                      $blockx =~ s/^(\# *---)/$1-------/;
                      $blockx =~ s/(CFLAGS=.*)'/$1 -xarch=v9'/g;
                      $blockx =~ s/(FFLAGS=.*)'/$1 -xarch=v9'/g;
                   }
                   $done{ "Variable settings for system ${sys}_64" } = 1;
                }
                $block . $blockx;
             }mxeg;
                
#  Output the remainder of the modified text.
      print $mk;

#  Record any parts of the process which didn't get done.
      my( $task, $success );
      my( @undone );
      while ( ( $task, $success ) = each( %done ) ) {
         push( @undone, $task ) unless ( $success );
      }
      if ( @undone ) {
         print( STDERR join( "\n      ", 
                             "The following edits could not be made:",
                             @undone ),
                       "\n" );
      }


# $Id$
