#!/bin/sh

#+
#  Name:
#     do-filter
#
#  Purpose:
#     Apply source code filter to a set of files
#
#  Usage:
#     do-filter files
#
#  Description:
#     This is a driver script to run one of the filter programs in
#     the EXTREME package which modifies source code.  It should be 
#     invoked under the name 'do_xxx' to run the filter 'xxx'.
#     For each of its command line arguments (files) it:
#        - Runs the filter xxx.
#        - Writes a line to the file ./xxx.log saying how many lines were
#          changed.
#        - If and only if changes were made, it writes the modified file
#          under the same name into the directory ./xxx.changed.
#        - If the filter or this script thinks there might be something 
#          which needs human attention, it prints a line to standard output.
#
#     It then writes a short summary of the run, including a report of
#     whether any files gained new dependencies on include files.
#
#     As part of its checking, it invokes a script called cmp_xxx
#     on each pair of (original, changed) files; these scripts are 
#     crude checks that the changes made have not done anything to the
#     source code to change its intention other than what should have 
#     been done.  They have been written in a fairly quick and dirty 
#     way however, and may well turn up false positives or false negatives.
#
#  Authors:
#     MBT: Mark Taylor (STARLINK)
#
#  History:
#     17-JAN-2000 (MBT):
#        Initial version.
#-

#  Get name of driver script and filter.
      driver=`echo $0 | sed 's%.*/%%'`
      filter=`echo $driver | sed 's%^do_%%'`

#  Set up destination directory, logfile and comparison script.
      destdir="./$filter.changed"
      logfile="./$filter.log"
      cmp_scr="cmp_$filter"

#  Set up temporary file for buffering warnings.
      warnfile="$destdir/.tmp.warnings"

#  Check command line arguments.
      if [ ! "$*" ] 
      then
         echo "Usage: $driver files"
         exit 1
      else
         :
      fi

#  Add EXTREME_DIR to path if it is defined.
      if [ "$EXTREME_DIR" ]
      then
         PATH=${PATH}:$EXTREME_DIR
         export PATH
      else
         :
      fi

#  Set up location of commands.
      compare="`which $cmp_scr`"
      if [ `which $filter | wc -w` = "1" -a `which $cmp_scr | wc -w` = "1" ]
      then
         :
      else
         echo "$driver: The $filter and $cmp_scr commands must be in the path."
         exit 1
      fi
 
#  Initialise files.
      mkdir -p $destdir
      rm -f $logfile

#  Initialise counters.
      nf="0"
      nc="0"
      Nextreme="0"
      Nextpar="0"
      Ncnfpar="0"

#  Process each file.
      for f in $@
      do

#  Get names of input and output files.
         infile="$f"
         outfile="$destdir/$f"

#  Do the processing
         rm -f $warnfile
         if $filter $infile $outfile > $warnfile 2>&1 
         then
            :
         else
            echo >>$warnfile "$filter exited with non-zero status"
         fi

#  See if the processing made any changes.  Remove the output file if not.
         changed=`diff $infile $outfile | grep -c "^<"`
         if [ "$changed" = "0" ]
         then
            rm $destdir/$f
         else
            nc=`echo $nc 1 + p | dc`
         fi

#  Specific tests for the inscnf filter.
         if [ "$filter" = "inscnf" ]
         then

#  See if the input file apparently contains %VAL and CNF_PVAL.  This 
#  is just a crude check to see whether it looks like modifications 
#  have got done on the right files.
            if grep -i '^ .*%VAL' $infile >/dev/null
            then
               isval=1
            else
               isval=0
            fi
            if grep -i '^ .*CNF_PVAL' $infile >/dev/null
            then
               iscnf=1
            else
               iscnf=0
            fi
            if [ "$isval" = "1" -a "$iscnf" = "0" ]
            then
               should=1
            else
               should=0
            fi

#  Write a warning if it looks like the wrong modifications have been made.
#  Such warnings probably indicate that %VAL crops up in a comment, or
#  something like that, but should perhaps be checked out (by a manual
#  diff) to check whether there is anything to worry about.
            if [ "$changed" = "0" -a "$should" != "0" ]
            then
               warn="%VAL without CNF_PVAL present, but no changes"
            elif [ "$changed" != "0" -a "$should" = "0" ]
            then
               if [ "$isval" = "0" ]
               then
                  warn="No %VAL, but changes were made"
               else
                  warn="CNF_PVAL present, but changes made"
               fi
            else
               warn=""
            fi
            if [ "$warn" ]
            then
               echo $warn >> $warnfile
            else
               :
            fi

         fi

#  Check that no mistakes have been made while breaking lines etc.
#  This uses a quick and dirty Perl script - again, an error here 
#  does not necessarily mean that something has gone wrong, but could
#  use a check.
         if [ "$changed" != "0" ]
         then
            if $compare $infile $outfile >/dev/null
            then
               :
            else
               warn="Possible error in modifications?"
               echo $warn >> $warnfile
            fi
         else
            :
         fi

#  Check that no new lines exceed 73 characters for the fortran filters.
         if [ "$filter" = "inscnf" -o "$filter" = "frepint" ]
         then
            if [ "$changed" != "0" ]
            then
               if [ "`diff $infile $outfile | grep '^> ' \
                                            | sed 's/!.*//; s/ *$//; s/^> //' \
                                            | awk 'length(\$0)>72'`" ]
               then
                  warn="Line extended past column 72?"
                  echo $warn >> $warnfile
               else
                  :
               fi
            else
               :
            fi
         else
            :
         fi

#  Maintain count of whether file contains new include dependencies.
         if [ "$changed" != "0" ]
         then
            for incfile in extreme.h EXT_PAR CNF_PAR
            do
               if grep "$incfile" "$outfile" >/dev/null
               then 
                  if grep "$incfile" "$infile" >/dev/null
                  then
                     :
                  else
                     case "$incfile" in
                        extreme.h) Nextreme=`echo $Nextreme + 1 | bc` ;;
                        EXT_PAR)   Nextpar=`echo $Nextpar + 1 | bc` ;;
                        CNF_PAR)   Ncnfpar=`echo $Ncnfpar + 1 | bc` ;;
                     esac
                  fi
               else
                  :
               fi
            done
         else
            :
         fi

#  Print any warnings to standard output - no need to repeat the same ones.
         if [ -s $warnfile ]
         then
            sed "s/$filter: //" < $warnfile | sort | uniq -c | \
            while read count errtext
            do
               if [ "$count" = "1" ]
               then
                  printf "%-20s %3s   %-48s  \n" "$f:" "   " "$errtext"
               else
                  printf "%-20s %3s x %-48s  \n" "$f:" "$count" "$errtext"
               fi
            done
         else
            :
         fi
         rm -f $warnfile

#  Write to log file.
         printf >>$logfile "%-30s  %4d lines changed\n" "$infile" "$changed"
         nf=`echo $nf 1 + p | dc`
      done

#  Summarise to standard output.
      echo " "
      if [ "$Nextreme" != "0" ]
      then
         echo $Nextreme new dependencies on include file '"extreme.h"'.
      else
         :
      fi
      if [ "$Nextpar" != "0" ]
      then
         echo $Nextpar new dependencies on include file "'EXT_PAR'".
      else
         :
      fi
      if [ "$Ncnfpar" != "0" ]
      then 
         echo $Ncnfpar new dependencies on include file "'CNF_PAR'".
      else
         :
      fi
      echo "$nc/$nf modified files written in $destdir."
      echo "Logfile is $logfile."
      


# $Id$
