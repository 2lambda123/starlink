      SUBROUTINE CUG1_FILLA<T>( MAPPING, DIM, NPOINT, NVIN, NVOUT, 
     :                          ARRAY, STATUS )

*+
*  Name:
*     CUG1_FILLA

*  Purpose:
*     Calls GUG1_DOAST to transform the axis values then fills the AXIS
*     CENTRE ararys

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CUG1_FILLA()

*  Arguments:
*     MAPPING = _INTEGER (Given)
*        Mapping to be used in the transformation
*     DIM = _INTEGER (Given)
*        The current axis under consideration
*     NPOINT = _INTEGER (Given)
*        The number of points to be transformed
*     NVIN = _INTEGER (Given)
*        Dimensionality of input array
*     NVOUT = _INTEGER (Given)
*        Dimensionality of output array
*     ARRAY = _<TYPE> (Given)
*        Array of mapped axis values
*     STATUS = _INTEGER (Given and Returned)
*        The global status.

*  Description:
*     Setup routine to fill array for CUG1_DOAST, we're only interested
*     in the AXIS values so we don't have to transform every single point
*     in the N-Dimensional NDF, so fill the array and call AST_TRANN to
*     do the tansformation (from CUG1_DOAST), then write the AXIS centre
*     arrays back out.

*  Copyright:
*     Copyright (C) 2000 Central Laboratory of the Research Councils

*  Authors:
*     AALLAN: Alasdair Allan (STARLINK, Keele University)

*  History:
*      06-SEP-2000 (AALLAN):
*        Original version.

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE                  ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'         
      INCLUDE 'NDF_PAR'        
      INCLUDE 'AST_PAR'

*  Arguments Given:
      INTEGER DIM                    ! The current axis
      INTEGER MAPPING                ! Pointer to the mapping
      INTEGER NPOINT                 ! Number of points to be mapped
      INTEGER NVIN                   ! Number of input dimensions
      INTEGER NVOUT                  ! Number of output dimensions
      <TYPE> ARRAY( NPOINT )         ! Input array

*  Arguments Returned:

*  Status:
      INTEGER STATUS                 ! Global status
      
*  External References:        
   
*  Local Variables:
      INTEGER I, J                      ! Loop counters
      
      <TYPE> ASTIN( NPOINT, NVIN )      ! AST_TRANN input array
      <TYPE> ASTOUT( NPOINT, NVOUT )    ! AST_TRANN output array

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'          ! Numeric conversion statement functions
      INCLUDE 'NUM_DEF_CVT'          ! Numeric conversion statement functions            
*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

* Fill ASTIN

      DO I = 1, NPOINT
         DO J = 1, NVIN
            IF( J .EQ. DIM ) THEN 
               ASTIN( I, J ) = ARRAY( I )
            ELSE
               ASTIN( I, J ) = 1<CONST>
            ENDIF
         ENDDO
      ENDDO

*  Call the transformation subroutine by type      
      CALL CUG1_DOAST<T>( MAPPING, NPOINT, NVIN, ASTIN, .TRUE.,
     :                   NVOUT, ASTOUT, STATUS )          


*  Fill ARRAY

      DO I = 1, NPOINT
         DO J = 1, NVIN
            IF( J .EQ. DIM ) THEN 
               ARRAY( I ) = ASTOUT( I, J )
            ENDIF
         ENDDO
      ENDDO

*  Clean up - Arrive here if an error occurs
*  ========================================= 

940   CONTINUE

960   CONTINUE

999   CONTINUE

*  If an error occurred, then report a contextual message.
      IF ( STATUS .NE. SAI__OK ) THEN
         CALL ERR_REP( 'CUB1_DOAST_ERR',
     :      'CUB1_DOAST: Problems doing co-ordinate transformation.',
     :                  STATUS )
      END IF

*  Time at the bar please...
      END







