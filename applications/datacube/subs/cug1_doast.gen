      SUBROUTINE CUG1_DOAST<T>( MAPPING, NPOINT, NVIN, IN, FORWARD,
     :                          NVOUT, OUT, STATUS )

*+
*  Name:
*     CUG1_DOAST

*  Purpose:
*     Take a N dimensional array and transforms it using the mapping provided.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CUG1_DOAST<T>( MAPPING, NPOINT, NVIN, IN, FORWARD,
*    :                    NVOUT, OUT, STATUS )

*  Arguments:
*     MAPPING = _INTEGER (Given)
*        Mapping to be used in the transformation
*     NPOINT = _INTEGER (Given)
*        The number of points to be transformed
*     NVIN = _INTEGER (Given)
*        Dimensionality of input array
*     IN ( SIZIN, NVIN ) = <TYPE> (Given)
*        The N-dimensional input array
*     FORWARD = _LOGICAL (Given)
*        Direction of transformation
*     NVOUT = _INTEGER (Given)
*        Dimensionality of output array
*     OUT ( SIZOUT, NVOUT ) = <TYPE> (Given)
*        The N-dimensional input array
*     STATUS = _INTEGER (Given and Returned)
*        The global status.

*  Description:
*     Takes the mapping provided by the calling routine and a N-dimensional
*     array and transforms the co-ordinates, passing the new array back to
*     the calling routine. The routine serves as a wrapper for AST_TRANN
*     taking care of type conversions.

*  Copyright:
*     Copyright (C) 2000 Central Laboratory of the Research Councils

*  Authors:
*     AALLAN: Alasdair Allan (STARLINK, Keele University)

*  History:
*      06-SEP-2000 (AALLAN):
*        Original version.

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE                  ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'         
      INCLUDE 'NDF_PAR'        
      INCLUDE 'AST_PAR'

*  Arguments Given:
      INTEGER MAPPING                ! Pointer to the mapping
      INTEGER NPOINT                 ! Number of points to be mapped
      INTEGER NVIN                   ! Number of input dimensions
      INTEGER NVOUT                  ! Number of output dimensions
      LOGICAL FORWARD                ! Direction of transformation
      <TYPE> IN( NPOINT, NVIN )      ! Input array

*  Arguments Returned:
      <TYPE> OUT( NPOINT, NVOUT )    ! Output array       

*  Status:
      INTEGER STATUS                 ! Global status
      
*  External References:        

*  Local Variables:
      INTEGER I,J,K                            ! Loop counters

      DOUBLE PRECISION DIN( NPOINT, NVIN )     ! Double version of IN
      DOUBLE PRECISION DOUT( NPOINT, NVOUT )   ! Double version of OUT

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'          ! Numeric conversion statement functions
      INCLUDE 'NUM_DEF_CVT'          ! Numeric conversion statement functions            
*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN


*  Fill DIN()
      DO I = 1, NPOINT
         DO J = 1, NVIN
            DIN( I, J ) = NUM_<T>TOD( IN( I, J ) )
         END DO
      END DO

*  Call AST_TRANN

      CALL AST_TRANN( MAPPING, NPOINT, NVIN, NPOINT, DIN,
     :                FORWARD, NVOUT, NPOINT, DOUT, STATUS)

*  Fill OUT()
      DO I = 1, NPOINT
         DO J = 1, NVOUT
            OUT( I, J ) = NUM_DTO<T>( DOUT( I, J ) )
         END DO
      END DO

*  Clean up - Arrive here if an error occurs
*  ========================================= 

940   CONTINUE

960   CONTINUE

999   CONTINUE

*  If an error occurred, then report a contextual message.
      IF ( STATUS .NE. SAI__OK ) THEN
         CALL ERR_REP( 'CUB1_DOAST_ERR',
     :      'CUB1_DOAST: Problems doing co-ordinate transformation.',
     :                  STATUS )
      END IF

*  Time at the bar please...
      END







