#!/bin/csh
#+
#  Name:
#     trendview

#  Purpose:
#     Plots multiple spectra from a cube overlaying fitted trends and
#     mask.

#  Language:
#     Unix C-shell

#  Usage:
#     trendview [-d device] [-i filename] [-o offset] [-r] [-s suffix]
#               [-y ytop[,ybot]]

#  Description:
#     This displays whole or part of a spectral cube in a multiple
#     line plot graphic of data values versus spectral co-ordinates
#     via KAPPA:CLINPLOT.  In addition to the raw data, fitted trends
#     and masks generated by KAPPA:MFITTREND are overlaid in different 
#     colours for comparison and quality assessment.  There is an option 
#     to also draw the residuals.  The raw data appear in yellow, the 
#     fitted trends in darkgreen, the mask in red, and the residuals in
#     blue.
#
#     The lower-left plot has annotated axes of data value against 
#     spectral co-ordinates.
#
#     For ease of use the baseline and mask files have defined names
#     given by the name argument and suffix arguments.  See the Notes.

#  Arguments:
#     -d
#       The device name.  [xwindows]
#     -i filename
#       The name of the raw dataset.  The specified file should be a 
#       three-dimensional NDF.  By default the script will prompt for 
#       the input file.  A section may be defined to home in either
#       or both spatial and spectral regions.
#     -o
#       An offset to apply to the mask, whose good values are 0.  In
#       other words the data-value level at which to draw the mask.  Its 
#       purpose is improve mask visibility; and to narrow the y plotting 
#       range, hence see the residuals between the raw data the fitted 
#       trends more clearly.  [0]
#     -r
#       If present the residuals are plotted.
#     -s
#       The file suffix appended to the baseline and mask file names. [""]
#     -y ytop[,ybot]
#       A comma-separated list giving the upper and lower data-value limits 
#       of every spectrum plot in either order.  A positive lower limit 
#       will be ignored if the offset (-o) is not positive too or when
#       residuals are to be plotted (-r).  A single value is deemed to 
#       be the upper limit, and the lower limit is defaulted.
#
#       If this option is not specified, the limits derive from the 
#       range given by the 1 and 99 percentiles, extending by 5% of this 
#       range below its minimum and 2% above its maximum.  However, a 
#       positive lower limit may again be substituted by a default 
#       whenever the offset is not positive too, or residuals are 
#       to be plotted.
#
#       When the lower limit requires a default, it is set to negative 
#       one twentieth of the upper limit if there is no (-o) offset 
#       applied to the mask, otherwise it is the offset level minus a 
#       twentieth of the range between the upper limit and the offset.
#       []

#  Examples:
#     trendview -i ac9_trim -y 8
#        Plots the spectra in NDFs ac9_trim, ac9_trim_bsl, and
#        ac9_trim_msk between data values -0.4 and 8.
#     trendview -i ac9_trim"(2~10,4~8,)" -y 0.5,10 
#        As before but the plot range is -0.5 to 10, and display only
#        displays a 10-by-8 spatial pixel region.
#     trendview -i ac9_trim"(2~10,4~8,-200:200)" -y 0.5,10
#        As the previous example but now only a part (-200 to 200) of 
#        the spectral range appears in each plot.
#     trendview -i ac9_trim -o _o4 -o 7
#        Plots the spectra in NDFs ac9_trim, ac9_trim_bsl_o4, and
#        ac9_trim_msk_o4 between data values derived automatically
#        percentiles in ac9_trim, with the mask line drawn at value 7.
#     trendview -i ac9_trim"(2~10,4~8,)" -r -y -3,8
#        As the second example but now the residuals are also plotted.
#        The lower data-value limit on the plots is -3 to accommodate
#        negative residuals.   

#  Notes:
#     -  The raw data is given by the -i argument; the fitted trends or 
#     baselines is called <filename>_bsl<suffix>; and the mask is called
#     <filename>_msk<suffix>, where <filename> is value of the -i option
#     without any section or file extension and <suffix> is the value of
#     option -s.
#     -  No key is plotted and the margins are narrow to maximise the
#     plot region.  However, these are not guaranteed to work with
#     all aspect ratios of the graphics device and spatial pixels, and
#     for example the title may be clipped or completely absent.  This 
#     is unlikely to cause any hardship while used an exploratory tool.
#     However, as is normal for a publication graphic, some adjustments 
#     of the style options may be required.  See "Descriptions of
#     Plotting Attributes" in SUN/95 to be used with STYLE parameter
#     in the CLINPLOT calls, and the margins can be enlarged through
#     the MARGIN parameter.

#  Output:
#     A composite CLINPLOT plot showing the raw data, and the baseline 
#     fit and mask from MFITTREND.

#  Prior Requirements:
#     -  The supplied NDFs should be spectral cubes with the spectral
#     being the third.
#     -  A large display area is recommended if the screen is used
#     for display, for instance
#         xmake xwindows -width 1200 -height 900
#     that mostly fills the screen.  The actual width and and height
#     in pixels will depend on your screen's dimensions.
#
#     Also a suitable background colour is needed that will show all 
#     four loci for the hardwired colours.  This should be of 
#     mid-intensity so that the light and dark curves will both be
#     visible.  For example,
#         palentry 0 steelblue
#     will do this for the original colour scheme.

#  Copyright:
#     Copyright (C) 2007-2008 Science & Technology Facilities Council. 
#     All Rights Reserved.

#  Licence:
#     This program is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as
#     published by the Free Software Foundation; either Version 2 of
#     the License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be
#     useful, but WITHOUT ANY WARRANTY; without even the implied
#     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#     PURPOSE. See the GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software
#     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#     02111-1307, USA.

#  Authors:
#     MJC: Malcolm J. Currie (Starlink)
#     {enter_new_authors_here}

#  History:
#     2007 October 6 (MJC):
#        Original version.
#     2008 June 30 (MJC):
#        Adapted for DATACUBE: replaced name argument with -i option, and
#        removed -v option.  Use DATACUBE definitions and NDF validation.
#     {enter_further_changes_here}

#-

# On interrupt tidy up.
onintr cleanup

# Get the user name.
set user = `whoami`
set tmpdir = "/tmp"

# Clean up from previous runs.
rm -f ${tmpdir}/${user}/trendview_*.sdf >& /dev/null

# Do the variable initialisation.
mkdir ${tmpdir}/${user} >& /dev/null
set trendview_real = "${tmpdir}/${user}/trendview_real.sdf"
set trendview_mask = "${tmpdir}/${user}/trendview_mask.sdf"
set trendview_residual = "${tmpdir}/${user}/trendview_residual.sdf"

# Obtain parameters.
# ==================

# Set options access flags.
set gotinfile = "FALSE"
set gotlimits = "FALSE"

#  Initialize some shell variables.
set offset = 0
set plotres = 0
set devname = "xwindows"
set suffix = ""

# Process each of the arguments to the script.
set args = ($argv[1-])
while ( $#args > 0 )
   switch ($args[1])
   case -d:    # Device name
      shift args
      set devname = $args[1]
      shift args
      breaksw
   case -i:    # Input three-dimensional IFU NDF
      shift args
      set gotinfile = "TRUE"
      set infile = $args[1]
      shift args
      breaksw
   case -o:    # Mask level
      shift args
      set offset = $args[1]
      shift args
      breaksw
   case -r:    # Plot residuals
      shift args
      set plotres = 1
      breaksw
   case -s:    # File suffix of baseline and mask files
      shift args
      set suffix = $args[1]
      shift args
      breaksw
   case -y:    # Data-value limits in plots
      shift args
      set slimit = $args[1]
      set gotlimits = "TRUE"
      shift args
      breaksw
   case *:     # rubbish disposal
      shift args
      breaksw
   endsw
end

# Invoke the package setup.  Conceal the startup messages.
alias echo 'echo > /dev/null'
source ${DATACUBE_DIR}/datacube.csh
unalias echo

# Validate parameters.
# ====================

# Obtain the NDF if it is not supplied on the command line.  Validate that
# the NDF exists and is a cube.  Obtain $infile, $ndf_section, and $dims.
source ${DATACUBE_DIR}/checkndf.csh -s trendview
if ( $status == 1 ) exit

# User defined range?  If so, extract the values.
if ( ${gotlimits} == "TRUE" ) then
   set ylimits = `echo $slimit | awk '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}'`
   if ( $#ylimits == 2 ) then
      set bot = `calc exp="min($ylimits[1],$ylimits[2])"`
      set top = `calc exp="max($ylimits[1],$ylimits[2])"`
   else
      set top = $ylimits
      set bot = `calc exp="($offset)-0.05*(($top)-($offset))"`
   endif

# Find sensible limits from the data themselves.
else
   histat ndf=${infile}"${ndf_section}" percentiles="[1,99]" > /dev/null
   set percnt = `parget perval histat`
   set maxval = $percnt[2]
   set minval = $percnt[1]

   set top = `calc exp="$maxval+(($maxval)-($minval))*0.02"`
   set bot = `calc exp="$minval-0.05*(($maxval)-($minval))"`
endif
     
# Set default lower limit.  For zero mask offset, each plot lower y limit
# must include 0 and a little room for the axis tick marks.  We'll assume
# that the upper plot limit is positive.
if ( `calc exp="($offset)==0&&($bot)>=0"` == 1 ) then
   set bot = `calc exp="-0.05*$top"`

# Allow some room for residuals.
else if ( $plotres == 1 && `calc exp="($bot)>=0"` == 1) then
   set bot = `calc exp="-0.05*$top"`

else if ( `calc exp="($offset)<($bot)"` == 1 ) then
   set bot = `calc exp="($offset)-0.05*(($top)-($offset))"`
endif

# Plot raw spectra, baselines, masks, and optionally the residuals.
# =================================================================

# Plot the raw spectra in the chosen region with yellow double thickness 
# for improved visibility.  There is no key and narrow margins, where the 
# axes are just visible to increase the room for the plots.  Ensure we
# are looking at the data array.
clinplot ndf=${infile}"${ndf_section}" nokey margin="[0.11,0.05,0.05,0.08]" \
         lmode=range ybot=$bot ytop=$top comp=d reflabel useaxis=spec \
         style='"width=3.0,colour(border)=green,NumLabGap(1)=0.0,TextLabGap=0.005"' \
         specstyle='"colour(curve)=yellow,width=2.0"' 

# Overlay the fitted baseline in thicker darkgreen.
clinplot ndf=${infile}_bsl${suffix}"${ndf_section}" nokey noclear \
         lmode=range ybot=$bot ytop=$top \
         specstyle='"colour(curve)=darkgreen,width(curve)=3.0"'

# Overlay the mask pattern in thicker darkgreen.  The default is
# that this has values of 0 for good and bad elsewhere.  If the raw
# spectra lie well above that it can result in hard to view spectra
if ( `calc exp="$offset==0"` == 1 ) then
   clinplot ${infile}_msk${suffix}"${ndf_section}" nokey noclear \
            lmode=range ybot=$bot ytop=$top \
            specstyle='"colour(curve)=red,width(curve)=3.0"'

# The mask NDF has _BYTE type data array.  To achieve non-integer offsets, 
# first make a _REAL type copy.
else
   ndfcopy in=${infile}_msk${suffix}"${ndf_section}" out=${trendview_real}
   settype ndf=${trendview_real} type=_REAL
   cadd in=${trendview_real} scalar=$offset out=${trendview_mask}
   \rm -f ${trendview_real}
   clinplot ${trendview_mask} nokey noclear lmode=range ybot=$bot ytop=$top \
            specstyle='"colour(curve)=red,width(curve)=3.0"'
   \rm -f ${trendview_mask}
endif

if ( $plotres == 1 ) then
   sub in1=${infile}"${ndf_section}" in2=${infile}_bsl${suffix}"${ndf_section}" \
       out=${trendview_residual}
   clinplot ${trendview_residual} nokey noclear lmode=range ybot=$bot ytop=$top \
            specstyle='"colour(curve)=blue2,width(curve)=3.0"'
   \rm -rf ${trendview_residual}
endif

# Clean up.
# ========
cleanup:

rm -f ${tmpdir}/${user}/trendview_*.sdf >& /dev/null
rmdir ${tmpdir}/${user} >& /dev/null

end