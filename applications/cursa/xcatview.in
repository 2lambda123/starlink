#! @AWISH@
#
#  Explicit paths for executables etc.  These are edited at install time
#  and the flag indicating whether xcatview is running on a networked
#  computer  or not.

    global  catviewExe
    global  catremoteExe

    set     catviewExe   @bindir@/catview
    set     catremoteExe @bindir@/catremote
    lappend auto_path    @bindir@/xcatviewLib
    set     networked    @NETWORKED@

#    set     catviewExe   /home/acd/starbase/cursa/atasks/catview
#    set     catremoteExe /home/acd/starbase/cursa/catremote/catremote
#    lappend auto_path    /home/acd/starbase/cursa/xcatview/lib
#    set     networked   "yes"

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#  xcatview

#  GUI for the Starlink catalogue browing application catview.

#   ACD, 

#  History:
#   11/5/94  (ACD): Original version.
#   13/4/95  (ACD): First stable version.
#   26/2/96  (ACD): Added global variable angleReformat.
#   27/2/96  (ACD): Added option to close the existing catalogue and
#     open a new one without leaving xcatview.
#   28/2/96  (ACD): Added option to change the width of the main
#     display window.
#   18/10/96 (ACD): Modified for Tcl/Tk v4 and expect v5.
#   3/12/96  (ACD): Added option for showing column statistics.
#   18/12/96 (ACD): Re-initialise list of columns for statistics
#     when opening a new catalogue.
#   25/3/97  (ACD): Added remote catalogue access.
#   15/6/97  (ACD): Tidied up for CURSA release 3.1.
#   26/3/98  (ACD): Explicitly specified the spawn id.  when closing
#     catview in order to avoid a core dump on Linux.
#   19/11/98 (ACD): Added options for scatterplot.
#   11/12/98 (ACD): Commented out options for scatterplot.
#   8/9/99   (ACD): Changed to communicate with ADAM tasks via STARTCL
#     rather than EXPECT.
#   26/4/01  (ACD): Modified for the new version of catremote written
#      Perl.
#-

#
#  Set the details of the window and icon.

    wm title     . xcatview
    wm iconname  . xcatview
    wm minsize   . 1 1

#
#  Declare global variables.
#  ========================

#
#  The current directory.

    global currentDir
    set    currentDir  ""

#
#  The list of subdirectories in the current directory.

    global subdirectoryList
    set    subdirectoryList ""

#
#  The list of catalogues in the current directory.

    global cataloguesList
    set    cataloguesList  ""

#
#  The short and long names of databases accessible on the remote server.

    global remoteCatsShort
    set    remoteCatsShort  ""

    global remoteCatsLong
    set    remoteCatsLong  ""

#
#  List of directories of remote catalogues which have been accessed.

    global env

    global catDirLevel
    set    catDirLevel  1

    global catDirList
    if {$networked == "yes"} then {
       if {[catch {set catDirList($catDirLevel) $env(CATREM_CONFIG)}]} then {
          puts stdout "The list of remote catalogues is not defined."
          set networked "no"
          set catDirList($catDirLevel) "(none)"
       }
    } else {
       set catDirList($catDirLevel) "(none)"
    }

#
#  Quiet mode.

    global quietMode
    set    quietMode  "false"

#
#  Details of query submitted to a remote database.

    global remoteQueryCat
    set    remoteQueryCat     ""

    global remoteQueryRA
    set    remoteQueryRA      ""

    global remoteQueryDec
    set    remoteQueryDec     ""

    global remoteQueryRadius
    set    remoteQueryRadius  20

    global remoteQueryMaxRows
    set    remoteQueryMaxRows 1000

#
#  Names of optional files specifying details of the subset extracted
#  from a remote database.

    global remoteQueryDetails
    set    remoteQueryDetails "none"

    global remoteQueryCols
    set    remoteQueryCols    "none"

#
#  Name of the catalogue that xcatview is viewing.

    global catalogueName  ""

#
#  The list of all the columns in the catalogue.

    global catalogueList
    set    catalogueList  ""

#
#  The list of all the columns and expressions which currently are
#  chosen for display.

    global chosenColumns
    set    chosenColumns  ""

#
#  Flag indicating whether commands sent to the underlying ADAM A-task
#  are to be echoed in the error window.  It is coded as follows:
#
#    0 - do not echo commands,
#    1 - echo commands.
#
#  Note that the default is that commands are not echoed.

    global echoCommand
    set    echoCommand  0

#
#  The new current row number for listing the current selection.

    global currentRow
    set    currentRow  1

#
#  The column on which a range selection is to be performed.

    global rangeColumn
    set    rangeColumn  ""

#
#  The minimum value for a range selection.

    global rangeMin
    set    rangeMin  ""

#
#  The maximum value for a range selection.

    global rangeMax
    set    rangeMax  ""

#
#  Value returned by the general-purpose value entry widget GetParam

    global GetParamValue

#
#  The number of the selection chosen to be the new current selection.

    global selectionNumber
    set selectionNumber   1

#
#  The expression to define a new selection.

    global selectionExpression 

#
#  Variables to hold the name and new units and display format for a
#  column.

    global columnName
    set columnName        ""

    global columnUnits
    set columnUnits       ""
    
    global columnFormat
    set columnFormat      ""

#
#  Variables to control display of statistics for individual columns.
#
#  The list of all the columns for which statistics are to be computed.

    global statsColumns
    set    statsColumns  ""

#
#  The name of the file to which the statistics will be written.

    global statsFile
    set    statsFile  ""

#
#  The number of decimal places to which the statistics will be
#  displayed.

    global statsDecPl
    set    statsDecPl  3

#
#  Variables to control the appearance of the interactive display.

    global widthChange
    set widthChange      "n"

    global screenWidth
    set screenWidth       99

    global screenHeight
    set screenHeight      23

    global sequenceNumber
    set sequenceNumber   "y"

    global numberListed
    set numberListed      21

    global angleRepn
    set angleRepn        "SEXAGESIMAL"

    global angleReformat
    set angleReformat    "y"

#
#  Variable to control the appearance of, and the items included in,
#  an output text file.  Also the range of rows to be listed and the 
#  name of the output file.
#
#  The values for the options have the following meanings:
#
#   A  -  the item is absent,
#   S  -  display a summary of the item,
#   F  -  display the item in full.
#
#  textfileFirstRow and textfileLastRow hold the numbers of the first 
#  and last row to be listed respectively.  If textfileLastRow is set
#  to zero it has the special meaning that the last row to be listed
#  is the last row in the current selection.


    global textfileWidth 
    set    textfileWidth       132

    global textfilePage
    set    textfilePage         50

    global textfileSummary
    set    textfileSummary     "F"

    global textfileColumns
    set    textfileColumns     "S"

    global textfileParameters
    set    textfileParameters  "S"

    global textfileText
    set    textfileText        "A"

    global textfileTable
    set    textfileTable       "F"

    global textfileFirstRow
    set    textfileFirstRow     1

    global textfileLastRow
    set    textfileLastRow      0

    global textfileName
    set    textfileName        ""

#
#  Variables to control the options for a saved catalogue.  Also the
#  name and any comments for the catalogue.

    global saveCatColumns
    set    saveCatColumns "T"

    global saveCatText
    set    saveCatText    "F"

    global saveCatName
    set    saveCatName    ""

    global saveCatComm
    set    saveCatComm    ""

#
#  Variables to define and control a scatterplot.

     global scatterOpen
     set    scatterOpen         "F"

     global scatterDevice
#     set    scatterDevice       "/XWIN"
     set    scatterDevice       "xw"

     global scatterFlag
     set    scatterFlag         "F"

     global scatterTitle
     set    scatterTitle        ""

     global scatterXaxis
     set    scatterXaxis        ""

     global scatterYaxis
     set    scatterYaxis        ""

     global scatterPlotSymbol
     set    scatterPlotSymbol   "OPENCIRCLE"

     global scatterSymbolColour
     set    scatterSymbolColour "DEFAULT"

     global scatterAutoScale
     set    scatterAutoScale    "YES"

     global scatterXmin
     set    scatterXmin         ""

     global scatterXmax
     set    scatterXmax         ""

     global scatterYmin
     set    scatterYmin         ""

     global scatterYmax
     set    scatterYmax         ""

#
#  Variables to define and control a histogram.

     global histOpen
     set    histOpen         "F"

     global histDevice
     set    histDevice       "xw"

     global histFlag
     set    histFlag         "F"

     global histTitle
     set    histTitle        ""

     global histXaxis
     set    histXaxis        ""

     global histLineColour
     set    histLineColour "DEFAULT"

     global histAutoScale
     set    histAutoScale    "YES"

     global histXmin
     set    histXmin         ""

     global histXmax
     set    histXmax         ""

     global histBinSpec
     set    histBinSpec      "NO"

     global histBinDet
     set    histBinDet       40

     global histNormal
     set    histNormal       "NO"

#
#  Flag; is the application being driven from a GUI?

    global isGUI
    set isGUI            "y"

#  ------------------------------------------------

#
#  Create a menubar as frame widget along the top of the window.  Note
#  that pack is invoked with the 'fill x' option in order to stretch
#  the menubar along the top of the window.

    frame .menubar -relief groove -bd 2
    pack  .menubar -fill x

#
#  Define three menus and button to go in the menubar.

    menubutton .menubar.file    -text "File   "   -menu .menubar.file.menu
    pack       .menubar.file    -side left

    menubutton .menubar.list    -text "Listing   " -menu .menubar.list.menu
    pack       .menubar.list    -side left

    menubutton .menubar.select  -text "Selection   " -menu .menubar.select.menu
    pack       .menubar.select  -side left

    menubutton .menubar.plot    -text "Plotting    " -menu .menubar.plot.menu
    pack       .menubar.plot    -side left

    button     .menubar.config  -text "Configuration   "  -bd 0 \
      -command {GetConfig; Action SETCONF}
    pack       .menubar.config  -side left

    menubutton .menubar.help    -text "Help   "  -menu .menubar.help.menu
    pack       .menubar.help    -side right

#
#  Define the options for the 'File' menu.

    menu .menubar.file.menu

    .menubar.file.menu add command \
       -label "Save as catalogue"  \
       -command {
           GetCat
           if {$saveCatName != ""} then {
              Action SAVECAT
           } else {
              Error "No catalogue specified; a catalogue will not be created."
           }
        }

    .menubar.file.menu add command \
       -label "Save as text file"  \
       -command {
           GetFile
           if {$textfileName != ""} then {
              Action SETFILE
              Action FILE
           } else {
              Error "No file specified; an output file will not be created."
           }
        }

    .menubar.file.menu add command \
       -label "Open new catalogue" \
       -command {
           global catalogueName
           if {$catalogueName != ""} then {
              Action EXIT
              catview kill
           }

           GetCatalogue

           if {$catalogueName != ""} then {
              OpenCat local

           } else {
              Error "No catalogue specified."
           }
        }

#
#  Add the option for accessing remote catalogues.  If xcatview
#  has been configured for running on stand-alone computer (with
#  no network connections) then this option is disabled.

    if {$networked == "yes"} then {
       .menubar.file.menu add command \
         -label "Access remote catalogue"  \
         -command {
           global catalogueName
           if {$catalogueName != ""} then {
              Action EXIT
              catview kill
           }

           OpenRemote}
    } else {
       .menubar.file.menu add command \
         -state disabled \
         -label "Access remote catalogue"  \
         -command {Error "Remote access not available."}
    }
      
    .menubar.file.menu add command \
       -label Quit \
       -command {
           global catalogueName
           if {$catalogueName != ""} then {
              Action EXIT
              catview kill
           }
           exit
        }

#
#  Define the options for the 'Listing' menu.

    menu .menubar.list.menu

    .menubar.list.menu add command \
       -label "Choose the columns to be listed" \
       -command {
          Action COLNAME

          GetColumns

          if {$widthChange == "y"} then {
             .display.output  configure -width [expr $screenWidth + 1]
             .messages.output configure -width [expr $screenWidth + 1]
          }

          if {$chosenColumns != ""} then {
             Action SETCONF
             Action SETCMP
             Action LIST
          }
        }

    .menubar.list.menu add command \
       -label "Change the display format for a column" \
       -command {
          Action COLNAME

          GetFormat

          if {$columnName != ""} then {
             Action SETCONF
             Action SETFMT
             Action LIST
          }
        }

    .menubar.list.menu add command \
       -label "Show statistics for columns" \
       -command {
          Action COLNAME

          GetStatsCols

          if {$statsColumns != ""} then {
             Action SETSTAT
             Action SETDECPL
             Action STATS
          }
        }

    .menubar.list.menu add command \
       -label "Show summary of columns" -command {Action SHOWCOL}

    .menubar.list.menu add command \
       -label "Show details of columns" -command {Action DETCOL}

    .menubar.list.menu add command \
       -label "Show summary of parameters" -command {Action SHOWPAR}

    .menubar.list.menu add command \
       -label "Show details of parameters" -command {Action DETPAR}

    .menubar.list.menu add command \
       -label "Show header text" -command {Action SHOWTXT}

#
#  Define the options for the 'Selection' menu.

    menu .menubar.select.menu

    .menubar.select.menu add command \
       -label "Choose an existing selection" \
       -command {
          Action SHOWSEL

          GetSelection $catalogueList;

          if {$selectionNumber != ""} then {
             Action CHOSEL
             Action LIST
          }
        }

    .menubar.select.menu add command \
       -label "Create a new selection" \
       -command {
          GetParam  60  "Enter expression defining the new selection" \
            expressions_help
          if {$GetParamValue != ""} then {
             set selectionExpression $GetParamValue
             Action SETSEL
             Action LIST
          }
        }

    .menubar.select.menu add command \
       -label "Create a new range selection" \
       -command {
          Action SHOWRNG
          if {$catalogueList != ""} then {
             GetRange $catalogueList
             if {($rangeColumn != "") && ($rangeMin != "") && \
                ($rangeMax != "")} then {
                Action SETRNG
                Action LIST
             }
          }
        }

    .menubar.select.menu add command \
       -label "Help about selections" \
       -command {HelpText selections_help}

#
#  Define the options for the 'Plot' menu.

    menu .menubar.plot.menu

    .menubar.plot.menu add command \
       -label "Plot a new scatterplot" \
       -command {
          if {$scatterFlag == "T"} then {
             Action SCSHRNG

             set scatterXmin [lrange $catalogueList 0 0]
             set scatterXmax [lrange $catalogueList 1 1]
             set scatterYmin [lrange $catalogueList 2 2]
             set scatterYmax [lrange $catalogueList 3 3]

             set scatterXmin [string trim $scatterXmin "{;}"]
             set scatterXmax [string trim $scatterXmax "{;}"]
             set scatterYmin [string trim $scatterYmin "{;}"]
             set scatterYmax [string trim $scatterYmax "{;}"]

             Action SCLOSE
             set scatterOpen "F"
             set histOpen "F"
          }

          Action COLNAME

          GetScatter

          if {$scatterFlag == "T"} then {
             Action SCOPEN
             Action SCRANGE
             Action SCPLOT

             set scatterOpen "T"
             set histOpen "F"
             set histFlag "F"
          }
        }

    .menubar.plot.menu add command \
       -label "Overlay a scatterplot" \
       -command {
          if {$scatterOpen == "T"} then {
             Action SHOWSEL

             GetScatterOver $catalogueList;

             if {$scatterFlag == "T"} then {
                global selectionNumberCopy
                set    selectionNumberCopy $selectionNumber
                set    selectionNumber     $scatterSelection

                Action CHOSEL
                Action SCPLOT

                set    selectionNumber     $selectionNumberCopy
                Action CHOSEL
                Action LIST
             }
          } else {
             Error "There is no plot to overlay."
          }
        }

    .menubar.plot.menu add command \
       -label "Plot a new histogram" \
       -command {
          if {$histFlag == "T"} then {
             Action HSSHRNG

             set histXmin [lrange $catalogueList 0 0]
             set histXmax [lrange $catalogueList 1 1]

             set histXmin [string trim $histXmin "{;}"]
             set histXmax [string trim $histXmax "{;}"]

             Action HSCLOSE
             set histOpen "F"
             set scatterOpen "F"
          }

          Action COLNAME

          GetHist

          if {$histFlag == "T"} then {
             Action HSOPEN
             Action HSRANGE
             Action HSPLOT

             set histOpen "T"
             set scatterOpen "F"
             set scatterFlag "F"
          }
        }

    .menubar.plot.menu add command \
       -label "Overlay a histogram" \
       -command {
          if {$histOpen == "T"} then {
             Action SHOWSEL

             GetHistOver $catalogueList;

             if {$histFlag == "T"} then {
                global selectionNumberCopy
                set    selectionNumberCopy $selectionNumber
                set    selectionNumber     $histSelection

                Action CHOSEL
                Action HSPLOT

                set    selectionNumber     $selectionNumberCopy
                Action CHOSEL
                Action LIST
             }
          } else {
             Error "There is no histogram to overlay."
          }
        }

#
#  Define the options for the help menu.

    menu .menubar.help.menu

    .menubar.help.menu add command \
       -label "Introduction (read this first)" \
       -command {HelpText introduction_help}

    .menubar.help.menu add command \
       -label "About this window" \
       -command {HelpText mainwindow_help}

    .menubar.help.menu add command \
       -label "Getting assistance" \
       -command {HelpText assistance_help}

#
#  Define the output region.

    frame .display -relief groove -bd 2

    scrollbar .display.xscroll -orient horizontal \
       -command {.display.output xview}  \
       -relief sunken  -bd 2
    scrollbar .display.yscroll -orient vertical  \
       -command {.display.output yview}  \
       -relief sunken  -bd 2
    text .display.output  -wrap none  -state disabled  -height 24 \
       -width $screenWidth  \
       -xscroll {.display.xscroll set} \
       -yscroll {.display.yscroll set}

    pack .display.yscroll  -side right   -fill y
    pack .display.xscroll  -side bottom  -fill x
    pack .display.output   -expand y     -fill both

    pack  .display -fill x

#
#  Create the row of buttons for navigating through the catalogue.
#
#  First create a frame to hold this row of buttons.

    frame .navigate

#
#  Create each of the buttons.

    button .navigate.next \
      -text Next \
      -width 7  \
      -command {Action LIST}

    button .navigate.previous \
      -text Previous \
      -width 7  \
      -command {Action PREV}

    button .navigate.position \
      -text Position \
      -width 7  \
      -command {
         if {$catalogueName != ""} then {
            Action SHOWROWS
            GetRow $catalogueList
            if {$currentRow != ""} then {
               Action SETROW
               Action LIST
            }
         } else {
            Error "Currently no catalogue is open."
         }
       }

    button .navigate.top \
      -text Top \
      -width 7  \
      -command {
         set currentRow 1
         Action SETROW
         Action LIST
       }

    button .navigate.bottom \
      -text Bottom \
      -width 7  \
      -command {
         Action SHOWROWS
         set currentRow $catalogueList
         Action SETROW
         Action LIST
       }
#
#  Pack the buttons into their enclosing frame.

    pack .navigate.next  \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

    pack .navigate.previous  \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

    pack .navigate.position  \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

    pack .navigate.top  \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

    pack .navigate.bottom  \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

#
#  Pack the bottom frame into the window.

    pack .navigate -side top

#
#  Define the output region for the messages window.

    frame .messages -relief groove -bd 2

    scrollbar .messages.yscroll -orient vertical  \
       -command {.messages.output yview} \
       -relief sunken  -bd 2
    text .messages.output  -wrap none  -state disabled  -height 8 \
       -width $screenWidth  \
       -yscroll {.messages.yscroll set}

    pack .messages.yscroll  -side right   -fill y
    pack .messages.output   -expand y

    pack .messages  -side left  -fill x

#
#  Obtain the required catalogue and attempt to open it.

    GetCatalogue

    if {$catalogueName != ""} then {
       OpenCat none

    } else {
       Error "No catalogue specified."
    }
