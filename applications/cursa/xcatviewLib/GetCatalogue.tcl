proc GetCatalogue { } {

#+ GetCatalogue
#
#  Procedure to get the name of an existing catalogue.
#
#
#  Method:
#   Declare the global variables.
#   Create the top level window.
#   Bind the return key to global variable button for "ok".
#   Create a frame to hold the titles for the  subdirectories and
#   Catalogues listboxes.
#   Put the titles in this frame.
#   Pack the frame into the window.
#   Create a frame to hold the directory and catalogue frames
#   Create the directory frame and its constituent listbox and scroll
#   bars.
#   Create the catalogue frame and its constituent listbox and scroll
#   bars.
#   Pack the directory frame into its enclosing frame.
#   Pack the catalogue frame into its enclosing frame.
#   Pack this enclosing frame into the window.
#   Create a frame to hold the current directory specification and
#   catalogue.
#   Put the various items into this frame.
#   Pack the frame into the window.
#   In the entry box for the current directory bind the mouse click and
#   the return key to a script to update the current directory.
#   In the entry box for the current catalogue bind the return key to set 
#   global variable button to "ok".
#   Create a frame to hold the row of buttons.
#   Create each of the buttons.
#   Pack the buttons into their enclosing frame.
#   Pack this frame into the window.
#   Bind actions to a mouse-click for the subdirectories listbox.
#   Bind actions to a mouse-click for the catalogues listbox.
#   Insert the lists of subdirectories and catalogues into the
#   appropriate windows.
#   Pack the frame into the window.
#   Withdraw the window.
#   Update all the geometry information (to determine how big it
#   wants to be).
#   Centre the window in # parent and de-iconify it.
#   Set a grab and claim the focus.
#   Destroy the dialogue box and restore the focus.
#
#  Author:
#   ACD: A C Davenhall (Leicester).

#  History:
#   5/10/94  (ACD): Original version.
#   23/10/94 (ACD): First stable version.
#   20/10/96 (ACD): Modified for Tcl/Tk v4 and expect v5.
#   19/11/96 (ACD): Completed modifications for Tcl/Tk v4.
#   18/12/96 (ACD): Fixed bug with the modified bindings for Tcl/Tk v4.
#-

#
#  Declare the global variables.

#
#  The state returned by cliking on the "OK" or "Cancel" buttons.

    global getCatalogueButton

#
#  The catalogue name.  This global variable is generated by the present
#  script and used by subsequent ones.

    global catalogueName

#
#  Create the top level window.

    toplevel     .getcatalogue   -class Dialog   -bd 10
    wm title     .getcatalogue   "Select Catalogue"
    wm iconname  .getcatalogue   Catalogue
    wm transient .getcatalogue   .

#
#  Bind the return key to set global variable button to "ok".  That is, 
#  hitting return will have the same effect as clicking on the "ok"
#  button.

    bind  .getcatalogue  <Return> {set getCatalogueButton "ok" }

#
#  Create a frame to hold the titles for the  subdirectories and
#  Catalogues listboxes, put the titles in this frame and pack the frame into 
#  the window.  Finally pack this frame into the window.

     frame  .getcatalogue.title
     text   .getcatalogue.title.text  -height 1 -width 60  -relief flat \
       -highlightthickness 0
     pack   .getcatalogue.title.text  -side top

     .getcatalogue.title.text \
       insert end "Subdirectories:                                 Catalogues:"

     pack   .getcatalogue.title  -side top

#
#  Create a frame to hold the directory and catalogue listboxes

     frame  .getcatalogue.spec

#
#  Create a frame to hold the directory listbox and scroll bars.  Create
#  the listbox and scroll bars and pack them into their frame.

     frame .getcatalogue.spec.dir

     scrollbar .getcatalogue.spec.dir.xscroll  -orient horizontal \
       -command {.getcatalogue.spec.dir.list   xview} \
       -relief sunken  -bd 2

     scrollbar .getcatalogue.spec.dir.yscroll  -orient vertical \
       -command {.getcatalogue.spec.dir.list   yview} \
       -relief sunken  -bd 2

     listbox .getcatalogue.spec.dir.list   -relief groove  -bd 2  \
      -width 40 -height 7  \
      -xscroll {.getcatalogue.spec.dir.xscroll  set}  \
      -yscroll {.getcatalogue.spec.dir.yscroll  set}

     pack .getcatalogue.spec.dir.yscroll  -side right   -fill y
     pack .getcatalogue.spec.dir.xscroll  -side bottom  -fill x
     pack .getcatalogue.spec.dir.list     -expand yes   -fill both

#
#  Create a frame to hold the catalogue listbox and scroll bars.  Create
#  the listbox and scroll bars and pack them into their frame.

     frame .getcatalogue.spec.cats

     scrollbar .getcatalogue.spec.cats.xscroll  -orient horizontal \
       -command {.getcatalogue.spec.cats.list   xview} \
       -relief sunken  -bd 2

     scrollbar .getcatalogue.spec.cats.yscroll  -orient vertical \
       -command {.getcatalogue.spec.cats.list   yview} \
       -relief sunken  -bd 2

     listbox .getcatalogue.spec.cats.list   -relief groove  -bd 2  \
       -width 16 -height 7  \
       -xscroll {.getcatalogue.spec.cats.xscroll  set}  \
       -yscroll {.getcatalogue.spec.cats.yscroll  set}

     pack .getcatalogue.spec.cats.yscroll  -side right  -fill y
     pack .getcatalogue.spec.cats.xscroll  -side bottom -fill x
     pack .getcatalogue.spec.cats.list     -expand yes  -fill both

#
#   Pack the directory and catalogue frames into their enclosing frame.

     pack .getcatalogue.spec.dir   -side left
     pack .getcatalogue.spec.cats  -side left

#
#   Pack this enclosing frame into the window.

     pack .getcatalogue.spec  -side top

#
#   Create the frame to hold the current directory and catalogue
#   specification.

     frame .getcatalogue.current
     text  .getcatalogue.current.dirtitle  -height 1 -width 56  \
       -relief flat  -highlightthickness 0
     pack  .getcatalogue.current.dirtitle  -side top
     .getcatalogue.current.dirtitle insert 1.0 "Current directory:"

     entry .getcatalogue.current.dir  -relief sunken -bd 2 -width 56
     pack  .getcatalogue.current.dir  -side top

     text  .getcatalogue.current.cattitle  -height 1 -width 56  \
       -relief flat  -highlightthickness 0
     pack  .getcatalogue.current.cattitle  -side top
     .getcatalogue.current.cattitle insert 1.0 "Catalogue:"

     entry .getcatalogue.current.cat  -relief sunken -bd 2 -width 56
     pack  .getcatalogue.current.cat  -side top

#
#   Pack this frame into the window.

     pack .getcatalogue.current  -side top

#
#   In the entry box for the current directory bind both the mouse
#   click and the return key to a script to update the current
#   directory.

     bind .getcatalogue.current.dir <ButtonRelease-1> {
        set  newDir [.getcatalogue.current.dir  get]
        if {[catch {cd $newDir}]} then {
           Error "Failure executing Unix cd (change directory) command."
           return
        }
        GetDirCat;
        break
     }

     bind .getcatalogue.current.dir <Return> {
        set  newDir [.getcatalogue.current.dir  get]
        if {[catch {cd $newDir}]} then {
           Error "Failure executing Unix cd (change directory) command."
           return
        }
        GetDirCat;
        break
     }

#
#  In the entry box for the current catalogue bind the return key to set 
#  global variable button to "ok".  That is, hitting return will have the 
#  same effect as clicking on the "ok" button.

    bind  .getcatalogue.current.cat  <Return> {set getCatalogueButton "ok" }

#
#  In the list of catalogues a double-click accepts that catalogue.
    bind .getcatalogue.spec.cats.list <Double-1> {set getCatalogueButton "ok" }

#
#   Create a frame to hold the row of buttons.

     frame .getcatalogue.buttonrow

#
#   Create each of the buttons.
#
#   OK.

     button .getcatalogue.buttonrow.ok \
       -text OK \
       -width 6 \
       -command {set getCatalogueButton "ok"}

#
#   Up: move up a level in the directory tree.

     button .getcatalogue.buttonrow.up \
       -text Up \
       -width 6 \
       -command { 
          if {[catch {cd ..}]} then {
             Error "Failure executing Unix cd (change directory) command."
             return
          }
          GetDirCat
        }

#
#   Home: move to the user's home directory.

     button .getcatalogue.buttonrow.home \
       -text Home \
       -width 6 \
       -command { 
          if {[catch {cd}]} then {
             Error "Failure executing Unix cd (change directory) command."
             return
          }
          GetDirCat
        }

#
#   Cancel.

     button .getcatalogue.buttonrow.can \
       -text Cancel \
       -width 6 \
       -command {set getCatalogueButton "can"}

#
#   Help.

     button .getcatalogue.buttonrow.help \
       -text Help \
       -width 6 \
       -command {HelpText GetCatalogue_help}

#
#   Pack the buttons into their enclosing frame with a default border around 
#   the OK button.

     frame .getcatalogue.buttonrow.default -relief sunken -bd 1
     raise .getcatalogue.buttonrow.ok .getcatalogue.buttonrow.default

     pack  .getcatalogue.buttonrow.ok -in .getcatalogue.buttonrow.default \
       -padx 1m -pady 1m -ipadx 1m

     pack .getcatalogue.buttonrow.default  \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

     pack .getcatalogue.buttonrow.up    \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

     pack .getcatalogue.buttonrow.home  \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

     pack .getcatalogue.buttonrow.can   \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

     pack .getcatalogue.buttonrow.help  \
      -side left  -expand 1  -padx 3m  -pady 2m  -ipadx 1m

#
#   Pack the frame of buttons into the window.

     pack .getcatalogue.buttonrow  -side top

#
#  Bind actions to a mouse-click for the subdirectories listbox.
#
#  The action to be taken on a mouse-click in the subdirectories
#  listbox are:
#
#      Get the index for the selected catalogue.
#      If the index is greater than 0 then
#        Get the name of the catalogue.
#        Delete any existing text in the 'catalogue' entry box.
#        Copy the chosen catalogue to the 'catalogue' entry box.
#      end if

     bind .getcatalogue.spec.cats.list  <ButtonRelease-1>  {
        set numCat [.getcatalogue.spec.cats.list curselect]
        if {$numCat > -1} then {
           set chosenCat [.getcatalogue.spec.cats.list get $numCat]
           .getcatalogue.current.cat delete 0 end
           .getcatalogue.current.cat insert 0 $chosenCat
        }
     }

#
#  Bind actions to a mouse-click for the catalogues listbox.
#
#  The action to be taken on a mouse-click in the catalogues
#  listbox are:
#
#      Get the index of the new directory.
#      If the index is greater than 0 then
#        Get the name of the directory.
#        Set to the new current directory.
#        Get the details of the catalogues and subdirectories of this
#        new current directory.
#      end if

     bind .getcatalogue.spec.dir.list  <ButtonRelease-1>  {
        set numDir [.getcatalogue.spec.dir.list curselect]
        if {$numDir > -1} then {
           set newDir [.getcatalogue.spec.dir.list get $numDir]
           if {[catch {cd $newDir}]} then {
              Error "Failure executing Unix cd (change directory) command."
              return
           }
           GetDirCat
        }
     }

#
#   Insert the lists of subdirectories and catalogues into the
#   appropriate windows.

     GetDirCat

#
#   Withdraw the window, then update all the geometry information
#   to determine how big the window wants to be, then centre the window
#   in parent and de-iconify it.

     wm withdraw .getcatalogue
     update idletasks
     set x [expr [winfo width .]/2 - [winfo reqwidth .getcatalogue]/2 + \
       [winfo x .]]
     set y [expr [winfo height .]/2 - [winfo reqheight .getcatalogue]/2 + \
       [winfo y .]]
     wm geom .getcatalogue +$x+$y
     wm deiconify .getcatalogue

#
#   Set a grab and claim the focus.

     set oldFocus [focus]
     grab  .getcatalogue
     focus .getcatalogue

     tkwait variable getCatalogueButton 

     if {$getCatalogueButton == "ok"} {
        set catDir   [.getcatalogue.current.dir  get]
        set catName  [.getcatalogue.current.cat  get]

#
#      Note that this is a kludge because CHI catalogues must be
#      accessed in the current directory, and cannot be preceded
#      by a directory specification.

        if {[string match *.sdf $catName]} then {
           set catalogueName  $catName
        } else {
           set catalogueName  $catDir
           append catalogueName  /
           append catalogueName  $catName
        }
     }

     if {$getCatalogueButton == "can"} {
	set catalogueName ""
     }

#
#   Destroy the dialogue box and restore the focus.

     destroy  .getcatalogue
     focus    $oldFocus

}
