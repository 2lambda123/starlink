*+RE_EXPOS Exposure correct a source location(s)
      PROGRAM RE_EXPOS
      IMPLICIT 		NONE

*    Global constants :
      INCLUDE 		'CONSTANTS.INC'
      INCLUDE           'DAT_PAR'

* M. Denby Jun 89
* P. McGale - mods for S3 - Sept. 92
* P. McGale - mods UNIX - Sept. 94
* P. McGale - read a fits sky exposure map - May 95
* P  McGale - option to correct for detector efficiency.
*-

*    Local variables :
      integer		idim1, idim2, rdim1, rdim2
	parameter (idim1=360, idim2=181, rdim1=360, rdim2=180)
      INTEGER		ILSI, ILSO
      INTEGER		NS           ! # source positions to correct
      INTEGER		N, L1, L2    ! loop counter
      INTEGER		I, IS, IF    ! Pointers
      INTEGER		MX_LASTPC
      INTEGER		APTR
      INTEGER           LSTAT
      INTEGER           FC, LC
      integer		status
      integer		lunit, lun2
      integer		blksz
      integer		hdutyp
      logical		anyf
      LOGICAL		SSDS
      logical 		effcor
      CHARACTER*80	SCF	     ! Sort Control File
      CHARACTER*80	SLIST,SLISTX ! SSDS file (i/p)
      CHARACTER*80	CLIST	     ! SSDS file (o/p)
      CHARACTER*80	CTYPE	     ! Type of i/p dataset
      CHARACTER*(DAT__SZLOC)	LOC	     ! Locator to i/p SCF
      CHARACTER*(DAT__SZLOC)	ILOC	     ! Locator to i/p SSDS
      CHARACTER*(DAT__SZLOC)	OLOC	     ! Locator to o/p SSDS
      CHARACTER*255	SNAME
      CHARACTER*255	ximag
      CHARACTER*255	rgwimag
      character*80  	c_dum
      character*80	re_res
      CHARACTER*3	FILT
      real		expmap(idim1,idim2)
      real		rgw_u(rdim1, rdim2)	! RGW sky maps - uncorr
      real		rgw_c(rdim1, rdim2)	! RGW sky maps - eff. corr
      REAL		EXF(40000)    ! Exposure factors
      REAL		SCOUNT(40000) ! Raw count vector from SSDS
      REAL		CFLUX(40000)  ! Corected flux to SSDS
      DOUBLE PRECISION	SRA(40000)    ! Source RAs (Rads)
      DOUBLE PRECISION 	SDEC(40000)   ! Source DECs (Rads)

* Input is a list of source positions generated by the eg S3 search
* algorithm. Ancilliary info needed by the program are the list of
* on/off windows over which the source was collected together with
* instrument information such as detector, filter, iris size, zoom
* etc.
* The o/p from the program is a series of exposure factors which
* allow conversion of a raw count (at the source position) into a
* count rate normalised to the centre of the instrument.

      WRITE(*,*) 'RE_EXPOS version 310595'
      STATUS = 0
      CALL HDS_START (STATUS)
      CALL PAR_cmdl (' ', STATUS)
      CALL AST_INIT()
      CALL SSO_INIT()

* Open and read the Exposure image
      CALL PAR_GETLC ('FILT S1a or S2a', FILT, STATUS)

* Efficency correct?
      call par_put0l('EFFCOR', .TRUE., status)
      CALL PAR_GET0l ('EFFCOR correct for detector degredation',
     &                                              effcor, STATUS)

      call getenv("RECAL", re_res)
      if (re_res .eq. ' ') then
	write(*,*)
	write(*,*)'   RE_EXPOS'
	write(*,*)'   Can''t get RECAL environment variable'
      endif
      call chr_fandl(re_res, fc, lc)
* Open up appropriate sky exposure map.
      if (index(filt,'1') .gt. 0) then
        ximag = re_res(fc:lc)//'/reskyexp_f1.fit'
      else
        ximag = re_res(fc:lc)//'/reskyexp_f2.fit'
      endif
      call ftgiou(lunit, status)
      call ftopen(lunit, ximag, 0, blksz, status)
      if (status .eq. 0) then
	call chr_fandl(ximag, fc, lc)
        write(*,*)'   Using sky exposure map: ',ximag(fc:lc)
      else
	goto 999
      endif
* Read in exposure image
      call ftg2de(lunit, 1, -1, idim1, idim1, idim2,
     &                                   expmap, anyf, status)
      IF (STATUS .NE. 0) THEN
	STOP '   Error in RE_EXPOS - Opening the exposure image'
      ENDIF

* Wanting to efficiency correct?
      if (effcor) then
        call chr_fandl(re_res, fc, lc)
        rgwimag = re_res(fc:lc)//'/reexp_eff.fit'
        call ftgiou(lun2, status)
        call ftopen(lun2, rgwimag, 0, blksz, status)
        if (status .eq. 0) then
	  call chr_fandl(rgwimag, fc, lc)
          write(*,*)'   Using efficiency maps: ',rgwimag(fc:lc)
        else
  	  goto 999
        endif
* Point to correct FITS extension and read in exposure image.
        if (index(filt,'1') .gt. 0) then
          call ftmahd(lun2, 2, hdutyp, status)	  ! S1a with no det. effic.
          call ftg2de(lun2, 1, -1, rdim1, rdim1, rdim2,
     &                                   rgw_u, anyf, status)
          call ftmahd(lun2, 4, hdutyp, status)	  ! S1a with det. effic.
          call ftg2de(lun2, 1, -1, rdim1, rdim1, rdim2,
     &                                   rgw_c, anyf, status)
        else
          call ftmahd(lun2, 3, hdutyp, status)	  ! S2a with no det. effic.
          call ftg2de(lun2, 1, -1, rdim1, rdim1, rdim2,
     &                                   rgw_u, anyf, status)
          call ftmahd(lun2, 5, hdutyp, status)	  ! S2a with det. effic.
          call ftg2de(lun2, 1, -1, rdim1, rdim1, rdim2,
     &                                   rgw_c, anyf, status)
	endif

        IF (STATUS .NE. 0) THEN
	  STOP '   Error in RE_EXPOS - Opening the efficiency images'
        ENDIF

      endif


* Open and read the SSDS file containing source positions etc.
      CALL PAR_GETLC ('SLIST Source list',SLIST,STATUS)
      CALL CHR_FANDL(SLIST, FC, LC)
      IF (INDEX(SLIST,'.sdf') .GT. 0) THEN
        SSDS=.TRUE.
      ELSE
        INQUIRE (FILE=SLIST(FC:LC)//'.sdf', EXIST=SSDS)
      ENDIF

      IF (SSDS) THEN
        CALL HDS_OPEN  (SLIST, 'READ', ILOC, STATUS)
        CALL DAT_TYPE (ILOC, CTYPE, STATUS)
        IF (STATUS .NE. 0) THEN
	  STOP '   Error in RE_EXPOS -  opening source file'
        ENDIF

* Clone the i/p file to an o/p copy
        call mx_root(slist, clist)
        call chr_fandl(clist, fc, lc)
        clist = clist(fc:lc)//'c'
        call par_put0c ('CLIST', clist, status)
        CALL PAR_GETLC ('CLIST Corrected SSDS file', CLIST, STATUS)
        CALL HDS_NEW   (CLIST, 'IMG', CTYPE, 0, 0, OLOC, STATUS)
        CALL HDX_COPY  (ILOC, OLOC, STATUS)
        CALL EXPOS_L_SRCE (ILOC, SRA, SDEC, SCOUNT, NS, STATUS)
        IF (STATUS .NE. 0) GOTO 999
      ELSE
	STATUS=0
	IF (INDEX(SLIST,'term') .GT. 0 ) THEN
	  ILSI = 5
	  ILSO = 6
	ELSE
	  CALL SYS_GETLUN(ILSI,lstat)
	  CALL SYS_GETLUN(ILSO,lstat)
	  OPEN (ILSI, FILE=SLIST, STATUS='OLD', READONLY)
	ENDIF
	NS = 1
 700    READ(ILSI, *, END=799) SRA(NS), SDEC(NS)
	  SRA(NS)  = SRA(NS)*DTOR
	  SDEC(NS) = SDEC(NS)*DTOR
	  SCOUNT(NS) = 1.
	  NS = NS+1
	  GOTO 700
 799	CONTINUE
        NS = NS-1
	IF (INDEX(SLIST,'term') .EQ. 0 ) THEN
          CALL MX_SETEXT(SLIST,'.exp',SLISTX)
          CALL CHR_FANDL(SLISTX, FC, LC)
          WRITE(*,*) '   Results file ',SLISTX(FC:LC)
	  OPEN (ILSO, FILE=SLISTX(FC:LC), STATUS='UNKNOWN')
	ENDIF
      ENDIF

      WRITE(*,*) '   Correcting ',NS,' source locations'

* Calculate exposure factors at source locations
      IF (NS .GT. 0) THEN
        CALL EXPOS_L_EXP (expmap,idim1,idim2,SRA,SDEC,
     :						   NS,EXF,STATUS)
        IF (STATUS .NE. 0) GOTO 999


* Apply efficiency corrections if desired.
	if (effcor) then
          CALL EXPOS_L_RGW (rgw_u, rgw_c,rdim1,rdim2,SRA,SDEC,
     :						   NS,EXF,STATUS)
        endif


* write the corrected fluxes to the SSDS file
        DO N = 1, NS
	  CFLUX(N) = SCOUNT(N)*EXF(N)
        ENDDO
	IF (SSDS) THEN
          CALL EXPOS_L_CSRCE (OLOC, CFLUX, NS, STATUS)
	ENDIF

      ENDIF

      IF (.NOT.SSDS) THEN
        DO N = 1, NS
          WRITE(ILSO,*) SRA(N)/DTOR,SDEC(N)/DTOR,1/EXF(N)
        ENDDO
      ENDIF

999   IF (STATUS .NE. 0) THEN
	 WRITE(*,*) '   Error in RE_EXPOS'
      END IF

      call ftclos(lunit, status)
      if (effcor) call ftclos(lun2, status)
      CALL SSO_CLOSE(STATUS)
      CALL AST_CLOSE

      END

