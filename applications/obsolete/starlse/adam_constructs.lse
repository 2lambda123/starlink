!+
!  Name:
!     ADAM_CONSTRUCTS.LSE

!  Type of Module:
!     LSE language extension definitions.

!  Description:
!     This file contains LSE definition commands to define ADAM-specific
!     extensions to the STARLINK_FORTRAN language. The language itself
!     is defined elsewhere.

!  Authors:
!     RFWS: R.F. Warren-Smith (STARLINK, RAL)
!     {enter_new_authors_here}

!  History:
!     29-JAN-1991 (RFWS):
!        First prologue added.
!     29-JAN-1991 (RFWS):
!        Added work-arounds for indentation problem introduced with LSE
!        version 3.1: the arguments to the /INDENT qualifier should be 6
!        spaces (or 2 tabs) smaller than the values which appear in this
!        file.
!     11-SEP-1991 (RFWS):
!        Changed _CLEANUP_CODE token to use ERR_BEGIN/END.
!     17-NOV-1992 (RFWS):
!        Converted from VAXset to DEcset source format.
!     {enter_further_changes_here}

!  Bugs:
!     {note_any_bugs_here}

!-

LSE NEW PLACEHOLDER ABORT_STMT NONTERMINAL STARLINK_FORTRAN
    LSE SET PLACEHOLDER AUTO SUBSTITUTE OFF ABORT_STMT STARLINK_FORTRAN
    LSE SET PLACEHOLDER DUPLICATION CONTEXT_DEPENDENT ABORT_STMT STARLINK_FORTRAN
    LSE SET PLACEHOLDER PSEUDOCODE ON ABORT_STMT STARLINK_FORTRAN
    LSE SET PLACEHOLDER BODY LINE 99 EXPAND 0 SPACE NEXT ADD ABORT_STMT STARLINK_FORTRAN

LSE NEW PLACEHOLDER ADAM_CONSTRUCTS MENU STARLINK_FORTRAN
    LSE SET PLACEHOLDER AUTO SUBSTITUTE OFF ADAM_CONSTRUCTS STARLINK_FORTRAN
    LSE SET PLACEHOLDER DESCRIPTION "Menu of ADAM programming constructs" ADAM_CONSTRUCTS STARLINK_FORTRAN
    LSE SET PLACEHOLDER DUPLICATION CONTEXT_DEPENDENT ADAM_CONSTRUCTS STARLINK_FORTRAN
    LSE SET PLACEHOLDER PSEUDOCODE ON ADAM_CONSTRUCTS STARLINK_FORTRAN
    LSE SET PLACEHOLDER MENU LINE _OK_BLOCK "" TOKEN OFF ADD ADAM_CONSTRUCTS STARLINK_FORTRAN
    LSE SET PLACEHOLDER MENU LINE _BAD_BLOCK "" TOKEN OFF ADD ADAM_CONSTRUCTS STARLINK_FORTRAN
    LSE SET PLACEHOLDER MENU LINE _CHECK_STATUS "" TOKEN OFF ADD ADAM_CONSTRUCTS STARLINK_FORTRAN
    LSE SET PLACEHOLDER MENU LINE _ERROR_REPORT "" TOKEN OFF ADD ADAM_CONSTRUCTS STARLINK_FORTRAN
    LSE SET PLACEHOLDER MENU LINE _CLEANUP_CODE "" TOKEN OFF ADD ADAM_CONSTRUCTS STARLINK_FORTRAN

LSE NEW PLACEHOLDER DEFINE_MESSAGE_TOKEN NONTERMINAL STARLINK_FORTRAN
    LSE SET PLACEHOLDER AUTO SUBSTITUTE OFF DEFINE_MESSAGE_TOKEN STARLINK_FORTRAN
    LSE SET PLACEHOLDER DUPLICATION CONTEXT_DEPENDENT DEFINE_MESSAGE_TOKEN STARLINK_FORTRAN
    LSE SET PLACEHOLDER PSEUDOCODE ON DEFINE_MESSAGE_TOKEN STARLINK_FORTRAN
    LSE SET PLACEHOLDER BODY LINE "	CALL MSG_{msg_token_routine}" EXPAND 0 SPACE NEXT ADD DEFINE_MESSAGE_TOKEN STARLINK_FORTRAN

LSE NEW PLACEHOLDER ERROR_CODE TERMINAL STARLINK_FORTRAN
    LSE SET PLACEHOLDER AUTO SUBSTITUTE OFF ERROR_CODE STARLINK_FORTRAN
    LSE SET PLACEHOLDER DUPLICATION CONTEXT_DEPENDENT ERROR_CODE STARLINK_FORTRAN
    LSE SET PLACEHOLDER PSEUDOCODE ON ERROR_CODE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "The name of a global symbolic constant identifying an error condition." ADD ERROR_CODE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "Such constants are conventionally named FAC__ENAME, where FAC is a three" ADD ERROR_CODE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "character prefix identifying the facility from which the error originates" ADD ERROR_CODE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "and ENAME is the name of the error code (up to 5 characters).  Some" ADD ERROR_CODE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "existing software does not follow this convention, but all new software" ADD ERROR_CODE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "should. The value SAI__ERROR is available for general use." ADD ERROR_CODE STARLINK_FORTRAN

LSE NEW PLACEHOLDER ERROR_NAME TERMINAL STARLINK_FORTRAN
    LSE SET PLACEHOLDER AUTO SUBSTITUTE OFF ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER DUPLICATION CONTEXT_DEPENDENT ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER PSEUDOCODE ON ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "A name identifying the error being reported in such a way that it is" ADD ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "unique within this routine.  In combination with the routine name, the" ADD ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "error report will then be associated with a globally unique character" ADD ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "string which may be used by the error system to identify it. It is" ADD ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "recommended that upper case alpha-numeric characters be used to construct" ADD ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "a meaningful name which describes the particular type of error being" ADD ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "reported (e.g. FAC_OPEN_NONAME).  A maximum of 15 characters in total" ADD ERROR_NAME STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "(including the subroutine name and underscores) is permitted." ADD ERROR_NAME STARLINK_FORTRAN

LSE NEW PLACEHOLDER MESSAGE_TEXT TERMINAL STARLINK_FORTRAN
    LSE SET PLACEHOLDER AUTO SUBSTITUTE OFF MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER DESCRIPTION "The text of an error report" MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER DUPLICATION CONTEXT_DEPENDENT MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER PSEUDOCODE ON MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "Enter the text of the error message. This should be as informative as" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "possible and should include information about the immediate context in" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "which the error occurred. In wording the message, be careful not to" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "make unjustified assumptions about the wider context within which your" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "routine may be called." ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "   Values may be included in the message text by means of previously" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "defined message tokens prefixed with a '^' character (e.g. ^TOKEN). It" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "is recommended that the ^STATUS token (which ADAM uses to represent the" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "VMS error message associated with the current STATUS value on VAX" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "machines) should not be used, partly on grounds of portability and partly" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "because it tends to be rather uninformative. The following are examples" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "of possible error reports:" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "   'All ^NSLOT slots allocated for new entries have been used up'" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "   'Unable to copy ^OBJECT to ^STRUCTURE.^COMPONENT'" ADD MESSAGE_TEXT STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "   'A value of ^NSIGMA is not valid when specifying the clipping level'" ADD MESSAGE_TEXT STARLINK_FORTRAN

LSE NEW PLACEHOLDER MSG_TOKEN_ROUTINE TERMINAL STARLINK_FORTRAN
    LSE SET PLACEHOLDER AUTO SUBSTITUTE OFF MSG_TOKEN_ROUTINE STARLINK_FORTRAN
    LSE SET PLACEHOLDER DESCRIPTION "Name of a MSG_ routine for setting a message token" MSG_TOKEN_ROUTINE STARLINK_FORTRAN
    LSE SET PLACEHOLDER DUPLICATION CONTEXT_DEPENDENT MSG_TOKEN_ROUTINE STARLINK_FORTRAN
    LSE SET PLACEHOLDER PSEUDOCODE ON MSG_TOKEN_ROUTINE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "Type the name of a MSG_ routine to be used to define a message token for" ADD MSG_TOKEN_ROUTINE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "the subsequent error message.  If you are unfamiliar with the routines" ADD MSG_TOKEN_ROUTINE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "available, then type SET or FMT followed by cntrl-E to obtain an" ADD MSG_TOKEN_ROUTINE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "appropriate menu from which the full subroutine argument list can be" ADD MSG_TOKEN_ROUTINE STARLINK_FORTRAN
    LSE SET PLACEHOLDER TERMINAL LINE "obtained." ADD MSG_TOKEN_ROUTINE STARLINK_FORTRAN

LSE NEW PLACEHOLDER TEMP_STATUS NONTERMINAL STARLINK_FORTRAN
    LSE SET PLACEHOLDER AUTO SUBSTITUTE ON TEMP_STATUS STARLINK_FORTRAN
    LSE SET PLACEHOLDER DESCRIPTION "Temporary status variable" TEMP_STATUS STARLINK_FORTRAN
    LSE SET PLACEHOLDER DUPLICATION CONTEXT_DEPENDENT TEMP_STATUS STARLINK_FORTRAN
    LSE SET PLACEHOLDER PSEUDOCODE ON TEMP_STATUS STARLINK_FORTRAN
    LSE SET PLACEHOLDER BODY LINE TSTAT EXPAND 0 SPACE NEXT ADD TEMP_STATUS STARLINK_FORTRAN

LSE NEW TOKEN ADAM_CONSTRUCTS ALIAS STARLINK_FORTRAN
    LSE SET TOKEN INHERIT ADAM_CONSTRUCTS ADAM_CONSTRUCTS STARLINK_FORTRAN

LSE NEW TOKEN _BAD_BLOCK TERMINAL STARLINK_FORTRAN
    LSE SET TOKEN DESCRIPTION "IF block which executes if STATUS is bad" _BAD_BLOCK STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	IF ( STATUS .NE. SAI__OK ) THEN" EXPAND 0 SPACE NEXT ADD _BAD_BLOCK STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	   {executable_statement}..." EXPAND 0 SPACE NEXT ADD _BAD_BLOCK STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	END IF" EXPAND 0 SPACE NEXT ADD _BAD_BLOCK STARLINK_FORTRAN

LSE NEW TOKEN _CHECK_STATUS TERMINAL STARLINK_FORTRAN
    LSE SET TOKEN DESCRIPTION "Abort if STATUS is not OK" _CHECK_STATUS STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	IF ( STATUS .NE. SAI__OK ) GO TO {abort_stmt}" EXPAND 0 SPACE NEXT ADD _CHECK_STATUS STARLINK_FORTRAN

LSE NEW TOKEN _CLEANUP_CODE TERMINAL STARLINK_FORTRAN
    LSE SET TOKEN DESCRIPTION "Cleaning up code; a new error reporting context" _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE " " EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "*  Begin a new error reporting context." EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	CALL ERR_BEGIN( STATUS )" EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE " " EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "*  [comment]" EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	{executable_statement}..." EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE " " EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "*  End the error reporting context." EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	CALL ERR_END( STATUS )" EXPAND 0 SPACE NEXT ADD _CLEANUP_CODE STARLINK_FORTRAN

LSE NEW TOKEN _ERROR_REPORT TERMINAL STARLINK_FORTRAN
    LSE SET TOKEN DESCRIPTION "Make an error report" _ERROR_REPORT STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	STATUS = {error_code}" EXPAND 0 SPACE NEXT ADD _ERROR_REPORT STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	[define_message_token]..." EXPAND 0 SPACE NEXT ADD _ERROR_REPORT STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	CALL ERR_REP( '{routine_name}_{error_name}'," EXPAND 0 SPACE NEXT ADD _ERROR_REPORT STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE : FIXED 6 SPACE NEXT ADD _ERROR_REPORT STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "'{message_text}'," EXPAND 20 SPACE SAME ADD _ERROR_REPORT STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE : FIXED 6 SPACE NEXT ADD _ERROR_REPORT STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "STATUS )" EXPAND 20 SPACE SAME ADD _ERROR_REPORT STARLINK_FORTRAN

LSE NEW TOKEN _OK_BLOCK TERMINAL STARLINK_FORTRAN
    LSE SET TOKEN DESCRIPTION "IF block which executes if STATUS is OK" _OK_BLOCK STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	IF ( STATUS .EQ. SAI__OK ) THEN" EXPAND 0 SPACE NEXT ADD _OK_BLOCK STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	   {executable_statement}..." EXPAND 0 SPACE NEXT ADD _OK_BLOCK STARLINK_FORTRAN
    LSE SET TOKEN BODY LINE "	END IF" EXPAND 0 SPACE NEXT ADD _OK_BLOCK STARLINK_FORTRAN
