0 IRAS90
For information on individual subjects, select from the list 
below:

1 Application_parameters
Each application has an entry in this help library which
describes the processing performed by the application, and the
parameters which are available to modify the behaviour of the
application. Parameters fall into two classes; those for which
values must be supplied by the user, and those which will take a
default value unless the user specifies an alternative value on
the command line. Prompts are not normally issued for the second
class. The default values used by this class are indicated in by
placing them inside a pair of square brackets at the end of the
parameter description. If a parameter description does not end
with a pair of square brackets, then a value must be supplied for
the parameter by the user. If the square brackets are empty, then
the parameter is defaulted, but the default value used depends on
the values supplied for other parameters and so cannot be
specified in the documentation. In these cases, the choice of
default value is described in the parameter description. 

1 Coordinate_files
Certain applications read text files which contain a list of
coordinate positions (either sky or image coordinates). By
default, these files are assumed to contain image coordinates.
This assumption may be over-riden by inserting a line at the
start of the file which specifies the sky coordinate system.
This must be a valid sky coordinate system specification (see
help on "Sky_coordinates"). It is not necessary to specify a
coordinate system if the coordinates in the file are image
coordinates (also known as pixel coordinates). The remaining
items in the file must be coordinates specifying the positions
to be transformed. The two coordinate values describing a
single position should occur together in the order X then Y or
longitude then latitude.  Image coordinates are given as simple
decimal values, and the formats allowed for sky coordinates are
described in the help on "Sky_coordinates". Adjacent items in
the file should be separated with commas or by placing them on
separate lines.  Text occurring after a comment character "#"
is ignored (up to the end of the line). Blank lines are 
ignored.

1 Data_units
IRAS90 recognises several different system of data units, which 
may be specified using the following strings:

  pW/(M**2)    - Flux values in Pico-Watts per square metre.
  (pW/M**2)/sr - Surface brightness values in Pico-Watts per 
                 square metre, per steradian.
  Jy           - Flux density values in Janskys.
  Jy/sr        - Surface brightness values in Janskys per 
                 steradian.
  MJy/sr       - Surface brightness values in Mega-Janskys per 
                 steradian.
  Jy/PIXEL     - Surface brightness values in Janskys per pixel 
  (pW/M**2)/PIXEL - Surface brightness values in Pico-Watts per 
                 square metre, per pixel.

Note, the possible effects of varying pixel size should be borne
in mind when using either of the last two systems of units,
especially if dealing with very large areas of the sky. If this 
may be a problem, then an equal area projection should be used 
(see the help on "Map_projections") when creating the pixel 
values.

Some of these units are only available when dealing with CRDD
files (eg "Jy"), and some when dealing with images (eg Jy/PIXEL). 

Conversions between flux and flux density  values use the
detector bandwidths described in the help on
"Detector_bandwidths". Conversions between flux density and
surface brightness  values use the effective detector solid
angles described in the help on "Detector_solid_angles". 

1 Detector_bandwidths
The following effective detector bandwidths are assumed for 
all detectors from each band (in Hz):

      12um       25um       60um       100um
    13.48E12    5.16E12    2.58E12    1.00E12

These values are taken from the IRAS Catalogs and Atlases 
Explanatory Supplement, 2and edition, page X-13.

1 Detector_solid_angles
Each detector is assumed to have the following effective solid 
angle (in units of 1.0E-7 steradians):

    #1     #2     #3     #4     #5     #6     #7     #8     #9
   14.1,  13.7,  12.9,  13.1,  13.2,  13.2,  13.6,  6.10,  6.04,  

    #10    #11    #12    #13    #14    #15    #16    #17    #18
   6.07,  1.92,  4.85,  6.10,  6.19,  6.56,  3.39,  DEAD   3.46,  

    #19    #20    #21    #22    #23    #24    #25    #26    #27
   3.40,   DEAD  3.48,  3.38,  3.21,  3.22,  3.17,  0.92,  2.41,  

    #28    #29    #30    #31    #32    #33    #34    #35    #36
   2.95,  3.25,  3.25,  1.97,  6.40,  6.32,  6.25,  6.36,   DEAD  

    #37    #38    #39    #40    #41    #42    #43    #44    #45
   6.37,  4.84,  1.82,  3.50,  3.44,  3.48,  3.50,  3.45,  3.46,  

    #46    #47    #48    #49    #50    #51    #52    #53    #54
   1.78,  0.89,  3.31,  3.22,  3.29,  3.25,  3.19,  3.24,  2.45,

    #55    #56    #57    #58    #59    #60    #61    #62
    7.9,  13.3,  14.0,  12.9,  14.0,  13.8,  14.2,   6.8

These values were derived by M. Moshir at the Infrared 
Processing and Analysis Centre (IPAC), CalTech, and are 
consistent with the detector Point Spread Functions used by 
IRAS90 (see help on "Point_Spread_Functions").

1 Group_expressions
A "group expression" is a string which identifies a group of
objects (eg numerical values, NDFs, etc). A group expression can 
specify a group of such objects in several ways: 

  o  As a comma separated list ( e.g. "12.1, 23.2, 1.3" or 
     "HH1_B1S1,HH2_B1S2" ). 

  o  By reading them from a text file (see "Indirection).

  o  By modifying an existing group of objects using editing 
     specified by the user (see "Modification").

If the supplied group expression is terminated with a minus
sign, the user is re-prompted for another group expression. The
objects specified by this second group expression are added to
those specified by the first. This re-prompting continues until
a group expression is supplied which does not end with a minus
sign. 

Certain classes of objects have additional features, for 
instance if the objects are NDF names, then wild-card characters 
are allowed in the supplied values (see "NDF_groups").

2 Indirection
It is sometimes convenient to store strings specifying the
objects to be used in a text file. The name of the text file can
then be given in response to a prompt for a group expression,
rather than giving a long list of explicit values. This is done
by preceeding the name of the text file with an up-arrow ("^")
character. For instance, the group expression "^VALUES.DAT"
would result in the file VALUES.DAT being opened and the strings
read from the file. Each line within the file is considered to
be a group expression, and is processed in the same way as a
group expression supplied directly. In particular, a text file
may contain references to other text files. If the file
VALUES.DAT contained the following two lines: 

A,B,C
D,^NEWFILE.DAT

The the strings A, B, C and D would be returned to the 
application, and in addition the file NEWFILE.DAT would be 
searched for further strings. This nesting of text file can go
down to seven levels. Text files may also contain comments. 
Anything occurring after an # character is ignored. To ignore
an entire line the # character must be in column 1 (any blanks in 
front of the # character are considered to be significant).

2 Modification
A group of objects can be given by specifying some editing to
apply to another already existing group of objects. For instance,
if the string NEW_*B|_DS|_IM| was given in response to a request
for a group expression, then the following steps occur: 

  o  Each element in some existing group of objects (described in 
     the help information for the parameter concerned) is substituted 
     in turn for the "*" character.
  o  Any occurrences of the string "_DS" is replaced by the string 
     "_IM".
  o  The string "B" is added to the end of the string.
  o  The string "NEW_" is added to the start of the string.

Thus if the existing group contained the strings FILE1_DS and
FILE2_DS, the resulting group would be NEW_FILE1_IMB and
NEW_FILE2_IMB. 

2 NDF_groups
If a group expression is used to specify a list of input NDFs,
then NDF names may be specified which contain wild card
characters ("*" and "%" on VMS, "*" and "?" on UNIX). These will
be expanded into a list of explicit NDF names before returning
the group to the application. Note, on UNIX systems group
expressions containing wild-cards must be enclosed in quotes if
they are supplied on the command line (this prevents the shell
from expanding the wild-cards itself). 

If the final character in a group expression is a colon (:), then
a list of the NDFs represented by the group expression (minus the
colon) is displayed, but no NDFs are actually added to the group
of NDFs to be processed. The user is then re-prompted for another
group expression. Note, this facility only applies to group
expressions representing existing NDFs, not NDFs which are to be
created by the application. 

If an IRAS90 application creates more than one output NDF, it
will also create an output text file containing the names of the
output NDFs in a form which can be used to specify the NDFs as
input to another IRAS90 application. The text file is called
iras90_ndfs.lis and is located in the users login directory.
Succesive IRAS90 applications will over-write such text files
created by previous applications. If such a file is created, then
the global parameter DATA_ARRAY will be modified so that the
suggested default for the input NDFs to the next application
becomes an indirection element specifying the output NDFs from
the previous application. 

At the moment group expressions may only be used to specify NDFs 
which are stored at the top level of the container file.

2 Examples
If an application asks for a group of input NDFs, the following 
are all possible responses:

  b1,b2,b3,b4  - Use b1.sdf, b2.sdf, b3.sdf and b4.sdf. It is 
                 assumed that the NDFs are the top level objects 
                 within the .sdf files.
  cena_b1-     - Uses cena_b1.sdf and then asks the user for 
                 more NDFs.
  *            - Uses all .sdf files in the current directory. 
  hh1_b1s*_ds  - Uses hh1_b1s1_ds.sdf, hh1_b1s2_ds.sdf, etc.
  ^files.lis   - Reads the names of NDFs from the text file files.lis.
  ../data/*    - Uses all .sdf files contained in the UNIX directory 
                 ../data

If an application asks for a group of output NDFs, the following 
are possible responses:

  file1,file2,file3 - Create file1.sdf, file2.sdf and file3.sdf.
  ^out.dat          - Read the names of the output NDFs from 
                      text file out.dat.
  *_ds              - Append the string "_ds" to the end of all 
                      the input NDF names.
  ../bk/*|_ds|_bk|  - Substitute the string "_bk" for all 
                      occurrences of the string "_ds" in the 
                      input NDF names, and put the files in UNIX 
                      directory ../bk

Group expressions can be used to specify objects other than NDFs.
For instance, if an application asks for a group of pixels to be
specified by their X and Y pixel indices, then the pixels (1,1),
(21,-10) and (0,0) could be specified in any of the following ways: 

  10,11,21,-10,0,0  - Gives the indices as a comma separated 
                      list.

  10,11 -           - Ending each line with a minus sign causes 
  21,-10 -            the user to be re-prompted for more values.
  0,0

  ^pixels.dat       - The file pixels.dat is read.
                      
In the last example the file pixels.dat could contain the 
following four lines:

#  Approximate star centres.
10,11
21,-10
0,0

1 Getting_help_at_a_parameter_prompt
When prompted for a parameter the user may reply with a question 
mark ("?"), in which case information will be displayed 
describing the parameter. The user will then be asked for a 
new value for the parameter. The user may also respond with a 
double question mark ("??"), in which case the same information 
is displayed but the user is left in the IRAS90 help library and 
is free to navigate through the library in the usual way in 
order to obtain help on other IRAS90 topics. When the help 
library is finally exited, the user is prompted again for a new 
value for the parameter.

Note, these facilities may not be available on all operating 
systems.

1 History_in_IRAS90
There is an option for IRAS90 to maintain a history of the
processing applied to each NDF. This history information is
automatically created by each application which is run, and is
stored within the NDF in a "HISTORY" component. It may be
displayed, removed or added to manually using the HISTORY
application. 

History information can become quite voluminous, causing the NDFs
to occupy correspondingly larger amounts of disk space. For this
reason, the default behaviour is for IRAS90 applications not to
store any history information. This can be over-ridden using the
HISTORY parameters associated with many of the IRAS90
applications. 

HISTORY parameters are used to specify if applications should
store history in their output NDFs or not. If HISTORY has a true
value then history information is stored in the output NDF. If
it has a false value then no history is added to the output and
any existing history is deleted. This ensures that if an NDF
does contain history, then the history is complete. As has often
been said, an incomplete history is more dangerous than no
history at all. 

It is not necessary to repeatedly assign values to HISTORY
parameters for each successive application. Once a value has
been assigned to a HISTORY parameter, all subsequent
applications use the same value until a new value is assigned
to a HISTORY parameter. This is achieved by associating the
HISTORY parameter of each application with the "global"
parameter IRAS90_HISTORY. 

2 Example
If IRAS90 is currently in its default mode (i.e no history is
being produced by any application), then this can be changed by
assigning a true value to an application's HISTORY parameter; eg
if the next application which the user wishes to run is SETQUAL, 
then the command could be

  SETQUAL HISTORY=T

SETQUAL (and all subsequent applications) will then add history 
information to the output NDFs. The default behaviour can be 
re-instated at some later time by assigning a false value to a 
HISTORY parameter; eg

  QUALTOBAD HISTORY=F

Note, not all IRAS90 applications have HISTORY parameters, only 
those which modify existing NDFs or create new NDFs. For 
instance, SHOWQUAL does not make any alterations to any NDFs and
so does not have a HISTORY parameter.

1 Map_projections
Some IRAS90 applications need information describing projections
used to produce images. The following projections are recognised
by IRAS90: 

  o  GNOMONIC     - Gnomonic projection.
  o  LAMBERT      - Lambert normal equivalent cylindrical projection.
  o  AITOFF       - Aitoff equal area projection.
  o  ORTHOGRAPHIC - Orthographic projection.

In addition the following pseudonyms are recognised:

  o  TANGENT_PLANE - Same as GNOMONIC.
  o  CYLINDRICAL   - Same as LAMBERT.
  o  ALL_SKY       - Same as AITOFF.

Any unambiguous abbreviation may be supplied when specifying a 
projection in response to a parameter prompt (case is ignored).

2 Gnomonic
The gnomonic (or tangent plane) projection is a geometric
projection from the centre of the celestial sphere onto a plane
which is tangent to the celestial sphere. The area of sky
covered by a pixel depends on how far it is from the tangent
point. For this reason this projection is not a good one to use
if large fields are being mapped. The gnomonic projection is
used (for example) for the IRAS 16.5 degree extended emission
SKYFLUX images, which suffer from a 6% change in pixel area 
across an image.

2 Lambert
The Lambert equivalent cylindrical projection is a geometric
projection from the polar axis of the celestial sphere onto a
cylinder which is tangential to the celestial sphere at the
equator. The projection proceeds normally to the polar axis. It
is used, for example, by the IRAS Galactic Plane images. It is
an equal area projection (i.e. all image pixels cover the same
area on the sky, but have different shapes in different parts of
the image). 

2 Aitoff
The Aitoff projection is an equal area projection which can be
used to produce photometrically correct maps of the entire
celestial sphere. All sky maps produced in this way have a
characteristic elliptical shape.

2 Orthographic
Like the Gnomonic projection, the Orthographic projection is a
geometric projection onto a plane which is tangent to the
celestial sphere. The difference between the two projections
lies in the point from which the projection proceeds. The
Gnomonic projection proceeds from the centre of the celestial
sphere, whereas the Orthographic projection proceeds from a
point at infinity, diametrically opposite the tangent point
(i.e. the projection lines are all normal to the tangent plane).
The Orthographic projection is used (for example) for the IRAS
Pointed Observation images. The area of the sky covered by a pixel 
changes across the image, and so this projection is not a good 
one to use for mapping large areas.

1 Message_filtering
Most applications have a parameter called MSG_FILTER which
controls the display of informational messages normally sent to
the users terminal screen or batch job log file. These
parameters are usually defaulted, but the user can assign any of
the following three values by specifying it on the command line:

  o  QUIET   - This value suppresses all informational messages. 
               Error messages are still displayed.

  o  NORMAL  - This value causes the application to produce 
               messages of primary interest to a typical user.

  o  VERBOSE - This value causes extra messages to be displayed 
               which further describe the processing performed 
               by the application. These messages may well be of 
               only secondary interest to a typical user.

Once a value has been assigned to an MSG_FILTER parameter, the
same value is used as the default for all subsequent
applications until a new value is assigned to an MSG_FILTER
parameter. This is achieved by associating the MSG_FILTER
parameter of each application with the "global" parameter
MSG_FILTER. 

1 Point_Spread_Functions
The IRAS90 package contains NDFs holding estimates of the two
dimensional point spread function of each active survey detector.
These NDFs are called psfxx.sdf (or PSFxx.SDF on VMS) where "xx"
is the detector number (1 to 62). These PSF images were created
at IPAC by Merhdad Moshir, and are described in IPAC Interoffice
Memorandum 240-87-80(2), dated 29 June 1987. Each NDF consists of
a two dimensional DATA array, oriented so that the first array
axis is parallel to the focal plane Z axis and the second array
axis is parallel to the focal plane Y axis. The size and position
of each pixel in the data array are specified in two ways;
firstly, each NDF has two AXIS structures which hold the focal
plane coordinates (Z,Y) at the centre of the corresponding pixels
(in arc-minutes). Secondly, each NDF has an IRAS extension in
which is stored a component called TRANS, consisting of a vector
of six real values. These values specify a linear transformation
from pixel indices within the PSF array, to focal plane
coordinates: 

  DZ = C1 + C2*I + C3*J
  DY = C4 + C5*I + C6*J

where C1 - C6 are the six elements of the TRANS component; (I,J)
are the pixel indices of a pixel in the PSF; DZ is the offset in
the direction of the focal plane Z axis, from the detector centre
to the centre of the PSF pixel (in radians); DY is similarly the
offset in the direction of the focal plane Y axis. The focal
plane coordinates of the detector centres are given in II.C.3 of
the IRAS Catalogs and Atlases Explanatory Supplement. In fact, C3
and C5 are always zero, and so the area of a PSF pixel (in
steradians) is thus given by C2*C6. In addition to the TRANS 
component, the IRAS extension also contains a component called 
PSFDET, which is a single integer value giving the detector 
number to which the PSF refers.

The pixel values are normalised so that they represent
"efficiency" values, and have a quoted relative error of 0.1. If
the pixel with index i has a value of Pi and is illuminated with
a mean surface brightness of Si (in units of Jy/sr), then the
incident flux is Si*A  (where A is the solid angle of the PSF
pixel, i.e. C2*C6), but the PSF pixel measures a flux of Pi*Si*A
Janskys. Thus the total flux measured by a detector would be SUM(
Pi*Si*A ) where the sum is taken over all indices, i. The
effective detector solid angles used by IRAS90 are derived from
these PSFs, in fact they are just equal to A*SUM(Pi), so another
way of representing the total flux measured by a detector is
B*SUM( Pi*Si )/SUM( Pi ), where B is the effective solid angle
of the detector. 

1 Quality_in_IRAS90
See "Introduction" for a general description of the use of
quality. "Quality_Names" gives details of the strings which may
be used as quality names. "Quality_Expressions" gives details of
the syntax of quality expressions. 

2 Introduction
An NDF may optionally contain a component called QUALITY. If this
component exists, it will be an array with the same bounds as
the main DATA array. Each element in the QUALITY array can be
used to store several flags which are associated with the
corresponding element in the DATA array. These flags may be used
to indicate that the DATA value holds some specified property. For
instance, one of the flags may be used to indicate if the
corresponding DATA values are saturated, another may be used to
indicate if the DATA value lies within a background area, and so
on. 

The user is free to use the flags in whatever way seems most
suited to the particular process being performed. The user can
set (or reset) any of the flags within any sub-region of the NDF
using application SETQUAL (or, TRACECRDD if the NDF is a CRDD
file). Each of the flags is referred to by a "Quality Name"
specified by the user. Names which reflect the nature of the
quality should be used, e.g. the quality name "SATURATED" could
be used to flag saturated data values. These quality names get
stored within the NDF and can be used to refer to the quality
flag when running later applications. The terminology adopted by
IRAS90 is that an element of the DATA array "holds" the quality
"SATURATED" (for instance) if the flag which is associated with
the quality name "SATURATED" is set for the corresponding 
element within the QUALITY array.

The number of quality names which can be stored within an NDF is
limited and  therefore it may become necessary to remove quality
names which are no  longer needed to make room for new ones. The
applications SHOWQUAL and REMQUAL allow the user to do this.
SHOWQUAL displays a list of the quality names  currently defined
within an NDF, and REMQUAL removes specified quality names from
an NDF. 

Many IRAS90 applications have a parameter QEXP which may be used
to specify that the application is only to use data values which
hold a specified selection of qualities.  As an example, when
running DESTCRDD the user could (for instance) specify a value
of "BACKGROUND" for the QEXP parameter. This means that only
those data values for which the flag associated with the quality
name "BACKGROUND" is set, are to be used in the estimation of
the destripe parameters. The quality name "BACKGROUND" must
previously  have been defined and assigned to the appropriate
data values using application SETQUAL (or TRACECRDD). 

The specification of the data values to be used by an application
can be more complex than this, and can depend on several
qualities combined together using "Boolean" operators. For
instance, assigning the value ".NOT. (SOURCE_A .OR. SOURCE_B)"
would cause the application to use only those data values which
hold neither of the qualities SOURCE_A and/or SOURCE_B. These
sort of strings are  known as "quality expressions". 

2 Quality_Names
Quality names are names by which the user refers to particular
flags stored  in the QUALITY component of the NDF. They must not
be longer than 15 characters. Leading blanks are ignored, and
they are always stored in upper case, even if they are supplied
by the user in lower case. Embedded blanks are considered to  be
significant. Quality names must not contain any period characters
("."), and there are three reserved names which cannot be used;
these are "ANY",  "IRQ_BAD_SLOT" and "IRQ_FREE_SLOT". 

2 Quality_Expressions
Quality names may be combined together using Boolean operators
into complex "quality expressions". The quality expression is
evaluated at each element within the NDF by substituting a value
of true or false for each quality name used in the expression,
depending on whether or not that element holds the specified
quality. Elements are used if the quality expression evaluates
to a true value. Boolean operators are delimited on each side by
a period (eg ".AND." ). The operands on which these operators
act must be either a quality name (which must be defined within
the NDF), or one of the Boolean constants .TRUE and .FALSE.
Parentheses can be used to nest expressions. 

Quality expressions can be up to 254 characters long, and must
not contain more than 40 symbols (Boolean operators, constants,
or quality names). Some attempts are made to simplify a quality
expression to reduce the run time needed to evaluate the
expression for every data value.

There is a separate sub-topic describing each of the available
Boolean operators. The precedence of the Boolean  operators
decreases in the following order; .NOT., .AND., .OR., .XOR.,
.EQV. (the final two have equal precedence). In an expression
such as (A.XOR.B.EQV.C.XOR.D) in which all operators have equal
precedence, the evaluation proceeds from left to right., i.e. the
expression is evaluated as (((A.XOR.B).EQV.C).XOR.D). If there is
any doubt about the order in which an expression will be
evaluated, parentheses should be used to ensure the required
order of evaluation. 

3 .NOT.
The expression (.NOT.A) is true only if A is false.

3 .AND.
The expression (A.AND.B) is true only if A and B are both true.

3 .OR.
The expression (A.OR.B) is true if either (or both) of A or B are
true. 

3 .XOR.
The expression (A.XOR.B) is true if either A is true and B is
false, or A is false and B is true. 

3 .EQV. 
The expression (A.EQV.B) is true if either A is true and B is
true, or A is false and B is false. 

2 Examples
Consider a CRDD file which contains four close point sources.
TRACECRDD can be  used to assign the quality "SOURCE_1" to
the samples contained within the  first source (from any
detector), and equivalent qualities set up for the other three
sources. When running DESTCRDD, it would then be possible to
exclude the data from these four sources by giving the parameter
QEXP the following value: 

  .NOT.( SOURCE_1 .OR. SOURCE_2 .OR. SOURCE_3 .OR. SOURCE_4 )

1 Sky_coordinates
IRAS90 has facilities for recognising coordinates in any of the 
following astronomical systems:

  o  Equatorial (FK4 and FK5, referenced to any specified equinox).
  o  Ecliptic (IAU 1980, referenced to any specified equinox).
  o  Galactic (IAU 1958)

Some applications have a COORDS parameter which allows the user 
to specify the coordinate system which is to be used by the 
application (eg when requesting sky positions from the user). 
Once a value has been assigned to a COORDS parameter the same 
value is used as the default for all subsequent applications, 
until a new value is assigned to a COORDS parameters. This is 
done by associating each COORDS parameter with the global 
parameter SKY_COORDS.

2 Specifying_sky_coordinate_systems
Any of the three strings EQUATORIAL, ECLIPTIC and GALACTIC can
be assigned to a COORDS parameter. Case is insignificant, and
abbreviations may be given. 

Ecliptic and equatorial coordinates are referred to the mean
equinox of a given epoch. This epoch is specified by
appending it to the end of the name of the sky coordinate
system, in parentheses; for instance EQUATORIAL(1983.5) (only
the four most significant decimal places are used). The epoch
may be preceded by a single character, B or J, indicating if the
epoch is a Besselian epoch (B) or a Julian epoch (J). If this
character is missing (as in the above example), then the epoch
is assumed to be a Besselian epoch. If no equinox is specified
in this way, then a default of B1950.0 is used. 

If a Julian epoch is used to specify the reference equinox for
an equatorial coordinate system, then the equatorial coordinates
are assumed to be in the IAU 1976, FK5, Fricke system. If the
equinox is specified using a Besselian epoch, then the
coordinates are assumed to be in the FK4, Bessel-Newcomb system.

2 Specifying_sky_positions
A sky coordinate value can consist of a set of up to three
"fields". Each field consists of a numeric value (which can have
a fractional part) followed by an optional character specifying
the units of the field.  The following characters are used to
specify particular units: 

  h - hours
  d - degrees
  m - minutes or arc-minutes (depending on whether the leading 
      field is an hours or degrees field).
  s - seconds or arc-seconds (depending on whether the leading 
      field is an hours or degrees field).
  r - radians.

If no such characters are supplied, defaults are assumed for the 
field units (eg if the string "11 12 56" is supplied as a Right 
Ascension value it is treated the same as "11h 12m 56s"). (Note,
when making command line assignments to parameters from within ICL, 
it is necessary to enclose the string to be assigned to the parameter 
in double quote marks).

Fields may be omitted, in which case they are assumed to have 
the value zero. If a degrees or hours field is to be omitted, 
then the leading field in the supplied string should always 
include a character to specify its units. For instance, the 
string "15 23" is treated as the RA value "15h 23m". If, in fact, 
the leading field is a minutes field then "15m 23" could be 
specified.

In addition, an input string may contain a single field
in an "encoded" form. "Encoded" fields are
identified by the fact that the field contains 5 or more digits
to the left of the decimal point (including leading zeros if
necessary).  These fields are decoded into hours or degrees as
follows: Any fractional part is taken as the fractional part of
the seconds field, the tens and units digits are taken as the
integer part of the seconds field, the hundreds and thousands
digits are taken as the minutes fields, the remaining digits are
taken as the degrees or hours field. Thus -12345.4 would be
interpreted as (- 1 hour 23 mins 45.4 seconds) or (- 1 degree 23
mins 45.4 seconds). 

The supplied values must be in their "normal" ranges (i.e. 0h 0m
0s to 23h 59m 59.99s for RA values, -90d to +90d for DEC values,
etc). Values outside these ranges cause an error to be reported.
The exception to this is if the string is prefixed with a "*"
character, in which case any numeric value may be supplied. 

Any coordinate value can be specified in degrees, hours or
radians. If a value is given in unusual units, the corresponding
normal units are used. For instance, if a declination value of
"1.105r" was given (specifying 1.105 radians) the equivalent
value in degrees is used (i.e. 63.3118 degrees). A right 
ascension of "45d" would cause a value of "3h" to be used, etc.

2 Examples
This section contains some examples of the many ways in which sky 
positions can be specified:

  Right Ascension values: 11 hours, 34 minutes and 56.2 seconds 
                          could be specified as "11 34 56.2" or
                          "11h 34m 56.2s" or "11 34.9366" or 
                          "11.58228" or "113456.2".

  Declination values    : -45 degrees 12 arc-minutes could be 
                          specified as "-45 12 00" or "-45 12" 
                          or "-45d 12m" or "-45.2d" or "-451200"
                          or "0.78888r" (this last one is a radians 
                          value).

Longitude and latitude values for sky coordinate systems other 
than equatorial are specified like Declination values.

1 Specifying_detectors
Detectors are identified by their "detector numbers". These are 
integers varying from 1 to 62 and are described in paragraph C.4 
of chapter II of the IRAS Catalogs and Atlases Explanatory 
Supplement ("Exp. Supp."). 

If the user is asked to select a group of detectors from a group
of "available" detectors, a group expression may be given (see
help on "Group_Expressions") in which each string in the group
can be one of the following: 

  o  An integer in the range 1 to 62 specifying an explicit    
     detector number. 

  o  One of the strings "12um", "25um", "60um" and "100um". These 
     cause all available detectors from the specified wave band to   
     be selected. 

  o  A range of detectors, specified by two detector numbers
     separated by a colon (":"). All available detectors whose 
     cross scan positions are between those of the two detectors 
     are selected. If the first detector number is omitted, no lower 
     limit is imposed. If the second detector is omitted, no upper 
     limit is imposed. Fig. II.C.6 and table II.C.3 in the Exp. Supp. 
     list the positions of all 62 detectors. 

  o  The string "ALL". This specifies that all available detectors
     should be selected.

  o  The string "SMALL". This specifies that all available small
     detectors (i.e. less than 4 arc-minutes cross-scan size) should
     be selected.

  o  The string "LARGE". This specifies that all available detectors
     should be selected, excluding the small detectors.

  o  The string "NONE". This specifies that no detectors should be
     selected, and may not be mixed with other options. A null
     parameter value is equivalent to "NONE". 

  o  The string "LIST". This causes a list of available detectors
     to be displayed, but no detectors are selected. The user is
     re-prompted if this option is selected. This option may not be
     mixed with any other options.

All key words can be abbreviated and are case insensitive.

The selection of detectors is made from a list of available
detectors. This is often all detectors for a given waveband. For
instance the available detectors may be all those from the same
band as the data supplied as input to the application. The help
on the parameter concerned should say what detectors are
available, and this list is displayed at run-time if the keyword
LIST is supplied for the parameter. 

The union of the specified detectors are used. Thus for instance,
if all 62 detectors are available, and the group expression
"12um,small" is supplied, the returned set of detectors consists
of all 12um detectors together with all small detectors from all
four bands, not just the small detectors from the 12um band. 

1 Time_and_date_strings.
Time and dates should be specified in the same format as the
following example: 

     1992-JAN-1 11:23:23.22

Notes: 

  o  The first field is the year. Years in the range 0 to 49 
     are interpreted as 2000 to 2049; years in the range 50 
     to 99 are interpreted as 1950 to 1999. 
  o  The second field is the first three letters of the month 
     (case insensitive).
  o  The third field is the day in the month.
  o  The fourth field is the hour in the day.
  o  The fifth field is the minute in the hour.
  o  The sixth field is the second in the minute, with an 
     optional fractional part.
  o  If any leading fields are omitted in the string, they 
     default to the values for the current time.
  o  If any trailing fields are omitted in the string, they 
     default to zero (or 1 for the day and month).
  o  Leading spaces are ignored.
  o  No spaces are allowed within the body of the string except 
     to separate the time and date sections.
   
1 PSCONT
Produce a contour map with sky coordinate grid for output on a
Postscript printer.

Usage:

   PSCONT NDF MODE NCONT

Description:

   This procedure uses the KAPPA application TURBOCONT to generate
   an encapsulated postscript file containing the contour plot.
   IRAS90 application SKYGRID is then used to produce another
   encapsulated postscript file containing the sky coordinates grid.
   These two files are then merged into one using the PSMERGE
   utility. The resulting file (called PSCONT.PS) can be printed as
   normal on a Postscript printer.
2 Arguments
For information on individual arguments, select from the list below:
3 NDF
NDF = NDF (Given)
   The NDF structure containing the 2-d image to be contoured.
3 MODE
MODE = LITERAL (Given)
   The method by which contour levels are to be selected. See
   TURBOCONT parameter MODE.
3 NCONT
NCONT = INTEGER (Given)
   The number contours required. See TURBOCONT parameter NCONT.
2 Notes
- PSCONT is a command procedure, or script.

- This procedure provides limited facilities for customising the
plot using the other parameter of TURBOCONT and SKYGRID. To do
this the first argument ("NDF") should be given the value PROMPT
(any values supplied for MODE and NCONT are ignored). This causes
the keyword PROMPT to be supplied to SKYGRID and TURBOCONT, thus
causing the user to be prompted for all parameters used by these
two applications (including the NDF parameter). If other
facilities are required, then the applications TURBOCONT,
SKYGRID and PSMERGE must be run individually rather than from
within this command procedure.
2 Prior_requirements
   - The KAPPA, IRAS90 and PSMERGE packages must have been
   initiated.
2 Authors
DSB: D. S. Berry (STARLINK)
2 History
 1-FEB-1993 (DSB):

1 Using_FINDCRDD
FINDCRDD consists of two sections -
   *    A source list editor
   *    A section which is IRAS Survey CRDD specific. 

The source list editor consists of
   . A list initialisation section, which allows the user to use
     the data he has already input, or input data from a
     previously saved file, or start from a new empty list.
   . A list editor in which the user can add new sources, and modify
     or delete existing ones.
   . Each menu also contains utility options, for example, to display
     the source list.
   . Upon exiting from this section the user is automatically offered
     the option of saving the source list to a file which can be used
     in the initialisation.

The IRAS Survey CRDD section provides
   . The user can specify the size of region around each source he
     requires.
   . The program identifies which CRDD archive file, or `Plate'
     contains the data for each source.
   . The program identifies the start and end of each scan of
     CRDD Survey data required for each source.
   . The program determines all the scans required from each
     Plate file and prepares files of details which will
     enable EXCRDD to extract the required data.

2 Starting_FINDCRDD
3 Starting_from_DCL
Before starting up FINDCRDD, a user should run ADAMSTART either directly
or via his login.com. He then positions himself in the directory in which
he wishes files to be saved.
He then starts the IRAS90 system by entering
$ IRAS90
and starts FINDCRDD by entering
$ FINDCRDD
3 Starting_from_ICL
Before starting up FINDCRDD, a user should run ADAMSTART either directly
or via his login.com. He then positions himself in the directory in which
he wishes files to be saved.
He starts ICL by entering
$ ICL
starts the IRAS90 system by entering
ICL> IRAS90
and starts FINDCRDD by entering
ICL> FINDCRDD
3 Starting_from_UNIX
A unix user should ensure that he has a subdirectory named adam in his top
level directory, then he should type
%adam
He then starts the IRAS90 system by entering
%iras90
and starts FINDCRDD by entering
%findcrdd

2 Use_of_!_to_discontinue_current_option_in_FINDCRDD
* IMPORTANT - If you want to stop doing something in FINDCRDD  *
*             press !                                          *

* ! will stop you editing a particular source.                 *
* ! will stop the program from asking for more sources to add, *
*        edit or  delete.                                      *
* ! will stop the program from giving a display                *
*        or writing a file.                                    *

                        ***  ETC.  ***

2 Select_data_to_use_menu
This menu offers the user various options for choosing the source
list he wants to prepare from scratch or modify.

3 Menu
SELECT DATA TO USE MENU
  N = Input new list of sources
  C = Modify current list
  F = Modify list from file
  L = Display sources selected
  P = Change number of lines displayed on a page
  R = Return to main menu
  Y = Accept selected source list

N, Y, and R will take you out of this menu
C, F, L, and P will return to this menu

MENU11CHOICE - Choice from select data to use menu /'Y'/ > 
3 New_list
In the `Input new list of sources' option any previous sources are
cleared and the user starts anew from a empty source list. 
The option does not return to this menu but automatically allows the
user to enter the coordinate system he wants and start entering data.

3 Modify_list_from_file
If the user has stored a file at the end of either:-
 .  Using the `Edit source list menu', of the `Input source positions'
option
 .  Using the `Add region size and wavebands menu', of the `Find
survey data' option 
From earlier in this run or a previous run of FINDCRDD, then he can
start from that data again by choosing this option.                       

Having chosen this option the user will be prompted for the file name

He should enter the name he gave in response to the prompt for
 .  OUTSOURCEFILE1 - if he saved it with the accept of the
`Edit source list menu'
 .  OUTSOURCEFILE2 - if he saved it with the accept of the
`Add region size and wavebands menu'

3 Display_sources_selected
This option is available in each of the three menus, and provides the
user with the facility to list the details of the sources in his source
list either to his Display(D), or to a File(F) for printing, or Both(B)
or to cancel the display with an !.
 
2 Edit_source_list_menu.
This menu offers the user various ways of adding to, or amending the
source list which he has chosen.

3 Menu
EDIT SOURCE LIST MENU
  A = Add new sources to current list
  E = Edit data in current list of sources
  D = Delete sources from current list
  L = Display current list of sources
  P = Change number of lines displayed on a page
  C = Change coordinate system in which position is entered
  R = Return to main menu
  Y = Accept source list

MENU12CHOICE - Choice from type of input/edit menu /'Y'/ > 
3 Change_coordinate_system
This option offers the user the ability to select the coordinate
system in which all subsequent source positions will be entered, 
until this option is used again.

If the user enters ! to this prompt he will remain in the
previous coordinate system. 

The types of coordinate system supported are 
Coordinate          Minimum     Appears in    Specification 
 System           Abbreviation  listing as      Standard
Equatorial(B1950)   EQ            Eq'50          (FK4)
Equatorial(J2000)   EQ(J2000)     Eq20'          (FK5)
Ecliptic            EC            Ec'50        (IAU 1980)
Galactic            GA            Galac        (IAU 1958)


3 Add_new_sources_to_current_list
This option will allow the user to add new sources to the end of
the current list.
It will continue requesting new sources and adding them until the
user enters ! in response to the Source name prompt
4 Information_needed
The following is an example of the dialogue that might take place
Next Source
SOURCENAME - Source name (8 Chars - valid filename) (! for no more) >
M31
SOURCETITLE - Full title for source /'M31'/ > Andromeda Galaxy
SOURCECOORD1 - First coord of source pos. eg RA /'0h 0m 0.00s'/ >
004300.0
SOURCECOORD2 - Second coord of source pos. eg Dec /'0d 0m 0.00s'/ >
411600.0
M31        Eq'50    00 43 00.00     41 16 00.00
CONFIRMADDEDIT - Source details O.K. ? /YES/ > y

The program will normally require the user to confirm that the
source details are correct before adding the source. This can
be turned off, see the `Controlling output' help.

Details of each type of data is given in this help under the
parameter name.


4 Limitations_on_source_names
IT IS STRONGLY RECOMMENDED THAT THE USER HAS A DIFFERENT NAME
FOR EACH SOURCE.

Source names should be
. Unique
. Not case sensitive ie SOU1 and sou1 are both taken as SOU1
. A valid file name
. Not more than 8 characters

3 Edit_data_in_current_list_of_sources
This option allows the user to change the details of any source
already in the source list.

It will continue requesting names of sources to be edited until the
user enters ! in response to the source name prompt.

It will find any source with the name the user types in, or report
that no match has been found.

If, by mistake, the user has two or more sources with the same name
        (       PLEASE USE UNIQUE SOURCE NAMES        )
        ( TO GET UNIQUE OUTPUT FILE NAMES FROM EXCRDD )
each will be presented and the user should enter ! to the updated
source name prompt if he does not want to edit this particular
version.

 .  If you enter ! to any prompt the program assumes you do not
want to edit this particular source, and will pass on the next source
with the same name, or if there are no more sources, to the prompt
requesting the next source to edit.

.   If the current coordinate system does not match that of the
source being edited, the user will be invited to select the
coordinate system for editing this single source, and then will
be returned to the current coordinate system.

3 Delete_sources_from_the_current_list
This option allows the user to delete any source already in the
source list.

It will continue requesting names of sources to be deleted until
the user enters ! in response to the source name prompt.

At each new source name entered by the user the program will search
out all sources with names matching that entered, and for each
matching source name, the program will display details of the source
and ask the user to confirm that this source should be deleted  

If no matching source names have been found the program will display
a message, and request a new source name to delete.

4 Recovering_deleted_sources
Up to the point where the user enters ! to the request for a new
source name to delete, he can recover any sources that he has deleted
in error. He should renter the name of the erroneously deleted source
and the source details will be shown followed by the prompt to confirm
deletion.

3 Display_current_list_of_sources
This option is available in each of the three menus, and provides the
user with the facility to list the details of the sources in his source
list either to his Display(D), or to a File(F) for printing, or Both(B)
or to cancel the display with an !.

3 Accept_source_list_(and_store_data)
The user can accept the current list of sources by pressing Y to
the menu prompt from the `Edit source list menu'.

In accepting the source list the program will invite the user to
store the source list in a storage source file, by offering him the
prompt for a file name.
OUTSOURCEFILE1 - File to save source positions (! for do not file) >
example_data_s

He should do this if he may want to restart with this source list.

2 Find_survey_data
This option from the FINDCRDD Main Menu contains the processing which
is IRAS Survey CRDD specific vis -

   . It takes the user's source list, and asks him to add to it
     information on size of region and waveband requirements.

   . It identifies the file (Plate) in the CRDD Survey data archive 
     containing the data for each source, and detemines whether
     the source is so close to the boundary that for the region size
     required some of the data might be required from an adjoining
     plate. (In this case the user would return to the Edit Source
     List Menu to add a dummy source in that plate)

   . It determines which observations pass close enough to the user's
     sources to be needed, and notes the start and end details of the
     section of observation required.

   . Finally it prepares a file for each of these data archive plates,
     to give the subsequent EXCRDD extraction program details of the
     sections of observations (scans) that will be required.

3 Add_region_size_and_wavebands_menu
This menu offers the user various ways in which he can specify
region size and waveband requirements either as universal figures
applied to all the sources in the list, or for individual sources.

4 Menu 
ADD REGION SIZE AND WAVEBANDS MENU
  Z = Enter region size for all sources
  W = Enter wavebands required for all sources
  I = Enter region size and wavebands for individual sources
  L = Display current list of sources
  P = Change number of lines displayed on a page
  R = Return to main menu
  Y = Accept source list

MENU2CHOICE - Choice from input size and waveband menu /'Y'/ > 

4 Selecting_region_size
The region size should be specified as a cross-scan and an in-scan
size each given in arc minutes.

The definitions of cross-scan and in-scan are related to the way the
survey was carried out and are not easily translated to standard
Astronomical coordinate systems. Therefore we give a rule of thumb
for selecting region size here, and technical definitions for users
requiring more accurate entry below.

We suggest that users requiring data for point source coadding
take cross-scan = 5 arc-min, in-scan = 120 arc-min.
Users requiring data for images take the longer dimension of the
area they require as both the cross-scan and in-scan size, however
if this gives an in-scan size of less than 120 arc-min, in-scan
should be specified as 120 arc-min.

5 Cross_scan_and_in_scan_definitions
The cross-scan measurement between a point and an observation is the
distance between the specified point and the closest point of approach
along the observation. The cross-scan region size the user should enter,
should be twice the cross-scan measurement of the furthest scan he wants
to extract from his source point, in arc minutes. 

The in-scan measurement is the length along the observation. The user
should enter an in-scan size which is how long he wants the top to
bottom of the section of observation he requires, specified in arc
minutes. This section, or `Scan' will automatically be centered at the
position of closest approach to the source point.

4 Entering_waveband_requirements
Wavebands should be entered as a list of the wavelength values
required separated by commas. For Example 12,25,60,100 or 12,60
or 25,12,100 are valid specifications. Wavebands can be specified
in any order. But the user should be aware that if he types in any
string containing waveband identifiers they will be recognised,
thus 342500160 would be recognised as requirements for 25 and 60.

4 Retaining_previous_size_and_waveband_information
If the user previously gave region size or waveband information, either
earlier in using FINDCRDD, or associated with the sources in a file,
it will be retained until the user takes an Add region size and
wavebands option which changes it. The user will see the current
values if he displays the list of sources.

4 Region_size_for_all_sources
This option allows the user to enter one value each for in-scan and
cross-scan sizes, and have them applied to all sources in his source
list.
Please note that the in-scan size must be greater than zero to be
valid. A minimum in-scan size of 120 arc min is recommended.

4 Wavebands_required_for_all_sources
This option allows the user to specify the wavebands he requires once,
and have them applied to all sources in his source list.


4 Individual_sources_region_size_and_wavebands_required
The user can enter region size and waveband information for each 
individual source using this option.

It will continue asking for names of sources to be augmented with
region size and waveband requirements until the user replies ! to
the name prompt.

For each source found with the corresponding name the program will
display the source details and request region size and waveband
information using any existing values as defaults.

4 Display_current_list_of_sources
This option is available in each of the three menus, and provides the
user with the facility to list the details of the sources in his source
list either to his Display(D), or to a File(F) for printing, or Both(B)
or to cancel the display with an !.

4 Accepting_the_source_list
The user can accept the current data by pressing Y to the menu
prompt from the `Add region size and wavebands menu'.

The program checks to see that all sources are valid ie they have
a non zero in-scan length and at least one waveband marked as required. 

If this check is passed, the program will invite the user store the
augmented source list in a storage file, by offering him the prompt
for a file name.
OUTSOURCEFILE2 - File for source positions and size (! for do not file) > 

He should do this if he may want to restart with this source list
including the region size and waveband details.

The program will then proceed with the rest of the IRAS CRDD survey
specific processing

5 Invalid_sources
If a source is found is found with either an in-scan length of zero
or no wavebands specified as required, a message is given and its
details displayed. 

If there is one or more source which does not pass this check the
user is offered the option of returning to the `Add region size and
wavebands menu', or proceeding with these sources omitted from any
further processing.

RETURNSWMENU - Return to size/wavebands menu= YES, continue= NO /YES/ >

If the user chooses to return to the `Add region size and wavebands
menu', he can supply the missing details, or by going via the FINDCRDD
`Main menu' he can enter the `Input source positions' option to delete
or edit the sources.


3 Identifying_required_archive_CRDD_file
After adding size and waveband requirements the program goes on to
identify the file (Plate) in the CRDD Survey data archive containing
the data for each source, and detemines whether the source is so close
to the boundary that for the region size required some of the data
might be required from an adjoining plate. (In this case the user would
return to the Edit Source List Menu to add a dummy source in that plate)

4 Sources_with_data_off_the_edge_of_the_plate
The program calculates the size, and position of the user's source
region and compares it with the plate boundaries, and reports any
for which part of the source region falls outside the plate boundaries.

5 Important_data_may_not_be_missed
The user should examine source regions reported off edge carefully,
often he will find that EXCRDD will actually be able to extract all
the data he needs from the source plate.

This is because the program treats two problems conservatively.
 . We do not know the orientation of the observations near to the
   source, and make worst case assumptions in calculating the source
   region size.
 . The plates actually contain data which overlaps the adjacent plate,
    but we do not know how much overlap on any scan.

This means that for a small source region ( less than a
degree across ), or for a larger region with only a small part of
the required region off edge, EXCRDD will probable be able to pick
up most or all of the required data.

5 If_data_will_be_missed
If the user fears that he will actually lose some data then he can -
  . If the missing data is background then he can extend the in-scan size.
    This means that although he will lose more data at one end, he will
    gain more background data at the other.
  . He can generate a dummy source in the adjacent plate at the edge
    from which the data are missing.

5 Off_edge_message
If the program finds a source off edge it will display a message.
The user can choose whether to display details, or put them to a file
for printing out after finishing the FINDCRDD run, or to ignore the
off edge details. Alternatively he can display the details, and if he
finds they require action he will be given a second opportunity to put
them to a printable file.

2 Observations_to_be_used_for_each_source
This section of the program looks at the position of each observation
that IRAS carried out to see whether it is close enough to any source
for the user to need EXCRDD to extract part of the observation as a
scan. 

2 Output_data_files_created_for_EXCRDD
A file is produced for each plate CRDD archive file that should be
used to get all the users data. The name is automatically generated
as PLATExxxx, where xxxx is the plate number.

The user than specifies each PLATE file in turn to EXCRDD, together
with mounting the appropriate archive tape containing the corresponding
plate file. EXCRDD will extract CRDD data from a single Plate at a time.

If data for several sources should be extracted from a single Plate,
details of all the data required will be contained in the PLATE file.

The program gives details of plate numbers and the associated tape
identifiers.
3 WARNING
Files output by EXCRDD are big, will the user have enough space.

The user should not include so many sources from a single plate
that he does not have enough space for EXCRDD to generate the files,
or for him to process them futher.

The program gives details of how many scans are generated for each source,
and from which plate they will come.
2 WARNING_on_output_file_size
Files output by EXCRDD are big, will the user have enough space?

The user should not include so many sources from a single plate
that he does not have enough space for EXCRDD to generate the files,
or for him to process them futher.

The program gives details of how many scans are generated for each source,
and from which plate they will come.

2 Controlling_output
There are several ways in which the user can control the amount and
type of display output he receives.
3 Displayorfile
The parameter DISPLAYORFILE controls whether certain lists are
displayed to the users screen, sent to a file for printing later,
or both. 
The options are:-
 -  [D] Display on terminal
 -  [F] File
 -  [B] Both
 -  [A] Ask user which he wants at time the display is prepared [Default].
3 Pagelength
The parameter PAGELENGTH controls the number of lines displayed on a page
of a listing. The minimum pagelength is 5 lines and the maximum 20 lines.
3 MSG_FILTER
The MSG_FILTER parameter controls whether menus are displayed, and
whether the section of the source list, which is currently being
changed is redisplayed after each change. 
The alternatives are:-
 -  [1] Neither source lists nor menus are shown automatically
 -  [2] Source lists are shown automatically, menus are not.
 -  [3] Menus are shown automatically, source lists are not [ Default].
 -  [4] Both source lists and menus are shown automatically.

3 Confirmreq
The parameter CONFIRMREQ can be set to determine whether the
details of an added or edited source should be confirmed or not,
sources to be deleted always have to be confirmed. If CONFIRMREQ is
.TRUE. then added, and edited sources are to be confirmed. 
 
1 BACKCRDD
Estimate and remove backgrounds from a group of CRDD files.

Usage:

   BACKCRDD IN OUT

Description:

   This routine estimates and removes a variety of different
   backgrounds from a group of CRDD files. An output CRDD file is
   produced for each input CRDD file. Depending on the value of
   parameter OUTTYPE, this output CRDD file will hold either the
   input data with the estimated background subtracted from it, or
   the estimated background data itself. The type of background used
   is specified by parameter TYPE. The mean background surface
   brightness in the data after background subtraction can be
   controlled using parameter OUTBACK. This may for instance be
   given the value of the mean background surface brightness
   calculated by routine DESTCRDD, in which case the mean background
   in the data would be preserved.

   Only the DATA component of each NDF is modified by this routine;
   all other components are copied to the output without change. The
   exception to this is that any output VARIANCE component is deleted
   if parameter OUTTYPE had the value BACKGROUND.
2 Parameters
For information on individual parameters, select from the list below:
3 CLIP
CLIP = _REAL (Read)
   The number of standard deviations at which data will be
   rejected.                                                 [3.0]
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output CRDD files. See help on "History_in_IRAS90" for more
   information on history.  The history information will contain
   the names of the input CRDD files and BACKCRDD parameter
   values.                               [current history setting]
3 IN
IN = NDF (Read)
   Specifies a group of input CRDD files. This should be in the
   form of a group expression (see help on "Group_expressions").
   The CRDD files must contain data from the same IRAS waveband.
   There is no limit on the number of CRDD files which can be
   specified.
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 OUT
OUT = NDF (Write)
   A group of output CRDD files corresponding one-for-one with
   the list of input CRDD files given for parameter IN.  This
   should be in the form of a group expression (see help on
   "Group_expressions"). Expressions such as "*_BAK" are expanded
   by replacing the "*" character with each input CRDD file in
   turn.
3 OUTBACK
OUTBACK = _REAL (Read)
   The mean background surface brightness required in the data
   after background subtraction. The same value is used for each
   CRDD file. The value should be given in Mega-Janskys per
   steradian.                                                [0.0]
3 OUTTYPE
OUTTYPE = LITERAL (Read)
   This can take the values DATA and BACKGROUND. DATA causes the
   output CRDD files to hold the background subtracted input data;
   BACKGROUND causes the output CRDD files to hold the estimated
   background data itself.                                  [DATA]
3 QEXP
QEXP = LITERAL (Read)
   A quality expression giving the quality of samples which are
   to be included in the estimation of the backgrounds to be
   subtracted from each CRDD file. A value of "ANY" causes all
   samples to be used, without regard to quality.            [ANY]
3 QNAME
QNAME = LITERAL (Read)
   The name of a quality to be assigned to all samples which do
   not contribute to the estimation of the scan background.
   Samples are omitted from the scan background calculations if
   they are bad in the input NDF, do not satisfy the quality
   expression given by parameter QEXP, or are rejected as source
   samples by the cleaning algorithm. A blank value for QNAME
   causes no quality values to be assigned.                     []
3 TYPE
TYPE = LITERAL (Read)
   The type of background to be subtracted from the input CRDD
   files. Currently supported values are: UNIFORM, LINEAR.
                                                         [UNIFORM]
3 XNAME
XNAME = LITERAL (Read)
   If any the input NDF do not already contain any quality name
   definitions then new quality names are put in the extension
   specified by XNAME. This extension is created if it does not
   already exist.                                  [QUALITY_NAMES]
3 XTYPE
XTYPE = LITERAL (Read)
   If any new NDF extensions are created to hold quality names
   (see parameter XNAME), then parameter XTYPE is used to obtain
   the HDS data type for the created extensions. The run time
   default is to give the extension a type identical to its name.
2 Examples
BACKCRDD ZCMA_B1S1_DS ZCMA_B1S1_BAK TYPE=UNIFORM
   This command causes a constant background value to be
   estimated for CRDD file ZCMA_B1S1_DS and the background
   subtracted data to be stored in ZCMA_B1S1_BAK.

BACKCRDD *_DS *|_DS|_FIT| QEXP=.NOT.(SOURCE_A.OR.SOURCE_B) OUTTYPE=B
   This command attempts to estimate linear backgrounds for all
   NDFs in the current directory which have names ending with
   "_DS". The estimated backgrounds are stored in corresponding
   output NDFs in which "_DS" is replaced by "_FIT". Any samples
   which have either of the two qualities SOURCE_A and/or
   SOURCE_B are excluded from the estimation of the background.
2 Excluding_Samples_from_the_Background_Estimate
   The user may choose to exclude certain samples from the
   estimation of the background by giving a "quality expression" for
   parameter QEXP. Only those samples which have qualities
   satisfying the given quality expression are included in the
   estimation of the background. Qualities can be assigned to
   selected samples using routine SETQUAL.
2 Estimation_of_Uniform_Backgrounds
   After removing samples which do not satisfy the quality
   expression, the median surface brightness value in each CRDD file
   is found (see help on "Detector_solid_angles" and
   "Detector_bandwidths" for lists of the detector effective solid
   angles and band widths used to convert between flux, flux density
   and surface brightness values). An attempt is then made to
   improve the fit to the background by iteratively removing any
   outlying data values from the median estimation. This is done by
   removing samples which lie further than a specified multiple of
   the noise from the current median value (see parameter CLIP). The
   noise is taken to be the RMS residual between the input data and
   the current median value.  After rejecting these outlying
   samples, a new median value is found. This rejection process is
   repeated until the RMS residual changes by less than 0.1% between
   iterations. The required output background surface brightness
   (specified by parameter OUTBACK) is subtracted from the final
   median value. This value is converted back to the same units as
   the input CRDD to form the background estimate.
2 Estimation_of_Linear_Backgrounds
   After removing samples which do not satisfy the quality
   expression, the data is compressed in the cross-scan direction by
   taking the median of the cross-scan surface brightness values at
   a range of in-scan positions along the scan. This results in a
   single dimensional array holding an estimate of the background
   surface brightness at each in-scan position. A least squares
   linear fit is then made to this data, and the RMS residual of the
   data from the fit is found.  An attempt is then made to improve
   the fit to the background by iteratively removing any outlying
   data values from the estimation of the linear fit.  This is done
   by removing samples which lie far from the current linear fit.
   The threshold for rejection is the value of parameter CLIP times
   the RMS residual from the current fit.  After rejecting these
   outlying samples, a new linear fit is found. This rejection
   process is repeated until the RMS residual changes by less than
   0.1% between iterations. The required output background surface
   brightness (specified by parameter OUTBACK) is subtracted from
   the final fit. This fit is converted back to the same units as
   the input CRDD to form the background estimate.
2 Authors
DSB: David Berry (STARLINK)
2 History
 6-OCT-1992 (DSB):
    Original version.
1 COADDCRDD
Coadd CRDD traces crossing specified positions.

Description:

   The application takes a group of CRDD NDF files of any form
   (Survey, AO, etc) and coadds the data traces for any detector which
   crosses the specified expected point sources. Separate coadditions
   are carried out for each waveband for each source position.

   Any input CRDD NDF files should have been destriped previously, in
   order to remove detector to detector differences in calibration.

   The first stage of coadding is the selection of expected source
   positions. All the reference positions associated with any of the
   input CRDD NDFs will be taken as expected point sources by COADDCRDD.
   The user can also specify additional expected point source positions.

   By default both the displayed reference positions, and any positions
   of subsequent sources the user may want to enter, are specified in
   Equatorial(B1950) coordinates. If the user wants a different coordinate
   system  to be used he should enter the coordinate system he requires
   as the COORDS parameter.

   To enter additional expected point sources positions, the user should
   set the ADD_SOURCE parameter TRUE. He will then be prompted for the
   name, title, longitude and latitude of each additional expected source
   position in the given coordinate system. This facility enables the user
   to examine several positions close together using only one set of
   extracted CRDD NDF files which cover all these positions. The user
   should be aware that apparent point sources in a coadded trace, but not
   at the expected source position may be spurious. He should coadd
   the traces again using the apparent position as an expected position,
   to see whether this source is real.

   The second stage is the selection and processing of the traces, this
   is carried out for each source at each wavelength. The processing
   consists of selecting those detector traces to be used, determining
   the weights to be applied to them, and aligning the trace correctly
   so that the correct samples are aligned at the expected point source.

   By default, a detector scan is about 4.5 arcmin wide, see Explanatory
   Supplement Table II.C.3 for exact width of each detector, and if a
   source position falls within that field of view, the detector
   scan is regarded as a crossing scan and will be coadded with other
   crossing scans. The user can modify this criterion by selecting a
   non zero detector width extension, see parameter WIDEXT.

   When coadding, the detector data can be weighted according to a
   combination of one or two factors, dependant on the reliability of
   the detectors and the distance of the crossing from the expected
   source position. The reliability factor can follow one of the
   following schemes, see parameter WEIGHT:

   1. Variance weighting: If the input CRDD files contain variance
      values associate with each CRDD sample, the samples can be
      weighted according to their variance so that the greater weight
      is given to the more accurate samples. Samples with zero
      variance are treated like bad samples and hence excluded from
      the coadding.

   2. NEFD Weight: The data from each detector can also be weighted
      according to the noise equivalent flux density (NEFD) of the
      detector, obtained from Exp. Supp. Fig IV.A.1., so that the
      most noisy detectors have the lowest weighting.

   3. Equal weighting: All data from the crossing detectors
      contribute equally to the coadded result.

   All above weighting schemes can be combined with a distance effect
   if required. If the distance effect is selected the weight(s) of a
   data trace is taken to be the product of the weight(s) decided
   from one of above schemes and a weight which is a Gaussian function
   of the distance of the trace centre from the expected source position.
   With this distance weight, the effect of the detector which crosses
   the expected source at its edge can be reduced. The Gaussian function
   can have different width by specifying its value at the edges of the
   detectors, see parameter GVDTEG. If distance weighting is not required
   the parameter DISTANCE should be set false.

   When the input CRDD files have variance components, the default
   weighting will be 'distance-variance', otherwise the weighting
   will be 'distance-NEFD'.

   For each crossing scan, a sequence of about 80.0 arcmin length is
   extracted centered on the expected source position, these are usually
   sufficient for source signal and noise estimation. Should a user feel
   it is not adequate to his requirement, he can select another
   sequence length via parameter SCNLEN.

   During coadding, the traces are aligned with the trace which is
   closest to the expected source position. This consists of two phases.
   The detector traces are reversed if they traversed the sky in the
   opposite direction to the direction of the closest scan. Then the
   samples are aligned so that the samples crossing the source position
   coincide. The interpolation used when aligning the traces can be either
   'nearest' or 'linear'. In nearest interpolation the sample nearest to
   the source position is used as a central point. In linear interpolation
   the central value is a linear combination of the two samples closest
   to the source position and the values for each sample worked outwards
   from this centre is also a linear combination of the corresponding samples
   in the original trace. The user should note that although this then
   aligns samples by their in-scan distance from the source point, it does
   not take account of the fact that scans may be crossing through the source
   at slightly different angles. Therefore the coadding may add signals that
   are in a slightly different position in the sky but at the same in-scan
   distance from the source. The effect can be neglected except if looking
   for point sources not at the expected position, where they should be
   recoadded (see above).

   If more than half of the samples in a crossing trace are bad, the trace
   is discarded.

   The adjusted weighted samples are then coadded together.

   For each expected point source there will be one NDF file created
   for each waveband where there was at least one detector which crossed
   the source position. Each NDF will inherit the IRAS specific information
   of the detector trace whose centre is closest to the expected source
   position among all crossing traces coadded in that NDF. This means
   that the position associated with each sample is likely to be very
   slightly wrong. The data will in fact refer to a tracelike series of
   positions passing through the source position and parallel to the
   nearest detector trace, while the associated positional data will give
   in effect the position of the center of the nearest detector trace. The
   maximum error in position caused by this effect will be half the width
   of the detector (after allowance for the users width extension).
   Thus more detector traces coadded gives a better result not only in
   the data reliability, but also in the positional accuracy. And the
   positional inaccuracy is only commensurate with the data inaccuracies
   caused by sampling at the edge of a detector.

   The reason for the use of this nearest detector inheritance is that
   it means that coadded NDF files can be processed by some other IRAS90
   applications, such as TRACECRDD in the same way as a normal CRDD NDF.
   But the user should be aware that some IRAS specific information, e.g.
   SOP, OBS and detector number, and such figures as cross scan distance
   reported by the applications may be irrelevant to data trace it contains.
   Thus TRACECRDD will report the correct reference position, a cross scan
   value and positions in 'get data value' that may be out by the half
   detector width, an average point source profile for the waveband, and
   a detector number which is not applicable.

   Users should also be aware that they should not use coadded scans in
   subsequent coadding or image preparation with eg MAPCRDD. This is because
   of two things, firstly the positional inaccuracies noted above, and
   secondly that since the coadded scan already contains processed weighting
   applying a second weighting is going to use the wrong weight values, and
   assume only accuracy appropriate for a single scan.

   Under normal usage a logfile will be produced containing details of the
   crossing information which are not reported to the screen.
2 Parameters
For information on individual parameters, select from the list below:
3 ADD_SOURCE
ADD_SOURCE = LOGICAL (Read)
   When this is true the user is prompted to supply details of
   additional source positions.
3 AUTOMATIC
AUTOMATIC = LOGICAL (Read)
   When it has the value true, the application will run in the
   automatic mode, where output file names, titles and labels of
   the output NDF files (one for each expected source) will be
   generated by the application. Otherwise the user will be
   prompted for these values. [TRUE]
3 OUT
OUT = NDF (Read)
   The name of the output NDF file containing the coadded data
   trace for each expected point source. It will only be used when
   the application is running in non-automatic mode. If the
   application is running in automatic mode the default value will
   be "coadded_"sourcename"_b"waveband number eg coadded_wola_b3 .
3 COORDS
COORDS = LITERAL (Read)
   Sky coordinate system used to specify the additional expected
   point source positions. When reporting in the log file, this
   sky coordinate system will also be used to describe the crossed
   expected point source position. Valid values include ECLIPTIC,
   EQUATORIAL and GALACTIC. See help on "Sky_coordinates" for more
   information on available sky coordinate systems.
   [current sky coordinate system]
3 IN
IN = NDF (Read)
   Specifies a group of input CRDD NDF files. This should be in the
   form of a group expression (see help on "Group_expressions").
   All files in the group should be from the same CRDD type, but can
   be from different waveband. If an expected source is crossed by
   the detector traces from the different wavebands, the coadding
   will be performed for each waveband.
3 DISTANCE
DISTANCE = _LOGICAL (Read)
   If it is true, the distance of the centre of a trace from the
   expected source position will be taken into account when
   deciding the weight used when coadding. Otherwise, the distance
   will not be taken into account. [TRUE]
3 GVDTEG
GVDTEG = _REAL (Read)
   The value of the Gaussian weighting function at the edge of the
   detector used when the distance of trace centre to the
   expected source position is taken into account. The default
   value is such that the detector traces which see the
   expected source at the edge of their field of view will have
   half weighting compared with the traces pass the expected
   source at their centre. [0.5]
3 INTER
INTER = LITERAL (Read)
   Specifies the interpolation method to be used when aligning the
   crossing traces. It can take following values:

    LINEAR - The linear interpolation method is to be used.

    NEAREST - The nearest neighborhood method is to be used.

   The input can be abbreviated to an unambiguous length and is
   case insensitive. [LINEAR]
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of the logging file to contain the reporting of the
   crossing and related information for all expected point source
   position. [coaddcrdd.log]
3 MSG_FILTER
MSG_FILTER = LITERAL (Given)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").  [current message filter setting]
3 OFILTXT
OFILTXT = LITERAL (Read)
   The name of the text file containning the names of the output
   NDF this file can be used as the input file for the following
   applications which accept group NDF specification.
   [outndf.log]
3 SCNLEN
SCNLEN = _REAL (Read)
   The length of the scan in aremin extracted around the expected
   source from a crossing trace to be coadded with the other
   crossing traces. [80.0]
3 SOURCE_LAT
SOURCE_LAT = LITERAL (Read)
   The sky latitude of the additional expected source position,
   in the coordinate system specified by the parameter COORDS
   (eg if COORDS is EQUATORIAL then SOURCE_LAT should be given
    the Declination of the image centre). See help on
   "Sky_coordinates" for the formats allowed for this value.
   The application will keep prompting for the next expected
   source position until a null, '!', value is given to the
   parameter SOURCE_NAME.
3 SOURCE_LON
SOURCE_LON = LITERAL (Read)
   The sky longitude of the additional expected source position,
   in the coordinate system specified by the parameter COORDS
   (eg if COORDS is EQUATORIAL then source_LON should be given the
   Right Ascension of the image centre). See help on
   "Sky_coordinates" for the formats allowed for this value.
   The application will keep prompting for the next expected
   source position until a null, '!', value is given to the
   parameter SOURCE_NAME.
3 SOURCE_NAME
SOURCE_NAME = LITERAL (Read)
   The name of the additional expected sources specified by the
   user. The application will keep prompting for the name of the
   next source until a null value,'!' is supplied. [!]
3 TITLE
TITLE = LITERAL (Read)
   The title of the output NDF file which contains the coadded
   data trace. In the automation mode, the title of the NDF for a
   expected source will be created by the application by
   concatenating the string 'COADDCRDD:' and the source name. And
   hance this parameter will not be used in this mode.
3 WEIGHT
WEIGHT = LITERAL
   The weighting scheme used when coadding. It can take following
   values:

     VARIANCE - Samples in the traces are weighted according to
                the variance associated with them.

     NEFD - The traces are weighted according to the noise equivalent
            flux density (NEFD) of their detector.

     EQUAL - The traces are uniformly weighted.

   The input can be abbrievated to an unambiguous length and is
   case insensitive. []
3 WIDEXT
WIDEXT = _REAL (Read)
   The detector width extenion. With this parameter being non-
   zero, the detector width used by the application becomes
   DETWID + WIDEXT * DETWID, where DETWID is the width of the
   detector (about 4.5 arcmin, see exp. suppl. Table II.C.3 for
   its exact value for each detector), and if an expected source
   position falls within the scan field of this width, the detecor
   trace is regarded as a crossing trace. It is recommended that if
   this parameter is to be used, its value should be selected
   between 0.0 and -1.0 so that the detectors which see the soucre
   at the edge of their field of view will not be selected. [0.0]
2 Authors
WG: Wei Gong (IPMAF)
2 History
 10-NOV-1992 (WG):
    Original version

1 COLCORR
Calculate colour corrected surface brightness images.

Usage:

   COLCORR TEMP TAU BAND OUT

Description:

   This routine takes two aligned images, one holding colour
   temperature values and the other holding optical depth values,
   and creates an output image holding the corresponding surface
   brightness values, colour corrected for the central wavelength of
   any of the four IRAS wavebands. The temperature and optical depth
   images can be created by COLTEMP.

   The calculation of colour corrected surface brightness values is
   based on the assumption that all sources have greybody spectra
   with a constant emissivity spectral index, BETA. The value of BETA
   used is the same as was used when the optical depth image given
   for parameter TAU was created. It is assumed that all sources are
   optically thin.

   The input NDFs should be aligned pixel-for-pixel. If the bounds
   of the two NDFs do not match, the output image covers just the
   overlap area. Any QUALITY component present in the temperature
   NDF is propagated to the output NDF. All extensions are
   propagated from the temperature NDF.

   Variances for the calculated surface brightness values are
   created if both input NDFs have VARIANCE components.
2 Parameters
For information on individual parameters, select from the list below:
3 BAND
BAND = _INTEGER (Read)
   The wavelength (in microns) of the IRAS survey band for which
   colour corrected data is to be generated (12, 25, 60 or 100).
   Note, the value specified need not necessarily be the same as
   that supplied for the WAVEL parameter of application COLTEMP.
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDF. See help on "History_in_IRAS90" for more
   information on history.
                                         [current history setting]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 OUT
OUT = NDF (Write)
   The colour corrected output image, in units of MJy/sr.
3 TAU
TAU = NDF (Read)
   An optical depth image, in units of 1.0E-16 as created by
   COLTEMP. Note, it is assumed that these values are much less
   than unity (i.e. all sources are optically thin). A warning is
   issued if this is not the case.
3 TEMP
TEMP = NDF (Read)
   A colour temperature image, as created by COLTEMP.
2 Examples
COLCORR M51_TEMP M51_TAU 12 M51_CC12
   This example generates a 12 micron colour corrected image
   called M51_CC12 from the temperature map M51_TEMP and the
   optical depth map M51_TAU. COLTEMP would previously have been
   run to create the temperature and optical depth images.
2 Authors
DSB: David Berry (STARLINK)
2 History
 21-MAY-1993 (DSB):
    Original version.
1 COLTEMP
Calculate colour temperature and optical depth maps.

Usage:

   COLTEMP IN1 IN2 BETA TEMP TAU WAVEL

Description:

   This routine takes two aligned images from different wavebands as
   input, and creates two corresponding output images holding colour
   temperature and optical depth. An optically thin greybody source
   spectrum is assumed. The optical depth is assumed to vary as
   frequency to the power BETA, where BETA is a constant supplied by
   the user.  Temperatures outside the range 30 K to 10000 K cannot
   be handled and cause corresponding bad values to be introduced
   into the output NDFs. Negative values in either of the two input
   images also cause bad output values to be created.

   The input NDFs should be aligned pixel-for-pixel. If the bounds
   of the two NDFs do not match, the output images cover just the
   overlap area. Any QUALITY component present in the shorter
   waveband NDF is propagated to the output NDFs. All extensions are
   propagated from the short waveband NDF, but some information
   describing the origin of the input image is deleted from the
   IRAS extension.

   The calculation of colour temperature and optical depth is based
   on the use of the detector spectral response curves described in
   the IRAS Catalogs and Atlases Explanatory Supplement, table
   II.C.5. The uncertainty in these curves is not well known, but a
   description of the likely ranges is given on page VI-28
   (paragraph C3). The change in the calculated temperature and
   optical depth values caused by varying the spectral response
   curves slightly can be investigated using the parameters LERR and
   RERR.

   Variances for the calculated temperatures and optical depths can
   be created if both input NDFs have VARIANCE components (see
   parameter VAROUT). These variances do not take into account the
   uncertainties in the detector spectral response curves, but just
   describe the uncertainty in output data caused by the uncertainty
   in the input data.
2 Parameters
For information on individual parameters, select from the list below:
3 BETA
BETA = _REAL (Read)
   The emissivity spectral index. A value of zero causes a
   blackbody source spectrum to be used.
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDF. See help on "History_in_IRAS90" for more
   information on history.
                                         [current history setting]
3 IN1
IN1 = NDF (Read)
   The first input image.
3 IN2
IN2 = NDF (Read)
   The second input image.
3 LERR
LERR = _REAL (Read)
   Specifies a shift in wavelength to apply to the published
   detector spectral response curves before using them. The
   wavelength of each tabulated point is increased by the value
   supplied. The value should be given in microns, and can be
   positive or negative.                                     [0.0]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 RERR
RERR = _REAL (Read)
   Specifies a factor by which to multiply the published detector
   spectral response values before using them.               [1.0]
3 TAU
TAU = NDF (Write)
   An output image containing the optical depth at the wavelength
   given by parameter WAVEL. The values stored in this image are
   in units of 1.0E-16. Thus an NDF value of 9678.2 represents an
   optical depth of 9678.2E-16. If a null value is supplied for
   this parameter, no optical depth image is created.
3 TEMP
TEMP = NDF (Write)
   The temperature output image. Temperatures are stored in
   Kelvin.
3 VAROUT
VAROUT = _LOGICAL (Read)
   Specifies if VARIANCE components should be created in the
   output NDFs. A warning is given if output variances are
   requested but cannot be calculated. The run time default is
   YES if both input NDFs have VARIANCE components, and NO
   otherwise.                                                   []
3 WAVEL
WAVEL = _REAL (Read)
   The wavelength at which the optical depth is required, in
   microns. It can take any positive value (not just 12, 25, 60
   and 100). This parameter is not used if parameter TAU is given
   a null value.
2 Examples
COLTEMP RING_B1 RING_B2 1.0 TEMP TAU 30
   This evaluates colour temperature and optical depth maps from
   the two images RING_B1 and RING_B2. The optical depth is
   assumed to vary linearly with frequency (BETA=1.0), and the
   optical depth is calculated at a wavelength of 30 microns.

COLTEMP RING_B1 RING_B2 1.0 TEMP TAU 30 LERR=0.3
   This example is the same as the previous example except that
   the published detector spectral response curves are shifted by
   0.3 micron before being used. The change in the resulting
   temperatures and optical depths gives some idea of the
   uncertainty in their values.
2 Authors
DSB: David Berry (STARLINK)
2 History
 21-MAY-1993 (DSB):
    Original version.
1 DEGLCRDD
Deglitch the CRDD data

Description:

   This application deglitches the detector data traces of a group
   CRDD files.

   Glitches are defined as spikes in the data which exceed the local
   noise level, and which are of duration less than a specified
   width, see parameter GLWID.

   The samples in the detected glitches can either be replaced by a
   Starlink bad value or be flaged by a specified quality name, see
   parameter QNAME, (GLITCH by default).

   In case the samples in the glitches being replaced by Starlink
   bad values, there will be a new CRDD file created for each input
   CRDD file. Only the DATA component of each NDF is modified; all
   other components are copied from the input CRDD file to the output
   without change. If the samples in the glitches are being flagged,
   the QUALITY component of the input CRDD file is updated and there
   will no new CRDD file created.
2 Parameters
For information on individual parameters, select from the list below:
3 BOX
BOX = REAL (Read)
   The size of the smoothing box, given in times of the width of
   the point source profile, used when rejecting samples stay
   too far away from its local average, see section Algorithm.
   [2.0]
3 CLIP
CLIP( NITER ) = REAL (Read)
   The times of standard deviations at which samples will
   regarded as staying too far away from its local average and
   being rejected hence in each iteration, see section Algorithm.
   If the given number of CLIP less then the number of iteration,
   the last CLIP value will be repeated for the remaining CLIP.
   [3.0]
3 COMMENT
COMMENT = LITERAL (Read)
   A comment to store with the quality name assigned to the
   samples in the detected glitches. If parameter will only be
   used when parameter SETBAD has a value of FALSE and the
   specified quality name (by parameter QNAME) is not currently
   defined within the input CRDD file.
   [Samples in the detected glitches]
3 GLWID
GLWID = REAL (Read)
   The spikes whose duration less than this value times the size
   of a point source are regarded as a glitch and are either
   replaced by BAD values or flagged by a specified quality name.
   A value of zero will suppress all deglitching, whereas a value
   of 1.0 will give very strong deglitching which will probably
   reject point sources as well. [0.3]
3 HISTORY
HISTORY = LOGICAL (Read)
   Determines if history information is to be added to the input
   or output CRDD files. See help on "History_in_IRAS90" for more
   information on history.
   [Current history setting]
3 IN
IN = NDF (Read)
   Specifies a group of input CRDD files. This should be in the
   form of a group expression (see help on "Group_expressions").
   There is no limit on the number of CRDD files which can be
   specified.
3 MSG_FILTER
MSG_FILTER = LITERAL (Given)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
   [current message filter setting]
3 NITER
NITER = INTEGER (Given)
   The number of iterations to perform the "soomth-reject"
   procedure. [8]
3 OUT
OUT = NDF (Write)
   When the samples in the detected glitches are replaced by
   Starlink bad values, this parameter is used to give a group of
   output CRDD files corresponding one-for-one with the list of
   input CRDD files given for parameter IN. This should be in the
   form of a group expression (see help on "Group_expressions").
   Expressions such as "*_DG" are expanded by replacing the "*"
   character with each input CRDD file in turn.
3 PROFILES
PROFILES = NDF (Read)
   An NDF holding in-scan profiles of ideal point sources. The
   width of a point source in a waveband are difined as the width
   of the profile, given here,  at its half max. value.
   The default value is the files "profiles.sdf" contained in
   the main IRAS90 directory, which contains profiles taken from
   the IRAS Catalogs and Atlases Explanatory Supplement, page
   V-14. [ ]
3 QNAME
QNAME = LITERAL (Read)
   The quality name to be assigned to the samples in detected
   glitched. If the supplied name is not already defined within
   the input NDF, then a definition of the name is added to the
   NDF. The user is warned if the quality name is already defined
   with the NDF. [GLITCH]
3 SETBAD
SETBAD = LOGICAL (Read)
   If it is true, the samples in the detected glitches will be
   replaced by Starlink BAD values. And a output CRDD file will
   created for each input CRDD file to hold the modified data. If
   it is false, the quality components of the input CRDD files
   will be modified to hold specified quality name for these
   samples in the glitches. [TRUE]
3 XNAME
XNAME = LITERAL (Read)
   If the NDF already contains any quality name definitions then
   new quality names are put in the same extension as the old
   names. If no previous quality names have been stored in the NDF
   then this parameter will be used to obtain the name of an NDF
   extension in which to store new quality name. The extension
   will be created if it does not already exit (see parameter
   XTYPE ). [QUALITY_NAMES]
3 XTYPE
XTYPE = LITERAL (Read)
   If a new NDF extension is created to hold quality names (see
   parameter), then this parameter is used to obtained the HDS
   data type for the created extension. The default is to give the
   extension a type identical to its name. [ ]
2 Authors
WG: Wei Gong (IPMAF)
2 History
 21-MAY-1993 (WG):
    Original version.
1 DESTCRDD
Removes detector-to-detector stripes from a group of CRDD files.

Usage:

   DESTCRDD IN OUT

Description:

   This routine performs detector-to-detector destriping on a group
   of CRDD files. An output CRDD file is produced for each input
   CRDD file, holding the destriped data.  Each CRDD file is
   destriped by subtracting a constant offset from each detector
   data stream, so that all detectors in the output CRDD file have
   the same background surface brightness. The mean background
   surface brightness in each CRDD file (in MJy/sr) is preserved; no
   attempt is made to match backgrounds between different CRDD
   files.

   Only the DATA component of each NDF is modified by this routine;
   all other components are copied to the output without change.
2 Parameters
For information on individual parameters, select from the list below:
3 BACKMEAN
BACKMEAN = _REAL (Write)
   An output parameter to which is written the mean background
   surface brightness after destriping. The mean is taken over
   all the CRDD files specified by parameter IN, and is in units
   of Mega-Janskys per steradian. This value is also written
   to the screen once all the CRDD files have been processed.
3 BACKSIGMA
BACKSIGMA = _REAL (Write)
   An output parameter to which is written the standard deviation
   of the background surface brightness after destriping. The
   standard deviation is taken over all CRDD files specified by
   parameter IN, and is in units of Mega-Janskys per steradian.
   This value is also written to the screen once all the CRDD
   files have been processed.
3 BOX
BOX = _INTEGER (Read)
   The size of the smoothing box used during the cleaning
   algorithm, given as a number of samples. This is roughly the
   extent of the largest source to be rejected from each detector
   data stream before going on to estimate the background surface
   brightness. A value of zero causes no cleaning to be
   performed.                                                 [40]
3 CLIP
CLIP = _REAL (Read)
   The number of standard deviations at which data will be
   rejected by the cleaning algorithm.                       [1.0]
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output CRDD files. See help on "History_in_IRAS90" for more
   information on history. The history information will contain
   the names of the input CRDD files, DESTCRDD parameter values,
   and the offsets subtracted from each detector.
                                         [current history setting]
3 IN
IN = NDF (Read)
   Specifies a group of input CRDD files. This should be in the
   form of a group expression (see help on "Group_expressions").
   The CRDD files must contain data from the same IRAS waveband.
   There is no limit on the number of CRDD files which can be
   specified.
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 NITER
NITER = _INTEGER (Read)
   The number of cleaning iterations to perform. A value of zero
   causes no cleaning to be performed.                         [4]
3 OUT
OUT = NDF (Write)
   A group of output CRDD files corresponding one-for-one with
   the list of input CRDD files given for parameter IN.  This
   should be in the form of a group expression (see help on
   "Group_expressons"). Expressions such as "*_DS" are expanded
   by replacing the "*" character with each input CRDD file in
   turn.
3 QEXP
QEXP = LITERAL (Read)
   A quality expression giving the quality of samples which are
   to be included in the estimation of the offset to be
   subtracted from each detector. A value of "ANY" causes all
   samples to be used, without regard to quality.            [ANY]
3 QNAME
QNAME = LITERAL (Read)
   The name of a quality to be assigned to all samples which do
   not contribute to the estimation of a detector offset value.
   Samples are omitted from the detector offset calculations if
   they are bad in the input NDF, do not satisfy the quality
   expression given by parameter QEXP, or are rejected as source
   samples by the cleaning algorithm. A blank value for QNAME
   causes no quality values to be assigned.                     []
3 XNAME
XNAME = LITERAL (Read)
   If any the input NDF do not already contain any quality name
   definitions then new quality names are put in the extension
   specified by XNAME. This extension is created if it does not
   already exist.                                  [QUALITY_NAMES]
3 XTYPE
XTYPE = LITERAL (Read)
   If any new NDF extensions are created to hold quality names
   (see parameter XNAME), then parameter XTYPE is used to obtain
   the HDS data type for the created extensions. The run time
   default is to give the extension a type identical to its name.
                                                                []
2 Examples
DESTCRDD ZCMA_B1S1 ZCMA_B1S1_DS
   This command destripes CRDD file ZCMA_B1S1 and puts the
   results in ZCMA_B1S1_DS.

DESTCRDD *_RAW *|_RAW|_DS| QEXP=.NOT.(SOURCE_A.OR.SOURCE_B)
   This command attempts to destripe all NDFs in the current
   directory which have names ending with "_RAW", placing the
   results in corresponding output NDFs in which "_RAW" is
   replaced by "_DS". Any samples which have either of the two
   qualities SOURCE_A and/or SOURCE_B are excluded from the
   estimation of the detector offsets.
2 Estimation_of_Detector_Offsets
   The user may choose to exclude certain samples from the estimation
   of the detector offsets, by giving a "quality expression" for
   parameter QEXP. Only those samples which have qualities satisfying
   the given quality expression are included in the estimation of the
   detector offsets. Qualities can be assigned to selected samples
   using routine SETQUAL.

   After removing samples which do not satisfy the quality
   expression, each detector data stream is "cleaned" by removing
   any remaining bright sources which may adversly influence the
   estimation of the background surface brightness. To do this the
   detector data stream is smoothed with a box filter, the size of
   which is specified by parameter BOX. The RMS residual between the
   smoothed data and the original data is then found. All samples
   for which the residuals exceeds a given multiple of the RMS
   residual (specified by parameter CLIP) are rejected as belonging
   to a bright source. The process is then repeated, excluding the
   samples just rejected, a given number of times (specified by
   parameter NITER). This cleaning can be switched off by specifying
   a value of zero for either NITER or BOX.

   Next, the median value of the remaining data is found, and is
   converted into a surface brightness value in Mega-Janskys per
   steradian (see help on "Detector_solid_angles" and
   "Detector_bandwidths" for lists of detector effective solid
   angles and band widths). The mean of the median surface
   brightnesses of all detectors in the CRDD file is found. The
   detector offsets are then calculated by subtracting this mean
   surface brightness from each individual detector's median surface
   brightness. The offsets are finally converted back from
   Mega-Janskys per steradian to the units of the input CRDD file.

   The offsets are then subtracted from all input samples (including
   those previously rejected by the cleaning algorithm or the
   quality expression), and these are then stored in the output CRDD
   file.
2 Background_Levels_in_the_Output_CRDD_Files
   Output CRDD files retain the mean background surface brightness
   of the input data. This may result in scan-to-scan stripes being
   visible in images formed from the output CRDD files. These
   stripes can be removed by processing the CRDD files produced by
   DESTCRDD with routine BACKCRDD before combining them into an
   image.

   After all CRDD files have been destriped, the mean background
   surface brightness (taken over all the output CRDD files) is
   displayed in Mega-Janskys per steradian. The spread in background
   values in the output CRDD files is also displayed. These values
   are written to the output parameters BACKMEAN and BACKSIGMA.
2 Authors
DSB: David Berry (STARLINK)
2 History
 5-OCT-1992 (DSB):
    Original version.
1 FINDCRDD
Accepts a list of sources, and prepares files specifying
corresponding CRDD data to be extracted.

Description:

   FINDCRDD enables the user to input and edit a list of source
   positions which may be started as a new list, or initiated from
   a previously prepared file. It then allows the user to input the
   source size and waveband requirements associated with the
   extraction of Survey CRDD data. It checks whether all the data for
   any source can be provided from a single archive CRDD file, and if
   not allows the user to return to the editing menu to put in dummy
   sources to extract data from other archive files if required.
   Finally it prepares files containing details of IRAS survey CRDD
   data to be extracted by the succeeding program, EXCRDD.
2 Parameters
For information on individual parameters, select from the list below:
3 AUGMENTNAME
AUGMENTNAME = _CHAR (Read)
   Name of source to be augmented with size and wavebands.
3 BANDSREQ
BANDSREQ = LITERAL (Read)
   Bands required entered as 12,25 etc.. [12,25,60,100].
3 CONFIRMADDEDIT
CONFIRMADDEDIT = _LOGICAL (Read)
   Confirmation that added or edited source details are correct
   [Y].
3 CONFIRMDELETE
CONFIRMDELETE = _LOGICAL (Read)
   Confirmation that the source printed is to be deleted [N].
3 CONFIRMREQ
CONFIRMREQ = _LOGICAL (Read)
   If .TRUE. added/ edited sources are to be confirmed.
3 CROSSCAN
CROSSCAN = _REAL (Read)
   Size of required region in cross scan direction given in
   arcmins. [0.0]
3 DATATYPE
DATATYPE = LITERAL (Read)
   (The facility that requires this is not available in FINDCRDD
   version 1.0).

   Type of survey data required: 0 = Don't know, 2 = PASS 2 CRDD
   on tape, 3 = PASS 3 CRDD on exobyte.
3 DELETESONAME
DELETESONAME  = LITERAL (Read)
   Name of the source to be deleted. If more than one source with
   this name is present then each one is offered for deletion.

   If the user enters ! to this prompt no more sources are to be
   deleted.
3 DISPLAYORFILE
DISPLAYORFILE = LITERAL (Read)
   Controls whether certain information is displayed at the
   terminal or written to a file.

   The types of information affected are:-

   Lists of sources prepared by selecting L from a menu,

   Details of source regions which may fall partly outside plate
      boundaries.

   The options are:-

   - D = Display on terminal

   - F = File

   - B = Both

   - A = Ask user which he wants at time the display is prepared.

   If the user enters ! to this prompt no display or file will be
   prepared.
   [A]
3 EDITSOURCENAME
EDITSOURCENAME = LITERAL (Read)
   Name of the source to be edited. If more than one source with
   this name is present then each one is offered for editing.

   If the user enters ! to this prompt no more sources are to be
   edited.
3 INSCAN
INSCAN = _REAL (Read)
   Size of required region in in_scan direction given in arcmins.
   [120.0]
3 INSOURCEFILE1
INSOURCEFILE1 = FILENAME (Read)
   Name of a file from which source positions are to be read. It
   will have been created in this or a previous run of FINDCRDD.

   If the user enters ! to this prompt no file is read and the
   user is returned to the menu.
3 MAINCHOICE
MAINCHOICE = LITERAL (Read)
   Main menu choice

   - I = Input or edit source positions

   - S = Find survey data

   - Q = Exit FINDCRDD
   [I]
3 MENU11CHOICE
MENU11CHOICE = LITERAL (Read)
   Users choice from 'Select data to use' menu within the Input
   Source Positions option:-

   - N = Input new list of sources,

   - C = Modify current list,

   - F = Modify list from file,

   - L = Display sources selected,

   - P = Change number of lines displayed on a page

   - R = Return to main menu,

   - Y = Accept selected source list.

   If the user enters ! to this prompt the menu is redisplayed.
   [N].
3 MENU12CHOICE
MENU12CHOICE = LITERAL (Read)
   Users choice from 'Edit source list' menu within the Input
   source positions option:-

   - A = Add new sources to current list,

   - E = Edit data in current list of sources,

   - D = Delete sources from current list,

   - L = Display current list of sources,

   - P = Change number of lines displayed on a page

   - C = Change coordinate system in which position is entered,

   - Y = Accept source list.

   If the user enters ! to this prompt the menu is redisplayed.
   [Y]
3 MENU2CHOICE
MENU2CHOICE = LITERAL (Read)
   Option from input-size-and-waveband menu in survey data option.

   - Z = Enter region size for all sources

   - W = Enter wavebands required for all sources

   - I = Enter region size and wavebands for individual sources

   - L = Display current list of sources

   - P = Change number of lines displayed on a page

   - R = Return to main menu

   - Y = Accept source list

   If the user enters ! to this prompt the menu is redisplayed
3 MSG_FILTER
MSG_FILTER = _INTEGER (Read)
   Controls whether menus are displayed and updated source lists
   are displayed after each change. Sources can be listed by
   selecting L from a menu no matter what the value of MSG_FILTER.

   - 1 = Neither source lists nor menus are shown.

   - 2 = Source lists are shown automatically, menus are not.

   - 3 = Menus are shown automatically, source lists are not.

   - 4 = Both source lists and menus are shown automatically.
   [3]
3 NEXTPAGE
NEXTPAGE = _LOGICAL (Read)
   Press return to display next page of source listing, scan
   listing etc.

   If the user enters N or ! to this prompt the next page will not
   be displayed and the user will be returned to the menu.
   [Y]
3 OFFEDGEFILE
OFFEDGEFILE = FILENAME (Read)
   Name of a file to contain details of sources which may have
   some of the required region off the edge of the plate.

   The default name of this file is generated automatically as
   'source name'_OFFEDGE ( or the corresponding lower case on a
   UNIX machine) and offered to the user.
3 OUTDESCFILE
OUTDESCFILE = FILENAME (Read)
   Name of a file to contain messages about plate files created
   and tapes to be used in subsequent EXCRDD runs.

   The name of this file is generated automatically as
   FINDCRDD_PLATES_REQ. ( or the corresponding lower case on a
   UNIX machine)
3 OUTSOURCEFILE1
OUTSOURCEFILE1 = FILENAME (Read)
   Name of file in which to save source positions created in
   input or edit source positions.

   If the user enters ! to this prompt no file will be saved.
3 OUTSOURCEFILE2
OUTSOURCEFILE2 = FILENAME (Read)
   Name of file in which to save source positions created in
   input size and wavebands part of the survey data option.
3 PAGELENGTH
PAGELENGTH = INTEGER (Read)
   Number of lines per page on display
3 RETURNMAIN
RETURNMAIN = _LOGICAL (Read)
   Option to return to main menu (.TRUE.) if at the end of the
   subroutine which find what plates the sources are on, it has
   found a part of a source region off the edge of the plate. It
   allows the user to put in a dummy source in the next plate.
3 RETURNSWMENU
RETURNSWMENU = _LOGICAL (Read)
   Set .TRUE. if on finding some sources without size or wavebands
   the user wants to return to the Size and Wavebands Menu to add
   them. If set .FALSE. those sources for which there is either no
   inscan length, or no wavebands required will not be processed.
3 SOURCECOORD1
SOURCECOORD1 = _CHAR (Read)
   First coordinate of source position in current coordinate
   system. The formats available for both coordinates, are:-

   Equatorial:-

   -   Style 1 :- RA = 12hrs 3m 0.02s  DEC = -33deg 23m 0.0s

   -   Style 2 :- 12h 3m 0.02s  -33d 23m 0.0s

   -   Style 3 :- 120300.02   -332300.0  (hhmmss.ss and ddmmss.ss)

   -   Style 4 :- 12 03 0.02  -33 23 00.0

   -   Style 5 :- 12.050006  -33.383333  (fractional values in hrs
                                         (RA) or deg (Dec))

   Ecliptic:-

   -   Style 1 :- ELONG= 12deg 3m 0.02s  ELAT= -33deg 23m 0.0s

   -   Style 2 :- 12deg 3m 0.02s  -33d 23m 0.0s

   -   Style 3 :- 0120300.02   -332300.0  (dddmmss.ss and
                                           ddmmss.ss)

   -   Style 4 :- 12 03 0.02  -33 23 00.0

   -   Style 5 :- 12.050006  -33.383333  (fractional values in
                                          degrees)

   Galactic:-

   -   Style 1 :- GLONG= 12deg 3m 0.02s  GLAT= -33deg 23m 0.0s

   -   Style 2 :- 12deg 3m 0.02s  -33d 23m 0.0s

   -   Style 3 :- 0120300.02   -332300.0  (dddmmss.ss and
                                           ddmmss.ss)

   -   Style 4 :- 12 03 0.02  -33 23 00.0

   -   Style 5 :- 12.050006  -33.383333  (fractional values in
                                          degrees)

   See SOURCECOORDSYS for changing coordinate system
3 SOURCECOORD2
SOURCECOORD2 = _CHAR (Read)
   Second coordinate of source position in current coordinate
   system. See SOURCECOORD1 for the formats available.

   See SOURCECOORDSYS for changing coordinate system
3 SOURCECOORDSYS
SOURCECOORDSYS = LITERAL (Read)
   The identifier of the coordinate system the user wants to make
   the current coordinate system. The options available are
   Equatorial, Ecliptic, and Galactic. For Equatorial and
   Ecliptic the user should also enter the equinox as (B1950) or
   (J2000). If the equinox is ommitted (B1950) is assumed. If the
   prefix B or J is ommitted B is assumed. Therefore the minimum
   abreviations are EQ (Equatorial(B1950)), EQ(J2000), EC
   (Ecliptic(B1950)), and GA. The default is the last coordinate
   system used or Equatorial(B1950).
3 SOURCELISTFILE
SOURCELISTFILE = FILENAME (Read)
   The file name to which to file a source list as it would be
   displayed on a terminal, for printing afterwards.
3 SOURCENAME
SOURCENAME = LITERAL (Read)
   The source name for this source, may be up to eight characters
   and must be a valid file name. Any characters input in lower
   case will be translated to upper case automatically.
   Since the source name used as an identification prefix for
   all files relating to that source IT IS STRONGLY ADVISED THAT
   EACH SOURCE NAME SHOULD BE UNIQUE.
3 SOURCETITLE
SOURCETITLE = LITERAL (Read)
   Full title of source for printout headings etc
   (up to 40 chars). [SOURCENAME]
3 SPFARCHFILE
SPFARCHFILE = FILENAME (Read)
   The name of the SPFARCH SDF file
   [FINDCRDD_DIR:NEWSPFARCH]
2 Notes
-  No ADAM parameter is given for the OUTPUT HDS FILE. An output
HDS file is generated for each plate, containing information on
the data EXCRDD needs to extract form that plate. This file is
automatically given the name "PLATExxxx" where xxxx is the plate
number, and therefore the program does not need to access the
parameter system. ( or the corresponding lower case name on a UNIX
machine)
2 Authors
DCP: Diana Parsons (IPMAF/RAL)
2 History
 6-JUN-1991 (DCP):
    Original version.
1 HISTORY
Display, delete or add NDF history information.

Usage:

   HISTORY NDF [FUNCTION] [LOGFILE]

Description:

   IN UNIX THE USER CAN ONLY USE THIS APPLICATION BY TYPING
   iras90_history TO AVIOD CONFLICT WITH UNIX history COMMAND

   This routine allows several operations to be performed on the
   history information stored within a group of NDFs...

   1) Existing history records can be displayed (specify using
   FUNCTION=DISPLAY). The history is displayed in pages on the
   terminal screen, and optionally logged to a text file. The
   history records to be displayed can be selected on the basis of
   their creation dates (see parameters SINCE and BEFORE), or on the
   basis of the command which created the history (see parameter
   COMMAND).

   2) All history information can be deleted (specify using
   FUNCTION=ERASE). There is no option to delete selected history
   records.

   3) Additional history records can be appended. The text is
   specified either by the contents of a text file or by typing at
   the keyboard. The same text is used for each specified NDF.
   (Specify using FUNCTION=ADD)

   The required operation is performed on each of the NDFs specified
   by parameter NDF in turn.  There is an option for the user to be
   re-prompted for further operations once the first has been
   completed (see parameter LOOP).  The default behaviour is to to
   display all history records from the supplied NDFs and then exit.
2 Parameters
For information on individual parameters, select from the list below:
3 BEFORE
BEFORE = LITERAL (Read)
   Only those history records created before the date and time
   specified by BEFORE are displayed. See help on
   "Time_and_date_strings" for more information on specifying
   times and dates within IRAS90. A null or blank value results
   in BEFORE being ignored. If LOOP is false then the run time
   default is a null value, otherwise there is no run time
   default.                                                     []
3 COMMAND
COMMAND = LITERAL (Read)
   The COMMAND parameter can be used to select which history
   records are to be displayed on the basis of the application
   which created them. If the string given for COMMAND can be
   found as a sub-string within the name of the application which
   created the history record, then the record is displayed. The
   names of all IRAS90 applications are stored in the form
   IRAS90:xxx, where xxx is the name of the application. Thus if
   COMMAND was given the value "IRAS90:", then only those history
   records which were created by IRAS90 applications would be
   displayed. A null value causes all history records to be
   displayed (subject to any other selection criteria). If LOOP
   is false then the run time default is a null value, otherwise
   there is no run time default.                                []
3 FUNCTION
FUNCTION = LITERAL (Read)
   The operation to be performed. Options are DISPLAY, ERASE or
   ADD. If LOOP has a false value then the run time default is
   'DISPLAY', otherwise there is no run time default.           []
3 LOGFILE
LOGFILE = LITERAL (Write)
   The name of a text file to receive a copy of any displayed
   history records. The run time default is for no log file to be
   produced.                                                   [!]
3 LOOP
LOOP = _LOGICAL (Read)
   If true then the user is re-prompted for a new value for
   FUNCTION once the previously requested function has been
   performed. If false, then the application exits once the first
   function has been performed.                            [FALSE]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering"). Output to the log file is not
   effected by the setting of this parameter.
                                  [current message filter setting]
3 NDF
NDF = NDF (Update)
   The group of NDFs to process. This should be in the form of a
   group expression (see help on "Group_expressions").
3 SINCE
SINCE = LITERAL (Read)
   Only those history records which were created since the date
   and time specified by SINCE are displayed. See help on
   "Time_and_date_strings" for more information on specifying
   times and dates within IRAS90. A null or blank value results
   in SINCE being ignored. If LOOP is false then the run time
   default is a null value, otherwise there is no run time
   default.                                                     []
3 TEXT
TEXT = LITERAL (Read)
   Text to be used to form a new history record. If the supplied
   text terminates with a minus sign, then the user is re-prompted
   for more text (the minus sign is removed before the text is
   stored in the NDF). The name of an existing text file can be
   specified, preceeded with an up-arrow character (^), in which
   case the text will be read from the text file. If more than
   one NDF is being processed, the same text is used for each NDF.
2 Examples
HISTORY CENA
   This will display all the history information contained within
   the NDF CENA on the terminal screen.

HISTORY CENA COMMAND=MAPCRDD
   This will display all the history information within CENA
   which was created by the MAPCRDD application.

HISTORY M51* ERASE
   This will remove all history information from all NDFs with
   names which start with the string "M51".

HISTORY "CENA,M82" LOGFILE=HISTORY MSG_FILTER=QUIET
   This will write all the history information contained within
   the two NDFs CENA and M82 to the text file HISTORY.DAT, but
   will display nothing on the screen.

HISTORY M51 LOOP=Y SINCE=FEB-12 BEFORE=FEB-16
   This will display all the history records from M51 which were
   create between the 12th and 16th of february (this year), and
   then reprompt the user for a new operation.

HISTORY M51 ADD TEXT="So far so good"
   This will append a new history record to M51, containing the
   text "So far so good".

HISTORY M51 ADD TEXT=^NEWHIST.LIS
   This will append a new history record to M51, taking the
   history text from the file NEWHIST.LIS.
2 Authors
DSB: David Berry (STARLINK)
2 History
 17-JAN-1992 (DSB):
    Original version.
1 I90HELP
Gives help about IRAS90.

Usage:

   I90HELP [TOPIC] [SUBTOPIC] [SUBSUBTOPIC] [SUBSUBSUBTOPIC]

Description:

   This routine displays help information, containing classified and
   alphabetical lists of commands, general information and related
   material; it describes individual commands in detail.

   Here are some of the main options:

      I90HELP

         No parameter is given so the introduction and the top-level
         help index is displayed.

      I90HELP application/topic

         This gives help about the specified application or topic.

      I90HELP application/topic subtopic

         This lists help about a subtopic of the specified
         application or topic. The hierarchy of topics has a maximum
         of four levels.

   Once in the help library, it can be navigated in the same way
   as VMS help libraries.  CTRL/Z (in VMS) or CTRL/D (in UNIX) to
   exit from any level, and <RET> to move up a level in the
   hierarchy.
2 Parameters
For information on individual parameters, select from the list below:
3 LIBRARY
LIBRARY = LITERAL (Read)
   The Starlink help library from which help text is to be
   obtained.                              [IRAS90_DIR:IRAS90_HELP]
3 SUBSUBSUBTOPIC
SUBSUBSUBTOPIC = LITERAL (Read)
   Subsubsubtopic for which help is to be given.             [" "]
3 SUBSUBTOPIC
SUBSUBTOPIC = LITERAL (Read)
   Subsubtopic for which help is to be given.                [" "]
3 SUBTOPIC
SUBTOPIC = LITERAL (Read)
   Subtopic for which help is to be given.                   [" "]
3 TOPIC
TOPIC = LITERAL (Read)
   Topic for which help is to be given.                      [" "]
2 Authors
MJC: Malcolm J. Currie (STARLINK)

DSB: David S. Berry (STARLINK)
2 History
 14-SEP-1992 (DSB):
    Original version, modified from KAPPA equivalent written by
    MJC.

1 IFIELD
Gives all the ISSA plates that lie with a certain box

Description:

   This program allows the user to determine which ISSA plates are of
   interest, and on which CDs they may be found.

   The user should determine a square area of the sky which contains the
   area of interest. The co-ordinates of the centre of this box and
   the box size in arcminutes are input as parameters.
   From this, the program calculates
   which ISSA plates are contained within (part of) the box. It
   also tells the user what CDs the plate is on, whether it is a
   reject, and the plate centre.
   In addition, it displays which corners of the box lie on each plate.
   The corners are labelled thus:
   Centre: C, Top-left: C1, Bottom-left: C2, Top-right: C3,
   Bottom-Right: C4.

   The program uses the following algorithm.

   Firstly, a list of plates which contain the centre point is generated,
   such that the best plate is first. Since there is no duplication of
   plates in this list, the entire list is copied to the final output
   list. Each plate in the output list has a corner string which lists
   all the corners of the box found on the plate. This string is initialised
   to include the box centre for all plates in the list.

   Assuming the user wanted a box rather than a point, the
   co-ordinates of each corner of the box are calculated. Then the
   following process is repeated for each corner in turn.

   Just as with the centre point, a list of all plates containing the
   corner is generated. For each plate, if the plate is already known
   in the final output list, the current corner is appended to the corner
   string. Otherwise the plate is added to the output list and the corner
   string is initialised to the current corner.

   The final output list is displayed. The ordering of the original lists
   means that the better plates will be first.
2 Parameters
For information on individual parameters, select from the list below:
3 AGAIN
AGAIN = Logical (Read)
   Whether to re-run the program
3 CSYS
CSYS = LITERAL (Read)
   The sky co-ordinate system (and epoch) to use     [Equatorial (B1950)]
3 HCON
HCON = INTEGER (Read)
   The HCon of the ISSA plates. This is needed to determine which
   disks the plates may be found on.                                  [0]
3 LAT
LAT = LITERAL (Read)
   The latitude of the centre of the box, in the co-ordinate system
   defined by CSYS
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of the logfile - null if a logfile is not required
3 LON
LON = LITERAL (Read)
   The longitude of the centre of the box, in the co-ordinate system
   defined by CSYS
3 SIZE
SIZE = DOUBLE (Read)
   The size of the box in arcminutes in which the user is interested.
   A value of 0.0 indicates that the user is interested in only the
   central point.                                                    [0.0]
2 Authors
HM: Huw Morris (IPMAF)
2 History
 20-DEC-1994:
    Original version.

1 IRASTRACE
Display the attributes of a group of IRAS90 NDFs.

Usage:

   IRASTRACE IN [LOGFILE]

Description:

   This routine displays the information stored in the IRAS
   extensions of a group of NDFs. Either CRDD files or images may be
   specified.
2 Parameters
For information on individual parameters, select from the list below:
3 IN
IN = NDF (Read)
   The group of NDFs to process. This should be in the form of a
   group expression (see help on "Group_expressions").
3 LOGFILE
LOGFILE = LITERAL (Write)
   The name of a text file to receive a copy of the displayed
   information. The run time default is for no log file to be
   produced.                                                   [!]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen and
   logged to the log file. This should take one of the values
   QUIET, NORMAL or VERBOSE (see help on "Message_filtering").
                                  [current message filter setting]
2 Examples
IRASTRACE CENA* CENA.LIS
   This will display the contents of the IRAS extensions within
   all NDF beginning with the string "CENA". The information will
   also be written to the text file CENA.LIS
2 Authors
DSB: David Berry (STARLINK)
2 History
 17-JAN-1992 (DSB):
    Original version.
1 MAKEPROF
Create an NDF holding standard in-scan detector response profiles.

Usage:

   MAKEPROF OUT

Description:

   This routine creates an NDF holding typical in-scan detector
   point source profiles. The data is taken from the IRAS Catalogs
   and Atlases Explanatory Supplement (second edition), page V-14.

   The NDF contains four rows, each holding a typical point source
   profile for one of the four survey wavebands. The NDF contains
   AXIS structures which identify the wavebands and the in-scan
   offset from the source centre.
2 Parameters
For information on individual parameters, select from the list below:
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDF. See help on "History_in_IRAS90", for more
   information on history.               [current history setting]
3 OUT
OUT = NDF (Write)
   The name of the output NDF.
2 Examples
MAKEPROF PROFILES
   Create an NDF called PROFILES containing typical in-scan
   detector responses.
2 Allowed_Formats_for_Profile_NDFs
   If users wish to create their own in-scan detector profiles for
   use with TRACECRDD, etc, then they must ensure that the NDFs
   holding the profiles conform to the following requirements:

   - Each row of the NDF must contain a single in-scan profile.

   - Each profile should be normalised to a peak value of unity.

   - The NDF must contain either 1 or 4 rows of data; no other
   values are allowed. If the NDF holds 4 rows, then rows 1 to 4
   should contain the profiles for the 12, 25, 60 and 100 um bands
   respectively. If the NDF holds one row then the single profile
   will be used by TRACECRDD (etc) for all wave-bands.

   - If an NDF contains 4 profiles, each one must be sampled at
   the same in-scan positions. Any gaps left at the ends of shorter
   profiles should be filled with zeros.

   - The second dimension (i.e. the in-scan axis) should have an
   associated AXIS structure containing a CENTRE array and a UNITS
   component. The UNITS component must start with the string
   "ARC-MIN" (case is ignored), and the CENTRE array must contain the
   in-scan offset from the detector centre to each point in the
   profile, in arc-minutes. These values should be in the same sense
   as the focal plane Y axis.
2 Authors
DSB: David Berry (STARLINK)
2 History
 19-NOV-1992 (DSB):
    Original version.
1 MAKERESP
Create NDFs holding IRAS spectral response data.

Usage:

   MAKERESP OUT BAND

Description:

   This routine creates an NDF holding the spectral response curve
   for a specified IRAS survey band. The NDF is one dimensional, and
   gives the normalised system response against wavelength. The
   wavelength corresponding to each element is stored in the NDFs
   AXIS component, in microns. The values in the DATA component are
   normalised to that the peak response throughout all four bands is
   unity. The data is taken from the IRAS Catalogs and Atlasses
   Explanatory Supplement (second edition), table II.C.5.

   The NDF contains a VARIANCE component which holds values
   corresponding to a 1% error on the response values. The AXIS
   component also has a variance array, holding the uncertainties in
   the wavelength at each element, corresponding to an error of 0.3
   microns.  The size of these errors are not well known, but the
   Exp. Supp.  says these are the maximum expected values (paragraph
   C.3, page VI-28).
2 Parameters
For information on individual parameters, select from the list below:
3 BAND
BAND = _INTEGER (Read)
   The wavelength (in microns) of the IRAS survey band for which
   spectral response data is required.
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDF. See help on "History_in_IRAS90", for more
   information on history.               [current history setting]
3 OUT
OUT = NDF (Write)
   The name of the output NDF.
2 Examples
MAKERESP SPECRESP60 60
   Create an NDF called SPECRESP60 containing the spectral
   response for the 60 um band.
2 Authors
DSB: David Berry (STARLINK)
2 History
 9-OCT-1992 (DSB):
    Original version.
1 MAPCRDD
Maps a group of CRDD files into a two dimensional image.

Usage:

   MAPCRDD IN PIXSIZE CENTRE_LON CENTRE_LAT BOXSIZE OUT

Description:

   This routine maps a group of CRDD files into a two dimensional
   surface brightness image by coadding the data samples. The
   algorithm used is described below, together with the extensive
   facilities which exist for tailoring the behaviour of the
   application.
2 Parameters
For information on individual parameters, select from the list below:
3 BOXSIZE
BOXSIZE = _REAL (Read)
   A pair of numbers giving the dimensions of the output image in
   arc-minutes, along the two image axes. The default values for
   CENTRE_LON, CENTRE_LAT and BOXSIZE offered to the user are
   chosen so that all the input data (excluding the short
   sections at the ends of each scan which have coverage by only
   half of the detectors) just fits in the image.  If the image
   is large, the distance between the sides (in terms of arc
   minutes) will change due to projection effects.  The given
   values are the distances between the centre points of opposite
   sides of the image. If only one value is given, the created
   image is square with the size of each side equal to the
   supplied value.
3 CENTRE_LAT
CENTRE_LAT = LITERAL (Read)
   The sky latitude of the centre of the output image, in the
   coordinate system specified by the parameter COORDS (eg if
   COORDS is EQUATORIAL then CENTRE_LAT should be given the
   Declination of the image centre). See help on
   "Sky_coordinates" for the formats allowed for this value.
3 CENTRE_LON
CENTRE_LON = LITERAL (Read)
   The sky longitude of the centre of the output image, in the
   coordinate system specified by the parameter COORDS (eg if
   COORDS is EQUATORIAL then CENTRE_LON should be given the Right
   Ascension of the image centre).See help on "Sky_coordinates"
   for the formats allowed for this value.
3 COORDS
COORDS = LITERAL (Read)
   Specifies the coordinate system used for referring to sky
   positions. Valid values include ECLIPTIC, EQUATORIAL,
   GALACTIC. See help on "Sky_coordinates" for more information
   on available sky coordinate systems.
                                   [current sky coordinate system]
3 EXCLUDE
EXCLUDE = LITERAL (Read)
   A group of detector numbers, selected from those available in
   the IRAS waveband of the data contained in the input CRDD
   files. All data from the specified detectors are excluded from
   the final map (dead detectors are automatically excluded). See
   help on "Specifying_detectors" for more information on
   specifying groups of detector numbers. The parameter INCLUDE
   can alternatively be used to specify the detectors to use. The
   default value of SMALL causes all the small detectors to be
   excluded.                                               [SMALL]
3 FWHM
FWHM = _REAL (Read)
   Two values specifying the full widths at half maximum of the
   Gaussian weighting functions for a full-size detector (in
   arc-minutes) in the cross-scan and in-scan directions.  The
   values actually used for each detector are scaled in
   proportion to the size of the detector. The weighting function
   is truncated to zero at the edge of the detector mask. The
   default values are the maximum cross-scan and in-scan detector
   sizes for the relevant waveband, and result in the weighting
   function falling to 0.5 before it is truncated at the edge of
   the detector.  If a single value is given, the same value is
   used for both cross-scan and in-scan widths.                 []
3 GAUSSIAN
GAUSSIAN = _LOGICAL (Read)
   If GAUSSIAN is set to a true value, then a Gaussian weighting
   function is applied to all input CRDD samples (i.e. each CRDD
   sample has a greater influence on pixels near the detector
   centre than it does on the pixels near the edge). This can
   decrease the noise and improve the resolution in the output
   image, but at the cost of a slightly greater run-time.   [TRUE]
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDF. See help on "History_in_IRAS90" for more
   information on history. The history information will contain
   the names of the input CRDD files, MAPCRDD parameter values
   used to create the image, and the detector solid angles and
   effective bandwidth used.             [current history setting]
3 IN
IN = NDF (Read)
   Specifies a group of input CRDD files. This should be in the
   form of a group expression (see help on "Group_expressions").
   All CRDD files must contain data from the same IRAS waveband.
   There is no limit on the number of CRDD files which can be
   specified.
3 INCLUDE
INCLUDE = LITERAL (Read)
   A group of detector numbers, selected from those available in
   the IRAS waveband of the data contained in the input CRDD
   files. Only data from the specified detectors are included in
   the final map. The parameter EXCLUDE can alternatively be used
   to specify the detectors to be omitted. Values specified for
   the INCLUDE parameter take precidence over those specified for
   the EXCLUDE parameter.  See help on "Specifying_detectors"
   for more information on specifying groups of detector numbers.
   The default group contains all the available detectors,
   excluding those specified by the EXCLUDE parameter.          []
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 ORIENT
ORIENT = _REAL (Read)
   The position angle of the second image axis( or "Y" axis), in
   degrees.  That is, the angle from north (defined by the
   coordinate system specified by parameter COORDS) to the image
   "Y" axis ("upwards" if the image is displayed normally).
   Positive angles are measured in the same sense as rotation
   from north through east.  The default value of zero puts
   north "upwards".                                          [0.0]
3 OUT
OUT = NDF (Write)
   The name of the NDF to hold the output image. The output NDF
   may have defined VARIANCE or HISTORY components depending on
   the value of the VAROUT and HISTORY parameters, but never has
   defined QUALITY or AXIS components.
3 PIXSIZE
PIXSIZE = _REAL (Read)
   The dimensions of a pixel in the output image, in arc-minutes.
   If a single value is given for PIXSIZE, then the output pixels
   are square. If two values are given then the output pixels are
   rectangular, having the specified dimensions. It should be
   remembered that the actual pixel size may vary slightly across
   the image depending on the type of projection. The values
   specified by parameter PIXSIZE give the actual pixel
   dimensions at the image centre.
3 PROJTYPE
PROJTYPE = LITERAL (Read)
   Specifies the type of projection to use when creating the
   output image. Valid values include GNOMONIC (i.e. tangent
   plane), ORTHOGRAPHIC, LAMBERT and AITOFF.  See help on
   "Map_projections" for more information on available
   projections.                                         [GNOMONIC]
3 QEXP
QEXP = LITERAL (Read)
   A quality expression (see help on "Quality_in_IRAS90").  Only
   those samples from the input CRDD files which have a QUALITY
   satisfying the given quality expression will be included in
   the mapping process. The default value of "ANY" causes all
   data to be used regardless of QUALITY.  If any of the quality
   names referenced in the quality expression are not defined for
   an input CRDD file, then the entire CRDD file is included in
   the map, irrespective of QUALITY. The user is warned if this
   happens. Note, the output image has no QUALITY component.
                                                             [ANY]
3 SECSIZE
SECSIZE = _REAL (Read)
   The cross-scan and in-scan sizes of a full size detector
   "sector" in arc-minutes.  Smaller values will produce a more
   accurately Gaussian in-scan weighting function, but will
   increase the run-time in proportion. The default values are
   both equal to half of the minimum of the two pixel dimensions
   (given by parameter PIXSIZE). If a single value is given then
   the same value is used for both dimensions. The values used
   for SECSIZE are internally limited to be less than or equal to
   the pixel dimensions. Sector sizes for small detectors are
   reduced in proportion to the detector size (the sector weights
   are reduced by the same factor).                             []
3 TITLE
TITLE = LITERAL (Read)
   A title to be stored with the output image. The default is the
   value of the TITLE component from the first input CRDD file. []
3 UNITS
UNITS = LITERAL (Read)
   The units in which the output image values are required.  See
   help on "Data_units" for a list of the available units.  Note,
   when the selected units represent flux (or flux density) per
   pixel values, all pixels are considered to be the same size.
   This may not be the case if a large area is being mapped (more
   than a few degrees), resulting in erroneous output values. To
   avoid this, users are recommended to use an area preserving
   projection (such as AITOFF or LAMBERT, see parameter PROJTYPE)
   in these cases.                                        [MJy/sr]
3 VAROUT
VAROUT = LITERAL (Read)
   VAROUT specifies the type of output variances which are to be
   calculated. These variances represent the uncertainty in each
   pixel value in the output image, and are stored in the
   VARIANCE component of the output NDF. Legal values for VAROUT
   are INTERNAL, EXTERNAL or NONE. External is only allowed if
   all the input CRDD files have associated VARIANCE components.
   If EXTERNAL is specified, these externally calculated
   variances are used as the basis for the calculation of output
   variances.  If INTERNAL is specified, then the output
   variances are estimated internally from the spread of CRDD
   samples contributing to each output pixel. Users must be aware
   of the warnings about such variances contained in the "Notes"
   section below. A value of NONE for VAROUT causes no output
   variances to be calculated, with a corresponding reduction in
   run time.  If all input CRDD files have VARIANCES components,
   then the run-time default for VAROUT is EXTERNAL. Otherwise
   the run-time default is NONE.                                []
3 WEIGHT
WEIGHT = _LOGICAL (Read)
   If WEIGHT is set to a true value, then the total weight
   assigned to each input data sample will be proportional to the
   reciprocal of the sample variance value stored in the input
   CRDD file. If WEIGHT is false, each full size detector sample
   will have a total weight of unity (smaller detectors have
   lower weight because they influence fewer pixels). If any
   input CRDD files do not contain variance values then WEIGHT is
   always given a false value.  Care should be taken when using
   this option because bright samples usually have larger
   variances.  Selecting this option would therefore cause small,
   bright sources to be given lower weight than the surrounding
   background regions, resulting in sources being made
   systematically fainter.                                 [FALSE]
2 Examples
MAPCRDD ^M51_SCANS M51_B1 COORDS=ECL ORIENT=10 HISTORY
         QEXP=SOURCE.AND..NOT.SATURATED EXCLUDE=26-27

   This will take the CRDD files listed in text file
   M51_SCANS.DAT and produce an output map in M51_B1.SDF. The
   output map will be oriented 10 degrees east of ecliptic north.
   Only data from detector #47 with quality satisfying the
   expression SOURCE.AND..NOT. SATURATED will be included in the
   map. The quality names SOURCE and SATURATED must be set up by
   the user using the application SETQUAL). The output MAP
   includes a HISTORY component.
2 The_Mapping_Process
   A CRDD sample value represents the integrated flux over some
   small area of the sky (defined by the detector Point Spread
   Function).  When a sample value is divided by the detectors
   effective solid angle, it becomes a surface brightness estimate.
   Each pixel value in the output image is formed as the weighted
   mean of all the sample surface brightness values in the
   neighbourhood of the pixel. MAPCRDD provides two different
   weighting schemes:

   1) The sample has a constant weight at all pixels lying within
   the area covered by the relevant detector mask at the moment the
   sample was taken. The sample has zero weight at all other pixels.

   2) The sample has a weight which varies as a Gaussian with the
   distance between the detector centre and the pixel. The weights
   are truncated to zero at the edges of the detector mask. The
   Gaussian can have different widths in the in-scan and cross-scan
   directions (see parameter FWHM).

   The user can specify which scheme to use by means of the
   parameter GAUSSIAN. Scheme 1 is very slightly faster, but scheme
   2 results in less striping in the output image, and somewhat
   higher resolution.

   The algorithm proceeds for each data sample by first finding the
   centre of the detector within the output image. The area covered
   by the detector is then divided into rectangular "sectors" (see
   parameter SECSIZE).  The sample weight within each sector is
   found (it is considered to be constant across the sector), and
   multiplied by the sample value. The output pixel closest to the
   sector centre is found, and two images modified at that pixel.
   The first image holds the sum of the weighted data samples
   (expressed as surface brightness values), and the second hold the
   sum of the weights. After this has been done for all data
   samples, the first image is divided by the second.  Any pixels
   which have zero weight are set to the "bad" value.  Each output
   pixel value is thus the weighted mean of the neighbouring data
   samples.
2 Reducing_the_Impact_of_Poor_Data
   By default, each full size detector sample has a total weight of
   unity (smaller detectors have lower weight because they influence
   fewer pixels).  However, if all input data have associated
   variance estimates, there is an option (see parameter WEIGHT) for
   giving each sample a total weight proportional to the reciprocal
   of the sample's variance. It should be borne in mind that
   brighter samples usually have larger variances, so this option
   will give lower weight to brighter samples, thus (for instance)
   systematically lowering point source fluxes. Samples with zero
   variance are treated like bad pixels if this option is selected.
2 Estimating_the_Noise_in_the_Output_Image
   If the input sample values have associated variance values, then
   formal variance values can be defined for the output pixel values
   (albeit these variance values will be correlated because of the
   mapping algorithm). This is done by forming a third image holding
   the sum of the weighted input variance values. The weights used
   in this image are the square of the weights used in the first
   image. The final variances are formed by dividing this third
   image by the square of the second image. These variances represent
   the expected error between the "true" sky AFTER CONVOLUTION WITH
   THE DETECTOR PSFS, and the calculated surface brightness image.
   It should be remembered that Starlink software assumes that the
   NDF VARIANCE component holds variances related to independent,
   Gaussian errors. This is not the case with IRAS data, so the
   variance values should not be relied on too heavily.

   There is an option for creating output variance values based on
   the spread of input sample values at each pixel, rather than on
   the variance value stored for each input sample (see parameter
   VAROUT).  This facility allows output variances to be produced
   even when the input CRDD files do not have any associated
   variances. However, it must be emphasised that these variance
   estimates include a contribution caused by spatial structure in
   the image. For instance, the spread in input data values
   contributing to an output pixel which is close to a bright point
   source, will be completely dominated by the real variations
   caused by the point source. They will have only a relatively
   small contribution from the variations caused by noise. Caution
   should therefore be shown when using these "internally
   calculated" variance estimates.  Having said that, one benefit of
   using internal variance values, is that the resulting output
   variances will automatically include noise caused by residual
   striping in the input data. This will not usually be the case if
   input variance values are used. (This depends on how the input
   variances were calculated.)
2 Colour_Correction_and_Output_Units
   The output image pixel values are not colour corrected and can be
   in one of several different systems of units. The available units
   are described in the help on "Data_units". The detector effective
   solid angles and bandwidths used to produce the output values are
   listed in the help on "Detector_solid_angles" and
   "Detector_bandwidths". These values are also written to the
   HISTORY component of the output NDF (see parameter HISTORY).
2 Authors
DSB: David Berry (STARLINK)
2 History
 3-SEP-1990 (DSB):
    Original version of header.

 17-MAR-1992 (DSB):
    IMAGE_INFO structure added to the output NDF's IRAS extension.
1 NEWUNITS
Scale data into a new system of units.

Usage:

   NEWUNITS IN OUT UNITS

Description:

   The data and (if defined) variance values stored in the input
   NDFs are scaled into the units specified by parameter UNITS, and
   written to the output NDFs. The NDF component UNITS is modified to
   hold the name of the new units. NDFs holding either CRDD files or
   IRAS90 images (but not CPC images) may be given as input.
2 Parameters
For information on individual parameters, select from the list below:
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDF. See help on "History_in_IRAS90" for more
   information on history.               [current history setting]
3 IN
IN = NDF (Read)
   A group of input NDFs. This should be in the form of a group
   expression (see help on "Group_expressions").
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 OUT
OUT = NDF (Write)
   A group of output NDFs corresponding one-for-one with the list
   of input NDFs given for parameter IN.  This should be in the
   form of a group expression (see help on "Group_expressions").
   Expressions such as "*_NEW" are expanded by replacing the "*"
   character with each input NDF in turn.
3 UNITS
UNITS = LITERAL (Read)
   The units in which the output values are required.  See
   help on "Data_units" for a list of the available units.
2 Examples
NEWUNITS M51* *_SB MJy/sr
   This example copies all NDFs starting with the string "M51" to
   a set of corresponding output NDFs. The name of each output
   NDF is formed by extending the name of the input NDF with the
   string "_SB". The data values are converted into Mega-Janskys
   per steradian. If any of the inputs contain variance values,
   they are converted into units of (MJy/sr)**2.
2 Notes
-  If the conversion requires the solid angle of an image pixel
to be known (eg from Jy/sr to Jy/PIXEL) the same nominal size is
used for all pixels. If the image covers a large area of the sky
this will not be appropriate unless the image is in an equal area
projection.

-  If the conversion requires the solid angle of a CRDD sample
to be used (eg from Jy to MJy/sr), the effective detector solid
angles listed in the help topic "Detector_solid_angles" are used.

-  If the conversion requires the effective bandwidth of the
detectors to be used (eg from pW/(M**2) to Jy), the values listed
in help topic "Detector_bandwidths" are used. This includes no
colour correction.
2 Authors
DSB: David Berry (STARLINK)
2 History
 18-DEC-1991 (DSB):
    Original version.

1 POINTCRDD
Detects point sources along the detector trace(s) of CRDD NDF file.

Description:

   This application is designed to detect point sources along the
   data traces of CRDD or CRDD-like NDF's (e.g. the outputs of
   COADDCRDD, etc. ) files.

   The application will run in two modes, in non-automatic mode it will
   prompt the user for an expected source position, by default this will
   be the reference position of the scan. If the user accepts or enters
   a position the search for the point sources will be performed along a
   segment of the detector trace nearest to this expected source position.
   The two values SCAN_NORTH and SCAN_SOUTH are the lengths north and south
   of the source position to be used. If there is more than one detector
   the user is then also prompted for the detectors to use, which can
   be nearest, choose or all. If the user selects choose the detectors and
   their cross-scan distances will be presented and the user can accept or
   reject each. If the user enters null '!' to the source position the
   application will assume the full scan length should be searched for
   all detectors.

   If the application is run in automatic mode, the application assumes
   the reference position as the expected source position, the scan lengths
   as 40 arcminutes each, and the nearest detector.

   The source detection consists of the following steps
   For each detector trace
   i)   The overall noise is calculated for the scanlength specified
        or the whole scan. This includes an iterative proceedure
        which rejects samples more than THRESH_SD times the standard
        deviation from the average.
   ii)  A zero sum filter is applied sucessively around each sample
        point. The filter adds a few samples centered at this point, where
        the strongest signal would be found if one was there, and subtracts
        a compensating number of outlying samples, so that if there is
        no signal the value would be approximately zero.
   iii) The mean and standard deviation of the filter output is calculated,
        again rejecting values more than THRESH_SD times the standard
        deviation from average.
   iv)  The filter values are examined and any which are THRESH_FILTER
        times the standard deviation are selected as candidate point
        source positions.
   v)   For each candidate position the correlation coefficient between
        the samples surrounding the position and the point source profile
        for an average detector in that band is calculated. If the
        correlation coefficient is greater than THRESH_CORR, the candidate
        is accepted.
   vi)  The local noise around the candidate source is calculated. The
        range of samples used is two sections each of length NOISE_SMPL
        on either side of a point source profile centered at the
        candidate position. Again the samples are iteratively rejected if
        they lie outside THRESH_SD standard deviations. If more than 25%
        of the sample are bad or rejected the range is extended to provide
        the neccessary 75%.
   vii) A final test of the candidate position is applied. The signal at
        the position is compared with the local noise and it accepted as
        a point source if it exceeds THRESH_S2N times the local noise.
        If THRESH_S2N is given the null value '!' this test will not be
        applied and all candidates will be reported.

   The output results consist of three sections, the detection parameter
   values used, details of the scan, and details of each source.
   For each scan the details include the scan name, details of the expected
   source position, scan length and detectors used, and the mean sample
   value and noise value calculated together with the number of samples
   used in this calcuation.
   The information given for each point source includes its position,
   in-scan and cross-scan position relative to the expected point source
   position if given, average background, slope and local noise (including
   the number of samples used in calculating the noise), and the
   signal to noise ratio and correlation coefficient.
2 Parameters
For information on individual parameters, select from the list below:
3 AUTOMATIC
AUTOMATIC = LOGICAL (Read)
   If AUTOMATIC is true the application assumes the expected source
   position is the reference position, the scan to be searched is 40
   arcmin on either side of this position, and the nearest detector
   is to be used.
   if AUTO is false the user is prompted for these values.
3 COORDS
COORDS = LITERAL (Read)
   Sky coordinate system used to specify the expected point source
   position and to decribe the sky positions of the found point sources
   when reporting the detection results.
   Valid values include ECLIPTIC, EQUATORIAL and GALACTIC.
   See help on "Sky_coordinates" for more information on on available
   sky coordinate systems.
   [current sky coordinate system]
3 DET_CHOICE
DET_CHOICE = LITERAL (Read)
   Allows the user to select how detectors are to be chosen, and
   can take the values all(A), nearest(N), or choose(C). If all is
   entered all detectors are used, if nearest only the detector with
   the minimum crossscan distance from the expected source position
   is used. If choice is entered then detectors are chosen as described
   under DET_REQ below. [nearest]
3 DET_REQ
DET_REQ = LOGICAL (Read)
   Allows the user to specify whether the detector whose details have
   just been presented to him should be included for examination or not.
   [TRUE]
3 IN
IN = NDF (Read)
   The name of the input CRDD or CRDD-like NDF file to be
   searched for the point source. The specified file can hold any
   of the supported forms of CRDD (eg. Survey, AO, etc).
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of the text file to which the detection result will
   be written. No file will be created if a null value is supplied.
   [pointcrdd.log]
3 MSG_FILTER
MSG_FILTER = LITERAL (Given)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").  [current message filter setting]
3 NOISE_SMPL
NOISE_SMPL = REAL (Read)
   The number of samples required in calculating local noise.
   Two segments each of half this length on either side of a point
   source profile surrounding a candidate source position are used
   to calculate local noise.
3 PROFILES
PROFILES = NDF (Read)
   An NDF holding in-scan point source profiles used as that
   expected from an ideal point source when comparing the data of
   the slected candidate sources with the ideal point source.
   The default value is the files "profiles.sdf" contained in
   the main IRAS90 directory, which contains profiles taken from
   the IRAS Catalogs and Atlases Explanatory Supplement, page
   V-14. [ ]
3 SCAN_NORTH
SCAN_NORTH = REAL (Read)
   The length of scan segment in arcmin north of the expected point
   source position to be searched for point sources and used in the
   whole scan noise estimate. If a null, '!' response is given,
   the trace(s) will be searched from the beginning of that end.
   [40.0]
3 SCAN_SOUTH
SCAN_SOUTH = REAL (Read)
   The length of scan segment in arcmin south of the expected point
   source position to be searched for point sources and used in the
   whole scan noise estimate. If a null, '!' response is given,
   the trace(s) will be searched from the beginning of that end.
   [40.0]
3 SOURCE_LAT
SOURCE_LAT = LITERAL (Read)
   The sky latitude of the expected source position, in the coordinate
   system specified by the parameter COORDS (eg if COORDS is EQUATORIAL
   then SOURCE_LAT should be given the Declination of the position).
   See help on "Sky_coordinates" for the formats allowed for this value.
   If a null, '!', response is given, the search for the point source
   will be performed from the start to the end of all traces for all
   detectors in the CRDD file.
3 SOURCE_LON
SOURCE_LON = LITERAL (Read)
   The sky longitude of the expected source position, in the coordinate
   system specified by the parameter COORDS (eg if COORDS is EQUATORIAL
   then SOURCE_LON should be given the Right Ascension of the position).
   See help on "Sky_coordinates" for the formats allowed for this value.
   If a null, '!', response is given, the search for the point source
   will be performed from the start to the end of all traces for all
   detectors in the CRDD file.
3 THRESH_CORR
THRESH_CORR = REAL (Read)
   The threshold of the correlation coeficient of the detected candidate
   with the point source profile for this band. Above this threshold
   a detected candidate would be accepted as a point source. See
   IRAS Explanatory Supplement C. 4. for details about the selection
   of the correlation coeficient threshold. [0.87]
3 THRESH_FILTER
THRESH_FILTER = REAL (Read)
   The threshold of the signal to noise ratio above which a peak in the
   square-wave filter output will be taken as a candidate for a point
   source. See above for details of the square-wave filtering, and
   thresholding. [2.0]
3 THRESH_SD
THRESH_SD = REAL (Read)
   The threshold used in rejcting samples in the iterative calculation
   of various noise values, samples which fall above this threshold times
   the standard deviation will be rejected in the next iteration. See
   details of the processing above for its use. [2.5]
3 THRESH_S2N
THRESH_S2N = REAL (Read)
   The threshold of the signal to local noise ration at which a candidate
   should be accepted as a point source. If this is entered as null this
   test is not performed and all candidates are reported. [2.5]
3 UNITS
UNITS = LITERAL (Read)
   The units in which the data values are to be displayed. See
   help on "Data_units" for a list of the available units.  [Jy]
2 Authors
WG: Wei Gong (IPMAF)

DCP: Diana Parsons (FIIS/RAL)
2 History
 6-JAN-1993 (WG):
    Original version.

 29-SEP-1994 (DCP):
    Rewrite of main routine and much of subsequent processing

1 POSCRDD
Find CRDD samples which lie close to a given sky position.

Usage:

   POSCRDD IN LON LAT

Description:

   This routine identifies CRDD files containing scans which pass
   close to a given sky position. The user supplies a group of CRDD
   files and the sky coordinates of the required position. A line of
   text is then displayed (and optionally logged to a text file) for
   each CRDD file containing the following items of information:

   1) The name of the CRDD file (minus directory specification).

   2) The Satellite Observation Plan (SOP) number.

   3) The observation number.

   4) The minimum cross scan distance (in arc-minutes) from the
   required position to the boresight track. Positive if the required
   position is on the sun-ward side of the boresight track.

   5) The in-scan distance between the required position and the
   reference position stored in the CRDD file, in arc-minutes. This
   is positive if the closest approach to the required position is
   reached later than the closest approach to the CRDD file
   reference position.

   6) The sample number at which the detector specified by item 7
   reaches its closest approach to the required position. This item
   is left blank if item 7 is blank.

   7) The number of the detector which is closest to the required
   position at its point of closest approach. If the position is
   beyond the edges of the focal plane (i.e. is seen by none of the
   detectors) then this item (together with item 6) is left blank.

   8) The position angle of the scan at the point of closest
   approach to the required position, in degrees. This is the angle
   from north to the focal plane Y axis, going positive through
   east.
2 Parameters
For information on individual parameters, select from the list below:
3 COORDS
COORDS = LITERAL (Read)
   Specifies the coordinate system used for referring to sky
   positions. Valid values include ECLIPTIC, EQUATORIAL,
   GALACTIC. See help on "Sky_coordinates" for more information
   on available sky coordinate systems.
                                   [current sky coordinate system]
3 IN
IN = NDF (Read)
   Specifies a group of input CRDD files. This should be in the
   form of a group expression (see help on "Group_expressions").
3 LAT
LAT = LITERAL (Read)
   The sky latitude of the required position, in the coordinate
   system specified by the parameter COORDS (eg if COORDS is
   EQUATORIAL then LAT should be given the Declination of the
   required position). See help on "Sky_coordinates" for the
   formats allowed for this value. The suggested default is the
   reference position of the first CRDD file.
3 LOGFILE
LOGFILE = LITERAL (Write)
   The name of a text file to receive a copy of the displayed
   information. The run time default is for no log file to be
   produced.                                                   [!]
3 LON
LON = LITERAL (Read)
   The sky longitude of the required position, in the coordinate
   system specified by the parameter COORDS (eg if COORDS is
   EQUATORIAL then LON should be given the Right Ascension of the
   required position).See help on "Sky_coordinates" for the
   formats allowed for this value. The suggested default is the
   reference position of the first CRDD file.
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering"). Output to the log file is not
   effected by the setting of this parameter.
                                  [current message filter setting]
2 Examples
POSCRDD ZCMA* "7 2 10" -12 LOGFILE=POS.LOG COORDS=EQ
   This example displays the distance of all CRDD files which
   start with the string "ZCMA" from the position RA=7h 2m 10s
   DEC=-12d 0m 0s. Any scans which actually pass through the
   position are indicated by the columns with titles "Sample" and
   "Det." being non-blank. The output information is displayed on
   the screen and logged to the text file POS.LOG.
2 Authors
DSB: David Berry (STARLINK)
2 History
 17-DEC-1992 (DSB):
    Original version.
1 PREPARE
Prepare a group of imported FITS images for use by IRAS90.

Usage:

   PREPARE IN OUT

Description:

   This routine prepares a group of FITS images previously converted
   to NDF format using KAPPA:FITSIN or KAPPA:FITSDIN (for instance)
   for use by IRAS90 and KAPPA. Each input NDF should contain a FITS
   extension containing the FITS header cards read from tape. These
   header cards are assumed to accurately represent the data. For
   this reason care should be exercised if any processing is
   performed on the images prior to using this application.

   The operations performed on the input NDFs depend on the type of
   image stored in the NDF and are described in detail below, but
   will always include the creation of an IRAS extension. The
   created IRAS extensions may be examined using IRAS90 application
   IRASTRACE. The FITS extension is retained without change in the
   output NDFs, even though some of the keywords may no longer
   accurately represent the data. For instance, BUNIT may no longer
   reflect the units in which the data is stored if a value is given
   for parameter UNITS.

   A facility exists for automatically identifying pairs of
   corresponding data and noise images which can be stored in the
   DATA and VARIANCE components of the same output NDF.
2 Parameters
For information on individual parameters, select from the list below:
3 COORDS
COORDS = LITERAL (Read)
   Specifies the sky coordinate system in which the field
   positions are to be stored in the output NDFs. See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.
                                   [current sky coordinate system]
3 FACTOR
FACTOR = REAL (Read)
   If the units of the input NDF are not one of the standard
   system of units recognised by IRAS90, then the user must use
   parameter FACTOR to supply the factor for converting input
   data values to the required output units (see also parameter
   UNITS).
3 FIELDLAT
FIELDLAT = LITERAL (Read)
   FIELDLAT may be used to specify the latitude (eg DEC, galactic
   latitude, etc, depending on the value of the parameter COORDS) of
   a field reference position for each output NDF. This should be
   in the form of a group expression (see Help on "Group
   Expressions") containing an entry for each of the input NDFs
   specified by parameter IN.  If a null value is supplied for
   FIELDLAT (or for parameter FIELDLON), then the used values are
   derived from the FITS keyword CRVAL2.  See help on
   "Sky_coordinates" for the formats allowed for these strings.
                                                               [!]
3 FIELDLON
FIELDLON = LITERAL (Read)
   FIELDLON may be used to specify the longitude (eg RA, galactic
   longitude, etc, depending on the value of the parameter COORDS)
   of a field reference position for each output NDF. This should
   be in the form of a group expression (see Help on "Group
   Expressions") containing an entry for each of the input NDFs
   specified by parameter IN. If a null value is supplied for
   FIELDLON (or for parameter FIELDLAT), then the used values are
   derived from the FITS keyword CRVAL1.  See help on
   "Sky_coordinates" for the formats allowed for these strings.
                                                               [!]
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDFs. See help on "History_in_IRAS90" for more
   information on history. The history information will contain
   the names of the input and output NDFs.
                                         [current history setting]
3 IN
IN = NDF (Read)
   Specifies a group of input NDFs. This should be in the
   form of a group expression (see help on "Group_expressions").
   The group may contain images of any type (including noise
   images), but every NDF should contain a FITS extension.
3 LABEL
LABEL = LITERAL (Read)
   A group of strings to be used as the labels for the
   corresponding output NDFs. This should be in the form of a
   group expression (see Help on "Group Expressions") containing
   an entry for each of the input NDFs specified by parameter IN.
   If a null value is supplied for this parameter then labels are
   generated automatically for each output NDF.                [!]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 OUT
OUT = NDF (Write)
   A group of output NDFs corresponding one-for-one with the list
   of input NDFs given for parameter IN.  This should be in the
   form of a group expression (see help on "Group_expressions").
   Expressions such as "*_NEW" are expanded by replacing the "*"
   character with each input NDF in turn. HISTORY and all
   extensions are propagated from the input to the output NDFs.
3 PROJTYPE
PROJTYPE = LITERAL (Read)
   If the input image is not of one of the types known to
   PREPARE, then the type of map projection used when the image
   was created should be given to parameter PROJTYPE, and will be
   stored as part of the astrometry information in the output
   NDF. The same projection type is assumed to apply for all
   input images of unknown type specified by parameter IN.  Valid
   projection types include GNOMONIC (i.e. tangent plane),
   ORTHOGRAPHIC, LAMBERT and AITOFF.  See help on
   "Map_projections" for more information on available
   projections.                                         [GNOMONIC]
3 TITLE
TITLE = LITERAL (Read)
   A group of strings to be used as the titles for the
   corresponding output NDFs. This should be in the form of a
   group expression (see Help on "Group Expressions") containing
   an entry for each of the input NDFs specified by parameter IN.
   If a null value is supplied for this parameter then titles are
   generated automatically for each output NDF.                [!]
3 UNITS
UNITS = LITERAL (Read)
   The units in which the data values in the output NDFs should
   be stored.  See help on "Data_units" for a list of the
   available units. If a null value is supplied then the output
   NDFs are produced with the same units as the input NDFs.
   Otherwise, the input data values are converted to the required
   system of units before being written to the output NDF.     [!]
3 VAROUT
VAROUT = LOGICAL (Read)
   If a true value is supplied for VAROUT, then any pairs of
   corresponding data and noise images supplied by parameter IN
   are combined into a single output NDF; the data image being
   stored in the DATA component and the square of the noise image
   being stored in the VARIANCE component.  Otherwise, input
   noise images are stored in the DATA component of an output
   NDF.                                                    [FALSE]
2 Examples
PREPARE M51 *_PRE
   This example prepare the image contained in the NDF M51, and
   puts the result in the NDF M51_PRE.

PREPARE * *_PRE VAROUT
   This example prepare all NDFs in the current directory,
   putting the results in NDFs with same names but extended with
   the string "_PRE". If possible, any noise image found in the
   current directory are stored in the VARIANCE component of the
   associated data image.

PREPARE ^OLD_NAMES.LIS *_PRE TITLE=^TITLES.LIS LABEL=^LABELS.LIS
   The NDFs listed in the file OLD_NAMES.LIS are prepared and put
   into NDFs with the same names extended with the string "_PRE".
   The title and label to use for each NDF are read from the files
   TITLES.LIS and LABELS.LIS.
2 IRAS_Sky_Survey_Atlas_Images
   NDFs should be created from ISSA FITS files using one of the
   KAPPA applications FITSIN or FITSDIN, and PREPARE should then be
   run specifying these NDFs for parameter IN. ISSA images are
   identified automatically by looking at the value of the FITS
   keyword INSTRUME. If the input NDFs contain floating point values
   (either _REAL or _DOUBLE) then it is assumed that the data
   numbers stored in the FITS file have been converted into data
   values in the units specified by FITS keyword BUNIT. If the input
   NDFs have any other data type, then the conversion to data values
   is performed within PREPARE using the values of the FITS keywords
   BSCALE and BZERO.  In addition, an extra scaling is applied in
   order to produce values in the units specified by parameter UNITS
   (if these are different to the units specified by FITS keyword
   BUNIT).

   It is assumed that the input data array is a Gnomonic projection,
   and that the first axis is in the direction of decreasing RA and
   that the second axis is in the direction of increasing DEC. An
   IRAS extension is created in the output NDF holding astrometry
   information taken from the FITS keywords CRVAL1, CRVAL2, CRPIX1,
   CRPIX2, CDELT1 and CDELT2. The keywords CRVAL1 and CRVAL2 are
   assumed to be RA and DEC values (referred to the equinox at an
   epoch given by FITS keyword EPOCH).

   In addition, the waveband, ISSA field number and HCON number are
   stored in the IRAS extension, together with a string identifying
   the image as an ISSA image.
2 Pointed_Observation_Images
   Pointed Observation images are processed in the same way as ISSA
   images, with the following exceptions:

   1) If the image is an INTENSITY data map, the background offset
   specified by the FITS keyword BIAS is added on to the output data
   values. No bias is added onto INTENSITY noise maps or FLUX grids.

   2) The images are assumed to be orthographic projections of the
   sky. The value of the keyword CROTA2 is assumed to be 360 degrees
   minus the position angle of the second image axis.

   3) The following information is stored in the IRAS extension;
   waveband, grid type (whether FLUX or INTENSITY), image type
   (whether noise or data), the SOP and observation numbers, the
   median noise (taken from the comments at the end of the FITS
   header).

   By default, any noise maps supplied by parameter IN are stored in
   separate output NDFs, independently of the associated data maps.
   However, if parameter VAROUT is given a true value, then an
   attempt is made to find any pairs of associated data and noise
   maps specified by parameter IN. If any such pairs are found then
   they are stored together in the same output NDF (the data map is
   stored in the DATA component and the square of the noise map is
   stored in the VARIANCE component). The user is told which input
   NDFs are being stored together if this happens. The values
   supplied for the noise map using parameters OUT, TITLE, LABEL,
   FIELDLON or FIELDLAT are discarded in this case (the values given
   for the data map are used in the output). In particular, note that
   the name of the output NDF is that associated with the input NDF
   holding the data map.
2 SKYFLUX_Images
   SKYFLUX images are processed in the same way as ISSA images,
   with the following exceptions:

   1) It is assumed that the second axis of the input data array is
   in the direction of decreasing DEC. The output data array is
   flipped in the second dimension to make the second axis increase
   in the direction of increasing DEC (i.e. so that north is upwards
   when the image is displayed normally).

   2) The following information is stored in the IRAS extension;
   waveband, HCON, plate number, maximum and minimum SOP numbers, and
   a flag indicating if this is an intensity or weight image.
2 Galactic_Plane_Images
   Galactic plane images are processed in the same way as ISSA
   images, with the following exceptions:

   1) The images are assumed to be Lambert equivalent cylindrical
   projections of the sky, the first axis is assumed to be in the
   direction of decreasing galactic longitude and the the second
   axis in the direction of increasing galactic latitude. The image
   is not flipped along either axis. The FITS keywords CRVAL1 and
   CRVAL2 are assumed to give galactic longitude and latitude
   values.

   2) The following information is stored in the IRAS extension;
   waveband, HCON and Galactic plane map number.
2 All_Sky_Images
   All sky images are processed in the same way as ISSA images, with
   the following exceptions:

   1) The images are assumed to be Aitoff projections of the sky,
   the first axis is assumed to be in the direction of decreasing
   galactic longitude and the the second axis in the direction of
   increasing galactic latitude. The image is not flipped along
   either axis. The FITS keywords CRVAL1 and CRVAL2 are assumed to
   give galactic longitude and latitude values.

   2) The following information is stored in the IRAS extension;
   waveband, HCON, maximum and minimum SOP numbers, and a flag
   indicating if this image is centred on the galactic centre or
   anti-centre.
2 YORIC/HIRES_Images
   Images produced by the YORIC processor at IPAC (also known as
   HIRES images), are identified automatically by looking at the
   value of the FITS keyword VERSION, which gives the version number
   of the YORIC processor which created the image. Different types
   of YORIC images are produced at IPAC. Some hold the surface
   brightness of a region of the sky, others hold resolution
   estimates, photometric noise estimates, correction factor
   variances, and the data coverage at each pixel. These types are
   identified automatically by looking at the comments at the end of
   the FITS header. The processing of these images is the same as for
   ISSA images, with the following exceptions:

   1) The images are assumed to be orthographic projections of the
   sky. The value of the keyword CROTA2 is assumed to be 360 degrees
   minus the position angle of the second image axis.

   2) The following information is stored in the IRAS extension;
   waveband, and a string identifying the type of YORIC image.

   YORIC surface brightness maps and associated photometric noise
   maps can be stored together in the same output NDF in the same
   way as for PO images (see "Preparing Pointed Observation
   Images").
2 CPC_Images
   A CPC FITS file consists of two images (the 50 and 100 um images)
   stacked together to form a three dimensional array. PREPARE
   splits this stack into two separate images, thus creating two
   output NDFs from one input NDF. It is important to note that only
   one output NDF name should be supplied for each input CPC file by
   the user (using parameter OUT). The names of the two output NDFs
   are derived automatically from the single supplied name by
   appending the strings _50 (for the 50 um image) and _100 (for the
   100 um image) to the end of the NDF name.  Likewise, any values
   given for parameters TITLE or LABEL are extended by appending one
   of the strings "(50 um)" or "(100 um)" to the end of the supplied
   value. Each individual CPC image is processed like an ISSA image
   with the following exceptions:

   1) The images are assumed to be orthographic projections of the
   sky. The value of the keyword CROTA2 is assumed to be 360 degrees
   minus the position angle of the second image axis.

   2) The following information is stored in the IRAS extension;
   waveband, and a flag indicating if it is a raw or cleaned CPC
   image.
2 Other_Images
   If any input images are supplied which cannot be identified as one
   of the types listed above, then certain assumptions need to be
   made about the interpretation of the image and the FITS keyword
   values. These assumptions may not be appropriate, so users should
   be aware of them and take corrective measures if possible (for
   instance by suitable modifying the FITS image to make it conform
   to the assumptions before running PREPARE). The assumptions made
   are:

   1) If the image is displayed normally, then rotation from north to
   east is anti-clockwise.

   2) The projection used to create the image is that given by
   parameter PROJTYPE.

   3) The data comes from the survey array of detectors.

   4) If non-zero, FITS keyword CROTA1 gives the position angle of
   the second image axis (i.e the angle from north, through east, to
   the second image axis). If CROTA1 is zero, then CROTA2 is used
   instead.

   5) The FITS keywords CRVAL1 and CRVAL2 give the coordinates of a
   reference point, in the sky coordinate system given by parameter
   COORDS.

   The only extra information stored in the IRAS extension is the
   waveband, and a flag that the image is from an unknown source.

   If the units of the input image are unusual then the user will be
   asked for the factor for converting input data values into the
   units specified by parameter UNITS. The parameter FACTOR is used
   for this purpose.
2 Authors
WG: Wei Gong (IPMAF)

DSB: David Berry (STARLINK)
2 History
 15-DEC-1992 (DSB):
    Original version, based on the version by WG.
1 QUALTOBAD
Set selected NDF pixels bad on the basis of quality.

Usage:

   QUALTOBAD IN OUT QEXP

Description:

   This routine copies a group of input NDFs to a group of
   corresponding output NDFs, setting selected pixels bad in the
   process. Such pixels are selected on the basis of quality; any
   pixel which holds a set of qualities which satisfies the quality
   expression given for parameter QEXP is set bad in the DATA and
   (if it is defined) VARIANCE components of the output NDF.  See
   help on "Quality_in_IRAS90" for further information about the use
   of quality within IRAS90.
2 Parameters
For information on individual parameters, select from the list below:
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDF. See help on "History_in_IRAS90" for more
   information on history.               [current history setting]
3 IN
IN = NDF (Read)
   A group of input NDFs. This should be in the form of a group
   expression (see help on "Group_expressions"). If an input NDF
   does not contain definitions of all the quality names
   referenced within the quality expression given for parameter
   QEXP, then no corresponding output NDF is created, but
   processing continues with the other input NDFs.
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 OUT
OUT = NDF (Write)
   A group of output NDFs corresponding one-for-one with the list
   of input NDFs given for parameter IN.  This should be in the
   form of a group expression (see help on "Group_expressions").
   Expressions such as "*_NEW" are expanded by replacing the "*"
   character with each input NDF in turn.
3 QEXP
QEXP = LITERAL (Read)
   The quality expression.
2 Examples
QUALTOBAD M51* *_CLEAN SATURATED.OR.GLITCH
   This example copies all NDFs starting with the string "M51" to
   a set of corresponding output NDFs. The name of each output
   NDF is formed by extending the name of the input NDF with the
   string "_CLEAN". Any pixels which hold either of the qualities
   "SATURATED" or "GLITCH" are set to the bad value in the output
   NDFs.
2 Authors
DSB: David Berry (STARLINK)
2 History
 28-OCT-1991 (DSB):
    Original version.
1 REMQUAL
Remove specified quality definitions from a group of NDFs.

Usage:

   REMQUAL NDF QNAMES

Description:

   This routine removes selected quality name definitions from each
   NDF specified by parameter NDF.  All quality names information may
   be removed by specifying a quality name of "ANY".  For more
   information about using quality within the IRAS90 package see
   the help on "Quality_in_IRAS90".
2 Parameters
For information on individual parameters, select from the list below:
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be added to the NDFs.
   See help on "History_in_IRAS90" for more information on
   history.                              [current history setting]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering".
                                  [current message filter setting]
3 NDF
NDF = NDF (Update)
   A group of NDFs from which quality information is to be
   removed. This should be in the form of a group expression (see
   help on "Group_expressions").
3 QNAMES
QNAMES = LITERAL (Read)
   A list of up to 10 quality names to be removed from the input
   NDFs. This should be in the form of a group expression (see
   help on "Group_expressions"). If more than 10 names are
   supplied, only the first 10 are used. If any of the supplied
   quality names are not defined in the NDF, then warning
   messages are given but the application continues to remove any
   other specified quality names. If the string ANY is specified,
   then all defined quality names are removed. If no defined
   quality names remain, the structure used to store quality name
   information is deleted. This feature can be used to get rid of
   corrupted quality name information.
2 Examples
REMQUAL M51* ANY
   This example will remove all defined quality names from all
   NDFs with names starting with the string "M51".
2 Authors
DSB: David Berry (STARLINK)
2 History
 28-OCT-1991 (DSB):
    Original version.
1 SETIMAGE
Set selected global properties for an IRAS90 image.

Usage:

   SETIMAGE NDF LIKE LIST

Description:

   This routine can be used to change the waveband, units and/or
   image type of a group of existing IRAS90 images. The new values
   are copied from other specified IRAS90 images.
2 Parameters
For information on individual parameters, select from the list below:
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   modified NDFs. See help on "History_in_IRAS90" for more
   information on history.
                                         [current history setting]
3 LIKE
LIKE = NDF (Read)
   A group of IRAS90 images from which the new values are to be
   read. The values from these NDFs are stored in the
   corresponding NDF specified by parameter NDF.
3 LIST
LIST = LITERAL (Read)
   A group expression giving a list of the items of information
   which are to be modified in the image specified by parameter
   NDF. The following items can be specified; UNITS, BAND, TYPE.
                                              [UNITS,BAND,TYPE]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 NDF
NDF = NDF (Read and Write)
   A group of IRAS90 image in which new values are to be stored.
2 Examples
SETIMAGE M51_B3 M51_B4_SIM UNITS,BAND
   This example causes the waveband and units of image M51_B3 to
   be set equal to those of image M51_B4_SIM.
2 Authors
DSB: David Berry (STARLINK)
2 History
 16-JUN-1993 (DSB):
    Original version.

1 SETQUAL
Assign a specified quality to selected pixels within a group of
NDFs.

Usage:

   SETQUAL NDF QNAME COMMENT MASK

Description:

   This routine assigns (or optionally removes) the quality
   specified by parameter QNAME to (or from) selected pixels in each
   NDF specified by parameter NDF. For more information about using
   quality within the IRAS90 package see the help on
   "Quality_in_IRAS90".

   The user can select the pixels to be operated on in one of three
   ways (see parameter SELECT):

   1) By giving a group of `mask' NDFs (one for each input NDF).
   Pixels with bad values in the mask NDFs will be selected from the
   corresponding input NDFs.

   2) By giving a list of pixel indices for the pixels which are to
   be selected (a single list is provided which is used for all input
   NDFs).

   3) By giving an ``ARD description'' for the regions of the NDFs
   which are to be selected. The ARD system (see SUN/183) uses a
   textual language to describe geometric regions of an array. Text
   files containing ARD description suitable for use with this
   routine can be created interactively using the KAPPA routine
   ARDGEN.

   The operation to be performed on the pixels is specified by
   parameter FUNCTION. The given quality may be assigned to or
   removed from pixels within the NDFs. The pixels operated on
   can either be those selected by the user (as described above),
   or those not selected.  The quality of all other pixels is left
   unchanged (unless the parameter FUNCTION is given the value NS+HU
   or NU+HS). Thus for instance if pixel (1,1) already held the
   quality specified by QNAME, and the quality was then assigned to
   pixel (2,2) this would not cause the quality to be removed from
   pixel (1,1).

   All the input NDFs are presumed to be aligned with each other, but
   can be of different extent (but they must all have the same number
   of dimensions).
2 Parameters
For information on individual parameters, select from the list below:
3 ARD
ARD = LITERAL (Read)
   An ARD description for the `selected' regions of the input
   NDFs.  This should be supplied in the form of a group
   expression (see help on "Group Expressions"). See SUN/183 or
   KAPPA:ARDGEN for further details of the syntax of an ARD
   description.  This routine expects positions within the ARD
   description to be given in terms of pixel co-ordinates. The
   same ARD description is used for all input NDFs.  The ARD
   parameter is only prompted for if the SELECT parameter is
   given the value "ARD".
3 COMMENT
COMMENT = LITERAL (Read)
   A comment to store with the quality name.  This parameter is
   only prompted for if an NDF does not already contain a
   definition of the quality name.  The same comment is used for
   any other subsequent NDFs which do not contain a definition of
   the quality name.
3 FUNCTION
FUNCTION = LITERAL (Read)
   This parameter specifies what function is to be performed on
   the "selected" pixels specified using parameters MASK, LIST or
   ARD. It can take any of the values "HS", "HU", "NS", "NU",
   "HS+NU" or "HU+NS"

   HS - Ensure that the quality specified by QNAME is held by
        all the selected pixels. The quality of all other
        pixels is left un-changed.

   HU - Ensure that the quality specified by QNAME is held by all
        the pixels which have not been selected. The quality of
        the selected pixels is left un-changed.

   NS - Ensure that the quality specified by QNAME is not held by
        any of the selected pixels. The quality of all other
        pixels is left un-changed.

   NU - Ensure that the quality specified by QNAME is not held by
        any of the pixels which have not been selected. The
        quality of the selected pixels is left un-changed.

   HS+NU - Ensure that the quality specified by QNAME is held by
        all the selected pixels and not held by any of the other
        pixels.

   HU+NS - Ensure that the quality specified by QNAME is held by
        all the pixels which have not been selected and not held
        by any of the selected pixels.
                                                              [HS]
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be added to the NDFs.
   See help on "History_in_IRAS90" for more information on
   history.                              [current history setting]
3 LIST
LIST = LITERAL (Read)
   A list of the pixels within the input NDFs which are to be
   `selected' (see parameter FUNCTION). This should be in the
   form of a group expression (see help on "Group_expressions")
   giving a list of pixel indices (eg X1, Y1, X2, Y2,...  for a
   two dimensional NDF). The same list is used for all input
   NDFs.  LIST is only prompted for if parameter SELECT is given
   the value LIST.
3 MASK
MASK = NDF (Read)
   A group of mask NDFs. Each mask is used to define the
   `selected' pixels within the corresponding input NDF (see
   parameter FUNCTION). The masks should be aligned
   pixel-for-pixel with the input NDFs.  Pixels which are bad in
   the mask NDFs are `selected'. The quality of any pixels which
   lie outside the bounds of the corresponding mask NDF is left
   unaltered.  This parameter is only prompted for if the
   parameter SELECT is given the value MASK.
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 NDF
NDF = NDF (Update)
   A group of NDFs in which the quality information is to be
   stored. This should be in the form of a group expression (see
   help on "Group_expresssions").
3 QNAME
QNAME = LITERAL (Read)
   The quality name. If the supplied name is not already defined
   within any of the input NDFs, then a definition of the name is
   added to the NDF. The user is warned if the quality name is
   already defined within any of the NDFs.
3 SELECT
SELECT = LITERAL (Read)
   This parameter determines how the pixels are selected, and can
   take the values MASK, LIST or ARD (see parameters MASK, LIST
   and ARD).
                                                            [MASK]
3 XNAME
XNAME = LITERAL (Read)
   If an NDF already contains any quality name definitions then
   new quality names are put in the same extension as the old
   names.  If no previous quality names have been stored in the
   NDF then parameter XNAME will be used to obtain the name of an
   NDF extension in which to store the new quality name.  The
   extension will be created if it does not already exist (see
   parameter XTYPE). The same extension is used for all input
   NDFs.                                           [QUALITY_NAMES]
3 XTYPE
XTYPE = LITERAL (Read)
   If a new NDF extension is created to hold quality names (see
   parameter XNAME), then parameter XTYPE is used to obtain the
   HDS data type for the created extension. The run time default
   is to give the extension a type identical to its name.       []
2 Examples
SETQUAL M51 SATURATED "Saturated pixels" M51_CUT
   This example ensures that the quality "SATURATED" is defined
   within the NDF "M51". The comment "Saturated pixels" is stored
   with the quality name if it did not already exist in the NDF.
   The quality SATURATED is then assigned to all pixels for which
   the corresponding pixel in NDF M51_CUT is bad. The quality of
   all other pixels is left unchanged.

SETQUAL "M51,CENA" SOURCE_A SELECT=LIST LIST=^SOURCE_A.LIS FUNCTION=HS+NU
   This example ensures that pixels within the two NDFs M51 and
   CENA which are included in the list of pixel indices held in
   text file SOURCE_A.LIS, have the quality "SOURCE_A", and also
   ensures that none of the pixels which were not included in
   SOURCE_A.LIS have the quality.

SETQUAL M51 SOURCE_B SELECT=ARD ARD="CIR(80,80,9).AND.CIR(70,70,7)"
   This example ensures that all pixels within the region of
   intersection of two circles have the quality "SOURCE_B". The
   first circle is centred on pixel co-ordinates (80,80) and has
   a radius of 9 pixels. The second circle is centred at (70,70)
   and has a radius of 7 pixels.

SETQUAL M51 SOURCE_B SELECT=ARD ARD=^BACKGROUND.ARD
   This example assigns the quality "SOURCE_B" to pixels of the
   NDF "M51" as described by an ARD description stored in the text
   file "BACKGROUND.ARD". This text file could for instance have
   been created using KAPPA routine ARDGEN.
2 Notes
-  All the quality names which are currently defined within an
NDF can be listed by application SHOWQUAL.  Quality name
definitions can be removed from an NDF using application REMQUAL.
If there is no room for any more quality names to be added to the
NDF then REMQUAL can be used to remove a quality name in order to
make room for the new quality names.

-  Only the QUALITY and (optionally) HISTORY components, and the
extension specified by parameter XNAME are altered by this
application. All other NDF components remain unaltered.
2 Authors
DSB: David Berry (STARLINK)
2 History
 28-OCT-1991 (DSB):
    Original version.

 12-DEC-1994 (DSB):
    Added facility to specify selected pixels using an ARD description.

1 SHOWQUAL
Display the quality names defined in a group of NDFs.

Usage:

   SHOWQUAL IN [COUNT]

Description:

   This routine displays a list of all the quality names currently
   defined within each NDF specified by parameter IN. The
   descriptive comments which were stored with the quality names
   when they were originally defined are also displayed. An option
   exists for also displaying the number of pixels which hold each
   quality. For more information about using quality within the
   IRAS90 package see help on "Quality_in_IRAS90".
2 Parameters
For information on individual parameters, select from the list below:
3 COUNT
COUNT = _LOGICAL (Read)
   If true, then the number of pixels in each NDF which holds
   each defined quality is displayed. These figures are shown
   in parentheses between the quality name and associated
   comment.  This option adds significantly to the run time.  [NO]
3 IN
IN = NDF (Read)
   A group of NDFs in which the quality information is to be
   stored. This should be in the form of a group expression (see
   help on "Group_expressions").
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
2 Examples
SHOWQUAL "M51,CENA" YES
   This example displays all the quality names currently defined
   for the two NDFs M51 and CENA, together with the number of
   pixels holding each quality.
2 Authors
DSB: David Berry (STARLINK)
2 History
 28-OCT-1991 (DSB):
    Original version.
1 SIMCRDD
Produce simulated CRDD based on a supplied image of the sky.

Usage:

   SIMCRDD IN SKY OUT

Description:

   This routine generates a group of artificial CRDD files
   containing simulated data derived by convolving the IRAS detector
   point spread functions with a supplied sky image. A group of
   input CRDD files are used to define the scan geometry required
   for the simulated scans. Note, no noise or positional errors are
   included in the simulated CRDD files. No VARIANCE or QUALITY
   components are included in the output CRDD files.
2 Parameters
For information on individual parameters, select from the list below:
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output CRDD files. See help on "History_in_IRAS90" for more
   information on history. The history information will contain
   the names of the input CRDD files, trial sky image, and
   detector Point Spread Functions.      [current history setting]
3 IN
IN = NDF (Read)
   Specifies a group of input CRDD files. This should be in the
   form of a group expression (see help on "Group_expressions").
   The input CRDD files can be in any of the standard IRAS90
   systems of units.
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 OUT
OUT = NDF (Write)
   A group of output CRDD files corresponding one-for-one with
   the list of input CRDD files given for parameter IN.  This
   should be in the form of a group expression (see help on
   "Group_expressons"). Expressions such as "*_SIM" are expanded
   by replacing the "*" character with each input CRDD file in
   turn. The output CRDD files are in the same units as the input
   CRDD files.
3 PSF
PSF = LITERAL (Read)
   A string which is used to specify the NDFs holding the
   detector point spread functions. NDF names are formed by
   appending the detector number. For instance, the PSF for
   detector #12 is assumed to reside in an NDF with name <PSF>12
   (where <PSF> is replaced by the value supplied for parameter
   PSF). The default value causes the standard PSFs supplied as
   part of the IRAS90 package to be used. See the help on
   "Point_Spread_Functions" for more information on the origin and
   format of these files.                                       []
3 SKY
SKY = NDF (Read)
   The IRAS90 image to use as the trial sky. This can be in any
   of the standard IRAS90 system of units.
2 Examples
SIMCRDD ZCMA_*_DS NEWSKY *_SIM
   This causes an artificial CRDD file to be created for each
   file in the current directory which satisfies the wild-card
   template ZCMA_*_DS. Each created CRDD file has the same name
   as the input except that the string "_SIM" is appended to the
   end. The input CRDD files determine the sky position and
   detector number to use for each simulated CRDD value. The CRDD
   values are formed by convolving the standard detector PSFs with
   the image contained in NDF NEWSKY. Each pair of input and
   output CRDD files can be directly compared, value for value.

SIMCRDD M51_B1S1 MODEL MODEL_CRDD PSF=MYPSF
   The CRDD file M51_B1S1 is simulated, using the trial sky image
   MODEL, and the results are stored in MODEL_CRDD. The point
   spread functions used to generate the simulated data are
   contained in NDFs MYPSF1, MYPSF2, (etc) to MYPSF62. If any of
   these NDFs do not exist, then the application continues but
   bad values are stored for the corresponding detectors in the
   output CRDD files.
2 Notes
-  The waveband index of the data contained in the trial sky
image is recorded in the IRAS extension of each output CRDD file,
within an integer component called SKYBAND.
2 Authors
DSB: David Berry (STARLINK)
2 History
 14-JAN-1993 (DSB):
    Original version.
1 SKYALIGN
Re-map a group of images so that they are aligned.

Usage:

   SKYALIGN IN REF XY1 XY2 OUT

Description:

   This routine re-projects a group of images so that they are
   aligned pixel-for-pixel with another specified reference image.
   Alternatively, instead of giving a reference image, the user can
   supply the parameters which explicitly describe the projection
   required for the output images (see parameter REF).

   Two methods exist for determining the bounds of the output
   images.  Firstly, the user can give values for parameters XY1
   and XY2 which are then used as the bounds for all output images.
   Secondly, if a null value is given for XY1 or XY2 , default
   values are generated separately for each output image so that the
   output image just encloses the entire area covered by the
   corresponding input image. Using the first method will ensure
   that all output images have the same pixel origin, and so the
   resulting images can be directly compared. However, this may
   result in the output images being larger than necessary. In
   general, the second method results in smaller images being
   produced, in less time. However, the output images will have
   differing pixel origins which need to be taken into account when
   comparing the aligned images.

   The output image values are formed by re-sampling the input image
   values using either nearest neighbour or bi-linear interpolation
   (see parameter METHOD). If the former method is used, then any
   QUALITY and VARIANCE values which are present in the input NDFs
   are copied to the corresponding positions in the output NDFs. If
   bi-linear interpolation is used, then the output NDFs contain no
   QUALITY or VARIANCE values.
2 Parameters
For information on individual parameters, select from the list below:
3 ACC
ACC = REAL (Read)
   The positional accuracy required, as a a number of pixels. For
   highly non-linear projections, a recursive algorithm is used in
   which succesively smaller regions of the projection are fitted
   with a least squares linear transformation. If such a
   transformation results in a maximum positional error greater
   than the value supplied for ACC (in pixels), then a smaller
   region is used. High accuracy is paid for by larger run times.
                                                             [0.5]
3 CENTRE_LAT
CENTRE_LAT = LITERAL (Read)
   The sky latitude of the projection centre for the output
   images, in the coordinate system specified by the parameter
   COORDS (eg if COORDS is EQUATORIAL then CENTRE_LAT should be
   given the Declination of the image centre). See help on
   "Sky_coordinates" for the formats allowed for this value. This
   parameter is only used if the parameter REF is given a null
   value.
3 CENTRE_LON
CENTRE_LON = LITERAL (Read)
   The sky longitude of the projection centre for the output
   images, in the coordinate system specified by the parameter
   COORDS (eg if COORDS is EQUATORIAL then CENTRE_LON should be
   given the Right Ascension of the image centre).See help on
   "Sky_coordinates" for the formats allowed for this value. This
   parameter is only used if the parameter REF is given a null
   value.
3 CENTRE_XY
CENTRE_XY = _REAL (Read)
   A pair of (X,Y) pixel coordinates giving the projection centre
   for the output images. The default values will put the
   projection centre at the origin of the pixel coordinate
   system. This parameter is only used if the parameter REF is
   given a null value.                                   [0.0,0.0]
3 COORDS
COORDS = LITERAL (Read)
   Specifies the coordinate system used for referring to sky
   positions. Valid values include ECLIPTIC, EQUATORIAL,
   GALACTIC. See help on "Sky_coordinates" for more information
   on available sky coordinate systems. This parameter is only
   used if the parameter REF is given a null value.
                                   [current sky coordinate system]
3 EPOCH
EPOCH = DOUBLE PRECISION (Read)
   The Julian epoch at which the input images were obtained. The
   same value is used for all the input images.  This parameter
   is only accessed if the parameter REF is given a null value.
   A value of 1983.5 is acceptable for all IRAS data.
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be stored within the
   output NDFs. See help on "History_in_IRAS90" for more
   information on history.               [current history setting]
3 IN
IN = NDF (Read)
   A group of input NDFs, each containing an image with
   associated astrometry information. This should be in the form
   of a group expression (see help on "Group_expressions").
3 METHOD
METHOD = LITERAL (Read)
   The method to use when sampling the input pixel values, in
   order to find the corresponding output pixel value. It can
   take the following values:

   o  BILINEAR - This causes the output pixel values to be
   calculated by bilinear interpolation among the four nearest
   pixels values in the input image, resulting in smoother output
   images. If this method is selected then there is no one-to-one
   correspondance between input and output pixels and so no
   QUALITY or VARIANCE components will be propagated from the
   input to the output NDFs.

   o  NEAREST - This causes the output pixel values to be
   assigned the value of the single nearest input pixels If this
   method is selected then QUALITY or VARIANCE components are
   propagated from the input to the output NDFs. This method is
   faster than BILINEAR.                                 [NEAREST]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 PIXSIZE
PIXSIZE = _REAL (Read)
   The dimensions of a pixel at the centre of the output
   projection, in arc-minutes.  If a single value is given for
   PIXSIZE, then the output pixels are square. If two values are
   given then the output pixels are rectangular, having the
   specified dimensions. It should be remembered that the actual
   pixel size may vary slightly across the output projection
   depending on the type of projection. The values specified by
   parameter PIXSIZE give the actual pixel dimensions at the
   projection centre. This parameter is only used if the
   parameter REF is given a null value.
3 PROJTYPE
PROJTYPE = LITERAL (Read)
   Specifies the type of projection to use when creating the
   output images. Valid values include GNOMONIC (i.e. tangent
   plane), ORTHOGRAPHIC, LAMBERT and AITOFF.  See help on
   "Map_projections" for more information on available
   projections. This parameter is only used if the parameter REF
   is given a null value.
3 REF
REF = NDF (Read)
   An NDF containing an image to which all the images specified
   by parameter IN are to be aligned. If a null value is supplied
   for this parameter, then the values supplied for parameters
   PROJTYPE, CENTRE_LON, CENTRE_LAT, CENTRE_XY, PIXSIZE and
   COORDS are used to define the pixel grid to which output
   images are aligned.
3 ORIENT
ORIENT = _REAL (Read)
   The position angle of the second axis (or "Y" axis) of the
   output image grid, in degrees.  That is, the angle from north
   (defined by the coordinate system specified by parameter
   COORDS) to the image "Y" axis ("upwards" if the image is
   displayed normally).  Positive angles are measured in the same
   sense as rotation from north through east.  The default value
   of zero puts north "upwards". This parameter is only used if
   the parameter REF is given a null value.                  [0.0]
3 OUT
OUT = NDF (Write)
   A group of output NDFs corresponding one-for-one with the list
   of input NDFs given for parameter IN.  This should be in the
   form of a group expression (see help on "Group_expressions").
   Expressions such as "*_AL" are expanded by replacing the "*"
   character with each input NDF name in turn.
3 XY1
XY1 = INTEGER (Read)
   A pair of values giving the pixel indices of the lower left
   corner of the output images. The same values are used for all
   output images.  NDFs.  If a null value is given then separate
   default values are calculated for each output NDF.
3 XY2
XY2 = INTEGER (Read)
   A pair of values giving the pixel indices of the upper right
   corner of the output images. The same values are used for all
   output images.  NDFs.  If a null value is given then separate
   default values are calculated for each output NDF.
2 Examples
SKYALIGN IMAGE1 IMAGE2 [-100,-10] [200,100] *_AL
   This example re-samples the image contained in IMAGE1 so that
   it is aligned with the image contained in IMAGE2, putting the
   output in IMAGE1_AL. The output image covers pixel coordinates
   between -100 and 200 in X, and -10 and 100 in Y.
2 Authors
DSB: David Berry (STARLINK)
2 History
 16-FEB-1993 (DSB):
    Original version.
1 SKYBOX
Define a rectangular region of sky.

Usage:

   SKYBOX DEVICE IN

Description:

   This routine defines a rectangular region of an image, using
   either a cursor or the parameter interface to define the region,
   and reports the pixel coordinates and sky coordinates of the
   corners of the region, together with the extent of the region in
   arc-minutes and in pixels. The edges of the rectangular region are
   parallel to the image X and Y axes.  The outline of the region
   may optionally be drawn on a specified graphics device, and a
   picture corresponding to the region may be added to the graphics
   database.

   By default, the region is specified by giving the positions of two
   opposite corners. However, if parameter BOXSIZE is given a value
   (on the command line for instance) then the region is specified by
   giving the position of the centre, together with the size of the
   region is the X and Y directions.
2 Parameters
For information on individual parameters, select from the list below:
3 BOXSIZE
BOXSIZE = REAL (Read)
   A pair of values specifying the sizes of the rectangular region
   parallel to the X and Y image axes. If a single value is
   supplied, the same value is used for both axes. If a null
   value is supplied, then the corners of the region are used to
   specify the box. If parameter COSYS has the value SKY, then
   BOXSIZE should be supplied in units of arc-minutes. Otherwise,
   it should be supplied in units of pixels.                   [!]
3 CENTRE_LAT
CENTRE_LAT = LITERAL (Read)
   The latitude of the box centre, in the coordinate system
   specified by COORDS (eg if COORDS was EQUATORIAL, CENTRE_LAT
   should be given a Declination value). CENTRE_LAT is only used
   if parameter CURSOR has a false value, if a value is supplied
   for parameter BOXSIZE, and if parameter COSYS is given the
   value SKY.  See the help on "Sky_coordinates" for details of
   the formats allowed for this value.
3 CENTRE_LON
CENTRE_LON = LITERAL (Read)
   The longitude of the box centre, in the coordinate system
   specified by COORDS (eg if COORDS was EQUATORIAL, CENTRE_LON
   should be given a Right Ascension value). CENTRE_LON is only
   used if parameter CURSOR has a false value, if a value is
   supplied for parameter BOXSIZE, and if parameter COSYS is
   given the value SKY. See the help on "Sky_coordinates" for
   details of the formats allowed for this value.
3 CENTRE_XY
CENTRE_XY = REAL (Read)
   The image coordinates (X and Y) of the box centre. CENTRE_XY
   is only used if parameter CURSOR has a false value, if a value
   is supplied for parameter BOXSIZE, and if parameter COSYS has
   one of the values WORLD, IMAGE or PIXEL.
3 CLEAR
CLEAR = LOGICAL (Read)
   True if the area of the graphics device over which the box is
   to be drawn should be cleared before drawing it.           [NO]
3 COORDS
COORDS = LITERAL (Read)
   Specifies the sky coordinate system to use.  Valid values
   include ECLIPTIC, EQUATORIAL, GALACTIC. See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.             [current sky coordinate system]
3 COSYS
COSYS = LITERAL (Read)
   Determines if the positions which specify the box are to be
   given in sky coordinates or image coordinates. It can take any
   of the values SKY, IMAGE, PIXEL or WORLD. The first is used to
   indicate that sky coordinates will be supplied (in the system
   specified by parameter COORDS). The other three are all
   synonymous and indicate that image coordinates will be
   supplied.                                                 [SKY]
3 CURSOR
CURSOR = LOGICAL (Read)
   If true, a cursor on a graphics device is used to specify
   positions. Otherwise, parameters CENTRE_LON, CENTRE_LAT,
   CENTRE_XY, LAT1, LAT2, LON1, LON2, XY1 and XY2 are used.  [YES]
3 DEVICE
DEVICE = DEVICE (Read)
   The plotting device.     [Current image-display-overlay device]
3 IN
IN = NDF (Read)
   The NDF to which image coordinates relate. In CURSOR mode, the
   NDF will usually be identified using information stored in the
   AGI database, without the user needing to specify a value for
   parameter IN.
3 LAT1
LAT1 = LITERAL (Read)
   The latitude at a corner of the box, in the coordinate system
   specified by COORDS. LAT1 is only used if parameter CURSOR has
   a false value, if a null value is supplied for parameter
   BOXSIZE, and if parameter COSYS is given the value SKY.  See
   the help on "Sky_coordinates" for details of the formats
   allowed for this value.
3 LAT2
LAT2 = LITERAL (Read)
   The latitude at the opposite corner of the box, in the
   coordinate system specified by COORDS.  LAT2 is only used if
   parameter CURSOR has a false value, if a null value is
   supplied for parameter BOXSIZE, and if parameter COSYS is
   given the value SKY. See the help on "Sky_coordinates" for
   details of the formats allowed for this value.
3 LON1
LON1 = LITERAL (Read)
   The longitude at a corner of the box, in the coordinate system
   specified by COORDS. LON1 is only used if parameter CURSOR has
   a false value, if a null value is supplied for parameter
   BOXSIZE, and if parameter COSYS is given the value SKY. See
   the help on "Sky_coordinates" for details of the formats
   allowed for this value.
3 LON2
LON2 = LITERAL (Read)
   The longitude at the opposite corner of the box, in the
   coordinate system specified by COORDS. LON2 is only used if
   parameter CURSOR has a false value, if a null value is
   supplied for parameter BOXSIZE, and if parameter COSYS is
   given the value SKY.  See the help on "Sky_coordinates" for
   details of the formats allowed for this value.
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen and
   logged to the log file. This should take one of the values
   QUIET, NORMAL or VERBOSE (see help on "Message_filtering").
                                  [current message filter setting]
3 OUTLINE
OUTLINE = LOGICAL (Read)
   If true, a box is drawn on the graphics device specified by
   parameter DEVICE, representing the rectangular region. The
   run-time default for this parameter is YES if parameter CURSOR
   has a true value, and NO otherwise.                          []
3 PEN
PEN = INTEGER (Read)
   The SGS pen number used to draw the box on the displayed
   image.  Only used if parameter OUTLINE is given a true value.
                                                     [current pen]
3 PIC
PIC = LOGICAL (Read)
   If true, a picture is added to the graphics data base
   corresponding to the rectangular region. The new picture
   becomes the current picture. See parameters PICNAM and PICLAB.
                                                              [NO]
3 PICLAB
PICLAB = LITERAL (Read)
   A Label to be given to the new picture. Only used if parameter
   PIC has a true value. No label is added if a null value is
   supplied.                                                   [!]
3 PICNAM
PICNAM = LITERAL (Read)
   The name to associated with the new picture. Only used if parameter
   PIC has a true value.                                    [DATA]
3 XY1
XY1 = REAL (Read)
   The image coordinates (X and Y) at a corner of the box. XY1 is
   only used if parameter CURSOR has a false value, if a null
   value is supplied for parameter BOXSIZE, and if parameter
   COSYS has one of the values WORLD, IMAGE or PIXEL.
3 XY2
XY2 = REAL (Read)
   The image coordinates (X and Y) at the opposite corner of the
   box. XY2 is only used if parameter CURSOR has a false value,
   if a null value is supplied for parameter BOXSIZE, and if
   parameter COSYS has one of the values WORLD, IMAGE or PIXEL.
2 Examples
SKYBOX
   This command will display a cursor over the current image
   overlay device, and ask the user to identify two opposite
   corners of the box. An outline of the box will be drawn.  The
   image coordinates and sky coordinates of the corners and the
   centre of the box will then be displayed, together with the
   extent of the box in the X and Y directions. No picture will be
   added to the graphics database.

SKYBOX NOCURSOR IN=M51 COSYS=IMAGE XY1=[1,1] XY2=[50,50]
   The box extends from pixel (1,1) to pixel (50,50) in the NDF
   "M51". The sky coordinates of the corners and the centre of
   the box will then be displayed, together with the extent of
   the box in the X and Y directions. No picture will be added to
   the graphics database, and no outline will de drawn.

SKYBOX BOXSIZE=[50,60] NOOUTLINE PIC PICNAM='FRAME'
   A cursor is displayed and the user asked to identify the
   centre of the box. The box extends for 25 arc-minutes on each
   side of this centre position in the X direction, and for 30
   arc-minutes in the Y direction. The coordinates of the corners
   and centre, and the extent of the box are reported. No outline
   of the box is drawn, but a new FRAME picture corresponding to
   the box is added to the graphics data base.
2 Authors
DSB: David Berry (STARLINK)
2 History
 25-FEB-1993 (DSB):
    Original version.
1 SKYGRID
Overlay a sky coordinate grid on a displayed picture.

Usage:

   SKYGRID DEVICE IN

Description:

   This routine overlays a sky coordinate grid on top of a specified
   section of a previously displayed picture, using astrometry
   information stored with the picture in the AGI database, or
   stored in a specified NDF. If the current picture is a DATA
   picture, then the coordinate grid is overlayed on top of the
   current picture. Otherwise, it is overlayed on top of the most
   recent DATA picture to be created within the current picture.

   Many aspects of the display can be tailored using the parameters
   described below. Particularly, the general plotting accuracy can
   be controlled using parameter TOLERANCE. Greater accuracy is
   bought at the cost of greater run-time, so in general only use
   high accuracy if it is really necessary.
2 Parameters
For information on individual parameters, select from the list below:
3 CLEAR
CLEAR = _LOGICAL (Read)
   True if the area of the graphics device over which the
   coordinate grid is to be drawn should be cleared before
   creating the grid.                                        [NO]
3 COORDS
COORDS = LITERAL (Read)
   Specifies the sky coordinate system to use. Valid values
   include ECLIPTIC, EQUATORIAL, GALACTIC. See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.
                                   [current sky coordinate system]
3 COORDSIZE
COORDSIZE = REAL (Read)
   The text size to be used when writing formatted coordinate
   values, given as a fraction of the maximum dimension of the
   plotting zone. A negative or zero value suppresses coordinate
   labels.                                                  [0.01]
3 DEVICE
DEVICE = DEVICE (Read)
   The plotting device.     [Current image-display-overlay device]
3 IN
IN = NDF (Read)
   The NDF from which to read the astrometry information. This
   will usually be the NDF holding the displayed image. A null
   value will cause the astrometry to be located using
   information stored within the AGI database. If this cannot be
   done, then the user will be re-prompted for an NDF using
   parameter IN.  If a section of an NDF is specified, the
   coordinate grid is only drawn over the specified section of
   the picture.                                                [!]
3 LABEL
LABEL = _LOGICAL (Read)
   True if the sky coordinate grid is to be labelled.       [TRUE]
3 LATACC
LATACC = LITERAL (Read)
   The accuracy required for the displayed latitude labels, in
   the coordinate system specified by the parameter COORDS (eg if
   COORDS is EQUATORIAL then LATACC should be given the accuracy
   as a declination value; for instance, a value of 1 arc-minute
   will suppress the arc-seconds field in the displayed
   declination values). See help on "Sky_coordinates" for the
   formats allowed for this value.  If a value of zero is
   supplied, a sensible default value will be used.            [0]
3 LATINT
LATINT = LITERAL (Read)
   The interval between lines of constant latitude (parallels),
   in the coordinate system specified by the parameter COORDS (eg
   if COORDS is EQUATORIAL then LATINT should be given the
   interval in declination between parallels). See help on
   "Sky_coordinates" for the formats allowed for this value.  If
   a value of zero is supplied, a sensible default value will be
   used.                                                       [0]
3 LINES
LINES = LOGICAL (Read)
   True if lines of constant longitude and latitude should extend
   across the entire image. Otherwise, short sections at the ends
   of these lines are displayed (in the nature of tick marks).
                                                           [FALSE]
3 LONACC
LONACC = LITERAL (Read)
   The accuracy required for the displayed longitude labels, in
   the coordinate system specified by the parameter COORDS (eg if
   COORDS is EQUATORIAL then LONACC should be given the accuracy
   as a right ascension value; for instance, a value of 1 hour
   will suppress the minutes and seconds fields in the displayed
   RA values). See help on "Sky_coordinates" for the formats
   allowed for this value. If a value of zero is supplied, a
   sensible default value will be used.                        [0]
3 LONINT
LONINT = LITERAL (Read)
   The interval between lines of constant longitude (meridians),
   in the coordinate system specified by the parameter COORDS (eg
   if COORDS is EQUATORIAL then LONINT should be given the
   interval in right ascension between meridians). See help on
   "Sky_coordinates" for the formats allowed for this value.  If
   a value of zero is supplied, a sensible default value will be
   used.                                                       [0]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").
                                  [current message filter setting]
3 PENA
PENA = _INTEGER (Read)
   Pen number to use when drawing the boundary round the
   coordinate grid.                                            [3]
3 PENB
PENB = _INTEGER (Read)
   Pen number to use when drawing the curves and ticks.        [3]
3 PENC
PENC = _INTEGER (Read)
   Pen number to use when drawing text labels.                 [1]
3 PEND
PEND = _INTEGER (Read)
   Pen number to use when drawing coordinate labels.           [1]
3 TEXTSIZE
TEXTSIZE = REAL (Read)
   The text size to be used when writing text labels, given as a
   fraction of the maximum dimension of the plotting zone. A
   negative or zero value suppresses text labels.           [0.02]
3 TOLERANCE
TOLERANCE = _INTEGER (Read)
   The tolerance allowed when plotting the curves which make up
   the grid. The value should be between zero and ten. Values
   outside this range are take as being equal to the nearest end
   point of the range.  A value of zero gives minimum tolerance
   (i.e. maximum accuracy), at the cost of increased plotting
   time. A value of ten gives poorer accuracy but is faster.   [6]
2 Examples
SKYGRID XWINDOWS
   Overlay a coordinate grid on top of the most recent DATA
   picture on the XWINDOWS image display. The AGI database will
   usually contain the information needed to define the
   coordinate grid. If it does not, then the user will be prompted
   for parameter IN, and the name of the displayed NDF should be
   given in response.
2 Notes
-  The astrometry information used to define the sky coordinate
grid is located using the following search path:

   o  Firstly, astrometry information is looked for in any NDF
   specified on the command line using parameter IN.

   o  Secondly, astrometry information is looked for in any MORE
   structure associated with the AGI picture.

   o  Thirdly, astrometry information is looked for in any
   reference object associated with the AGI picture.

   o  If all else fails, the value of the IN parameter is
   cancelled, and the user is prompted for the NDF containing
   relevant astrometry information.

-  This routine can only be used to display coordinate grids
for NDFs which contain astrometry information in the form used by
the IRAS90 package.
2 Authors
WG: Wei Gong (IPMAF)

DSB: David Berry (Starlink)
2 History
 25-FEB-1992 (WG):
    Original version.

 18-JAN-1993 (DSB):
    Modified for inclusion in the IRAS90 package.

 10-MAY-1994 (DCP):
    Release 1.0 Bugfix 9 - Entered DSB's modification to stop
    annotation of thin images being truncated ( give x and y
    margins a different width )
1 SKYLINE
Draw curves over a displayed sky image.

Usage:

   SKYLINE DEVICE IN

Description:

   This routine provides the user with facilities for drawing
   curves over a previously displayed data picture. The curves
   which can be drawn include:

     1. Arcs of meridians (lines of constant longitude)

     2. Arcs of parallels (lines of constant latitude)

     3. Arcs of great circles

     4. Poly-lines containing several sky positions. Each section of
        the poly line is an arc of a great circle.

   Many curves can be drawn by a single invocation of this routine
   (see parameter OPTION). The curves to be drawn can be specified
   either "interactively" (by positioning a graphics cursor or by
   suppling values in response to parameter prompts), or
   "non-interactively" (by supplying a text file containing the curve
   specifications); see parameter MODE. A text file can be created
   containing specifications of all the curves which have been
   drawn. This file can be supplied as input to a subsequent run of
   this routine.

   The parameter OPTION provides more facilities for modifying and
   editing the curves drawn by this routine, allowing astrometric
   diagrams to be created.
2 Parameters
For information on individual parameters, select from the list below:
3 ANGLE
ANGLE = LITERAL
   The position angle of an arc of a great circle (measured at
   the start of the arc). The angle is measured from north to the
   required direction with positive values in the sense of
   rotation from north to east. The formats allowed for this
   value are the same as those allowed for a declination value
   (see help on "Sky_coordinates").
3 ARCLEN
ARCLEN = LITERAL (Read)
   Gives the length of the arc to be drawn. It can be positive or
   negative. The latitude at the end of an arc of a meridian is
   (LATITUDE + ARCLEN). The longitude at the end of an arc of a
   parallel is (LONGITUDE + ARCLEN). The section will be clipped
   by the boundary of the displayed image. The formats allowed
   for this value are the same as those allowed for a declination
   value (see help on "Sky_coordinates"). If the supplied value is
   zero, the entire length of the arc visible within the picture
   will be drawn.
3 CLEAR
CLEAR = LOGICAL (Read)
   True if the area of the graphics device over which the curves
   are to be drawn should be cleared before drawing commences.[NO]
3 COORDS
COORDS = LITERAL (Read)
   Specifies the sky coordinate system to use. Valid values
   include ECLIPTIC, EQUATORIAL, GALACTIC. See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.
                                   [current sky coordinate system]
3 DEVICE
DEVICE = DEVICE (Read)
   The plotting device.     [Current image-display-overlay device]
3 ERASE
ERASE = LITERAL (Read)
   Erase a curve (or all curves ) just drawn. It can take the
   following values:

   MERIDIAN - Erase the last drawn meridian arc

   PARALLEL - Erase the last drawn parallel arc

   GREAT CIRCLE   - Erase the last drawn great circle arc

   POLYLINE - Erase the last drawn poly-line

   ALL - Erase all curves

   Only the facility to erase the last drawn curve of each type
   or to erase all curves is provided. After a curve is erased
   the one drawn just before it becomes the last and hence can be
   erased subsequently. If you have a complicated selection of
   curves to be erased, the best way to achieve this is: save the
   present drawing in a text file, erase all curves, edit the
   text file with a text editor to delete the entries
   corresponding to the curves to be erased and then draw the
   remaining curves in the file by running SKYLINE again,
   selecting non-interactive mode with the edited text file as
   its input.
3 FILE
FILE = LITERAL (Read)
   The name of the text file used to give the information about
   the curves to be drawn in non-interactive mode. See the "Notes"
   section below for a description of the format of this file
3 IN
IN = NDF (Read)
   The NDF from which to read the astrometry information. This
   will usually be the NDF holding the displayed image. A null
   value will cause the astrometry to be located using
   information stored within the AGI database. If this cannot be
   done, then the user will be re-prompted for an NDF using
   parameter IN.  If a section of an NDF is specified, the curves
   are only drawn over the specified section of the picture.   [!]
3 LAT
LAT = LITERAL (Read)
   The latitude at the start of a curve, in the coordinate system
   specified by COORDS (eg if COORDS was EQUATORIAL, LAT should
   be given a Declination value).  See help on "Sky_coordinates"
   for more information on available sky coordinate systems.
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of the log text file containing the information
   about the present plotted curves. See the NOTES section about
   the format of this file.
3 LON
LON = LITERAL (Read)
   A longitude at the start of a curve, in the coordinate system
   specified by COORDS (eg if COORDS was EQUATORIAL, LON should
   be given a Right Ascension value).  See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.
3 LOOP
LOOP = LOGICAL (Read)
   If true then the routine does not exit when the final curve of
   the given type has been drawn. Instead, the user is allowed to
   modify the current drawing by selecting from the options
   provided by parameter OPTION.                              [NO]
3 MODE
MODE = LITERAL (Read)
   Specifies the source from which curve specifications will be
   obtained. It can be:

   CURSOR - All positions are specified by cursor. This mode will
   only be available on graphic devices which support cursors.

   KEYBOARD - Positions are specified in response to parameter
   prompts, using the keyboard.

   FILE - Curves are drawn according to the specifications
   contained within a text file (see parameter FILE). This is
   referred to as "non-interactive" mode. The run-time default is
   CURSOR if a cursor is available, and KEYBOARD otherwise.     []
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").  [current message filter setting]
3 OPTION
OPTION = LITERAL (Read)
   The action to take once all curves of the type specified by
   parameter TYPE have been drawn. It can take following values:

   CONTINUE - Continue to draw further curves.

   ERASE - Select the curves to erase. This option will only
   be available on image_overlay devices.

   SAVE - Save information describing the present drawing into a
   log file.

   MODE - Change the source from which curve specifications are
   obtained.

   PEN - Select a new SGS pen number.

   EXIT - Exit the application

   This parameter is only prompted for if parameter LOOP has a
   true value.
3 PEN
PEN = INTEGER (Read)
   The pen number used to draw the curves.                     [1]
3 TOLERANCE
TOLERANCE = INTEGER (Read)
   The tolerance allowed when plotting the curves.  The value
   should be between zero and ten. Values outside this range are
   take as being equal to the nearest end point of the range.  A
   value of zero gives minimum tolerance (i.e. maximum accuracy),
   at the cost of increased plotting time. A value of ten gives
   poorer accuracy but is faster.                              [6]
3 TYPE
TYPE = LITERAL (Read)
   Specifies the type of curve to be drawn. It takes the
   following values (or any un-ambiguous abbreviation):

   MERIDIAN - Draw meridian arcs

   PARALLEL - Draw parallel arcs

   GREAT CIRCLE - Draw great circle arcs

   POLYLINE - Draw poly-lines connecting specified sky positions

   A null response will result in the routine terminating if LOOP
   is false. If LOOP is true a value will be obtained for
   parameter OPTION and the corresponding action will be
   performed.
2 Examples
SKYLINE MODE=KEY LON=0 LAT=0 TYPE=PAR COORDS=GAL ARCLEN=0
   This causes a curve to be drawn over the displayed picture
   corresponding to the galactic equator. MODE=KEY causes the
   position supplied by parameters LON and LAT to be used in
   preference to the cursor. COORDS=GAL causes the values supplied
   by LON and LAT to be interpreted as galactic coordinates.
   ARCLEN=0 causes the entire length of the intersection of the
   curve with the picture to be drawn (if any). TYPE=PAR specifies
   that a parallel (i.e. a line of constant latitude) is to be
   drawn. LON=0 and LAT=0 causes the parallel to coincide with
   the galactic equator. Once the curve is drawn, the user will
   be prompted for a new value for parameter LON. A null value
   should be given to exit the routine, and then a null value
   should also be given for the subsequent prompt for TYPE.
2 Notes
-  The curves are drawn within the current picture only if it is a
DATA picture, otherwise curves are drawn in the last DATA picture
to be created within the current picture.

-  The astrometry information used to draw the curves is located
using the following search path:

   o  Firstly, astrometry information is looked for in any NDF
   specified on the command line using parameter IN.

   o  Secondly, astrometry information is looked for in any MORE
   structure associated with the AGI picture.

   o  Thirdly, astrometry information is looked for in any
   reference object associated with the AGI picture.

   o  If all else fails, the value of the IN parameter is
   cancelled, and the user is prompted for the NDF containing
   relevant astrometry information.

-  This routine can only be used to display curves for NDFs which
contain astrometry information in the form used by the IRAS90
package.

- The format of input and output text files is:

   o The file is divided into comments and fields. Comments
   consist of strings commencing with a "#" character, and are
   considered to extend to the end of the line. Such comments are
   ignored. Fields are strings which specify any of the items of
   information described below. Each line in the file may contain
   any number of fields, multiple fields being separated by
   commas.

   o The first field should give the name of the sky coordinate
   system used (see help on "Sky_coordinates").

   o Fields containing the key words MERIDIAN, PARALLEL, GREAT
   CIRCLE or POLYLINE begin a block of specifications for arcs
   of the corresponding type.

   o The specification of an arc of a meridian or parallel takes
   three consecutive fields; the longitude at the start of the
   arc, the latitude at the start of the arc, and the arc-length.

   o The specification of an arc of a great circle takes four
   consecutive fields; the longitude at the start of the arc,
   the latitude at the start of the arc, the position angle at
   the start of the arc, and the arc-length.

   o A poly-line is specified by giving the longitude and latitude
   (in that order) of each vertex. A new POLYLINE keyword must be
   specified for each poly-line which is to be drawn.

   o Keywords can appear many times and in any order.
2 Authors
WG: Wei Gong (IPMAF)

DSB: David Berry (STARLINK)
2 History
 23-JUN-1992 (WG):
    Original version.

 9-FEB-1993 (DSB):
    Modified for inclusion in IRAS90.
1 SKYMARK
Draw markers at specified positions.

Usage:

   SKYMARK DEVICE IN

Description:

   This routine draws markers at a set of specified positions within
   the most recently created DATA picture, or alternatively draws a
   polyline through them. The positions can be specified by using a
   graphics cursor, or by reading them from a text file, or by
   supplying them in response to parameter prompts.

   There are 5 different markers available for selection: '.', '+',
   '*',  'o' and 'x'. Except the '.', there is the option in which
   the size of the markers are proportional to the image data value
   at the selected position. In this case, a '.' will temporarily be
   put at each of the selected positions until the full range of
   image data values at all selected positions is known.  The
   temporary markers will then be replaced by the selected marker,
   with sizes ranging between the limits specified by parameter
   SIZE.

   The sky coordinates of the marked positions can be logged into
   a logging file, see parameter LOGFILE, which can be used in
   future by other IRAS90 applications as well as this application
   itself.
2 Parameters
For information on individual parameters, select from the list below:
3 CLEAR
CLEAR = LOGICAL (Read)
   True if the area of the graphics device over which the markers
   are to be drawn should be cleared before drawing any markers.
                                                              [NO]
3 COORDS
COORDS = LITERAL (Read)
   Specifies the sky coordinate system to use. Valid values
   include ECLIPTIC, EQUATORIAL, GALACTIC. See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.
                                   [current sky coordinate system]
3 DEVICE
DEVICE = DEVICE (Read)
   The plotting device.     [Current image-display-overlay device]
3 EPOCH
EPOCH = DOUBLE PRECISION (Read)
   The Julian epoch at which the supplied sky positions were
   determined. This is only used if sky coordinates supplied in a
   text file (in FILE mode) are stored in a coordinate system
   different to that specified by the COORDS parameter. In this
   case the epoch may be necessary to perform the conversion from
   one coordinate system to the other (depending on what the
   coordinate systems are). A value of 1983.5 is acceptable for
   all IRAS data.
3 FILE
FILE = FILENAME (Read)
   A file from which to read coordinates. This is only prompted
   for if parameter MODE has the value FILE. See the help on
   "Coordinate_files" for a description of the format required for
   this file.
3 IN
IN = NDF (Read)
   The NDF to which image coordinates relate. In CURSOR mode, the
   NDF will usually be identified using information stored in the
   AGI database, without the user needing to specify a value for
   parameter IN.
3 LAT
LAT = LITERAL (Read)
   A latitude of a position to be marked, in the coordinate
   system specified by COORDS (eg if COORDS was EQUATORIAL, LAT
   should be given a Declination value). LAT is only prompted
   for if parameter MODE has the value KEYBOARD. See the help on
   "Sky_coordinates" for details of the formats allowed for this
   value.
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of a text file to receive a copy of the displayed
   information. The run time default is for no log file to be
   produced. Log files are created in a format suitable for use
   with parameter FILE.                                        [!]
3 LON
LON = LITERAL (Read)
   A longitude of a position to be marked, in the coordinate
   system specified by COORDS (eg if COORDS was EQUATORIAL, LON
   should be given a Right Ascension value). LON is only prompted
   for if parameter MODE has the value KEYBOARD. See the help on
   "Sky_coordinates" for details of the formats allowed for this
   value.
3 LOOP
LOOP = LOGICAL (Read)
   If true then application does not exit when the final input
   position has been given. Instead, the user is allowed to
   change some of the parameter values and to continue to
   mark more positions. See parameter OPTION.                 [NO]
3 MODE
MODE = LITERAL (Read)
   Specifies the working mode of the application. It can take
   following values:

    CURSOR - The positions are specified by the cursor. This
    option is only available when cursor is available on the
    graphic device in use.

    KEYBOARD - The positions are specified from the keyboard.

    FILE - The positions are read from a text file.

   The inputs can be abbrievated to one character and is case
   insensitive.                                         [KEYBOARD]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen and
   logged to the log file. This should take one of the values
   QUIET, NORMAL or VERBOSE (see help on "Message_filtering").
                                  [current message filter setting]
3 OPTION
OPTION = LITERAL (Read)
   The action to perform once all positions have been marked.
   This is only prompted for if parameter LOOP is TRUE (otherwise
   a value of EXIT is assumed). It can take the following values;

    CLEAR - Clear the marks drawn in previous loops. This option
    is only available when the graphic device in use is the type
    of IMAGE-OVERLAY.

    TYPE - Select a new type of mark.

    PEN - Select a new pen to draw the mark.

    POLY - Toggle between polyline/marker mode.

    SIZE - Select a new mark size.

    MODE - Select a new working mode for the application.

    MARK - Perform the marking task with newly selected parameters

    EXIT - Exit the application.

   The application will keep prompt for a new value of this
   parameter until 'MARK' or 'EXIT' is given. The input can be
   abbrievated to an unambiguous length and is case insensitive.
3 PEN
PEN = INTEGER (Read)
   The SGS pen number used to draw the markers on the displayed
   image.                                                      [3]
3 POLYLINE
POLYLINE = LOGICAL (Read)
   True if a polygonal line is to be drawn connecting the supplied
   positions, instead of the usual markers. The polyline is closed
   by connecting the last position with the first position.   [NO]
3 SIZE
SIZE = REAL (Read)
   A pair of real value give the max. and min. size of the marks
   to be draw on the image. Given as the scale of the nominal
   size for the graphic device. The size of a mark is at somewhere
   between this two values according to the image magnitude at the
   mark position. Among all positions to be marked, the mark at
   the position with the max. image magnitude will has max. size
   and the mark at the position with the min. image magnitude will
   has min. size. If only one value is obtained from the user, the
   max size will be equal to the min szie, that is, all marks will
   have the same size.                                       [1.0]
3 TYPE
TYPE = LITERAL (Read)
   The marker to be used. The following markers are currently
   available ".", "+", "*", "o", "x"                           [+]
2 Notes
- The displayed image should have name 'DATA' and be either the
current one of the most recent one with the name 'DATA' in the
AGI data base, that is, the picture should either be the most
recently displayed, or be made current by using KAPPA application
CURSOR or PICLIST etc (see SUN/95 for more details about the
usage of these KAPPA applictions).

- This application uses the astrometry information stored in the
Astrometry Extension, created by IRA_ package, of the underlying
NDF file of the displayed image. Therefore the Astrometry
Extension should be first created if it does not exist. For IRAS
images, it is to require the user applying the I90 application
PREPARE to the image NDFs right after extracting the images from
the FITS tape with KAPPA applciation FITSIN.
2 Authors
WG: Wei Gong (IPMAF)
2 History
 3-JUN-1992 (WG):
    Original version.
1 SKYPHOT
Calculate integrated fluxes in rectangular, elliptical or
polygonal regions.

Usage:

   SKYPHOT

Description:

   This routine calculates the integrated flux within a rectangular,
   elliptical or polygonal region of an image, optionally
   subtracting a supplied background surface brightness. Central
   positions and polygon vertices may be specified using a graphics
   cursor if an image is already displayed. Alternatively, sky
   coordinates may be specified in response to parameter prompts, or
   they may be read from a text file (see parameter MODE). The
   dimensions of rectangular or elliptical apertures are specified
   using parameter SIZE.
2 Parameters
For information on individual parameters, select from the list below:
3 BACKVAL
BACKVAL = REAL (Read)
   A background surface brightness to be subtracted from the data
   before integrating over the selected region. The value should
   be supplied in units of MJy/sr.                           [0.0]
3 COORDS
COORDS = LITERAL (Read)
   Specifies the coordinate system used for referring to sky
   positions. Valid values include ECLIPTIC, EQUATORIAL,
   GALACTIC. See help on "Sky_coordinates" for more information
   on available sky coordinate systems.
                                   [current sky coordinate system]
3 DEVICE
DEVICE = DEVICE (Read)
   The graphics workstation.         [The current graphics device]
3 FILE
FILE = FILENAME (Read)
   A file from which to read sky coordinates. This is only
   prompted for if parameter MODE has the value FILE. See the
   help on "Coordinate_files" for a description of the format
   required for this file. Note, the file must contain sky
   coordinates, not image coordinates.
3 FLUX
FLUX = REAL (Write)
   An output parameter holding the last displayed flux density
   value.
3 IN
IN = NDF (Read)
   The input NDF.
3 LAT
LAT = LITERAL (Read)
   A latitude of a position (either the centre of a rectangular
   or elliptical region, or a vertex of a polygon), in the
   coordinate system specified by COORDS (eg if COORDS was
   EQUATORIAL, LAT should be given a Declination value). LAT is
   only prompted for if parameter MODE has the value KEYBOARD.
   See help on "Sky_coordinates" for more information on
   available sky coordinate systems.
3 LOGFILE
LOGFILE = FILENAME (Write)
   The name of a text file to receive a copy of the displayed
   information. The run time default is for no log file to be
   produced.                                                   [!]
3 LON
LON = LITERAL (Read)
   The longitude corresponding to the latitude value given for
   parameter LAT. LON is only prompted for if parameter MODE has
   the value KEYBOARD. See help on "Sky_coordinates" for more
   information on available sky coordinate systems.
3 LOOP
LOOP = LOGICAL (Read)
   If true then application does not exit when the final input
   position has been given. Instead, the user is allowed to
   change some of the parameter values and to continue to
   perform more integrations. See parameter OPTION.           [NO]
3 MEAN
MEAN = REAL (Write)
   An output parameter holding the last displayed mean surface
   brightness value.
3 MODE
MODE = LITERAL (Read)
   MODE specifies the source of input coordinates. It can take the
   following values;

   CURSOR - The graphics cursor is used to specify the positions.
   A DATA picture must previously have been created (eg a grey
   scale image or contour plot). The most recently created DATA
   picture contained within the current picture is used. The user
   is given instructions on the use of the cursor.

   FILE - The input positions are contained within the file
   specified by parameter FILE.

   KEYBOARD - The input positions are specified by parameters LON
   and LAT.                                               [CURSOR]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen and
   logged to the log file. This should take one of the values
   QUIET, NORMAL or VERBOSE (see help on "Message_filtering").
                                  [current message filter setting]
3 OPTION
OPTION = LITERAL (Read)
   The action to perform once all positions have been processed.
   This is only prompted for if parameter LOOP is TRUE (otherwise
   a value of EXIT is assumed). It can take the following values;

   CONTINUE - Continue to process more positions using the current
   parameter settings.

   EXIT - Exit the application without processing any more
   positions.

   MODE - Change the value of the MODE parameter.

   PLOT - Change the value of the PLOT parameter.

   PEN - Change the value of the PEN parameter.

   SHAPE - Change the value of the SHAPE parameter.

   SIZE - Change the value of the SIZE parameter.

   BACKVAL - Change the value of the BACKVAL parameter.
3 PEN
PEN = INTEGER (Read)
   The SGS pen number used to draw the graphics specified by
   parameter PLOT.                                             [3]
3 PLOT
PLOT = LOGICAL (Read)
   If a true value is supplied, then the area over which the flux
   is to be integrated is outline on the graphics device
   specified by parameter DEVICE. The pen colour specified by
   parameter PEN is used. This parameter is only used if
   parameter MODE is given the value CURSOR.                 [YES]
3 SHAPE
SHAPE = LITERAL (Read)
   The shape of the region to be integrated over. It can take the
   values RECTANGLE, ELLIPSE or POLYGON.                 [ELLIPSE]
3 SIGMA
SIGMA = REAL (Write)
   An output parameter holding the last displayed value for the
   standard deviation of the surface brightness.
3 SINGLE
SINGLE = LOGICAL (Read)
   If TRUE, then the application normally exits after the user
   has given a single input position. If parameter LOOP is TRUE
   then the user may continue to give further single positions.
   The value of this parameter is ignored when integrating
   polygonal regions.                                         [NO]
3 SIZE
SIZE = REAL (Read)
   A pair of values giving the dimensions of the aperture
   parallel to X and Y, in arc-minutes. If a single value is
   given then the supplied value is used for both axes.
2 Examples
SKYPHOT LOGFILE=FLUXES.LIS SIZE=10
   This displays a cursor on top of the most recently created
   DATA picture (within the current picture). The user may then
   repeatedly select points, and integrated flux within a
   circular aperture of diameter 10 arc-minutes is displayed on
   the terminal and written to text file FLUXES.LIS. Giving a
   point outside the picture causes the application to terminate.

SKYPHOT SHAPE=RECT SIZE=[3,5] MODE=KEY SINGLE
   This prompts the user for a single pair of sky coordinates. The
   integrated flux within a rectangular aperture of 3 by 5
   arc-minutes is displayed, and the application exits.
2 Notes
- Flux density values are displayed in units of Janskys, and
surface brightness values in mega-Janskys per steradian.

- The last displayed values are written to output parameters
FLUX, MEAN and SIGMA and can be accessed by subsequent
applications.

- The displayed total flux values include only whole pixel
values.  No attempt is made to perform any interpolation for
pixels which are only partly within the aperture. For this reason
the actual aperture shape can only be considered to be accurate
to one pixel.  If this is a problem, the image can be
re-projected using application SKYALIGN so that it has smaller
pixels before using SKYPHOT.
2 Authors
DSB: David Berry (STARLINK)
2 History
 15-JUL-1993 (DSB):
    Original version.

 22-SEP-1993 (DSB):
    Parameters FLUX, MEAN and SIGMA added. SIZE made into a 2 value
    parameter holding X and Y dimensions.
1 SKYPOS
Find the sky coordinates of selected image positions, and
vice-verse.

Usage:

   SKYPOS

Description:

   This routine returns the sky coordinates corresponding to
   selected image positions, or the image coordinates corresponding
   to selected sky positions, depending on the value of parameter
   INVERSE. Positions may be specified using a graphics cursor if an
   image is already displayed. Alternatively, coordinates may be
   specified in response to parameter prompts, or they may be read
   from a text file (see parameter MODE).
2 Parameters
For information on individual parameters, select from the list below:
3 COORDS
COORDS = LITERAL (Read)
   Specifies the coordinate system used for referring to sky
   positions. Valid values include ECLIPTIC, EQUATORIAL,
   GALACTIC. See help on "Sky_coordinates" for more information
   on available sky coordinate systems.
                                   [current sky coordinate system]
3 DEVICE
DEVICE = DEVICE (Read)
   The graphics workstation.         [The current graphics device]
3 EPOCH
EPOCH = DOUBLE PRECISION (Read)
   The Julian epoch at which the supplied sky positions were
   determined. This is only used if sky coordinates supplied in a
   text file (in FILE mode) are stored in a coordinate system
   different to that specified by the COORDS parameter. In this
   case the epoch may be necessary to perform the conversion from
   one coordinate system to the other (depending on what the
   coordinate systems are). A value of 1983.5 is acceptable for
   all IRAS data.
3 FILE
FILE = FILENAME (Read)
   A file from which to read coordinates. This is only prompted
   for if parameter MODE has the value FILE. See the help on
   "Coordinate_files" for a description of the format required for
   this file.
3 IN
IN = NDF (Read)
   The NDF to which image coordinates relate. In CURSOR mode, the
   NDF will usually be identified using information stored in the
   AGI database, without the user needing to specify a value for
   parameter IN.
3 INSIDE
INSIDE =  (Write)
   An output parameter which is set TRUE if the last supplied
   position lies within the bounds of the NDF. The position must
   also be within the bounds of the AGI DATA picture if CURSOR
   mode is being used. It is set FALSE otherwise.
3 INVERSE
INVERSE = LOGICAL (Read)
   SKYPOS usually expects the user to supply image coordinates as
   input. The corresponding sky coordinates are then found and
   displayed. However, if INVERSE is true then the user should
   supply sky coordinates and the corresponding image coordinates
   are found and displayed.                                   [NO]
3 LAT
LAT = LITERAL (Read)
   A latitude of a position to be transformed, in the coordinate
   system specified by COORDS (eg if COORDS was EQUATORIAL, LAT
   should be given a Declination value). LAT is only prompted
   for if parameter MODE has the value KEYBOARD. See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.
3 LATOUT
LATOUT = LITERAL (Write)
   An output parameter to which is written the final displayed
   latitude, in the coordinate system specified by COORDS.
3 LOGFILE
LOGFILE = FILENAME (Write)
   The name of a text file to receive a copy of the displayed
   information. The run time default is for no log file to be
   produced. Log files are created in a format suitable for use
   with parameter FILE.                                        [!]
3 LON
LON = LITERAL (Read)
   A longitude of a position to be transformed, in the coordinate
   system specified by COORDS (eg if COORDS was EQUATORIAL, LON
   should be given a Right Ascension value). LON is only prompted
   for if parameter MODE has the value KEYBOARD. See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.
3 LONOUT
LONOUT = LITERAL (Write)
   An output parameter to which is written the final displayed
   longitude, in the coordinate system specified by COORDS.
3 LOOP
LOOP = LOGICAL (Read)
   If true then application does not exit when the final input
   position has been given. Instead, the user is allowed to
   change some of the parameter values and to continue to
   transform more positions. See parameter OPTION.            [NO]
3 MODE
MODE = LITERAL (Read)
   MODE specifies the source of input coordinates. It can take the
   following values;

   CURSOR - The graphics cursor is used to specify the positions.
   A DATA picture must previously have been created (eg a grey
   scale image or contour plot). The most recently created DATA
   picture contained within the current picture is used. The user
   is given instructions on the use of the cursor.

   FILE - The input positions are contained within the file
   specified by parameter FILE.

   KEYBOARD - The input positions are specified by parameters LON
   and LAT (if INVERSE is FALSE), or X and Y (if INVERSE is TRUE).
                                                          [CURSOR]
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen and
   logged to the log file. This should take one of the values
   QUIET, NORMAL or VERBOSE (see help on "Message_filtering").
                                  [current message filter setting]
3 OPTION
OPTION = LITERAL (Read)
   The action to perform once all positions have been processed.
   This is only prompted for if parameter LOOP is TRUE (otherwise
   a value of EXIT is assumed). It can take the following values;

   CONTINUE - Continue to process more positions using the current
   parameter settings.

   EXIT - Exit the application without processing any more
   positions.

   MODE - Change the value of the MODE parameter.

   MAPPING - Change the value of the INVERSE parameter.

   COORDINATES - Change the value of the COORDS parameter.

   PLOT - Change the value of the PLOT parameter.

   PEN - Change the value of the PEN parameter.

   Note, if MAPPING or COORDINATES is selected, then a new log
   file will be created (if logging has been requested using
   parameter LOGFILE) to ensure that each log file contains
   coordinates of a single type.
3 ORIENT
ORIENT = REAL (Write)
   An output parameter to which is written the position angle of
   the Y axis (in degrees) at the last displayed position. This
   may vary across an image due to projection effects.
3 PEN
PEN = INTEGER (Read)
   The SGS pen number used to draw the graphics specified by
   parameter PLOT.                                             [3]
3 PIXSIZE
PIXSIZE = REAL (Write)
   An output parameter to which is written a pair of values
   giving the pixel dimensions (in arc-minutes) at the last
   displayed position. These may vary across an image due to
   projection effects.
3 PLOT
PLOT = LITERAL (Read)
   Specifies the sort of graphics which are to be used to mark the
   positions selected in cursor mode. PLOT can take any of the
   values POLY,MARK,NONE. POLY causes a polygonal line to be drawn
   between the selected points, MARK causes a cross to be drawn at
   each point, NONE causes no graphics to be produced. The
   graphics are produced on the device specified by parameter
   DEVICE, using the pen specified by parameter PEN.        [MARK]
3 SINGLE
SINGLE = LOGICAL (Read)
   If TRUE, then the application normally exits after the user
   has given a single input position. If parameter LOOP is TRUE
   then the user may continue to give further single positions.
                                                              [NO]
3 X
X = REAL (Read)
   An X image coordinate of a position to be transformed. X is
   only prompted for if parameter MODE has the value KEYBOARD.
3 XOUT
XOUT = REAL (Write)
   An output parameter to which is written the final displayed
   X image coordinate.
3 Y
Y = REAL (Read)
   A Y image coordinate of a position to be transformed. Y is
   only prompted for if parameter MODE has the value KEYBOARD.
3 YOUT
YOUT = REAL (Write)
   An output parameter to which is written the final displayed
   Y image coordinate.
2 Examples
SKYPOS LOGFILE=STARS.DAT
   This displays a cursor on top of the most recently created
   DATA picture (within the current picture). The user may then
   repeatedly select points, and the image and sky coordinates of
   each point are displayed on the terminal. Giving a point
   outside the picture causes the application to terminate. The
   coordinates are also recorded in a log file called STARS.DAT.

SKYPOS MODE=FILE IN=STARFIELD FILE=STARS.DAT LOOP INVERSE
   This reads a list of sky coordinates from text file STAR.DAT
   and displays the corresponding image coordinates (within NDF
   STARFIELD) on the terminal. Once all the positions included in
   STAR.DAT have been processed, the user is prompted for further
   action using parameter OPTION. The user may choose (for
   instance) to continue selecting more positions using the
   cursor.

SKYPOS SINGLE MSG_FILTER=QUIET
   This allows the user to indicate a single point on a displayed
   DATA picture using the cursor, and the application then
   immediately exits. No coordinates (or other information) are
   displayed on the screen, but the sky coordinates of the
   selected position are written to output parameters LONOUT and
   LATOUT for use by subsequent applications.
2 Notes
-  When converting from image to sky coordinates, the displayed
sky coordinates correspond to the displayed image coordinates
which have been rounded to one decimal place, not to the original
supplied image coordinates before rounding.

-  If the current message filtering level (see parameter
MSG_FILTER) is VERBOSE, then additional information is displayed
on the screen for each position, describing the position angle of
the Y axis and the pixel dimensions. These can vary across an
image because of projection effects. The last displayed values
are written to the output parameters ORIENT and PIXSIZE.
2 Authors
DSB: David Berry (STARLINK)

WG: Wei Gong (IPMAF)
2 History
 29-JAN-1993 (DSB):
    Original version, based on SKYPOSITION by WG.

 23-AUG-1993 (DSB):
    Parameter XOUT and YOUT added.

 22-SEP-1993 (DSB):
    Parameters ORIENT and PIXSIZE added, and display of Y axis
    position angle and pixel dimensions included.

 1-OCT-1993 (DSB):
    Parameter INSIDE added.
1 SKYWRITE
Write text strings at specified positions.

Usage:

   SKYWRITE DEVICE IN

Description:

   This routine provides users with facilities to write text
   strings at specified positions within the most recently created
   DATA picture. Particularly, it can:

      1. Write text strings at the sky positions specified by
      parameters.

      2. Write text strings at the sky positions specified within
      a text file.

      3. Write text strings at the cursor position.

   The attributes of the text, that is, the direction, the height,
   the aspect ratio, the justification, the font and the colour, can
   be set using various parameters.

   In interactive mode (cursor or keyboard), the application will
   keep prompting the user for the specifications of the next text
   string and/or position until a null response is obtained.

   In non-interactive mode, an input text file is required which can
   be the output of a previous run of this routine or can be created
   by the user. The format of this file is described in the "Notes:"
   section.

   After getting a null reponse when in interactive mode, or
   finishing writing in the non-interactive mode, the application
   will exit by default. But users can choose to use the application
   in a even greater loop, invisible to users by default, in which
   users can interactively and/or non-interactively write texts,
   change working mode, set new text attribute, save the information
   of present writing into a text file for later use and erase the
   last writing, etc., see parameter LOOP.
2 Parameters
For information on individual parameters, select from the list below:
3 ATTRIBUTE
ATTRIBUTE = LITERAL (Read)
   This parameter is used to specify which attribute of the text
   is to be set. It takes the following values:

    DIRECTION - Set the text 'up' direction.

    HEIGHT - Set the text height.

    ASPECT RATIO - Set aspect ratio (width/height) of the
    characters in the text.

    JUSTIFICATION - Set the text justification.

    SPACE - Set the space between characters in the text.

    FONT - Set the font for the text.

    PEN - Set the text colour.

    DEFAULT - Select the default settings for all text attributes.

    SHOW - Show the current text attribute settings.

   The application will keep prompting for more attributes until
   DEFAULT, or a null value is supplied.                 [DEFAULT]
3 CLEAR
CLEAR = LOGICAL (Read)
   True if the area of the graphics device over which the text is
   to be written should be cleared before writing commences.  [NO]
3 COORDS
COORDS = LITERAL (Read)
   Specifies the sky coordinate system to use. Valid values
   include ECLIPTIC, EQUATORIAL, GALACTIC. See help on
   "Sky_coordinates" for more information on available sky
   coordinate systems.
                                   [current sky coordinate system]
3 DEVICE
DEVICE = DEVICE (Read)
   The plotting device.     [Current image-display-overlay device]
3 DIRECTION
DIRECTION = Real (Read)
   A pair of values specifing character orientation in terms of a
   vector. Only the direction of the vector is significant. On
   entry, the text up direction is set as upwards, that is (0,1).
3 EPOCH
EPOCH = DOUBLE PRECISION (Read)
   The Julian epoch at which the supplied sky positions were
   determined. This is only used if sky coordinates supplied in a
   text file (in FILE mode) are stored in a coordinate system
   different to that specified by the COORDS parameter. In this
   case the epoch may be necessary to perform the conversion from
   one coordinate system to the other (depending on what the
   coordinate systems are). A value of 1983.5 is acceptable for
   all IRAS data.                                         [1983.5]
3 FILE
FILE = LITERAL (Read)
   The name of the text file containing specifications of the
   text strings to be written.
3 FONT
FONT = INTEGER (Read)
   Font number of the text string. See GKS user guide for details
   about the available fonts.
3 HEIGHT
HEIGHT = REAL (Read)
   Specifies the height of the character in the text string. It
   should be given as the fraction of the horizontal dimension of
   the displayed image. On entry, it is 0.02, that is, 1/50 of
   the width of the displayed image.
3 IN
IN = NDF (Read)
   The NDF from which to read the astrometry information. This
   will usually be the NDF holding the displayed image. A null
   value will cause the astrometry to be located using
   information stored within the AGI database. If this cannot be
   done, then the user will be re-prompted for an NDF using
   parameter IN.  If a section of an NDF is specified, the curves
   are only drawn over the specified section of the picture.   [!]
3 JUST
JUST = LITERAL (Read)
   Specifies the disposition of the text string with respect to
   the given position on the displayed image. The first character
   of JUST should be one of B, C and T, specifies whether the
   given position is to lie on the bottom, centre, or top edge of
   the string. The second should be one of L, C and R and
   specifies whether the given position is lie on the left,
   centre or right edge of the string. Only first two characters
   in JUST will be used. On entry it is set to 'BC'.
3 LAT
LAT = LITERAL (Read)
   The latitude at which a text string is to be written, in the
   coordinate system specified by COORDS (eg if COORDS was
   EQUATORIAL, LAT should be given a Declination value).  See
   help on "Sky_coordinates" for more information on available
   sky coordinate systems.
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of the log text file containing the information
   about the written text strings. See the NOTES section about
   the format of this file.
3 LON
LON = LITERAL (Read)
   The longitude at which a text string is to be written, in the
   coordinate system specified by COORDS (eg if COORDS was
   EQUATORIAL, LON should be given a Right Ascension value).  See
   help on "Sky_coordinates" for more information on available
   sky coordinate systems.
3 LOOP
LOOP = LOGICAL (Read)
   If true then the routine does not exit when the final text
   string has been written. Instead, the user is allowed to
   modify the current drawing by selecting from the options
   provided by parameter OPTION.                              [NO]
3 MODE
MODE = LITERAL (Read)
   The source from which text string specifications are obtained.

   CURSOR - All positions are specified by cursor. This mode will
   only be available on graphic devices which support cursors.

   KEYBOARD - Positions are specified in response to parameter
   prompts, using the keyboard.

   FILE - Strings are drawn according to the specifications
   contained within a text file (see parameter FILE). This is
   referred to as "non-interactive" mode. The run-time default is
   CURSOR if a cursor is available, and KEYBOARD otherwise.     []
3 MSG_FILTER
MSG_FILTER = LITERAL (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").  [current message filter setting]
3 OPTION
OPTION = LITERAL (Read)
   The action to take once all strings have been written. It can
   take following values:

    CONTINUE - Continue to draw further text strings.

    MODE - Change the source from which further text string
    specifications will be obtained.

    ATTRIBUTES - Set the attributes of any further text strings to
    be written.

    SAVE - Save information describing the text strings written so
    far to a text file.

    ERASE - Erase the last writen text string.

    EXIT - Exit the application.

   This parameter is only prompted for if parameter LOOP has a
   true value.
3 PEN
PEN = INTEGER (Read)
   Pen number used to write the texts. On entry the pen number is
   set to 3.
3 RATIO
RATIO = REAL (Read)
   Specifies the aspect ration (Width/Height) of the charactors
   in the text string. On entry it is set to 2/3.
3 SPACE
SPACE = REAL (Read)
   The space between characters in text strings, as a fraction of
   the width of a character. On entry it is set to 0 which means
   no extra space between characters and results in the text
   being of normal appearance. It can be negative which results
   in the characters overlapping.
3 TEXT
TEXT = LITERAL (Read)
   The text string to be written at a specified position.
2 Notes
-  The strings are drawn within the current picture only if it is
a DATA picture, otherwise strings are drawn in the last DATA
picture to be created within the current picture.

-  The astrometry information used to position the strings is
located using the following search path:

   o  Firstly, astrometry information is looked for in any NDF
   specified on the command line using parameter IN.

   o  Secondly, astrometry information is looked for in any MORE
   structure associated with the AGI picture.

   o  Thirdly, astrometry information is looked for in any
   reference object associated with the AGI picture.

   o  If all else fails, the value of the IN parameter is
   cancelled, and the user is prompted for the NDF containing
   relevant astrometry information.

-  This routine can only be used to display strings over NDFs
which contain astrometry information in the form used by the
IRAS90 package.

- The format of input and output text files is:

   o The file is divided into comments and fields. Comments
   consist of strings commencing with a "#" character, and are
   considered to extend to the end of the line. Such comments are
   ignored. Fields are strings which specify any of the items of
   information described below. Each line in the file may contain
   any number of fields, multiple fields being separated by
   commas. Blank lines or fields are ignored.

   o The first field should give the name of the sky coordinate
   system used (see help on "Sky_coordinates").

   o There should then follow a block of fields defining the text
   strings to be written and the positions at which to write
   them. A position and text string takes three consecutive
   fields. The first and second fields are the longitude and
   latitude of the position. The third field is the string to be
   written to the position. The string may be delimited by single
   or double quote marks, which will be ignored. If a blank string
   is to be written, it MUST be delimited by quote marks.

   o Fields containing the key words DIRECTION, HEIGHT, ASPECT
   RATIO, JUSTIFICATION, FONT, SPACE, PEN and DEFAULT set up the
   attributes to be used for writing any remaining text strings.
   Keywords can be abbreviated, and are case insensitive.

   o A field containing the keyword DIRECTION should be followed
   by two fields giving the direction vector of the text with X
   component first, and Y component second.

   o A field containing the keyword HEIGHT should be followed by
   a single field giving the text height.

   o A field containing the keyword ASPECT RATIO should be
   followed by a single field giving the character aspect ration
   (width/height).

   o A field containing the keyword JUSTIFICATION should be
   followed by a single field giving the disposition of the text
   string with respect to the specified position.

   o A field containing the keyword FONT should be followed by a
   single field giving the font number.

   o A field containing the keyword SPACE should be followed by a
   single field giving the space between characters.

   o A field containing the keyword PEN should be followed by a
   single field giving the pen number.

   o A field containing the keyword DEFAULT causes the default
   text attributes to be re-established.
2 Authors
WG: Wei Gong (IPMAF)
2 History
 21-AUG-1992 (WG):
    Original version.
1 TRACECRDD
Display detector data streams from a CRDD file.

Usage:

   TRACECRDD NDF DETS XLIMIT YLIMIT

Description:

   This routine displays a set of vertically displaced traces
   representing the data from selected detectors in a specified CRDD
   file. Many normally defaulted parameters provide control over the
   content and layout of the display. Some of the other features
   provided include:

   -  The ability to loop round, re-drawing the display with
   modified parameter values until the required effect is produced,
   or using any of the other features listed below.

   -  The ability to use a graphics cursor to read sample values and
   positions from the display.

   -  The ability to overlay standard point source profiles on top of
   sources visible in the data traces.

   -  The ability to assign a "quality" to samples selected using
   a graphics cursor (see help on "Quality_in_IRAS90" for more
   information about the use of quality in IRAS90).

   Some of these features may be controlled using a primative
   "Graphical User Interface".
2 Parameters
For information on individual parameters, select from the list below:
3 COMMENT
COMMENT = LITERAL (Read)
   A comment to store with a quality name. This parameter is used
   if the quality specified by parameter QNAME is not currently
   defined within the input NDF.
3 COORDS
COORDS = LITERAL (Read)
   Specifies the coordinate system used when displaying sample
   positions. Valid values include ECLIPTIC, EQUATORIAL,
   GALACTIC. See help on "Sky_coordinates" for more information
   on available sky coordinate systems.
                                   [current sky coordinate system]
3 CURSOR
CURSOR = _LOGICAL (Read)
   If a true value is supplied, then the "Graphical User
   Interface" will be used (if possible). Otherwise, a parameter
   interface will be used.                                 [FALSE]
3 DATA
DATA = _REAL (Write)
   This is an output parameter to which is written the last data
   value displayed using the "Get Data Value" option (selected
   using parameter NEXT or through the "Graphical User
   Interface").
3 DATDET
DATDET = _INTEGER (Write)
   This is an output parameter to which is written the last
   detector number displayed using the "Get Data Value" or "Draw
   Point Source" options (selected using parameter NEXT or
   through the "Graphical User Interface").
3 DETS
DETS = LITERAL (Read)
   A group of detector numbers, selected from those available in
   the IRAS waveband of the data contained in the input CRDD
   file. The display includes traces for each of these detectors.
   See help on "Specifying_detectors" for more information on
   specifying groups of detector numbers. The suggested default
   consists of all the detectors which pass within the range of
   cross scan distances given by parameter XSCAN (the cross scan
   distance is the minimum distance between the detector track and
   the CRDD file reference point). If no detectors fall in this
   range then all detectors are included in the suggested default
   value.
3 DEVICE
DEVICE = DEVICE (Read)
   The plotting device.                  [Current graphics device]
3 HISTORY
HISTORY = _LOGICAL (Read)
   Determines if history information is to be added to the NDF in
   the event of the "Assign Quality" option being selected using
   the parameter NEXT or through the "Graphical User Interface".
   See help on "History_in_IRAS90" for more information on
   history.                              [current history setting]
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of a text file to which the results of the "Get Data
   Value" and "Draw Point Source" options (selected using
   parameter NEXT or through the "Graphical User Interface") will
   be written. No file is created if these options are not used,
   or if a null value is supplied.                             [!]
3 LOOP
LOOP = LOGICAL (Read)
   If a false value is supplied, the application produces the
   display and then returns immediately without allowing the user
   to use any of the additional features. If a true value is
   supplied, then the user may repeatedly re-draw the display
   with different parameter values, or use any of the other
   features selected by parameter NEXT, or through the "Graphical
   User Interface".                                         [TRUE]
3 MSG_FILTER
MSG_FILTER = INTEGER (Read)
   The level of information displayed on the users screen. This
   should take one of the values QUIET, NORMAL or VERBOSE (see
   help on "Message_filtering").  [current message filter setting]
3 NDF
NDF = NDF (Update)
   The NDF holding the CRDD to be displayed. This is updated by
   any new quality assignments made using the "Assign Quality"
   option selected using parameter NEXT or through the "Graphical
   User Interface".
3 NEXT
NEXT = LITERAL (Read)
   Specifies the action to be performed once the initial display
   has been produced. If parameter LOOP has a false value, this
   parameter is ignored. It can take the following values (or any
   un-ambiguous abbreviation):

      QUIT - Leave the application.

      REDRAW DISPLAY - Re-draw the display.

      CHANGE PARAMETERS - Change some of the parameters which
      determine the appearance of the display.

      GET DATA VALUE - Get the values and positions of samples
      selected using the graphics cursor.

      DRAW POINT SOURCE - Display a standard point source template
      overlayed on the display at a position specified either by
      the graphics cursor or by parameters SRCDET, SRCPSN and
      SRCPEAK.

      ASSIGN QUALITY - Assign a nominated quality to samples
      selected using the graphics cursor.

   If the "Graphical User Interface" is being used (see parameter
   CURSOR), then the parameter NEXT is not used, but these
   options can be selected from a menu using the graphics cursor.
3 OFFSET
OFFSET = _REAL (Read)
   This parameter specifies an array of offsets by which each
   trace is to be vertically displaced in the display. It is only
   used if the parameter SPACE is given the value FREE.
3 OMIT
OMIT = LITERAL (Read)
   A group expression specifying objects to be omitted from the
   display. Any combination of the following items can be
   specified:

      IN-LINE - The in-line detector number labels plotted within
      a gap in each data trace.

      LABEL_X - The X axis label.

      LABEL_Y - The Y axis label.

      SCANDIR - The scan direction indicator.

      MARKS_RHS - The right hand detector offset markers.

      MARKS_LHS - The left hand detector offset markers
      (including detector numbers).

      TABLE - The table of detector offsets.

      REF_POS - The description of the reference position.

   In addition the string NOTHING can be given to indicate that
   no sections should be omitted from the display (a null value
   has the same effect).  Section names can be abbreviated. If an
   ambiguous abbreviation is supplied, than all sections matching
   the abbreviation are omitted from the display. Thus, for
   instance, the string "M" would cause both left and right hand
   markers to be omitted.                                [NOTHING]
3 PARAM
PARAM = LITERAL (Read)
   Specifies which aspect of the display is to be modified if the
   "Change Parameters" option is selected using parameter NEXT.
   It can take the following values (or any un-ambiguous
   abbreviation):

      REDRAW DISPLAY - Redraw the display using the new parameter
      values.

      DET# - Change the detectors which are displayed by giving a
      list of detector numbers. This also causes new Y limits and
      trace offsets to be calculated and used. New detectors may
      also be selected using the CROSS SCAN option.

      DEVICE - Change the graphics device. The display is redrawn
      immediately if this option is selected.

      X LIMIT - Change the limits of the X axis of the display.
      This also causes new Y limits and trace offsets to be
      calculated and used.

      Y LIMIT - Change the limits of the Y axis of the display.
      This causes new trace offsets to be calculated and used.

      TITLE - Change the title displayed at the top of the
      display.

      COMMAND SOURCE - Toggles between the "Graphical User
      Interface" and the parameter interface as the means of
      getting commands.

      OFFSET METHOD - Change the offsets by which each trace is
      displaced vertically in the display.

      DISPLAY STRUCTURE - Select a list of features to be omitted
      from the display.

      QUALITY EXPRESSION - Only display samples which satisfy a
      given quality expression.

      CROSS SCAN - Change the detectors which are displayed by
      giving a maximum cross scan distance. This also causes new
      Y limits and trace offsets to be calculated and used. New
      detectors may also be selected using the DET# option.

   If the "Graphical User Interface" is being used (see parameter
   CURSOR), then the parameter PARAM is not used, but these
   options can be selected from a menu using the graphics cursor.
3 PEAK
PEAK = _REAL (Write)
   This is an output parameter to which is written the last
   source peak value displayed using the "Draw Point Source"
   option (selected using parameter NEXT or through the
   "Graphical User Interface").
3 PROFILES
PROFILES = NDF (Read)
   An NDF holding in-scan point source profiles to be used by the
   "Draw Point Source" option selected using parameter NEXT or
   through the "Graphical User Interface". The default value is
   the files "profiles.sdf" contained in the main IRAS90
   directory, which contains profiles taken from the IRAS Catalogs
   and Atlases Explanatory Supplement, page V-14.               []
3 PTITLE
PTITLE = LITERAL (Read)
   A title for the top of the display. The run time default value
   is the input NDF name.                                       []
3 PXSIZE
PXSIZE = _REAL (Read)
   The horizontal size of the display in metres. If a value less
   than the default is requested, the the display will appear at
   the bottom left of the current device.                       []
3 PYSIZE
PYSIZE = _REAL (Read)
   The vertical size of the display in metres. If a value less
   than the default is requested, then the display will appear at
   the bottom left of the current device.                       []
3 QEXP
QEXP = LITERAL (Read)
   A quality expression giving the quality of samples which are
   to be included in the display. See help topic
   "Quality_in_IRAS90" for information about the use of quality.
   A value of "ANY" causes all samples to be used, without regard
   to quality.                                               [ANY]
3 QNAME
QNAME = LITERAL (Read)
   The quality name to be assigned to the selected samples in the
   event of the "Assign Quality" option being selected (by the
   parameter NEXT or through the "Graphical User Interface").  If
   the supplied name is not already defined within the input NDF,
   then a definition of the name is added to the NDF. The user is
   warned if the quality name is already defined within the NDF.
3 SCNPSN
SCNPSN = _REAL (Write)
   This is an output parameter consisting of an array of two
   values. The first is the last in-scan position and the second
   is the last cross-scan position displayed using the "Get Data
   Value" or "Draw Point Source" options (selected using parameter
   NEXT or through the "Graphical User Interface").
3 SKYPSN
SKYPSN = _DOUBLE (Write)
   This is an output parameter consisting of an array of two
   values. The first is the last sky longitude and the second
   is the last sky latitude displayed using the "Get Data
   Value" or "Draw Point Source" options (selected using parameter
   NEXT or through the "Graphical User Interface"). Both values
   are in radians.
3 SPACE
SPACE = LITERAL (Read)
   Specifies the method by which the vertical offset for each
   detector trace is to be found. It can take any of the following
   values (or any un-ambiguous abbreviation):

      FREE - The user specifies the offsets explicitly using
      parameter OFFSET.

      CONSTANT - The offset markers are evenly spaced along the
      display Y axis. This results in the actual traces not being
      evenly spaced unless the input data has been destriped.

      AVERAGE - The offset markers are spaced so that the average
      data value in each traces are evenly spaced. Thus the traces
      are evenly spaced but the offset markers may not be.
                                                         [AVERAGE]
3 SRCDET
SRCDET = _INTEGER (Read)
   The detector number specifying the trace on which a point
   source template is to be overlayed. This parameter is only
   used if no graphics cursor is available.
3 SRCPEAK
SRCPEAK = _REAL (Read)
   The peak value of the point source template to be overlayed (in
   the same units as the Y axis). This parameter is only used if
   no graphics cursor is available.
3 SRCPSN
SRCPSN = _REAL (Read)
   The in-scan positions (in arc-minutes) at which a point source
   template is to be overlayed. This parameter is only used if no
   graphics cursor is available.
3 UNITS
UNITS = LITERAL (Read)
   The units in which the data values are to be displayed. See
   help on "Data_units" for a list of the available units.    [Jy]
3 XLIMIT
XLIMIT = _REAL (Read)
   The upper and lower limits of the X axis, in arc-minutes. The
   origin of the X axis is the position of closest approach to
   the reference position specified within the input CRDD file.
   The suggested default values include all the data in the input
   NDF.
3 XNAME
XNAME = LITERAL (Read)
   If the NDF already contains any quality name definitions then
   new quality names are put in the same extension as the old
   names. If no previous quality names have been stored in the
   NDF then parameter XNAME will be used to obtain the name of an
   NDF extension in which to store new quality name. The
   extension will be created if it does not already exist (see
   parameter XTYPE).                               [QUALITY_NAMES]
3 XSCAN
XSCAN = REAL (Read)
   A range of cross-scan distance (in arc-minutes) from the CRDD
   file reference point to be used when selecting the list of
   detectors. If only a single value is supplied, the limits are
   considered to be equal and opposite.                     [-5,5]
3 XTYPE
XTYPE = LITERAL (Read)
   If a new NDF extension is created to hold quality names (see
   parameter XNAME), then parameter XTYPE is used to obtain the
   HDS data type for the created extension. The run time default
   is to give the extension a type identical to its name.       []
3 YLIMIT
YLIMIT = _REAL (Read)
   The upper and lower limits of the Y axis, in the units
   specified by parameter UNITS.
2 Examples
TRACECRDD CENA_B1S3
   This command would display traces from the CRDD file CENA_B1S3.
   The user is prompted for parameters DETS, XLIMIT and YLIMIT
   before the traces are drawn. After the traces have been drawn
   the user is prompted for parameter NEXT which gives options for
   re-drawing the display with different parameter values, using
   the cursor to get data values from the display, etc.

TRACECRDD CENA_B1S3 DEVICE=CANON NOLOOP \
   This is like the previous example except that the NOLOOP
   keyword causes the application to terminate as soon as the
   display has been drawn, and the output goes to a Canon laser
   printer. Note, the "\" character causes the suggested defaults
   for parameters DETS, XLIMIT and YLIMIT to be accepted without
   prompting the user. This sort of command is useful if a plot
   is to be produced in a situation in which there is no user to
   interact with (eg from a batch job). The statement NEXT=QUIT
   is equivalent to the NOLOOP keyword.

TRACECRDD CENA_B1S3 CURSOR QEXP=FRED.AND.TOM
   This causes the "Graphical User Interface" to be used for
   obtaining values for the parameters NEXT and PARAM, rather than
   the keyboard. In addition, only those samples which have both
   the qualities FRED and TOM are displayed.
2 The_Display
   The contents of the display can be controlled using the parameter
   OMIT. This allows various parts of the display to be optionally
   omitted.

   The main item in the display is the rectangular area containing
   the actual data traces (the "data area"). The bottom edge of this
   rectangle has a scale indicating distance along the scan in
   arc-minutes. The value zero is assigned to the point in the scan
   which is closest to the reference position of the input CRDD
   file. This reference position is displayed to the left of the
   data area. The extent of this scale is determined by parameter
   XLIMIT.

   The right hand edge of the data area has a scale indicating data
   value. The units of this scale are specified by the parameter
   UNITS, and its extent is specified by parameter YLIMIT.

   The detectors from which data is to be displayed are specified
   using parameter DETS. The data traces are offset vertically
   within the data area, and are shifted horizontally so that the
   "mis-alignment" caused by the detectors being at varying in-scan
   positions within the focal plane, is removed. The detector
   corresponding to each trace is indicated by means of an "in-line
   label" towards the left end of the trace. If the default KAPPA
   pallette is in effect, the in-line labels will be green (on
   colour devices). Only those samples which satisfy the quality
   expression given by parameter QEXP are included in the traces.
   Bad or missing sample values are indicated by gaps in the traces.
   The base level for each trace is indicated by a pair of "offset
   markers", one on each of the vertical edges of the data area.
   These offset markers are short green horizontal lines placed at
   the position which corresponds to zero flux for the trace to
   which they refer (the detector number to which the offset markers
   refer is displayed just above the left hand offset marker).

   The data area is surrounded by a "frame area" containing
   annotation of various types. This includes a title above the data
   area specified by parameter PTITLE. The X axis label is fixed, and
   the Y axis label indicates the units used on the Y axis.

   The traces are always drawn such that the end of the scan which is
   closest to the southern ecliptic pole is at the left, and this is
   indicated by annotations "South" and "North" at the left and right
   ends of the bottom edge of the data area. An arrow placed between
   these annotations indicates the direction in which the scan was
   taken (south to north or north to south). The arrow indicates the
   direction of increasing time (i.e a sample at the blunt end of
   the arrow was taken earlier than one at the sharp end).

   A table of detector offsets is displayed to the left of the data
   area. This lists the offsets of each displayed trace. So to
   determine a sample value by eye, one would read off the data value
   from the scale on the left hand edge of the data area, and then
   subtract the offset for the detector listed in the offset table.
   In fact it is much easier to use the "Get Data Value" option to do
   this! (see parameter NEXT). The table also lists the "cross scan
   distance" of each trace. This is the offset (in arc-minutes) from
   the CRDD file reference position to the detector track (positive
   in the same sense as the focal plane Z coordinate).

   All graphics are produced within the sub-region of the current
   AGI picture, specified by parameters PXSIZE and PYSIZE (by default
   the entire picture is used). Two new pictures are created within
   the AGI database; a DATA picture corresponding to the data area,
   and a FRAME picture corresponding to the frame area.
2 Modifying_Parameter_Values
   The default parameter values usually produce a reasonable
   display.  However there may be some situations in which
   parameters need to be changed, for instance to "zoom in" on a
   particular feature of interest, to change the graphics device, or
   to omit sections of the display prior to producing a hard copy.
   If the parameter LOOP is given a true value (which is the
   default), the user is asked to specify a further action once the
   display has been produced (see parameter NEXT). One option is
   "Change Parameters". This allows several of the parameters which
   determine the appearance of the display to be changed before
   redrawing the display. The parameter to change is specified by
   giving an appropriate value for the parameter PARAM.
2 Getting_Sample_Values_and_Positions
   Sample values and positions can be estimated by eye from the
   display, but it is generally easier and more accurate to use a
   graphics cursor. This can be done by taking the "Get Data Value"
   option (specified by the parameter NEXT or through the "Graphical
   User Interface"). If the current graphics device has a cursor,
   the user is asked to position the cursor at the point of
   interest. The user does not need to position the cursor exactly
   on a trace; the closest trace will always be used. Various items
   of information are then displayed about the selected point; the
   sample value (without the offset used to vertically displace the
   traces), the sample coordinates (in the coordinate system
   specified by parameter COORDS), the sample number, detector
   number, NDF row number and in-scan position.  The user may then
   give another position. Control returns to the application when
   the user gives a position which lies outside the data area.

   The information displayed by this option is logged to the text
   file specified by parameter LOGFILE, and is also written to the
   output parameters DATA, DATDET, SCNPSN and SKYPSN.
2 Overlaying_Point_Source_Profiles
   An NDF containing four standard point source profiles (one for
   each wave band) is distributed with IRAS90. These profiles are
   taken from the IRAS Catalogs and Atlases Explanatory Supplement
   (page V-14). They may be displayed at any point within the data
   area in order to compare a feature in the data with a point
   source. This is done by selecting the "Draw Point Source" option
   for parameter NEXT or through the "Graphical User Interface". The
   user is then requested to place the graphics cursor at the
   position at which the peak of the profile should be put. A sloping
   background is then estimated from the neighbouring data in the
   closest trace, and the profile is drawn (in red assuming the
   standard KAPPA pallette is in use) so that the peak is at the
   requested position and the zero level corresponds to the local
   background in the data. The position and peak value of the source
   is then displayed, and the user is asked to repeat the process
   until a position outside the data area is given.

   The information displayed by this option is logged to the text
   file specified by parameter LOGFILE, and is also written to the
   output parameters PEAK, DATDET, SCNPSN and SKYPSN.

   If the graphics device has no cursor, then the position of the
   peak may be specified by parameters SRCDET, SRCPSN, and SRCPEAK.
   If for any reason the user wishes to display profiles other than
   those taken from the Explanatory Supplement, then a copy of the
   file "profiles.sdf" (contained in the main IRAS90 directory)
   should be taken and suitable modifications made.  The modified
   file may then be given for parameter PROFILES.
2 Assigning_a_Quality_to_Selected_Samples
   A general introduction to the use of quality is described in the
   help topic "Quality_in_IRAS90". TRACECRDD provides a means of
   assigning nominated qualities to samples in a CRDD file selected
   using a graphical interface. To do this the user should select
   the "Assign Quality" option for the parameter NEXT (or through
   the "Graphical User Interface"). The user is then asked to
   position the graphics cursor to indicate two diagonally opposite
   corners of a box on the display. A quality name is then obtained
   using parameter QNAME and this quality is assigned to all the
   samples which fall within the box defined by the two corner
   positions.  Note, the input CRDD file is updated rather than a
   new output CRDD file being created). The samples to which the
   quality is assigned are highlighted in the display by being
   re-drawn in red (assuming the default KAPPA pallette is in use).
   If the quality name is not defined in the CRDD file then a
   definition is created, including a comment string given by
   parameter COMMENT. If necessary, an extension is created within
   the NDF to hold the quality name. The HDS name and type of this
   extension are given by parameters XNAME and XTYPE.
2 The_Graphical_User_Interface
   By default, the user selects options by assigning suitable values
   to the parameters described in the "ADAM parameters" section.
   Alternatively, a primative form of "Graphical User Interface" (GUI)
   can be used for selecting the options normally determined by
   parameters NEXT and PARAM. This alternative is only available if
   the graphics workstation has a graphics cursor and also has the
   facility for clearing sub-regions of the display. If this is the
   case, the user may select the GUI either by giving the parameter
   CURSOR a true value on the command line, or by selecting the
   "Command Source" option for the parameter PARAM.

   The GUI provides the user with menus of options displayed on the
   graphics display as a series of boxes, each containing a
   description of an option. The user selects an option by
   positioning the cursor over a box and pressing any key. The menu
   is erased once a valid choice has been made. The parameter
   interface can be reinstated by selecting the "Command Source"
   option from the menu produced by selecting the "Change Parameters"
   option.
2 Authors
WG: Wei Gong (IPMAF)

DSB: David Berry (STARLINK)
2 History
 5-APR-1991 (WG):
    Original version.
    (Based on the INTERIM version CRDDTRACE by DSB )

 18-NOV-1992 (DSB):
    Modified for inclusion in the IRAS90 release (quality
    assignment, OMIT parameter, re-write of prologue, etc).
