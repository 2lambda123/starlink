0 STARMAN_HELP_M
   Welcome to the Starman online help.

 Subject               Access           Subject            Access
 -------               ------           -------            ------
 Guide to usage        'guide'          Help               'help'
 Menu of programs      'menu'           Parameters         'parameters'
 Introduction          'intro'          Screen             'screen'
 Running programs      'running'        Batch Jobs         'batch'
 How to do Photometry  'photometry'     Image handling     'images'
 Run through           'run_through'    Table handling     'tables'
 Photometry Run        'phot_run_thru'  Using KAPPA        'kappa'
 Demonstration         'demo'           Programming guide  'programmer'
 Getting started       'starting'       Version            'version'
 Examples              'examples'       Author             'author'

 Programs:-                   Source code - 'source'
 Photometry - 'phot_progs'    Image - 'im_progs'    Table -'tb_progs'        
1 Author

  This was all written by me, Alan Penny.

  With considerable help by Pat Morris, especially in the last
  four years, including with the conversion to Unix, and the
  making of a `stand-alone' Fits version

  It has acknowledgements from many people over the years:-

  John Pilkington of RGO introduced me to 2-D Gaussian profile fitting
  for stellar photometry.
  Rakos of Vienna was the source of the basic Lorentz profile.
  Rodney Warren-Smith was the author of a table-handling system
  which was the starting point for the one used here.
  Gordon Robertson of the AAO helped me with extending the Lorentzian
  to 2-D.
  Bill Sparks of STScI suggested the base algorithm for Starfind.
  Kenneth Mighell of ESO was the inspiration for the base idea for one
  of the speed-ups done for in Measure and Profile.
  Peter Stetson of DAO was the inspiration for the base idea for Tbtran_auto.

  RGO 1971-1985; SAAO 1972-75 & 1978-81; RAL 1986; STScI 1986 - 1988;
  RAL 1988-
1 Batch

 To run Starman programs as batch jobs, consult the ADAM manual.
1 Demo

  There is one main demonstration program, `starmandemo'. This
  is actually a script which has four options for automatically
  running through a simple series of Starman programs. This is 
  decribed below. 

  One can also write your own shell scripts to do this in the
  C Shell, or in the ICL system. This is decribed below. 

2 Starmandemo

  Runs four demonstrations:-
    1) Runs from a test data image to mag list
    2) Runs from 2 test data images to CMD diagram
    3) Runs from a user image to mag list
    4) Runs from 2 user images to CMD diagram

3 demo1

    
  ***********************************************************  
  This script will take an image of a star field 
  and automatically find the stars, measure their PSFs, and measure  
  the stars.  
    
  The image is in file $STARMAN_DATA/stars_v.sdf. This is copied  
  into the present directory. 
    
   A number of files called temp_* are created and destroyed 
   when running this demonstration. 
    
  Files prof_XXX1.sdf, mag_XXX1.sdf, clean_XXX1.sdf are created 
    where XXX1 is the name of the input file, and 
    the prof_ files conatin the profile (in Starman terms), 
    the mag_ files contains Starman tables with the results, and 
    the clean_ files contain copies of the cleaned images. 
    
  Use tblist and tbsheet to look at the tables, 
      imflash and interact to look at the images 
    
  ***********************************************************  
    

    
  STARTING - copying image from Starman test data directory 
  Commands:  cp $STARMAN_DATA/stars_v.sdf ./. 
             set file1 = stars_v  
    

 cp $STARMAN_DATA/stars_v.sdf ./.
 set file1 =  stars_v 

    
  DONE copying - doing starfind - to find all stars 
  Command:    starfind $file1 radius=2 out=temp_xy_1 \\ 
    

 starfind $file1 radius=2 out=temp_xy_1 \\

    
  DONE STARFIND - doing tbsort - to sort with bright ones first 
  Command:    tbsort temp_xy_1 numcol=3 option='descending' \ 
                     out=temp_xy_1_a \\ 
    

 tbsort temp_xy_1 numcol=3 option='descending' out=temp_xy_1_a \\

    
  DONE TBSORT - doing tbcut - to get brightest stars 
  Command:    tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,30\] \ 
                    out=temp_xy_1_b \\ 
    

 tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,30\] out=temp_xy_1_b \\

    
  DONE TBCUT - doing profile - to determine stellar point-spread-function 
  Command:    profile $file1 instars=temp_xy_1_b use='auto' \ 
              outprof=prof_$file1 \\ 
    

 profile $file1 instars=temp_xy_1_b use='auto' outprof=prof_$file1 \\

    
  DONE PROFILE - doing measure - to measure magnitudes of all stars 
  Command:    measure $file1 instars=temp_xy_1_a profile=prof_$file1 \ 
                      out=mag_$file1 outim=clean_$file1 \\ 
    

 measure $file1 instars=temp_xy_1_a profile=prof_$file1 out=mag_$file1 \
         outim=clean_$file1 \\

    
  DONE  MEASURE - deleting temporary files  
    

 rm temp_xy_1.sdf temp_xy_1_a.sdf temp_xy_1_b.sdf



3 demo2

    
  ***********************************************************  
  This script will take two images (non-aligned) of a star field 
  and automatically find the stars, work out the transformation  
  between the images, measure their PSFs, measure the stars, and  
  display a colour/magnitude diagram. 
    
  The two images are in files $STARMAN_DATA/stars_v.sdf  and 
   $STARMAN_DATA/stars_r_rotated.sdf. These are copied into   
  the present directory. 
    
   A number of files called temp_* are created and destroyed 
   when running this demonstration. 
    
  Files prof_XXX1.sdf, mag_XXX1.sdf, clean_XXX1.sdf 
        prof_XXX2.sdf, mag_XXX2.sdf, clean_XXX2.sdf 
  are created 
    where XXX1 and XXX2 are the names of the input files, and 
    the prof_ files conatin the profile (in Starman terms), 
    the mag_ files contains Starman tables with the results, and 
    the clean_ files contain copies of the cleaned images. 
    
  Use tblist, tbsheet and diagram to look at the tables, 
      imflash and interact to look at the images 
    
  ***********************************************************  
    


    
  STARTING - copying images from Starman test data directory 
  Commands:  cp $STARMAN_DATA/stars_v.sdf ./. 
             cp $STARMAN_DATA/stars_r_rotated.sdf ./. 
             set file1 = stars_v  
             set file2 = stars_r_rotated 
    

 cp $STARMAN_DATA/stars_v.sdf ./.
 cp $STARMAN_DATA/stars_r_rotated.sdf ./.
 set file1 =  stars_v 
 set file2 =  stars_r_rotated 

    
  COPIED images - doing starfind - to find all stars 
  Command:  starfind $file1 radius=2 out=temp_xy_1 \\   
  Command:     
    

 starfind $file1 radius=2 out=temp_xy_1 \\

    
  DONE STARFIND - doing tbsort - to sort with bright ones first 
  Command:  tbsort temp_xy_1 numcol=3 option='descending' \ 
                   out=temp_xy_1_a \\   
    

 tbsort temp_xy_1 numcol=3 option='descending' out=temp_xy_1_a \\

    
  DONE TBSORT - doing tbcut - to get brightest stars 
  Command:   tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,30\] \  
                   out=temp_xy_1_b \\   
    

 tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,30\] out=temp_xy_1_b \\

    
  DONE TBCUT - doing profile - to determine stellar point-spread-function 
  Command:   profile $file1 instars=temp_xy_1_b use='auto' \ 
                     outprof=prof_$file1 \\   
    

 profile $file1 instars=temp_xy_1_b use='auto' outprof=prof_$file1 \\

    
  DONE PROFILE - doing measure - to measure magnitudes of all stars 
  Command:    measure $file1 instars=temp_xy_1_a profile=prof_$file1 \ 
                      out=mag_$file1 outim=clean_$file1 \\  
    

 measure $file1 instars=temp_xy_1_a profile=prof_$file1 out=mag_$file1 outim=clean_$file1 \\

    
  DONE MEASURE - doing starfind on 2nd image - to get stars for profile  
  Command:    starfind $file2 radius=2 out=temp_xy_2 \\  
    

 starfind $file2 radius=2 out=temp_xy_2 \\

    
  DONE STARFIND - doing tbsort - to sort with bright ones first 
  Command:    tbsort temp_xy_2 numcol=3 option='descending' \ 
                     out=temp_xy_2_a \\  
    

 tbsort temp_xy_2 numcol=3 option='descending' out=temp_xy_2_a \\

    
  DONE TBSORT - doing tbcut - to get brightest stars 
  Command:    tbcut temp_xy_2_a col_1=\[1,6\] row_1=\[1,30\] \ 
                    out=temp_xy_2_b \\ 
    

 tbcut temp_xy_2_a col_1=\[1,6\] row_1=\[1,30\] out=temp_xy_2_b \\

    
  DONE TBCUT - doing profile - to determine stellar point-spread-function 
  Command:    profile $file2 instars=temp_xy_2_b use='auto' \ 
                      outprof=prof_$file2 \\ 
    

 profile $file2 instars=temp_xy_2_b use='auto' outprof=prof_$file2 \\

    
  DONE PROFILE - doing tbtran_auto - to get 1st star list on 2nd image 
  Command:    tbtran_auto mag_$file1 temp_xy_2_c temp_xy_2_a \\ 
    

 tbtran_auto mag_$file1 temp_xy_2_c temp_xy_2_a \\

    
  DONE TBTRAN_AUTO - doing measure - to measure magnitudes of all stars 
  Command:    measure $file2 instars=temp_xy_2_c profile=prof_$file2 \ 
                      out=mag_$file2 outim=clean_$file2 \\ 
    

 measure $file2 instars=temp_xy_2_c profile=prof_$file2 out=mag_$file2 outim=clean_$file2 \\

    
  DONE MEASURE - doing diagram  - to display colour/magnitude diagram 
  Command:    diagram easycmd='yes' in2=mag_$file2 in3=mag_$file1 \ 
                      exit='yes' \\ 
    

 diagram easycmd='yes' in2=mag_$file2 in3=mag_$file1 exit='yes' \\

    
  DONE  DIAGRAM  - deleting temporary files  
    

 rm temp_xy_2.sdf temp_xy_2_a.sdf temp_xy_2_b.sdf temp_xy_2_c.sdf
 rm temp_xy_1.sdf temp_xy_1_a.sdf temp_xy_1_b.sdf temp_xy_1_c.sdf


3 demo3

    
  ***********************************************************  
  This script will take an image of a star field 
  and automatically find the stars, measure their PSFs, and measure  
  the stars.  
    
   A number of files called temp_* are created and destroyed 
   when running this demonstration. 
    
  Files prof_XXX1.sdf, mag_XXX1.sdf, clean_XXX1.sdf are created 
    where XXX1 is the name of the input file, and 
    the prof_ files conatin the profile (in Starman terms), 
    the mag_ files contains Starman tables with the results, and 
    the clean_ files contain copies of the cleaned images. 
    
  Use tblist and tbsheet to look at the tables, 
      imflash and interact to look at the images 
    
  ***********************************************************  
    
  The name of the image is input by the user as the second parameter 
  of this script. This must already be in the current directory. 
    

 if ( $2 ==    ) then
   Input image name 
 set file1 = $<
 else
 set file1 = $2
 endif


    
  STARTING - doing starfind - to find all stars 
  Command:    starfind $file1 radius=2 out=temp_xy_1 \\ 
    

 starfind $file1 radius=2 out=temp_xy_1 \\

    
  DONE STARFIND - doing tbsort - to sort with bright ones first 
  Command:    tbsort temp_xy_1 numcol=3 option='descending' \ 
                     out=temp_xy_1_a \\ 
    

 tbsort temp_xy_1 numcol=3 option='descending' out=temp_xy_1_a \\

    
  DONE TBSORT - doing tbcut - to get brightest stars 
  Command:    tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,30\] \ 
                    out=temp_xy_1_b \\ 
    

 tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,30\] out=temp_xy_1_b \\

    
  DONE TBCUT - doing profile - to determine stellar point-spread-function 
  Command:    profile $file1 instars=temp_xy_1_b use='auto' \ 
              outprof=prof_$file1 \\ 
    

 profile $file1 instars=temp_xy_1_b use='auto' outprof=prof_$file1 \\

    
  DONE PROFILE - doing measure - to measure magnitudes of all stars 
  Command:    measure $file1 instars=temp_xy_1_a profile=prof_$file1 \ 
                      out=mag_$file1 outim=clean_$file1 \\ 
    

 measure $file1 instars=temp_xy_1_a profile=prof_$file1 out=mag_$file1 \
         outim=clean_$file1 \\

    
  DONE  MEASURE - deleting temporary files  
    

 rm temp_xy_1.sdf temp_xy_1_a.sdf temp_xy_1_b.sdf

3 demo4

    
  ***********************************************************  
  This script will take two images (non-aligned) of a star field 
  and automatically find the stars, work out the transformation  
  between the images, measure their PSFs, measure the stars, and  
  display a colour/magnitude diagram. 
    
   A number of files called temp_* are created and destroyed 
   when running this demonstration. 
    
  Files prof_XXX1.sdf, mag_XXX1.sdf, clean_XXX1.sdf 
        prof_XXX2.sdf, mag_XXX2.sdf, clean_XXX2.sdf 
  are created 
    where XXX1 and XXX2 are the names of the input files, and 
    the prof_ files conatin the profile (in Starman terms), 
    the mag_ files contains Starman tables with the results, and 
    the clean_ files contain copies of the cleaned images. 
    
  Use tblist, tbsheet and diagram to look at the tables, 
      imflash and interact to look at the images 
    
  ***********************************************************  
    
  The names of short and long wavelength images are input by the 
  user as the second and third parameters of the script. 
  They must already be in the current directory. 
    

 if ( $1 ==    ) then
  Input 1st (short wavelength) image name 
 set file1 = $<
 else
 set file1 = $2
 endif
 
 if ( $2 ==    ) then
   Input 2nd (long wavelength) image name 
 set file2 = $<
 else
 set file2 = $3
 endif


    
  COPIED images - doing starfind - to find all stars 
  Command:  starfind $file1 radius=2 out=temp_xy_1 \\   
  Command:     
    

 starfind $file1 radius=2 out=temp_xy_1 \\

    
  DONE STARFIND - doing tbsort - to sort with bright ones first 
  Command:  tbsort temp_xy_1 numcol=3 option='descending' \ 
                   out=temp_xy_1_a \\   
    

 tbsort temp_xy_1 numcol=3 option='descending' out=temp_xy_1_a \\

    
  DONE TBSORT - doing tbcut - to get brightest stars 
  Command:   tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,30\] \  
                   out=temp_xy_1_b \\   
    

 tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,30\] out=temp_xy_1_b \\

    
  DONE TBCUT - doing profile - to determine stellar point-spread-function 
  Command:   profile $file1 instars=temp_xy_1_b use='auto' \ 
                     outprof=prof_$file1 \\   
    

 profile $file1 instars=temp_xy_1_b use='auto' outprof=prof_$file1 \\

    
  DONE PROFILE - doing measure - to measure magnitudes of all stars 
  Command:    measure $file1 instars=temp_xy_1_a profile=prof_$file1 \ 
                      out=mag_$file1 outim=clean_$file1 \\  
    

 measure $file1 instars=temp_xy_1_a profile=prof_$file1 out=mag_$file1 outim=clean_$file1 \\

    
  DONE MEASURE - doing starfind on 2nd image - to get stars for profile  
  Command:    starfind $file2 radius=2 out=temp_xy_2 \\  
    

 starfind $file2 radius=2 out=temp_xy_2 \\

    
  DONE STARFIND - doing tbsort - to sort with bright ones first 
  Command:    tbsort temp_xy_2 numcol=3 option='descending' \ 
                     out=temp_xy_2_a \\  
    

 tbsort temp_xy_2 numcol=3 option='descending' out=temp_xy_2_a \\

    
  DONE TBSORT - doing tbcut - to get brightest stars 
  Command:    tbcut temp_xy_2_a col_1=\[1,6\] row_1=\[1,30\] \ 
                    out=temp_xy_2_b \\ 
    

 tbcut temp_xy_2_a col_1=\[1,6\] row_1=\[1,30\] out=temp_xy_2_b \\

    
  DONE TBCUT - doing profile - to determine stellar point-spread-function 
  Command:    profile $file2 instars=temp_xy_2_b use='auto' \ 
                      outprof=prof_$file2 \\ 
    

 profile $file2 instars=temp_xy_2_b use='auto' outprof=prof_$file2 \\

    
  DONE PROFILE - doing tbtran_auto - to get 1st star list on 2nd image 
  Command:    tbtran_auto mag_$file1 temp_xy_2_c temp_xy_2_a \\ 
    

 tbtran_auto mag_$file1 temp_xy_2_c temp_xy_2_a \\

    
  DONE TBTRAN_AUTO - doing measure - to measure magnitudes of all stars 
  Command:    measure $file2 instars=temp_xy_2_c profile=prof_$file2 \ 
                      out=mag_$file2 outim=clean_$file2 \\ 
    

 measure $file2 instars=temp_xy_2_c profile=prof_$file2 out=mag_$file2 outim=clean_$file2 \\

    
  DONE MEASURE - doing diagram  - to display colour/magnitude diagram 
  Command:    diagram easycmd='yes' in2=mag_$file2 in3=mag_$file1 \ 
                      exit='yes' \\ 
    

 diagram easycmd='yes' in2=mag_$file2 in3=mag_$file1 exit='yes' \\

    
  DONE  DIAGRAM  - deleting temporary files  
    

 rm temp_xy_2.sdf temp_xy_2_a.sdf temp_xy_2_b.sdf temp_xy_2_c.sdf
 rm temp_xy_1.sdf temp_xy_1_a.sdf temp_xy_1_b.sdf temp_xy_1_c.sdf


2 Starman_C_Shell_Scripts

 For Starman, the C shell is used. So one can write scripts 
 to perform a sequence of Starman commands.

 As an example of a script, we can make a file called 
 `doit_starman', which will measure the stars in an image. 

      *****************************************
 
 #!/bin/csh

 ############################################
 # DOIT_STARMAN
 #  Runs through Starman from image to measures
 #
 #   alan penny             ral          1994 Nov
 
 alias echo 'echo > /dev/null'
   setenv STARMAN_DIR  /home/dajp/ajp/snew1
   alias starman source $STARMAN_DIR/starman
   starman
 unalias echo
  
 
 if ( $1 ==    ) then
   Input image name 
 set file1 = $<
 else
 set file1 = $1
 endif
 
     
   STARTING - doing starfind - to find all stars 
     
 
  starfind $file1 radius=2 out=temp_xy_1 \\
 
     
   DONE STARFIND - doing tbsort - to sort with bright ones first 
     
 
  tbsort temp_xy_1 numcol=3 option='descending' out=temp_xy_1_a \\
 
     
   DONE TBSORT - doing tbcut - to get brightest stars 
     

  tbcut temp_xy_1_a col_1=\[1,6\] row_1=\[1,8\] out=temp_xy_1_b \\

     
   DONE TBCUT - doing profile - to determine stellar point-spread-function 
     
 
  profile $file1 instars=temp_xy_1_b mode='auto' outprof=prof_$file1 \\

     
   DONE PROFILE - doing measure - to measure magnitudes of all stars 
     
 
  measure $file1 instars=temp_xy_1_a profile=prof_$file1 out=mag_$file1 \
          outim=clean_$file1 \\
 
2 Starman_ICL_Scripts

 ICL scripts may be run in the normal way for Starman.
1 Examples
 
  This has examples of running programs.
   
  Program name
  ------------

 You run a program by typing its name on the command line:- 

     tblist

 The program then asks you for various parameters.

  Parameter name
  --------------

 You can also put some of the parameters on the command line:-

     tblist in=$STARMAN_DATA/tblist_in

 There must be no gaps between the parameter name and the `equals' sign,
 or between the `equals' sign and the value.

 Those parameters which are not specified on the command line,
 are asked for in the normal way when the program runs.

  Parameter position
  ------------------

 Often the command line can take the parameters in order, without having
 to specify their name. Thus:-

     tblist in=$STARMAN_DATA/tblist_in

 is equivalent to:-

     tblist $STARMAN_DATA/tblist_in

  `in' and `out' parameters
  -------------------------

 In most programs, there is a single `input' file and a single 
 `output' file. These are then the first two parameters of a 
 program. Thus:-

    imcut in=$STARMAN_DATA/imcut_in out=fred

 is equivalent to:-

    imcut $STARMAN_DATA/imcut_in fred

   Multi-variable parameter
   ------------------------

 If a parameter has more than value, then these can be put in, 
 grouped inside square brackets:-

    imcut in=$STARMAN_DATA/imcut_in xrange=\[40,60\]

   More than one line
   ------------------

 You can also put some of the parameters on subsequent command 
 lines:-

    imcut in=$STARMAN_DATA/imcut_in \
          xrange=\[40,60\]

   Default values
   --------------

 For default values, one can put an entry on the command line:-

    imcut in=$STARMAN_DATA/imcut_in title=\\

   Default remaining parameters
   ----------------------------

 You can also put some of the parameters on the command line and tell 
 it to take the default values for all other parameters:-

    tblist in=$STARMAN_DATA/tblist_in \\

 If a parameter does not have a default, then you are asked for the
 value when the program runs.<p>

   Image sub-areas
   ---------------

 For images, you can define a sub-area on the command line:-

    imflash in=$STARMAN_DATA/imflash_in\(1:100,1:100\)

 where this selects the b.l.h. 100x100 of the 300x300 image.

 There are different types of specifying a sub-area of the 300x300 
 image:-

                               X range covered   Y range covered
    imflash_in\(1:100,1:100\)      1 - 100           1 - 100   
    imflash_in\(1:100,\)           1 - 100           1 - 300
    imflash_in\(100~50,\)         75 - 124           1 - 300
    imflash_in\(~50,\)           125 - 174           1 - 300

   Character strings
   -----------------

 For character strings, one can put entries on the command line 
 within quotations marks:-

    imcut in=$STARMAN_DATA/imcut_in title=\"Test output\"


1 Guide

 Rutherford Appleton Laboratory                         Alan Penny
 Particle Physics & Astronomy Research Council          1995 January
 Starlink Project 

                      Starman 
    A Stellar Photometry/Image and Table Handling Package 
                    Version 2.0  

 General:-

 Starman is a stellar photometry package designed for the reduction 
 of data from imaging systems. Its main components are:- crowded-field 
 photometry programs; aperture photometry programs; a star finding 
 program; a CCD reduction program.

 Image and table handling are served by a large number of programs 
 which have a general use in photometry and other types of work.

 The package is a coherent whole, for use in the entire process of 
 stellar photometry from raw images to the final standard-system 
 magnitudes and their plotting as colour-magnitude and colour-colour 
 diagrams. 

 Stellar Photometry Programs:-
 
  -  Converter of raw CCD images to calibrated ones. 
  -  `Dust-ring' flat-field dealer. 
  -  Star position finder. 
  -  Stellar profile determiner. 
  -  Crowded-field, and also simple, stellar photometry measurers. 
  -  Averager of photometry estimates from different images. 
  -  Colour-magnitude and colour-colour diagram plotters.  
  -  Adder of `fake' stars to an image. 
  -  Automatic aperture photometry for all bright well isolated stars. 
  
 Image Handling Programs:-

  -  Image display for Xwindow devices. 
  -  Interactive image display for any Xwindow devices.
      This includes:- zoom/pan, pixel value, `slice', 
      solid-body plots, interactive aperture photometry, colour LUT, 
      interactive position file making, plotting of positions on image, 
      interaction with the output of the crowded-field stellar 
      photometry measurer, `GUI'-like interaction when dealing with 
      some of the image and graphical display on an X-window. 
  -  Extensive general programs: Maths, joining, cutting, reading, etc.. 

 Table Handling Programs:-

  -  Spread-sheet, Calculator. 
  -  Input, Output, Listing. 
  -  Graphical Plot, Star Chart. 
  -  Joining. 
  -  Extensive general programs: sort, weed, statistics, 
      matching, position transforming, etc.. 


 `Starman' is not an acronym, and so should only have the first letter of
 its name in capitals.

1 Help
  Here there is on-line help on the :-  
    - Starman in general under `Starman'. 
    - Starman suite in 'guide'
    - Individual programs under their names
    - Image system under 'images'. 
    - Table system under 'tables'. 
    - A list of programs is in 'menu'. 

  If lost, read the Starman manual SUN141 and other Starlink manuals.

  Outside a program, type 'starmanhelp' to access the help system, and
  'starmanbrowse' to access the hypertext help system.

  Inside a program you can access the help when asked for a  parameter 
  - replying with a '?' will get you help on that parameter, and replying 
  with a '??' will get you into the general help system, at the point of 
  that parameter, from where you can go back up the  help system and down 
  to any desired point.
1 Im_progs
  
 These are the Starman programs designed for handling images.
  
 INTERACT is the main interactive program for handing images.
 See the help in 'phot_progs'.
  
 The images are in the `short' integer 16-bit or `real' real 32-bit
 .SDF Starman Adam format.
  
  
  
2 Imcalc
  
 Does mathematics on input images.
  
 Arithmetic and mathematical functions are applied to input images
 and constants, by means of a FORTRAN-like equation.
  
 In addition to the standard FORTRAN facilities, a number of special
 functions are available (e.g. for adding noise).
  
  A simple example would be
  
     imcalc  (fred+george)/2.2   arthur  'new sums'
  
  This would add the images in the files `fred.sdf' and `george.sdf',
  divide the result by 2.2, and store the output in file `arthur.sdf',
  with the added title `new sums'.
  
3 Method
  
 The user inputs a Fortran-like equation (through the parameter EQN).
 The equation can contain references to:-
  
   - specified images
   - variables
   - constants
   - Fortran operators on these (e.g. `+', or `cos()', ... )
   - extra operators
  
 (For more details on the structure of the equation see the
 `equation' sub-help.)
  
 The equation is analysed and the operations are performed. Each
 pixel of the output image contains the results of the equation,
 with the data for the input images coming from the matching pixel
 of those input images.
  
 More specifically, the equation is analysed to identify the names
 of images and variables and to evaluate constants and isthen
 converted into reverse-Polish notation. The images and variables are
 prompted for in alphabetical order and the program then performs
 simple `stack-arithmetic' to evaluate the expression for each output
 image pixel.
  
 The output image is made by:-
  
  Making a new image from scratch - whose X and Y sizes are either
  equal to the minimum X and Y sizes in the set of the input images
  of, if there are no input images, defined by the user.
  
3 Equation
  
 An arithmetic expression of up to 132 characters which gives the
 function to be evaluated for each output image pixel. The syntax
 is similar to Fortran (same operator precedence, etc.) but with the
 some differences, described in the lower help levels here.
  
4 Input_images
  
  Input images can be represented in three ways:-
  
  Method   Example                    Use
  ------   -------                    ---
  Name     fred                       Simple, easy
  
  Marked   \!../dirname/fred-back\!   For when a file name contains
  Name                                characters that would be confused
                                      with operators. The `\!' denote
                                      the start and end of the name.
  
  Code     IA  or IB  ... IZ          These special symbols are taken
                                      as asking for images. The input
                                      parameters `INA', `INB', etc.
                                      will then be used to ask for the
                                      images. (Must be capitals, i.e.
                                      `ia' will be thought of as the
                                      file `ia.sdf'.
  
  The input images must be standard Starman ADAM .SDF images, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  They can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Numerical_parameters
  
  Numerical parameters by any of the variables variables A to Z
  
4 Constants
  
  Constants by any numerical Fortran constant (real or integer,
  including exponent if required).
  
4 Real_typing
  
    Arithmetic is performed as though all values were real, The
    input images are scaled by their (BSCALE and BZERO) scale/zero
    images before use. The actual calculations are performed in
    double precision, and the results translated back to the
    real or integer*2 format of Starman NDF images.
  
4 Fortran_functions
  
    The standard Fortran functions are available and identified
    by their generic names, i.e.
  
        -         +         **        *         /         NEG
        SQRT      EXP       LOG10     LOG       SIN       COS
        TAN       ASIN      ACOS      ATAN      ATAN2     SINH
        COSH      TANH      ABS       AINT      ANINT     MOD
        SIGN      DIM       MIN       MAX
  
    Note, however, that MIN and MAX may take only 2 arguments.
  
    To avoid problems with the way the Starlink environment
    handles character parameters, the comma `,' must be replaced with
    the colon `:' for separating function arguments. Similarly, the
    division sign `/' may be replaced by the percent sign `%', although
    this latter substitution is not necessary for simple constructs or
    when replying to a prompt at the terminal.
  
4 Extra_functions
  
   There are five extra functions available:-
  
    XX           The `X' value of the pixel.
    YY           The `Y' value of the pixel.
    CLIP(A,B,C)  This gives the value B so long as it lies in the
                 interval A to C (inclusive). Otherwise it gives a
                 zero result. It may be used to remove output values
                 outside a certain range (e.g. if a division operation
                 has resulted in very large output values).
    GAUSS(X)     Gives gaussian noise with zero mean and standard
                 deviation X (the value returned is different at each
                 pixel and for each call of GAUSS).
    RAN(X)       Gives uniform noise with a value between zero and X
                 (the value returned is different at each pixel and
                 for each call of RAN).
  
4 Example
  
  For example, an equation of the form:-
  
        IA*3.3 + 0.5 + COS(IB) + A + MOD(YY:10) + XX%3.0
  
  will fill each pixel with:-
  
    ( 3.3 times the pixel in the corresponding pixel of the input image
        specified through parameter `INA' )
  + ( 0.5 )
  + ( cosine of pixel in the corresponding pixel of the input image
        specified through parameter `INB' )
  + ( the user defined value of the variable `A' )
  + ( the `Y' value (not its actual value) of the pixel, modulo 10 )
  + ( the `X' value (not its actual value) of the pixel divied by 3 )
  
  whilst
  
        fred*3.3+ 0.5 + COS(\!a1-b1\!) + A + MOD(YY:10) + XX%3.0
  
  will do the same for the images in the files `fred.sdf' and
  `a1-b1.sdf'.
  
3 Input
  
  Only images and variables used in the expressions are prompted for and
  these are requested in alphabetical order, and only once each.
  
3 Parameters
  
4 Bchoice
  (Default - `yes'            Choice - `yes:no')
  
 Choose BSCALE and BZERO for the output `real' image to be 1.0, 0.0
 rather than the values inherited from the input images.
 For a `real' image, a value of 1.0,0.0 allows the image to be
 properly processed by other packages.
  
4 Bscale
  (Default - 1.0 or input image value      Range -  -1.0e10 to 1.0e10
  
  The output image has a (BSCALE/BZERO) scale and zero such that:-
  
    the `true' value of a pixel = BSCALE*'value' + BZERO.
  
  These scale and zero are defined by the user, with suggested values
  of 1.0/0.0, or as those of the first input image, if any. This
  parameter defines the `BSCALE' value.
  
4 Bzero
  (Default - 0.0 or input image value      Range -  -1.0e10 to 1.0e10
  
  The output image has a (BSCALE/BZERO) scale and zero such that:-
  
    the `true' value of a pixel = BSCALE*'value' + BZERO.
  
  These scale and zero are defined by the user, with suggested values
  of 1.0/0.0, or as those of the first input image, if any. This
  parameter defines the `BZERO' value.
  
4 Eqn
  (Default - null          Choice - as defined below)
  
  The FORTRAN-style expression that gives the elements in the
  pixels of the output image.
  
  Its style is given the `equation' section of this help.
  
4 Inim
  (Default - null)
  
 The input image corresponding to one of the `IA' to `IZ' to be used
 in the arithmetic expression.
  
 The `IA', `IB', ..., `IZ' in the equation pick up the images from
 the parameters `INA', `INB', ..., `INZ'.
  
 The input images must be standard Starman ADAM .SDF images, with
 either `real' 32-bit real values, or `short' 16-bit integer values.
 They can have the `BSCALE' and `BZERO' values, and `magic pixel values'
 indicating `bad' pixels.
  
 The `help' for all these is kept here, for `inim'.
  
4 Invar
  (Default - 0.0           Range -1.0e37 to 1.0e37)
  
  The value to be used in the equation for the value of
  the desired variable, from the range `A', `B', ..., `Z'.
  
  The `help' for all these is kept here, for `invar'.
  
4 Nxy
  (Default - 1,1             Range - 1 to 100000)
  
  If there are no input images, the user has the choice of the size of
  the output image.
  
  This parameter defines the `X' and 'Y' sizes of the output image.
  
4 Out
  (Default - null)
  
 The name of the file to contain the output image.
  
 The size of the output image is:-
  - That of the `template' image, plus (optionally) some columns.
  - Or has a user defined number of columns with the number of rows
    being the same as the number of rows in the input images.
  - Or, if there are no input images, the number or columns and rows
    are user defined.
  
  This is a `real' 32-bit image or a `short' 16-bit integer image.
  
  It has a (BSCALE/BZERO) scale and zero
  such that the `true' value of a pixel = BSCALE*'value' + BZERO.
  These scale and zero are defined by the user, with suggested values
  of 1.0/0.0, or as those of the first input image, if any.
  
  There is also a `magic value' to flag `bad' pixels. This is
  either -32767 (for `short') or a v large number (for `real') or that
  of the first input image, if any. or will be `#1', `#2', etc..
  
4 Outtype
  (Default - same as input          Choice - `real:short')
  
  Should the output image be:-
  
  `real'    This is a 32-bit real image with a precision of about
            1 in 10 million, nad values between +/- 10**38
  
  `short'   This is a 16-bit integer image, with a precision of about
            1 in 60000. The numbers are stored on disk as integers
            between -32768 and +32767. They are used in the Starman
            programs as real numbers, by the use of BSCALE and BZERO,
            such that:-
                `used value' = BSACLE*'disk value' + BZERO
  
            The advantage of this is that if this precision is adequate
            then the files are half the size of `real' files. The
            problem is that one has to be constantly aware of the
            `digitisation' of the images when being stored on disk.
            Also, many other program packages do not use the
            BSCALE and BZERO, so cannot get the `true' values.
  
4 Seed
  (Default - 1234567891    Range - 1200000001 to 1400000001)
  
  The seed number to be used in any random number generators.
  This is used in the `GAUSS()' and `RAN()' operators. These
  will provide the same pattern of numbers in the same
  seed number is input.
  
  It has to be a large positive odd number.
  
4 Title
  (Default - title of first input image or `Output from Imcalc'
   Choice - any )
  
  The title for the output image.
  
3 Author
  
  Alan Penny              RAL            1992 Dec
   (adapted from MATHS of R.F.Warren-Smith)
2 Imcube
  
  This program cuts a 2-D image out of a 3-D or 4-D image.
  
  It can squeeze down (add together) a range of planes in the
  other directions.
  
  If in squeezing down, any of the 3-d or 4-d pixels, added in
  to make the output 2-d pixel, is INVALID, then the output pixel
  is INVALID.
  
  The input image types it can deal with are:-
  
     Type              Name
     ----              ----
     32-bit real       real
     32-bit integer    integer
     16-bit integer    short
  
  
3 Parameters
  
4 In
  (Default - null)
  
  The name of the input image.
  
  The input image must be a standard ADAM .SDF images, with
  either `real' 32-bit real values, `integer' 32-bit integer,
  or `short' 16-bit integer values.
  
4 Out
  (Default - null)
  
  The name of the output image.
  
  The output image will be a standard ADAM .SDF images, with
  the pixel types of the input image, with either `real' 32-bit
  real values, `integer' 32-bit integer, or `short' 16-bit integer values.
  
4 Plane3
  (Default - 'xy'       Choice - 'xy:xz:yz')
  
  The plane to cut out of a 3-D cube. The cube is considered
  to have axes XYZ.
  
4 Plane4
  (Default - 'xy'       Choice - 'xy:xz:xt:yz:yt:zt')
  
  The plane to cut out of a 4-D cube. The cube is considered
  to have axes XYZT.
  
4 Title
  (Default - input image title )
  
  The title to be attached as a header to the output image.
  
4 Xplane
  (Default - 1, X size      Range - 1 to X size of image)
  
  The range, along the X direction, of planes to squeeze down
  (add together) to produce the plane to be cut out. A range of
  1 (say 5,5) cuts out a single plane
  
  For this to be asked for, the cube has to be either a 3-D one
 (XYZ), or a 4-D one (XYZT).
  
4 Yplane
  (Default - 1, Y size      Range - 1 to Y size of image)
  
  The range, along the Y direction, of planes to squeeze down
  (add together) to produce the plane to be cut out. A range of
  1 (say 5,5) cuts out a single plane
  
  For this to be asked for, the cube has to be either a 3-D one
 (XYZ), or a 4-D one (XYZT).
  
4 Zplane
  (Default - 1, Z size      Range - 1 to Z size of image)
  
  The range, along the Z direction, of planes to squeeze down
  (add together) to produce the plane to be cut out. A range of
  1 (say 5,5) cuts out a single plane
  
  For this to be asked for, the cube has to be either a 3-D one
 (XYZ), or a 4-D one (XYZT).
  
4 Tplane
  (Default - 1, T size      Range - 1 to T size of image)
  
  The range, along the T direction, of planes to squeeze down
  (add together) to produce the plane to be cut out. A range of
  1 (say 5,5) cuts out a single plane
  
  For this to be asked for, the cube has to be either a 3-D one
 (XYZ), or a 4-D one (XYZT).
  
3 Author
  
  Alan Penny               RAL           1991 November
2 Imcut
  
  Copies one image to another, with the options of:-
  
    -- Copying only a section of the input image
    -- Binning that section down
    -- Inverting the section in X and/or Y
  
3 Binning
  
  It can take rectangular groups of pixels (bins) in the input image
  and output them as a single pixel to the output image. This is
  known as 'binning'. The reduction of a group can be done either
  by taking the bottom left hand pixel of the group and outputting
  that value, or taking the mean of all the pixels in the group.
  If the average is taken, there is the choice of:-
  
       1) ignore any INVALID points in the bin
       2) set the output to INVALID.
  
  If this binning is used, and the chosen area of the input image cannot
  be exactly sub-divided into an integral number of bins, then those
  pixels at the right and top edges of the chosen area that fall
  outside the binned area are ignored.
  
3 Inverting
  
  The inverting is done by defining the section with the start and
  stop locations inverted.
  
  Thus for example, if one wanted to take all the bottom half of
  an image of size NX by NY, and invert in X, one would define the
  section as:-
  
          (NX, 1) and (1, NY/2)
  
3 Parameters
  
4 Bin
  (Default - 1,1       Range - 1 to max size of image)
  
  The size of the groups of pixels that are to binned to make
  the output image. If the default is taken, no binning is done.
  
  If the sampling step in both X and Y is not one, then either the 1st
  (blh) pixel of the bin is output ('yes'), or the average of the bin
  is output ('no').
  
  If the average is taken, there is the option to either ignore any
  INVALID points in the bin, or to set the output to INVALID.
  
4 Check
  (Default - 'no'        Choice - 'no:yes')
  
  In taking the average, ignore any INVALID points in the input bin
  ('no'), or to set the output to INVALID ('yes').
  
4 In
  (Default - null)
  
  The name of the input image file.
  
  The input image must be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Out
  (Default - null)
  
  The name of the new file containing the output image.
  
  The output image will be a standard Starman ADAM .SDF image. It
  will have th same type as the input image, with either `real'
  32-bit real values, or `short' 16-bit integer values.
  It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Sample
  (Default - 'highest'        Choice - 'sample:highest:average')
  
  If the binning step in both X and Y is not one, then either the 1st
  (blh) pixel of the bin is output ('sample'), or the highest pixel of
  the bin (`highest'), or the average of the bin is output ('no').
  
  If the average is taken, there is the option to either ignore any
  INVALID points in the bin, or to set the output to INVALID.
  
4 Title
  (Default - input image title, or if null, 'Output from IMCUT'
   Choice  - any)
  
  Title to add to output image
  
4 Xrange
  (Default - 1,input image X size     Range - 1 to input image X size)
  
  X start and X end of the area of image to cut out and put in new image.
  
  If the X end is smaller than the X start, then the output image is
  inverted in X.
  
4 Yrange
  (Default - 1,input image Y size     Range - 1 to input image Y size)
  
  Y start and Y end of the area of image to cut out and put in new image.
  
  If the Y end is smaller than the Y start, then the output image is
  inverted in Y.
  
3 Author
         A.J.Penny  RAL             1991 June
  
  
2 Imdes
  
  List, write, delete or copy the descriptors of an image.
  
  Choose which one of the four options you wish to do, with
  the `OPTION' parameter. Then do that option.
  
3 Copy_option
  
  Copy all descriptors from `IN' image to `OUT' image.
  
  There are two options:-
  
    If a descriptor to be copied from the input image exist in
    the output image, should the descriptor from the input image
    overwrite that already in the output image?
  
    If this overwriting is to take place, should multi-line
    descriptors which are overwritten be entirely deleted?
  
3 Delete_option
  
  Allows all or some descriptor items to be deleted from an image.
  
  If only some are to be deleted, then the `LOOP' parameter is
  set to `yes', then the program loops, asking for new descriptor
  names until a `null' response is input. If it is set to `no',
  
3 List_option
  
  It types the size; pixel value scale and zero; title.
  
  Then it asks whether you want all descriptors output or just specificied
  ones. If you want all, it outputs them. If you want specific ones, it
  asks for the name of a specific descriptor. You give it, and it types
  out the descriptors value. It then repeats asking for names until you
  reply with a null (' ` or <carriage return>).
  
  You can specify that the program looks at only one descriptor before
  exiting. This mode is chosen with the `ALL_LIST=no' and `ONLYONE=yes'
  setting of the parameters.
  
3 Write_option
  
  Allows descriptor items to be overwritten with new information, or
  inserted if they were not present, into an image.
  
  If the `LOOP' parameter is set to `yes', then the program loops,
  asking for new descriptor names until a `null' response is input.
  If it is set to `no', then only one descriptor is asked for.
  
3 Parameters
  
4 All_del
  (Default - `all'          Choice - `all:some')
  
  In deleting descriptors, delete them all, or just some?
  
4 All_list
  (Default - `some'          Choice - `all:some')
  
  In the listing, do you want all the descriptors output (`all'),
  or just specified one or ones (`some')?
  
4 Delete
  (Default - `yes'          Choice - `yes:no')
  
  In copying descriptors from input image to output image, and
  if a descriptor to be copied from the input image exists in
  the output image, the descriptor from the input image is to
  overwrite that already in the output image, then:-
  
  Should multi-line descriptors which are overwritten be
  entirely deleted?
  
4 Format
  (Default   - `char'       Choice - `char:int:real')
  
  In writing a descriptor, what format should it be in?
  A text string; an integer value; a real value?
  
4 In
  (Default - null)
  
  The name of the input image file.
  
  The input image must be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  
4 Loop
  (Default - `yes'        Choice - `yes:no')
  
  If `yes', then the program loops, asking for new descriptor names
  until a `null' response is input. If `no', then only one
  descriptor is asked for.
  
4 More
  (Default - `yes'      Choice - `yes:no')
  
  Used listing descriptors, and splitting the listing into pages.
  
  Do you want any more output of these descriptors (if doing all of
  them) or of this descriptor (if doing single specific descriptors)?
  
4 Name
  (Default - ` `       Choice - any)
  
  Name of descriptor you want to use (list;write;delete).
  
  If you reply with a null (' ` or <carriage return>), it ceases
  asking for descriptor names.
  
4 Onlyone
  (Default - `yes'      Choice - `yes:no')
  
  Do you want the program to look at only one descriptor before
  exiting?
  
  This option is only asked for if you are listing descriptors, and
  only listing some.
  
4 Option
  (Default - `list'         Choice - `copy:delete:list:write' )
  
  Choose one of the options.
  
  Option      Function
  ------      --------
  Copy        Copy descriptors from one image to another
  Delete      Delete a descriptor(s) from an image
  List        List descriptor(s) in an image
  Write       Write descriptors from the keyboard into an image
  
4 Out
  (default - null)
  
  Output image for `copy' option. This image is actually both
  input and output.
  
  The image must be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  
4 Over
  (Default - `yes'        Choice - `yes:no')
  
  In copying descriptors, overwrite existing values where there
  is an existing descriptor of the same name.
  
4 Paging
  (Default - `no'      Choice - `yes:no')
  
  When listing out descriptors, should the listing halt every 20
  descriptors to give you a chance to read them.? (You then
  carry on with the `MORE' parameter.)
  
4 Value
  (Default - null           Choice - any)
  
  The character string containing the descriptor, when `writing'
  descriptors.
  
  If you have input, via the `FORMAT' parameter, that the descriptor
  is to have a character string, then this is put there.
  If it is `real', then it is turned into a real number before
  being put, and if an `integer', turned into an integer.
  
3 Author
         A.J.Penny  RAL             1991 June
  
  
2 Imfits_dr
  
  Reads a disk file with a simple FITS image in it, and produces
  a Starman Adam SDF (NDF) format image, which the other Starman
  programs can read.
  
  If the input is 16-bit, a 16-bit integer output image is suggested.
  If it is 32-bit (integer or real), a 32-bit real output image is.
  
  A simple line of information about the image is typed out.
  
  A further line of reference may be typed out with entries for:-
  
  `File', `object name', `filter', `ra', `dec', `date',  `time', `exposure'.
  
3 Fits_format
  
  The file must be a 16-bit integer or a 32-bit integer or real image.
  
  It wants a 2-d image.
  If it has one dimension, it is treated as though the other is NY=1.
  If it has more than two dimensions, only the first XY plane is taken.
  
  That is one that starts with a series of sets of 36 lines of 'headers',
  with the last set containing the 'END'.
  
  The headers must start:-
  
       SIMPLE  =                    T  /  FITS STANDARD
       BITPIX  =                    ?  /  FITS BITS/PIXEL
       NAXIS   =                    2  /  NUMBER OF AXES
       NAXIS1  =                    ?  /
       NAXIS2  =                    ?  /
  
    where '?' must be 16, 32, or -32 for BITPIX, and the size of the image
    must be in NAXIS1 and NAXIS2. (The -32 is the FITS code for a 32-bit
    real image.)
  
  The file must have consist of the FITS standard complete 2880 byte blocks.
  
3 Optional_line
  
  In addition to the information about the size of the image typed out,
  the program optionally can type out a line of astronomical information.
  
  This contains:-
  
  `File', `object name', `filter', `ra', `dec', `date',  `time', `exposure'.
  
  As the information for all except the first can be in arbitrarily
  named descriptors, the user has to input the names of those descriptors.
  
3 Parameters
  
4 Date
  (Default - `DATE'              Choice - any)
  
  The name of the descriptor holding the date that the exposure
  was made on.
  
  This is only asked for if the second optional information line is
  being put out.
  
4 Dec
  (Default - `DEC'              Choice - any)
  
  The name of the descriptor holding the Declination of the exposure.
  
  This is only asked for if the second optional information line is
  being put out.
  
4 Do_info
  (Default - `no'               Choice - `yes:no')
  
  Type out the optional information line, giving information on the
  exposure.
  
  This line contains:-
  
  `File', `object name', `filter', `ra', `dec', `date',  `time', `exposure'.
  
4 Exposure
  (Default - `EXPOSED'              Choice - any)
  
  The name of the descriptor holding the Expsoure Time of the exposure.
  
  This is only asked for if the second optional information line is
  being put out.
  
4 Filter
  (Default - `FILTER'              Choice - any)
  
  The name of the descriptor holding the name of the Filter used in the
  exposure.
  
  This is only asked for if the second optional information line is
  being put out.
  
4 In
  (Default - null)
  
  The name of the input FITS file.
  
  Include the qualifier, if there is one. That is 'R001.fits', for
  example.
  
4 Object
  (Default - `OBJECT'              Choice - any)
  
  The name of the descriptor holding the name of the Object of the exposure.
  
  This is asked for, to get what to put in the `title' of the output
  image. It is also used for the second optional information line, if that
  is being put out.
  
4 Out
  (Default - null)
  
  The name of the output NDF file.
  
  If the input is 16-bit, a 16-bit integer output image is suggested.
  If it is 32-bit (integer or real), a 32-bit real output image is.
  
  The image will be a standard Starman ADAM .SDF image.
  It will have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Outtype
  (Default - see below         Choice - 'real:short')
  
  Is the output image to be a 16-bit integer image ('short'), or
  a 32-bit real image ('real')?
  
  The program takes as default the number of bits per pixel in the
  input FITS file (the BITPIX header).
  
4 Ra
  (Default - `RA'              Choice - any)
  
  The name of the descriptor holding the Right Ascension of the exposure.
  
  This is only asked for if the second optional information line is
  being put out.
  
4 Time
  (Default - `TIME'              Choice - any)
  
  The name of the descriptor holding the Time (UT, Sid T, etc) of the
  exposure.
  
  This is only asked for if the second optional information line is
  being put out.
  
  
3 Author
         A.J.Penny  RAL             1994 Dec
  
2 Imflash
  
  IMFLASH displays an image on an image display with a minimum
  of interaction with the user. It 'flashes' an image up on the
  screen. This stays displayed until the user inputs that it
  should disappear.
  
  The program calculates the `best' contrast to display the image
  at. This assumes that much of the image is sky with some noise.
  The display is -2/+5 std dev about the mean. This brings up
  faint features.
  
  The image is displayed in black and white, with black denoting
  high values. `Invalid' pixels are displyed as white.
  
  If the image is too large to be displayed on the image, it is binned
  down (with square bins), so that it does fit into the display.
  
  The image disappears when the user ends the program. Thus if you
  want to have an image displayed, while you do something else, then
  leave the image displayed, and start another window, start Starman
  there, and do what you want to do there.
  
3 Parameters
  
4 Enough
  (Default - 'yes'      Choice - 'yes:no')
  
  Have you had enough of looking at the image?
  
  If you have, then the program will exit, and the image will vaish
  from the screen.
  
4 In
  (Default - null)
  
  The name of the file containing the input image.
  
  The input image must be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
3 Author
  
  Alan Penny               RAL             1991 July
2 Imjoin
  
 This program is used to merge several images into one new image.
  
 The key features are:-
  
   - The addition of each image is done in such a way that the
     each pixel in the output image has the `weighted' contribution
     from each input image.
  
   - The input images can be `transformed', that is given a
     displacement, rotation, and stretch in the XY plane.
  
   - For each image, the pixel values can have a zero level
     subtracted and can be scaled before being added into the output
     image.
  
 The program can, less usually, combine two `reference' images.
  
 The output can be an `real' 32-bit image or a `short' 16-bit
 integer image, or a real 32-bit `reference' image.
  
 The reference image can contain more information than the simple
 output image, and is accompanied by a `load' image, which means it
 can be input into IMJOIN again without loosing any information.
  
3 Method
  
 This program is intended for the purpose of making a large image from
 a number of images.
  
 The input images can be placed in a normal output image or as an
 output `reference' image. The reference image can either then be used
 as a normal image (but see the comment in the `Details' help section),
 or used as a further input to another run of IMJOIN.
  
 1) A Simple Point
    --------------
  
 If the input images were simply added in, then when images overlapped
 the output pixels would have double inputs and be too high. This
 problem is solved by some simple arithmetic.
  
 It works by adding image(s) into a `reference' image.
  
 The reference image has an accompanying `load' image which records for
 each pixel how many input images have contributed to that pixel. Thus
 a new input pixel value gets added in to give the output value as:-
  
               OUT_VAL.(Present number of inputs) + IN_VAL
    OUT_VAL =  -------------------------------------------
                     Present number of inputs + 1
  
  
 2) Scaling the Input Images
    ------------------------
  
 There is a further facility, in that the input images may have
 different `scales'. Thus if there are two images which have different
 exposure times, then simply adding them in together will result in
 mismatched pixels.
  
 This is solved by applying a `scale' to each input image.
  
 When the new image is added in, each pixel that gets a value from the
 new image is scaled by a factor. Each pixel is multiplied by this
 scale factor. Then at the end the output pixel is divided by the sum
 of the `scales'. Thus if the scaling were due, in fact, to different
 exposure times, the `scale' could be inversely proportional to the
 exposure times.
  
 Since the scale is multiplied into the pixel values, it is recommended
 that the longest exposure have a `scale' of 1.0, and the others in
 proportion. This avoids loosing accuracy when the output image (which
 is real) is later converted back to a short integer one.
  
 Thus a pixel, from an input image of the `SCALE' parameter of IN_SCALE,
 with a pixel value of IN_VAL will be added to a reference image pixel
 of `scale SCALE_VAL and value REF_VAL so that the output pixel value
 will be:-
  
    OUT_VAL = (REF_VAL.SCALE_VAL + IN_VAL)/(SCALE_REF + IN_SCALE)
  
 and the output `scale' image will be:-
  
    OUT_SCALE = SCALE_VAL + IN_SCALE
  
  
 3) Subtracting a Zero from the Images
    ----------------------------------
  
 There is a facility for subtracting a mean `zero' level from each input
 image before the process of scaling, transforming and inputting starts.
  
 This is useful when the input images have been taken under different
 conditions of sky brightness and each has an extra, uniform,
 contribution from the sky background. This level can be automatically
 estimated and subtracted from the image.
  
 This is not a good idea when there is large scale structure truly
 present in the imagea, as a mean level from this in each image will
 also be subtracted, leading to strange effects.
  
3 Pixel_interpolation
  
  As the transformation coefficents do not necessarily result in
  each pixel in an input image corresponding exactly to the pixel
  locations in the output image, it is necessary to interpolate
  between the input pixels to see what value to put into the
  output pixel.
  
  This interpolating from the grid of input image pixels onto the
  output image can be done in one of three ways:-
  
  NEAREST  -  Take the nearest input image pixel.
  LINEAR   -  Make a linear combination of the four input image
              pixels around the output image pixel.
  UNIFORM  -  Make a weighted mean of the nine adjacent input image
              pixels (linearly combined), so that the ouput image pixels
              have a constant noise value.
  
  The default is LINEAR.
  
 The NEAREST method is the simplest, and actually no interpolation is
 done.
  
 All interpolation methods have the drawback that they will miss high
 and low points `between' the pixels. Thus if there is structure on a
 scale commensurate with the pixel sizes, there will tend to be a
 smoothing of the high and low points. Thus, an image with stars in it
 runs the risk that the star peaks will be smoothed down.
  
 A drawback with `LINEAR' is that an output pixel in the centre of four
 input pixels will be the mean of those, and thus have a lower noise
 than an output pixel on an input pixel, in which case it would only
 have the mean of that single pixel. Thus the provision of the `UNIFORM'
 mode.
  
3 Reference_Image_Adding
  
 It sometimes happens that one has run IMJOIN twice, and one wants to
 combine the two resultant `reference' and `load' images. This can be
 done.
  
 The combining is done assuming that the images are already exactly
 aligned. The output `reference' and `load' images are made, dealing
 with the `weights' in the proper manner.
  
3 Transformation
  
 The `transformation' of the input image pixel locations into the
 output images pixel locations is done with a linear transformation.
  
 Thus:-
  
     x1 = c1 + c2.x + c3.y
     y1 = c4 + c5.x + c6.y
  
 where: (x,y) are the coordinates in the input image.
        (x1,y1) are the coordinates in the output `reference' image,
  
  The default is no translation, rotation or stretching:-
  
     x1 = 0.0 + 1.0*x + 0.0*y
     y2 = 0.0 + 0.0*x + 1.0*y
  
3 Details
  
 The input reference, input load, output reference, and output load
 images are all `real' (32 bit). The input image, and the output image
 can be either `real' or `short' 16-bit integer.
  
 If there is no input reference image, then a default null one is
 assumed, with a default null load image.
  
 `Invalid' pixels in an input image are not transferred over to the
 corresponding pixel in the output image, unless that pixel has had no
 valid input data yet. If an output image pixel has had only `invalid'
 input image pixels, and then a new input image delivers a valid
 pixel value, that overwrites the `invalid' flag in the output pixel.
  
 Up to ten input images can be used. If it is desired to load more
 than ten, then run the program again.
  
3 Warnings
  
  This program can seem very slow or inoperative, because of the
  number and sizes of the files used/made. Also the size of the
  output files may be larger than you expect.
  
3 Parameters
  
4 Doout
  (Default - `yes'           Choice - `yes:no')
  
  An output `reference' image will be made. Do you want the normal
  output image as well?
  
4 In
  (Default - null)
  
 The name of a input image. This can be for the parameters:-
  IN1, IN2, .... IN10.
  
 A null entry means that there are no more input images
  
 The input image must be a standard Starman ADAM .SDF image, with
 either `real' 32-bit real values, or `short' 16-bit integer values.
 It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
 indicating `bad' pixels.
  
4 Inload
  (Default - null)
  
 The name of the input `load' image.
  
 This is the image which contains for each pixel the `weight' of
 the pixels values already added into the corresponding `reference'
 image  pixel.
  
 - This must be a `Real*4' image.
 - This is only asked for if a `reference' image has been input.
 - A null  response is invalid.
  
  The image must be a standard \starman ADAM .SDF image, `real' 32-bit
  real values. It can have the `BSCALE' and `BZERO' values, and
  `magic pixel values' indicating `bad' pixels.
  
4 Inload1
  (Default - null)
  
 The name of the first input `load' image.
  
 This is the image which contains for each pixel the `weight' of
 the pixels values already added into the corresponding first
 `reference' image  pixel.
  
 - This must be a `Real*4' image.
 - A null  response is invalid.
  
  The image must be a standard \starman ADAM .SDF image, `real' 32-bit
  real values. It can have the `BSCALE' and `BZERO' values, and
  `magic pixel values' indicating `bad' pixels.
  
4 Inload2
  (Default - null)
  
 The name of the second input `load' image.
  
 This is the image which contains for each pixel the `weight' of
 the pixels values already added into the corresponding second
 `reference' image  pixel.
  
 - This must be a `Real*4' image.
 - A null  response is invalid.
  
  The image must be a standard \starman ADAM .SDF image, `real' 32-bit
  real values. It can have the `BSCALE' and `BZERO' values, and
  `magic pixel values' indicating `bad' pixels.
  
4 Inref
  (Default - null)
  
 The name of the input `reference' image.
  
 A null response indicates that the  user says that one does
 not exist. If one does not exist, the program creates one with
 all pixels set at the `BLANK' parameter value.
  
 This must be a `Real*4' image.
  
  The image must be a standard \starman ADAM .SDF image, `real' 32-bit
  real values. It can have the `BSCALE' and `BZERO' values, and
  `magic pixel values' indicating `bad' pixels.
  
4 Inref1
  (Default - null)
  
 The name of the first input `reference' image.
  
 - A null response is invalid.
 - This must be a `Real*4' image.
  
  The image must be a standard \starman ADAM .SDF image, `real' 32-bit
  real values. It can have the `BSCALE' and `BZERO' values, and
  `magic pixel values' indicating `bad' pixels.
  
4 Inref2
  (Default - null)
  
 The name of the second input `reference' image.
  
 - A null response is invalid.
 - This must be a `Real*4' image.
  
  The image must be a standard \starman ADAM .SDF image, `real' 32-bit
  real values. It can have the `BSCALE' and `BZERO' values, and
  `magic pixel values' indicating `bad' pixels.
  
4 Method
  (Default - `linear'       Choices - `linear:nearest:uniform')
  
  This interpolating from the grid of input image pixels onto the
  output image can be done in one of three ways:-
  
  NEAREST  -  Take the nearest input image pixel.
  LINEAR   -  Make a linear combination of the four input image
              pixels around the output image pixel.
  UNIFORM  -  Make a weighted mean of the nine adjacent input image
              pixels (linearly combined), so that the ouput image pixels
              have a constant noise value.
  
 For more information, see the `Pixel Interpolation' help at a higher
 level in the IMJOIN help.
  
4 Out
  (Default - null)
  
  The name of the file to contain the output image. If this
  is null, then no output image will be made.
  
  The image will be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  It will have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Outload
  (Default - null)
  
  The name of the output reference `scale' image. This is only
  asked for if an output reference image is made.
  
  This will be created as a `real' 32-bit image.
  
4 Outmode
  (Default - `new'       Choices - `new:reference')
  
 The program can do two things:-
   - The usual mosaicing in of new input images.
   - The less usual adding together of two `reference' images.
  
 The two modes are described in the higher levels of the IMJOIN help.
  
 The program is usally used in the `New' mode.
  
4 Outref
  (Default - null)
  
  The name of the output reference image. If this
  is null, then no output image will be made.
  
  This will be created as a `real' 32-bit image.
  
4 Outscale
  (Default - input scale, zero
   Range - 2 real numbers in the range -1.0e20 to 1.0e20)
  
  Input the and BZERO of the output image.
  
  The `true value' of a pixel = BSCALE*`stored value' + BZERO
  
4 Outtype
  (Default - same as input          Choice - `real:short')
  
  Should the output image be:-
  
  `real'    This is a 32-bit real image with a precision of about
            1 in 10 million, nad values between +/- 10**38
  
  `short'   This is a 16-bit integer image, with a precision of about
            1 in 60000. The numbers are stored on disk as integers
            between -32768 and +32767. They are used in the Starman
            programs as real numbers, by the use of BSCALE and BZERO,
            such that:-
                `used value' = BSACLE*'disk value' + BZERO
  
            The advantage of this is that if this precision is adequate
            then the files are half the size of `real' files. The
            problem is that one has to be constantly aware of the
            `digitisation' of the images when being stored on disk.
            Also, many other program packages do not use the
            BSCALE and BZERO, so cannot get the `true' values.
  
4 Scale
  (Default - 1.0               Range - 0.0 to 1.0e8)
  
 The scale you want the image to be put at. The image is
 multiplied by this before adding into the output (after
 subtracting any zero level).
  
 This is the help for `SCALE1', `SCALE2', ... `SCALE10',
 the scales for the input images.
  
 This could, for a series of images of different exposure times,
 be inversely proportional to the exposure times. Since the scale is
 multiplied into the pixel values, it is recommended that the longest
 exposure have a `scale' of 1.0, and the others in proportion. This
 avoids loosing accuracy when the output image (which is real) is
 later converted back to a short integer one.
  
4 Shift
  (Default - 'xyshift'              Choice - 'full:xyshift')
  
  What shift to apply to the input images?
  
   Option    Action
   ------    ------
   Full      Do a full shift with shift, rotation, stretch
   Shift     Do a shift with just an XY shift
  
  Of course, if no shift is to be applied, respond `xyshift' and
  put `0,0' as the shift.
  
4 Size
  (Default - 100,100 or largest needed          Range - 1 to 100000)
  
  If no reference image is input, then this is the size of
  the one to make. The default will be just large enough to take
  all the input images.
  
4 Title
  (Default - null         Choice - any)
  
  The title to add to the output image.
  
4 Titlel
  (Default - null         Choice - any)
  
  The title to add to the output reference load image.
  
4 Titler
  (Default - null         Choice - any)
  
  The title to add to the output reference image.
  
4 Xcoeff
  (Defaults - 0.0,1.0,0.0      Range -1.0e8 to 1.0e8)
  
 This is the help for `XCOEFF1', `XCOEFF2', ... `XCOEFF10',
 the X coefficents for the input images.
  
 The X transformation coefficents of the set to transform the
 input image coordinates to the reference image. These
 are in the form:-
  
     x1 = c1 + c2.x + c3.y
     y1 = c4 + c5.x + c6.y
  
 where: (x,y) are the coordinates in the input image.
        (x1,y1) are the coordinates in the reference image,
  
  The default is no translation, rotation or stretching:-
  
     x1 = 0.0 + 1.0*x + 0.0*y
     y2 = 0.0 + 0.0*x + 1.0*y
  
4 Ycoeff
  (Defaults - 0.0,0.0,1.0      Range -1.0e8 to 1.0e8)
  
 This is the help for `YCOEFF1', `YCOEFF2', ... `YCOEFF10',
 the Y coefficents for the input images.
  
 The Y transformation coefficents of the set to transform the
 first input image coordinates to the reference image. These
 are in the form:-
  
     x1 = c1 + c2.x + c3.y
     y1 = c4 + c5.x + c6.y
  
 where: (x,y) are the coordinates in the input image.
        (x1,y1) are the coordinates in the reference image,
  
  The default is no translation, rotation or stretching:-
  
     x1 = 0.0 + 1.0*x + 0.0*y
     y2 = 0.0 + 0.0*x + 1.0*y
  
4 Zero
  (Default - `no'           Choice - `yes:no')
  
  Do you want a `zero' level removed from the input image before
  scaling and adding to the output image?
  
3 Author
        Alan Penny             RAL         1991 March
2 Imkey
  
  This program inputs pixel values into an image from the keyboard.
  
  The user inputs the following information on the keyboard:-
  
  Whether there is an input image to put data into, or whether an
  entirely new image is to be made.
  
  The user then inputs the pixel values.
  
3 Parameters
  
  
4 In
  (Default - null)
  
  The name of the file containing the input image. A null
  response will mean that a new image is to be made.
  
  The input image must be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Invalxy
  (Default - last (start 1,1)      Range - 1 to max image side)
  
  Pixel XY position to put 'invaid' pixel magic value.
  
4 Level
  (Default - 0.0                range - -1.0e10 to 1.0e10)
  
  Level to add to all pixels in the new output image.
  
4 Out
  (Default - null)
  
  The name of the file to contain the output image.
  
  The image will be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  It will have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Outscale
  (Default - 1.0,0.0 or input image scale, zero
   Range -  -1.0e20 to 1.0e20
  
 Input the BSCALE and BZERO of the output image.
  
    the 'true' value of a pixel = BSCALE*'value' + BZERO.
  
4 Outtype
  (Default - same as input          Choice - 'real:short')
  
  Should the output image be:-
  
  'real'    This is a 32-bit real image with a precision of about
            1 in 10 million, nad values between +/- 10**38
  
  'short'   This is a 16-bit integer image, with a precision of about
            1 in 60000. The numbers are stored on disk as integers
            between -32768 and +32767. They are used in the Starman
            programs as real numbers, by the use of BSCALE and BZERO,
            such that:-
                'used value' = BSACLE*'disk value' + BZERO
  
            The advantage of this is that if this precision is adequate
            then the files are half the size of 'real' files. The
            problem is that one has to be constantly aware of the
            'digitisation' of the images when being stored on disk.
            Also, many other program packages do not use the
            BSCALE and BZERO, so cannot get the 'true' values.
  
4 Size
  (Default - 1,1               Range - 1 to 100000)
  
   As there is no input image, you have to tell the program
   how big an image you want.
  
4 Title
  (Default - input image title, or if none, 'Output from IMKEY'
   Choice - any)
  
  A character string (up to 50 characters) to be added to the output
  file as its 'title'.
  
4 Value
  (Default - present value         Range - -1.0e10 to 1.0e10)
  
  Pixel value to insert at this position?
  
4 Xy
  (Default - last (start 1,1)     Range - 0 to  max image side)
  
  Pixel XY position to put a value into?
  
  Respond 1,0 to input INVALID pixel, 0,1 to end.
  
3 Author
  
   Alan Penny            RAL       1994 July
2 Import
  
  In the ADAM system, the image descriptors are kept in
  separate sections, called `extensions'. Starman programs
  access only the `Starman extension'.
  
  If you are using Adam NDF images which have not been made by
  Starman, then if there are image descriptors in the one of the
  other ADAM extensions, then you will need to copy the descriptors
  into the STARMAN extension, where the Starman programs look for
  them.
  
  An example of this would be CCD FITS images read in with the
  KAPPA FITSIN program, when the descriptors would be in the FITS
  extension. This is, in fact, set as the default, a copy from the
  FITS extension to STARMAN extension.
  
  This program loads the contents on one 'extension' that contains a
  set of 'descriptors' into another 'extension'. It does not create
  a new image. Thus you need write access to the input image, as
  well as the usual read access.
  
  It has some suggestions for extension names for reading from and
  writing to, but you can copy between any extensions.
  
3 Parameters
  
4 Delete
  (Default - 'no'            Choice - 'yes:no')
  
  Delete the contents of extension (and the extension itself) that you
  are reading the descriptors from.
  
4 From
  (Default - 'fits'    Choice - 'fits:starman:figaro:other')
  
  The choice of extension to copy descriptors from.
  
4 In
  (Default - null)
  
  The name of the input/output image.
  
  The image must be a standard ADAM .SDF image. It must have
  both 'read' and 'write' permission.
  
4 In_exten
  (Default - null             Choice - any)
  
  The name of the extension to copy descriptors from.
  
  This is asked for if the input extension is not one of the
  standard ones (starman:fits:figaro).
  
4 Out_exten
  (Default - null              Choice - any)
  
  The name of the extension to copy descriptors to.
  
  This is asked for if the output extension is not one of the
  standard ones (starman:fits:figaro).
  
4 To
  (Default - 'starman'    Choice - 'fits:starman:figaro:other')
  
  The choice of extension to copy descriptors to.
  
3 Author
  
  Alan Penny               RAL           1994 June
2 Imrotate
  
  Rotates an image anti-clockwise by 90, 180, or 270 degrees.
  
3 Parameters
  
4 Degrees
  (Default - '90'      Choice - `90:180:270')
  
  Number of degrees anti-clockwise to rotate image.
  
4 In
  (Default - null)
  
  The name of the input image file.
  
  The input image must be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  
4 Out
  (Default - null)
  
  The name of the new file containing the output image.
  
  The output image will be a standard Starman ADAM .SDF image, with
  the same pixel types, either `real' 32-bit real values or `short'
  16-bit integer values, as the input image.
  
4 Title
  (Default - input image title, or if null, 'Output from IMROTATE'
   Choice  - any)
  
  Title to add to output image.
  
3 Author
         A.J.Penny  RAL             1991 June
  
  
2 Imsmooth
  
  Smooth an image to make a new image.
  
  Smoothing by:-
  
    - 'top-hat' in a rectangular box
    - median in a rectangular box
    - circular Gaussian profile in a rectangular box
  
3 Method
  
  Method of smoothing:-
  
   Name    Function
   ----    --------
   box     Applies a 'top-hat' smoothing, running a rectangular
           box over the image, calculating the average of this box,
           and applying that value at the pixel. Clearly the box
           must have sides of an odd number of pixels, so that the
           box is centered on the pixel.
  
   median  Applies a median smoothing, running a rectangular
           box over the image, calculating the median of this box,
           and applying that value at the pixel. Clearly the box
           must have sides of an odd number of pixels, so that the
           box is centered on the pixel.
  
   gauss   Applies a Gaussian smoothing, running a rectangular
           box over the image, calculating for the pixel at the centre
           of the box what contribution it makes to the individual
           pixels in the box, if were spread by a Gaussian point-spread-
           function. (This is scaled so that the total contributions
           to all the pixels in the box sum to the original pixel
           value. Thus a flat image would give an identical output image.)
           Clearly the box must have sides of an odd number of pixels, so
           that the box is centered on the pixel.
  
  The problem of the edge of the image, for both methods is dealt with
  by assuming that the input image 'spreads' out beyond its limits, with
  the values at the edges.
  
  `Invalid' pixels in the rectangular box are ignored, unless they
  are all invalid, in which case the output value is set as invalid.
  
3 Parameters
  
4 Box
  (Default - 3,3        Range - 1 to max side of image)
  
  The XY size of the rectangular box sued in 'top-hat'
  smoothing. The sides must have an odd number of pixels.
  
4 Gbox
  (Default - 10*rad,10*rad    Range - 1 to max side of image)
  
  The XY size of the rectangular box sued in 'gaussian'
  smoothing. The sides must have an odd number of pixels.
  
  'rad' here is the Gaussian radius of the smoothing function.
  
4 Gradius
  (Default - 2.0              range - 1.0e-5 to 1.0e5)
  
 Radius of the Gaussian to use in the Gaussian smoothing.
  
 This is radius at which the profile is 1/e of its peak height.
  
4 In
  (Default - null)
  
  The name of the input image file.
  
  The input image must be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Method
  (Default - 'box'         Choice - 'gauss:box:median')
  
  Method of smoothing.
  
   Name    Function
   ----    --------
   box     Applies a 'top-hat' smoothing, running a rectangular
           box over the image, calculating the average of this box,
           and applying that value at the pixel. Clearly the box
           must have sides of an odd number of pixels, so that the
           box is centered on the pixel.
  
   median  Applies a median smoothing, running a rectangular
           box over the image, calculating the median of this box,
           and applying that value at the pixel. Clearly the box
           must have sides of an odd number of pixels, so that the
           box is centered on the pixel.
  
   gauss   Applies a Gaussian smoothing, running a rectangular
           box over the image, calculating for the pixel at the centre
           of the box what contribution it makes to the individual
           pixels in the box, if were spread by a Gaussian point-spread-
           function. (This is scaled so that the total contributions
           to all the pixels in the box sum to the original pixel
           value. Thus a flat image would give an identical output image.)
           Clearly the box must have sides of an odd number of pixels, so
           that the box is centered on the pixel.
  
  The problem of the edge of the image, for both methods is dealt with
  by assuming that the input image 'spreads' out beyond its limits, with
  the values at the edges.
  
  `Invalid' pixels in the rectangular box are ignored, unless they
  are all invalid, in which case the output value is set as invalid.
  
4 Out
  (Default - null)
  
  The name of the new file containing the output image.
  
  The output image will be a standard Starman ADAM .SDF image, with
  the same type as the input image, either `real' 32-bit real values,
  or `short' 16-bit integer values.
  It will have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels, of the input image
  
4 Title
  (Default - input image title, or if null, 'Output from Imsmooth'
   Choice  - any)
  
  Title to add to output image
  
  
3 Author
         A.J.Penny  RAL             1994 July
  
  
2 Imstat
  
  Calculates statistics of an area of the image
  
  Takes an input area of an image, and calculates the mean and
  standard deviation, minimum and maximum pixel values (with their
  locations), the number of valid and invalid pixels, and the sum
  of the valid pixel values.
  
  The results are typed out, and also put as parameters of the
  program
  
3 Output_parameters
  
   These are stored as parameters of the program. They are:-
  
   Max, Mean, Min, Nbad, Ngood, Stddev, Sum, Xmaxloc, Xminloc,
   Ymaxloc, Yminloc
  
3 Parameters
  
4 In
  (Default - null)
  
  The name of the input image file.
  
  The input image must be a standard Starman ADAM .SDF image, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Xrange
  (Default - 1,input image X size     Range - 1 to input image X size)
  
4 Yrange
  (Default - 1,input image Y size     Range - 1 to input image Y size)
  
  Y start and Y end of the area of image to analyse
  
4 OUTPUT_PARAMETERS
  
4 Max
  (output parameter)
  
  Set by program. The maximum valid pixel value in the
  selected area.
  
4 Mean
  (output parameter)
  
  Set by program. The mean of the valid pixel values in the
  selected area.
  
4 Min
  (output parameter)
  
  Set by program. The minimum valid pixel value in the
  selected area.
  
4 Nbad
  (output parameter)
  
  Set by program. The number of invalid pixels in the selected area.
  
4 Ngood
  (output parameter)
  
  Set by program. The number of valid pixels in the selected area.
  
4 Stddev
  (output parameter)
  
  Set by program. The standard deviation of the valid pixel values in
  the selected area.
  
4 Sum
  (output parameter)
  
  Set by program. The sum of the values of the valid pixels in the
  selected area.
  
4 Xmaxloc
  (output parameter)
  
  Set by program. The X location of the pixel with the maximum value
  in the selected area.
  
4 Xminloc
  (output parameter)
  
  Set by program. The X location of the pixel with the minimum value
  in the selected area.
  
  X start and X end of the area of image to analyse
  
4 Ymaxloc
  (output parameter)
  
  Set by program. The Y location of the pixel with the maximum value
  in the selected area.
  
4 Yminloc
  (output parameter)
  
  Set by program. The Y location of the pixel with the minimum value
  in the selected area.
  
  
3 Author
         A.J.Penny  RAL             1991 November
  
  
2 Imtype
  
  This program converts an image whose pixel values are stored
  in one type  into one whose pixel values are stored as another type.
  
  The types it can deal with are:-
  
     Type              Name
     ----              ----
     32-bit real       REAL
     32-bit integer    INTEGER
     16-bit integer    SHORT
  
 It deals with values above and below the range of permitted values
 in the output image, by truncating them at the edge of the permitted
 ranges. Permitted ranges:- INTEGER -2147483648 to 2147483647
                             SHORT   -327678 to 32767
  
 For the conversion from Real to Integer or Short, and from Integer
 to Short, there is the possibility of overflow of the numbers, so
 they may be scaled by the formula
  
            `stored value' = (`true value'-BZ)/BS
  
 where the `stored value' is the one that must not overflow the
 output data format limits.
  
 It translates the 'INVAL' parameter to and from real and integer.
  
 If an 'INVAL' value lies outside the permitted output ranges, this
 is dealt with by putting it at the format pixel value limits.
  
  
3 Output_type
  
  The type of the output image can be:-
  
  'real'    This is a 32-bit real image with a precision of about
            1 in 10 million, nad values between +/- 10**38
  
  'short'   This is a 16-bit integer image, with a precision of about
            1 in 60000. The numbers are stored on disk as integers
            between -32768 and +32767. They are used in the Starman
            programs as real numbers, by the use of BSCALE and BZERO,
            such that:-
  
                'used value' = BSACLE*'disk value' + BZERO
  
            The advantage of this is that if this precision is adequate
            then the files are half the size of 'real' files. The
            problem is that one has to be constantly aware of the
            'digitisation' of the images when being stored on disk.
            Also, many other program packages do not use the
            BSCALE and BZERO, so cannot get the 'true' values.
  
  'integer' This is a 32-bit integer image, with a precision of about
            1 in 4 thousand million. The numbers are stored on disk as
            integers between -2147483648 and +2147483647. Such images
            cannot be accessed by Starman programs.
  
  
3 Parameters
  
4 Auto
  (Default - 'no'              Choice - 'yes:no')
  
  Get minimum and maximum of image, so that the program can suggest
  'BSCALE' and 'BZERO' values that will make the 'short' or
  'integer' output image retain the maximum precision, whilst still
  not having values too large (-ve or +ve) to fit into the 16 or
  32 bits.
  
4 In
  (Default - null)
  
  The name of the input image.
  
  The input image must be a standard Starman ADAM .SDF image, with
  `real' 32-bit real values, or `integer' 32-bit integer values, or
  `short' 16-bit integer values.
  It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Out
  (Default - null)
  
  The name of the output image.
  
  The image will be a standard Starman ADAM .SDF image, with
  `real' 32-bit real values, or `integer' 32-bit integer values, or
  `short' 16-bit integer values.
  It will have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Outscale
  (Default - 1.0,0.0 or input image values
   Range -  -1.0e10 to 1.0e10)
  
  The 'scale' and 'zero' of the pixel values in the output image.
  
  Where the 'true' value of a pixel = BSCALE*'disk value' + BZERO.
  
  These scale and zero are defined by the user, with suggested values
  of 1.0/0.0, or as those of the input image.
  
  These numbers are put as descriptors to the output image as
  'BSCALE' and 'BZERO'
  
4 Outtype
  (Default - different from input type  Choice - 'real:integer:short')
  
  Should the output image be:-
  
  'real'    This is a 32-bit real image with a precision of about
            1 in 10 million, nad values between +/- 10**38
  
  'short'   This is a 16-bit integer image, with a precision of about
            1 in 60000. The numbers are stored on disk as integers
            between -32768 and +32767. They are used in the Starman
            programs as real numbers, by the use of BSCALE and BZERO,
            such that:-
  
                'used value' = BSACLE*'disk value' + BZERO
  
            The advantage of this is that if this precision is adequate
            then the files are half the size of 'real' files. The
            problem is that one has to be constantly aware of the
            'digitisation' of the images when being stored on disk.
            Also, many other program packages do not use the
            BSCALE and BZERO, so cannot get the 'true' values.
  
  'integer' This is a 32-bit integer image, with a precision of about
            1 in 4 thousand million. The numbers are stored on disk as
            integers between -2147483648 and +2147483647. Such images
            cannot be accessed by Starman programs.
  
4 Range
  (Default - 'no'          Choice - 'yes:no')
  
  Calculate range of input data, i.e. its maximum and minimum
  pixel value?
  
4 Title
  (Default - input image title )
  
  The title to be attached as a header to the output image.
  
3 Author
  
  Alan Penny               RAL           1991 April
2 Imweed
  
  Set range of pixels values to `invalid'.
  
  Set those pixels to `invalid', whose values are within a range
  of pixel values.
  
3 Parameters
  
4 In
  (Default - null)
  
  The name of the input image.
  
  The input image must be a standard Starman ADAM .SDF image, with
  `real' 32-bit real values, or `short' 16-bit integer values.
  It can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
4 Out
  (Default - null)
  
  The name of the output image.
  
  The image will be a standard Starman ADAM .SDF image, with the
  type of the input image either `real' 32-bit real values, or `short'
  16-bit integer values.
  It will have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels, of the input image.
  
4 Range
  (Default - 0.0,0.0          Range - -1.0e20 to 1.0e20)
  
  Range of pixel values, such that if a pixel had a value within that
  range, the pixel is set to `invalid'.
  
4 Title
  (Default - input image title )
  
  The title to be attached as a header to the output image.
  
3 Author
  
  Alan Penny               RAL           1991 April
1 Phot_progs
  
 These are the Starman programs specifically designed for
 stellar photometry.
  
2 Addstars
  
  
 This program adds or subtracts stars into an image. Noise can
 be added to these stars. A sky (with noise) can be added, as can a
 separate noise level, and as can a separate input image.
  
 The stars are input via a file with a table of X,Y positions and
 heights. A common star profile can be used to add the stars,
 or they can all have individual profiles (which profiles are fed in
 as extra parameters of the star table in addition to the normal
 profile image file input).
  
 The program takes care of pixel averaging (for small radius stars) and
 and calculates the profile out to the point where it has a value of 0.2.
  
3 Method
  
 Each star is given a profile, and an x,y position and a height. Then
 for each pixel near the star, the mean intensity of the star is
 calculated. If the radius is small, then when the profile is
 changing rapidly the mean is made from calculations of sub-pixel
 values in the pixel.
  
 Then this mean is then added or subtracted from each pixel.
  
 This is done for all pixels round the star, out to the place where
 the star value is 0.2.
  
  
 The mathematical expression of this star value is:-
  
  
          -                                      -
         l                           QP           l
         l         1              -d3             l
 I  =  A.l   -------------  +  QH.e     + F(x,y)  l
         l         P(1+d2)                        l
         l   1 + d1                               l
          -                                      -
  
  
  
      where       A is the star height
                  X0,Y0 are the star centre
  
                  d1 = sqrt((x1/RX)**2+(y1/RY)**2)
                  d2 = sqrt((x1/PRX)**2+(y1/PRY)**2)
  
                  x1 = (x-X0).cos(THETA) + (y-Y0).sin(THETA)
                  y1 = -(x-X0).sin(THETA) + (y-Y0).cos(THETA)
  
                  d3 = sqrt(((x-X0)/QR)**2+((y-Y0)/QR)**2)
  
                  F  = an empirical function. Unless the star is
                       distorted, this is zero, and even if the star
                       is distorted, it is usually very small.
  
                  QH is usually small, of the order of 0.01
                  P and QP are usually about 2
                  the PRs are usually about 6*the Rs
                  QR is usually greater than 5*the Rs
  
  
  
   If noise is wanted in the star images, then each pixel can be looked
   at and Poisson noise added. The pixel are treated as
   scaled levels. Thus the Poisson noise is calculated as if each
   pixel value is the photon counts divided by some scaling.
  
   The sky is added as a flat back ground with optional Poisson noise
   (scaled as for the stars, but with a different scaling factor).
  
   A separate noise level (not scaled) can be added.
  
   An input image can be added.
  
  
3 Use
  
 1. Input an image to add to, or input the size of the new image to make.
  
 2. Feed the list of stars as a list of (X,Y star positions, and heights,
    [and optionally profile]).
  
 3. Feed in a profile file.
      If the list of star positions has profile parameters for each star,
      then they are adopted for each star, otherwise the standard
      profile is used for all the stars. The star heights must be the
      actual heights.
  
 4. Choose whether or not to:-
  
     a) use the profile map
     b) use the profile file
     c) override any profile parameters in the input star position table
     d) have the stars as positive or negative stars
     e) feed in any scaling for the star noise
     f) feed in any sky background, and any scaling for the sky noise
     g) feed in the standard deviation for any extra sky noise
  
 5. Specify the output image.
  
3 Parameters
  
4 Add
  (Default - 'Add'       Choices - 'Add/Sub' )
  
  Do you want the stars to be added into, or subtracted from the
  image?
  
4 Domap
  (Default - 'Yes'    Choices - 'Yes/No')
  
  Whether to use the empirical profile map in the profile file.
  
4 In
  
  (Default 'null'. )
  
  The name of the file containing the image to add stars to.
  
  The image has to be a .SDF file. This is a 'short' 16-bit integer*2
  image or a 'real' 32-bit real*4 one.
  
  If a null response is given, then no image is input and a new one of
  a size defined by the user and having a given flat background is
  used to add the stars to.
  
4 Instars
  
  (Default - 'null')
  
  The name of the file containing the table of star positions
  and heights, and optionally profiles.
  
  The x, y, heights must either be the first three parameters, or
  there must be pointers to them in the standard header format of
  parameter 'HEAD00n' being X, Y, and HEIGHT for parameter being in
  column n.
  
  If the profile parameters are there, then the list must have the
  standard profile headers RX, RY, P, PRX, PRY, THETA, QH, QR, QP,
  MAPNUM, MAPX, MAPY, MAGNIF.
  
4 Out
  
  The name of the new file to contain the output image.
  
 This will be an ADAM .SDF image. It will be 32-bit real (real) or
  16-bit integer (short) format depending on the users choice -
  through 'OUTTYPE'.
  
4 Outtype
 (Default - 'real'           Choice - 'real:short')
  
 Should the type of the output image be 'real', with 32-bit Reals
 or 'short' with 16-bit integers?
  
4 Pixnoise
  (Default - 0.0       Range - 0.0 to 1.0e8)
  
  The standard deviation of any extra Poisson noise to be added
  to the sky.
  
  This is = std dev of (true no of detected photons in pixel).
  
  This may not be the std dev of the actual sky counts, as the
  `SKYGAIN' parameter, which is used to translate the actual pixel
   counts into their Poisson equivalent, may not be 1.0.
  
  The Std dev of the actual pixel counts will be = `Pixnoise'/`Skygain'
  
  If 0.0 is entered, no extra noise is added
  
4 Profile
  
  (Default - 'null')
  
  The name of the file containing the image with the
  standard star profile.
  
  This must not be null. (Although sometimtes its profile may never
  be used, in the case if, for all the stars, it is overridden by
  their own (optional) profiles contained in the 'INSTARS' file.)
  
  The image contains the parameters of the profile as its
  descriptors, and the empirical map as its pixel values. It is
  a 16-bit integer image, usually made as the output of the
  'profile' program.
  
4 Pyes
  (Default - 'Yes'    Choices - 'Yes/No')
  
  Whether to have the profile parameters in the profile file override
  any profile parameters in the star list.
  
4 Seed
  (Default - 1234567891    Range - 1200000001 to 1400000001)
  
  The random number generator seed. This should be an odd number
  between 1,200,000,001 and 1,240,000,001.
  
  This applies to the Star images or the sky background, depending
  on the previous answer. It is only asked for if the stars or
  sky are/is to be added with noise. The seed is only asked for
  for the sky noise, if there is no star noise.
  
  The seed only has to supplied once, if at all, as the random
  number generator is not reset after doing the stars.
  
4 Size
  
  (Default - 100,100.       Range - 1 to 4096)
  
  X and Y size of new image to add stars to.
  
  This is only asked for if there is no input image, and a  new
  one is to be made.
  
4 Sky
  (Default - 0.0 if input image, 100.0 if no input image.
   Range - -1.0e9 to +1.0e9)
  
  Sky value to add to output image.
  
4 Skygain
  (Default - 1.0     Range - 0.0 to 1.0e8)
  
  The conversion, for the sky, between the numbers that go in
  the image and the number of independant Poisson events.
  
  This is = (true no of detected photons in pixel)/(pixel counts).
  
  One way this can be is for a CCD, where it would be
             = electrons/adu
  
  If 0.0 is entered, then no sky noise is added
  
4 Skypois
  (Default - 'yes'           Choice - 'yes:no')
  
  Add in noise coming from the Poisson nature of the sky flux?
  
4 Stargain
  (Default - 1.0         Range - 0.0 to 1.0e8)
  
  The conversion, for the stars, between the numbers that go in
  the image and the number of independant Poisson events.
  
  This is = (true no of detected photons in pixel)/(pixel counts).
  
  One way this can be is for a CCD, where it would be
             = electrons/adu
  
  If 0.0 is returned, then no noise is added.
  
4 Starpois
  (Default - 'yes'           Choice - 'yes:no')
  
  Add in noise coming from the Poisson nature of the star flux?
  
4 Title
 (Default - Input image title or 'Output from ADDSTARS')
  
  Title to add to the output image.
  
3 Author
  
           A J Penny               RAL		1990-11-19
2 Automag
  
  This does simple aperture photometry on stars in an image. It works
  automatically, finding the stars, doing the aperture photometry and
  outputting the results. It uses the (optional) presence of an
  exposure time descriptor to correct the magnitude to that for a
  1 second exposure.
  
  It can also, depending on the presence of the appropriate information
  in the image descriptors and the users wish:-
  
   - Find the Zenith distance (either from the image or a standards file)
   - Find the Filter used
   - Apply the extinction correction
   - Look up the object name in a file and find the appropriate
      standard magnitude, which it then compares to the measured magnitude
   - Output results to a text file as well as the terminal
  
  It works best if the stars are widely dispersed in the image.
  A density of one star per 100x100 pixel area is fine, although
  somewhat higher densities are acceptable.
  
  
3 Image_Descriptors
  
  The image can contain much necessary ancillary information as
  descriptors. This is used by the program. Unfortunately there is
  no standard naming or format scheme. So the program is as flexible
  as possible on the input. The user can define the names of the
  descriptors carrying the relevant information.
  
  The user can even say where in some descriptor the information is.
  This is because sometimes information, such as the object name, does
  not take up the entire descriptor, but is placed within the descriptor.
  
  Descriptor Content      Default Name    Select Location?
  ------------------      ------------    ----------------
  Object name             OBJECT              yes
  Right Ascension         RA                  no
  Declination             DEC                 no
  Exposure time           EXPOSURE            yes
  Sidereal time           SIDTIME             yes
  Filter name             FILTER              yes
  
3 Input
  
  The input image is the standard Starman image file. It can have the
  'BSCALE' and 'BZERO' pixel value scaling, and the bad pixel magic
  value 'INVAL'.
  
  The optional standards file is a Starman table (XYlist) of the
  positions and magnitudes of stars. It has to have:-
       - the standard Identifiers (star names)
       - the Right Ascension of the star (in radians)
       - the Declination of the star (in radians)
       - the Equinox of the position (Julian epoch - e.g. 1990.234)
       - at least one magnitude
  
  The magnitudes of different colours must be as magnitudes, not colours.
  I.e., a star with V=16.00 and B-V of 1.00 would have two entries, one
  for V=16.00 and one for B=17.00.
  
  The columns containing the magnitudes must have descriptors telling
  what waveband is in each column. In the example above, for example, the
  V column could have a descriptor with 'V', and the B column one of 'B'.
  
  The column descriptors must be in the standard Starman table style, as
  HEADxxx, where xxx = 001, 002, etc. Thus in the example above the
  descriptors would be:-
          name      content
          ----      -------
          HEAD001   RA
          HEAD002   DEC
          HEAD003   EQUINOX
          HEAD004   V
          HEAD005   B
  
  
3 Method
  
  MEASURING THE STARS
  -------------------
  
  It finds stars as groups of pixels which are more than a certain value
  above the sky level. It then finds the centre of these groups, and puts
  an aperture round them, giving the flux in the aperture. It then
  finds the sky level in up to four apertures located around the star,
  finds the mean sky level, deducts that from the star aperture flux, to
  give the star flux.
  
  This flux is then turned into a magnitude by the formula
  
               Magnitude = 30.0 - 2.5*log  (flux)
                                         10
  
  CORRECTING FOR EXPOSURE TIME
  ----------------------------
  
  This magnitude is then corrected for the exposure time. The flux
  is changed to that it would have had in a 1 second exposure, that is
  
               Magnitude = magnitude + 2.5*log (exp time)
                                              10
  
  CORRECTING FOR EXTINCTION
  -------------------------
  
  If the user desires, then the magnitude can be corrected for extinction.
  
  This is done by taking the RA and Dec and Sidereal time from the image
  descriptors, and working out the Sec Z of the exposure. Then the filter
  that was used in the exposure is found from an image descriptor, and
  used with the extinction input by the user for such a filter to work
  out the extinction.
  
  The Sec Z is worked out in first order terms as:-
  
                                   1.0
      SecZ =    ------------------------------------------
                sin(lat)*sin(dec)+cos(lat)*cos(dec)*cos(ha)
  
  A corrected magnitude is then worked out as:-
  
            Magnitude = magnitude - Extinction*(SecZ-1.0)
  
  
  It is possible to get the image RA and Dec not from the image
  descriptors, but from the standards file. In this case the
  star name in the image descriptors is taken, and that name looked
  for in the standards file.
  
  
  CHECKING AGAINST A STANDARD MAGNITUDE
  -------------------------------------
  
  If the user desires, the standard magnitude of the star in the
  waveband used may be found from the input standards file. In this
  case, the star name in the image descriptors is taken, and that
  name looked for in the standards file. The magnitude in the
  waveband used, for that star is then output, together with the
  difference between the `observed' magnitude and the standard
  magnitude.
  
4 Date
  
 If a standard magnitude file is used, then the user has to input the
 date of the exposure. This is because there is no standard format
 for date formats. It should be input in format YYYY/MM/DD. A default
 reply is acceptable.
  
 The date is used for the precession of the standard star positions
 to the date of the observation.
  
4 Error
  
 The error in the output magnitude is calculated.
  
 The calculations are done on the assumption that the pixel values in
 the image are the result of a Poissonian noise signal. There are two
 modifiers to this. First, that the numbers in the image have been scaled,
 so that a gain is needed to reconstruct the original Poissonian values.
 Second, that an extra source of noise has been added to each pixel. Thus
 if a pixel has a raw value of k (and the image has scale of BSCALE, and
 zero of BZERO), then the true pixel value is BSCALE.k + BZERO. Then if
 the Poissonian gain is GAIN, and the extra noise is NOISE, the noise in
 the pixel is:-
  
        square root[GAIN.(BSCALE.k+BZERO) + NOISE.NOISE]
  
 Following on from this assumption, the error in the star magnitude
 is calculated as:-
  
  The variance of the sky estimate is:-
      varsky = [(BSCALE.skyfl+BZERO).GAIN + skypix.NOISE.NOISE]/skypix
  
 The variance of the star estimate is then:-
      varstar = (BSCALE.starfl+BZERO).GAIN + starpix.NOISE.NOISE +
                 starpix.varsky
  
  The RMS star error is then:-
      err = sqrt(varstar)/((BSCALE.starfl+BZERO)*GAIN)
      RMS = 2.5.alog10(1.0+err)
  
            where   skyfl   = total flux in all used sky apertures
                    starfl  = total flux in star aperture
                    skypix  = total no of pixels in all used sky apertures
                    starpix = no of pixels in star aperture
  
4 Exposure
  
 The exposure time is used for correcting the magnitude of the star.
 This is done by calculating the flux that the star would have had
 if the exposure had been 1 second long.
  
 The actual exposure time used in this calculation is not
 necessarily that in the image descriptor. First of all the image
 exposure time descriptor is read, and then offered to the user as
 the default exposure time. The user can then accept this, or input
 any value she likes. The point of allowing the user to do this is
 that sometimes the time loaded in the exposure time descriptor is
 missing or wrong.
  
 There is then added an extra time, input by the user via the 'EXPOFF'
 parameter, to give the final adopted exposure time. This extra offset,
 which is added to all the times of the images measured, is intended
 to allow for shutter timing mechanisms which introduce an offset
 between the actual and recorded exposure times.
  
4 Star_RA_and_Decs
  
 The program takes the position of the star either to be the
 position in the standards file, precessed to the date of the
 observation, or the RA, Dec of the image as noted in its header.
 This second method depends on the telescope pointing being good
 and the offset of the star in the image from the (RA,Dec)
 reference point not to be too large.
  
 If both the standard file and image position descriptors are
 present, then the user has the option of deciding which will
 be used to determine the position.
  
4 Sec_Z
  
  The Sec Z is worked out in first order terms as:-
  
                                   1.0
      SecZ =    -----------------------------------------------
                sin(lat)*sin(dec)+cos(lat)*cos(dec)*cos(ra-sidt)
  
4 Sky_levels
  
  LEVEL IN A SINGLE APERTURE
  --------------------------
  
 The sky levels are calculated for each sky aperture. All 'good'
 pixels are taken in the area, and the mean taken.
  
 It is important that this is the mean, because these sky levels
 will be used to subtract a sky from the star aperture. If a
 value was used which discarded high values (due to faint stars),
 such as medians or other methods, then there will be a systematic
 error introduced into the star magnitudes.
  
 This is because there will be faint stars in the star aperture
 and these will be simply added in, so the same proceedure must
 be used for the sky apertures.
  
 The problem of a bright star falling by chance in a sky aperture
 is dealt with in the averaging described below.
  
 MEAN LEVEL USED
 ---------------
  
 When more than one sky aperture is used, then a mean level is
 calculated. For the case of two apertures, a simple mean is
 taken. For three or four apertures, the two apertures whose
 levels are closest together is taken, and then any other
 aperture whose level is within a user input fractional tolerance
 of that level. The default value for this tolerance is 0.1 of the
 star flux. The value used is input through AVLIM.
  
 Then the mean is made from the selected apertures.
  
 RECORD OF DIFFERENCES
 ---------------------
  
 To see if any of the apertures is contaminated (say by a bright
 star), the magnitudes that would have been calculated if each
 aperture in turn was taken as the sole sky level is calculated.
 The differences of these from the actually calculated mean is
 calculated and typed out (as the 'Sk1', 'Sk2', etc.). So the
 user can see from these if there was any contamination that has
 disturbed the mean.
  
 If there are more than two apertures, often only one is contaminated,
 and this is thrown out by the averaging process described above. So
 the mean may well be correct. A good indicator of this is that two or
 three of the apertures show very good agreement with the mean, and
 one is distant from it. This tells you that the mean was made without
 the discordant aperture.
  
4 Sky_locations
  
  The number and location of the sky apertures is defined by the
  user. Up to four apertures may be used. These are distributed
  in an X-Y frame around the star aperture, where the X-Y offsets
  give the X-Y distances in pixels between the star aperture
  centre and the sky aperture centres.
  
  The default is a star aperture diameter of 40 pixels, and four
  sky apertures, each of 20 pixels diameter, located to the left
  right, up and down from the star aperture with star-sky
  centre distances of 40 pixels. Thus the sky apertures come within
  10 pixels of the star aperture.
  
4 Star_finding
  
  The program finds stars by looking for blocks of pixels above the
  sky level.
  
  The position found by the program is the centroid of the contiguous
  pixels above the threshold level above the overall image sky level.
  This centroid gives equal weight to all these pixels, regardless
  of their pixel values. The search for contiguous pixels is only
  done in a box of size which is input by the user (with a default of
  side 100 pixels). This box is such that the first pixel found
  (in a search along X lines, goin up in the Y direction line-by-line),
  is centered in the box in the X direction, and at the bottom of
  the box in the Y direction.
  
  If the star images are reasonably in focus, then it is possible
  to refine this position by fitting a Gaussian with a variable
  profile at that location.
  
  This gives a more accurate centering, but has the risk that the
  star image may be so strange as to cause the Gaussian fitting
  subroutine to fail catastrophically.
  
  Also if the stars are not in focus, then the fit may well fail
  or give the wrong position.
  
  Stars with positions within a box of side 16 pixels centered on any
  other star found are rejected.
  
  Up to 200 stars can be found. If there are more then they are
  ignored. There is the possibility that this may result in less than
  200 stars, as some of them may be close to others, and will thus
  be ignored.
  
3 Output
  
 The output of the program is typed to the terminal, and can optionally
 be output to a text ASCII file (with a .DAT modifier). The file contains
 a copy of what is put out to the terminal, except that there is one line
 of header information at the start.
  
 The listing below gives an example of the output:-
  
 -----------------------------------------------------------------------
 Example Output of AUTOMAG
  
  
 Image name is :-  fred_1
  Star     X      Y        Top     Mag   Rms    Sk1   Sk2   Sk3   Sk4
    1    100.0  100.0    1000.0  23.263 0.003 -0.001 0.002-0.003 0.003
  
  Filter= V :Sec Z= 1.059  :Exp time= 101.000
  Image:-    RA= 13  0 29   :Dec= +12 12 12   :Sid T= 12 34 56
   File:-    RA= 12 13 23   :Dec= +11 27 30
  
  Raw Mag    Sec Z Corrected     Std     Mag-Std
      23.263    23.245          18.100   5.145
 -----------------------------------------------------------------------
  
  Comments:-
    - The 'Sk1', 'Sk2', etc., give the corrections that would have to be
      added to the mean magnitude, if the sky level in the associated
      sky aperture alone were to be used to estimate the sky level.
    - In this particular case, the 'File' position was selected to be
      used instead of the 'Image' position in calculating the SecZ.
    - The final magnitude has been calculated using the mean sky
      level from all four sky apertures, as they all lie with a
      user input tolerance (default +/- 10%) of the mean.
    - The exposure time put out is the image exposure time (perhaps
      changed by the user) plus the offset input by the user via the
      'EXPOFF' parameter. It is then time used in the calculations.
  
3 Use
  
  The program starts off by asking you what type of measuring
  do you want to do:-
  
     - Measure one or a number of images with the same parameters
     - Use the Gaussian centering after the centroid finding
     - Make an output results file
     - Calculate the zenith distance of the image
     - Use the image filter to determine the extinction correction
        (needs SecZ calculation)
     - Use a standard position and magnitude file to calculate the
        difference from the standard magnitude (needs SecZ and filter
        calculation)
  
  It then asks you for a number of parameters associated with the
  the star finding and measuring process.
  
  Then there are a number of sections of parameter questions that are
  asked depending on which of the measuring options you have chosen
  
    - Output file
    - Zenith distance (Star position in RA and Dec and site latitude)
    - Use of filters for extinction calculations
    - Use of standard file for standard magnitude calculations
  
  Then the name of the input image file is asked for, and then the user
  is given the chance to correct the exposure time.
  
  The program then does the calculations and outputs the results to
  the terminal and (optionally) the file.
  
  If the user is doing more than one image, the program loops back
  to ask for the new image file name ( and the new corrected exposure
  time), and does the new calculations. This loop is repeated until
  a blank is input as the file name.
  
3 Parameters
  
4 Avlim
  (Default - 0.1              Range 0.0 - 1.0e8)
  
  When averaging the flux estimates of the star when subtracting
  each of the (up to) four sky levels, how far away (in fractional terms
  - roughly magnitudes) can a measure be from the mean of the two nearest
  pair of estimates? If an estimate is more than 'avlim' times the mean
  flux, it is rejected and the mean recalculated. This stops if none are
  that far away of if only two estimates left.
  
4 Box
  (Default - 100              Range - 1 to 10000)
  
  Side of box within which to search for a star's pixels.
  
  The search for contiguous pixels above the threshold level which
  denote a star is only done in a box of this size. This box is such
  that the first pixel found (in a search along X lines, goin up in
  the Y direction line-by-line), is centered in the box in the X
  direction, and at the bottom of the box in the Y direction.
  
  If the box is too large, the search takes too long. If it is too
  small (in relation to the star image size), then star pixels may be
  missed, skewing the location of the centroid.
  
  The default is probably a good compromise for 'normal' images. However
  for very out-of-focus images, the star 'size' may be larger than than
  100 pixels, so you should select a larger box.
  
4 Date
  (Default - '2001/01/01'       Range - see below)
  
  The date of the observation. This is asumed to be the same for all
  of the images to be used. It is input as Julian epoch number. The
  month must be in the range 01 to 12, and the day 01 to the end of
  the month input. The format must be as the default - 'YYYY/MM/DD'.
  
  This is used to precess the standards file positions to the date of
  the observation, so it does not need to be very precise.
  
4 Decname
  ( Default - 'DEC'        Choice - see below)
  
  The name of the descriptor in the image file where the Declination
  of the exposure may be found.
  
   'none' is valid entry. The Declination will then be got from the
   standards file, if this image has a star name and that name is in it.
  
4 Docentre
  (Default - 'No'             Choice - 'Yes/No')
  
  Should the position found by the program be refined by fitting
  a Gaussian to the location?
  
  The position found by the program is a centroid of the contiguous
  pixels above the threshold level above the overall image sky level.
  (For details on this see the 'Method - Star Location' help section.)
  
  If the star images are reasonably in focus, then it is possible
  to refine this position by fitting a Gaussian with a variable
  profile at that location.
  
  This gives a more accurate centering, but has the risk that the
  star image may be so strange as to cause the Gaussian fitting
  subroutine to fail catastrophically.
  
  Also if the stars are not in focus, then the fit may well fail
  or give the wrong position.
  
4 Dofile
  (Default - 'No'             Choice - 'Yes/No')
  
  Output a copy of the results, which are put on the output terminal,
  to an output text ASCII file?
  
4 Dofilt
  (Default - 'No'             Choice - 'Yes/No')
  
  Get the filter information in the image descriptors?
  
  This is used (together with the calculated SecZ and input extinction)
  to calculate the extinction correction to be applied to the measured
  magnitude.
  
4 Domult
  (Default - 'No'             Choice - 'Yes/No')
  
  Do calculations on a number of input images ('Yes'), or on just one
  ('No')?
  
4 Dosecz
  (Default - 'No'             Choice - 'Yes/No')
  
  Calculate the zenith distance (as SecZ) of the exposure?
  
4 Dostds
  (Default - 'No'             Choice - 'Yes/No')
  
  Use the magnitudes in a standards file to calculate the difference
  between the observed magnitude and the standard magnitude?
  
4 Exploc
  (Default - 1,79              Range - 1 to 256)
  
  The location in the image exposure time descriptor of the
  characters which give the exposure time.
  
  If they are the only characters in the descriptor, then the
  default can be taken.
  
4 Expname
  ( Default - 'EXPOSED'        Choice - see below)
  
  The name of the descriptor in the image file where the exposure time
  of the exposure may be found.
  
  If 'none' is input, then no descriptor is looked for, and the
  time is set at 1.0 seconds.
  
4 Expoff
  (Default - 0.0           Range - -1.0e8 to 1.0e8)
  
  The offset to add to the exposure time when doing all the
  calculations that involve the exposure time.
  
  This time is added to the exposure time in the image descriptor
  (possibly modified in the program by the user).
  
4 Extinc
  (Default - see below            Range - 0.0 to 1.0e8)
  
  The extinction at unit airmass for the filter input by the user.
  
  These are up to the nine parameters 'EXTINC1', 'EXTINC2', ... 'EXTINC9'
  for the extinctions at unit airmass for the nine possible
  filters whose names are input with the 'FNAME1', 'FNAME2', ...
  'FNAME9' parameters. The matching is asked for each of the 'FNAME'
  parameters input.
  
  The default extinctions for the first, second, third, ... filters are:-
       0.68, 0.28, 0.15, 0.10, 0.07, 0.10, 0.04, 0.06, 0.06
  which are designed for the UBVRIJHKL extinctions.
  
4 Filtloc
  (Default - 1,79              Range - 1 to 256)
  
  The location in the image filter descriptor of the
  characters which give the filter used.
  
  If they are the only characters in the descriptor, then the
  default can be taken.
  
4 Filtname
  ( Default - 'FILTER'        Choice - see below)
  
  The name of the descriptor in the image file where the filter
  of the exposure may be found.
  
4 Fname
  (Default = ' '             Choice - see below)
  
  The name (character string) in the image filter descriptor that
  will denote the nth filter name.
  
  This parameter is asked for repeatedly, until either all nine
  names have been asked for, or until, a null entry is given, meaning
  that there are no more filter names to enter.
  
  These are the up to nine parameters 'FNAME1', 'FNAME2', ... 'FNAME9'.
  
4 Fsname
  (Default = name of image nth filter name        Choice - see below)
  
  The name (character string) in a column header in the standards table
  file that will denote the matching (to the 'FNAME' filter name) filter
  name in the standards table.
  
  This parameter is asked for, for each of the 'FNAME1', 'FNAME2', ...
  'FNAME9' entries that are input for possible 'filter name' names
  in the images.
  
  These are the up to nine parameters 'FSNAME1', 'FSNAME2', ... 'FSNAME9'.
  
4 Gain
  (Default - 1.0        Range - 1.0e8 to 1.0e8)
  
  The gain of the numbers in the image.
  
  This is the number of independent, Poissonian, events per pixel
  value. Thus for a CCD it would be electrons/adu.
  
4 Header
  (Default - ' '       Choice - see below)
  
 The line of text to put at the top the output text file.
  
 This is used as a way of putting a comment into the output file.
  
4 In
  
  The name of the file containing the input image.
  
  The input image is a standard ADAM .sdf file.
  
  It must be either an `short', integer*2 16-bit, or `real', real  32-bit,
  image. It can have the `BSCALE' and `BZERO' pixel value scaling, and
  the bad pixel magic value `INVAL'.
  
4 Latitude
  (Default - '00 00 00'      Choice - see below)
  
  A character string giving the latitude of the observatory where
  the exposure was made.
  
  This is used in calculating the zenith distance of the observation.
  it must be in the default format. Thus possibilities are:-
  
    +90 00 00
    +01 59 59
    +00 01 23
    -00 01 23
    -30 00 00
    -90 00 00
  
  It is important that the negative sign should be in the right place.
  
4 Noise
  (Default - 0.0              Range - 0.0 to 1.0e8)
  
  The extra Poisson noise that a pixel value of zero has.
  
  Thus after processing, an image pixel values will not be an exact
  value of the input. So the calculations of the errors, which assume
  on the pixel values being Poissonian noise woulf be wrong.
  
  This is the std. dev. the program should expect for a pixel value of
  zero. Thus if a 'bias level' has been subtracted, this could be the
  'bias noise' value.
  
4 Nsky
  (Default - 4                 Range - 1 to 4)
  
  The number of sky apertures to use for each star estimate.
  
  Four is best, but you might not have room for them around the stars.
  
4 Objloc
  (Default - 1,79              Range - 1 to 256)
  
  The location in the image object name descriptor of the
  characters which give the object name.
  
  If they are the only characters in the descriptor, then the
  default can be taken.
  
4 Objname
  ( Default - 'OBJECT'        Choice - see below)
  
  The name of the descriptor in the image file where the object name
  of the exposure may be found.
  
  If 'none' is input, then no descriptor is looked for, and the
  name is given the value ' '.
  
4 Offset
  (Default - (star aperture diameter),0.0      Range - 1.0 to 1.0e8)
  
  The offset in pixels in X,Y from the centre of the star aperture
  to the centre of the nth sky aperture.
  
  These are the (up to) four XY offsets 'OFFSET1', 'OFFSET2', 'OFFSET2',
  'OFFSET4' that are asked for the (up to) four sky spertures, where
  the actual number used is input with the 'NSKY' parameter.
  
  The offset in pixels in X,Y from the centre of the star aperture
  to the centre of the third sky aperture.
  
4 Out
  
  The name of the file into which a copy of the terminal output, giving
  the results of the program, is to be written.
  
  This is a new text ASCII file. It will made with a .DAT modifier.
  
  The file contains a copy of what is put out to the terminal, except that
  there is one line of header information at the start.
  
 The listing below gives an example of the output:-
  
 -----------------------------------------------------------------------
 Example Output of AUTOMAG
  
  
 Image name is :-  fred_1
  Star     X      Y        Top     Mag   Rms    Sk1   Sk2   Sk3   Sk4
    1    100.0  100.0    1000.0  23.263 0.003 -0.001 0.002-0.003 0.003
  
  Filter= V :Sec Z= 1.059  :Exp time= 101.000
  Image:-    RA= 13  0 29   :Dec= +12 12 12   :Sid T= 12 34 56
   File:-    RA= 12 13 23   :Dec= +11 27 30
  
  Raw Mag    Sec Z Corrected     Std     Mag-Std
      23.263    23.245          18.100   5.145
 -----------------------------------------------------------------------
  
  Comments:-
    - The 'Sk1', 'Sk2', etc., give the corrections that would have to be
      added to the mean magnitude, if the sky level in the associated
      sky aperture alone were to be used to estimate the sky level.
    - In this particular case, the 'File' position was selected to be
      used instead of the 'Image' position in calculating the SecZ.
    - The final magnitude has been calculated using the mean sky
      level from all four sky apertures, as they all lie within a user
      input tolerance (usually +/- 10%) of the mean.
    - The exposure time put out is the image exposure time (perhaps
      changed by the user) plus the offset input by the user via the
      'EXPOFF' parameter. It is then time used in the calculations.
  
4 Posntype
  (Default - 'degrees'          Choice - 'degrees/radians/string')
  
  The format that the RA and DEC entries have in the RA and DEC
  descriptors.
  
  The 'degrees' and 'radians' choices are obvious. For the string
  input:-
      the RA numbers must be in the HHxMMxSS.SS format
      the DEC numbers must be in the SDDxMMxSS.SS format
  
   where 'x' must not be 0-9, '+', '-', or '.'
   the decimal places are optional
  
4 Raname
  (Default - 'RA'        Choice - see below)
  
  The name of the descriptor in the image file where the Right Ascencion
  of the exposure may be found.
  
   'none' is valid entry. The RA will then be got from the standards
   file, if this image has a star name and that name is in it.
  
4 Sidtloc
  (Default - 1,79              Range - 1 to 256)
  
  The location in the image sidereal descriptor of the
  characters which give the sidereal time.
  
  If they are the only characters in the descriptor, then the
  default can be taken.
  
4 Sidtname
  ( Default - 'STSTART'        Choice - see below)
  
  The name of the descriptor in the image file where the sidereal
  time of the exposure may be found.
  
4 Skydia
  (Default - 1/2 the Star aperture diameter   Range - 1.0 to 1.0e8)
  
  The diameter of all the sky apertures in pixels.
  
4 Stardia
  (Default - 40.0            Range - 1.0 to 1.0e8)
  
  The diamter of the star aperture in pixels.
  
4 Stdmast
  (Default - 'Yes'             Choice - 'Yes/No')
  
  If you are using the standard magnitudes file and there is
  RA and DEC information in the image descriptors, you have two
  ways of calculating the RA and DEC. In this case, do you want
  to use the standards file positions ('Yes'), or the image
  descriptor positions ('No') ?
  
4 Stds
  
  The name of the file containing the input table of standard star
  positions and magnitudes.
  
  The file is a Starman table of the positions and magnitudes of stars.
  
  It has to have:-
       - the standard Identifiers (star names)
       - the Right Ascension of the star (in radians)
       - the Declination of the star (in radians)
       - the Equinox of the position (Julian epoch - e.g. 1990.234)
       - at least one magnitude
  
  The magnitudes of different colours must be as magnitudes, not colours.
  I.e., a star with V=16.00 and B-V of 1.00 would have two entries, one
  for V=16.00 and one for B=17.00.
  
  The columns containing the magnitudes must have descriptors telling
  what waveband is in each column. In the example above, for example, the
  V column could have a descriptor with 'V', and the B column one of 'B'.
  
  The column descriptors must be in the standard Starman table style, as
  HEADxxx, where xxx = 001, 002, etc. Thus in the example above the
  descriptors would be:-
          HEAD001   RA
          HEAD002   DEC
          HEAD003   EQUINOX
          HEAD004   V
          HEAD005   B
  
4 Thresh
  (Default - 100.0              Range - 1.0e-8 to 1.0e8)
  
  The threshold, above the mean sky level for the entire image,
  when a pixel which is above that value is considered to be part
  of a star.
  
4 Time
  (Default - image exposure time           Range - 0.0 to 1.0e8)
  
  A chance to correct the exposure time read off the image.
  
  The actual time used in the calculations is this time plus the `exposure
  time offset', input via the `EXPOFF' parameter.
  
  
3 Author
         A.J.Penny        RAL             1991 Feb
  
  
2 Average
  
 This takes the output tables created by the stellar photometry
 program MEASURE (or any other program), and averages them to a table
 with weighted mean magnitudes. It also makes a text file with the
 details of the averaging.
  
 It can do this automatically, or the user can modify some of the
 rejection and averaging procedures.
  
3 Method
  
 1) Criteria for rejecting measures for intrinsic faults are input by
    the user. Then in the rest of the calculations star measures which
    violate these criteria are ignored.
  
 2) The program calculates, for each (excluding the first) input
    table, the mean difference in star magnitude of the measures in
    the table from those in the first input table. This gives the
    'zero-points' of the magnitudes in each table compared to the
    first table.
  
 3) Optionally, the user can refine the `zero-points'. The
    program plots out, for each input table, the scatter of these
    differences, relative to the 'zero-points'. The user can then put
    (via cursor and/or keyboard) in more accurate values for the
    'zero-points'.
  
 4) These mean differences are subtracted from the magnitudes in
    the tables, putting them all on the zero point of the first table.
  
 5) The rejection criteria for discarding magnitude estimates are set
    up. This is either done either interactively by setting discordance
    limits at each magnitude range, or automatically, by calculating
    these discordance limits or by using the input magnitude error
    estimates.
  
 6) Weighted means are made for each star of its magnitudes from the
    input tables. At this point discordant input magnitudes may be
    rejected.
  
 7) Some of the other parameters in the input tables (See the help
    on the input and output files to see which) are noted.
  
 8) The results are then put to the output file.
  
    A text file can also be made which gives some the details of the
    actual star by star averaging and measure rejection.
  
4 Making_means
  
 A mean magnitude is made for a star by:-
  
 - Taking all the magnitudes from the input tables.
  
 - Discarding those magnitudes where the fit parameters for the star in
   that particular input table suggest the measure is 'bad'. This
   method is here refered to as 'intrinsic' rejecting.
  
 - Taking all the good measures and calculating a weighted mean. This
    is done in a complex way:-
  
    - The weights are from the input error for the star in each table
      (subject to a switch `usesigma' and a minimum limit- see
       'sigmamin'). See the help below.
  
    - A rejection method is used for discarding measures which lie
      significantly away from the mean. This method is here refered to
      as 'means' rejecting. This may be done in one of three ways
  
5 Use_of_Weights
  
 The weights are from the input error for each star in each table.
  
 The weighting may be switched off and the unweighted means used (see
 `usesigma'). A minimum error may be set, so that any input error less
 than that minimum is set at that minimum (see `sigmamin').
  
 Whether to use weights or not, and if so, what value to give to
 `sigmamin' will depend on your estimate of the validity or otherwise,
 in each case, of the input error estimates.
  
 This method should only be used if the errors in the input magnitude
 files are good estimates. MEASURE caclculates this error but it is
 only correct if the correct noises and gains have been input to the
 MEASURE runs, and there were no other contributory sources of error.
 It is advisable to check on this, and you can do so by having a trial
 run with the `means_rejecting' method, when the input errors are
 plotted against those found from the scatter between files.
  
5 Rejection_intrinsic
  
 A star magnitude estimate from a particular input file can be
 rejected by some of the other characteristics of the fit it was made
 in. These are:-
  
 - star centering in fit
 - no of iterations taken in the fit
 - chi-squared of the fit
 - theoretical error estimate
 - important companions
 - invalid pixels in fit area
  
 The extent to which these have to be 'good' is under the user's
 control.
  
5 Rejection_Means
  
  The basic technique here is to look at the scatter of the
  magnitude estimates, for a star, from the input tables. Then
  estimates which diverge too much from the mean are rejected.
  
  There are three methods of 'means' rejecting, which are, in
  essence, two ways of defining what is meant by 'too much':-
  
  (A) 'Default' method
  
      An estimate is only rejected if it lies more than 0.5mag
      from the mean.
  
  (B) Scatter between the different estimates.
  
      For its magnitude, it differs from the mean by more than the
      level set for the user (or a default 0.5mag) for that magnitude
      value.
  
  (C) Theoretical expected error in each magnitude estimate.
  
      This method should only be used if the errors in the input
      magnitude files are good estimates. MEASURE caclculates this
      error but it is only correct if the correct noises and gains
      have beeb input to the MEASURE runs, and there were no other
      contributory sources of error. It is advisable to check on
      this, and to look at the check plot described below.
  
      Use the error estimate from MEASURE for a star for each file:-
  
      1) The weighted mean magnitude for this star from all the files
         (after the zero point corrections) is calculated.
      2) The theoretical error in the mean (from taking all the input
         errors for this star from all the files) is calculated. This
         takes the input error estimates and does the proper
         calculation - akin to sqrt(sum[sigma.sigma]/((n-1)(n-2))) - to
         calculate what error in the mean magnitude should be expected
         from magnitudes having those errors.
      3) This theoretical error expected for this star from this file
         is noted.
      4) The difference of the magnitude for this star from this file
         from the mean is calculated.
      5) The number of standard deviations (diff/theoretical error)
         from the mean that this difference represents is calculated,
         using the calculated errors in the mean and in this measure.
      6) If this number of std. devs. is larger than a (user input -
         ERRMUL parameter) certain value, then that magnitude for that
         star from that file is rejected.
      7) There is also a (user input - ERRLIM parameter) minimum value
         below which the `calculated error' cannot fall. This stops
         unrealistic error estimates causing false rejections.
  
      If this method is adopted, then a plot is displayed of the `found
      error' (the difference of a single magnitude estimate from the
      mean magnitude) versus the `calculated error' (the expected
      value of this difference). The plot should show a linear
      relation with a slope of one. The `found errors' should scatter
      about the `calculated error'.
  
      If the plot looks OK, but the slope is not unity, then a
      conversion factor is needed to convert the input error estimates
      into true ones. Read this from the slope, and input it via the
      `ERRFAC' parameter.
  
      If the plot looks strange, then there is probably something
      strange about the input error estimates from MEASURE, and this
      method should be viewed with suspicion.
  
6 Scatter_between_files
  
 This sets at each magnitude (on the zero point of the first table) a
 maximum difference from the mean that is allowed, and then for each
 star to reject all measures that exceed that difference for the star.
  
 A histogram is calculated of the differences from the means of
 all the measures at each magnitude level.
  
 Then either an interactive selection of the rejection difference
 made, by plotting the histogram and the user selecting via a cursor
 the value, or automatically, by calculating the `width' of this
 histogram and using the user input multiplier of this width to
 select a value.
  
 The rejection is done star-by-star, with the most divergent star
 (weighted inversely by a magnitudes tolerance level - remember
 `Errlim') being rejected first. Then the mean is recalculated, and
 the process started again, with all previously rejected stars not
 used. This process continues until no more stars are rejected.
  
6 Theoretical_errors
  
 This, for each star and each table, looks at the input calculated
 theoretical error as given in the tables, and then to reject that
 measure if it is farther from the mean by some constant times that
 theoretical error. Thus one might want to reject all star measures
 more than three input theoretical standard deviations from the mean of
 all the measures.
  
 A problem is that the input theoretical errors may not be a good
 indicator of the actual errors. To help in evaluating this, the
 program, for each table, plots out the run of the theoretical error
 of a measure in a list of a star versus the error calculated from the
 scatter in the measures of that star in the all the tables. (This is
 actually done in bins of the theoretical error levels.) The user can
 then see if there is any systematic difference.
  
 If there is (say the difference errors are commonly twice the
 theoretical ones) then the rejection criteria can be adjusted (in
 this example by doubling the limit), if the user wants to believe the
 difference errors.
  
 There is also the option to accept up to a certain limit, even if
 the theoretical errors indicate a smaller limit. Thus for very
 well-exposed stars, a theoretical error limit of 0.002mag may be
 indicated, but the user might well feel that measures differing by
 0.01mag are realy ok.
  
 Thus after the plot is displayed, the user inputs via the keyboard the
 factor to multiply the theoretical errors to get the rejection limit,
 also the minimum rejection limit.
  
6 Which_is_better?
  
 The scatter method is a good method when the input tables are all on
 roughly the same zero point, as it shows and uses the actual errors
 being encountered.
  
 However, if the tables have different zero points, then a measure from
 a long exposure will have a smaller error than one from a short one,
 and one would wish to use stricter criteria in rejecting it. Thus the
 theoretical method is better. The trouble with using the theoretical
 method is that the theoretical errors are not perfect indicators of
 the actual errors, and so should only be used (as described above)
 when the input errors are valid.
  
4 Star_names
  
 The files can either have the same stars in the same order (the
 default assumption), in which case there is a simple one-to-one
 correspondance between the stars in the input files and those in the
 output file.
  
 Or the star names in each file can be matched up. Then the output file
 has all the stars mentioned in all the input files. (Duplicate names
 in any file but the first are to be avoided.) The output file
 magnitudes are then means of those estimates in the input files that
 have estimates for those stars.
  
 The order of stars in the output file in this case, is:-
   - The order of stars in the 1st input file
   - The order of any stars in the 2nd input file that were not in the
       1st file
   - The order of any stars in the 3rd input file that were not in the
       1st file or the 2nd file
   -       etc
  
3 Automatic_use
  
  In automatic use:-
  
    The program runs through on the parameters input by the user at
    the start of the program.
  
  In interactive use:-
  
    The user interacts with the program, in addition to the input
    parameters. The interactions are through graphs:-
  
        a) to refine the `zero-point' differences between the files
           calculated by the program.
  
        b) to select the rejection criteria (for each magnitude level)
           in using the scatter between estimates of a star, to
           reject estimates as being too far from the mean.
  
        c) If the user selects using the errors calculated by
           MEASURE, then the program plots a graph using these
           errors and those calculated by the scatter between
           measures of each star. The user uses this to put in
           a correction factor to make the input errors proper.
          (As I have always felt doubtful of the MEASURE error
          calculations.)
  
3 Rejection_criteria
  
 A star magnitude estimate from a particular input file can be
 rejected by some of the characteristics of the MEASURE fit it
 was made in. These are:-
  
  a) Star found far from input position, in terms of the stellar radii.
  b) MEASURE took too many iterations to make the fit.
  c) Too many INVALID pixels in the area fitted when fitting.
  d) Chi squared value too high.
  e) Too many 'companions' to fit.
  f) The error calculated by MEASURE.
  
 The extent to which these have to be 'good' is under the user's
 control.
  
 A further rejection for each star can be done by the scatter of
 the estimates from the input files. Any that are too far from the
 mean can be rejected.
  
3 Use_of_graphics_buttons
  
  To mark a  point on a graph, place the cursor at the desired point,
  and press any of the appropriate buttons.
  
  To end the selection of points, place to the left of the Y-axis and
  press a button.
  
3 Parameters
  
4 Again
  (Default - 'No'   Choice - 'Yes/No')
  
   Flag for redisplaying plot and reusing cursor.
  
4 Cenacc
  (Default - 'No'       Choice - 'Yes/No')
  
  Flag for accepting a star measure if its only fault is that it is
  too far off centre.
  
4 Chiprin
 (Default - 1.0     Range - 0.0 to 1.0e10)
  
 Factor for use on the printing of the matches. The Chi-squareds are
 printed as integers. If they are small you may want them put out
 multiplied by a factor so that they dont all look like '0's, '1's,
 '2's, etc.
  
4 Errfac
  (Default - 1.0         Range - 0.0 to 1.0e9)
  
  When using the input magnitude error estimates to see which input
  magnitudes for a star to reject, this is the factor to multiply
  the input error estimates for a file to get 'true' estimates.
  
  You will already have used a graph to show the relationship
  between the input estimates and the 'true' values, as found from
  the scatter between the input magnitudes for this file and the mean
  from all the input files. This will have then given you the
  factor.
  
4 Errlim
  (Default - 0.01          Range - 0.0 to 1.0e9)
  
  Used when using the input magnitude error estimates to see which
  input magnitudes for a star to reject.
  
  This is the value for the minimum tolerance level.
  
  This parameter says that this value is then checked to see if it
  is at least as big as 'ERRLIM', and if not, then increased to that
  value. This stops a number of unrealistically small input error
  estimates setting a too stringent check level.
  
4 Errmul
  (Default - 3.0          Range - 0.0 to 1.0e9)
  
  Used when using the input magnitude error estimates to see which
  input magnitudes for a star to reject.
  
  The number of standard deviations (of the input error estimates for
  stars in this file) that an input magnitude can be and still be
  accepted.
  
4 Filenum
  (Default - next             Range - 0 to number of input files)
  
  When calculating the relationship between input error estimates and
  'true' errors, this calculation should be done for all files. This
  parameter allows you to calculate it in any order and to recalculate
  the factors for a file.
  
4 Fprint
  (Default - ' '            Choice - any)
  
  The name of the file to take the text version of the output. This
  has much informative information that is not in the main table
  output.
  
  A null response means that no such file is produced.
  
4 Gtype
  (Default - 'xwindows'            Choice - any)
  
  A character string giving the local name for the graphics
  display type.
  
  'xwindows' will put it out on the screen of your X-window device,
  if you are using one.
  
  If 'ask' is input, then the program asks a very similar question,
  in a different way. A response here of '?' will bring up a listing
  of all the possible names of graphics devices which are supported
  on your machine, and you then input the appropriate name.
  
4 In
  (Default - null)
  
 The names of the input files containing the star magnitude tables.
  
 These are Starman NDF Table format files.
  
 These parameters are actually IN1, IN2, IN3, ...., IN50.
  
 After the first one, you can end the repeated asking for input files
 by responding with just the 'return' key, that is a null input.
  
4 Inchi
  (Default - null)
  
 The name of the file containing the table of Chi-squared values, at
 0.2mag steps, above which a star is rejected.
  
 These are Starman NDF Table format files.
  
 These parameters are actually INCHI1, INCHI2, INCHI3, ... INCHI50.
  
 These tables, if used, must have the Chi-squared value of the
 faintest mag first, and be in steps of 0.2mags starting at the faint
 mag.
  
 If there are less than 100 values in the table, then the
 Chi-squared values are filled up to 100 values with the last value.
 Values after the first 100 values are ignored.
  
 Such files are automatically produced by Chi (qv).
  
4 Linecol
   (Default - 'black'            Choice - (black:white)
  
    Colour of plot lines. This is determined by whether you have a
    black or white background to your plots.
  
4 Meanrej
  (Default - 'mag'      Choice - 'mag:error:default:ok')
  
  Method to reject a magnitude for a star from a particular file
  because its value (after the file mean correction) differs too
  much from the mean of the measures from all the files (including
  the file itself).
  
  This defines the 'means' rejecting method.
  
  This is asked for repeatedly. At the start the 'default' of
  0.5 mag is set up. You can then set up any of the three ways.
  When you are happy, reply 'ok' to continue to the next step.
  
  This rejection can be done in one of three ways.
  
   Name       Method
   ----       ------
   'Default'  If mag is more than 0.5 from the mean.
  
   'Mag'      For its magnitude, it differs from the mean by more than
              the level set for the user for that magnitude value.
  
              The tolerance levels are user input by the program
              calculating (at unit magnitude steps) histograms  of the
              scatter of magnitude estimates from the mean. The user
              then looks at these histograms and sets tolerance levels
              where the outliers are rejected.
  
   'Error'    SEE THE WARNING ABOUT THIS METHOD IN THE HIGHER LEVEL
              HELP ON METHOD AND MAKING_MEANS.
  
              This method should only be used if the errors in the input
              magnitude files are good estimates. MEASURE caclculates
              this error but it is only correct if the correct noises
              and gains have beeb input to the MEASURE runs, and there
              were no other contributory sources of error. It is
              advisable to check on this, and to look at the check
              plot described below.
  
              Use the error estimate from MEASURE for a star for each
              file:-
  
               1) The weighted mean magnitude for this star from all
                  the files (after the zero point corrections) is
                  calculated.
               2) The theoretical error in the mean (from taking all
                  the input errors for this star from all the files) is
                  calculated.
               3) This theoretical error expected for this star from
                  this file is noted.
               4) The difference of the magnitude for this star from
                  this file from the mean is calculated.
               5) The number of standard deviations (diff/theoretical
                  error) from the mean that this difference represents
                  is calculated, using the calculated errors in the
                  mean and in this measure.
               6) If this number of std. devs. is larger than a (user
                  input - ERRMUL parameter) certain value, then that
                  magnitude for that
                  star from that file is rejected.
               7) There is also a (user input - ERRLIM parameter)
                  minimum value below which the `calculated error'
                  cannot fall. This stops unrealistic error estimates
                  causing false rejections.
  
               If this method is adopted, then a plot is
               displayed of the `found error' (the difference of a
               single magnitude estimate from the mean magnitude)
               versus the `calculated error' (the expected value of
               this difference). The plot should show a linear
               relation with a slope of one. The `found errors' should
               scatter about the `calculated error'.
  
               If the plot looks OK, but the slope is not unity, then
               a conversion factor is needed to convert the input
               error estimates into true ones. Read this from the slope,
               and input it via the `ERRFAC' parameter.
  
               If the plot looks strange, then there is probably
               something strange about the input error estimates from
               MEASURE, and this method should be viewed with suspicion.
  
4 Names
  (Default - 'no'          Choice - 'yes:no')
  
  Take the individual measures from the input files by matching
  up the names of the stars in the files.
  
  If 'no' is taken, then it is assumed that each file contains the
  same stars in the same order.
  
4 Newmean
  (Default - default value        Range - -1.0e10 to 1.0e10)
  
  After finding the new mean difference between file magnitude systems
  by using the graph plot, the found value can be corrected by this
  parameter.
  
4 Numinv
  (Default - 0          Range - 0 to 1000000)
  
 The maximum number of 'invalid' pixels noted in a star fit that will
 be allowed for saying the star magnitude is acceptable.
  
4 Numits
  (Default - 29         Range - 0 to 100)
  
 The maximum number of iterations done in a star fit that will be
 allowed for saying the star magnitude is acceptable.
  
4 Offcen
   (Default - 2.0         Range - 0.0 to 1000.0)
  
 Distance, in multiples of the stellar radius, in X or Y that the star
 position can be from the fit starting position for saying the star
 magnitude is acceptable.
  
4 Out
  (Default - null)
  
 The name of the new output file containing the mean magnitude table.
  
 This is a Starman NDF Table format files.
  
4 Plhistx
  (Default - 0.0,0.5         Range - 0.0 to 1.0e8)
  
 The range of differences of individual magnitude estimates from
 the mean to plot out in the histogram of number of stars with
 such differences.
  
4 Plhisty
  (Default - 0.0,1.2*max number    Range - 0.0 to 1.0e8)
  
 The range of numbers of individual magnitude estimates with
 values differing from the mean in certain ranges to plot out
 in the histogram of number of stars with such differences.
  
4 Plotxlim
  (Default - -5%,+10% of actual range      Range - -1.0e8 to 1.0e8)
  
  The range of magnitudes to plot out in the graph of differences,
  of individual magnitudes from the means, versus magnitude.
  
4 Plotylim
  (Default - -5%,+10% of actual range      Range - -1.0e8 to 1.0e8)
  
  The range of differences to plot out in the graph of differences,
  of individual magnitudes from the means, versus magnitude.
  
4 Sigmalim
  (Default - 0.5           Range - 0.0 to 100.0)
  
 Maximum overall value of the star error that will be allowed for
 saying the star magnitude is acceptable.
  
4 Sigmamin
  (Default - 0.01          Range - 0.00001 to 100.0)
  
 The minimum `true' acceptable error value for a star. This is in
 (+/-)magnitude.
  
 If a star in an input table has an error less than this, the error is
 read in as though it were this minimum error.
  
 This is used as the errors are calculated as Poisson noise. This is,
 for bright stars, often less than the real errors, which have error
 sources such as flat-field errors, etc. Thus a bright star might have
 such a low error that the weighted averaging would place undue weight
 on that particular measure.
  
 Generally, if you are uncertain about whether the input error estimates
 are valid, then a high value of `sigmamin', say 0.05mag, is a good idea
 as this will weight all stars equally, except those that have a very
 high error estimate (in this case above 0.05mag).
  
4 Title
  (Default - 'Output from Average')
  
 The Title to be added as a descriptor to the output file containing
 the mean magnitude table.
  
4 Use
  (Default - 'inter'       Choice - 'auto:inter')
  
  `auto'  - The program runs through on the parameters input by the
            user at the start of the program.
  
  `inter' - The user interacts with the program, in addition to the
            input parameters. The interactions are through graphs:-
  
            a) to refine the `zero-point' differences between the files
               calculated by the program.
  
            b) to select the rejection criteria (for each magnitude level)
               in using the scatter between estimates of a star, to
               reject estimates as being too far from the mean.
  
            c) If the user selects using the errors calculated by
               MEASURE, then the program plots a graph using these
               errors and those calculated by the scatter between
               measures of each star. The user uses this to put in
               a correction factor to make the input errors proper.
               (As I have always felt doubtful of the MEASURE error
               calculations.)
  
4 Usechi
  (Default - 'No'       Choice - 'Yes/No')
  
 Flag for testing the chi-squared value when deciding to use a
 magnitude estimate.
  
4 Usesigma
  (Default - 'No'       Choice - 'Yes/No')
  
 Flag for using the input magnitude error estimates to weight the
 input magnitudes in calculating the mean.
  
  
3 Author
   A.J.Penny                RAL                          1991 October
2 Chi
  
  This takes the output from MEASURE and, using the Chi-squared
  values and the magnitudes, makes a table of the maximum acceptable
  Chi-squared value versus magnitude. This can then be input to the
  AVERAGE program to reject stars with poor fits.
  
  This can be done either in the automatic mode, or in an interactive
  mode.
  
  In the automatic mode, it is assumed that in each one-magnitude
  step there are a number of stars with 'good' chi-squared values,
  and a few with higher values. The spread of values is then used
  to determine an upper limit.
  
  In the interactive mode, a graph of the Chi-squared value versus
  magnitude is plotted out for the stars. The user then uses the
  cursor to define a series of (Magnitude,Chi) pairs. These are then
  used to define a table defining the run of maximum acceptable
  Chi-squared values versus magnitude.
  
3 Use
  
  This is used for deciding which stars in the output of MEASURE
  have residuals which are significantly higher than the average for a
  star of that magnitude and is thus probably a poor measure. It makes
  a file with a table of max acceptable Chi values at different
  magnitude levels levels for use in AVERAGE.
  
  Before entry, poor measures may be pre-secreened by saying putting
  limits on three of the measure parameters (the number of invalid
  pixels in the star image, the number of iterations taken to fit the
  star, and the distance the star was found from its input position).
  
  In the interactive mode, the values of Magnitude vs Chi excess are
  plotted out, and the cursor
  is then used to define the highest acceptable Chi value at any number
  of Mag values (up to 1000 positions). The cursor is used to draw an
  imaginary line cutting off the high bad Chis from the low accepetble
  Chis. The line is not plotted out as you mark the points, but when
  you finish, straight lines are drawn between the points displaying
  the line.
  After the Mag,Chi positions have been input by the cursor the program
  interpolates between them and puts constant  values outside them to
  get a smooth limit curve. This line is then plotted. The whole
  display and cursor work can be repeated.
  
  In the automatic mode, this part is done automatically.
  
  The program then calculates the values at 0.2mag intervals from the
  faintest mag up to 20mag brighter, and stores them in an output file
  containing a table for use with the AVERAGE program.
  
  With some data, the chi-squared values increase significantly for
  bright stars. The program looks for such a trend, and if it finds
  it, subtracts a curving base level to make the use of the cursor
  easy. See the HELP section on base level.
  
3 Base_Level
  
  With some data, the chi-squared values increase significantly for
  bright stars. The program looks for such a trend, and if it finds
  it, subtracts a curving base level to make the use of the cursor
  easy.
  
  In such a case, the Chi values plotted are ones scaled down at each
  magnitude value to try and make some allowance for the fact that, for
  bright stars that are perfectly OK, the Chi value is higher than for a
  faint star.
  
  The value shown is an excess above an estimated typical minimum value
  at each magnitude. The excess values are displayed by fitting to the
  envelope of minimum Chi values  a line of the form
  
           Y = zero + sl.starflux
  
  and displaying the Chi values as
  
            Chi  = zero + (Chi-Y)/sqrt(error/zero)
  
  The true Chi values can be seen from the numbers plotted out when
  using the cursor (or by inspection of the output file).
  
  This makes use of the cursor easy and gives a fair idea of the
  importance of the relative Chi errors.
  
3 Parameters
  
4 Again
  (Default- 'no'      Choice - 'yes:no')
  
   Do you want to put out the graph again and define a new upper limit
   curve?
  
4 Allstars
   (Default - 'no'         Choice - 'yes:no')
  
   Flag for accepting a star for plotting out, even if it could be
   rejected. (i.e. as too far from starting posn, or too many fitting
   iterations were taken, or image contained invalid points,  or
   magnitude flagged as 0.0 or 50.0)
  
4 Devlimx
   (Default - 1,X size        Range - 1,X size)
  
  The X limits of the plots in Chi residuals and Magnitudes.
  (NB. The Chi residuals are those above the allowance curve.)
  
  Use this to select the range of magnitudes you really want to use.
  
  The default is for the whole range of magnitudes.
  
  What you do is to plot the whole range, the first time round, look
  at it, decide what limits you really want, exit from the graph and
  replot using your new limits.
  
4 Devlimy
   (Default - 1,Y size        Range - 1,Y size)
  
  The Y limits of the plots in Chi residuals and Magnitudes.
  (NB. The Chi residuals are those above the allowance curve.)
  
  Use this to select the range of residuals you really want to use.
  
  The default is for the whole range of residuals. This shows you the
  overview, but usally you want to look at the residuals near unity,
  and so you should plot just a restricted range.
  
  What you do is to plot the whole range, the first time round, look
  at it, decide what limits you really want, exit from the graph and
  replot using your new limits.
  
4 Graph
   (Default - 'no'         Choice - 'yes:no')
  
  When doing the automatic fitting, put out graph with plot of chi-squared
  values versus magnitude, with rejection limit line?
  
4 Gtype
  (Default - 'xwindows'            Choice - any)
  
  A character string giving the local name for the graphics
  display type.
  
  'xwindows' will put it out on the screen of your X-window device,
  if you are using one.
  
  If 'ask' is input, then the program asks a very similar question,
  in a different way. A response here of '?' will bring up a listing
  of all the possible names of graphics devices which are supported
  on your machine, and you then input the appropriate name.
  
4 In
  (Default - null)
  
  The name of the file containg the input table of fit results.
  
4 Linecol
   (Default - 'black'            Choice - (black:white)
  
    Colour of plot lines. This is determined by whether you have a
    black or white background to your plots.
  
4 Numinv
  (Default - 0         Range - 0 to 1000000)
  
  If you are going to reject a star for plotting as having too
  many invalid pixels, this is the limit to the number of
  such pixels that is acceptable.
  
4 Numits
  (Default - 35         Range - 0 to 1000)
  
  If you are going to reject a star for plotting as having had
  too many fitting iterations, this is the limit to the number of
  iterations that are acceptable.
  
4 Offcen
   (Default - 2.0          Range - 0.0 to 1.0e10)
  
   If going to reject a star for plotting as being too far from
   the starting position in the fitting, this is the distance away
   in X or Y that is the limit of acceptance
  
4 Out
  (Default - null)
    The name of the file to contain the output table.
  
4 Title
  (Default - input table title, or `Output from Chi'         Choice -any)
  
  The charcter string to put into the output table as a title.
  
4 Use
  (Default - 'auto'              Choice - 'auto:inter')
  
  Select the automatic mode of operation, or the interactive mode?
  
3 Author
         A.J.Penny              RAL              1991 May
  
2 Diagram
  
 This plots out an HR or Two-Colour diagram from tables containing
 star magnitude data. It can also output a file containing the
 plotted values.
  
 There can be up to 48 input files open at once (if your computer set
 up allows this. Many systems will have lower limits).
  
3 Use
  
 There are two options when running 'diagram', selected by your
 answer to the 'easycmd' parameter:-
  
 1) Easycmd='yes'
  
    Do a standard run through to plot a CMD: -
  
    The program asks for the input to take two tables and put a CMD
    up on the x-windows window. The program then asks for further
    options, expecting the answer - 'exit'.
  
    If you put the `\\` on the command line, the program will then
    end, leaving the CMD displayed in its window.
  
    If you choose to continue, you will find yourself in the middle
    of 'easycmd=no' mode, being repeatedly asked what you want to do
    through the 'option' parameter. You should choose the 'panel'
    option, and then interact with the program through the 'panel'.
  
 2) Easycmd='no'
  
  
    Do what you want: -
  
    The program first asks you if you want to plot a CMD or a
    colour-colour diagram. You choose, and then the program asks
    for what are the 'codes' of which colours to plot.
  
    After this, the program goes in the looping 'options' mode,
    repeatedly asking which option of action you want to do.
  
    It suggests a sequence of options which will normally get you
    the inputs needed for making and displaying the plot. If you
    accept these options all will go well. (You can, of course,
    choose diferent options if you wish to.)
  
    After this, all options are open. The program will suggest
    selecting the 'panel' option, where the options are available
    by pressing 'buttons' on a window. This is quite handy, and
    an in-screen help is displayed, as your cursor moves over the
    different buttons.
  
3 Method
  
 The program works on 'sets' of tables. Each set is loaded with data
 from (up to four) tables, each list of data of the magnitudes in a
 particular colour comes from a column of data in one of the tables.
 The tables with the data for an individual set must each contain the
 same stars in the same  order. Each set can hold up to 10 000 stars.
  
 Up to twelve sets can be handled.
  
 Only the data from one set is plotted out (or written to file) at
 any one time, but the other sets can accessed at will, and added
 to the diagram. They would however, if stored, be output to different
 files.
  
 The extent of the diagram (in the sense of the output values) is
 under user control, and the diagram can be cleared and plotting
 started again.
  
 The plotting and storing is done as:
  
    CMD:               `col 'vs `col -col '
                           2        3    4
  
    COLOUR-COLOUR:      `col -col ' vs `col -col '
                            1    2         3    4
  
 For example, as V vs  B-V or  R  vs  R-I  or   U-B vs B-V
  
 -  or any other single character descriptors which are
 assigned by you.
  
 Any single character descriptors may be assigned to the colours by the
 user.
  
 The location of points can be found using the cursor.
  
 Lines can also be drawn on the diagram from keyboard, cursor or
 file table posns.
  
3 Use_of_options
  
 The choice of action to do next is defined by the 'option'
 chosen. These options are also available through the 'panel'
 push-button mode, on choosing the 'panel' option.
  
  Option        Function
  ------        --------
  clear         Clear plot
  close         Close the graphical device
  colour_eqn    Change colour equation applied to input colours
  cursor        Get XY positions from graph with cursor
  dotnumber     Set whether numbers are plotted with points
  exit          Exit from this program
  getdata       Get the tables with the magnitudes in them
  line          Put line onto graph.
  mag_limits    Star Magnitude ranges allowed to be plotted
  nearest       Get information on a star by putting cursor on it
  numgood       Number of good measures for plotting a star
  open          Open the plot device
  panel         Switch between panel and keyboard option selection
  plot          Plot the data as points on the graph
  plot_limits   Set the range of the graph axes in X and Y
  plot_range    Set the range of data in X and Y to be plotted
  setnumber     Data set these setups apply to
  store         Store the present plotted data set as a table file
  symbol        Set the symbol plotted as points
  zero_point    Change zero points applied to input colours
  
  There is also the big 'HELP' button.
  
  When using the cursor to find magnitudes/colours of positions
  on the graph, place the cursor on the desired location, and
  press any keyboard key. To end, place the cursor to the left
  of the origin and press any key.
  
3 Colour_Equation_and_Zero_Point
  
 Each set can have its input magnitudes corrected by the following
 equation:-
  
        Col1  = Zero  + Col  + K .(C -C )
            n       n      n    n   3  4
  
 Where Col1  is the corrected version of input colour Col  and the
           n                                             n
 values Zero  and K  are input by the user. `n' runs from 2 to 4
            n      n
 for an HR type diagram, and from 1 to 4 for a Two-colour type
 diagram.
  
 As you can see, the colour correction is in terms of the `raw'
 magnitudes C  and C .
             3      4
  
3 Cursor
  
 The plotting software package, PGPLOT,  defines the cursor movement
 and marking of position by the appropriate method for the device being
 used. If you are uncertain about how to use the cursor, ask your
 local computer expert.
  
3 Input
  
 If a waveband is required twice (i.e. V in V vs B-V) the table and
 column with that waveband is only asked for once.
  
3 Input_Controls
  
 Conditions may be imposed on which stars in a set are accepted
 for plotting. All stars are stored, but have an acceptance/rejection
 flag showing whether they would have been plotted.
  
 These are:-
  
  Raw magnitudes:      The acceptable range of input magnitudes in
                       each input waveband in a set can be specified.
                       (The default is 0.1 - 49.0.)
  
  No of good measures:  Sometimes a table containing a list of
                        magnitudes will for each stars have an entry
                        giving the number of estimates that made that
                        magnitude. (This is the case for the Starman
                        `Average' program output.) Optionally, a
                        magnitude can be rejected if this number is
                        less than a set limit for that waveband in
                        that set. (The default is no checking.)
  
  Position in Diagram:  The output (to plot or file) processed
                        magnitude/colour or colour/colour may be subject
                        to a test for location as lying in given
                        rectanglular region.
  
3 Option_Input
  
  The options can be selected by responding at the keyboard to the
  'OPTION' question, or, if you are working at a X-window device, using
  a panel of buttons. These options are toggled by the 'panel'
  choice in the option list.
  
3 Plotting
  
 The symbols used to plot the data are under user control, and any of
 the standard PGPLOT symbols can be used.
  
 The graphical output is done using the PGPLOT package, and can
 thus be sent to any device that has a PGPLOT or GKS driver.
  
3 Output table
  
 The contents of a row in the output file are:-
  
  -  Identifier;
  -  X, Y;   (optionally)
  -  col(2) or col(1)-col(2);
  -  col(3)-col(4);
  -  input waveband magnitude
  -  number of good estimates in that magnitude
  
 The first two columns (the 'x' and 'y') are optional. Their presence
 is controlled by the 'storexy' parameter.
  
 The last two entries are repeated for each of the input magnitudes.
  
 This is a Starman NDF format table.
  
3 Parameters
  
4 All_sets
 (Default - 'no'       Choice - 'yes:no')
  
 Apply these to all the sets (yes), or just to the present set (no).
  
4 Colcode
  (Default - one of 'U','B','V'      Choice - any single character)
  
 A single character for labelling each waveband input for dialogue,
 plotting, and output. Reply `V' or `U', etc.
  
 This is used for `COLCOD1', `COLCOD2', `COLCOD3', `COLCOD4'.
 refering to the (up to) four input tables.
  
4 Colcor
 (Default - 0.0 or previous value     Range - -1.0e10 to 1.0e10)
  
 The real number in the colour equations to be applied to each input
 magnitude.
  
 This is the `K' in the equation:-
  
        Col1  = Zero  + Col  + K .(C -C )
            n       n      n    n   3  4
  
 See next help layer up for more information.
  
4 Column
 (Default - 3         Range - 1 to no of columns in table)
  
 The number of the column in the table that contains the magnitudes.
  
 This is used for `COLUMN1', `COLUMN2', `COLUMN3', `COLUMN4',
 refering to the (up to) four input tables.
  
4 Devlimx
 (Default - the minimum and maximum of the data    Range - -1.0e10 to
                                                            1.0e10))
  
 The range of mags and cols for the plot which define the size of
 the plotted area in the X direction.
  
 (This does not affect the output to a table.)
  
4 Devlimy
 (Default - the minimum and maximum of the data    Range - -1.0e10 to
                                                            1.0e10))
  
 For the plot the range of mags and cols to define the size of
 the plotted area in the Y direction.
  
 (This does not affect the output to a table.)
  
4 Easycmd
 (Default - 'yes'                 Choice - 'yes:no')
  
 There are two options when running 'diagram', selected by your
 answer to the 'easycmd' parameter:-
  
 1) Easycmd='yes'
  
    Do a standard run through to plot a CMD: -
  
    The program asks for the input to take two tables and put a CMD
    up on the x-windows window. The program then asks for further
    options, expecting the answer - 'exit'.
  
    If you put the `\\` on the command line, the program will then
    end, leaving the CMD displayed in its window.
  
    If you choose to continue, you will find yourself in the middle
    of 'easycmd=no' mode, being repeatedly asked what you want to do
    through the 'option' parameter. You should choose the 'panel'
    option, and then interact with the program through the 'panel'.
  
 2) Easycmd='no'
  
  
    Do what you want: -
  
    The program first asks you if you want to plot a CMD or a
    colour-colour diagram. You choose, and then the program asks
    for what are the 'codes' of which colours to plot.
  
    After this, the program goes in the looping 'options' mode,
    repeatedly asking which option of action you want to do.
  
    It suggests a sequence of options which will normally get you
    the inputs needed for making and displaying the plot. If you
    accept these options all will go well. (You can, of course,
    choose diferent options if you wish to.)
  
    After this, all options are open. The program will suggest
    selecting the 'panel' option, where the options are available
    by pressing 'buttons' on a window. This is quite handy, and
    an in-screen help is displayed, as your cursor moves over the
    different buttons.
  
4 Exit
  (Default - 'yes'               Choice - 'yes:no')
  
  Do you want to exit from the program?
  
  This is asked for, if the program is in the 'easycmd=yes' mode,
  and has plotted the CMD.
  
  This is defaulted to 'yes', so that if the command line has the
  '\\' input giving that defaults be taken, then the program ends,
  as it should.
  
  If the command line does not have this, then it is up to the
  user whether to continue.
  
4 Gtype
  (Default - 'xwindows'            Choice - any)
  
  A character string giving the local name for the graphics
  display type.
  
  'xwindows' will put it out on the screen of your X-window device,
  if you are using one.
  
  If 'ask' is input, then the program asks a very similar question,
  in a different way. A response here of '?' will bring up a listing
  of all the possible names of graphics devices which are supported
  on your machine, and you then input the appropriate name.
  
4 Hilim
 (Default - 49.0 or last value input    Range - -1.0e10 to 1.0e10)
  
 Stars in this file with input magnitude  fainter than this
 are not accepted.
  
4 Intab
  (Default - null)
  
 If `file' is chosen in `TYLINE' parameter option, then a table with
 the points defining the line is needed. This table should have two
 columns with 'x' and 'y' values in it. The numbers of these columns
 are input with the 'PCOLUMN' parameter.
  
 One can use the 'offsets' parameter to shift this line an x and y.
  
 This table must be in the Starman NDF table format.
  
4 In
  (Default - null)
  
 An input file containing a table with one column having magnitudes.
  
  
 This can be one of 48 input files from IN1 to IN48.
 They are used in sets of four (e.g. IN1,IN2,IN3,IN4) for a 'set'
 of (up to) four tables of input colours to make an array of points for
 the colour-magnitude or colour-colour diagram. If only two or three
 input magnitudes are needed, then not all of (IN1,IN2,IN3,IN4) will
 be used. The next set of data would then use the parameters (IN5,IN6,
 IN7,IN8), and so on. Thus 12 sets in all can be input.
  
 This table must be in the Starman NDF table format.
  
 This is the help for the 'IN1', 'IN2', ... 'IN48' parameters.
  
4 Linecol
   (Default - 'black'            Choice - (black:white)
  
    Colour of plot lines. This is determined by whether you have a
    black or white background to your plots.
  
4 Lolim
 (Default - 0.1 or last value input           Range - -1.0e10 to 1.0e10)
  
 Stars in this file with  input mag brighter than this
 are not accepted.
  
4 Ncolumn
 (Default - 0            Range - 1 to no of columns in table)
  
 The column in the table that contains the number of good estimates
 of the star magnitudes. If no such column exists, or use of it is
 not desired, input `0'.
  
 This is used for `NCOL1', `NCOL2', `NCOL3', `NCOL4'.
 refering to the (up to) four input tables in the set.  (12 sets in
 all allowed.)
  
4 Numbutt
  (Default - see below          Range - 2 to 3)
  
  Number of `X-Window' buttons available on the mouse.
  
  Some devices have two and some have three buttons available. This
  can depend both on their actual presence, and also on the X Windows
  software that is being run.
  
  With three buttons, then the Starman programs use all three, with
  the right-hand button being used mainly as the 'exit' button.
  
  With two buttons, then the third button is simulated by pressing
  both of the buttons down, with the middle one being pressed slightly
  BEFORE the left-hand one. Use of the middle button in its normal
  way has to be modified, in that one has to pause for half a second
  after using it.
  
  [This parameter is usally 'hidden', with the machine manager setting
   it to the appropriate value for the local set-up. Sometimes it will
   be left to the user to set, depending on his software
   configuartion.]
  
4 Numgood
 (Default - 0 or last value input       Range - 1 to 100000)
  
 If using this input control, this is the minimum no of estimates
 used in making the star mag for a star in the input file
 that is acceptable. Any star with fewer that that for the
 mag in this file is ignored.
  
4 Offsets
 (Default - 0.0,0.0             Range - -1.0e10 to 1.0e10)
  
 The 'x' and 'y' offsets to be added to the data in the 'INTAB'
 table for plotting.
  
4 Option
 (Default - last chosen in list below.  Choice  - see list below)
  
 The choice of action to do next is defined by the 'option'
 chosen. These options are also available through the 'panel'
 push-button mode, on choosing the 'panel' option.
  
  Option        Function
  ------        --------
  clear         Clear plot
  close         Close the graphical device
  colour_eqn    Change colour equation applied to input colours
  cursor        Get XY positions from graph with cursor
  dotnumber     Set whether numbers are plotted with points
  exit          Exit from this program
  getdata       Get the tables with the magnitudes in them
  line          Put line onto graph.
  mag_limits    Star Magnitude ranges allowed to be plotted
  nearest       Get information on a star by putting cursor on it
  numgood       Number of good measures for plotting a star
  open          Open the plot device
  panel         Switch between panel and keyboard option selection
  plot          Plot the data as points on the graph
  plot_limits   Set the range of the graph axes in X and Y
  plot_range    Set the range of data in X and Y to be plotted
  setnumber     Data set these setups apply to
  store         Store the present plotted data set as a table file
  symbol        Set the symbol plotted as points
  zero_point    Change zero points applied to input colours
  
  There is also the big 'HELP' button.
  
  When using the cursor to find magnitudes/colours of positions
  on the graph, place the cursor on the desired location, and
  press any keyboard key. To end, place the cursor to the left
  of the origin and press any key.
  
4 Out
  (Default - null)
  
 The Output table for storing the results.
  
 This is a Starman NDF format table
  
 The contents of a row in the output file are:-
  
  -  Identifier;
  -  X, Y;   (optionally)
  -  col(2) or col(1)-col(2);
  -  col(3)-col(4);
  -  input waveband magnitude
  -  number of good estimates in that magnitude
  
 The first two columns (the 'x' and 'y') are optional. Their presence
 is controlled by the 'storexy' parameter.
  
 The last two entries are repeated for each of the input magnitudes.
  
4 Pcolumn
 (Default - 1,2     Choice - 2 integers in the range 1 to no of columns)
  
  If `file' is chosen in `TYLINE' option, these  are the numbers of
  the two columns in the table containing respectively the 'x' and the
  'y' values which are to be plotted as a line.
  
4 Set
 (Default - present value    Range - 1 to No of sets input)
  
 The number defining which of the input sets of (up to) four
 tables to deal with. Up to twelve sets can be kept.
  
4 Storexy
 (Default - 'yes'       Choice - 'yes:no')
  
  If yes, then the input file will contain in its first two columns,
  the X and Y positions of the stars, and you desire that these should
  be output to the output table.
  
4 Symbol
 (Default - 1 or last value input     Range - 1 to 128)
  
 The PGPLOT symbol code that defines the shape of the symbol
 plotted.
  
4 Title
 (Default - Input file title or `Output from Diagram'     Choice - any)
  
 The content of the 'title' header in the output table.
  
4 Tyline
 (Default - 'return'     Choice - 'cursor:table:keyboard:return')
  
 Flag for method of putting line on diagram.
  
 When a method is chosen, the line is plotted, and this question is
 asked again.
  
 Points given by the various inputs are plotted as joined together
 with straight lines.
  
 Choice     Action
 ------     ------
 cursor     Line is drawn joining the successive locations marked
            with the cursor, until a location less than the minimum
            `x' value of the graph is chosen, when this cursor
            entry stops.
  
 table      An input table of x and y positions is asked for, via
            the 'intab' parameter. These are plotted.
  
 keyboard   The user types in pairs of 'x','y' positions, and these
            are plotted. This is stopped by the user inputting an 'x'
            position to the left of the graph edge.
  
 return     Return to the 'options/'panel' mode.
  
4 Type
 (Default - 'hr'   Choice - 'hr:twocol')
  
 Flag for choosing colour-magnitude (hr) or colour-colour (twocol)
 diagram type output.
  
4 Xrange
 (Default - the range of the data     Range - -1.0e10 to 1.0e10)
  
 The acceptable range of the value of the output 'x' colour,
 (col1 - col1 ), that a star may have. If it lies outside this range,
      3      4
  
 then it will not be plotted, and it will be stored with a warning
 flag.
  
4 Xykey
  (Default - X max and Y max or present values       Range - -1.0e10 to
                                                              1.0e10)
  
 `x',`y' posn to make line plot to.
  
 (This is only used in the `keyboard' option of the `tyline' choice
 in the 'line' option.input.
  
 If the 'x' value input is less than the minimum value that can be
 displayed then the keyboard entry is halted, otherwise the next
 position is asked for.
  
4 Yrange
 (Default - the range of the data         Range - -1.0e10 to 1.0e10)
  
 The acceptable range of the value of the output 'y' colour,
 col1 or (col1 - col1 ), that a star may have. If it lies outside this
     2        1      2
  
 range, then it will not be plotted, and it will be stored with a
 warning flag.
  
4 Zerop
 (Default - 0.0               Range - -1.0e10 to 1.0e10)
  
 The zero point corrections to be added to the input magnitude.
  
 This is the `Zero' in the equation:-
  
        Col1  = Zero  + Col  + K .(C -C )
            n       n      n    n   3  4
  
 See next help layer up for more information.
  
3 Author
         A.J.Penny                RAL                   1991 July
2 Dustring
  
  Add and subtract the 'dustring' shadows of dust particles to and
  from an image.
  
  It is mainly useful for making a flat field match up to the desired flat
  field when a dust particle has blocked part of the image from complete
  illumination since the flat field was made.
  
  Likewise, by subtracting a ring, the flat can be corrected to before
  the particle fell.
  
  It is useful for combining flats with different flat field dustrings.
  
  It displays the image so that you can see wheat you are doing
  and uses the 'panel' push-buttons, but it also can be run without
  an image display.
  
3 Use
  
  The program is a looping one, where you can repeatedly choose various
  options.
  
  Basically, you select a dustring, and manually by trial and error
  you adjust the position and background level for a theoretical ring
  which you then add or subtract from the image.
  
  The ring is added/subtracted as:-
  
            (Background Level) x (Profile(xo,yo))
  
    where Profile(x,y)     is a fixed profile which is a function of
                           X and Y, and is a percent of the background
                           level.
  
                xo,yo      is the position of the ring.
  
      Background Level     is the local background level at the ring
  
  The ring profile will have previously be determined, again by trail
  and error. (See help subsection on profile.)
  
  When you are happy with the position, profile, and background level,
  you can also store those parameters in the working table.
  
  When you done all the adding/subtraction, you can store the output
  image.
  
  You can also note into a table any ring you wish, and this table can
  later be output to a file. It would contain the parameters of the rings
  and will only have those rings actually noted, which is NOT necessarily
  the same as those added/subtracted from the image.
  
3 Choosing_Options
  
   In the looping mode, you are faced with a menu of actions to
   choose from.
  
   When using the image display, the looping options request can come
   through a 'panel' displayed in the display, with buttons to 'press'
   to select options.  Six lines of help are displayed as each button is
   pointed at. This mode is selected by choosing the 'panel'
   option.
  
   Choice of actions to do:-
  
     Choice      Function
     ------      --------
     add           Add a ring of standard profile at position set
     bk_auto       Toggle the method of calculating the local level
     bk_ground     Input the level for the background
     bk_level      Measure local level - perhaps load into default
     bk_load       Toggle between loading background measure and not
     bk_size       Set the size of the area used to find background
     clear         Clear screen
     close         Close the display screen
     cursor        Add or subtract a set ring at cursor position
     cvalues       Show the cursor position and image pixel value
     display       Display image
     exit          Exit from this program
     flash         Display image in standard way
     im_get        Input new image
     im_reload     Load original input image into present image
     im_store      Output present image into a disk file
     open          Open the display screen
     panel         Switch between panel and keyboard option selection
     position      Set position via keyboard
     profile       Set the parameters of the ring profile
     reset         Reset zoom/pan to unity and centre
     show          Print out the ring paramaters and present controls
     subtract      Subtract a ring of set profile at position set
     tb_apply      Add or subtract rings from the input table
     tb_clear      Clear the table of set rings
     tb_get        Extract a ring from the table, ready for use
     tb_list       List the present contents of the set rings table
     tb_load       Load a table of set rings from a file
     tb_put        Put present ring parameters into table
     tb_store      Store present table of rings into a disk file
     tb_use        Set whether to use a particular ring in the table
     zoom          Zoom and pan image by using mouse location
  
  
  For the zooming and panning, the mouse buttons have a complex
  mode of operation
  
   Buttons for Cursor add/subtract work:
                           Button 1 = add
                           Button 2 = subtract
                           Button 3 = exit
   Buttons for Zoom work:  Button 1 twice        = zoom /2
                           Button 2 twice        = zoom x2
                           Button 1 and Button 2 = pan
                           Button 3 twice        = exit
   Buttons for Cvalues work:
                           any button            = exit,
  
3 Profile
  
   The profile is shaped like this:-
  
      xxxxxxxxxxxxx              xxxxxxxxxxxx              xxxxxxxxxxx
                   x            x            x            x
                    xxxxxxxxxxxx              xxxxxxxxxxxx
  
    Where the shape is determined by the parameters
  
       PERCENT     Percentage drop into shadow (in terms of local
                                                background)
       RIN         Inner radius of deep part of ring
  
       ROUT        Outer radius of deep part of ring
  
       SLOPEIN     Inwards distance from RIN to location of no shadow area
  
       SLOPEOUT    Outwards distance from ROUT to location of no shadow area
  
3 Output_image
  
  The output image is a copy of the input image, with rings added
  and subtracted.
  
3 Output_table
  
   Optionally, an output table, storing the parameters of the rings,
   can be stored.
  
   The contents are the parameter for each ring:-
  
      Column    Header          Content
      ------    -------         -------
        1         'X'            X position of centre
        2         'Y'            Y position of centre
        3         'BACK'         Background level in image
        4         'PERCENT'      Percentage of background ring drops
        5         'RIN'          Radius of inner edge of deep ring
        6         'ROUT'         Radius of outer edge of deep ring
        7         'SLOPEIN'      Distance covered by inner penumbra
        8         'SLOPEOUT'     Distance covered by outer penumbra
        9         'USE'          Flag for use this ring (0=yes:1=no)
  
   Only those rings actually 'noted' will be in this table. It does
   not passively record all those added or subtracted. from the image
  
  
3 Parameters
  
  
4 Back
  (Default - 1.0            Range -1.0e10 to 1.0e10)
  
   The local background level for the ring to use when being
   added or subtracted.
  
4 Do_add
  (Default - 'add'            Choice - 'add:sub')
  
  Add or subtract all the rings, in the list of rings, to the
  image?
  
4 Imcomp
  (Default - variable, usually 1,1     -     Range - 1 to 1000)
  
  Factor in X and Y by which to compress the displayed image.
  
4 Imposn
  (Default - so as to centre image in screen
   Range -  -100000 to 100000)
  
  Place to put b.l.h. corner of displayed image onto the
  screen. Thus an answer of `1,1' would put the b.l.h. pixel
  of the displayed image at the b.l.h corner of the screen.
  
4 In
  (Default - null)
  
  The name of the input image file.
  
  This must be a Starman NDF 'short' integer*2 16-bit or 'real'
  real*4 32-bit image.
  
4 Intab
  (Default - null)
  
  The name of the input file containing the list of rings.
  
  This must have 9 columns and up to 1000 rows. The contents
  must be in the format of a table output from this program
  via the 'OUTTAB' parameter.
  
  This must be a Starman NDF table format file.
  
4 Number
  (Default - 1          Range - 1 to Number of rings input)
  
  The number in the working table of the wanted ring.
  
4 Numbutt
  (Default - see below          Range - 2 to 3)
  
  Number of `X-Window' buttons available on the mouse.
  
  Some devices have two and some have three buttons available. This
  can depend both on their actual presence, and also on the X Windows
  software that is being run.
  
  With three buttons, then the Starman programs use all three, with
  the right-hand button being used mainly as the 'exit' button.
  
  With two buttons, then the third button is simulated by pressing
  both of the buttons down, with the middle one being pressed slightly
  BEFORE the left-hand one. Use of the middle button in its normal
  way has to be modified, in that one has to pause for half a second
  after using it.
  
  [This parameter is usally 'hidden', with the machine manager setting
   it to the appropriate value for the local set-up. Sometimes it will
   be left to the user to set, depending on his software configuartion.]
  
4 Option
  (Default - last choice      Choice - see below)
  
   In the looping mode, you are faced with a menu of actions to
   choose from.
  
   When using the image display, the looping options request can come
   through a 'panel' displayed in the display, with buttons to 'press'
   to select options.  Six lines of help are displayed as each button is
   pointed at. This mode is selected by choosing the 'panel'
   option.
  
   Choice of actions to do:-
  
     Choice      Function
     ------      --------
     add           Add a ring of standard profile at position set
     bk_auto       Toggle the method of calculating the local level
     bk_ground     Input the level for the background
     bk_level      Measure local level - perhaps load into default
     bk_load       Toggle between loading background measure and not
     bk_size       Set the size of the area used to find background
     clear         Clear screen
     close         Close the display screen
     cursor        Add or subtract a set ring at cursor position
     cvalues       Show the cursor position and image pixel value
     display       Display image
     exit          Exit from this program
     flash         Display image in standard way
     im_get        Input new image
     im_reload     Load original input image into present image
     im_store      Output present image into a disk file
     open          Open the display screen
     panel         Switch between panel and keyboard option selection
     position      Set position via keyboard
     profile       Set the parameters of the ring profile
     reset         Reset zoom/pan to unity and centre
     show          Print out the ring paramaters and present controls
     subtract      Subtract a ring of set profile at position set
     tb_apply      Add or subtract rings from the input table
     tb_clear      Clear the table of set rings
     tb_get        Extract a ring from the table, ready for use
     tb_list       List the present contents of the set rings table
     tb_load       Load a table of set rings from a file
     tb_put        Put present ring parameters into table
     tb_store      Store present table of rings into a disk file
     tb_use        Set whether to use a particular ring in the table
     zoom          Zoom and pan image by using mouse location
  
   Buttons for Cursor add/subtract work:
                           Button 1 = add
                           Button 2 = subtract
                           Button 3 = exit
   Buttons for Zoom work:  Button 1 twice        = zoom /2
                           Button 2 twice        = zoom x2
                           Button 1 and Button 2 = pan
                           Button 3 twice        = exit
   Buttons for Cvalues work:
                           any button            = exit,
  
4 Out
  (Default - null)
  
  The name of the output image file. This holds a copy of
  the input image with the effect of all rings that have been added
  or subtracted.
  
  This is either a 'short' integer*2 16-bit or 'ral' real*4 32-bit
  Starman NDF format image, with BZERO, BSCALE and INVAL/RINVAL
  from the input image.
  
4 Outtab
  (Default - null)
  
   The output table, storing the parameters of the rings noted.
  
   This is a Starman table format file.
  
   The contents are the parameter for each ring:-
  
      Column    Header          Content
      ------    -------         -------
        1         'X'            X position of centre
        2         'Y'            Y position of centre
        3         'BACK'         Background level in image
        4         'PERCENT'      Percentage of background ring drops
        5         'RIN'          Radius of inner edge of deep ring
        6         'ROUT'         Radius of outer edge of deep ring
        7         'SLOPEIN'      Distance covered by inner penumbra
        8         'SLOPEOUT'     Distance covered by outer penumbra
        9         'USE'          Flag for use this ring (0=yes:1=no)
  
   Only those rings actually 'noted' will be in this table. It does
   not passively record all those added or subtracted. from the image
  
4 Percent
   (Default - 0.5 or last value       Range -  0 to ?)
  
   The percentage dip into the deep part of the ring profile,
   in terms of the defined background level
  
4 Posn
  (Default - Centre or last position           Range - -1.0e10 to 1.0e10)
  
   The X,Y position to put the ring at.
  
4 Rin
  (Default - 8.0 or last value       Range - 0.0 to 1.0e8)
  
   The radius at the inner ring edge of the deep part of the ring.
  
4 Rout
  (Default - 12.0 or last value       Range - 0.0 to 1.0e8)
  
   The radius at the outer ring edge of the deep part of the ring.
  
4 Screen
  (Default - 1, size of image      Range - 1 to large)
  
  Size of screen or window to open.
  
  The default size is that of the image, unless the image is too large
  to fit on the screen, when the image will be binned down by an integer
  factor for display. The default size will then be this binned down size.
  
4 Side
  (Default - 5 or last value           Range -  3 to size of image)
  
   The size of the side of the box, about the last defined
   position, to define the area in which to find the local level.
  
4 Slopein
  (Default - 1.0 or last value           Range -  3 to size of image)
  
   Inwards distance from RIN to location of no shadow area.
  
   (The inner penumbra of the shadow.)
  
4 Slopeout
  (Default - 3.0 or last value           Range -  3 to size of image)
  
  
   Outwards distance from ROUT to location of no shadow area.
  
   (The outer penumbra of the shadow.)
  
4 Title
  (Default - input image title        Choice - any)
  
   The title to apply to the output image or table
  
4 Use
  (Default - default                  Choice - `yes:no')
  
 Is this ring to be used?
  
 The default is 'yes' if not used before, or the last flag for
 this ring.
  
4 Vrange
  (Default - suggested values              Range - -1.0e10 to 1.0e10)
  
  The range of values to be displayed as black to white on the image
  display.
  
4 Wrap
  (Default - `no'        \hspace{4ex}    Choice - `yes:no')
  
 When displaying image on image display, for those image pixel values that
 lie above or below the display values for white or black, do you want
 these values to be shown as white or black (`no'), or do you want them to
 be `wrapped' round - that is considered as modulo the display range
 (`yes')?
  
  
3 Author
         A.J.Penny  RAL             1990-10-05
  
2 Interact
  
  This is the main Starman program for interacting with an image
  or images displayed on a display device.
  
  The Main functions are:-
     - Display of image(s)
     - Inspection of the image
     - Changing look up tables and use of colours
     - Inspection of pixel values in sub-areas in various ways
     - Altering the image in various ways
     - Plotting (X,Y) positions from an input table
     - Getting (X,Y) positions for storage in an output table
     - Aperture photometry including airmass
     - Scrutiny of the Starman MEASURE program output
  
 One gets into one of eight groups of options, and repeatedly
 chooses options to perform. One can move between groups of
 options
  
3 Use
  
 As the use of Interact is interactive, there is an infinite number of ways
 of using it. However, to give you some ides of its use, the following
 `run-through' of one possible session is given. It is assumed you are at a
 colour X-window device.
  
 Where a '>' appears, you have to type the response, followed by a
 'return'. Where no response is shown, you just do the 'return'.
 The parts in curly brackets are instructions for actions by you, and
 not responses for you to type in. The parts in square brackets are
 comments on the display.
  
 >interact $STARMAN_DATA/measure_in                              (1)
 EASYSTART - Use standard start sequence of operations? /YES/>no (2)
          [information on use typed out]
 OPTION - Which action to perform? /'image'/ >                   (3)
 OPTION - Which action to perform? /'flash'/ >                   (4)
 SCREEN - XY size of window to open? /[100,100]/ >200,200        (5)
 Display contrast: low =   324.9188 ; high =   -19.3838
          [display window opened and image displayed]
 OPTION - Which action to perform? /'panel'/ >                   (6)
          [`buttons' and `help panel' windows opened]
    {Click cursor on `cvalues' button}                           (7)
    {Move cursor around image}                                   (8)
    {Click cursor right-hand button}                             (9)
    {Click cursor on `inspect' button}                          (10)
    {Click cursor on `slice' button}                            (11)
    {Position cursor inside and near b.l.h. corner of           (12)
      image and click}
 X = 13  Y = 17
    {Position cursor inside and near t.r.h. corner of           (13)
      image and click}
 X = 85  Y = 86
 VPRANGE - Min and Max of values to plot? /[-364,4904]/ >       (14)
 Input GKS name of device for graphs (-ask- if dont know)
 GTYPE - GKS name of plot device ? /'xwindows'/                 (15)
          [graphical window opened]
 LINECOL - Colour of plot lines? (black:white) /'black'/ >      (16)
          [graph plotted in graphical window]
    {Click cursor on `exit' button}                             (17)
          [display, buttons and help windows closed]
 >xdestroy xwindows                                             (18)
          [graphical window closed]
 >
  
 Comments on above run-through:-
  
  1)  By putting the target image file name on the command line, the
      first time the name is asked for, it will be got from this
      command line. (As the image parameter, (`IN'),is the first in
      the Interact interface file, we do not have to say `IN=name'.)
  
  2)  Interact has a `default' start. However, we avoid this to
      demonstrate usage of the program
  
  3)  We are now in the `main' group of options and have available all
      the functions of this group. The choice of the option of
      getting an image is suggested. By just doing `carriage return',
      we get that option. (As we have put the image file name on the
      command line, the name is not asked for again here.)
  
  4)  We are now asked again for what option we want, and are
      offered the default of displaying the image with standard display
      settings. We take that default.
  
  5)  What size of window is to be put up? The default is the size of
      the image. We choose a window twice as large. The program opens
      the window and displays the image at a contrast suitable for
      images which are `normal' pictures of astronomical objects. It
      types out the lower and upper pixel values that cover the range
      from pure black to pure white.
  
  6)  Again, what option? We choose the default, which is
      to switch over from keyboard entry of the desired options to
      `push-button' mode. A panel of push buttons and a separate help
      window appears. The help window contents change as the
      cursor moves over the buttons.
  
  7)  We now have the options available to use in the `main' group,
      via the buttons. We choose that which will let us look at the
      pixel values.
  
  8)  Note the change in display of cursor position and pixel values
      in the panel, as the cursor is moved over the image.
  
  9)  End this option and go back to the panel option selection.
  
 10)  Leave the `main' group of functions and go to the `inspect'
      group. See how the panel display changes.
  
 11)  Select the option to get a graphical slice through the image.
  
 12)  Choose the start of the `slice'. Note the cross marking your
      position, and the typing out of the location.
  
 13)  Choose the end of the `slice'. Note that the `slice' line is
      drawn and the end location typed out.
  
 14)  The program now asks you for the `Y' range of the graph
      to display trhe results. The default is +/- 10 percent
      larger than the actual range of pixel values in the slice.
      We take the default.
  
 15)  The program now has to display the slice. It does this
      using the Starlink graphics system, GKS. It asks for the
      name of the graphics device. We give it `xwindows', the
      graphics name of one the four possible graphical windows
      on our workstation. The program opens up the window.
  
 16)  Depending on how you have set up your X-wondow device,
      the background can be any colour. We thus need to choose
      whether to have black or white lines drawn. We select
      the default.
  
 17)  We are again able to choose an `inspect' option. We select
      the one to exit from the program.
  
 18)  The graphics system leaves the graphics window displayed.
      We could leave it there, ready for its next use. We choose
      however to delete it. (See the Starlink SUN on GWM for more
      about this.)
  
3 The_Options
  
  There are eight groups of options available. At the
  start of the program, one is in the base group, the `main'
  group. From here one can access the other seven groups,
  and also select from the simple set of options that all
  groups give access to.
  
  The eight groups are:-
  
   Group       Type of options available
               (all do `simple set' as well)
   -----       -------------------------
   main        -
   alter       change image
   aperture    aperture photometry with airmass corrns
   colour      change colour of displayed image
   fit_magns   profile photometry
   inspect     inspect image
   positions   plot/get positions
   scrutiny    look at MEASURE program output
  
  The `simple set' includes:- accessing the other groups and exiting;
  getting and displaying images; image zoom/pan, clearing;
  accessing pixel values; selecting image area.
  
  These groups can be accessed either by the keyboard, or by selecting
  the `panel' option, when a `panel' is shown on the image display,
  and the cursor can be used to push `buttons'. In this mode, a
  six-line help is displayed when the cursor is over a button.
  
4 Simple_set
  
  This is the `simple set' of options which are available in all
  groups of options:-
  
 Option        Function
 ------        --------
 alter         Functions for image altering in various ways
 aperture      Functions for aperture photometry
 colour        Functions for changing colour display of the image
 fit_magns     Functions to get star magnitudes with Gaussians
 inspect       Functions for image inspection in various ways
 main          Entry point for program
 positions     Functions to get or plot a list of positions
 scrutiny      Functions to look at Starman MEASURE output
  
 image         Input new image
 im_get_flash  Input new image and display (flash) it
  
 area          Select area of image to display
 clear         Clear screen
 close         Close the display screen
 compress      Compress image in either X or Y for display
 cvalues       Show the cursor position and image pixel value
 display       Display image
 flash         Display image in standard way
 open          Open the display screen
 reset         Reset zoom/pan to unity and centre
 zoom          Zoom and pan image by using mouse location
  
 panel         Switch between panel and keyboard option selection
 exit          Exit from this program
  
4 Alter
  
  In addition to the `simple set', see the help above, the
  following options are available:-
  
 Option        Function
 ------        --------
 blank_c       Set areas to INVALID with cursor
 blank_k       Set areas to INVALID with keyboar
 calculate     Calculate a new image
 cut_c         Cut out a new image with cursor
 cut_k         Cut out a new image with keyboard
 compress      Compress image in X and Y by integer factors
 drange        Change pixel value display range
 flipx         Flip image along x direction
 flipy         Flip image along y direction
 magnify       Magnify image in X and Y by real factors
 rotate        Rotate image
 smooth        Smooth image
 store         Store present image to disk
 transform     Transform image in X and Y
 unsharp       Unsharp mask the image
 value_k       Set the value of a pixel with keyboard
 weed          Set a range of pixel values to INVALID flag
  
5 Calculate
  
 Does mathematics on images.
  
 Arithmetic and mathematical functions are applied to images
 and constants, by means of a FORTRAN-like equation.
  
 In addition to the standard FORTRAN facilities, a number of special
 functions are available (e.g. for adding noise).
  
6 Method
  
 The user inputs a Fortran-like equation (through the parameter EQN).
 The equation can contain references to:-
  
   - specified images
   - variables
   - constants
   - Fortran operators on these (e.g. `+', or `cos()', ... )
   - extra operators
  
 (For more details on the structure of the equation see the
 `equation' sub-help.)
  
 The equation is analysed and the operations are performed. Each
 pixel of the new image contains the results of the equation,
 with the data for the input images coming from the matching pixel
 of those input images.
  
 More specifically, the equation is analysed to identify the names
 of images and variables and to evaluate constants and isthen
 converted into reverse-Polish notation. The images and variables are
 prompted for in alphabetical order and the program then performs
 simple `stack-arithmetic' to evaluate the expression for each output
 image pixel.
  
 The new image is made by:-
  
  Making a new image from scratch - whose X and Y sizes are either
  equal to the minimum X and Y sizes in the set of the input images
  of, if there are no input images, defined by the user.
  
6 Equation
  
 An arithmetic expression of up to 132 characters which gives the
 function to be evaluated for each output image pixel. The syntax
 is similar to Fortran (same operator precedence, etc.) but with the
 some differences, described in the lower help levels here.
  
7 Input_images
  
  Input images can be represented in three ways:-
  
  Method   Example                    Use
  ------   -------                    ---
  Name     fred                       Simple, easy
  
  Marked   \!../dirname/fred-back\!   For when a file name contains
  Name                                characters that would be confused
                                      with operators. The `\!' denote
                                      the start and end of the name.
  
  Code     IA                         This special symbol means the
                                      presently displayed image.
                                      (Must be capitals, i.e. `ia' will
                                      be rejected.)
  
  Code     IB  IC  ... IZ             These special symbols are taken
                                      as asking for images. The input
                                      parameters `INB', `INC', etc.
                                      will then be used to ask for the
                                      images. (Must be capitals, i.e.
                                      `ib' will be thought of as the
                                      file `ib.sdf'.
  
  The input images must be standard Starman ADAM .SDF images, with
  either `real' 32-bit real values, or `short' 16-bit integer values.
  They can have the `BSCALE' and `BZERO' values, and `magic pixel values'
  indicating `bad' pixels.
  
7 Numerical_parameters
  
  Numerical parameters by any of the variables variables A to Z
  
7 Constants
  
  Constants by any numerical Fortran constant (real or integer,
  including exponent if required).
  
7 Real_typing
  
    Arithmetic is performed as though all values were real, The
    input images are scaled by their (BSCALE and BZERO) scale/zero
    images before use. The actual calculations are performed in
    double precision, and the results translated back to the
    real format of the working image.
  
7 Fortran_functions
  
    The standard Fortran functions are available and identified
    by their generic names, i.e.
  
        -         +         **        *         /         NEG
        SQRT      EXP       LOG10     LOG       SIN       COS
        TAN       ASIN      ACOS      ATAN      ATAN2     SINH
        COSH      TANH      ABS       AINT      ANINT     MOD
        SIGN      DIM       MIN       MAX
  
    Note, however, that MIN and MAX may take only 2 arguments.
  
    To avoid problems with the way the Starlink environment
    handles character parameters, the comma `,' must be replaced with
    the colon `:' for separating function arguments. Similarly, the
    division sign `/' may be replaced by the percent sign `%', although
    this latter substitution is not necessary for simple constructs or
    when replying to a prompt at the terminal.
  
7 Extra_functions
  
   There are five extra functions available:-
  
    XX           The `X' value of the pixel.
    YY           The `Y' value of the pixel.
    CLIP(A,B,C)  This gives the value B so long as it lies in the
                 interval A to C (inclusive). Otherwise it gives a
                 zero result. It may be used to remove output values
                 outside a certain range (e.g. if a division operation
                 has resulted in very large output values).
    GAUSS(X)     Gives gaussian noise with zero mean and standard
                 deviation X (the value returned is different at each
                 pixel and for each call of GAUSS).
    RAN(X)       Gives uniform noise with a value between zero and X
                 (the value returned is different at each pixel and
                 for each call of RAN).
  
7 Example
  
  For example, an equation of the form:-
  
        IA*3.3 + 0.5 + COS(IB) + A + MOD(YY:10) + XX%3.0
  
  will fill each pixel with:-
  
    ( 3.3 times the pixel in the corresponding pixel of the presently
          displayed image )
  + ( 0.5 )
  + ( cosine of pixel in the corresponding pixel of the input image
        specified through parameter `INB' )
  + ( the user defined value of the variable `A' )
  + ( the `Y' value (not its actual value) of the pixel, modulo 10 )
  + ( the `X' value (not its actual value) of the pixel divied by 3 )
  
  whilst
  
        fred*3.3+ 0.5 + COS(\!a1-b1\!) + A + MOD(YY:10) + XX%3.0
  
  will do the same for the images in the files `fred.sdf' and
  `a1-b1.sdf'.
  
7 Input
  
  Only images and variables used in the expressions are prompted for and
  these are requested in alphabetical order, and only once each.
  
  `IA' is taken as the presently displayed image.
  
  
4 Aperture
  
  There are two basic modes, both of which use a star aperture, moveable
  by the users with the mouse/cursor, one of which determines the sky
  value, to be subtracted from the star aperture counts, from the
  pixels in an annulus around the star aperture, and one which
  determines the sky from a seperate sky aperture (which must have
  previously been used to measure the sky).
  
5 Aperture_general
  
  In both modes, repeated measurements can be done. For the
  `non-annulus' mode, when a sky level is determined, that level is
  used for all subsequent star measures, until a new sky level
  aperture location is chosen and a sky measure made.
  
   The result is calculated as:-
  
   Output magnitude = 30.0 + `Zero point'
  
                           - 2.5*log  [(Star flux)/(Exposure time)]
                                    10
  
   With
  
   Star flux = Flux in star aperture - (Sky level)*(Star ap area)
  
   Sky flux  = 1) (Flux in sky aperture)/(area of sky aperture)
       OR    = 2) Median pixel value in sky aperture
  
   When making a star measure, the aperture can be centered on the star.
   The default method is to have no centering, but just to take the
   cursor position. A more accurate way is to fit a Gaussian to the
   star aperture data and centre on the centre of the Gaussian.
  
   There is an option, ('CENTRE'), which changes the method of
   centering on a star before measuring. By toggling through `CENTRE',
   you can choose one of the four ways:-
  
  
    Option      Action
    ------      ------
    None        No centering
    Max Pixel   Centre on the pixel with maximum value in star aperture
    Centroid    Centre on the centroid of the pixel values in star
                  aperture
    Gauss       Fit a Gaussian to the star aperture pixels
  
   With the `Gauss' mode, one can set the Gauss radii to be fixed or
   floating.
  
5 Aperture_photometry
  
   The whole subject of aperture photometry is not as simple as
   it looks at first appearence. It is recommended that the
   inexperienced user should read a book on astronomical photometry
   to understand the problems and possibilities fully.
  
   Some examples of the problems are:-
  
   1) The use of the `median' mode in determining the sky level
      inside the sky aperture is better than using the `mean'
      mode, as this rejects against stars better? No! The main
      problem in aperture photometry is the presence of field stars
      in the star and sky apertures. If you reject strongly against
      the faint (ones you cant see by eye) stars in the sky
      aperture by using the `median', then the similar faint stars
      in the star aperture will not be balanced by those in the
      sky aperture, and the star will be measured too bright.
  
   2) In choosing a location for the sky aperture, one should
      choose a place that is entirely free from field star? No!
      Again, such a place might be too free, compared to the star
      aperture location, and the star might be measured too bright.
  
   3) When measuring a very faint star on a number of exposures,
      then when the flux in the star aperture is less than the
      sky level, so that one gets a negative flux, those exposures
      should be ingnored? No! You must average everything together.
  
   4) When comparing a bright star and a faint star, it is better
      to use a smaller aperture on the faint star to cut down the
      sky noise? No! The profile of the bright and faint stars are
      the same, and thus using a smaller aperture on the faint
      star will cut out a greater fraction of the light of the
      faint star compared to the bright one.
  
   5) When comparing stars in different exposures, one can use
      different size apertures? No! For the same reason as for 4).
  
   6) When comparing stars in different exposures, one can use
      the same size apertures as when doing a single exposure?
      No! As the seeing will have varied between the different
      exposures, then the apertures must be large ones, so that
      the effect of the variable seeing does not cause a
      significantly diffrent amount of light to be lost out of
      the apertures in the different exposures. Typically apertures
      less than 10 or 20 arcsec diameter will lead to bad photometry.
  
5 Aperture_options
  
  In addition to the `simple set', see the help above, the
  following options are available:-
  
 Option        Function
 ------        --------
 Exptim_im     Correct for exposure time from image descriptor
 airmass       Correct for Airmass from image descriptor
 centre        Toggle centre => cursor/max pixel/centroid/Gaussian
 exptim_k      Change zeropoint by using keyboard exposure time
 level         Toggle mean/median method for sky level
 list          List the measures so far
 measure       Measure star/sky flux via cursor and buttons
 method        Sky determined from annulus or from separate area
 noise         Level of extra noise/pixel in pixel counts
 poisson       Change the Poisson scaling factor for Error
 recalc        A fresh calc for the last star and last sky
 remove        Remove a measure from memory and the display
 shape         Set via keyboard: aperture ellipticity, angle
 show_ap       Show apertures when getting positions
 size_key      Set via keyboard: X, Y size of the oval apertures
 size_sky      Cursor change the size of the sky aperture(s)
 size_star     Cursor change the size of the star aperture
 store         Store results in output file
 zero_pt       Change the -base- magnitude zero point
  
  Mouse buttons
  
      Buttons from left:-    (1)           (2)          (3)
        Aperture work:   pick star       pick sky      return
          Remove work: remove circle    remove circle  return
       Ap change work:  dec aperture    inc aperture   next aperture/
                                                       return
  
 In the `measure' option:- Measure star/sky flux via cursor and aperture
 size and star/sky choice. The star flux in the aperture is found (or
 sky level in the aperture), and typed. If star, then the star
 and last sky level (separate or annulus) is taken and the calc done
 for the magnitude;
  
               Mag = 30 + Z - 2.5*log  ((star-sky level)/Exp)
                                     10
  
4 Colour
  
  The standard image display uses a grey-scale display. However, by
  use of the Colour group of functions, colour displays can be made.
  There are eight standard LUT tables available, and others can be
  read in from files.
  
  Also the user can adjust the LUT table currently being applied. This
  can be done:-
  
  - `Flip' the LUT.
  -  Change display of values above and below ends of LUT.
  -  Interactively using a cursor:- choose a colour from the
     displayed colour bar with the cursor and `paint' this colour
     over a range of the LUT.
  -  Horizontal movement of the cursor (with a mouse button pressed) to
     rotate the LUT
  -  Use horizontal and vertical movement of the cursor (with a
     mouse button pressed) to shift and scale the LUT.
  
5 LUT_bar
  
  There is an option to show the form of the Look_Up_Table. A
  bar can be painted across the bottom of the screen, containing
  from left to right the colours associated with the displays cells
  from 1 to 150, which are used to code the image values to display
  the image.
  
5 LUT_standards
  
  The eight standard LUT tables are:-
  
   1)  Grey scale
   2)  Purple with light at top
   3)  Rainbow
   4)  Black/blue/green/yellow/purple/white
   5)  Black/blue/greeny-yellow/dark red
   6)  Black/blue/greeny-yellow/light red/white
   7)  Discrete steps (black/blue/green/light blue/red/purple/yellow/
                       white)
   8)  Inverted grey scale
  
  
5 LUT_storage
  
  The LUTs can be output in one format, the `full' format, and input
  in two formats, the `short' and `full' formats.
  
  The `full' format is:-
  ----------------------
  
  This is a table containing the R,G,B fractional colour contributions
  in columns 1,2,3 of the table (ignoring the 1st 5 for table row
  names - which are not used). There are 150 rows in this table.
  Starting from the first row, there is the R,G,B set for the lowest
  location on the table, carrying onto the 150th row, where there is
  the highest LUT entry.
  
  There is also a scale `LUTSC', and a zero `LUTZE', in descriptors.
  These scale the LUT. A given entry point, say RV, which is
  bewteen 0.0 and 1.0, would normally go to the R,G,B set of the
  RV*150th row in the input LUT. Where it actually goes is
  the [(RV-LUTZE)/LUTSC]*150th entry. If this entry is below 1 or
  above 150, then the entry is either, set at 1 or 150, or set at
  its modulo 150 value.
  
  The `short' format is:-
  -----------------------
  
  This is a way of making a simple table to input to the program.
  
  It is a table with 6 rows, and between 3 and 25 columns.
  
  Each row is allocated to as:-   1      2      3       4     5      6
                                 Red   Red   Green   Green   Blue   Blue
                                Posn  Value   Posn   Value   Posn  Value
  
  The first column in a row indicated how many columns in that row are
  active, excluding itself.
  
  This is then converted into the LUT by:-
  
  1) Taking the proportion for each colour at a step in the LUT. This
     is done by moving along the `Colour Posn' row until one reaches
     the point that the step in the LUT table is. Thus if the step is
     number 59 out of 150 steps, then its location is 0.252. In the
     example below, this for red would be just after the 2nd (0.25)
     Posn.
  
  2) Calculating the corresponding `Colour Value'. In the example below,
     this would be between the 2nd and 3rd values, so the Red fraction
     would be :-
  
   Red fraction = [2nd value] +
                  [3rd-2nd values]*[fraction of step to 3rd `Colour Position']
  
   in this case:-
       fraction = 0.00  +
                  (1.0-0.0)*{(0.252-0.25)/(0.5-0.25)}
  
  
  An example of this is the `short' LUT used for the `rainbow' LUT, no 3
  above. It is:-
  
     4.0, 0.0, 0.25,  0.5,  1.0,  0.0, 0.0
     4.0, 0.0, 0.00,  1.0,  1.0,  0.0, 0.0
     6.0, 0.0, 0.125, 0.5, 0.64, 0.77, 1.0
     6.0, 0.0, 0.000, 1.0, 0.50, 0.00, 0.0
     5.0, 0.0, 0.25,  0.5, 0.77,  1.0, 0.0
     5.0, 0.0, 1.00,  0.0, 0.00,  1.0, 0.0
  
  
5 Colour_options
  
  In addition to the `simple set', see the help above, the
  following options are available:-
  
 Option        Function
 ------        --------
 bar_clear     Remove display of LUT table bar
 bar_show      Display LUT bar
 ends_bw       Values below/above LUT ends as black/white
 ends_cc       Values below/above LUT ends as col/col
 ends_wb       Values below/above LUT ends as white/black
 ends_wrap     Values below/above LUT ends as wrapped
 file_get      Read a full Look-Up Table from a file
 file_put      Write the present Look-Up Table to file
 file_sget     Read a short Look-Up Table from a file
 flip          Flip LUT
 load          Load LUT from store
 paint         Pick a colour from LUT bar and overwrite range of LUT
 rotate        Rotate LUT by moving cursor
 scale         Shift and scale LUT by moving cursor
 wrap          Toggle how image values above/below limits shown
  
 ****  This colour system uses a Look-Up Table (LUT)  ****
  
 The actual pixel values in the image are already displayed
 by scaling and shifting so that a range of those values lies
 between 0 and 255. To each of these 256 -values-, a colour
 is now ascribed, by means of a Look-Up Table (LUT).
 These options allow you to change the colours ascribed to
 to each -value-, in a number of ways. Actual pixel values
 which fell outside the original range, can never have a range
 of colours, as they are all set at the end value. To change
 that, redisplay the image. Likewise for fine gradations.
  
  
 How to change the colour LUT of the image display:-
  
 Mouse buttons from left:-    (1)         (2)       (3)
 --------------------------------------------------------
   Rotate LUT          Operate when held down      Return
                       Move cursor left/right
   Scale  LUT          Operate when held down      Return
                       Move cursor left/right
                           and up/down
  
  
 How to use the `Paint' Function:-
  
   1) Place cursor on displayed LUT bar
   2) Press left or centre mouse button
   3) Release
   4) Place cursor on displayed LUT bar
   5) Press left or centre mouse button
   6) Move cursor along LUT bar
   7) Release mouse button
   8) Repeat or press right mouse button to exit
  
4 Fit_magns
  
  This choice of options is the same as for `positions'. Having
  two names for this group is just for clarity, as the options
  tend to fall into two sub-groups.
  
  In addition to the `simple set', see the help above, the
  following options are available:-
  
 Option        Function
 ------        --------
 boxshow       Toggle showing and not the box round mag positions
 cross         Change colour/size of plot/get cross
 cur_magn      Use cursor to get Gauss positions + magnitudes
 cur_posn      Use cursor to get positions
 fit_params    Set:- radii; fix/vary radii in fit; box size
 flush_magn    Forget all star Gauss positions + magnitudes
 flush_posn    Forget all positions
 list_magn     Type out Gauss positions and magnitudes
 list_posn     Type out positions and pixel values
 plot_file     Get positions from a file and plot them
 review        Type out the present setups
 store_magn    Put acquired Gauss magnitudes into a file
 store_posn    Put acquired positions into a file
  
  
  Mouse button operations when getting positions:-
  
      Left Button   = Get position
      Centre Button = Go to zoom work
      Right Button  = Return
  
4 Inspect
  
  In addition to the `simple set', see the help above, the
  following options are available:-
  
 Option        Function
 ------        --------
 area_c        Choose (by cursor) new area for inspection
 area_k        Choose (by keyboard) new area for inspection
 blink         Blink present display
 contour       Contour image area to device (maybe hard)
 controls      Type out present control parameters
 descriptor    Type out a selected image descriptor
 details       Type out the details of the image
 gclose        Close graphical device
 gdisplay      Display image area to device (maybe hard)
 histogram     Display area histogram
 pvalues       Type out the look area values as a picture
 radius        Get radius, height of star
 slice         Plot a slice across the image
 solid_tw      Display solid body plot - transparent
 solid_w       Display solid body plot - hidden lines
 stats         Calculate areas mean  std dev max min
 steps         Change sampling steps in areas
 typeform      Change format of typing out of values in area
 values        Type out the values in the area
  
  Mouse buttons for Blink work: Left Button   = slow blink by x2
                                Centre Button = speed blink by x2,
                                Right Button  = switch to hand blink
  
      The hand blink is done using the keyboard.
  
4 Positions
  
  This choice of options is the same as for `fit_magns'. Having
  two names for this group is just for clarity, as the options
  tend to fall into two sub-groups.
  
  In addition to the `simple set', see the help above, the
  following options are available:-
  
 Option        Function
 ------        --------
 boxshow       Toggle showing and not the box round mag positions
 cross         Change colour/size of plot/get cross
 cur_magn      Use cursor to get Gauss positions + magnitudes
 cur_posn      Use cursor to get positions
 fit_params    Set:- radii; fix/vary radii in fit; box size
 flush_magn    Forget all star Gauss positions + magnitudes
 flush_posn    Forget all positions
 list_magn     Type out Gauss positions and magnitudes
 list_posn     Type out positions and pixel values
 plot_file     Get positions from a file and plot them
 review        Type out the present setups
 store_magn    Put acquired Gauss magnitudes into a file
 store_posn    Put acquired positions into a file
  
  
  Buttons for measuring the Gaussian radii of stars:-
  
      Left Button   = Variable radius
      Centre Button = Fixed radius
      Right Button  = return
  
4 Scrutiny
  
  In addition to the `simple set', see the help above, the
  following options are available:-
  
 Option        Function
 ------        --------
 blink         Blink the displayed image
 box           Put a box in the image outside the star -Remove- area
 comps_all     Mark posn of a star and its companions in the fit
 comps_dist    Mark posns for next list star with distant comp
 list_in       Load a new star list (discard the old one)
 list_out      Write to file the -Add- used (extra,removed) list
 lselect       Select a portion of the list to look at
 mark_new      Mark up on the display the -new- star list posns
 mark_old      Mark up on the display the -old- star list posns
 nearest       Give nearest list star to cursor position
 printlist     Put a neat summary of the fits into an ascii file
 profile_in    Load a new star profile (discard the old one)
 remove        Clean an area round a list star with stars removed
 replace       Replace the -Remove- box by the original image data
 reremove      Display the -Remove- box again
 stars_add     Use cursor to add stars to star list
 stars_rem     Use cursor to remove stars from star list
 type_one      Type out all of a star fit (from number/name)
 typelist      Put a neat summary of the fits onto the terminal
  
  
  Mouse buttons for `Stars_Add/Rem' options :-
  
          Left   Button  =  Add/remove star from list
          Centre Button  =      "       "    "    "
          Right  Button  =  Return to Option Choice
  
  Mouse buttons for Blink work:-
  
          Left   Button  = slow blink by x2
          Centre Button  = speed blink by x2,
          Right  Button  = switch to hand blink
  
      The hand blink is done using the keyboard.
  
  
3 Panel_choice
  
 In the menu-driven mode of this program, there is the capability
 to interact with this menu in a `windows' type mode. If you choose
 the `Panel' option in the `Option' choice, then if you have an
 X-window device a small panel appears on the screen. This has what look
 like buttons with all the available options. You select these by
 putting a cursor on the `button' and then pressing a mouse button.
  
 The panel has a `help' button which lists out one line
 descriptions of all the options. This button also tells you what
 the program is doing:- 'working', 'waiting', etc.
  
  
3 Mouse_Buttons
  
 The mouse buttons have many uses, and which button does what is
 described in the six-line help displayed, when in the `panel'
 mode.
  
 The cursor must be in image window area for the cursor buttons
 to work when in -WORKING- mode. The window also must be -active-
 - that is the bar at the top must be set. Click on this bar if
 it is not, before using the buttons.
  
 If the cursor is outside a displayed area, often pressing the button
 will result in no actions.
  
 For many of the groups of functions, then when a cursor is being
 used, the X,Y position and image pixel value are continuously
 displayed on the `panel', if the panel mode is being used.
  
 For a more detailed exposition on mouse cursor/button use when
 in the various groups of options, see the sub-sections under
 `options' in the top level help.
  
  
 Two examples of very common uses:-
  
   Mouse buttons for Zoom/Pan work:-
  
      Left Button twice              = zoom /2
      Centre Button twice            = zoom x2
      Left Button then Centre Button = pan
      Right button once              = exit
  
      Zoom means zoom around present position of cursor
      Pan means set present position of cursor to screen centre
  
   Mouse buttons for Cvalues work:-
  
      The values are output continuously again on the panel, or by
       request on the terminal if the panel is not being used.
  
      -Panel- mode?    Button actions
      ------------     --------------
         YES           all buttons exit
          NO           Buttons Left,Centre give values
                       Right Button 3 exits
  
3 Colour
  
  The standard image display uses a grey-scale display. However, by
  use of the `colour' group of functions, colour displays can
  be made. There are eight standard LUT tables available, and others
  can be read in from files.
  
  Colour includes grey scale.
  
  Also the user can adjust the LUT table currently being applied. This
  can be done directly:- `flip' the LUT;Change display of values above
  and below ends of LUT. It can also be done interactively using a
  cursor:- with the use of the display of a colour bar, pick a colour
  with the cursor and `paint' this colour over a range of the LUT; Use
  horizontal movement of the cursor (with a mouse button pressed) to rotate
  the LUT; Use horizontal and vertical movement of the cursor (with a
  mouse button pressed) to shift and scale the LUT.
  
3 Grey_scale
  
  See under the `colour' help.
  
3 Cursor
  
 The cursor is used to pick up positions, change the zoom, and other
 miscellaneous purposes.
  
 The mouse moves the cursor.
  
  
3 Hard_copy
  
  Hard copy of an image can be made using the `gdisplay' option in
  the `inspect' group of options.
  
3 Display
  
  IMAGE DISPLAY
  
  The program puts out the images for the display on X-window
  devices.
  
  There is also the option to use PGPLOT to do one single image
  output to a device with a GKS driver. This is to output a
  grey-scale picture of an area of the image. This has the use
  that hard copies can be made, and unusal devices utilised to
  look at the image.
  
  GRAPHICAL DISPLAY
  
  In the program, there are many different types of graphical
  plotting. These are usually PGPLOT driven via GKS to any
  device that has a GKS driver.
  
  
3 Input_files
  
  The input files used by this program are:-
  
   Group      Parameter     Contents
   -----      ---------     --------
   General     `IN'         The input image
   Colour      `INLUT'      Table of Starman:Interact Look-Up Table -
                             either in `short' or `full' format.
   Interact    `INTAB'      Table of X,Y positions for plotting
   Scrutiny    `INSTARS'    Table of the Output of Starman:Measure
   Scrutiny    `PROFILE'    Image with profile parameters and profile
                             map in the normal Starman `Profile' image
  
   Images are in the normal Starman 'short' 16-bit integer or 'real'
   32-bit real NDF format.
  
   Tables are in the normal Starman `real' 32-bit real NDF format.
  
   For more information on:-
  
      `INLUT'     - see the output:colour for Starman:Interact
      `INSTARS'   - see the output for Starman:Measure
      `PROFILE'   - see the output for Starman:Profile
  
3 Output_files
  
  There may be output from this program. If there is, it is in the
  form of one or more tables.
  
  Function  Parameter    Table Contents
  -----     ---------    ---------------
  Aperture  `OUTMAGS'    Results of aperture photometry
  Colour    `OUTLUT'     New colour Look-up Table
  Fit_magns `OUTTAB'     Magnitude measures
  Positions `OUTTAB'     X,Y Pixel value tables from cursor
  Scrutiny  `OUTFILE'    Text file with a formatted selection of input
                           Starman:Measure table
  Scrutiny  `OUTSTARS'   Starman:Measure results table with `extra'
                           stars
  
 (Tables are in the normal Starman `real' 32-bit real NDF format.)
  
  And one image:-
  
  Function   Parameter    Image Contents
  --------   ---------    --------------
  Alter      `OUTIM'      New image - an altered version of the input
  
  
4 Alter_output
  
 The `Alter' output, `OUTIM', is an image which is an altered version
 of the input image. The alteration depends on which of the `alter'
 options have been performed on the input image.
  
 By default, it is a `real' real 32-bit Starman NDF image, but
 optionally, it can also be a `short' 16-bit integer image. In this
 latter case, the values can be scaled by the BSCALE, BZERO values
 if the values are outside the range -32767 to +32767.
  
4 Aperture_output
  
  The `Aperture' output, `OUTMAGS', is a table of the aperture photometry
  results.
  
  It is has contents:-  (it may only have the name,X,Y,Magnitude
  columns)
  
   Table column
      Header            Contents
   ------------         --------
   Name               	Star name
   X 			Star X position
   Y			Star Y position
   Magnitude		Star magnitude (see below)
   Error		Estimate of std dev error in star magnitude
   Flux			Flux (above sky) in star aperture
   Flux error		Estimate of std dev error in star flux
   Max Value 		Maximum pixel value in star aperture area
   Area 		Area of star aperture (Straddles pixels)
   Num Bad Pixels 	Number of `bad' pixels in star aperture
   Total Flux		Total flux in star aperture
   Sky level 		Sky level used for star magnitude
   Sky flux 		Total flux in sky aperture used for sky level
   Num sky bad pixels	Number of `bad' pixels in sky aperture area
   Sky area 		Area of sky aperture (Straddles pixels)
   Sky X 		X position of sky aperture
   Sky Y  		Y position of sky aperture
   Star ap maj dia 	Star aperture major axis diameter
   Sky ap maj dia       Sky aperture major axis diameter
   Sky inner annulus    If sky area is annulus, inner major axis
     maj dia               diameter of annulus
   Sky outer annulus    If sky area is annulus, outer major axis
     maj dia               diameter of annulus
   Aperture Angle       Angle in deg, counter-clock, from X-axis of
                           major axis
   Aperture Ellipticity Ellipticity of aperture
   Annulus flag 	Sky area circle (0.0), or annulus around
                          star(1.0)?
   Centering flag 	Star position been none/max pixel/centroid/Gauss
                          method (1/2/3/4) centered
   Median flag 		Sky level taken as mean (0.0), or median (1.0)?
   Extra noise 		Extra noise level assumed per pixel
   Events/pixel values 	Square root[Flux*(this)] = effective Poisson
                          noise
   Exp time - Keyboard  Exposure time from keyboard
   Exp time - Image	Exposure time from image descriptor
   Air Mass             Air Mass of exposure
   Air Corrn            Correction to magnitude from air mass
   Zero point		Zero point applied to output mag
  
  
   Where:-
  
   Output magnitude = 30.0 + `Zero point' -
                          2.5*log  [(Star flux)/(Exposure time)]
                                 10
  
   Star flux = Flux in star aperture - (Sky level)*(Star ap area)
  
   Sky flux  = 1) (Flux in sky aperture)/(area of sky aperture)
       OR    = 2) Median pixel value in sky aperture
  
   In the annulus work, the sky area is taken as that between the
   sky annulus inner ring and the sky annulus outer ring.
   In non-annulus work, the sky aperture is a simple circle, placed
   as specified.
  
   `Bad pixels' are ignored. Thus in the sky estimates this should
   not make much trouble, but in the Star estimates it will if the
   relevant pixel has a value above the sky level.
  
   The apertures have `smooth' edges. The circle that gives the
   edge of the aperture will fall `through' the body of some of the
   pixels at the edge of the aperture. What happens then is that these
   `edge' pixels are subdivided into a 5x5 subarray, and each sub-pixel
   is looked at to see if it is in or out of the aperture. The area of
   the pixel, for the program purposes, is then (number/25.0). The
   flux in the pixel is then scaled down to the same extent.
  
   Errors:-
  
   The errors are calculated assuming that the pixel values are due
   to a source with Poisson noise (which has suffered scaling) and
   an extra `magic' source of noise (with zero effect on the mean
   pixel value).
   Thus the pixel variance = Flux*(`Poiss' value) +
                          (no of pixels)*(`Noise' value)*(`Noise' value)
  
   [Std dev = square root(variance)]
  
   The star error is then calculated assuming that noise in the star
   flux, and noise due to the error in calculating the sky level.
  
4 Colour_output
  
  The output of the Interact:Colour group, `OUTLUT', is a file
  containing a table describing the Colour Look-Up Table made in the
  group.
  
  This is a table containing the R,G,B fractional colour contributions
  in columns 1,2,3 of the table (ignoring the 1st 5 for table row
  names - which are not used). There are 150 rows in this table.
  Starting from the first row, there is the R,G,B set for the lowest
  location on the table, carrying onto the 150th row, where there is
  the highest LUT entry.
  
  There is also a scale `LUTSC', and a zero `LUTZE', in descriptors.
  These scale the LUT. A given entry point, say RV, which is
  bewteen 0.0 and 1.0, would normally go to the R,G,B set of the
  RV*150th row in the input LUT. Where it actually goes is
  the [(RV-LUTZE)/LUTSC]*150th entry. If this entry is below 1 or
  above 150, then the entry is either, set at 1 or 150, or set at
  its modulo 150 value.
  
4 Fit_magns_output
  
  The output of the Interact:fit_magns group, `OUTTAB', is a file
  containing a table of the magnitude measures.
  
  The headers are:  `X', `Y', `Magnitude', `Dx', `Dy', `Iterations',
                    `Rms', `Numinval', `Height', `Base', `Max pixel',
                    `Rx', `Ry', `Xbox', `Ybox'
  
4 Positions_output
  
  The output of the Interact:positions group, `OUTTAB', is a file
  containing a table of either the X,Y positions and pixel values of the
  locations chosen by the cursor. The headers are `X', `Y', and `VALUE'.
  
4 Scrutiny_output
  
  One output of the Interact:Scrutiny group, `OUTSTARS', is a file
  containing a table in the format of the Starman:Measure program,
  of that input Starman:measure table, but with (optionally) some stars
  removed, and (optionally) some extra stars added. These extra stars
  are picked up in the Interact:Scrutiny group of functions
  
  The other output, `OUTFILE', is a text file containing a selection
  of the input Starman:Measure table of fitted results. The user
  selects the option to `print' the table in a defined format to
  this file. The file is a normal ASCII text file
  
3 Parameters
  
  The parameters in this help are put into groups - a general one for
  parameters which are used by more than one of the program
  groups, and then a group for each of the eight program groups themselves.
  
     Group        Function
     ----         --------
     General      Disparate functions
     Main         Entry level functions
     Alter        Alter the image
     Aperture     Aperture photometry in an interactive way
     Colour       Changing the colour LUT of the image display
     Fit_magns    Magnitudes with simple profile fitting
     Inspect      Look at pixel values in different ways
     Positions    Get/plot table of XY positions
     Scrutiny     Look at the output of Starman:Measure
  
4 GENERAL:-
  
  The parameters that are used by more than one program group.
  
4 Blink_ch
  (Default - last, start `under'    Choice - `under:over:auto:exit')
  
  Where to put the window for a `blink'. The blink is achieved by
  putting the display window `under' or `over' any other window
  that is in the same place. [Thus you should have used another
  window to open up another display window with the image, and placed
  it in the same position as the display window of this program.]
  
  Choice     Function
  ------     --------
  auto       Blink by alternatively putting it on top then under
  exit       Return from this option
  over       Place window on top of any other
  under      Place window under any other
  
  In automatic blinking, then the displayed image is alternately
  `popped' and `pushed'. The time interval starts of at 1/2 second,
  and is lengthed or shortened by pressing keys on the mouse.
  
  The keys have the functions:-
  
         Left Button   = slow blink by x2
         Centre Button = speed blink by x2
         Right Button  = switch to hand blink
  
4 Easystart
  (Default - `yes'            Choice - `yes:no')
  
   Use the standard start sequence of operations?
  
   This quickly gets an image, displays it in the standard way, sets
   up the panel buttons, and gets you going.
  
   The alternative is simply to go into the normal `OPTION'
   method of the program asking you for instructions. You would want
   to use this if you wished not to display the image at first, or
   not use the panel buttons, or display the image in a non-standard
   way.
  
4 Gtype
  (Default - `xwindows'            Choice - any)
  
  A character string giving the local name for the graphics
  display type.
  
  `xwindows' will put it out on the screen of your X-window device,
  if you are using one.
  
  If `ask' is input, then the program asks a very similar question,
  in a different way. A response here of `?' will bring up a listing
  of all the possible names of graphics devices which are supported
  on your machine, and you then input the appropriate name.
  
4 In
  (Default - null)
  
 The name of the file containing the input 2-D image.
  
 A null `return' entry is not allowed at the very start of the
 program. Later on, it may be, in which case the program
 will continue. Sometimes four repeated `null' entries will be
 needed to get to this continue.
  
 This image can be either the `real' 32-bit real or the `short'
 16-bit integer' NDF format.
  
4 Imcomp
  (Default - variable, usually 1,1     -     Range - 1 to 1000)
  
  Factor in X and Y by which to compress the displayed image.
  
4 Imposn
  (Default - so as to centre image in screen
   Range -  -100000 to 100000)
  
  Place to put b.l.h. corner of displayed image onto the
  screen. Thus an answer of `1,1' would put the b.l.h. pixel
  of the displayed image at the b.l.h corner of the screen.
  
4 Linecol
   (Default - `black'            Choice - (black:white)
  
    Colour of plot lines. This is determined by whether you have a
    black or white background to your plots.
  
4 Numbutt
  (Default - see below          Range - 2 to 3)
  
  Number of `X-Window' buttons available on the mouse.
  
  Some devices have two and some have three buttons available. This
  can depend both on their actual presence, and also on the X Windows
  software that is being run.
  
  With three buttons, then the Starman programs use all three, with
  the right-hand button being used mainly as the `exit' button.
  
  With two buttons, then the third button is simulated by pressing
  both of the buttons down, with the middle one being pressed slightly
  BEFORE the left-hand one. Use of the middle button in its normal
  way has to be modified, in that one has to pause for half a second
  after using it.
  
  [This parameter is usally `hidden', with the machine manager setting
   it to the appropriate value for the local set-up. Sometimes it will
   be left to the user to set, depending on his software configuartion.]
  
4 Screen
  (Default - described below      Range - 1 to size of device)
  
  Size of window to open on image display.
  
  Not asked for if not a windows type display.
  
  This the size of the screen or window to use, input as two integers
  for the X and Y size.
  
  If the image is bigger than the screen, it will be binned down to
  fit in.
  
4 Title
  (Default - various        Choice - any character string)
  
  The title to put into the `TITLE' descriptor of the output
  file you are making at the moment. This deals with:-
  
 File
 Parameter     Contents                        Default
 ---------     --------                        -------
 OUTLUT    Output Look-up Table         `Look-up Table'
 OUTMAGS   Aperture Photometry results  `Results from Interact:Aperture'
 OUTSTARS  Table of stars in Scrutiny   `Stars from Interact:Scrutiny'
 OUTTAB    Magnitudes measured          `Magnitudes from Interact:
                                           Fit_magns'
 OUTTAB    X,Y Positions marked         `XY Positions from Interact:
                                           Positions'
  
4 Vrange
  (Default - suggested values      Range -  -1.0e10 to 1.0e10)
  
  The `contrast' of the screen display.
  
  The lower and upper limits of the pixel value range that will
  be shown as black to white on the display screen.
  
  The display of pixel values above and below these limits is
  controlled by the value of the `wrap' parameter. They are shown
  as either:-
     - Black below and white above
     - Modulo the `Vrange' display range
  
4 Wrap
  (Default - Present value, start `No'       Choice  `Yes/No')
  
  Controls what happens in the display of pixel values that
  are above the upper limit or below the lower limit of the
  pixel value display range.
  
  They are shown as either:-
    `Wrap'     Display
    ------     -------
     `no'      Black below and white above
    `yes'      Modulo the `Vrange' display range
  
4 MAIN:-
  
  The parameters that are used by the `Fit_Magns' program group.
  
4 Option
  (Default - present value, start=see below   Choices - see below)
  
 What operation, from a menu of possible choices, to do next?
  
 (Accessed in the `Main' group of options.)
  
 It is the entry option choice. You repeatedly get asked for options.
 You select one of the menu operations. A number of these - the
 `functions' are themselves list of options.
  
 When you started the program, you were asked for the input image and
 input star table. Then you started on this option choice. Generally the
 default option is a repeat of the last option. However at the start,
 a standard set of options is given as the default.
  
  This is the `simple set' of options which are available in all
  groups of options:-
  
 Option        Function
 ------        --------
 alter         Functions for image altering in various ways
 aperture      Functions for aperture photometry
 colour        Functions for changing colour display of the image
 fit_magns     Functions to get star magnitudes with Gaussians
 inspect       Functions for image inspection in various ways
 main          Entry point for program
 positions     Functions to get or plot a list of positions
 scrutiny      Functions to look at Starman MEASURE output
  
 image         Input new image
 im_get_flash  Input new image and display (flash) it
  
 area          Select area of image to display
 clear         Clear screen
 close         Close the display screen
 compress      Compress image in either X or Y for display
 cvalues       Show the cursor position and image pixel value
 display       Display image
 flash         Display image in standard way
 open          Open the display screen
 reset         Reset zoom/pan to unity and centre
 zoom          Zoom and pan image by using mouse location
  
 panel         Switch between panel and keyboard option selection
 exit          Exit from this program
  
  
  For X-window device use, the Cursor must be in image window area
  for the cursor buttons to work when in `WORKING' mode. The window
  also must be `active' - that is the bar at the top must be set.
  Click on this bar if it is not before using the buttons.
  
  Buttons for Zoom/Pan work:
                              Left Button twice              = zoom /2
                              Centre Button twice            = zoom x2
                              Left Button then Centre Button = pan
                              Right button once             = exit
  
  Zoom means zoom around present position of cursor
  Pan means set present position of cursor to screen centre
  
  Buttons for Cvalues work:-
      The values are output continuously again on the panel, or by
      request on the terminal if the panel is not being used.
            `Panel' mode?    Button actions
            -------------     --------------
               YES            All buttons exit
               NO             Buttons Left,Centre give values
                              Right Button 3 exits
  
4 ALTER:-
  
  The parameters that are used by the `Alter' program group.
  
  
4 Aloption
  (Default - present value, start='size_c'     Choices - see below)
  
  What operation, from a menu of possible choices, to do next?
  
  It is the Alter option choice, which you repeatedly come  back to, after
  performing operations. You select one of the menu  operations.
  
  Generally the default option is a repeat of the last option.
  
  Option        Function
  ------        --------
  drange        Change pixel value display range
  flipx         Flip image along x direction
  flipy         Flip image along y direction
  magnify       Magnify image in X and Y by real factors
  rotate        Rotate image
  smooth        Smooth image
  store         Store present image to disk
  transform     Transform image in X and Y
  unsharp       Unsharp mask the image
  weed          Set a range of pixel values to INVALID flag
  
  
  This is the `simple set' of options which are available in all
  groups of options:-
  
  Option        Function
  ------        --------
  alter         Functions for image altering in various ways
  aperture      Functions for aperture photometry
  colour        Functions for changing colour display of the image
  fit_magns     Functions to get star magnitudes with Gaussians
  inspect       Functions for image inspection in various ways
  main          Entry point for program
  positions     Functions to get or plot a list of positions
  scrutiny      Functions to look at Starman MEASURE output
  
  image         Input new image
  im_get_flash  Input new image and display (flash) it
  
  area          Select area of image to display
  clear         Clear screen
  close         Close the display screen
  compress      Compress image in either X or Y for display
  cvalues       Show the cursor position and image pixel value
  display       Display image
  flash         Display image in standard way
  open          Open the display screen
  reset         Reset zoom/pan to unity and centre
  zoom          Zoom and pan image by using mouse location
  
  panel         Switch between panel and keyboard option selection
  exit          Exit from this program
  
  
  For X-window device use, the Cursor must be in image window area
  for the cursor buttons to work when in -WORKING- mode. The
  window also must be -active- - that is the bar at the top
  must be set. Click on this bar if it is not before using
  the buttons.
  
  Buttons for Zoom/Pan work:-
  
     Left Button twice              = zoom /2
     Centre Button twice            = zoom x2
     Left Button then Centre Button = pan
     Right button once             = exit
  
  Zoom means zoom around present position of cursor
  Pan means set present position of cursor to screen centre
  
  Buttons for Cvalues work:-
  
  The values are output continuously again on the panel, or by
  request on the terminal if the panel is not being used.
  
             -Panel- mode?    Button actions
             ------------     --------------
                 YES           All buttons exit
                  NO           Buttons Left,Centre give values
                               Right Button 3 exits
                               Right Button 3 exits
  
4 Area
  (Default - 1,1,1,1 or last       Range - 1 to max size of image)
  
  The four integer values for the X and Y coords of the b.l.h.
  corner and t.r.h. corner of the area of the image to be used.
  
 (input as x start, y start, x end, y end)
  
  This be used to cut out that area or to set to INVALID.
  
4 Bin
  (Default - 1,1       Range - 1 to max size of image)
  
  The two integer values for the X and Y compressions.
  
4 Box
  (Default - 3,3        Range - 1 to max size of image)
  
  The two integer values for the X and Y sides of the box
  to be used for the `top-hat' box averaging or the `median'
  box averaging.
  
4 Check
  (Default - 'no'      Choice - `yes:no')
  
  When using the `top-hat' averaging, do we check for `bad'
  (INVALID) pixels, and set the output average value for the box
  that contains any such pixels as `bad'? In this case, the
  answer is 'yes'.
  
  Or do we just ignore such pixels, and make the average the
  average of all the `good' pixels?  In this case, the
  answer is 'no'.
  
  (In both cases, a box that contains only `bad' pixels will be
   set to `INVALID'.)
  
  
4 Doit
 (Default - 'no'      Choice - `yes:no')
  
  Perform, or not, a second smoothing in the unsharp masking.
  
  This is often done so that signal can be removed at both long
  and short scales. In this case, then in one of the smoothings,
  a box with a small side is used, and in the other, one with a
  large side.
  
4 Eqn
  (Default - null          Choice - as defined below)
  
  The FORTRAN-style expression that gives the elements in the
  pixels of the output image.
  
  Its style is given the `equation' section of this help.
  
4 Fraction
  (Default - 0.8        Range - 0.0 to 1.0e20)
  
 The fraction of the values of the smoothed image that are
 to be subtracted from the original image.
  
 A value of 0.8 often gives a nice removal of most of the unwanted
 signal, whilst leaving enough to keep all values positive, and
 also some indication of the original signal.
  
 It will be a matter of experimentation what value is appropriate
 to the actual image being unsharp-masked.
  
 Thus after the subtraction is done and displayed, the user is
 asked, via the `MORE' parameter, if a new value is to be tried.
  
4 Gbox
  (Default - 10 x X,Y star radii       Range - 1 to max size of image)
  
  The two integer values for the X and Y sides of the box
  to be used for the `gaussian' box averaging.
  
  Each value must be an odd number.
  
4 Gradius
 (Default - 2.0     Range - 1.0e-5 to 1.0e10)
  
  The radius of the circular Gaussian profile to be used in
  doing theGaussian smoothing.
  
                                -1.0*(d/r)**2
  The profile is taken as:-    e
  
  where   d = distance from profile centre in pixels,
          r = GRADIUS
  
4 Inim
  (Default - null)
  
 The input image corresponding to one of the `IB' to `IZ' to be used
 in the arithmetic expression.
  
 The `IB', `IC', ..., `IZ' in the equation pick up the images from
 the parameters `INB', `INC', ..., `INZ'.
  
 (`IA' is reserved to mean the presently displayed image.)
  
 The input images must be standard Starman ADAM .SDF images, with
 either `real' 32-bit real values, or `short' 16-bit integer values.
 They can have the `BSCALE' and `BZERO' values, and `magic pixel values'
 indicating `bad' pixels.
  
 The `help' for all these is kept here, for `inim'.
  
4 Invar
  (Default - 0.0           Range -1.0e37 to 1.0e37)
  
  The value to be used in the equation for the value of
  the desired variable, from the range `A', `B', ..., `Z'.
  
  The `help' for all these is kept here, for `invar'.
  
4 More
  (Default - 'yes'      Choice - `yes:no')
  
 In doing the unsharp masking, do you want to have another
 go at subtracting the smoothed image from the original image?
  
 This enables you to input a new value of the factor by which
 the smoothed image is multiplied before being subtracted.
  
 See the comments on the `FRACTION' parameter above for why
 this is useful.
  
4 Nxy
  (Default - 1,1             Range - 1 to 100000)
  
  If there are no input images, the user has the choice of the size of
  the output image.
  
  This parameter defines the `X' and 'Y' sizes of the output image.
  
4 Outim
  (Default - null)
  
  The name of the output file to contain the `Alter' output
  image.
  
  This is in the format of the Starman `short' 16-bit integer or
  `real' real 32-bit NDF image.
  
  A description is given above, in the `Alter Output' section.
  
4 Pixval
  (Default - 1,1,1.0     Range - -1.0e20 to  1.0e20)
  
  The X,Y position of the pixel and the value to assign to it.
  
  The X,Y numbers are input as real numbers, but the user can
  put them in as integers. Thus - 10,10,3.4 -  will set the
  value of pixel (10,10) to 3.4,
  
4 Range
  (Default - 0.0, 0.0     Range - -1.0e20 to  1.0e20)
  
  Range of pixel values, such that if a pixel had a value within that
  range, the pixel is set to `invalid'.
  
4 Rotate
  (Default - 0.0     Range - 1.0e-20 to 1.0e20)
  
 The angle in degrees through which to rotate the image in a
 counter-clockwise direction.
  
 After rotation, if the image is not orthogonal to the X and Y axes,
 it is placed within a larger image, so that the new `bottom' corner
 is at the bottom of the image, and the new `left-hand' corner is
 at the left of the image.
  
4 Sample
  (Default - 'highest'       Choice - 'sample:highest:average' )
  
  Method of extracting output value from binning box:-
  
  Option    Choice
  ------    ------
  Average  Take average of all pixels
  Highest  Take highest pixel
  Sample   Take value of bottom left hand pixel in box
  
4 Seed
  (Default - 1234567891    Range - 1200000001 to 1400000001)
  
  The seed number to be used in any random number generators.
  This is used in the `GAUSS()' and `RAN()' operators. These
  will provide the same pattern of numbers in the same
  seed number is input.
  
  It has to be a large positive odd number.
  
4 Smethod
  (Default - 'box' or `median'      Choice - 'gauss:box:median')
  
  Which smoothing method to use.
  
  Option    Choice
  ------    ------
  Gauss     Run a rectangular box over the whole image, taking the
            average of the pixels using a weight given by the value of a
            circular Gaussian profile centered at the box centre.
  
  Box       Run a rectangular box over the whole image, taking the
            average of the pixels within the box.
  
  Median    Run a rectangular box over the whole image, taking the
            median of the pixels within the box.
  
  
  For all three methods, the result is normalised, so that a flat
  image would result in an identical output.
  
  When the box overlaps the edges of the image, only the pixels
  inside the image are taken.
  
4 Titleim
  (Default - ' '      Choice - any)
  
  Title to add as a descriptor of the output image of the `Alter'
  group of options. The default is the title of the input image,
  or ' ', if it has no title.
  
4 Xcoeff
  (Default - 0.0,1.0,0.0     Range - -1.0e8 to 1.0e8)
  
  The coefficients used to calculate, for a pixel in the new image,
  its X position in the old image.
  
             X  =  C(1) + C(2)*X  +  C(3)*Y
              n                 o          o
  
4 Xmagnify
  (Default - 1.0       Range - 1.0 to 1.0e20)
  
 The factor by which to stretch the image in the X direction.
  
 The magnification is done by using this and the `YMAGNIFY'
 parameter to load the coefficients of the transform values.
  
 If one wishes to compress the image by integer steps, it is
 better to use the `compress' option.
  
4 Ycoeff
  (Default - 0.0,0.0,1.0     Range - -1.0e8 to 1.0e8)
  
  The coefficients used to calculate, for a pixel in the new image,
  its X position in the old image.
  
             Y  =  C(1) + C(2)*X  +  C(3)*Y
              n                 o          o
  
4 Ymagnify
 (Default - 1.0       Range - 1.0 to 1.0e20)
  
 The factor by which to stretch the image in the Y direction.
  
 The magnification is done by using this and the `YMAGNIFY'
 parameter to load the coefficients of the transform values.
  
 If one wishes to compress the image by integer steps, it is
 better to use the `compress' option.
  
  
4 APERTURE:-
  
  The parameters that are used by the `Aperture' program group.
  
4 Airname
  (Default - `null')
  
  Name of descriptor in the image which holds the airmass.
  
4 Aoption
  (Default - present value, start='size_c'     Choices - see below)
  
 What operation, from a menu of possible choices, to do next?
  
 It is the Aperture Photometry option choice, which you repeatedly come
 back to, after performing operations. You select one of the menu
 operations.
  
 Generally the default option is a repeat of the last option. However
 at the start of doing `Aperture', the default is `Size_c'.
  
  
 Option        Function
 ------        --------
 Exptim_im     Correct for exposure time from image descriptor
 airmass       Correct for Airmass from image descriptor
 centre        Toggle centre => cursor/max pixel/centroid/Gaussian
 exptim_k      Change zeropoint by using keyboard exposure time
 level         Toggle mean/median method for sky level
 list          List the measures so far
 measure       Measure star/sky flux via cursor and buttons
 method        Sky determined from annulus or from separate area
 noise         Level of extra noise/pixel in pixel counts
 poisson       Change the Poisson scaling factor for Error
 recalc        A fresh calc for the last star and last sky
 remove        Remove a measure from memory and the display
 shape         Set via keyboard: aperture ellipticity, angle
 show_ap       Show apertures when getting positions
 size_key      Set via keyboard: X, Y size of the oval apertures
 size_sky      Cursor change the size of the sky aperture(s)
 size_star     Cursor change the size of the star aperture
 store         Store results in output file
 zero_pt       Change the -base- magnitude zero point
  
  Buttons
  
      Buttons from left:-    (1)           (2)          (3)
        Aperture work:   pick star       pick sky      return
          Remove work: remove circle    remove circle  return
       Ap change work:  dec aperture    inc aperture   next aperture/
                                                       return
  
 In the `measure' option:- Measure star/sky flux via cursor and aperture
 size and star/sky choice. The star flux in the aperture is found (or
 sky level in the aperture), and typed. If star, then the star
 and last sky level (separate or annulus) is taken and the calc done
 for the magnitude;
  
               Mag = 30 + Z - 2.5Log((star-sky level)/Exp)
  
  
  This is the `simple set' of options which are available in all
  groups of options:-
  
 Option        Function
 ------        --------
 alter         Functions for image altering in various ways
 aperture      Functions for aperture photometry
 colour        Functions for changing colour display of the image
 fit_magns     Functions to get star magnitudes with Gaussians
 inspect       Functions for image inspection in various ways
 main          Entry point for program
 positions     Functions to get or plot a list of positions
 scrutiny      Functions to look at Starman MEASURE output
  
 image         Input new image
 im_get_flash  Input new image and display (flash) it
  
 area          Select area of image to display
 clear         Clear screen
 close         Close the display screen
 compress      Compress image in either X or Y for display
 cvalues       Show the cursor position and image pixel value
 display       Display image
 flash         Display image in standard way
 open          Open the display screen
 reset         Reset zoom/pan to unity and centre
 zoom          Zoom and pan image by using mouse location
  
 panel         Switch between panel and keyboard option selection
 exit          Exit from this program
  
 Zoom means zoom around present position of cursor
 Pan means set present position of cursor to screen centre
  
 Buttons for Cvalues work:-
 The values are output continuously again on the panel, or by
 request on the terminal if the panel is not being used.
  
             -Panel- mode?    Button actions
             ------------     --------------
                 YES           All buttons exit
                  NO           Buttons Left,Centre give values
                               Right Button 3 exits
                               Right Button 3 exits
4 Apang
  (Default - last (start=0.0)          Range = -90.0 to +90.0)
  
  Angle to X-axis, working counter-clockwise, that the major
  axis makes, in degrees.
  
  
4 Apdiam
  (Default - present value, start=see below      Range - 0.0 to 1.0e8)
  
  The diameter in pixels of the apertures used in the measuring.
  
  This is the diameter of the major axis, as the aperture may
  be elliptical, and inclined to the X-axis.
  
  These are :-   the star aperture diameter   (start=20.0)
                 the sky aperture diameter for non-annulus work
                                              (start=20.0)
                 the sky aperture inner diameter for annulus work
                                              (start=30.0)
                 the sky aperture outer diameter for annulus work
                                              (start=40.0)
  
  In the annulus work, the sky area is taken as that between the sky
  inner annulus ring and the sky outer annulus ring.
  In non-annulus work, the sky aperture is a simple circle or ellipse,
  placed as specified.
  
4 Apell
  (Default - last (start=0.0)               Range - 0.0 to 1.0)
  
  The ellipticity of the aperture.
  
  The ellipticity is ((a-b)/a) where a = major axis diameter and
  b = minor axis. a is the diameter you input for aperture size.
  Thus a round aperture has ellipticity = 0.0, a line has = 1.0.
  
4 Coordtype
  (Default - `radians'          Choice - `degrees:radians:string')
  
  Method by which the RA and Dec are stored in the descriptors.
  
   Method    Example
   ------    -------
   degrees    +40.234
   radians    -0.445678
   string     +12 34 45
  
4 Decname
  (Default - `null')
  
  Name of descriptor in the image which holds the object Dec.
  
4 Descrair
  (Default - `airmass'         Choice - `none:airmass:position')
  
  Method of getting airmss of observation.
  
   Choice    Method
   ------    ------
   airmass   Get it from a descriptor in the image
   none      Do not calculate airmass
   position  Use the RA and Dec of the object, with the Sid T and
             site latitude
  
4 Descrfilt
  (Default - last (start='no')        Choice - `yes:no')
  
  Use image descriptor to get filters from? If there is one
  this is nice to use. If there isnt, you cant.
  
4 Descrtime
  (Default - last (start='no')        Choice - `yes:no')
  
  Do you want to use an image descriptor to get the exposure time
  from? If there is one this is nice to use. If there isnt, you cant.
  
4 Expname
  (Default - `null')
  
  Name of descriptor in the image which holds the exposure time.
  
4 Exptim
  (Default - present value, start=1.0          Range - 1.0e-8 to 1.0e8)
  
  The exposure time of the image. This is applied to the output
  magnitude. It applies a correction of -2.5*log  (Exptim), and
                                                10
  thus the starting exposure time of 1 second applies a zero
  correction.
  
4 Extinc
  (Default - see below               Range - 0.0 to 10**8)
  
  The extinction values to use with this filter.
  
  The defaults assume that the filters are U,B,V,R,I,J,H,K,L and are
  0.68, 0.28, 0.15, 0.10, 0.07, 0.10, 0.04, 0.06, 0.06 for the nine
  possible filters.
  
4 Filtloc
  (Default -1,79               Range - 1 to 256)
  
  Start and end location in the filter name descriptor of the
  characters that have the filter name.
  
4 Filtname
  (Default - `null')
  
  Name of descriptor in the image which holds the filter name.
  
4 Fixgrad
  (Default - `No'          Choice - `Yes/No' )
  
  Use fixed radii when doing Gauss centering with fixed radii ('Yes').
  If floating radii are desired, use `No'.
  
4 Fname
   (Default - `null')
  
  Name of filter that can be looked for in the filter name descriptor.
  
  Up to nine names can be input, via the `FNAME1', `FNAME1', ....,
  `FNAME9' input.
  
  Input is stopped by inputting a `null' entry (hit `return' key).
  
4 Gradii
  (Default - present value, start=2.0,2.0 Range - 0.1 to 100.0)
  
  Gaussian radii to use when doing Gauss centering with fixed radii.
  
4 Keep
  (Default - `No'          Choice - `Yes/No' )
  
  If some aperture measures done have been `removed', then this
  gives the user a chance to resurrect all such removed ones
  when loading the output results table file.
  
4 Keytime
  (Default - last (start='no')          Choice - `yes:no')
  
  Do you want to correct the magnitudes by an `exposure time',
  entered via the keyboard?
  
4 Latitude
  (Default - `+00 00 00')
  
  Latitude of site.
  
  This is input as a character string in the format `+00 00 00'
  
4 List
  (Default - `No'          Choice - `Yes/No' )
  
  If some aperture measures done have been `removed', then this
  gives the user a chance to have them all output when doing the
  the type-out of the results table.
  
4 Method
  (Default - present value, starting `annulus'
   Choice - `annulus:separate')
  
  Method to determine the area used to get the sky level.
  
  There are two ways of selecting areas the area to be used for
  determining the sky level. These are an annulus round the star,
  and a separate circular area elsewhere in the image.
  
  The advantage of using an annulus is that this gives a good
  estimate of the mean level at the star itself. The disadvantage
  is that a significantly bright star may be present in that
  annulus. With the use of a separate area, an area free of
  significant stars can be chosen.
  
  If the `separate' mode is used, then the sky level adopted
  for each star is that determined from the last sky level
  determination. Such determinations can be made as frequently as
  desired.
  
  In the `annulus' mode, the inner and outer radii of the annulus
  can be set separately.
  
  For a fuller discussion on the problems of determining sky levels,
  see the `help' in `Options' - `Aperture Options'.
  
4 Noise
  (Default - present value, start=0.0          Range - 0.0 to 1.0e16)
  
  The amount of extra noise that is actually present in each pixel,
  above the amount the program can find.
  
  The program thinks that the only source of noise is the Poisson
  noise of the counts (scaled by the `Poiss' parameter input factor).
  This `Noise' parameter allows you to put in another source of
  noise. An example could be the `read-out' noise of a CCD.
  
  The `Noise' is the standard deviation ofsuch an extra source of
  noise.
  
4 Outmags
  (Default - null)
  
  The name of the output file to contain the `Aperture' output results
  table.
  
  This is in the format of the Starman 'real' real 32-bit NDF file.
  
  It is has contents:-  (it may only have the name,X,Y,Magnitude
  columns)
  
   Table column
      Header            Contents
   ------------         --------
   Name               	Star name
   X 			Star X position
   Y			Star Y position
   Magnitude		Star magnitude (see below)
   Error		Estimate of std dev error in star magnitude
   Flux			Flux (above sky) in star aperture
   Flux error		Estimate of std dev error in star flux
   Max Value 		Maximum pixel value in star aperture area
   Area 		Area of star aperture (Straddles pixels)
   Num Bad Pixels 	Number of `bad' pixels in star aperture
   Total Flux		Total flux in star aperture
   Sky level 		Sky level used for star magnitude
   Sky flux 		Total flux in sky aperture used for sky level
   Num sky bad pixels	Number of `bad' pixels in sky aperture area
   Sky area 		Area of sky aperture (Straddles pixels)
   Sky X 		X position of sky aperture
   Sky Y  		Y position of sky aperture
   Star ap maj dia 	Star aperture major axis diameter
   Sky ap maj dia       Sky aperture major axis diameter
   Sky inner annulus    If sky area is annulus, inner major axis
     maj dia               diameter of annulus
   Sky outer annulus    If sky area is annulus, outer major axis
     maj dia               diameter of annulus
   Aperture Angle       Angle in deg, counter-clock, from X-axis of
                           major axis
   Aperture Ellipticity Ellipticity of aperture
   Annulus flag 	Sky area circle (0.0), or annulus around
                          star(1.0)?
   Centering flag 	Star position been none/max pixel/centroid/Gauss
                          method (1/2/3/4) centered
   Median flag 		Sky level taken as mean (0.0), or median (1.0)?
   Extra noise 		Extra noise level assumed per pixel
   Events/pixel values 	Square root[Flux*(this)] = effective Poisson
                          noise
   Exp time - Keyboard  Exposure time from keyboard
   Exp time - Image	Exposure time from image descriptor
   Air Mass             Air Mass of exposure
   Air Corrn            Correction to magnitude from air mass
   Zero point		Zero point applied to output mag
  
  
   Where:-
  
   Output magnitude = 30.0 + `Zero point' -
                          2.5*log  [(Star flux)/(Exposure time)]
                                 10
  
   Star flux = Flux in star aperture - (Sky level)*(Star ap area)
  
   Sky flux  = 1) (Flux in sky aperture)/(area of sky aperture)
       OR    = 2) Median pixel value in sky aperture
  
  
   In the annulus work, the sky area is taken as that between the sky
   inner annulus ring and the sky outer annulus ring.
   In non-annulus work, the sky aperture is a simple circle, placed
   as specified.
  
   `Bad pixels' are ignored. Thus in the sky estimates this should
   not make much trouble, but in the Star estimates it will if the
   relevant pixel has a value above the sky level.
  
   The apertures have `smooth' edges. The circle that gives the
   edge of the aperture will fall `through' the body of some of the
   pixels at the edge of the aperture. What happens then is that these
   `edge' pixels are subdivided into a 5x5 subarray, andeach sub-pixel
   is looked at to see if it is in or out of the aperture. The area of
   the pixel, for the program purposes, is then (number/25.0). The
   flux in the pixel is then scaled down to the same extent.
  
   Errors:-
  
   The errors are calculated assuming that the pixel values are due
   to a source with Poisson noise (which has suffered scaling) and
   an extra `magic' source of noise (with zero effect on the mean
   pixel value).
   Thus the pixel variance = Flux*(`Poiss' value) +
                          (no of pixels)*(`Noise' value)*(`Noise' value)
  
   [Std dev = square root(variance)]
  
   The star error is then calculated assuming that noise in the star
   flux, and noise due to the error in calculating the sky level.
  
4 Outtype
  (Default - `full'          Choice - `Short/Full')
  
  Do you want the output `Aperture' results table file to contain
  all the information, or just a shortened subset? The shortened
  subset just has the X,Y positions and the measured magnitudes.
  
4 Poiss
  (Default - present value, start=1.0      Range - 1.0e-8 to 1.0e16)
  
 The scaling that would have to be applied to pixel values so that
 their values would have a Poissonian distribution.
  
 This is used to calculate the error on a flux level.
  
 The error used (squared) = Flux*(`Poiss' value) +
                         (no of pixels)*(`Noise' value)*(`Noise' value)
  
 This enables the output error estimates to be reasonably correct.
  
4 Raname
  (Default - `null')
  
  Name of descriptor in the image which holds the object RA.
  
4 Sidtname
  (Default - `null')
  
  Name of descriptor in the image which holds the Sidereal Time of the
  exposure.
  
4 Zerop
  (Default - present value, start=0.0         Range - -1.0e8 to 1.0e8)
  
  The zero point to be added to the output star magnitudes.
  
4 COLOUR:-
  
  The parameters that are used by the `Colour' program group.
  
4 Coption
  (Default - present value,start='load'     Choices - see below)
  
  What operation, from a menu of possible choices, to do next?
  
  The menu selection of options for changing the colour Look-up Table
  of the image display.
  
  You repeatedly come back to this parameter after performing `Colour'
  operations. You select one of the menu operations. You return to the
  main `Interact' group by entering the `return' option.
  
  
  Option        Function
  ------        --------
  bar_clear     Remove display of LUT table bar
  bar_show      Display LUT bar
  ends_bw       Values below/above LUT ends as black/white
  ends_cc       Values below/above LUT ends as col/col
  ends_wb       Values below/above LUT ends as white/black
  ends_wrap     Values below/above LUT ends as wrapped
  file_get      Read a full Look-Up Table from a file
  file_put      Write the present Look-Up Table to file
  file_sget     Read a short Look-Up Table from a file
  flip          Flip LUT
  load          Load LUT from store
  paint         Pick a colour from LUT bar and overwrite range of LUT
  rotate        Rotate LUT by moving cursor
  scale         Shift and scale LUT by moving cursor
  wrap          Toggle how image values above/below limits shown
  
  ****  This colour system uses a Look-Up Table (LUT)  ****
  
 The actual pixel values in the image are already displayed
 by scaling and shifting so that a range of those values lies
 between 0 and 255. To each of these 256 -values-, a colour
 is now ascribed, by means of a Look-Up Table (LUT).
 These options allow you to change the colours ascribed to
 to each -value-, in a number of ways. Actual pixel values
 which fell outside the original range, can never have a range
 of colours, as they are all set at the end value. To change
 that, redisplay the image. Likewise for fine gradations.
  
 How to change the colour LUT of the image display:-
  
 Mouse buttons from left:-    (1)         (2)      (3)
 -------------------------------------------------------
   Rotate LUT          Operate when held down     Return
                       Move cursor left/right
   Scale  LUT          Operate when held down     Return
                       Move cursor left/right
                           and up/down
  
  
 How to use the `Paint' Function:-
  
  
   1) Place cursor on displayed LUT bar
   2) Press left or centre mouse button
   3) Release
   4) Place cursor on displayed LUT bar
   5) Press left or centre mouse button
   6) Move cursor along LUT bar
   7) Release mouse button
   8) Repeat or press right mouse button to exit
  
  
  This is the `simple set' of options which are available in all
  groups of options:-
  
 Option        Function
 ------        --------
 alter         Functions for image altering in various ways
 aperture      Functions for aperture photometry
 colour        Functions for changing colour display of the image
 fit_magns     Functions to get star magnitudes with Gaussians
 inspect       Functions for image inspection in various ways
 main          Entry point for program
 positions     Functions to get or plot a list of positions
 scrutiny      Functions to look at Starman MEASURE output
  
 image         Input new image
 im_get_flash  Input new image and display (flash) it
  
 area          Select area of image to display
 clear         Clear screen
 close         Close the display screen
 compress      Compress image in either X or Y for display
 cvalues       Show the cursor position and image pixel value
 display       Display image
 flash         Display image in standard way
 open          Open the display screen
 reset         Reset zoom/pan to unity and centre
 zoom          Zoom and pan image by using mouse location
  
 panel         Switch between panel and keyboard option selection
 exit          Exit from this program
  
  
 For X-window device use, the Cursor must be in image window area
 for the cursor buttons to work when in -WORKING- mode. The
 window also must be -active- - that is the bar at the top
 must be set. Click on this bar if it is not before using
 the buttons.
  
  Buttons for Zoom/Pan work:-
     Left Button twice              = zoom /2
     Centre Button twice            = zoom x2
     Left Button then Centre Button = pan
     Right button once             = exit
  
 Zoom means zoom around present position of cursor
 Pan means set present position of cursor to screen centre
  
 Buttons for Cvalues work:-
 The values are output continuously again on the panel, or by
  
 request on the terminal if the panel is not being used.
  
             -Panel- mode?    Button actions
             ------------     --------------
                 YES           All buttons exit
                  NO           Buttons Left,Centre give values
                               Right Button 3 exits
  
4 Inlut
  (Default = null)
  
  The name of a file containing a LUT Table in the `full' format of the
  Interact:Colour output `OUTLUT', or as a `short' LUT in a brief
  form. In the later case the file is read into the internal program
  storage, but not loaded to the display LUT. It may, of course, be
  later read from the storage to be applied to the display LUT.
  
  The formats are more fully described in the top-level help `colour'
  section.
  
  This enables you to input a new LUT.
  
4 Lutnum
  (Default - 1         Range - 1-15)
  
  Choose the number of the stored LUT table you want to apply to the
  display.
  
  The program has eight standard LUT tables, numbered as 1-8. You
  can input others, or store modified ones, and store them in numbers
  9-15. These are then available for use. However these are not
  kept when you exit from the program.
  
  The eight standard LUT tables are:-
  
   1)  Grey scale
   2)  Purple with light at top
   3)  Rainbow
   4)  Black/blue/green/yellow/purple/white
   5)  Black/blue/greeny-yellow/dark red
   6)  Black/blue/greeny-yellow/light red/white
   7)  Discrete steps (black/blue/green/light blue/red/purple/yellow/
                       white)
   8)  Inverted grey scale
  
4 Num_lut
  (Default - 1st number not yet used              Range - 9 to 15)
  
  When reading in a file containing a `short' Look-up Table, this
  is the storage number inside the program where it is kept.
  
  You can put it in any of the 9 - 15 slots, but you may overwrite a
  previously stored short LURT.
  
4 Outlut
  (Default = null)
  
  The name of the new file, into which you wish to load the LUT
  presently in use. This is stored as a `full' LUT, in a standard
  format:-
  
  This is a table containing the R,G,B fractional colour contributions
  in columns 1,2,3 of the table (ignoring the 1st 5 for table row
  names - which are not used). There are 150 rows in this table.
  Starting from the first row, there is the R,G,B set for the lowest
  location on the table, carrying onto the 150th row, where there is
  the highest LUT entry.
  
  There is also a scale `LUTSC', and a zero `LUTZE', in descriptors.
  These scale the LUT. A given entry point, say RV, which is
  bewteen 0.0 and 1.0, would normally go to the R,G,B set of the
  RV*150th row in the input LUT. Where it actually goes is
  the [(RV-LUTZE)/LUTSC]*150th entry. If this entry is below 1 or
  above 150, then the entry is either, set at 1 or 150, or set at
  its modulo 150 value.
  
4 FIT_MAGNS:-
  
  The parameters that are used by the `Fit_Magns' program group.
  
  (They are also used by the `Positions' group, which access the same
   options.)
  
4 Boxshow
   (Default - last (start='yes')      Choice - `yes:no')
  
  After a star has been fitted, paint a rectangle round the
  fitted area?
  
4 Boxsize
   (Default - last (start=10,10)      Range - 3 to 200)
  
  Size of box around star input position that defines area to
  be fitted for star posn and magnitude.
  It should be some 3 to 5 times the star profile FWHM.
  
4 Crcol
  (Default - last (start='red' or `green' or `blue')
   Choice - `red:green:blue:cyan:magenta:yellow:coral:palegreen)
  
  When painting star positions with a cross on the image,
  this is the color of the cross.
  
  There are three `types' of cross. Those for marking a cursor
  input for star positions (default-'green'), those for marking a
  cursor input for star magnitudes (default-'red'), and those for
  marking star positions obtained from an input table (default-'red'),
  Each type can have its own colour.
  
4 Crossl
   (Default - last (start=5.0)     Range - 1 to 10**8)
  
  When painting star positions with a cross on the image,
  this is the length of cross in pixels to paint. Length is
  distance between ends of an arm (i.e. twice the distance from
  the centre to an end).
  
4 Goption
  (Default - present value, start=''   Choices - see below)
  
  What operation, from a menu of possible choices, to do next?
  
  (Accessed in the `Fit_magns' and `Positions' groups of options.)
  
  The menu selection of options for getting magns and positions from the
  display. You repeatedly come back to this parameter after
  performing `Getting Position' operations. You select one of the
  menu operations.
  
  
 Option        Function
 ------        --------
 boxshow       Toggle showing and not the box round mag positions
 cross         Change colour/size of plot/get cross
 cur_magn      Use cursor to get Gauss positions + magnitudes
 cur_posn      Use cursor to get positions
 fit_params    Set:- radii; fix/vary radii in fit; box size
 flush_magn    Forget all star Gauss positions + magnitudes
 flush_posn    Forget all positions
 list_magn     Type out Gauss positions and magnitudes
 list_posn     Type out positions and pixel values
 plot_file     Get positions from a file and plot them
 review        Type out the present setups
 store_magn    Put acquired Gauss magnitudes into a file
 store_posn    Put acquired positions into a file
  
  This is the `simple set' of options which are available in all
  groups of options:-
  
 Option        Function
 ------        --------
 alter         Functions for image altering in various ways
 aperture      Functions for aperture photometry
 colour        Functions for changing colour display of the image
 fit_magns     Functions to get star magnitudes with Gaussians
 inspect       Functions for image inspection in various ways
 main          Entry point for program
 positions     Functions to get or plot a list of positions
 scrutiny      Functions to look at Starman MEASURE output
  
 image         Input new image
 im_get_flash  Input new image and display (flash) it
  
 area          Select area of image to display
 clear         Clear screen
 close         Close the display screen
 compress      Compress image in either X or Y for display
 cvalues       Show the cursor position and image pixel value
 display       Display image
 flash         Display image in standard way
 open          Open the display screen
 reset         Reset zoom/pan to unity and centre
 zoom          Zoom and pan image by using mouse location
  
 panel         Switch between panel and keyboard option selection
 exit          Exit from this program
  
  
  Buttons for measuring the Gaussian radii of stars:-
  
      Left Button   = Variable radius
      Centre Button = Fixed radius
      Right Button  = return
  
 For X-window device use, the Cursor must be in image window area
 for the cursor buttons to work when in -WORKING- mode. The
 window also must be -active- - that is the bar at the top
 must be set. Click on this bar if it is not before using
 the buttons.
  
  Buttons for Zoom/Pan work:-
  
     Left Button twice              = zoom /2
     Centre Button twice            = zoom x2
     Left Button then Centre Button = pan
     Right button once             = exit
  
 Zoom means zoom around present position of cursor
 Pan means set present position of cursor to screen centre
  
 Buttons for Cvalues work:-
 The values are output continuously again on the panel, or by
 request on the terminal if the panel is not being used.
  
             -Panel- mode?    Button actions
             ------------     --------------
                 YES          All buttons exit
                  NO          Buttons Left,Centre give values
                               Right Button exits
  
4 Intab
  (Default - null)
  
  Name of the existing file with the input table of X,Y positions to
  plot on the display.
  
4 Radfix
   (Default - last, first `no'        Choice - `yes:no')
  
   Fix the star X and Y radii, or not?
  
   In the Gaussian fitting, keep the star radii fixed?
  
4 Radsize
   (Default - last (start=2.0,2.0)      Range  - 0.2 to 100.0)
  
   What X and Y radii to give to the star Gaussian profile?
  
   These are the radii out at which the profile is 1/e of the
   peak value. The profile is elliptical, but orthogonal to the
   X and Y axes. If the radii are kept fixed (set through the RADFIX
   parameter), then these are the radii used. If they are not
   fixed, then these are the start values for the fitting, and they
   get refined through the fitting to produce the best fit. In this
   case, it is hepful to the fitting if these start values are close
   to the actual values.
  
4 Xrange
  (Default - 1, X size if image     Range - 1 to X size of image)
  
  X limits of area of input image to use.
  
4 Yrange
  (Default - 1, Y size if image     Range - 1 to Y size of image)
  
  Y limits of area of input image to use.
  
4 Outtab
  (Default - null)
  
  Name of the new file to load with the output table of X,Y positions
  or measured magnitudes that have been obtained from the display.
  
  Fit_magns group of options:-
  
  The output of the Interact:fit_magns group, `OUTTAB', is a file
  containing a table of the magnitude measures.
  
  The headers are:  `X', `Y', `Magnitude', `Dx', `Dy', `Iterations',
                    `Rms', `Numinval', `Height', `Base', `Max pixel',
                    `Rx', `Ry', `Xbox', `Ybox'
  
  
  Positions group of options:-
  
  The output of the Interact:positions group, `OUTTAB', is a file
  containing a table of either the X,Y positions and pixel values of the
  locations chosen by the cursor. The headers are `X', `Y', and `VALUE'.
  
4 INSPECT:-
  
  The parameters that are used by the `Inspect' program group.
  
4 Base
  (Default - present value, start=0.0       Range - -1.0e20 to 1.0e20)
  
  The base level that is applied to the values in the typing out of
  pixel values.
  
  A pixel value of(say) RV, is typed out as  (RV-BASE)/SCALE.
  
  SCALE is the typing out scale, input by the user via the
  `SCALE' parameter, and whose default is 1.0
  
4 Contour
  (Default - see below         Range - -1.0e20 to 1.0e20)
  
  The lower and upper limits of values that are plotted out
  in the contour map, and the step between the contour levels.
  
  Thus an input of `10.0,100.0,20.0' would put out contour
  levels of (10.0,30.0,50.0,70.0,90.0).
  
  The default is `(minimum of data),(maximum of data),(1/10th of range)'
  
4 Decpl
  (Default - present value, start=0       Range - 0 to 10000)
  
  No of decimal places to show in the typing out of pixel values.
  
  If = 0, then the decimal point is suppressed.
  
4 Desname
  (Default = null)
  
  The name of the descriptor that you want to get the value of.
  
4 Extname
  (Default - `starnam')
  
  Descriptors are held in separate groups (extensions) in
  the image.
  
  The name of the extension in the image that the descriptors that you
  want to get the value of are stored in. This is usually the `STARMAN'
  extension, but others include `FITS', `FIGARO'.
  
  `starman' is the one that holds all the ones accepted by the
  Starman programs. `fits' is an extension that often contains
  relevant descriptors.
  
4 Hrange
  (Default - see below         Range - -1.0e20 to 1.0e20)
  
  The lower and upper limits of values whose number of pixels
  having those values are plotted out in a histogram. Also the
  width of the bins in the histogram.
  
  Thus an input of `10.0,70.0,20.0' would put out a histogram
  with bins of [(10.0-30.00,(30.0-50.0),(50.0-70.0)].
  
  The default is `(minimum of data),(maximum of data),(1/10th of range)'
  
4 Igbox
  (Default - 20,20             Range - 5 to 100)
  
  X and Y size of box round the cursor position to be used
  in measuring the Gaussian radius of a star.
  
4 Igradii
  (Default - 3.0,3.0          Range - 0.2 to 60.0)
  
  When using fixed Gaussian radii in measuring the Gaussian
  radius of a star, these are the values to fit.
  
4 Ioption
  (Default - present value,start='area_c'     Choices - see below)
  
  What operation, from a menu of possible choices, to do next?
  
  The menu selection of options for inspecting the pixel values of
  the image in various ways.
  
  You repeatedly come back to this parameter after performing `Inspect'
  operations. You select one of the menu operations. You return to the
  main `Interact' group by entering the `return' option.
  
  Option        Function
  ------        --------
  area_c        Choose (by cursor) new area for inspection
  area_k        Choose (by keyboard) new area for inspection
  blink         Blink present display
  contour       Contour image area to device (maybe hard)
  controls      Type out present control parameters
  descriptor    Type out a selected image descriptor
  details       Type out the details of the image
  gclose        Close graphical device
  gdisplay      Display image area to device (maybe hard)
  histogram     Display area histogram
  pvalues       Type out the look area values as a picture
  radius        Get radius, height of star
  slice         Plot a slice across the image
  solid_tw      Display solid body plot - transparent
  solid_w       Display solid body plot - hidden lines
  stats         Calculate areas mean  std dev max min
  steps         Change sampling steps in areas
  typeform      Change format of typing out of values in area
  values        Type out the values in the area
  
  Mouse buttons for Blink work: Left Button   = slow blink by x2
                                Centre Button = speed blink by x2,
                                Right Button  = switch to hand blink
  
      The hand blink is done using the keyboard.
  
 For X-window device use, the Cursor must be in image window area
 for the cursor buttons to work when in -WORKING- mode. The
 window also must be -active- - that is the bar at the top
 must be set. Click on this bar if it is not before using
 the buttons.
  
  This is the `simple set' of options which are available in all
  groups of options:-
  
 Option        Function
 ------        --------
 alter         Functions for image altering in various ways
 aperture      Functions for aperture photometry
 colour        Functions for changing colour display of the image
 fit_magns     Functions to get star magnitudes with Gaussians
 inspect       Functions for image inspection in various ways
 main          Entry point for program
 positions     Functions to get or plot a list of positions
 scrutiny      Functions to look at Starman MEASURE output
  
 image         Input new image
 im_get_flash  Input new image and display (flash) it
  
 area          Select area of image to display
 clear         Clear screen
 close         Close the display screen
 compress      Compress image in either X or Y for display
 cvalues       Show the cursor position and image pixel value
 display       Display image
 flash         Display image in standard way
 open          Open the display screen
 reset         Reset zoom/pan to unity and centre
 zoom          Zoom and pan image by using mouse location
  
 panel         Switch between panel and keyboard option selection
 exit          Exit from this program
  
  
  Buttons for Zoom/Pan work:-
     Left Button twice              = zoom /2
     Centre Button twice            = zoom x2
     Left Button then Centre Button = pan
     Right button once             = exit
  
 Zoom means zoom around present position of cursor
 Pan means set present position of cursor to screen centre
  
 Buttons for Cvalues work:-
 The values are output continuously again on the panel, or by
 request on the terminal if the panel is not being used.
             -Panel- mode?    Button actions
             ------------     --------------
                  YES         All buttons exit
                  NO          Buttons Left,Centre give values
                              Right Button 3 exits
  
4 Orient
  (Default - present value, start=1.0       Range - 0.0 to 360.0)
  
  Azimuth in degrees from which to view displyed `solid' plot of image
  area.
  
  The value input is internally used as though it was in steps of
  30 degrees. Thus 330, 0, and 30 show three different views of the
  `solid' looking at the XZ plane from the direction of -Y, but
  from the left, straight on, and from the right respectively.
  
  It is not a true viewpoint, but is pretty good.
  
4 Scale
  (Default - present value, start=1.0       Range - -1.0e20 to 1.0e20)
  
  The scale that is applied to the values in the typing out of
  pixel values.
  
  A pixel value of(say) RV, is typed out as  (RV-BASE)/SCALE.
  
  BASE is the typing out base, input by the user via the
  `BASE' parameter, and whose default is 0.0.
  
4 Steps
  (Default - present value, start=1,1       Range - 1 to [max(nx,ny)-1])
  
  The X and Y step between pixels that are selected to have their pixel
  values output in the typing out of values.
  
  The upper limit of the steps is the largest side of the image - 1.
  
4 Vprange
  (Default - 10% below/above data range     Range - -1.0e20 to 1.0e20)
  
  The minimum and maximum pixel values that are plotted. (PGPLOT is
  used in this option.)
  
  This can be asked for for:-
        3-D plot (solid or transparent)
        Slice of pixel values along a pre-defined line
        A grey-scale plot of the image.
  
  The default is large enough to cover the actual range.
  
  This can be a hard copy device
  
4 Width
  (Default - present value, start=8       Range - 1 to 10000)
  
  Width of the character string shown for a value in the typing out of
  pixel values. This include any `-' sign and any decimal point. If
  this width is wider than the number of charactes actually in the
  number, then blanks are shown before.
  
4 Window
  (Default - present values, start=-1.0e20,1.0e20
   Range - -1.0e20 to 1.0e20)
  
  The `window' that controls the values in the typing out of values.
  Numbers that are above this value are typed out as `****' and
  those below as `   `.
  
4 Xarea
  (Default - last (start=1,X size,1)   Range - 1 to X size of image)
  
  Three numbers that define the area inspected by the other
  options of the `INSPECT' function.
  
  The numbers are the X start of the area; the X end of the area;
  the step between pixels that sampling is to be done at.
  
4 Xypplot
  (Default - 0.8,0.8 scaled       Range - 0.101 to 0.9)
  
  X, Y fraction of graphical display physical window that will be
  used in writing graph or image. The default sizes will result
  in a correct shape being written out. (PGPLOT is used in this
  output.)
  
  The actual area covered will be:- (0.1 to X, 0.1 to Y) where
  0.0-1.0 is the entire range in each direction.
  
  This can be a hard copy device.
  
4 Yarea
  (Default - last (start=1,Y size,1)   Range - 1 to Y size of image)
  
  Three numbers that define the area inspected by the other
  options of the `INSPECT' function.
  
  The number s are the Y start of the area; the Y end of the area;
  the step between pixels that sampling is to be done at.
  
4 POSITIONS:-
  
  The parameters that are used by the `Positions' program group.
  
  These are the same as the `Fit_magns' program group parameters,
  so are not repeated here.
  
4 SCRUTINY:-
  
  The parameters that are used by the `Scrutiny' program group.
  
4 Bylist
  (Default - present value, start='Yes'      Choice - `Yes/No')
  
  In selecting stars from the input table to deal with, do you want
  to select choosing only those stars that lie in a defined section
  of the table? If not, then the selection will be only those stars
  that lie in a defined rectangle in the image.
  
4 Col_bad
  (Default - `Green'       Choices - see below)
  
  Colour of spots or crosses to use when painting up stars which have
  `bad' fits, that is fits that have failed in the Starman:Measure.
  
  Choice is:- red:green:blue:cyan:magenta:yellow:coral:medspringgreen
  
4 Col_ok
  (Default - `Red'       Choices - see below)
  
  Colour of spots or crosses to use when painting up stars which have
  `ok' fits, that is fits that have been done ok in the Starman:Measure.
  
  Choice is:- red:green:blue:cyan:magenta:yellow:coral:medspringgreen
  
4 Col_star
  (Default - `Red'       Choices - see below)
  
  Colour of spots or crosses to use when painting up stars which have
  been added or removed from the star list.
  
  Choice is:- red:green:blue:cyan:magenta:yellow:coral:medspringgreen
  
4 Contrast
  (Default - present value, start='No'      Choice - `Yes/No')
  
  When displaying the removal of a fitted star from the image, is
  the effect to be shown at a `high' contrast, that is the contrast
  suitable for the small area that is removed? If not, then it is
  displayed at the contrast used in the display of the whole image.
  
  For the `Yes' option, one can often see good detail about the
  fit itself, whilst for the `No' option one sees best the quality
  of the fit in relation to the whole image.
  
4 Doform
  (Default - present value (start='no')      Choice - `yes:no')
  
  In typing out, to terminal or file, of the Starman:Measure table,
  format the numbers in the way you want? If not, then the standard
  format is used.
  
  If you choose to format, you control which columns of the table
  are output and the width of the field for each column, and the
  number of decimal places of the number in the field.
  
  The standard format is, depending on whether the X,Y positions are
  output, :-
  
   Star   Mag   Height   Dx    Dy  Rms  Its Inval Comps Imp  Diff-2
  
  or
  
   Star   X      Y      Mag Height   Dx    Dy    Rms  Its Inval Imp
  
  
4 Dopref
  (Default - present value, start `Yes'    Choice - `Yes/No')
  
  When writing the output table of Interact:Scrutiny, this controls
  how the names of the `new' stars are to be made.
  
  If there have been no new stars input by the user then this
  parameter is not asked for.
  
  If `Yes', then the input stars are output with their same names.
            The new stars are output with names #'X'1, #'X'2, , ... ,
            where `X' is a character string, input via the parameter
            `Prefix'. `X' has a default of `A', and it is recommended
            that only a short character string be used, since the
            total name length is only 20.
  
  If `No', then all the output stars are renamed as #1, #2, ...
  
  The names are the `identifiers', placed in the first 5 columns of
  each row of the output table. They are 20 characters long, and
  usually are in the form `#1', `#2', ...
  
4 Domap
  (Default - `Yes'    Choice - `Yes/No')
  
  The profile map is non-zero. Do you want to use it in
  Interact:Scrutiny?
  
4 Donew
  (Default - `Yes'      Choice - `Yes/No')
  
  In marking up the positions of stars around the subject star
  that were fitted along with it, should the starting positions
  be used, or the `new' fitted ones?
  
4 Doslope
  (Default - present value, start='Yes'    Choice - `Yes/No')
  
  When subtracting fitted star from display, subtract the sloping
  background as well. This is not the overall backgound but the
  sloping component above (or below) the background value at the
  b/l/h corner of the fitting box.
  
4 Dospot
  (Default - present value, start='Yes'      Choice - `Yes/No')
  
  In marking up the positions of stars in the Starman:Measure input
  file table, should the positions be marked with a single pixel
  spot? If not, then they will be marked with a cross of adjustable
  length.
  
4 Instars
  (Default - null)
  
  Name of file containing the output of a run of the Starman:Measure
  program.
  
  This is a table in the format of a  Starman table file.
  
4 Length
  (Default - 2.0              Range - 0.5 to 100.0 )
  
  Length, in pixels,  across arms of the crosses that are to be
  painted up.
  
4 Listxy
  (Default - present value, start='Yes'      Choice - `Yes/No')
  
  In typing out, to terminal or file, the table of the Starman:Measure
  table input file in the standard format, do you want the X,Y
  position of each star to be output?
  
  The standard format is, depending on whether the X,Y positions are
  output, :-
  
   Star   Mag   Height   Dx    Dy  Rms  Its Inval Comps Imp  Diff-2
  
  or
  
   Star   X      Y      Mag Height   Dx    Dy    Rms  Its Inval Imp
  
4 Lrange
  (Default - present values, start=1,no of rows
   Range - 1 to no of rows)
  
  This parameter is accessed when selecting which stars in the
  input MEASURE table to use. It defines which ones by taking those
  in the table  in the defined range of rows in the table.
  
  This parameter defines the start and end row numbers to define that
  range.
  
4 Lxrange
  (Default - present values, start=-1.0e6,1.0e6
   Range - -1.0e10 to 1.0e10)
  
  This parameter is accessed when selecting which stars in the
  input MEASURE table to use. It defines which ones by taking those
  in the table  which lie in a defined range of X positions.
  
  This parameter defines the start and end of that X range.
  
4 Lyrange
  (Default - present values, start=-1.0e6,1.0e6
   Range - -1.0e10 to 1.0e10)
  
  This parameter is accessed when selecting which stars in the
  input MEASURE table to use. It defines which ones by taking those
  in the table  which lie in a defined range of Y positions.
  
  This parameter defines the start and end of that Y range.
  
4 Name
  (Default null)
  
  Name of star in input Starman:Measure table to put out all its
  details for.
  
4 Numaft
  (Default - 2              Range - 0 to 130)
  
  When setting up format for typing out, to terminal or file, details
  of fit of star, this is the number of decimal places to show in a
  number. If `0' is replied, the decimal point itself is suppressed.
  
4 Numbef
  (Default - 4              Range - 0 to 130)
  
  When setting up format for typing out, to terminal or file, details
  of fit of star, this is the number of characters to show before the
  decimal point.
  
4 Number
  (Default - see below          Range - see below)
  
  A general request for a number. The possible occasions this can
  be asked for are:-
  
  Default       Range         Remarks
  -------       -----         -------
  1          1-no of rows  Star in input Starman:Measure table to
                             display the residuals to fit, in the
                             displayed image.
  
  1          1-no of rows  Star in input Starman:Measure table to type
                             out to terminal all details for.
  
  next not-  0-no of rows  When choosing stars to mark with their
  removed                    companions in their fits, this is the
                             number of the star to select. Replying
                             `0' will stop the looping asking for next
                             star.
  
  next not-  0-no of rows  When choosing stars to mark with distant
  removed                    companions, the program will search
                             through the list, from this star on, for
                             such a star and output the details and
                             mark up the star. Replying `0' will stop
                             the looping asking for next star.
  
4 Numchar
  (Default - 12      Range - 1 to 20)
  
  Number of characters in the star's name (identifier) to output in the
  typing out, to terminal or file, of star details from the input
  Starman:Measure table.
  
4 Numcol
  (Default - present value, start=1     Range - 0 to No of columns)
  
  The number of the column in the input Starman:Measure table that
  is to be put in this typing out, to terminal or file, column.
  
4 Outfile
  (Default - null)
  
  The name of the new file to contain the formatted version of a
  selection of the input Starman:Measure table of fitted results. The
  file is a normal ASCII text file
  
4 Outstars
  (Default - null)
  
  The name of the new file to contain a table, in the format of the
  Starman:Measure program, of that input Starman:measure table,
  but with (optionally) some stars removed, and (optionally) some
  extra stars added. These extra stars are picked up in the
  Interact:Scrutiny group of functions
  
4 Prefix
  (Default - `A'     Choice - any character string)
  
  The character string to add to the names of new stars in the
  `Outstars' output table file.
  
  This is asked for if there have been new stars made for the
  output in the `Outstars' table of the Interact:Scrutiny, and it
  is desired (via the `Dopref' parameter) that the names of these new
  stars are distinguished by having a character string between the `#'
  that usually starts a star name and the number that ends it.
  
  The new stars are output with names #'X'1, #'X'2, , ... ,
  where `X' is a character string, input via this parameter.
  `X' has a default of `A', and it is recommended that only a short
  character string be used, since the total name length is only 20.
  
  The names are the `identifiers', placed in the first 5 columns of
  each row of the output table. They are 20 characters long, and
  usually are in the form `#1', `#2', ...
  
4 Profile
  (Default - null)
  
  The name of the existing file containing the `profile' of the stars
  to be used in Interact:Scrutiny.
  
  It is an image with the profile parameters and profile map in the
  normal Starman `Profile' format, in a Starman NDF file.
  
4 Seek
  (Default - `Number'              Choice - `Number/Name')
  
  When typing out the full details of the fit for a star in the input
  Starman:Measure table, select that star by name or number in the
  table.
  
4 Soption
  (Default - present value,start='list'     Choices - see below)
  
  What operation, from a menu of possible choices, to do next?
  
  The menu selection of options for looking and adding to, the output
  results table of the Starman:Measure program.
  
  You repeatedly come back to this parameter after performing
  `Scrutiny' operations. You select one of the menu operations.
  
  Option        Function
  ------        --------
  blink         Blink the displayed image
  box           Put a box in the image outside the star -Remove- area
  comps_all     Mark posn of a star and its companions in the fit
  comps_dist    Mark posns for next list star with distant comp
  list_in       Load a new star list (discard the old one)
  list_out      Write to file the -Add- used (extra,removed) list
  lselect       Select a portion of the list to look at
  mark_new      Mark up on the display the -new- star list posns
  mark_old      Mark up on the display the -old- star list posns
  nearest       Give nearest list star to cursor position
  printlist     Put a neat summary of the fits into an ascii file
  profile_in    Load a new star profile (discard the old one)
  remove        Clean an area round a list star with stars removed
  replace       Replace the -Remove- box by the original image data
  reremove      Display the -Remove- box again
  stars_add     Use cursor to add stars to star list
  stars_rem     Use cursor to remove stars from star list
  type_one      Type out all of a star fit (from number/name)
  typelist      Put a neat summary of the fits onto the terminal
  
  
  Mouse buttons for `Stars_Add/Rem' options :-
  
          Left   Button  =  Add/remove star from list
          Centre Button  =      "       "    "    "
          Right  Button  =  Return to Option Choice
  
  Mouse buttons for Blink work:-
  
          Left   Button  = slow blink by x2
          Centre Button  = speed blink by x2,
          Right  Button  = switch to hand blink
  
   The hand blink is done using the keyboard.
  
 For X-window device use, the Cursor must be in image window area
 for the cursor buttons to work when in -WORKING- mode. The
 window also must be -active- - that is the bar at the top
 must be set. Click on this bar if it is not before using
 the buttons.
  
  
  This is the `simple set' of options which are available in all
  groups of options:-
  
  Option        Function
  ------        --------
  alter         Functions for image altering in various ways
  aperture      Functions for aperture photometry
  colour        Functions for changing colour display of the image
  fit_magns     Functions to get star magnitudes with Gaussians
  inspect       Functions for image inspection in various ways
  main          Entry point for program
  positions     Functions to get or plot a list of positions
  scrutiny      Functions to look at Starman MEASURE output
  
  image         Input new image
  im_get_flash  Input new image and display (flash) it
  
  area          Select area of image to display
  clear         Clear screen
  close         Close the display screen
  compress      Compress image in either X or Y for display
  cvalues       Show the cursor position and image pixel value
  display       Display image
  flash         Display image in standard way
  open          Open the display screen
  reset         Reset zoom/pan to unity and centre
  zoom          Zoom and pan image by using mouse location
  
  panel         Switch between panel and keyboard option selection
  exit          Exit from this program
  
  
   Buttons for Cvalues work:-
  
     The values are output continuously again on the panel, or by
     request on the terminal if the panel is not being used.
  
             -Panel- mode?    Button actions
             ------------     --------------
                 YES           All buttons exit
                  NO           Buttons Left,Centre give values
                               Right Button 3 exits
  
  
   Buttons for Zoom/Pan work:
                              Left Button twice              = zoom /2
                              Centre Button twice            = zoom x2
                              Left Button then Centre Button = pan
                              Right button once             = exit
  
  Zoom means zoom around present position of cursor
  Pan means set present position of cursor to screen centre
  
4 Wlist
  (Default - `New'            Choice - `Old/New')
  
  This deals with the removal of stars from the input Starman:Measure
  star list.
  
  The removal is done by the user using the cursor to mark a position
  in the image and the program thens removes the `nearest' star in the
  list to that position. This choice is whether the nearest star is
  defined from the output positions of the Starman:Measure table (the
  normal positions) or the positions that the Starman:Measure program
  run had, as input, before it was run.
  
3 Author
  
  Alan Penny                   RAL        1994 July
2 Measure
  
   This performs photometry of the stars in an image of a crowded star
   field.
  
   A 2D Lorentz-Gaussian-empirical profile is fitted to the stars near
   the positions given by an input position table. The magnitudes and
   positions of the stars are found, and the fit details typed out and
   stored.
  
   The profile is a full 2-D one and is a good match to typical star
   images, so the program has a good S/N performance. It can also deal
   with severe crowding and severe pixel under-sampling.
  
3 Algorithm
  
   What the program actually does
   ------------------------------
  
 1) A rough  estimate of the magnitude, height and position of each
    star in the input list is made, looking for the peak pixel value
    within one radius of the input position.
  
 2) These estimates are looked at for each star, to see if any of the
    other stars (that is the stars in the input list) will
    (given their distance in terms of the star profile and distance
    and relative magnitude) affect the star. This is done as :-
  
   Go through the input star position table and find for each star its
   importance according to the formula
  
             Imp = mag(star) - mag(main star) - 6 + d/(star radius)
  
   Thus the more important the star is the more -ve Imp is. If the
   star is important enough to worry about (Imp less than 0) then the
   star is noted with the more important stars first. Stars inside the
   measuring box (width of about 10 radii) are also included.
  
   If more than fourteen stars are important enough to be noted, only
   the fourteen most important are noted.
  
 4) This gives, for each star, a group of stars. A rectangular box is
    drawn round the target star, large enough to take all of it in -
    about 10 times the half height radius in X and Y, allowing for
    the possible rotation of the star profile from the X-Y axes.
    The group of stars are solved together (stars whose centres are
    outside the box are fitted all the same, but their positions are not
    allowed to vary).
  
    The result for the target star is typed out and also stored.
  
   Thus this is the stage at which the actual measurement occurs.
  
   It will be noted that stars, if any,  which are not in the input
   list are neither fitted, nor taken into account when fitting other
   stars.
  
 5)At the end, there is an option to clean the image by subtracting all
   the stars that have had successful fits.
  
 6) Optionally it can then go over the cleaned image, trying to fit the
    stars that it failed on before.
  
 7) Optionally, it can then look at close undone pairs and try to fit
    one star between them.
  
 8) Optionally, it can repeat the entire process, using the new
    estimates of posns and heights to deal better with large stars
    adjacent to each target star. If on this redoing, an isolated star
    has been previously fitted on the first loop, and its calculated
    position was within 0.1 pixels of its input position, it is
    assumed that the fit was good, and it is not recalculated.
  
 9) It types out each fit as it does it, as well as storing to file.
  
3 Profile_variations
  
   The program can deal with stars of different profiles. For each star
   you can feed in a separate profile. ( If they all have the same
   profile, as usual for many ground-based observations, this is done
   automatically when inputting the standard profile.) This enables
   you to deal with position and/or colour dependent profiles. Whilst
   this option is fully functional, some helpful ancillary programs
   are still being documented, so in the future dealing with differing
   profiles will be easier than it is now.
  
3 Fitting
  
 The fit is done applying, to single stars or groups of stars, a proper
 iterative least squares fitting proceedure with a function of a
 sloping plane background and up to fourteen identical fully 2D star
 profiles.
  
4 Profile_details
  
 The profile that is fitted is one that has been found to give a good fit
 to typical star images. It is an elliptical rotated Lorentzian sitting
 on top of a wide low circular modified Gaussian, with an empirical
 residuals map. The actual fitting is a scaling of this profile, added
 onto a linear sloping background, which is fitted at the same time as
 the star.  The mathematical expression of this is:-
  
  
              -                                     -
             l                          PQ           l
             l        1              -dq             l
 I(x,y) =  H.l  -------------  +  HQ.e     + F(x,y)  l
             l        P(1+d2)                        l
             l  1 + d1                               l
              -                                     -
  
           +  A  +  B.x  +  C.y
  
  
  where   I(x,y) = the value of the star profile at pixel position x,y
  
          H      = the star peak Lorentz height (Gaussian and map
                   are an added fraction)
  
         x0, y0  = the star centre position
  
         A, B, C = the sloping background
  
 The Lorentz profile:-
  
   d1 = sqrt( (x1/Rmaj)**2 + (y1/Rmin)**2) )
   d2 = sqrt( (x1/RPmaj)**2 + (y1/RPmin)**2) )
  
   x1 = (x-x0).cos(theta) + (y-y0).sin(theta)
   y1 = -(x-x0).sin(theta) + (y-y0).cos(theta)
  
  
   Rmaj and Rmin are the major and minor axes of the ellipse
   which is rotated at theta degrees to the X axis. (Rmaj and Rmin
   are often referred to in the code as RX and RY.)
  
   P is often about 2.2; the RPs are usually about 6*(the Rs)
  
 The circular modified Gaussian profile:-
  
   dq = sqrt((x-X0)**2+(y-Y0)**2)/RQ
  
   RQ is the radius, and PQ is the power of the modified Gaussian. HQ is
   the fraction of the main Lorentz profile peak that the Gaussian has.
   (HQ, RQ and PQ are often referred to in the code as QH, QR and QR.)
  
   HQ is often zero, and is always small, of the order of 0.01;
   RQ is usually greater than 5*(the Rs);
   PQ is often about 2.
  
 The empirical map:-
  
   F is an empirical function, the 'Profile Map'. This is expressed in
   terms of a fraction of the main Lorentz profile. The map is
   sampled on a grid which can be finer than the pixel
   grid. The grid has a spacing of int((1 + 2.9/min(Rmaj,Rmin)))
   times finer than the pixel grid. Thus the empirical
   function is sampled at spacings better than the Nyquist frequency.
   Unless the star is distorted, the values in this map are zero, and
   even if the star is distorted, they are usually very
   small, with peak values less than 1 percent of the
   main profile. The map is not an empirical representation of the image
   residuals from the analytical profile, but of those residuals averaged
   over the pixels.
  
   Thus depending on the pixel size relative to the star radius, the map
   values will change, unlike the analytical profile parameters.
  
 Pixel undersampling:-
  
   In profiles where the radius is less than 3 pixels, full account
   is taken of the pixel undersampling in the analytical part and (where
   used) in the empirical part.
  
 Position, height and background:-
  
   The parameters X0,Y0,A,B,C, and D are not parts of the profile, as
   they can be different for each star.
  
4 Fitting_details
  
 The fitting is done by starting with trial values of the star heights
 and positions and of the background, and then improving these by the
 iterative linearised least squares method until an acceptable fit is
 made, or until too many iterations have been done.
  
 Features of the fit are:-
  1) It can deal with close companions.
  2) It can deal with areas of 'bad' pixels, in that such areas are
     ignored in the fits. Again you have to define these areas. (Such
     pixels can also be so flagged before entering the program - see
     the Starman package help for the method of flagging invalid
     pixels.)
  
  The fitting takes account of pixel averaging, that is what happens
  when the star radius is small, and there is significant change in
  the profile across one pixel. As the profile is not a straight line,
  the normal practice of taking the profile value at the centre of the
  pixel will be wrong. The program subdivides the profile over the
  pixel and calculates a more accurate average. So the bad effects of
  a narrow profile and star centres being at different distances from
  the pixel sides are minimised.
  
  The 'volume' of this profile, that is the numerical integration under
  the 2-D profile out to a defined distance, can be calculated. (The
  calculation is done with a fine mesh, so there is no effect from the
  pixel averaging for small radii.) This enables the magnitudes of
  stars with different profiles to be estimated.
  
  So each star has a height, A, and a position X0, Y0.
  
  The program also calculates a magnitude from the star height. This
  is :-
              Mag  =  30  -  2.5*log  (star height*profile volume)
                                    10
  The profile volume is the numerical integration (on a fine grid)
  over the standard profile for a star of unit height out to a large
  distance. So (star height*profile volume) is an estimator of the
  total flux in the target star.
  The value 30 is an arbitrary constant to give magnitudes of a
  comfortable level.
  
  The relative magnitudes of the stars in the image will be measured
  correctly, and the absolute level will be roughly right (apart from
  the arbitrary zero point), but for the best comparision with stars
  in other images with different profiles, the zero point is best
  determined by aperture photometry on the bright stars.
  
3 Input
  
   The input consists of an image, a table of star positions and
   a profile. Optionally other star tables can be input for ease
   of use
  
4 Input_image
  
  The input image can be any Starman .sdf image, without constraints.
  
  Input via the parameter `IN'.
  
4 Input_Star_Positions
  
  The star positions are fed in through a Starman table.
  
  Input via the parameter `IN'.
  
  This must contain at least two columns for the X,Y positions. The
  positions will be taken from those columns with headers `X' and `Y'.
  If these headers are not present, then the X position will be taken
  from the first column and/or the Y position forom the second column.
  
  It should be noted that the program cannot find stars for itself, or
  decide if a star is actually a multiple one. It takes the stars in the
  input position table as all the stars it has to know about. A consequence
  of this is that the input positions have to be rather good, for two
  reasons. First the program only looks a short way round each input
  position for a star (this is to avoid trouble in crowded areas). Second
  if stars are really crowded, the fitting tends to fail unless the
  input positions are good. For the first case, the positions have to
  be within a radius, and for the second even better.
  
  There may also be a `HEIGHT' column, which contains a value of
  an estimate of the star height. Again this is in either the column with
  the `HEIGHT' header or in column 3. This parameter is optional.
  
  This file may also contain the information for the profile to be
  used for each star. As MEASURE can apply a different profile for
  each star, this information has to be supplied to the program. In the
  INSTARS file, each star may have the profile parameters given for
  each star as columns in this input table. These parameters are taken
  from columns with the appropriate header, or if that is not present, then
  a default column. These headers are:-
  
   Parameter       Header      Default Column    Mandatory
    ---------       ------      --------------    ---------
    X posn          `X'             1                Y
    Y posn          `Y'             2                Y
    Height          `HEIGHT'        3                N
    Maj Rad         `RX'            4                N
    Min Rad         `RY'            5                N
    Power           `P'             6                N
    Pow Maj Rad     `PRX'           7                N
    Pow Min Rad     `PRY'           8                N
    Angle           `THETA'         9                N
    Gauss Power     `QP'           10                N
    Gauss Height    `QH'           11                N
    Gauss Rad       `QR'           12                N
    Map Number      `MAPNUM'       13                N
    Map X Size      `MX'           14                N
    Map Y Size      `MY'           15                N
    Map Magnif      `MAGNIF'       16                N
  
  
   The `Map Number' gives the number of the empirical profile map
   to use in the input file `PROFILE', with the MX and MY showing
   the XY size of that particular map to use, and the `MAGNIF' showing the
   `magnification' of that particular map. For a fuller explanation see
   the help on `PROFILE'.
  
   If any of the non-mandatory columns are absent (i.e. there are less
   than 16 columns in the input table, than the profile parameters
   given in the input `PROFILE' file will be used for the missing
   parameters.
  
   The parameters in the `PROFILE' file will override ALL profile
   parameters (if any) in the `INSTARS' file, if the `PYES' parameter is
   given as `yes' (its default value). Also in this case, the map number
   is defined as `1'.
  
4 Input_Profile
  
  The star profile is fed in through an image made by the PROFILE (qv)
  program.
  
  Input via the parameter `PROFILE'.
  
  This can be just one profile or it can be the store of many profiles
  empirical maps for when stars have differing profiles. In this
  latter case, then the profiles parameters are input in the INSTARS
  table in a manner explained elsewhere.
  
  This file is a 2-D image. It contains the parameters for one
  profile as descriptors, and the image pixels contain the empirical
  profile map for either one, or more than one profile.
  
  The descriptors are:-
  
    Parameter       Descriptor
    ---------       ------
    Maj Rad         `RX'
    Min Rad         `RY'
    Power           `P'
    Pow Maj Rad     `PRX'
    Pow Min Rad     `PRY'
    Angle           `THETA'
    Gauss Power     `QP'
    Gauss Height    `QH'
    Gauss Rad       `QR'
    Map Magnif      `MAGNIF'
    Profile Volume  `VOL'
    Radius for Vol  `VOLRAD'
    Gauss Base      `QBASE'
    No of maps      `MAPMAX'
    Map X space     `MAPX'      (optional)
    Map Y space     `MAPY'      (optional)
  
  An empirical map covers a certain number of image pixels, with
  a defined sub-division of the pixels (the `magnification'). Thus
  a pixel map that covers a 10x10 image pixel area will have a
  size of 20x20 if its `magnification' is 2.
  
  The pixel values are the values that that pixel (or sub-division of
  a pixel) is scaled down from the Lorentzian profile. Thus if a
  pixel should have 1/10th the value of the Lorentzian peak value,
  then it will have a value of 0.1 (since the Lorentz central peak
  has a value of 1.0).
  
  Often the image will have a `BSCALE' and `BZERO', so the pixel
  values used are  that of (BS*[disk value] + BZ).
  
  (This `single' profile image is the one put out as the output of the
  PROFILE programme.)
  
  If more than one empirical map is to be held in the image, then
  this has to be made by the user, by making an image with the `MAPMAX'
  parameter being more than one. In this case the maps are stored in
  the image in a series of `boxes', of size MAPX by MAPY, stacked one
  `above' in the other in the `Y' direction, with their `left-hand' sides
  along the `left' of the image. Each map is kept with its
  b.l.h. corner at the b.l.h corner of its `box'. If the MAPX and
  MAPY parameters are missing, then the program assumes that MAPX is
  the same as the X size of the image, and that MAPY is the Y size
  of the image, divided by MAPMAX, the number of maps in the image.
  
  When a map is used, the program gets the map number, and actual
  X,Y size of the map from the INSTARS input star position table,
  finds the map location from the image as the `nth' box up, and
  reads the map out of the box.
  
4 Other_inputs
  
5 BEFORE_table
  
   A table which was the 'OUT' measures from a previous run of MEASURE.
  
   Input via the parameter `BEFORE'.
  
   This table must contain the same stars with the same positions as
   the main input star position table 'IN'. The purpose of this
   is that if a run was interrupted, and only some stars solved, the
   run can be repeated, but the stars done dont have to be redone.
   If there is not such a file, just press 'return'.
  
5 EXTRA_table
  
   Is there another table of stars, additional to the input table,
   which should be solved for?
  
   Input via the parameter `EXTRA'.
  
   The is for use when you have solved for a lot of stars in an image,
   but you want to do a few more and these new stars could be crowded
   by the old stars, as well as by themselves. Rather than redoing the
   combined tables together, when all the stars would have to be
   redone, the new ones are input here and the program works out which
   stars of the old table have to be redone since stars of the new
   table affect them and which stars of the new table are affected by
   stars in the old table. The output table has the stars from the old
   table and then those from the new table in it.
  
3 Output
  
  The output consists of a table of star measures, and optionally
  a copy of the input image, with the measured stars `removed'.
  
4 Output_star_measures
  
  The output star measures are put into a file in the Starman table format.
  
  Output via the parameter `OUT'.
  
  The table has the entries in the order:-
  
   Column  Identifier    Content
   ------  ----------    -------
     1       X           fitted X position
     2       Y           fitted Y position
     3       MAG         magnitude
     4       DX          difference in fitted X posn from input posn
     5       DY          difference in fitted Y posn from input posn
     6       ITERATIONS  no of iterations done in the fitting
     7       CHI         calculated Chi-squared value of the fit
     8       NUMINVAL    number of INVALID points in the Chi-squared
                         error estimating area
     9       HEIGHT      height of the fitted star above the sky
    10       BASE        sky (or background) level
    11       MAPNUMB     number of profile map used
    12-20    as contents profile parameters:-  RX, RY, P, PRX, PRY,
                                               THETA, QR, QH, QP
    21       NUMCOMPS    no of companion stars that have been fitted
                         with thetarget star
    22-28    COMP1, etc  numbers (as ranks in the input table) of the
                         first block of companion stars, in order of
                         importance (as defined above) to the target
                         star
    29       XBOX        X size of the box used for the fitting
    30       YBOX        Y size of the box used for the fitting
    31       IMPORTANCE  total importance of all the companion stars
             OF COMPS    used
    32       XSLOPE      X sky slope fitted
    33       YSLOPE      Y sky slope fitted
    34       FLAG1       Flag 1 for internal program use
    35       FLAG2       Flag 2 for internal program use
    36       VOLUME      'volume' of a star, with this profile, of
                         unit height
    37       ORDER       order this star was done in the fit
    38       MAPX        empirical map X size
    39       MAPY        empirical map Y size
    40       MAGNIF      empirical map magnification
    41-47    COMP8, etc  22-28 for second block of stars
    48       DIFF LAST   change in the magnitude estimate between the
                         final
             ITS         fit and the iteration two before it
    49       GUESS       temporary internal height estimates
             HEIGHT
    50       ERROR       Estimate of the star magnitude error
    51       DAMPING     final value of the damping factor used in the
                         star fit
  
  The program stores output as it goes along, so a crash is not
  fatal. You can also rerun the program using the part completed
  output as input so it doesnt have to do those stars again, by use
  of the BEFORE option.
  
  The output table may be inspected, plotted on the image, and
  formatted for printing by using the program INTERACT, in the
  `scrutiny' mode.
  
4 Output_cleaned_image
  
  Optionally, the input image can be copied to the output, with the
  stars that have had actual fits `removed' from the image. This
  enables you to see how good the fits were.
  
  Output via the parameter `OUTIM'.
  
  There are a number of ways in the INTERACT program with the `scrutiny'
  mode that this cleaned image can be looked at, especially in
  conjunction with the table of star measures.
  
3 Fitting_order
  
   The actual order of fitting is to start with the brightest star,
   solve it, and go onto the next brightest. This is so that in
   fitting the difficult faint stars, the any nearby bright stars will
   already have more accurate psoitions and heights for use in setting
   up the starting conditions of the fit, and thus make the fit will be
   both more accurate and faster. Doing the stars in this way also means
   that the bright easy stars are done first, and so monitoring of the
   process at the beginning of running the program is more rewarding
   in that the results come more quickly than later on, and also the
   results for the most prominent stars become available first.
  
3 Errors
  
   The program calculates two error parameters for each star. There
   are:-
  
      1) the Chi-squared value from the difference between the fitted
         (maybe multiple) profile and the actual data over a small
         area around the fitted star position. The area is an
         orthogonal rectangle of X size (2*RX+1) and Y size (2*RY+1),
         and so no account here is taken of any rotation of the star
         from the X-Y axes. The RX, RY are as defined in the profile
         equation above.
      2) An estimate of the error of the star magnitude itself. This is
         calculated from the goodness of the fit itself, made during
         the least-squares fitting, falling out of the error matrix.
  
3 Tips
  
  The main decision is do you want to do the two refining options,
  REDO and DOTWOS, and do you want to do the RECYCLE.
  
  The simplist and fastest, is NO to all of the above. Some
  more difficult stars are done with the REDO and DOTWOS options,
  and slightly more accurate results are given by RECYCLE. It depends
  a lot on what your interest in the image is, and how much
  computer time you want to spend.
  
  The default choice is a reasonable choice.
  
  The secondary decision is the OUTFIX1 and OUTFIX2 details about the
  fits. See the help on them for more details, but again the default
  is a reasonable choice.
  
  On both these matters, some experimentation by you will give you
  an idea on the best combination to suit you.
  
3 Display
  
  There is a very pretty option. It shows how the fitting is getting
  on, but slows the program down
  
  The whole image is displayed and then a little square dots round
  removing the stars.
  
  It paints up a blue rectangle of the place where it is going to remove
  the next star. Then it removes it, and paints a green rectangle where
  the fit has used data from the image to make the fit. There is also a
  red rectangle which shows the area out to where the subtraction of the
  wings of the fitted star have had an effect, that is at a level of
  0.2 pixel value.
  
3 Hidden_Parameters
  
  A number of input control parameters that the user can set to control
  the way the program works are 'hidden' from the user. That is, the
  default values are used unless overridden on the Command Line, or
  in a local '.ifl' interface file.
  
  This is done because the parameters need only be changed for special
  needs. The parameters are:-
  
  Name      Function                                        Default
  ----      --------                                        -------
  BOX       Set size of box round stars to be fitted        Appropriate
                                                            Size
  DOTWOS    Fit close undone pairs as single star on        Yes
            cleaned image
  FIX       Fix all star positions at input values          No
  INFORM    Type of information output.                     Simplest
  NUMBER    Number of stars to fit (brightest first)        All
  OFIX1     Fix posns and hts of stars some distance from   Yes
            box at rough values, in first cycle
  OFIX2     Fix posns and hts of stars some distance from   Yes
            box at 1st cycle values, in second cycle
  RADIUS    Radius out to which 'volume' under profile is   30.0
            to be found to add to mag zero point.
  RECYCLE   After the fits, repeat the entire process,      Yes
            to get better estimates.
  REDOCL    After the first fit, image cleaned and the      Yes
            failed stars fitted on the cleaned image.
  SCREEN    Size of screen to open up if displaying image.  Image
                                                            size
  
  Further information is available in the individual helps on the
  parameters.
  
  
3 Parameters
  
   A guide to the input parameters, that is those parameters the user
   inputs when running the program, or when entering responses into
   the `.ifl' interface file.
  
4 Before
   (Default - null)
  
   The name of a file containing the table which was the 'OUT' measures
   from a previous run of MEASURE. if no such file is to be input,
   enter the 'null' response.
  
   This table must contain the same stars with the same positions as
   the main input star position table 'IN'. The purpose of this
   is that if a run was interrupted, and only some stars solved, the
   run can be repeated, but the stars done dont have to be redone.
   If there is not such a file, just press 'return'.
  
4 Box
  (Default-  0,0              Range -  0 to 200)
  
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
  The X,Y size of the box round each star that is to be used in the
  fitting. If either size is set at 0 (which is the default), then the
  program calculates for each star what it thinks the best box size is.
  This is done from the width of the profile for that star.
  
4 Dodisp
  (Default - 'no'    Choice - 'yes:no')
  
  Display the results as they are calculated?
  
  This is a very pretty option. It shows how the fitting is getting on.
  on, but slows the program down
  
  The whole image is displayed and then a little square dots round removing
  the stars.
  
  It paints up a blue rectangle of the place where it is going to remove
  the next star. Then it removes it, and paints a green rectangle where
  the fit has used data from the image to make the fit. There is also a
  red rectangle which shows the area out to where the subtraction of the
  wings of the fitted star have had an effect, that is at a level of
  0.2 pixel value.
  
4 Domap
  (Default - 'yes'      Choice - 'yes:no')
  
   If you have an empirical map in your profile file, do you want it
   used?
  
4 Dotwos
  (Default - 'yes'      Choice - 'yes:no')
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
  After the first fit (and any redo -see 'Redocl' parameter), do you
  want the image cleaned and an attempt made to fit close undone
  pairs as a single star.
  
4 Extra
   (Default - null)
  
   The name of a file with a table of extra star positions. If no
   extra file is to be input, enter the 'null' response.
  
   Is there another table of stars, additional to the input table,
   which should be solved for?
  
   The is for use when you have solved for a lot of stars in an image,
   but you want to do a few more and these new stars could be crowded
   by the old stars, as well as by themselves. Rather than redoing the
   combined tables together, when all the stars would have to be
   redone, the new ones are input here and the program works out which
   stars of the old table have to be redone since stars of the new
   table affect them and which stars of the new table are affected by
   stars in the old table. The output table has the stars from the old
   table and then those from the new table in it.
  
4 Fix
  (Default - 'no'      Choice - 'yes:no')
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
  Option to fix the positions of all the stars at the input positions.
  This can enable more accurate magnitudes to be calculated. Use of
  this option should be done with care, as even a small inaccuracy in
  the input position (say a 1/10th of the seeing diameter will result
  in very poor fits.
  
4 Gain
  (Default - 1.0        Range - 1.0e-8 to 1.0e8)
  
  The gain of the original detector. in terms of counts stored in
  a pixel for each independent event detected. Thus something like
  counts/photon.
  
4 Heights
  (Default - 'yes'      Choice - 'yes:no')
  
   If the input table of stars has a column called 'HEIGHTS', then this
   is the choice for using the fitted heights in that file for the
   program to use as first estimators of the star heights when looking
   for important neighbours to allow for in the fitting. Say no only
   when the numbers in the 'HEIGHTS' column are not the heights.
  
4 In
   (Default - null)
  
   The name of the input image. This must be the name of a .sdf image
   file.
  
4 Inform
   (Default - 'standard'          Choice - 'none:standard:more:full')
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
   Flag for outputting via the terminal to the user information about
   the progress of the program.
  
    Flag       Terminal Output
    ----       ---------------
    none       Results only
    standard   Results + stage reached
    more       Results + stage reached + times at various subroutine
                 entries
    full       Results + companion fits + stage reached + times at
                 various subroutine entries
  
4 Instars
   (Default - null)
  
  The name of the file with the table of the star positions. This
  must be the name of a Starman table format file, with two
  columns containing the X,Y positions.
  
  This must contain at least two columns for the X,Y positions. The
  positions will be taken from those columns with headers `X' and `Y'.
  If these headers are not present, then the X position will be taken
  from the first column and/or the Y position forom the second column.
  
  It should be noted that the program cannot find stars for itself, or
  decide if a star is actually a multiple one. It takes the stars in the
  input position table as all the stars it has to know about. A consequence
  of this is that the input positions have to be rather good, for two
  reasons. First the program only looks a short way round each input
  position for a star (this is to avoid trouble in crowded areas). Second
  if stars are really crowded, the fitting tends to fail unless the
  input positions are good. For the first case, the positions have to
  be within a radius, and for the second even better.
  
  There may also be a `HEIGHT' column, which contains a value of
  an estimate of the star height. Again this is in either the column with
  the `HEIGHT' header or in column 3. This parameter is optional.
  
  This file may also contain the information for the profile to be
  used for each star. As MEASURE can apply a different profile for
  each star, this information has to be supplied to the program. In the
  INSTARS file, each star may have the profile parameters given for
  each star as columns in this input table. These parameters are taken
  from columns with the appropriate header, or if that is not present, then
  a default column. These headers are:-
  
   Parameter       Header      Default Column    Mandatory
    ---------       ------      --------------    ---------
    X posn          `X'             1                Y
    Y posn          `Y'             2                Y
    Height          `HEIGHT'        3                N
    Maj Rad         `RX'            4                N
    Min Rad         `RY'            5                N
    Power           `P'             6                N
    Pow Maj Rad     `PRX'           7                N
    Pow Min Rad     `PRY'           8                N
    Angle           `THETA'         9                N
    Gauss Power     `QP'           10                N
    Gauss Height    `QH'           11                N
    Gauss Rad       `QR'           12                N
    Map Number      `MAPNUM'       13                N
    Map X Size      `MX'           14                N
    Map Y Size      `MY'           15                N
    Map Magnif      `MAGNIF'       16                N
  
  
   The `Map Number' gives the number of the empirical profile map
   to use in the input file `PROFILE', with the MX and MY showing
   the XY size of that particular map to use, and the `MAGNIF' showing the
   `magnification' of that particular map. For a fuller explanation see
   the help on `PROFILE'.
  
   If any of the non-mandatory columns are absent (i.e. there are less
   than 16 columns in the input table, than the profile parameters
   given in the input `PROFILE' file will be used for the missing
   parameters.
  
   The parameters in the `PROFILE' file will override ALL profile
   parameters (if any) in the `INSTARS' file, if the `PYES' parameter is
   given as `yes' (its default value). Also in this case, the map number
   is defined as `1'.
  
4 Noise
  (Default- 0.0                  Range - -1.0e8 to 1.0e8)
  
  The additional noise per pixel present in a pixel if there was no
  signal noise. An example of this is the read-out noise in a CCD.
  
  This should be in the std dev of the numbers in the image pixels.
  
  This is used when calculating the error in a measure.
  
4 Number
  (Default - All of them.        Range - 0 to all)
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
  The number of stars to be analysed. Remember that the stars are
  done in rough order of brightness, so 'number' does not mean do
  the first 'number' in the input table, but 'number' of the bright
  stars, though not necessarily the brightest ones.
  
4 Ofix1
  (Default - 'yes'      Choice - 'yes:no')
  (Hidden parameter - not asked for, has to be set if default not
  wanted)
  
  In the first loop, fix, for each star fit, the positions and heights
  of those stars some distance outside the fitting  box at roughly found
  values (or the input heights)?
  
  The advantage in fixing is that if you already have the right heights,
  then the fit will be better. The danger is that if the heights are
  wrong, then the fit might be inaccurate. If you are only doing one
  loop, you have to let the stars vary as the input geusses are
  just rough estimates. If doing two loops, then the error will not
  be too large, and fixing them will speed things up.
  
  If you are doing once (RECYCLE=NO) then
  say NO, otherwise the common answer is YES, but you might
  to try otherwise and see what difference it makes to the results.
  
4 Ofix2
  (Default - 'yes'      Choice - 'yes:no')
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
  In the second loop (if doing one), fix, for each star fit, the
  positions and heights of those stars some distance outside the
  fitting  box at the values found in the first loop?
  
  The advantage in fixing is that if you already have the right heights,
  then the fit will be better. The danger is that if the heights are
  wrong, then the fit might be inaccurate. By the second loop, the
  fits from the first loop should be reasonable.
  
  The common answer is YES, but you might
  try NO and see what difference it makes to the results.
  
4 Oimtit
  (Default - 'Output from MEASURE'    Choice - any)
  
  The title to be attached to the output cleaned OUTIM image.
  
4 Out
   (Default - null)
  
  The name of the file to contain the output table of measurements.
  
  Its contents are described in the 'Misc' section of the help.
  
  This table can be looked at, and formatted for listing, by the
  program 'INTERACT' in its 'SCRUTINY' section.
  
4 Outim
   (Default - null)
  
  
  If you want a copy of the input image, cleaned of the fitted stars,
  then input here the name of a file to hold the cleaned image.
  
  If you do not want to have this stored, then just press return.
  
  This has no bearing on the option for fitting unfitted stars on a
  cleaned image. The calculations are entirely separate.
  
4 Outtit
   (Default - 'Output from MEASURE'      Choice -any)
  
  The title to be added as a descriptor to the 'Outstars' file.
  
4 Profile
   (Default - null)
  
  Input the name of the image, usually made by PROFILE (qv), which has the
  profile.
  
  This can be just one profile or it can be the store of many profiles
  empirical maps for when stars have differing profiles. In this
  latter case, then the profiles parameters are input in the INSTARS
  table in a manner explained elsewhere.
  
  This file is a 2-D image. It contains the parameters for one
  profile as descriptors, and the image pixels contain the empirical
  
  
  The descriptors are:-
  
   Parameter       Descriptor
    ---------       ------
    Maj Rad         `RX'
    Min Rad         `RY'
    Power           `P'
    Pow Maj Rad     `PRX'
    Pow Min Rad     `PRY'
    Angle           `THETA'
    Gauss Power     `QP'
    Gauss Height    `QH'
    Gauss Rad       `QR'
    Map Magnif      `MAGNIF'
    Profile Volume  `VOL'
    Radius for Vol  `VOLRAD'
    Gauss Base      `QBASE'
    No of maps      `MAPMAX'
    Map X space     `MAPX'      (optional)
    Map Y space     `MAPY'      (optional)
  
  An empirical map covers a certain number of image pixels, with
  a defined sub-division of the pixels (the `magnification'). Thus
  a pixel map that covers a 10x10 image pixel area will have a
  size of 20x20 if its `magnification' is 2.
  
  The pixel values are the values that that pixel (or sub-division of
  a pixel) is scaled down from the Lorentzian profile. Thus if a
  pixel should have 1/10th the value of the Lorentzian peak value,
  then it will have a value of 0.1 (since the Lorentz central peak
  has a value of 1.0).
  
  Often the image will have a `BSCALE' and `BZERO', so the pixel
  values used are  that of (BS*[disk value] + BZ).
  
  (This `single' profile image is the one put out as the output of the
  PROFILE programme.)
  
  If more than one empirical map is to be held in the image, then
  this has to be made by the user, by making an image with the `MAPMAX'
  parameter being more than one. In this case the maps are stored in
  the image in a series of `boxes', of size MAPX by MAPY, stacked one
  `above' in the other in the `Y' direction, with their `left-hand' sides
  along the `left' of the image. Each map is kept with its
  b.l.h. corner at the b.l.h corner of its `box'. If the MAPX and
  MAPY parameters are missing, then the program assumes that MAPX is
  the same as the X size of the image, and that MAPY is the Y size
  of the image, divided by MAPMAX, the number of maps in the image.
  
  When a map is used, the program gets the map number, and actual
  X,Y size of the map from the INSTARS input star position table,
  finds the map location from the image as the `nth' box up, and
  reads the map out of the box.
  
4 Pyes
  (Default - 'yes'      Choice - 'yes:no')
  
  If you have profiles in the star table, do you want the profile
  parameters in the profile file to override the profiles in the table?
  
4 Radius
   (Default - 30.0.              Range - 1.0 to 1.0e8)
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
  When calculating the magnitude, the volume under the profile has
  to be calculated. How far out from the star (in pixels) shall this
  be carried out? This is only important if you want to compare with
  aperture photometry, or have stars with differing profiles in the
  image.
  
4 Recycle
  (Default - 'yes'      Choice - 'yes:no')
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
  After the fits has been done, repeat the entire process, to use the
  better estimates of star heights and positions for starting input,
  and for better fits where a star is affected by stars some distance
  away.
  
4 Redocl
  (Default - 'yes'      Choice - 'yes:no')
  (Hidden parameter - not asked for, has to be set if default not
   wanted)
  
  After the first fit, do you want the image cleaned and an attempt
  made to fit the failed stars on the cleaned image.
  
4 Xcoeff
  (Default - 0.0,1.0,0.0         Range   -1.0e20 to 1.0e20)
  
  The coefficients used to transform the XY positions in the input table
  of star positions to a new set of X positions.
  
  
             X  =  C(1) + C(2)*X  +  C(3)*Y
                                in         in
4 Ycoeff
  (Default - 0.0,0.0,1.0         Range   -1.0e20 to 1.0e20)
  
  The coefficients used to transform the XY positions in the input table
  of star positions to a new set of Y positions.
  
  
             Y  =  C(1) + C(2)*X  +  C(3)*Y
                                in         in
  
  
3 Author
  
   A.J.Penny                 RGO-STScI-RAL            1984-1994
  
2 Profile
  
 This program determines the mean stellar profile (the shape) of
 stars in an image. It uses a number of stars to determine this mean.
  
 The user inputs the locations of a number of bright stars in an
 image, and the program then (either automatically or interactively with
 the user) determines the mean profile. It estimates the parameters of an
 analytic profile and estimates a subsidary empirical map that
 together give the best  mean fit for the profiles of these stars.
  
 The analytical profile is one which combines a Lorentz type profile
 with a wide Gaussian type profile added. Usually, the
 Lorentz component of the profile plus the empirical map gives an
 adequate fit. This is what the program fits in its automatic mode.
  
3 Method
  
 The user inputs in the image which the stars are in, and a table
 of (X,Y) star positions. The program takes a small area  round each
 of those stars, and fits the data in the boxes with a  sloping sky
 and a star profile. The sky and the profile are adjusted until there
 is a good fit. The parameters of the profiles for each of the stars
 are then averaged together to make a mean profile.
  
 At first, only the Lorentz part of the profile is used. Then, if it
 is necessary, the empirical map of any remaining residuals may be
 fitted, and then, for the rare occassions when suitable, the wide
 Gaussian wing can be fitted.
  
 The resultant profile is then stored in a file (as an image with
 the profile parameters as descriptors). This profile can then be used
 as the input to MEASURE, ADDSTARS, or INTERACT.
  
 The program works by first asking you for the input image and the
 table of star positions. It then goes either into the `automatic' mode,
 or into the `interactive' mode.
  
4 Automatic_mode
  
 The program goes through these steps:-
  
  1) Lists the input stars and default profile.
  
  2) Asks for any table of companions to stars or bad areas near them.
     In you wish to input such a table, look for further help in
     the `Inputs' section.
  
  3) Asks for any shift to be applied to all the X,Y coordinates.
  
  4) Gets positions and very rough profiles.
  
  5) Determines the size of the `box' around each star to do the
     fits in.
  
  6) Fits each star in full detail.
  
  7) Calculates the mean profile, by rejecting discordant stars, and
     taking the means of the parameters of the profile.
  
  8) Recalculate fits with mean profile.
  
  9) Calculate the residuals for each star from the fits.
  
 10) Use residuals to make profile map.
  
 11) Store profile (with its empirical map).
  
 12) Optionally, store table of fitted stars.
  
 13) Optionally, store any table of fitted companion stars and bad areas.
  
  
4 Interactive_mode
  
 The program loops round, offering the repeated option
 of performing functions. One can leave the `Main' section and
 go into subsidary sections -- this is indeed needed for removing
 stars and bad areas near to the target stars, for making the
 empirical map, and for making the Gaussian wing.
  
 There are many other operations that can be done here.
  
 For further information, see the `Run_through', `Use', `Tips',
 `Options',  and `Fitting_details', sections.
  
3 Run-through
  
 This section describes the interactive use of Profile, with its
 (nearly) infinite number of ways of using it. To give you some ides of
 its use, the following `run-through' of one possible session is given.
  
 [For the `automatic' mode, see the `Method' section.]
  
 This run-through does not deal with the major features:- rejection of
 companion stars; rejection of bad areas; fitting the empirical map.
 There are also many minor features that are not explored.
  
 Explanations and commentary associated with each annotation are
 given afterwards. The parts in san serif are abbreviated versions of
 typed output or are comments on the display. The parts in italics are
 instructions to you.
  
 It is assumed the user is at a colour X-windows display.
  
  Text in square brackets `[]' are comments on output and display
  Text in curly brackets `{}' are instructions to the user.
  
    RUN-THROUGH:-
  
 > profile                                                     1
 IN - Input image name /!/ > $STARMAN_DATA/profile_in          2
 INSTARS - Input star list (posns,details) name /!/ >
                              \$STARMAN_DATA/profile_instar    3
       [Star list typed out with default profile]
 USE - Do automatic /interact (auto:inter)? /'inter'/ >        4
       [Information on how to use typed out]
 OPTION - Which option to perform? /'fit_rough'/ >             5
       [Information on rough fits typed out]
 OPTION - Which option to perform? /'box_size'/ >              6
    Old X Y sides of box 20 20
    Suggested X Y sides of box 22 20
 SIZE - XY Lengths of sides of box /[22,20]/ >                 7
    Old X Y sides of Profile Map 20 20
    Suggested X Y sides of Profile Map 20 20
 SIZE - XY Lengths of sides of box /[22,20]/ >                 8
    Residuals zeroed
  
    You may also wish to change the size of the box
    for the profile map to match the measuring box
    Old X Y sides of Profile Map   20   20
    Suggested new sides of Profile Map    22   20
 SIZE - XY Lengths of sides of box /[22,20]/ >                 9
    Profile Map copied to new Map
 OPTION - Which option to perform? /'fit_all'/ >              10
 FITTYPE - Start values, fix:float -- fit type? /'old'/ >     11
    Box  X length =   22  Y length =   20                     12
    No  Height Its Rmaj  Rmin  P     PRmaj PRmin Theta
     1  8978.2  8  2.151 1.855 2.199 10.00 17.80 26.21
     2  3237.4 11  2.124 1.873 2.011 5.92  6.23  17.80
     3  6114.1 17  2.223 1.893 2.320 7.56  18.47 20.31
     4 31302.2  6  2.464 2.215 2.224 9.98  10.36 80.69
 OPTION - Which option to perform? /'disp_fit_all'/ >         13
 SCREEN - XY size of window to open for display /[420,496]/ > 14
    [The raw and cleaned areas round each star are displayed]
 OPTION - Which option to perform? /'panel'/ >                15
    [The `push-buttons' and `help' are displayed]
    {Click cursor on `mean' button in `Profile' section}      16
    [Information on mean typed out]
 FLIP - Star number to flip angle (0=none;- = flip -ve) /0/ > 17
    Reject or accept nth star (n,-n,0) ?
 REJECT - Star number to not use (0=none;- = accept) /0/ >    18
    Had to zero residuals - profile changed
    Present box size =   22  20
    Suggested new box size =   21  22
    {Click cursor on `res_calc' button in                     19
     `Residuals' section}
    {Click cursor on `res_interact' button in                 20
     `Residuals' section}
    {Click cursor on `clear' button in                        21
     `Display' section}
    {Click cursor on `display' button in                      22
     `Display' section}
    {Click cursor on `fill' button in                         23
     `Load' section}
    {Click cursor on `smooth' button in                       24
     `Smooth' section}
 SMSIZE - XY size of smoothing box /[3,3]/ >                  25
    {Click cursor on `return' button in                       26
     `Control' section}
    {Click cursor on `map_add' button in                      27
     `Map' section
    {Click cursor on `store' button in                        28
     `Files' section
    Image to put profile parameters into
 OUT - Output file for profile (an image) /!/ > fred          29
 TITLE - Text to add to file /'Profile from PROFILE'/ >       30
    File to put stars details into
 OUTSTARS - Output file for details of fit stars /!/ >        31
    {Click cursor on `exit' button in                         32
     `Control' section}
    !! Null NDF structure specified for the `OUTSTARS'        33
    parameter.
 >                                                            34
  
  
 Comments on above run-through:-
  
  
  1) Start the program.
  
  2) The input image.
  
  3) The input table of a list of four star positions.
  
  4) We want to use the interactive mode.
  
  5) We have now entered the looping part of the program. We are at
     present in the `Main' section. For the first few questions the
     program offers suggestions and we accept them. Later on we go into
     the `panel' mode to choose options. Here we are offered the default
     of making a rough fit to the stars. (This gives us a check on
     their quality). We accept this choice.
  
  6) We are offered the default of changing the size of the box
     round each star which is used in the fitting. We accept this choice.
  
  7) We set the size of the box to be fitted round each star.
  
  8) We set the size of the empirical map of the profile.
  
  9) We reset the size of the empirical map of the profile.
  
 10) We fit the Lorentz analytical profile for each star.
  
 11) We choose as the starting values of the parameters, the last
     values they had.
  
 12) The program types out the results of the fits as it goes
     along.
  
 13) We want to look at the data. We will see the original areas
     and the areas after the central star has been removed with the
     parameters of its own fit. If the fit is good, the star should
     have disappeared cleanly.
  
 14) The program wants to know how large a window to open. We take the
     suggested size.
  
 15) The program suggest entering the `push-button' mode of option
     choosing. We take the suggestion.
  
 16) We like the fits, so we make a mean fit.
  
 17) We do not see any orientations of the fitted elliptical profiles
     that have to be flipped by 180 degrees.
  
 18) We do not see any stars that have to be rejected.
  
 19) We now want to look at the average of the residuals from the
     mean profile. So we calculate them.
  
 20) We now go into the group of options for dealing with the
     residuals.
  
 21) We clear the screen.
  
 22) We display the residuals. On the left are the rsiduals. On the
     right is the `fill-factor' map. This shows not the pixels, but the
     sub-pixels.
  
     As the pixels are sub-divided, not all the sub-divisions have to
     have a residual. The `fill-factor' map shows the sub-pixels which
     have at least one residual, and which have none.
  
     If we had more stars, then probably their random off-pixel centre
     centres would rsult in a full coverage of the sub-pixel plane, but
     that is not the case now.
  
 23) As some sub-pixels are empty, we `fill' them by interpolation.
  
 24) We smooth the residuals.
  
 25) We take the suggested size of the `top-hat' box to smooth with.
  
 26) We are happy with this, and do not wish to zero any part of it.
     (In practice, we would avoid some of these.) So we return to
     the `main' group of options.
  
 27) We load the `residuals' into the `empirical map'
  
 28) We now have the Lorentz analytical parameters, and the empirical
     map. We decide we do not want to look at any wide Gaussian wings,
     and we know that they were set to zero on starting the program.
     So we now wish to store the profile to a file.
  
 29) We call the file `fred'.
  
 30) We accept the suggested title for the file.
  
 31) We enter a `null' response to the request for a file to put
     the details of the fits for the stars. So these are not stored.
  
 32) We decide to exit the program.
  
 33) The program insists on telling us that we put a `null' name
     when asked for the `OUTSTARS' parameter. This does no harm.
  
 34) The program returns us to the command line.
  
3 Use
  
  WARNING -- Use only bright stars as the fit will blow up and/or give
  a poor fit if used on noisy data.
  
   An explanation of the use of the program
   ----------------------------------------
  
 1 INPUT OF IMAGE AND LIST OF POSITIONS OF STARS TO DEFINE THE PROFILE
  
   The image and a table of positions of the stars are fed in by you.
   It is recommended that the stars should be as isolated as possible,
   bright, but not so bright that their peaks are saturated. About 5
   to 10 stars are enough.
  
   After this stage, you then enter the interactive part of the program.
   A recommended course of action is to do the following (and then
   repeat as needed some stages):-
  
 2 FIRST ROUGH PROFILE DERIVATION
  
   You can use the `rough' option to make a rough profile estimate.
   Other options are:- If you do know the rough stellar radius, input
   it. If you don't, then choose a good (isolated) star, and make a
   fit on that, and make the mean (of one!). If you don't know which
   are the good stars, display them and look.
  
 3 ROUGH BOX SIZE
  
   You can now set the fitting box size roughly right. In the course of
   the program, each time you calculate the Mean profile, the proper
   fitting box size is recalculated. If it differs from the size, you
   are using, then it is advisable to change to the recommended size
   and redo the fits.
  
 4 FITTING OF THE LORENTZIAN AND CALCULATION OF MEAN
  
   Then fit a Lorentzian at each star. The program types out the fits.
   You can display the fits and look at them, then estimate the mean
   profile, rejecting bad fits.
  
 5 DEALING WITH COMPANIONS, FAINT COMPANIONS,AND BAD AREAS
  
   You can then look at the stars and see if there are companions that
   need dealing with or if there are bad areas. These things are dealt
   with in three stages :-
  
   i)   Faint companions on the wings of the main star. These are
        iteratively subtracted during the fitting process. Thus they are
        allowed for, but do not really define the profile. Their posit-
        ions are fed in by lists or by your using the cursor to point
        them out.
  
   ii)  Bright companions or companions close to the main star. These
        are fitted in the same process as the main star. Thus they are
        fully used to define the profile, along with the target star.
        Their positions are fed in by lists or by your using the
        cursor to point them out.
  
   iii) Bad areas. These are ignored during the fit. Their
        positions are fed in by lists or by your using the cursor to
        point them out.
  
   In this stage, the area displayed round each star is roughly twice
   the linear size of the area actually used in the fit, so you need not
   worry about bad areas or faint stars near the edge, but stars whose
   profiles get near the central region should be marked.
   You can also mark and remove mistaken points using the cursor in the
   same way.
  
   You can then re-estimate the fit.
  
 6 MAKING THE EMPIRICAL PROFILE MAP
  
   If on inspection of the fits, you have a suspicion there is a system-
   atic pattern to the residuals, you can confirm this by making a map
   of the mean residuals. If on smoothing (or not) you remain convinced
   then the empirical profile map can be loaded from this residual map.
   At this stage it is best to go back and refit the Lorentz, to see if
   the residuals map has really gone away, as it should.
  
   If no pronounced pattern  can be seen it is safest  not to make these
   residuals, or if made, not to copy them over to the profile map. To
   do otherwise is merely to introduce noise.
  
   It is also wise only to make the profile map where there is good
   signal to noise (usally at the centre of the image). Set the profile
   map to zero in the middle and outer regions where it is just sky
   noise.
  
 7 FITTING THE MODIFIED GAUSSIAN WINGS
  
   If on inspection of the fits, you have a suspicion there is a system-
   atic tendency for the profiles to have wide unfitted wings, then you
   can fit the wide low modified Gaussian wings of the profile. This is
   done by the program taking the current mean Lorentz/empirical fit,
   and fitting it to the accepted stars out to a distance of twice the
   box size previously used. You may have to add more companion stars
   and/or bad areas for the larger boxes.
  
   The mean radial plot and radial fit around the star centre is then
   shown. You can then refine this by using the cursor to define a fid-
   ucial set of points giving the proper profile as you see it, and the
   program will fit to them, rather than the data points.
  
   At this stage, it may be necessary to refit the empirical map.
  
   It is important to note that if no definite trend in the residuals
   can be seen, or it looks as though the wings are so wide that they
   do not go to zero within the plot, it is best to set the wings to
   zero. This avoids bright stars producing unrealistic wide wings in
   MEASURE (qv).
  
 8 INVALID PIXELS
  
   If any of the pixels used are flagged as INVALID, they are ignored.
  
 9 STORAGE OF THE RESULTS
  
   The profile is stored as an image containing the empirical map with
   the profile parameters as descriptors. The information of the fits
   to the stars and of the companions and bad areas is also stored in
   tables.
  
  
3 Tips
  
   Getting a good fit is still an art, although I am working on
   making it a science, so it can be automated. But for now you
   will have to suck it and see. It is a good idea to play around
   for a while, trying the effects of various things on the fit
   and displaying the fit residuals ( not the residuals map ).
  
   Various points:-
  
   Use bright stars (ESPECIALLY if making a profile map).
  
   Repeat the fit using `old' in the `fittype' parameter in
   the `fit_all' option, to see if the fit has converged.
   This can be checked that only a few iterations are done.
   (not the 30 allowed).
  
   The fit carries on till none of the parameters are changing
   fractionally by more than 0.001. This can be changed with the
   `controls_fit' option - both for the normal fits and the wing fits.
   This also enables you to change the damping factor to speed up
   the fits, AT THE COST OF A RISK of edging AWAY from the right
   answer, rather than towards it.
  
   Choose which stars you are going to use by the rejection in
   the `mean' and `reject' options.
  
   It is often good to fix the angle once you have some idea what
   it is.
  
   After you have decided on a fit, run the `fit_all' option
   with `fixmean' for the `fittype' parameter in the `fit_all'
   option, and look at the results with the `disp_fit_all'
   option. Are you still happy?
  
   Remember, if you have rejected some stars, and then do the
   `fit_all' and `disp_fit_all' options, the display for the stars
   not done shows the old fits.
  
3 The_Options
  
 In the interactive mode, the program works in an `option' mode, where
 you repeatedly select operations to do, until you are satisfied.
  
 On starting the program, you first have to input the image and
 the table of star positions. Then you are asked whether to proceed
 in the `automatic' or `interactive' modes.
  
 Automatic mode:-
  
 If you select the `automatic' mode, no further input is needed,
 apart from the names of the file to put the output into.
  
 Interactive mode:-
  
 You now have the `main' list of options available to you. The program
 suggests the first five selections, and then suggests going into to
 the `panel' mode, where the options are available as buttons in a
 `panel' window in the display.
  
 You can now select any sequence of otpions to determine the mean
 profile in the best way from the actual image you are working on.
  
 From this `main' group four other groups of options are available:_
  
 Group     Panel Button   Type of options available
               to press
   -----     ------------   -------------------------
   main        -            Main options
   fit       interact_fit   Interaction with display of
                            the fits
   map       map_interact   Interaction with display of
                            the profile map
   residual  res_interact   Interaction with display of
                            the residuals to mean fit
   wing      wing           Calculation of wide Gaussian wing
  
  
4 Main_options
  
 Option          Function
 ------          --------
 angle           Change Fix/Vary angle and/or angle
 box_size        Change size of box round stars used for fitting
 clear           Clear the display window
 close           Close the display screen
 comp_zero       Delete all comp/faint comp/bad area list entries
 controls_fit    Change internal controls of fit calculating
 disp_fit_all    Display the areas + residuals to the fits
 disp_fit_one    Display the areas + residuals to a single fit
 display         Display image
 exit            Exit from this program
 fit_all         Fit all the accepted stars
 fit_changed     Fit only stars with changed circumstances
 fit_one         Fit a certain star
 fit_rough       Make rough estimate of posns, heights, radii
 fit_trial       Calculate the mean profile from one star
 fix_set_xy      Set fixed/varying positions and/or the posns
 flip            Rotate profile ellipse of stars by 180 degrees
 info_fits       List the present fits
 info_fitting    Type intermediate step results in the fitting
 info_star       List the fit, comps, bads of a star
 interact_fit    Interact with the display of fits
 map_add         Add the Residuals array onto the Profile Map
 map_disp        Display the profile map
 map_interact    Interact with the display of Profile Map
 map_scale       Change Profile Map scale (mult/div its values)
 map_size        Change Profile Map size
 map_use         Change whether to apply the Profile Map or not
 map_zero        Zero the Profile Map
 mean            Decide which stars to use; find mean weighted profile
 new_cm_pr       Load some previous stuff (Comps, Bad areas, Fit)
 new_image       Input new image to replace the present one
 new_stars       Input list of star posns to replace present ones
 panel           Switch between panel and keyboard option selection
 prof_change     Change the mean profile parameters
 prof_fix        Change fixed/variable control on profile params
 radial_plot     Put a radial plot of profile and fit into file
 reject          Change which stars are accepted/rejected
 res_calc        Calculate the array of residuals
 res_disp        Display the mean fit residuals array
 res_fill        Fill any -empty- pixels in the residuals array
 res_interact    Interact with the display of residuals array
 shift_all       Shift XY positions of all the stars and comps
 show_reject     Put red border for rejected stars on display
 store           Save the profile and fits
 volume          Calculate the profile volume
 wing            Fit a broad Gaussian wing - zero broad wing start
  
  
 The `shift_all' option shifts the X,Y positions of all the stars
 and companions and faint companions. It leaves the bad areas unmoved.
 This enables you to use the lists from one exposure on another where
 the field centre is different, but where the detector bad areas are
 at the same positions.
  
 Further information on these options is given in the six line help
 window that appears in the `panel' mode, and contains relevant help
 when the cursor is placed on a button.
  
4 Fit_options
  
 These options enable you to pan and zoom the display of
 the stars and the residuals of the fits. You can also insert
 and remove companion stars, faint companions, and bad areas;
 get the values in the images or residuals; remove/replace the
 coloured lines.
  
 Option          Function
 ------          --------
 blank           Remove an area from the calculations
 box             Paint fitting box when displaying fits
 clear           Clear the display window
 close           Close the display screen
 comp_br         Add a bright or close companion
 comp_fa         Add a faint or distant companion
 disp_all        Display the areas + residuals to the fits
 disp_one        Display the areas + residuals to a single fit
 im_values       Type values in main image in cursor given area
 info_star       List the fit, comps, bads of a star
 paint_box       Paint up fitting boxes
 paint_comp      Paint up companions and bad areas
 posntype        Change posn markers between spot and crosses
 res_values      Type out residual values in cursor defined area
 reset           Reset zoom/pan to unity and centre
 return          Return to main program option list
 shift           Reposition a main star
 unblank         Restore an area to the calculations
 uncomp_br       Remove a bright or close companion
 uncomp_fa       Remove a faint or distant companion
 zoom            Zoom and pan image by using mouse location
  
  
 Buttons for Zoom work:  Button 1 twice        = zoom /2
                         Button 2 twice        = zoom x2
                         Button 1 and Button 2 = pan
                         Button 3 twice        = exit
  
  
 Further information on these options is given in the six line help
 window that appears in the `panel' mode, and contains relevant help
 when the cursor is placed on a button.
  
4 Map_options
  
 These options enable you to look at the profile map closely and to
 change it to some extent.
  
 Option          Function
 ------          --------
 clear           Clear the display window
 display         Display the profile empirical map array
 original        Load map as before entering this MAP option
 reset           Reset zoom/pan to unity and centre
 return          Return to main OPTION choice
 smooth          Smooth profile map by >top hat> NxM box
 spolyin         Define a polygon with cursor, smooth area inside
 spolyout        Define a polygon with cursor, smooth area outside
 values          Type out values for an area of the profile map
 zero            Zero all profile map
 zoom            Zoom and pan image by using mouse location
 zpolyin         Define a polygon with cursor, zero area inside
 zpolyout        Define a polygon with cursor, zero area outside
 zrect           Define a rectangle with cursor, zero area inside
  
  
 When defining the polygons, you use the cursor and the
 buttons. Place the cursor at consecutive vertices of the
 desired polygon, and press any button. To end the input of
 vertices, do a repeat press, without moving the cursor, on
 the last vertex. A line showing where the polygon lies is
 output whilst you are doing this.
  
 Further information on these options is given in the six line help
 window that appears in the `panel' mode, and contains relevant help
 when the cursor is placed on a button.
  
4 Residual_options
  
 These options enable you to look at the residuals map
 closely and to change it to some extent.
  
 Option          Function
 ------          --------
 calculate       Calculate the array of residuals
 clear           Clear the display window
 display         Display the mean fit residuals array
 fill            Fill any -empty- pixels in the residuals array
 original        Load original values from last fit calculations
 reset           Reset zoom/pan to unity and centre
 return          Return to main OPTION choice
 smooth          Smooth profile map by >top hat> NxM box
 spolyin         Define a polygon with cursor, smooth area inside
 spolyout        Define a polygon with cursor, smooth area outside
 values          Type out values for an area of the residual array
 zero            Zero all residual array
 zoom            Zoom and pan image by using mouse location
 zpolyin         Define a polygon with cursor, zero area inside
  
  
 When defining the polygons, you use the cursor and the
 buttons. Place the cursor at consecutive vertices of the
 desired polygon, and press any button. To end the input of
 vertices, do a repeat press, without moving the cursor, on
 the last vertex. A line showing where the polygon lies is
 output whilst you are doing this.
  
 Further information on these options is given in the six line help
 window that appears in the `panel' mode, and contains relevant help
 when the cursor is placed on a button.
  
4 Wing_options
  
 These options enable you to estimate the parameters of the wide
 Gaussian wing:-
  
 The `wing' options fits a low wide Gaussian wings to the profile.
  
 The program sums up all the accepted stars, subtracts the fitted fixed
 Lorentzian profiles, folds the data round the centre and fits the
 modified Gaussian. The program then plots
 the data and draws the Gaussian it has fitted. If you have
 chosen an interactive terminal, you can then modify the fit by marking
 (via the cursor) points which you think best show the actual profile
 and the program then fits the Gaussian to these points and draws the
 fitted curve on the device. You can then redefine a new set of points
 as often as you like until you are satisfied with the fit.
  
  You can:-
  
   -  Look at a larger area round each star to see if there are areas
      to be blanked off, or stars to be marked so that the fits can
      be redone.
   -  Fit the stars. This does a fit, and calculates the residual
      radial distribution of data that is left.
   -  Look at the 1-D distribution of residual data on a graph,
      and if it looks corrupted input your own residual distribution.
   -  Fit the wing profile parameters to the 1-D residual profile,
      either by fitting to calculated points, or fitting to the
      hand input points.
   -  Look at the wing profile parameter fit to the 1-D distribution.
   -  Put in your own estimates of the wing profile parameters, and
      say if they should be fixed or not.
  
 The point about the option for hand inputting is that sometimes
 the raw points are disturbed by miscellaneous things in the large
 areas used in determining the wing profile. You can thus use
 some judgement and put the radial distribution where you think it
 should be.
  
 In putting your own set of points of the radial distribution, be sure
 to put in enough that the fit can make a good fit to them.
  
   A normal course might be to:-
  
      -Display-      Display the x2 areas round the stars
      -Interact-     Blank off or mark up the extra stars in
                     the large wing areas
      -Fit_stars-    Fit the stars in the large wing area and calc
                     the distribution of wing data points
      -Gplot         Look at the wing data points
      -Gcursor       Put your own smoothly distributed wing data
                     points by using the graphics cursor
      -Fit_gcursor   Fit the wing parameters to your cursor input
  
   After this you can loop round changing the cursor positions
   and/or refining the fit. The fit is usally very delicate
   and it is common to adjust the profile parameters by hand
   before a number of fits to get a good fit
  
    Then:-
  
        -Return-    back to the main option
  
  
 Option          Function
 ------          --------
 display         Display the areas + residuals to the fits
 fit_gcursor     Fit to wing points input by cursor
 fit_graw        Fit to raw wing points as calculated
 fit_stars       Fit stars in the large areas round each star
 gclose          Close the graphics device
 gcursor         Put -better- wing points in by cursor
 gplot           Plot the wing points graphically
 gshowfit        Plot fitted line
 interact        Interact with the display of fits
 return          Return to main option
 set_param       Insert your own wing profile values
 type_Param      Type present wing parameters
  
  
 Further information on these options is given in the six line help
 window that appears in the `panel' mode, and contains relevant help
 when the cursor is placed on a button.
  
3 Fitting_details
  
 The elliptical rotated Lorentz profile that is fitted is one that has
 been found to give a good fit to typical star images.
  
 The actual fitting of a star in an image is a scaled (according to the
 height of the star) version of this total profile, added onto a
 linear sloping sky background. The fitting for the background is done
 at the same time as the fitting for the star.
  
 The fitting is done by starting with trial values of the star heights
 and positions and of the background, and then improving these by the
 iterative linearised least squares method until an acceptable fit is
 made, or until too many iterations have been done.
  
 Features of the fit are:-
  
  1) It can deal with close companions. You have to tell it where
     these stars are.
  
  2) It can deal with areas of `bad' pixels, in that such areas are
     ignored in the fits. Again you have to define these areas. (Such
     pixels can also be so flagged before entering the program - see
     other Starman programs for the method of flagging invalid
     pixels.)
  
 The fitting takes account of pixel averaging, that is what happens
 when the star radius gets small, and there is significant change in
 the profile across one pixel. As the profile is not a straight line,
 the normal practice of taking the profile value at the centre of the
 pixel will be wrong. The program subdivides the profile over the
 pixel and calculates a more accurate average. So the bad effects of
 a narrow profile and star centres being at different distances from
 the pixel sides are minimised.
  
 The `volume' of this profile, that is the numerical integration under
 the 2-D profile out to a defined distance, can be calculated. (The
 calculation is done with a fine mesh, so there is no effect from the
 pixel averaging for small radii.) This enables the magnitudes of
 stars with different profiles to be estimated.
  
 At the program start, the values of the profile parameters are:-
      RX=2.0, RY=2.0, P=2.2, PRX=10.0, PRY=10.0, THETA=0.0
      QH=0.0, QR=10.0, QP=2.0
  
 A note for people looking inside the program source:-
  
 Inside the program, the parameters have slightly different names,
  
 Here     RX    RY     P     PRX    PRY   THETA
 Inside  Rmaj  Rmin  Power  PRmaj  PRmin  Angle
  
 Here        QH           QR            QP
 Inside  Wing Height  Wing Radius   Wing Power
  
  
3 Profile_details
  
 The profile that is fitted is one that has been found to give a good fit
 to typical star images. It is an elliptical rotated Lorentzian sitting
 on top of a wide low circular modified Gaussian, with an empirical
 residuals map. The actual fitting is a scaling of this profile, added
 onto a linear sloping background, which is fitted at the same time as
 the star.
  
 The mathematical expression of this is:-
  
              -                                     -
             l                          PQ           l
             l        1              -dq             l
 I(x,y) =  H.l  -------------  +  HQ.e     + F(x,y)  l
             l        P(1+d2)                        l
             l  1 + d1                               l
              -                                     -
  
           +  A  +  B.x  +  C.y
  
  where   I(x,y) = the value of the star profile at pixel position x,y
  
          H      = the star peak Lorentz height (Gaussian and map
                   are an added fraction)
  
         x0, y0  = the star centre position
  
         A, B, C = the sloping background
  
 The Lorentz profile:-
  
   d1 = sqrt( (x1/Rmaj)**2 + (y1/Rmin)**2) )
   d2 = sqrt( (x1/RPmaj)**2 + (y1/RPmin)**2) )
  
   x1 = (x-x0).cos(theta) + (y-y0).sin(theta)
   y1 = -(x-x0).sin(theta) + (y-y0).cos(theta)
  
   Rmaj and Rmin are the major and minor axes of the ellipse
   which is rotated at theta degrees to the X axis. (Rmaj and Rmin
   are often referred to in the code as RX and RY.)
  
   P is often about 2.2; the RPs are usually about 6*(the Rs)
  
 The circular modified Gaussian profile:-
  
   dq = sqrt((x-X0)**2+(y-Y0)**2)/RQ
  
   RQ is the radius, and PQ is the power of the modified Gaussian. HQ is
   the fraction of the main Lorentz profile peak that the Gaussian has.
   (HQ, RQ and PQ are often referred to in the code as QH, QR and QR.)
  
   HQ is often zero, and is always small, of the order of 0.01;
   RQ is usually greater than 5*(the Rs);
   PQ is often about 2.
  
 The empirical map:-
  
   F is an empirical function, the `Profile Map'. This is expressed in
   terms of a fraction of the main Lorentz profile. The map is
   sampled on a grid which can be finer than the pixel
   grid. The grid has a spacing of int((1 + 2.9/min(Rmaj,Rmin)))
   times finer than the pixel grid. Thus the empirical
   function is sampled at spacings better than the Nyquist frequency.
   Unless the star is distorted, the values in this map are zero, and
   even if the star is distorted, they are usually very
   small, with peak values less than 1 percent of the
   main profile. The map is not an empirical representation of the image
   residuals from the analytical profile, but of those residuals averaged
   over the pixels.
  
   Thus depending on the pixel size relative to the star radius, the map
   values will change, unlike the analytical profile parameters.
  
 Pixel undersampling:-
  
   In profiles where the radius is less than 3 pixels, full account
   is taken of the pixel undersampling in the analytical part and (where
   used) in the empirical part.
  
 Position, height and background:-
  
   The parameters X0,Y0,A,B,C, and D are not parts of the profile, as
   they can be different for each star.
  
4 Nomencluture
  
    Word              Meaning
    ----              -------
   The profile     Usally the nine profile parameters and the profile
                   map. Sometimes just the nine parameters.
   Residuals map   The map of differences of the data from the fits
                   using the mean profile at the time the `res_calc'
                   option was run.
   Profile Map     The empirical array,  F(x,y), described in the
                   method section. This can only be loaded by
                   adding in a processed residuals map.
  
3 Input_files
  
 The input is done by files containing images and tables.
  
 These are described in the parameter lists.
  
  Parameter   Contents
  ---------   --------
  
  IN          Input image
  
  INSTARS     Input table of star positions
  
  INCOMPS     Input table of companion stars and bad areas (optional)
  
  INPROF      Input profile (optional - for use as default start)
  
3 Output_files
  
 The output is done by files containing images and tables.
  
 These are described in the parameter lists.
  
  Parameter   Contents
  ---------   --------
  
  OUT         Output profile (stored as image)
  
  OUTSTARS    Output table of fitted stars (optional)
  
  OUTCOMPS    Output table of companion stars and bad areas (optional)
  
  OUTRADIAL   Output table of wing fit and its residuals (optional)
  
  
3 Display
  
  In the interactive mode, you can display on an image display the
  three types of data the program deals with. You are in fact encouraged
  to do so, so as to understand the profile.
  
  In each case you can inspect and interact with the data displayed.
  
  Types of data      Description
  -------------      -----------
  Fits              Display of a) the image round each star
                               b) the image minus the stars fitted
  Residuals         Display of a) the residuals to the mean fit
                               b) the filling of the residuals array
  Profile map       Display of the profile map array
  
  A fuller description of the types of data is given in the `Data'
  help at this help level.
  
4 Fits_display
  
  When the fits are displayed on the image display, the display
  consists of two parts. The top half contains the actual pictures round
  each target star. The bottom half contains the residuals when the fits
  are subtracted from the actual image.
  
  The displayed boxes have sides that are twice the actual fitting
  boxes. (The edges of the fitting boxes are indicated by the purple
  dots at the sides of the displays.) The reason for this is to help
  you in marking the positions of stars just outside the fitting boxes
  which are bright enough that they affect the data inside the fitting
  boxes.
  
  The intensity scaling in the top half is uniform. In the bottom half,
  each box has its own scaling to bring up the residuals as well as
  possible. An idea of the relative scaling may be gained by looking at
  the intensity variations in the sky background.
  
  You can inspect and interact with this data (see the OPTION
  parameter).
  
4 Residuals_display
  
  When the residuals are displayed, there is also shown the filling map
  of the residuals. This filling map shows which pixels in the
  residuals array actually have data.
  
  The residuals are displayed at the right size. The intensity scaling
  is such as to show the residuals up as much as possible.
  
  The residuals map covers the same number of image pixels as the
  fitting box. But the residuals map may well contain more pixels, and
  thus be `larger', by an integral number factor, than the fitting box.
  This happens when the profile is so small that pixel averaging
  becomes important. In this case the residuals map is subdived, with
  each pixel becoming a nxn box (where n=1+int[2.9/(min radius)] ).
  
  Then for each star, the residual from the profile at each pixel is
  calculated and stored in the nearest subdivision. For example, if a
  star with radius 1.5 had its centre at [100.2,100.8], the residual of
  pixel [105,105] at distance (4.8,4.2), would be stored at the (1,3)
  subdivision of the (4,4) pixel.
  
  Alongside the residuals, in a red box, are displayed the
  filling factors, that is, which pixels (shown as white) have data,
  and those that do not (shown as black).
  
  You can inspect and interact with this data (see the ROPTION
  parameter).
  
4 Profile_map_display
  
  The display of the profile map shows the current state of the
  profile map.
  
  This is much like the residuals map, except that there is no filling
  factor display, as the profile map can only be filled from a full
  residuals map (one either naturally full, or smoothed full, or boxed
  or polygoned so, or zeroed so).
  
  You can inspect and interact with this data (see the OPTION
  parameter).
  
  The profile map does not have to be the same size as the fitting
  area.
  
  Its size is the number of pixels of the image that the profile map
  covers. This can be different than the computer storage size and the
  size of the profile file image, since the profile map may map to
  sub-divided image pixels, and thus contain more data points.
  
3 Panel
  
 In the menu-driven mode of this program, there is the capability
 to interact with this menu in a `windows' type mode. If you choose
 the `Panel' option in the `Option' choice, then if you have an
 X-window device a small panel appears on the screen. This has what look
 like buttons with all the available options. You select these by
 putting a cursor on the `button' and then pressing a cursor button.
  
 The panel has a `help' button which lists out one line
 descriptions of the options. It also has a `command' button which
 gives you access to no useful command in itself, but you can
 then enter the full program help system.
  
3 Cursor
  
 In the interactive mode, a cursor is used to pick up positions, change
 the zoom, and other miscellaneous purposes.
  
 The mouse moves the cursor. It is assumed that a 3 button
 mouse is used. The mouse buttons are worked like this:-
  
   General position marking   Press any button
  
   Zoom work:                 Button 1 twice        = zoom /2
                              Button 2 twice        = zoom x2
                              Button 1 and Button 2 = pan
                              Button 3 twice        = exit
  
  If the cursor is outside a displayed area, often pressing the button
  will result in no actions.
  
  
3 Graphics
  
  Graphics are done under the control of the Starlink
  use of `GKS'. This opens a separate graphical window. This window
  can only be removed outside the program by use of the `xdestroy'
  program.
  
  
3 Parameters
  
4 Angle
 (Default - the present calculated value        Range -90.0 to 90.0)
  
 Input the angle, in degrees, of the major axis of the profile,
 anti-clockwise from +ve X direction.
  
 At the program start, the value is 0.0
  
 The first use is to change if needed the angle found by the
 preliminary fit. Thereafter it is used only if the angle is to be
 fixed.
  
 By inputting a suitable angle, you can speed the fit up, as it starts
 from a value near its proper one. Also if you have said, via the
 `FIXANGLE' parameter in the `angle' option, that the want the angle
 fixed, then you need to say what you want it fixed at. Then both the
 fit will go faster, and the angle will stay at a good value.
  
 This should be used in practice if you:-
  
    - want to start the fit near the proper angle.
    - are sure of the angle.
    - are sure the stars are round (in which case set the angle to
      zero).
    - want to speed the fit up and do not care what the angle is.
  
4 Base
  (Default - present value    Range - -1.0e10 to 1.0e10)
  
  The value of the base level that underlies the Gaussian wing fit.
  Sometimes the fit does not do a very good fit to the base, and
  this enables you to set (and perhaps fix with the `set_param' option
  in the `wing' options) this base level.
  
4 Cwidth
  (Default  - present value          Range - 1.0 to 1.0e10)
  
  The width in pixels of the crosses to be painted up to mark the
  positions of the stars. The starting value is 3 pixels.
  
4 Damp
  (Default - present value.    Range - 0.0 to 100.)
  
  The damping factor in the fitting least squares method, whilst
  doing the main Lorentz profile fitting.
  
  This controls the spize of the adjustments in the fitting. The
  smaller the number, the less the internal damping, and so the
  bigger the steps, the faster the fitting, and also the risk of
  shooting out of the best `least squares' path and so mis-fitting.
  In general, values are such that:-
  
        0.0 = no damping, 0.5 = normal, 1.0 = a lot of damping.
  
4 Doption
  (Default - last choice    Choices - see below)
  
 Which of the following options, to do with looking at the fits
 and modifying them, do you want to do?
  
 This is the interaction with the display of the raw images round
 each star and those images after the fit made has been subtracted
 from the image.
  
 Enables you to pan and zoom at the display of the stars and the
 residuals of the fits. You can also insert and remove companion
 stars, faint companions, and bad areas; get the values in the
 images or residuals; remove/replace the coloured lines; display
 star positions as spots or crosses.
  
  
 Option          Function
 ------          --------
 blank           Remove an area from the calculations
 box             Paint fitting box when displaying fits
 clear           Clear the display window
 close           Close the display screen
 comp_br         Add a bright or close companion
 comp_fa         Add a faint or distant companion
 disp_all        Display the areas + residuals to the fits
 disp_one        Display the areas + residuals to a single fit
 im_values       Type values in main image in cursor given area
 info_star       List the fit, comps, bads of a star
 paint_box       Paint up fitting boxes
 paint_comp      Paint up companions and bad areas
 posntype        Change posn markers between spot and crosses
 res_values      Type out residual values in cursor defined area
 reset           Reset zoom/pan to unity and centre
 return          Return to main program option list
 shift           Reposition a main star
 unblank         Restore an area to the calculations
 uncomp_br       Remove a bright or close companion
 uncomp_fa       Remove a faint or distant companion
 zoom            Zoom and pan image by using mouse location
  
  
 Buttons for Zoom work:  Button 1 twice        = zoom /2
                         Button 2 twice        = zoom x2
                         Button 1 and Button 2 = pan
                         Button 3 twice        = exit
  
4 Fitlim
  (Default - present value     Range - 0.0 to 100.0)
  
  The `limit' in the profile parameter changes when the fit is thought
  to have settled, while doing the main Lorentz profile fit.
  
  It is the fractional change, at an iteration step in the least squares
  fit, in each of the profile parameter values that are changing. Their
  changes must be less than this before the least squares iterations
  stop. Normal value = 0.001.
  
  See the `Htlim' parameter for the limit on the fractional change
  in the star height.
  
4 Fittype
   (Default - `old'    Choice - `fixmean:fixold:mean:none:old:update')
  
   Method of inputting starting values to the profile parameters
   in the fit iterations
  
   This is done either to speed things up, or get better values out of
   the fit. This can also provide a temporary override on the `fixing'of
   the profile parameters, by fixing them for this go.
  
   Choices:-
   Option      Function
   ------      --------
   Fixold      Fix profile at last fit of each star (no profile fitting)
   Fixmean     Fix at the last calculated mean profile (no profile
               fitting)
   Mean        Take last calculated mean profile
   None        Do not do fit
   Old         Take last fit for each star
   Update      Take mean of fits made of previous stars in this list
  
4 Fixangle
 (Default - `no'      Choice - `yes:no')
  
 Option for fixing the angle to the X axis of the major axis of the
 Lorentzian component of the profile. (THETA in the profile equation.)
 This is measured in an anti-clockwise direction, starting from the
 +ve X axis direction.
  
 At the program start, it is not fixed.
  
 This should only be used if you are either certain of the angle, or
 sure the stars are round (in which case set the angle to zero).
  
4 Fixem
  (Default - present values     Choice - 0 or 1)
  
  This inputs four integer values, each either 0 or 1. These are input
  as (say) `1,0,1,0'. These values are then switches as to whether the
  wing parameters are fixed or varying when doing the wing fit.
  
  0 = Fix ;    1 = Free (varying)
  
4 Fixprof
 (Default - present value           Choice - `yes:no')
  
 Option for whether to have the main profile parameter, that you are
 being asked about, fixed or not.
  
 At the program start, none are fixed.
  
 You are asked about five of the parameters in the main profile
 (Rmaj, Rmin, Power, PRmaj, PRmin) in turn. (The angle parameter is
 then asked for with the control `FIXANGLE', but that is separate
 to this particular bit of help.)
  
 The usual reason for fixing these parameters is that you are sure
 of what they are, and/or you do not want them to change, and/or
 you want to speed the fit up.
  
 The values of the profile can be input via the OPTION:PROFCHANGE
 and then the `VALUE' input. But in this case, all the profile
 parameters are asked for, the 6 of the Lorentzian and the 3 of the
 Gaussian.
  
4 Flip
 (Default - 0        Choice -  -n to +n, n being the number of stars
                               in list)
  
 The number of the star to have its fitted angle flipped by 180 degs.
 If +n, then the nth star has its angle increased by 180deg, if -n
 then the nth star has it decreased by 180. This sometimes helps
 in the calculation of the mean.
  
 For no more changes, type 0.
  
4 Gtype
  (Default - `xwindows'            Choice - any)
  
  A character string giving the local name for the graphics
  display type.
  
  `xwindows' will put it out on the screen of your X-window device,
  if you are using one.
  
  If `ask' is input, then the program asks a very similar question,
  in a different way. A response here of `?' will bring up a listing
  of all the possible names of graphics devices which are supported
  on your machine, and you then input the appropriate name.
  
4 Height
  (Default - present value     Range - -1.0e10 to 1.0e10)
  
 Set the value of the `Wing height' parameter in the modified
 Gaussian profile. This is the fractional height of the Gaussian
 wing compared to the main Lorentz profile.
  
 It is usual to set this to more than 0.0. If it is less than
 zero, then if the wing fit to determine the wing profile is done,
 the result is unpredictable.
  
4 Htlim
  (Default - present value     Range - 0.0 to 100.0)
  
  The `limit' in the height changes when the fit is thought to
  have settled, while doing the main Lorentz profile fitting.
  
  It is the fractional change, at an iteration step in the least squares
  fit, in the height of the main star that is  changing. Its changes
  must be less than this before the least squares iterations stop.
  
  Normal value = 0.001.
  
  See the `Fitlim' parameter for the limit on the fractional change
  in the profile values.
  
4 In
  (Default - null)
  
 The name of the file containing a 2-D image which has the stars
 in it whose profile it is desired to measure.
  
 A null `return' entry is not allowed.
  
 This image must be in either the `short' 16-bit integer or `real'
 32-bit real standard Starman NDF format.
  
4 Incomps
  (default - null)
  
 Input an existing table with the companions, faint companions and
 bad areas in it.
  
 A `blank' entry of just typing `return' will result in no table being
 input.
  
 The table must be in the format of the `OUTCOMPS' output of this
 program, and may well may have been made from a previous run of
 the program.
  
 A `Companion' is a star that is close and comparably bright
 to the target star. A faint star in the fitting box is not a companion,
 neither is a bright star on the edge of the box. (These are the faint
 companions.) In the fitting, companion stars are fitted along with
 the target stars, with their profiles being varied with the target
 stars to minimise the total residuals of the joint fit. Up to seven
 companion stars are allowed for each target star, and eight faint
 companions. Up to sixteen bad areas can be marked near each target
 star.
  
 Column     Header              Contents
 ------     ------              --------
   1      X OR XS               X posn of comp or X start of bad area
   2      Y OR YS               Y posn of comp or Y start of bad area
   3      HT OR XE              Height or X end of bad area
   4      NULL OR YE            Null   or Y end of bad area
   5      NULL                  Empty
   6      1:2:3=COMP:FC:BAREA   Code for line (1:2:3=Comp:faint comp:
                                                     bad area)
  
4 Inprof
  (Default - null)
  
 Input an existing image containing the profile.
  
 This image, contained in a file, holds the profile in the standard
 Starman way, that is the profile parameters are the descriptors
 of the image and the profile empirical map, if any, is contained
 in the image itself.
  
 A `blank' entry of just typing `return' will result in no image being
 input.
  
 The image must be in the standard format. It may have been produced via
 the `OUT' output of PROFILE during this or a previous run, or
 may have been generated by another means.
  
4 Instars
  (Default - null)
  
 The name of the file containg the table of the positions of the stars
 to be fitted.
  
 A null `return' entry is not allowed.
  
 This can be  either a simple (X,Y list), or it could contain more
 information. For example, the output star table of the `OUTSTAR'
 parameter of PROFILE can be fed in here, and all the PROFILE
 information on the fitting to the stars would be available.
  
 Thus a run on PROFILE could take off from where it stopped.
 (If other information on companion stars and bad areas is needed that
 can also be input with the OPTION:FILELOAD command.) Also the output
 table from MEASURE could be used as this input, and the profile and
 height information would be taken as wellas the X,Y positions. Indeed,
 for any table with `HEIGHT' as one ofthe descriptors, the heights would
 be input. This kind of preliminary information is useful in speeding up
 the fitting.
  
4 Linecol
   (Default - `black'            Choice - (black:white)
  
    Colour of plot lines. This is determined by whether you have a
    black or white background to your plots.
  
4 Moption
 (Default - last option     Choice - see below)
  
 Which of the following options, to do with looking at the empirical map
 and modifying it, do you want to do?
  
 This enables you to look at the empirical profile map closely and to
 modify it.
  
 Option          Function
 ------          --------
 clear           Clear the display window
 display         Display the profile empirical map array
 original        Load map as before entering this MAP option
 reset           Reset zoom/pan to unity and centre
 return          Return to main OPTION choice
 smooth          Smooth profile map by >top hat> NxM box
 spolyin         Define a polygon with cursor, smooth area inside
 spolyout        Define a polygon with cursor, smooth area outside
 values          Type out values for an area of the profile map
 zero            Zero all profile map
 zoom            Zoom and pan image by using mouse location
 zpolyin         Define a polygon with cursor, zero area inside
 zpolyout        Define a polygon with cursor, zero area outside
 zrect           Define a rectangle with cursor, zero area inside
  
  
 This enables you to look at the profile map closely and to
 change it to some extent.
  
 When defining the polygons, you use the cursor and the
 buttons. Place the cursor at consecutive vertices of the
 desired polygon, and press any button. To end the input of
 vertices, do a repeat press, without moving the cursor, on
 the last vertex. A line showing where the polygon lies is
 output whilst you are doing this.
  
4 Number
  (Default - see below       Range - see below)
  
  This is asked for in a number of different contexts. It thus has
  a number of various uses, depending on option in the `OPTION'
  parameter that you have selected:-
  
  Option      Use
  
  Info_star     Number of star you want the complete fit details for.
  Fix_set_xy    Number of star you whose position you want fixed
                 (Minus that number frees the position; 0 exits from
                 this option).
  Fit_one       Number of the star you want fitted.
  Disp_fit_one  Number of the star you want displayed
  
4 Numbutt
  (Default - see below          Range - 2 to 3)
  
  Number of `X-Window' buttons available on the mouse.
  
  Some devices have two and some have three buttons available. This
  can depend both on their actual presence, and also on the X Windows
  software that is being run.
  
  With three buttons, then the Starman programs use all three, with
  the right-hand button being used mainly as the `exit' button.
  
  With two buttons, then the third button is simulated by pressing
  both of the buttons down, with the middle one being pressed slightly
  BEFORE the left-hand one. Use of the middle button in its normal
  way has to be modified, in that one has to pause for half a second
  after using it.
  
  [This parameter is usally `hidden', with the machine manager setting
   it to the appropriate value for the local set-up. Sometimes it will
   be left to the user to set, depending on his software configuartion.]
  
4 Ok
  (Default - various, depending on use       Choice - `yes:no')
  
 This can be demanded at various stages in the program,
  
 What is wanted here will be clear from the previous operation, or
 information line just typed out. It generally gives you
 a chance to agree or disagree with some question that the program
 wants answering.
  
 Often the program will suggest the `usual' answer. For example, you
 may have chosen to calculate the residuals map before you have
 calculated a mean profile, which would be a silly thing to do.
 The program checks if you really mean this. Then by typing NO, you
 can escape back to the OPTION choice. (Of course, you may want to do
 this for some reason, perhaps the default profile is usable, in which
 case just type YES.)
  
4 Option
  (Default - see below   Choices see below)
  
 What operation, from a menu of possible choices, to do next?
  
 It is the general option choice, which you repeatedly come back to
 after performing operations. You select one of the menu operations.
  
 When you started the program, you were asked for the input image and
 input star list. Then you started on this option choice. Generally the
 default option is a repeat of the last option. However at the start,
 a standard set of options is given as the default
  
 Your choices are:-
  
  
 Option          Function
 ------          --------
 angle           Change Fix/Vary angle and/or angle
 box_size        Change size of box round stars used for fitting
 clear           Clear the display window
 close           Close the display screen
 comp_zero       Delete all comp/faint comp/bad area list entries
 controls_fit    Change internal controls of fit calculating
 disp_fit_all    Display the areas + residuals to the fits
 disp_fit_one    Display the areas + residuals to a single fit
 display         Display image
 exit            Exit from this program
 fit_all         Fit all the accepted stars
 fit_changed     Fit only stars with changed circumstances
 fit_one         Fit a certain star
 fit_rough       Make rough estimate of posns, heights, radii
 fit_trial       Calculate the mean profile from one star
 fix_set_xy      Set fixed/varying positions and/or the posns
 flip            Rotate profile ellipse of stars by 180 degrees
 info_fits       List the present fits
 info_fitting    Type intermediate step results in the fitting
 info_star       List the fit, comps, bads of a star
 interact_fit    Interact with the display of fits
 map_add         Add the Residuals array onto the Profile Map
 map_disp        Display the profile map
 map_interact    Interact with the display of Profile Map
 map_scale       Change Profile Map scale (mult/div its values)
 map_size        Change Profile Map size
 map_use         Change whether to apply the Profile Map or not
 map_zero        Zero the Profile Map
 mean            Decide which stars to use; find mean weighted profile
 new_cm_pr       Load some previous stuff (Comps, Bad areas, Fit)
 new_image       Input new image to replace the present one
 new_stars       Input list of star posns to replace present ones
 panel           Switch between panel and keyboard option selection
 prof_change     Change the mean profile parameters
 prof_fix        Change fixed/variable control on profile params
 radial_plot     Put a radial plot of profile and fit into file
 reject          Change which stars are accepted/rejected
 res_calc        Calculate the array of residuals
 res_disp        Display the mean fit residuals array
 res_fill        Fill any -empty- pixels in the residuals array
 res_interact    Interact with the display of residuals array
 shift_all       Shift XY positions of all the stars and comps
 show_reject     Put red border for rejected stars on display
 store           Save the profile and fits
 volume          Calculate the profile volume
 wing            Fit a broad Gaussian wing - zero broad wing start
  
  
 The `shift_all' option shifts the X,Y positions of all the stars
 and companions and faint companions. It leaves the bad areas unmoved.
 This enables you to use the lists from one exposure on another where
 the field centre is different, but where the detector bad areas are
 at the same positions.
  
 Further information on these options is given in the six line help
 window that appears in the `panel' mode, and contains relevant help
 when the cursor is placed on a button.
  
  
4 Out
  (Default - null)
  
 The name of the new output file containing the image into which the
 present profile parameters and empirical profile map are to be written
 into.
  
 A `blank' entry of just typing `return' will result in no file being
 made.
  
 The parameters of the profile (RX,RY,P,PRX,PRY,THETA,QH,QR,QP,VOL)
 are written as descriptors of this file, together with the
 XMAG and YMAG descriptors which show the subdivision of the image
 pixels into a finer spaced grid in which the profile mean residuals
 are calculated. The size of this image is about 7*max(YMAG,XMAG)*RX,RY
 with the precise factor depending on the angle of the
 profile to the X-Y directions.
  
 The file is an Integer*2 (16bit) file and the residuals are stored
 as the residuals that a star of peak height 10 000 would have (but
 this is noted by the BSCALE factor, so other programs get the right
 values.)
  
 This file can be used as input to MEASURE (qv), and can be re-input
 into PROFILE, via (INPROF) at any time.
  
4 Outcomps
 (Default - null)
  
 The name of the new output file containing the table with the
 positions and fitted heights of the companions and faint companions,
 and the positions of the boxes containing the bad areas near the stars.
  
 This file can be re-input into PROFILE, via (INCOMPS) at any time.
  
 Column     Header              Contents
 ------     ------              --------
   1      X OR XS               X posn of comp or X start of bad area
   2      Y OR YS               Y posn of comp or Y start of bad area
   3      HT OR XE              Height or X end of bad area
   4      NULL OR YE            Null   or Y end of bad area
   5      NULL                  Empty
   6      1:2:3=COMP:FC:BAREA   Code for line (1:2:3=Comp:faint comp:
                                                     bad area)
  
 The positions are absolute positions in the image.
  
4 Outradial
  (Default - null)
  
  Name of file to put the 1-D radial plot of the profile and fit into.
  
  This is output as a table, with rows given the values at
  different radial distances from the centre. The columns
  contain the data as:-
  
 Column   Header        Contents
 ------   ------        --------
   1      `DISTANCE'    Distance from centre
   2      `FIT'         Value of fitted profile
   3      `DATA'        Actual data values fitted to
   4      `RESIDUALS'   Data - fit
  
4 Outstars
 (Default - null)
  
 The name of the new output file containing the table with the details
 of the present individual fits to the stars.
  
 This table can be re-input (via INSTARS) into PROFILE to carry on the
 analysis when starting again.
  
4 Posn
  (Default - present position.     Range - -1.0e10 to 1.0e10)
  
  Position in image to fix star at.
  
4 Postype
  (Default - see below         Choice - `spot:cross')
  
  Mark the positions of the stars with spots ('spot') or crosses
  ('cross'). The default is the opposite to what is being used at
  the moment. At the start of the program the `cross' option is
  set.
  
  If the `cross' option is chosen, then the length of the crosses
  in pixels is asked for, via the `CWIDTH' parameter.
  
4 Power
 (Default - Present value      Range - 0.1 to 100.0)
  
 Set the value of the `Wing power' parameter in the modified
 Gaussian profile.
  
 It is usual to have it fixed, as this prevents low values of it being
 found which give unrealistically high values of the profile at great
 distances (which are not shown in the display of the fitting.)
  
4 Radius
  (Default - `Present Value'       Range -   1.0e-20 to 1.0e20.0)
  
  The Radius in the modified Gaussian wing part of the profile.
  
  
              I  =  A.( Lorentz + QH.Gauss )  + Empirical
  
                          QP
                       -d3
           Gauss = QH.e
  
  
  
      where       A is the star height
  
                  d3 = sqrt(((x-X0)/QR)**2+((y-Y0)/QR)**2)
  
                  QH is usually small, of the order of 0.01
                  P and QP are usually about 2
                  the PRs are usually about 6*the Rs
                  QR is usually greater than 5*the Rs
  
  For more details, see the above help section on the profile.
  
4 Reject
 (Default - 0       Range -  -n to +n, n being the number of stars in
                             list)
  
 The number of the star to be rejected (+n), or to be accepted in spite
 of having been rejected (-n). If any star has been rejected or
 accepted, the mean fit is recalculated and another chance given for
 the fit.
  
 If there are no more changes to be made, type 0.
  
4 Roption
 (Default - last option     Choice - see below)
  
 Which of the following options, to do with looking at the residuals
 map closely and modifying it, do you want to do?
  
 This enables you to look at the residuals map closely and to
 change it to some extent.
  
 These options enable you to look at the residuals map
 closely and to change it to some extent.
  
 Option          Function
 ------          --------
 calculate       Calculate the array of residuals
 clear           Clear the display window
 display         Display the mean fit residuals array
 fill            Fill any -empty- pixels in the residuals array
 original        Load original values from last fit calculations
 reset           Reset zoom/pan to unity and centre
 return          Return to main OPTION choice
 smooth          Smooth profile map by >top hat> NxM box
 spolyin         Define a polygon with cursor, smooth area inside
 spolyout        Define a polygon with cursor, smooth area outside
 values          Type out values for an area of the residual array
 zero            Zero all residual array
 zoom            Zoom and pan image by using mouse location
 zpolyin         Define a polygon with cursor, zero area inside
  
  
 When defining the polygons, you use the cursor and the
 buttons. Place the cursor at consecutive vertices of the
 desired polygon, and press any button. To end the input of
 vertices, do a repeat press, without moving the cursor, on
 the last vertex. A line showing where the polygon lies is
 output whilst you are doing this.
  
 Further information on these options is given in the six line help
 window that appears in the `panel' mode, and contains relevant help
 when the cursor is placed on a button.
  
4 Scale
  (Default - last      Range - 1.0e-8 to 1.0e8)
  
  Value to scale the standard empirical profile map by. (Not the
  factor to multiply the last scaled map, but the absolute scale, i.e.
  `scale=10, and then `scale=2' has the same effect as scale=2).
  
  This is not really useful.
  
4 Screen
  (Default - see below        Range - 1 to full size of device)
  
  This the size of the screen or window to use, input as two integers
  for the X and Y size.
  
  The default is set large enough to take the display of the small
  residual maps around each star, but you are advised to double this
  at least, to allow for zooming in inspection.
  
4 Shiftxy
  (Default - 0.0,0.0      Ranges - -1.0e20 to 1.0e20)
  
  Input as two real numbers as (say)  1.5,20.2
  
  The shift in X and Y on the input image to be applied to all the
  star positions, with their companions, and the bad areas.
  
  This is useful when you are doing an image, and you have an input
  list of star positions, which is displaced for this image.
  
4 Size
  (Default - present values     Range - 1 to 200)
  
  Input two numbers as (say) 10,12.
  
  Input the X and Y size of the area of either of:-
  
   -  the fitting box (the area that the fits are done in, and
      which is displayed on the image display).
   -  the profile map. This does not have to be the same size
      as the fitting area. The size is the number of pixels of
      the image that the profile map covers. This can be
      different than the computer storage size and the size
      of the profile file image, since the profile map may
      map to sub-divided image pixels, and thus contain more
      data points.
  
4 Smsize
 (Default - 3        Range - all +ve odd integers 3 to 32767)
  
  Input two number as (say)  `5,5'.
  
 These are the sizes of the sides of the box to be used in the
 smoothing of the residuals or profile maps.
  
 The smoothing is done by replacing each pixel with the average
 value of the pixels in the box surrounding that pixel. ('Top hat'
 smoothing.) This is why the sides must have an odd number of
 pixels.
  
 If the sides of the box are larger than the map to be smoothed
 or if the area of the box is more than 32767 pixels, the
 input wont work, and you are asked again.
  
4 Title
  (Default - various      Choice -any)
  
  Title to add as a descriptor to the output file.
  
  The output file in question is the one you are opening and
  writing to. It can be:-
  
       the profile image file
       the stars table file
       the companions/bad areas table file
       the Gaussian wing profile table file
  
4 Use
  (Default - `inter'            Choice - `auto:inter')
  
  Do the fitting interactively with the user, or do an automatic
  fit, where a profile is derived without much sophistication?
  
4 Usemap
 (Default - present state     Choice - `yes:no')
  
 A choice as to whether to use whatever Profile Map exists in the
 fitting or residuals display. Generally any action that zeroes the
 Profile Map, sets this option to no, and any that loads a non-zero
 one sets it to yes.
  
4 Value
  ( Default -  present value        Range -  -1.0e20 to 1.0e20)
  
  After the OPTION:PROFCHANGE choice, you are then asked for the values
  of the 9 parameters of the entire profile. The 6 of the Lorentx
  profile (Rmaj, Rmin, Power, PRmaj, PRmin, Angle) and the 3 of the
  Gaussian wing (Fractional height, Radius, Power). The angle should
  be input in degrees.
  
  At the program start, the values are:-
     (2.0, 2.0, 2.2, 10.0, 10.0, 0.0; 0.0, 10.0, 2.0).
  
  (These can be changed as a result of doing the OPTION:ROUGH choice.)
  
  Depending on which of the parameters you have/have not fixed (at the
  start none are fixed), these cannot/can vary during a fit.
  
4 Volrad
  (Default - present value      Range - 1.0 to 1.0e6)
  
 If calculating profile volume, how many pixels out to carry
 calculations.
  
 This is a rather minor parameter. The program will normally start
 with a value of 30 pixels. This may be changed when a `profile' image
 file is read in, as that file contains its own `volrad' parameter.
  
4 Wdamp
  (Default - present value           Range - 0.0 to 100.0 )
  
  The damping factor in the fitting least squares method, whilst
  doing the 1-D Gaussian wing profile fitting.
  
  This controls the spize of the adjustments in the fitting. The
  smaller the number, the less the internal damping, and so the
  bigger the steps, the faster the fitting, and also the risk of
  shooting out of the best `least squares' path and so mis-fitting.
  In general, values are such that:-
  
        0.0 = no damping, 0.5 = normal, 1.0 = a lot of damping.
  
4 Wfitlim
  (Default - present value         Range - 0.0 to 100.0)
  
  The `limit' in the profile parameter changes when the fit is thought
  to have settled, while doing the 1-D Gaussian wing profile fitting.
  
  It is the fractional change, at an iteration step in the least squares
  fit, in each of the profile parameter values that are changing. Their
  changes must be less than this before the least squares iterations
  stop. Normal value = 0.001.
  
  See the `Whtlim' parameter for the limit on the fractional change
  in the star height.
  
4 Wfitok
 (Default - `no'      Choice - `yes:no')
  
  Have the good stars been fitted with a fixed profile to the present
  data with the present companions and blank areas? By the present
  data is meant the data in the normal `small' boxes, not that in the
  `large', `wing' boxes round each star.
  
  If not, a fit will be done to the `small' boxes.
  
4 Whtlim
  (Default - present value     Range - 0.0 to 100.0)
  
  The `limit' in the height parameter changes when the fit is thought
  to have settled, while doing the 1-D Gaussian wing profile fitting.
  
  It is the fractional change, at an iteration step in the least squares
  fit, in the star fractional height parameter value that is changing.
  Its changes must be less than this before the least squares
  iterations stop. Normal value = 0.001.
  
  See the `Wfitlim' parameter for the limit on the fractional change
  in the profile values.
  
4 Woption
  (Default - last choice     Choice - see below)
  
 Which of the following options, to do with looking at the wing
 profile closely and modifying it, do you want to do?
  
 These options enable you to estimate the parameters of the wide
 Gaussian wing:-
  
 Option          Function
 ------          --------
 display         Display the areas + residuals to the fits
 fit_gcursor     Fit to wing points input by cursor
 fit_graw        Fit to raw wing points as calculated
 fit_stars       Fit stars in the large areas round each star
 gclose          Close the graphics device
 gcursor         Put -better- wing points in by cursor
 gplot           Plot the wing points graphically
 gshowfit        Plot fitted line
 interact        Interact with the display of fits
 return          Return to main option
 set_param       Insert your own wing profile values
 type_Param      Type present wing parameters
  
  
 Further information on these options is given in the six line help
 window that appears in the `panel' mode, and contains relevant help
 when the cursor is placed on a button.
  
  
 The program sums up all the accepted stars, subtracts the fitted fixed
 Lorentzian profiles, folds the data round the centre and fits the
 modified Gaussian. The program then plots
 the data and draws the Gaussian it has fitted. If you have
 chosen an interactive terminal, you can then modify the fit by marking
 (via the cursor) points which you think best show the actual profile
 and the program then fits the Gaussian to these points and draws the
 fitted curve on the device. You can then redefine a new set of points
 as often as you like until you are satisfied with the fit.
  
  You can:-
  
   -  Look at a larger area round each star to see if there are areas
      to be blanked off, or stars to be marked so that the fits can
      be redone.
   -  Fit the stars. This does a fit, and calculates the residual
      radial distribution of data that is left.
   -  Look at the 1-D distribution of residual data on a graph,
      and if it looks corrupted input your own residual distribution.
   -  Fit the wing profile parameters to the 1-D residual profile,
      either by fitting to calculated points, or fitting to the
      hand input points.
   -  Look at the wing profile parameter fit to the 1-D distribution.
   -  Put in your own estimates of the wing profile parameters, and
      say if they should be fixed or not.
  
 The point about the option for hand inputting is that sometimes
 the raw points are disturbed by miscellaneous things in the large
 areas used in determining the wing profile. You can thus use
 some judgement and put the radial distribution where you think it
 should be.
  
 In putting your own set of points of the radial distribution, be sure
 to put in enough that the fit can make a good fit to them.
  
   A normal course might be to:-
  
      -Display-      Display the x2 areas round the stars
      -Interact-     Blank off or mark up the extra stars in
                     the large wing areas
      -Fit_stars-    Fit the stars in the large wing area and calc
                     the distribution of wing data points
      -Gplot         Look at the wing data points
      -Gcursor       Put your own smoothly distributed wing data
                     points by using the graphics cursor
      -Fit_gcursor   Fit the wing parameters to your cursor input
  
   After this you can loop round changing the cursor positions
   and/or refining the fit. The fit is usally very delicate
   and it is common to adjust the profile parameters by hand
   before a number of fits to get a good fit
  
    Then:-
  
        -Return-    back to the main option
  
  
4 Xarea
 (Default - 1,X size       Range - 1 to X size, 1 to X size)
  
 The X region of the profile or residuals map you want to type out.
  
4 Yarea
 (Default - 1,Y size      Range -  1 to Y size, 1 to Y size)
  
 The Y region of the profile or residuals map you want to type out.
  
  
3 Author
  
           A J Penny               RAL            1994 Jan
  
2 Simplemag
  
  This program does three kinds of simple photometry. They are:-
  
   - Aperture photometry on isolated stars.
  
   - Simple Gaussian profile photometry on isolated stars.
  
   - Determination of mean Gaussian radii from isolated stars.
  
 The three kinds are executed by entirely different sections of
 the program. These sections can be thought of as separate
 programs, one of which is chosen after entering SIMPLEMAG.
  
 In all cases, an image and a list of star positions is input and
 the work done using those inputs.
  
3 Aperture_photometry
  
 Does aperture photometry on stars in an image.
  
 For each star in the input table of positions, the program does:-
  
 1) Optionally, refine position before use by centering on the star
    that near the table position.
  
 2) Place an aperture of specified size at the position.
  
 3) Calculate flux in an aperture at the position.
  
 4) Calculate mean `sky' level with a circular annulus around the
    position, with specified inner and outer radii,
  
 5) Subtract sky level from the flux in the aperture.
  
 6) Calculate star magnitude as:-
  
         Mag = 30 - 2.5*log  (star-(sky level)*area)
                           10
  
         where area = star aperture area
  
 7) Store result in output table.
  
 8) Optionally, type out result to user.
  
 The error in the star magnitude and sky level are also calculated
 from the pixel values. The pixels are presumed to be Poisson noised,
 with a scale level put in by the user. This is a number such that
 if the pixel values are multiplied by this number, then the pixels
 would have proper Poisson noise. There is also a user input value
 for an extra noise level that is added to each pixel. This noise can
 be thought of as the noise that would be there if the pixel values
 had a mean level of zero.
  
4 Aperture_output
  
 The file output by this program uses the `OUT' parameter, and
 is a table of results. The contents of the table are the parameters
 measured for each star:-
  
  Column
  Number   Header       Contents
  ------   ------       --------
    1      X            X position used (optionally centered)
    2      Y            Y position used (optionally centered)
    3      Magnitude    Magnitude
    4      Error        Error (std dev) in magnitude
    5      Peak         Maximum pixel value in star aperture
    6      Dx           X distance from input to measured position
    7      Dy           Y distance from input to measured position
    8      Flux         Sum of pixel values in star aperture
    9      Number       Number of valid pixels in star aperture
   10      Invalid      Number of invalid pixels in star aperture
   11      Sky          Sky level (mean)
   12      Sky Error    Error (std dev) in sky level
   13      Sky Number   Number of valid pixels in sky annulus
   14      Sky Invalid  Number of invalid pixels in sky annulus
  
  The magnitudes are calculated as:-
  
         Mag = 30 - 2.5*log  (star-(sky level)*area)
                           10
  
         where area = star aperture area
  
 If the star flux is negative, the magnitude is set to 50. It is
 also set at that level if there are no good pixels in the star aperture
 and/or none in the sky annulus.
  
3 Gaussian_photometry
  
  Does photometry on isolated stars in an image, fitting a 2-D
  Gaussian to stars whose positions are given in an input list.
  
  It estimates the flux of stars in an image, by taking a small area
  around the star position and fitting a background and a 2-D Gaussian
  profile to the data in that area. The star positions are taken from
  an input table, and the results are (optionally) typed out and
  stored in an output table.
  
  The Gaussian profile is an ellipse, orthogonal to the X and Y
  axes.
  
  This program takes no account of sub-pixel variations. Thus a
  profile whose value changes significantly inside a pixel will
  be assumed to have the mean value as the value at the centre of
  that pixel. For narrow profiles, this will introduce errors.
  
4 Gaussian_method
  
   The star profile is of the form:-
  
                    2
                -1.d
          I =  e
  
          Where d = sqrt((X/RX)**2+(Y/RY)**2)
  
  Beware that, as stars are not exactly Gaussian, the fitted profile
  will vary with box size.
  
  This program takes no account of sub-pixel variations. Thus a
  profile whose value changes significantly inside a pixel will
  be assumed to have the mean value as the value at the centre of
  that pixel. For narrow profiles, this will introduce errors.
  
  Star profiles are not strictly Gaussian, so for stars with whose
  profiles differ, there will be a small, systematic, error in their
  relative magnitudes. That is the magnitude is not a `correct'
  estimate from the `volume' of a star. However for stars with the
  same profile, for example in many cases, stars in one image, this
  error has the same fractional size, and so the relative magnitudes
  are correct.
  
  For very faint stars, letting the profile radii vary can cause
  significant errors.
  
4 Gaussian_output
  
 The file output by this program uses the `OUT' parameter, and
 is a table of results. The contents of the table are the parameters
 measured for each star:-
  
  Column
  Number   Header       Contents
  ------   ------       --------
    1      X            X position
    2      Y            Y position
    3      Magnitude    Magnitude
    4      Dx           X distance from input to measured position
    5      Dy           Y distance from input to measured position
    6      Iterations   Number of iterations taken in the fitting
                        (the maximum allowed is 20)
    7      Rms          The RMS of the residuals between the fit and the
                        data, in an area around the star centre
    8      Numinval     Number of `invalid' pixels in the area used
                        in the fit
    9      Height       The height of the Gaussian fitted
   10      Base         The `sky' level on which the star sits
   11      Rx           The fitted X radius of the elliptical profile
   12      Ry           The fitted Y radius of the elliptical profile
  
  The magnitudes are calculated as:-
  
        Mag = 30.0 - 2.5.log  (pi.height.rx.ry)
                            10
  
  where (pi.height.rx.ry) is the `volume' of a Gaussian.
  
3 Gaussian_radius
  
  Estimates the mean Gaussian Radii of stars in a table of
  star positionss in an uncrowded image.
  
  It makes three estimates, by using three methods:-
  
   -  Fit each star individually and average the measured radii
  
   -  (Optional) Take the pixels round each star and add them
      together to make one star, and then measure its radii. The
      adding is done assuming that each star centre is at the b.l.h.
      corner of the pixel in which it actually falls.
  
   -  (Optional) Take the pixels round each star and add them
      together to make one star and then measure its radii. The
      adding is done by taking the star centres to be at their
      calculated positions and using an interpolation method to
      put the best pixel values into the summed star.
  
  This program takes no account of sub-pixel variations. Thus a
  profile whose value changes significantly inside a pixel will
  be assumed to have the mean value as the value at the centre of
  that pixel. For narrow profiles, this will introduce errors.
  
  The profile is an ellipse, orthogonal to the X and Y axes.
  
4 Radius_method
  
   The position, radii, and height of each of the stars in the table
   are found by taking a small box round each star in the image, and
   fitting a single 2-D Gaussian (with different X and Y radii), but
   no rotation. No allowance is made for the fact that there may be
   contamination by nearby stars. The results may be typed out.
  
   Bad stars are then rejected, on the basis of 'invalid' pixels
   in the fitting boxes, radii too large or small, heights too small.
  
   The mean of the fits is then calculated and typed out.
  
   The program then makes a 'grand' star by taking the data around
   each individual good star centre and adding each pixel value into
   a total array at its appropriate position. The radii of this mean
   star are then calculated, typed, and stored as parameters of the
   program.
  
   An even better radii is then calculated by doing the summing in a
   better way, in which the program allows for the fact that the
   stars are not centred at integral pixel values by interpolating
   between pixels before adding into the mean array. The radii of
   this mean star are then calculated, typed, and stored as parameters
   of the program.
  
   The star profile is of the form:-
  
                                     2
                                 -1.d
                           I =  e
  
               Where d = sqrt((X/RX)**2+(Y/RY)**2)
  
    Beware that, as stars are not exactly Gaussian, the fitted profile
    will vary with box size.
  
  This program takes no account of sub-pixel variations. Thus a
  profile whose value changes significantly inside a pixel will
  be assumed to have the mean value as the value at the centre of
  that pixel. For narrow profiles, this will introduce errors.
  
4 Radius_output
  
 The files output by this program are:-
  
   Parameter         Content
   ---------         -------
    OUT1IM         An image with the residuals after a fit has been to
                   done to the array made by summing up all the areas
                   round each star in the input table.
  
    OUT2IM         An image with the residuals after a fit has been to
                   done to the array made by summing up all the areas
                   round each star in the input table, with the
                   summing done using pixel interpolation when adding
                   the data from an individual star into the array.
  
    OUT1TB         A table with the radial plot of the fit and the data
                   after a fit has been to done to the array made by
                   summing up all the areas round each star in the
                   input table. The table contains three columns, the
                   first the distance from the centre of the fitted
                   star, the second the summed data values, and the
                   third the value of the fit at that point.
  
    OUT2TB         A table with the radial plot of the fit and the data
                   after a fit has been to done to the array made by
                   summing up all the areas round each star in the
                   input table, with the summing done using pixel
                   interpolation when adding the data from an
                   individual star into the array. The table contains
                   three columns, the first the distance from the
                   centre of the fitted star, the second the summed
                   data values, and the third the value of the fit at
                   that point.
  
3 Parameters
  
4 GENERAL
  
  The following parameters are used in more than one of the
  three types of photometry done in this program.
  
4 Box
  (Default - 20,20       Range - 2 to 200)
  
  The X and Y size of the box round each star to take when
  making the individual fits.
  
4 In
  (Default - null)
  
  The input image.
  
  This can be either a `short' 16-bit integer of a `real' 32-bit
  real Starman NDF image.
  
4 Instars
  (Default - null)
  
  The input list of star positions.
  
  This must be a Starman table format file.
  
4 Option
  (Default - 'aperture'      Choice - 'aperture:gaussian:radius')
  
  Which of the three types of fit do you want to do?
  
  Choice     Function
  ------     --------
  Aperture   Aperture Photometry
  Gaussian   Gaussian profile fitting photometry
  Radius     Determine mean Gaussian radii
  
4 Out
  (Default - null)
  
  The output table of results.
  
  This can be either from the aperture measuring or from the
  profile measuring. For the contents of the table, see the
  help on the functions.
  
4 Title
  (Default - title of input table       Choice - any)
  
  The title to add into the output table.
  
4 Typing
  (Default - 'yes'      Choice - 'yes:no' )
  
  Do you want to have typed out the individual fits to each star?
  
4 APERTURE_MEASURE
  
  The following parameters are for the Aperture Photometry.
  
4 Apdia
  (Default - 20.0       Range - 0.1 to 200.0)
  
  The diameter of the star aperture.
  
4 Centre
  (Default - `no'      Choice - 'yes:no')
  
  Do you want the input positions corrected before the measuring is
  done?
  
  If so, then the program will fit a Gaussian to the data near the
  input position, and take the fit centre as the new position.
  
4 Noise
  (Default - 0.0      Range - 0.0 to 1.0e10)
  
  In calculating the errors, is there a hidden source of noise, and
  if so what is its level?
  
  If an image had a mean level of zero, what would be the std dev of the
  pixel values? There might be such a source of noise from say the
  removal, before the use of this program, of a mean level.
  
  A knowledge of such a hidden noise is necessary for the correct
  estimate of the error in the calculated magnitudes.
  
4 Poisv
  (Default - 1.0           Range - 1.0e-10 to 1.0e10)
  
  In calculating the errors, it is necessary to know if the pixel
  values have a Poisson noise. Sometimes, the pixel values are
  scaled values
  
4 Skydias
  (Default - 30.0,40.0         Range - 0.1 to 200.0)
  
  The inner and outer diameters of the sky annulus.
  
  
4 GAUSSIAN_PHOTOMETRY
  
  The following parameters are for the Gaussian Profile Photometry.
  
4 Parfix
  (Default - 'no'         Choice - 'yes:no')
  
  Are fixed radii to be used in the fitting?
  
  Either the program can determine the best values of the
  profile radii for each star, or it can keep those radii
  fixed throughout the program with user-determined values.
  
  If they are allowed to vary, then the starting values, of the
  iterative process in the fitting, are taken as 2.0,2.0.
  
4 Radii
  (Default - 3.0,3.0            Range - 0.1 to 200.0)
  
  X and Y radii of the star profile to be used in fitting the
  stars. If the profile is fixed, then these are used. If it is
  allowed to vary, then these are used as the starting points
  of the iterative fitting.
  
4 GAUSSIAN_RADIUS
  
  The following parameters are for the Determination of the
  Mean Gaussian profile.
  
4 Doint
  (Default - 'yes'      Choice - 'yes:no' )
  
  Do you want the make the grand star, amde  by summing the data round
  the individual stars (using interpolation), for fiting?
  
4 Dosum
  (Default - 'yes'      Choice - 'yes:no' )
  
  Do you want the make the grand star, amde  by summing the data round
  the individual stars, for fiting?
  
4 Out1im
  (Default - null)
  
  The name of the image to contain the summed star.
  
  The image is the residuals after a fit has been to done to the
  array made by summing up all the areas round each star in the
  input table.
  
  If a null repsonse is made, this image is not made.
  
  This is a `short' 16-bit integer Starman NDF image.
  
4 Out2im
  (Default - null)
  
  The name of the image to contain the summed star, with the
  summing done using interpolation.
  
  The image is the residuals after a fit has been to done to the
  array made by summing up all the areas round each star in the
  input table, with the summing done using pixel interpolation
  when adding the data from an individual star into the array.
  
  If a null repsonse is made, this image is not made.
  
  This is a `short' 16-bit integer Starman NDF image.
  
4 Out1tb
  (Default - null)
  
  The name of the table to contain radial profile fitted and a
  radial plot of the data of the data for the summed star. The fit
  and the data are folded around the centre of the fit.
  
  No account is made of sub-pixel variations.
  
  The table contains three columns, the first the distance from
  the centre of the fitted star, the second the summed data values,
  and the third the value of the fit at that point.
  
  This is a table with the radial plot of the fit and the data
  after a fit has been to done to the array made by summing up all
  the areas round each star in the input table.
  
  If a null repsonse is made, this table is not made.
  
  This is a `real' 32-bit real Starman table format NDF file.
  
4 Out2tb
  (Default - null)
  
  The name of the table to contain radial profile fitted and a
  radial plot of the data of the data for the summed star, using
  interpolation. The fit and the data are folded around the centre of
  the fit.
  
  No account is made of sub-pixel variations.
  
  The table contains three columns, the first the distance from
  the centre of the fitted star, the second the summed data values,
  and the third the value of the fit at that point.
  
  This is a table with the radial plot of the fit and the data
  after a fit has been to done to the array made by summing up all
  the areas round each star in the input table, with the summing
  done using pixel interpolation when adding the data from an
  individual star into the array.
  
  If a null repsonse is made, this table is not made.
  
  This is a `real' 32-bit real Starman table format NDF file.
  
4 Radlims
  (Default - 0.5*fitted radius,1.5*fitted radius or 1.0,10.0
   Range - 0.1 to 100.0)
  
  The lower and upper limits to the range of acceptable radius
  (average of the X and Y radii) for a star.
  
  If an individual star has a fitted radius outside these limits,
  it will not be used in making the mean radius, nor will the box
  round it be used in making the grand summed star which is later
  fitted.
  
4 Rx1
  (Output parameter)
  
  The mean X radius, calculated from the mean of the individual
  radii.
  
4 Rx2
  (Output parameter)
  
  The mean X radius, calculated from fitting to the summed data of
  the boxes round the indivual stars.
  
4 Rx3
  (Output parameter)
  
  The mean X radius, calculated from fitting to the summed data of
  the boxes round the indivual stars, with the summing done using
  interpolation.
  
4 Ry1
  (Output parameter)
  
  The mean Y radius, calculated from the mean of the individual
  radii.
  
4 Ry2
  (Output parameter)
  
  The mean Y radius, calculated from fitting to the summed data of
  the boxes round the indivual stars.
  
4 Ry3
  (Output parameter)
  
  The mean Y radius, calculated from fitting to the summed data of
  the boxes round the indivual stars, with the summing done using
  interpolation.
  
4 Sumbox
  (Default - 6*X radius, 6*Y radius     Range - 2 to 200)
  
  The X and Y size of the box round each star to take when
  making summing up the data to make a grand star.
  
3 Author
  
  Alan Penny                    RAL                      1991 Nov
  
  
2 Sprinkle
  
  Makes a table of stars with random positions, magnitudes, colours and
  heights. This table represents the stars in a star field. It can be
  used with ADDSTARS to make an image of a `random' star field, either
  as a uniform distribution, or as a cluster. The colours and magnitudes
  can be set in a number of diverse ways.
  
  It thus outputs two types of stars, cluster stars and field stars.
  
  The cluster stars are distributed in position to mimic a cluster with
  a King profile and in magnitude and colour to follow either an
  input colour-magnitude diagram (specified by an input file designed to
  model a cluster CMD) or one of randomly scattered magnitudes.
  
  The field stars have a random x,y distribution and a cmd of again
  either an input CMD (designed in a different way to model a field
  star distribution) or a random scatter in colour and magnitude.
  
  The range in position, colour and magnitude allowed can be specified.
  
  
3 Use
  
 1) Make a table of the cluster CMD and field star CMD. (See the help
    on 'Cluster' and 'Field' on how to do this.) Or you can (for
    either) decide to have a CMD with random magnitudes and colours
    evenly scattered over a chosen mag and colour range.
  
 2) Decide :-
  
    - What reddening and distance modulus you want them both to have.
    - Where in the field you want the cluster centre to be.
    - How large the field is (for both field and cluster stars).
    - What region of the CMD you want filled (for field/cluster stars).
    - On the cluster King core and tidal radii.
    - On the number of cluster and field stars to make.
    - On the random seed numbers.
  
 3) Run the program.
  
 4) The output is a table of star positions, heights, magnitudes,
    and colours.
  
3 Method
  
4 Cluster_stars
  
  The selection of a random magnitude and colour
  ----------------------------------------------
  
  The colour-magnitude diagram is input as lines in the CMD. Each line
  is specified by [a start mag,col; an end mag,col; the number of stars
  in that line]. The program then sums the total number of stars in all
  the lines. To choose a random (mag,col), it selects a random number in
  the range 0.0 to 1.0, and finds in which line segment the ratio of
  (sum of stars in lines so far)/(total no of stars) is first greater
  than the number chosen. Thus the lines are selected in proportion to
  the number of stars in them. Then a (mag,col) is chosen from a uniform
  random distribution along the chosen line.
  
  Thus the line segments do not have to be contiguous in the CMD, but
  no smoothing in the number distribution from one line to the next is
  made (which if they are not touching would be incorrect). Thus to
  insure no falsely rapid changes in the number distribution are made,
  the line segments must be short enough that in each one, a uniform
  number distribution is suitable.
  
  After this the input distance modulus and reddening are applied (after
  the table (m-M) and Eb-v (say) have been removed).
  
  Then the input limits on magnitude and colour are checked. If the
  chosen mag,col lies within the limits, they are accepted; if not,
  then the process is repeated.
  
  Alternative
  -----------
  
  No table is input, and the mag,cols are uniformly distributed within
  the mag,col limits.
  
  
  The selection of a random X,Y Position
  --------------------------------------
  
  The King core and tidal radii are used to make a random selection
  of distance from the cluster centre, which results in the King
  radial distribution. These are then uniformily distributed in
  position angle around the cluster. They are accepted if they fall
  within the input position limits.
  
  The core and tidal radii have thus to be input as 'pixel' values.
  
  The King distribution is that defined by Ivan King in:- AJ 67,471;
  AJ 70,376; AJ 71,64
  
4 Field_stars
  
  The selection of a random magnitude and colour
  ----------------------------------------------
  
  The colour-magnitude diagram is input as numbers of stars in uniform
  areas in a grid in the CMD.
  
  The table specifying the CMD gives the location of the top left hand
  area and the area size. The table then contains the number of stars
  in each area. The program then sums the total number of stars in all
  the areas. To choose a random (mag,col), it selects a random number in
  the range 0.0 to 1.0, and finds in which area the ratio of
  (sum of stars in areas so far)/(total no of stars) is first greater
  than the number chosen. Thus the areas are selected in proportion to
  the number of stars in them. Then a (mag,col) is chosen from a uniform
  random distribution within the chosen area.
  
  Thus no smoothing in the number distribution from one area to the
  next is made. So to insure no falsely rapid changes in the number
  distribution are made, the areas must be small enough that in each
  one, a uniform number distribution is suitable.
  
  After this the input distance modulus and reddening are applied (after
  the table (m-M) and Eb-v (say) have been removed).
  
  Then the input limits on magnitude and colour are checked. If the
  chosen mag,col lies within the limits, they are accepted; if not,
  then the process is repeated.
  
  Alternative
  -----------
  
  No table is input, and the mag,cols are uniformly distributed within
  the mag,col limits.
  
  
  The selection of a random X,Y Position
  --------------------------------------
  
  A uniform random distribution within the input limits is made.
  
  
3 Random_Seeds
  
  The choosing of the random values is done with the a simple
  algorithm, which starts from an input seed and creates a pseudo-random
  number form 0 to 1 from that and updates the seed.
  
  This seed number is fed in by the user.
  
  So if you feed in the same seed, you will get the same distribution
  of star mag,col and positions. A different seed will give a different
  pattern. These seeds have to be large (over a billion) to ensure
  good randomising. There are separate seeds for the cluster and field
  stars, so one pattern can be repeated, whilst holding the other
  constant.
  
3 Output
  
   The table contains seven columns. For each star, the entry is:-
  
    column  header    content
    ------  ------    -------
     1      X         x posn
     2      Y         y posn
     3      HEIGHT1   height of star in the 1st colour band (e.g. 'V')
     4      HEIGHT2   height of star in the 2nd colour band (e.g. 'B')
     5      MAG1      1st colour band magnitude (e.g. 'V')
     6      COL       colour (e.g. 'B-V')
     7      MAG2      2nd colour band magnitude (e.g. 'B')
  
     Thus from the input table(s) of (say) 'V' and 'B-V', an output
     table of X, Y, V height, B height, V, B-V, and B is made.
  
     The stars are named as #1, #2, #3, etc.
  
 It is also possible, through the LOG parameter, to get a typing out as
 the program goes.
  
3 Hidden_Parameters
  
  The parameter LOG is `hidden', that is only accessible by putting
  `SPRINKLE LOG=yes' on the command line or a previous LET command.
  
  
3 Parameters
  
4 Ccrange
  (If there is a cluster file:-
     Default - bluest to reddest colour in cluster file
     Range - bluest to reddest colour in cluster file
   If the cluster is to have a uniform magnitude distribution:-
     Default - -20,20
     Range - -20 to +20)
  
  Range in colour that cluster stars can have.
  
4 Cdismod
  (Default- Value in cluster file, if any, or 0.0
   Range -  -1.0e8 to 1.0e8)
  
  Cluster distance modulus. If there has been the input of a cluster
  file with its own distance modulus, that distance modulus is first
  subtracted.
  
4 Ceven
  (Default - 'yes'      Choice - 'yes:no')
  
  Use a uniform cmd distribution instead of the cluster cmd for the
  cluster stars.
  
4 Cluster
  (Default - null)
  
  Input table giving cluster CMD. It contains rows describing line
  segements of the cluster.
  
  (A) Each row of the table contains a description of a line segment of
      the cluster CMD. It has, in order,:-
  
      Mag start, Col start, Mag end, Col end, Number of stars
  
  
  (B) See the help on 'Method' as to how this is used.
  
  
  (C) The table also has, as descriptors, the reddening and distance
      modulus of the CMD. Thus when the user inputs the desired
      reddening and distance modulus, the table descriptor values are
      first subtracted.
  
      Thus, for example, if the user puts in the same reddening and
      distance modulus as the value in the cluster file, the values in
      the cluster table for the stars are used unaltered.
  
      The table descriptors are:-
  
      Name     Content
      ----     -------
      RED      The reddening
      DISMOD   The distance modulus
  
  
  (D) The table can be made at the keyboard by the program `tbkey',
      and the decriptors added with the program `tbdes'.
  
  
4 Cmrange
  (If there is a cluster file:-
     Default - brightest to faintest magnitude in cluster file
     Range - brightest to faintest magnitude in cluster file
   If the cluster is to have a uniform magnitude distribution:-
     Default - -50,50
     Range - -50 to +50)
  
  Range in magnitude that cluster stars can have.
  
4 Cnumber
  (Default - 1         Range - 0 to 100000000)
  
  Number of cluster stars to make
  
4 Credden
  (Default - Value in cluster file, if any, or 0.0
   Range -  -1.0e8 to 1.0e8)
  
  Cluster reddening. If there has been the input of a cluster file
  with its own reddening, that reddening is first subtracted.
  
4 Cseed
  (Default - 1234567891      Range - 1200000001 to 1400000001)
  
  Random number to seed making of random cluster stars. Should
  be an odd number
  
4 Cxrange
  (Default - 1.0,100.0      Range - -1.0e8 to 1.0e8)
  
  X start and end of acceptable area for cluster stars to lie in.
  
4 Cxyposn
  (Default - 50.0,50.0     Range -1.0e8 to 1.0e8)
  
  X,Y position of the cluster
  
4 Cyrange
  (Default - 1.0,100.0      Range - -1.0e8 to 1.0e8)
  
  Y start and end of acceptable area for cluster stars to lie in.
  
4 Doclust
  (Default - 'yes'      Choice - 'yes:no')
  
  Do the cluster stars?
  
4 Dofield
  (Default - 'yes'      Choice - 'yes:no')
  
  Do the field stars?
  
4 Fcrange
  (If there is a field file:-
     Default - bluest to reddest colour in field file
     Range - bluest to reddest colour in field file
   If the field is to have a uniform magnitude distribution:-
     Default - -20,20
     Range - -20 to +20)
  
  Range in colour that field stars can have.
  
4 Fdismod
  (Default - Value in field file, if any, or 0.0
   Range -  -1.0e8 to 1.0e8)
  
  Field distance modulus. If there has been the input of a field file
  with its own distance modulus, that distance modulus is first
  subtracted.
  
4 Feven
  (Default - 'yes'      Choice - 'yes:no')
  
  Use a uniform cmd distribution instead of the field cmd for the
  field stars.
  
4 Field
  (Default - null)
  
  The input table giving the field star CMD. It contains rows which
  have the number of stars in areas in a CMD.
  
 (A)The CMD (magnitude increasing down, colour increasing to right) may
    be thought of being divided up into a rectangular grid of areas of
    equal size. The CMD is then described by the number of stars in each
    area. Each row of the input table then contains the numbers of stars
    in the areas in one horizontal row of the grid, and the rows in toto
    make up the whole CMD. The number of columns in a row gives the
    horizontal number of areas in the grid and the number of rows gives
    the vertical number. The size of each area is described in the table
    descriptors, and the location of the grid in the CMD is also
    described there.
  
 (B)See the help on 'Method' for further description.
  
 (C)The table also has, as descriptors, the reddening and distance
    modulus of the CMD. Thus when the user inputs the desired reddening
    and distance modulus, the table ones are first subtracted.
  
    Thus, for example, if the user puts in the same reddening and
    distance modulus as the value in the field file, the values in the
    field table for the stars are used unaltered.
  
    The table has descriptors:-
  
    Name     Content
    ----     -------
    RED      The reddening
    DISMOD   The distance modulus
    MSTART   The magnitude of tlh corner of the tlh area in the CMD grid
    MSTEP    The vertical (magnitude) size of the areas
    CSTART   The colour of tlh corner of the tlh area in the CMD grid
    CSTEP    The horizontal (colour) size of the areas
  
    MSTEP and CSTEP MUST BE POSITIVE
  
 (D)The table can be made at the keyboard by the program TBKEY, and the
    decriptors added with the program TBWRDES.
  
4 Fmrange
  (If there is a field file:-
     Default - brightest to faintest magnitude in field file
     Range - brightest to faintest magnitude in field file
   If the field is to have a uniform magnitude distribution:-
     Default - -50, 50
     Range - -50 to +50)
  
  Range in magnitude that field stars can have.
  
4 Fnumber
  (Default - 1            Range -  0 to 100000000)
  
  Number of field stars to make
  
4 Fredden
  (Default - Value in field file, if any, or 0.0
   Range - -1.0e8 to 1.0e8)
  
  Field reddening. If there has been the input of a field file
  with its own reddening, that reddening is first subtracted.
  
4 Fseed
  (Default - 1234567891        Range - 1200000001 to 1400000001)
  
  Random number to seed making of random field stars.
  
4 Fxrange
  (Default - 1.0,100.0          Range - -1.0e8 to 1.0e8)
  
  X start and end of acceptable area for field stars to lie in.
  
4 Fyrange
  (Default - 1.0,100.0        Range - -1.0e8 to 1.0e8)
  
  Y start andend of acceptable area for field stars to lie in
  
4 Log
  (Default - 'no'      Choice - 'yes:no')
  
  This is a 'hidden' parameter, only accessable through the
  command line or the interface file.
  
  Put out a log as the program goes?
  
4 M1fact
  (Default - 1000.0       Range - 1.0e-8 to 1.0e8)
  
  This is the scale conversion from magnitude to height for the first
  colour band. You input the height  (linear flux equivalent) a star
  of magnitude 20.0 in the input magnitude (e.g. 'V') should have.
  
  This is used in the conversion in the output table between the
  magnitudes in column 5 (MAG1) and the heights of column 3 (HEIGHT1).
  
4 M2fact
  (Default - M1fact     Range - 1.0e-8 to 1.0e8)
  
  This is the scale conversion from magnitude to height for the second
  colour band. You input the height  (linear flux equivalent) a star
  of magnitude 20.0 in 'Mag' + 'Col' = 2nd magnitude band
  (e.g. 'V' + 'B-V' = 'B') should have.
  
  This is used in the conversion in the output table between the
  magnitudes in column 7 (MAG2) and the heights of column 4 (HEIGHT2).
  
4 Out
  (Default - null)
  
  The name of the file to conatin the output table.
  
4 Radcore
  (Default - 10.0       Range - -1.0e8 to 1.0e8)
  
  King core radius of cluster ( in pixels )
  
4 Radtide
  (Default - 100.0       Range - -1.0e8 to 1.0e8)
  
  King tidal radius of cluster ( in pixels )
  
4 Title
  (Default - 'Output from SPRINKLE')
  
  The Title to add to the output table
  
3 Author
  
   A J Penny                  RAL                             1990-11-20
  
  
2 Starfind
  
  This program finds stars in an image.
  
  It works by looking for boxes of roughly the seeing size which
  are significantly different from their surroundings. It is a good
  searcher, but slow, although it can be sped up by setting the
  search limits so it does not look for very improbable stars.
  
  It can deal with variations in the background level, but gets
  thrown by very large galaxies. If it encounters small galaxies, it
  gives them the benefit of the doubt and marks up a double star.
  
  It is not perfect, and the eye can do better in some cases. It is
  very good on very faint isolated stars, finding (real) things you
  wouldnt believe, but in very crowded fields or very overlapping
  stars, it is good to run STARFIND and then delete and add the few
  corrections to the star list produced. This can be done by INTERACT.
  
  The output file is not asked for until the very end of the program,
  after it has found the stars. If you want to input the file name at
  the beginning of the program, do so in the command line when running
  the program, with OUT='name of file' and TITLE='title to add to file'.
  This will then permit the program to access these when it needs them
  
  The program will not work on images smaller than 10x10.
  
3 Use
  
  First you must know very roughly the radius of the star images.
  
  1) Start the program.
  2) Input the control parameters
  3) A list of star positions comes out.
  4) Er - that's it.
  
  There are two options to omit two parts of the searching to speed
  things up. Use of these options will result in not finding a few of
  the tricky stars.
  
  There are also two input paramaters to select the range of stars
  found to differing probability limits.
  
  There is also a not very critical parameter, the size of the large
  sky box the program uses. I suggest you adopt the computer suggested
  size.
  
  If you are interested in the progress of the program you can set
  the parameter INFORM to different levels to get different levels of
  output on the terminal as you go along.
  
3 Method
  
  
 The finding is done by:-
  
 (A) Making a 'U-map' image of the input image. This is a map of the
     probability that a pixel is significantly higher than its
     surroundings, and so is likely to be near the peak of a star.
     Thus a 'sharpened' image is made of star-sized objects above the
     local levels.
  
 (B) Looking in the U-map image for:-
  
     1) Star peaks and plateaus
     2) Elliptical stars, and saying that is actually two stars
     3) Shoulders running off from stars, and saying they are actually
        stars
  
 (C) Weeding the stars found for spurious ones
  
 This process has been deliberately tuned to be reasonably generous
 in finding stars, so it should find more than there are. The output
 of this should be put into a proper star measuring program to
 sort out the (small number of) false alarms.
  
 There is a limit on the number of stars that can be found.
  
 These matters are described more fully in the sub-headings below.
  
  
4 U-map
  
  The U-map is made by:-
  
 Running a non-parametric test (one tailed mann-whitney U test)
 over every point in the image. At each point it takes a box
 (roughly a seeing size) round that point and compares it with
 an equal area around that box. It looks at the ranks of points
 when all put together, and assigns a probability
 (0-1 1=certain) to the chance that the ranks are NOT scattered
 at random, and thus that the data in the box is different
 AND higher from that in the annulus round it. This is then
 repeated with the comparision area separated by 1 pixel from
 the central box, and then with slices on each side,and then
 with slice on top and bottom. The comparision which indicates
 the most difference is taken.
  
 The U-map image of probabilities is a sharpened (on the scale
 of the box used) copy of the input. Thus the background (sky,
 large-scale effects such as galaxies, fringes, etc) is
 automatically allowed for. The box size is 3x3 for radius less
 than 1.75, 5x5 for radius less than 2.5 and then 7x7 up to 5.5,
 and therafter  ( nbox = 1 + 2*int(1.0+(radius-1.5)/2.0) )
  
  
4 Peaks
  
 The peaks are found by searching the U-map for isolated images.
  
    This is done by lowering a threshold and looking for isolated
    patches above those thresholds. The mean position of the largest
    size patch before it merges in the lowering with another is taken
    as the star position. The lowering continues until the U-map
    probability level of 'x' is reached (i.e. their is a 'x' chance
    that the values are not different from the surrounds). 'x' is
    is a user input number. An 'x' value of 0.001 will result in
    about 100 false detections in a 320 by 512 image. Thus
    normally, a value of 0.01 is used.
  
    The lowering then continues down to the 'y' probablity level,
    but only those patches which have values in the corresponding
    real image significantly (2.25 std devs) above the local sky
    level are found. This finds faint stars on the wings of bright
    ones. 'y' is normally 0.05, but to speed the process up, can
    be set to the 'x' level of step 3).
  
5 Sky
  
 The local sky level referred to above has previously been
 determined by the program.
  
 This is done by making a 'sky map', that is a temporary image the
 same size as the input image, with its pixel values set to what the
 program thinks is the value of the background sky at that pixel.
  
 It also determines another sky map, which have the local values of
 (sky+scatter), where 'scatter' is the largest reasonable value the
 sky noise could add to the sky level in a pixel.
  
 These are determined in one of three ways:-
  
  1) Subdividing the image into largeish (set by you, but suggested
     at 64x64) boxes, finding local modes and scatters, and then
     interpolating between these local modes by linear interpolation
     between the box centres. The scatter about the mode of the lowest
     mode is taken as the sky scatter.
  
  2) Taking the input image as having a uniform background. The mode of
     the image is found, and the std dev about this mode found.
  
     This is the default way.
  
  3) Looking for the minimum pixel value and taking that as the sky
     level. The noise is taken as the std dev about the mode level of
     the whole image.
  
  
 The default should be chosen unless there is smooth and
 significant change in the sky background (say from an elliptical
 galaxy which covers most of the image). If the change in the sky
 background is sharp, say from a globular cluster manifesting itself
 over 50 pixels, choose the default anyway.
  
4 Ellipticity
  
 The found images are searched for ellipticity, an indication of 2
 stars close together, merging to make one.
  
 The program looks at stars and sees if the U-test image shape of the
 star is elliptical. For a star to qualify as elliptical, the
 group of flagged pixels that make up the star (that is the number
 of contiguous pixels flagged as being below the present
 significance level) have to satisfy certain criteria:-
  
    - the ellipticity has to be greater than a given limit, 0.35
    - the semi-major axis has to be larger than a given limit
        (0.67 times the star image profile radius)
    - the area of the star has to be more than seven pixels
    - the area of the star must not touch the image edge
    - the area of the star does not contain other stars
  
 This searching is only done when new stars are found in the main
 program. On these occasions, all the stars are checked for
 ellipticity. Now some of these will have already been found
 to be elliptical when working at a higher contour level
 significance. Such stars are rechecked regardless, as the lower
 significance, larger, image may show up a better ellipticity. This
 rechecking of 'existing' doubles is however only done five times.
  
4 Shoulders
  
  Stars on the wings of brighter ones are searched for. These show up
  in the U-map image as long, narrow projections from the patches. At
  each lowering level, each image is searched for these projections.
  These projections are allowed down to a 9.5% probability level.
  
4 Weeding
  
 The stars found are weeded before output to remove spurious
 detections.
  
 This is done by:-
  
 1) The final list is searched for stars which are too close
    to each other (separation less than 0.66*star radius). These
    are replaced by one star at the mean position.
  
 2) For CCD images, bright stars have linearity problems and/or
    saturated centres, and these centres should be marked by
    INVALID flag levels for all pixels above some level. These
    stars are then found to have a number of isolated patches
    in the U-map (since the centre itself has all the same values),
    and so a test is made for these saturated centres, and the
    possibly more than 1 stars found there are reduced to one.
  
 3) If an image was trailed or by some other cause has elongated
    images, then this program will tend to regard each image
    as a double and mark it as so. If desired, the star list
    is looked at for an excess of close doubles at the same
    angle and separation, and these are reset to be single stars.
  
4 Maximum Number
  
 There is a user defined computer found star storage work space.
 This limits the number of stars that may be found. The default is
 10,000 stars. If more than this are found, the program stops.
 If more than this are found, the program stops. The resulting star
 list will have a non-complete and non-uniformly found content and
 should not be used as an reliable list. Although all the stars
 actually in it will be good ones, the found/not found distinction
 may vary with position, brightness, ellipticity, sky background,
 and presence of nearby stars in an unprdicatble way. If the
 max number of stars is found, then because of the weeding of close
 pairs and of multiple hits on large invalid areas, less than the
 maximum may be put out. Beware of thus thinking that all was ok
 just because of the fact that less than the maximum number were
 output.
  
3 Output
  
   The output table contains six columns. For each star, the entry is:-
  
          column  1 = x posn
                  2 = y posn
                  3 = height above sky
                  4 = utest value as 100000.0*(1.0 - [u-test
                                                      probablity])
                  5 = flag for 'STARFIND' type 1:single 2:nipple 3:ellipse
                              11:single-inval 12:nip-inval 13:ell-inval
                              4:weeded ellipse centre
                  6 = elliptical companion number (=0 if none)
  
3 Hidden_parameters
  
  The parameters MAXNUM, USAVE, OUTIM, PLIMIT and WLIMIT are 'hidden',
  that is they are only accessible by putting 'STARFIND parameter=value'
  on the command line or by using a previous LET command.
  
3 Inform
  
  The program can output progress information as it goes along.
  What is output to the terminal device by the program is set by
  the INFORM parameter. Thus:-
  
     INFORM      Output information
     ------      ------------------
     none        None
     some        Stages in the finding started and ended
     lots        As for `some', but also more detailed information, such
                 as the U-map level being looked at, and stars found
  
  In the typed-out information when INFORM = `lots', those lines relating to
  star finds are similar to the rows in the output table. The
  star number is however not the same as in the output, as there is a
  sequence of finding which may affect earlier finds, and so disrupt the
  star numbering. Thus a found star may later in the program be decided
  to be:-
    - replaced by two stars since the found star is too elliptical
    - removed as one of a number of false finds in an 'invalid' peak
    - removed as being too close to another star
  
  These last two removal processes also have their process informed to
  the terminal.
  
3 Parameters
  
4 Ellipse
  (Default - 'yes'        Choice -  'yes/no')
  
  After the first search, repeat, trying to see if any of the objects
  were elliptical and thus maybe double stars. YES/NO will enable/
  suppress this extra search.
  
4 Faint
  (Default - 'yes'        Choice -  'yes/no')
  
  After the first search, repeat, trying to see if any of the objects
  were had faint companions that were missed. YES/NO will enable/supp-
  ress this extra search.
  
4 In
  (Default - null)
  
  The name of the file containing the input image
  
  This can be either a `short' 16-bit integer or a `real' 32-bit real
  Starman NDF image.
  
4 Inform
  (Default - 'none'       Choice - 'none:some:lots')
  
  Switch to enable monitoring of the progress.
  
  The program can output progress information as it goes along.
  What is output to the terminal device by the program is set by
  the INFORM parameter. Thus:-
  
     INFORM      Output information
     ------      ------------------
      none              None
      some         Stages in the finding started and ended
      lots         As for `some, but also more detailed information, such
                   as the U-map level being looked at, and stars found
  
  In the typed-out information when INFORM = `lots', those lines relating to
  star finds are similar to the rows in the output table. The
  star number is however not the same as in the output, as there is a
  sequence of finding which may affect earlier finds, and so disrupt the
  star numbering. Thus a found star may later in the program be decided
  to be:-
  
    - replaced by two stars since the found star is too elliptical
    - removed as one of a number of false finds in an 'invalid' peak
    - removed as being too close to another star
  
  These last two removal processes also have their process informed to
  the terminal.
  
4 Maxnum
  (Default - 10000         Range - 1 to  1 000 000)
  
  The maximum number of stars that can be found.
  
  Hidden variable, only accessible from command line.
  
  If more than this are found, the program stops. The resulting star
  list will have a non-complete and non-uniformly found content and
  should not be used as an reliable list. Although all the stars
  actually in it will be good ones, the found/not found distinction
  may vary with position, brightness, ellipticity, sky background, and
  presence of nearby stars in an unprdicatble way. If the
  max number of stars is found, then because of the weeding of close
  pairs and of multiple hits on large invalid areas, less than the
  maximum may be put out. Beware of thus thinking that all was ok
  just because of the fact that less than the maximum number were
  output.
  
4 Out
  (Default - null)
  
  The name of the file to contain the output table of star positions.
  
  The output file is not asked for until the very end of the program,
  after it has found the stars. If you want to input the file name at
  the beginning of the program, do so in the command line when running
  the program, with OUT='name of file' and TITLE='title to add to file'.
  This will then permit the program to access these when it needs them
  
4 Outim
  (Default - null)
  
  The name of the file to contain output U-test image.
  
  This is only output, if 'YES' has been responded to 'Usave' (a hidden
  parameter).
  
4 Plimit
  (Default - 0.001        Range - 0.00001 to 1.0)
  
  Hidden variable, only accessible from command line.
  
  The limit of probability that the difference between the area inside
  the search box and the area around it has arisen by chance and that
  there is not really a star at this position. A value of 0.001 gives
  roughly 10 false detections in a 100x100 pixel area.
  
4 Radius
  (Default - 2.0         Range - 0.2 to 20.0)
  
  The approximate Half Power Half Width of the star images. This is what
  `profile' (qv) and `simplemag' find and what `measure' (qv) uses
  
4 Skytype
  (Default - 'local'            Choice - 'local:mean:minimum')
  
  Method of making the sky map.
  
 The local sky level and sky level scatter has to be determined.
  
 This is done by making a 'sky map', that is a temporary image the
 same size as the input image, with its pixel values set to what the
 program thinks is the value of the background sky at that pixel.
  
 It also determines another sky map, which have the local values of
 (sky+scatter), where 'scatter' is the largest reasonable value the
 sky noise could add to the sky level in a pixel.
  
 These are determined in one of three ways:-
  
 Code   Method
 ----   ------
 local    Subdividing the image into largeish (set by you, but
          suggested at 64x64) boxes, finding local modes and scatters,
          and then interpolating between these local modes by linear
          interpolation between the box centres. The scatter about the
          mode of the lowest mode is taken as the sky scatter.
  
          This is the default way.
  
 mean     Taking the input image as having a uniform background. The
          mode of the image is found, and the std dev about this mode
          found.
  
 minimum  Looking for the minimum pixel value and taking that as the
          sky level. The noise is taken as the std dev about the mode
          level of the whole image.
  
  
 The default should be chosen unless there is smooth and
 significant change in the sky background (say from an elliptical
 galaxy which covers most of the image). If the change in the sky
 background is sharp, say from a globular cluster manifesting itself
 over 50 pixels, choose the default anyway.
  
4 Smear
  (Default - 'yes'        Choice -  'yes/no')
  
   If an image was trailed or by some other cause has elongated
   images, then this program will tend to regard each image
   as a double and mark it as so. If desired (YES), the star list
   is looked at for an excess of close doubles at the same
   angle and separation, and these are reset to be single stars.
  
4 Title
  (Default - input image title or 'Output from STARFIND'    Choice - any)
  
  The Title to add to file ( named with 'OUT') containing the output
  star position table.
  
4 Usave
  (Default - 'no'        Choice -  'yes/no')
  
  Flag for saving the U-test image made in the calculations.
  
  Hidden variable, only accessible from command line.
  
4 Wlimit
  (Default - 0.05        Range - 0.0001 to 1.0)
  
  Hidden variable, only accessible from command line.
  
  The limit of probability that the difference between the area inside
  the search box and the area around it has arisen by chance and that
  there is not really a star at this position, FOR A POSITION WHICH HAS
  A SIGNAL VALUE of 2.5 std dev above the local sky. This is used for
  looking for stars on the wings of bright stars.
  
4 Xskybox
  (Default - 64 (or 1/2 image X size, if less)
   Range - 10 to half X size of image)
  
  Suggested X size of the box the program uses to average the sky
  values. Should be small compared to the scale of the sky variations.
  
  (This is only asked for if the 'SKYTYPE' parameter is set to 'local'.)
  
4 Yskybox
  (Default - 64 (or 1/2 image Y size, if less)
   Range - 10 to half Y size of image)
  
  Suggested Y size of the box the program uses to average the sky
  values. Should be small compared to the scale of the sky variations.
  
  (This is only asked for if the 'SKYTYPE' parameter is set to 'local'.)
  
  
3 Author
  
   A J Penny                  RAL            1991 Jan
  
2 Unccd
  
  This takes the raw image from a CCD and turns it into a clean image,
  corrected for many of the CCD characteristics such as Bias, Flat
  Field, etc.
  
  In effect it takes the CCD image which is a picture of the sky, with
  CCD artifacts imposed, and undoes the effects of these artifacts to
  restore the sky picture. It thus un-ccds the image, thus its name.
  
3 Use
  
  This is used for removing the CCD characteristics as far as possible
  from the image and turning it into nice image.
  
  The program can do any or all of the following actions:-
  
     - select an area in the image to be the output area
     - estimate a mean bias level from a bias area and subtract it
     - subtract a bias image
     - correct for non-linearity
     - subtract a dark image (scaled to the exposure time)
     - subtract a preflash image (scaled to the preflash time)
     - divide by a flat field image
     - subtract a night sky fringe pattern (scaled to the exposure time)
     - flag areas as `bad'
     - flag pixel values outside a given range as `bad'
     - normalise the output
     - display the output
  
3 Guide
  
 This is a brief guide on how to use `unccd' in calibrating CCD images.
  
 Background Knowledge
 --------------------
  
 You must have a general background knowledge of CCDs and Photometry:-
 read the section on 'Knowledge'.
  
 Make the Master Calibration frames
 ----------------------------------
  
 See the help on this in `Calibration_frames'.
  
 Use `unccd' to produce the processed exposures
 ----------------------------------------------
  
  1) Strip out the overscan area, and subtract its mean level
  2) Subtract any useful BIAS frame
  3) Subtract any useful PREFLASH frame
  4) Subtract any useful, scaled, DARK frame
  5) Divide by the FLAT frame
  6) Subtract any useful, scaled, FRINGE frame
  7) Flag bad areas with the bad pixel list
  
  
 Comments
 --------
  
 The end result should be inspected to see if the FRINGE exposure
 (if used) is appropriate in strength and pattern to the target
 expoure
  
 The user should consider why `unccd' does it so that step 5 is done
 AFTER steps 1 to 4, why it would be wrong to do step 5 before any of
 the steps 1 to 4, and why is step 6 done after step 5?
  
  
3 Knowledge
  
 Before using this program, it will prove well worth your while to
 have a general background knowledge of CCDs and Photometry. This
 section will point to some areas worth learning about.
  
  
 Understand the way a CCD works
 ------------------------------
  
 You can read all about the mechanics, the problems and the
 possibilities CCDs in many books. Two good examples are:-
  
   1) Chapter 2 of The University of Leeds thesis of John Buttress
   2) McClean's book on Electronic Astronomy.
  
 Learn about Photometry in general
 ---------------------------------
  
 See, for example, the University of Leeds thesis of Richard Noble.
 There are also many other books and articles are general photometry,
 such as Andrew Young's articles in `Methods in Experimental Physics',
 or Welch in the JRAS Canada.
  
 Learn about `unccd'
 -------------------
  
 Read this `unccd' help.
  
  
 Learn about the Starman program 'imcalc'
 ----------------------------------------
  
 This enables you to add images together, divide by constants,
 etc. (Useful in scaling to 1 second equivalents or to
 mean levels of 1.0)
  
 Learn about the Starman program 'imstat'
 ----------------------------------------
  
 You can do this by:-
  
 This enables you to measure the mean and std dev in an area. It is
 useful in determining levels so that `imcalc' can be used to make
 1.0 level mean exposures.
  
 Learn about the range of programs available
 -------------------------------------------
  
 Use the Help to browse through the Starman suite of programs, seeing
 the range of tools available.
  
  
 Be methodical in your work
 --------------------------
  
 Make a record of what you do, so you can go back over it later if
 you think that will be useful. Be prepared to justify on scientific
 grounds any decision you take (or fail to take).
  
  
 Make a list of the various categories of the exposures
 -------------------------------------------------------
  
 I.e., Bias; dark; preflash; flat field (called `sky', `dark sky',
 `flat', etc); the different star fields; the E-region standard
 exposures
  
 Look at all the images
 ----------------------
  
 Use the Starman program `imflash' to display the images.
  
 Are they what you expect?
  
 Make a note of the mean and std dev. The display range is typed
 out by `imflash', as (mean+3.std dev) to (mean-2.std dev). Or use
 `imstat'. Are the mean and std dev what other similar images have?
  
 Make a rough note of the seeing on the star field exposures
 (bad, average, good).
  
 Are there any funny effects in any exposure?
  
3 Details
  
  There are various details as to the use of the program which
  the sub-helps here will tell you about.
  
4 Bad_Areas
  
  A 'magic value' bad pixel flagging scheme is used. This may result in
  pixels being flagged as bad by the input of a 'bad pixel list' (qv),
  or by any of the input calibration images containing 'bad' pixels. Any
  pixel which is bad in the bad pixel list or any of the calibration
  images is flagged as 'bad'
  
4 Bad_Pixel_Lists
  
  In the input image (both in the area that will be output and in the
  bias level area), pixels may be flagged as bad by a 'bad pixel list'.
  These pixels will be set to 'invalid' in the output image.
  
  The list is a table which consists of rows of data, each of
  which describe a rectangular 'bad' area. Each row has 4 integers
  giving x,y ranges. Thus if the first 'bad' area to be described has a
  blh corner at x1,y1, and a trh corner at x2,y2, then the first row
  in the table will be x1,x2,y1,y2. Then the second entry will have
  the ranges for the second area, and so on.
  
  The coordinates are relative to the entire input image.
  
4 Bias_Level
  
  Whether or not the subtraction of the mean bias level of the exposure
  is done is controlled by the 'BIAS' parameter. If it is done, then an
  area of the input image is selected (defined in the 'NBIAS'
  parameter) and its mean calculated, with the non-use of pixels
  defined by the, optional, bad pixel list file given via the
  'BIASBAD' parameter.
  
  This mean value is then selected, and subtracted from the input.
  
4 Fringe_exposures
  
 Sometimes on astronomical CCD exposures which have been flat fielded,
 one can see a residual `fringe' pattern, looking like distorted
 Newton's rings. This effect comes from emission lines in the night
 sky interacting with the thickness of the CCD chip.
  
 What happens is that as chip are quite thin, a few light wavelengths
 from the top surface to the base, any incident light can suffer an
 interference effect. Thus the intensity of the light that falls on
 the silicon detector gets affected by this interference. So the total
 response of the chip depends not only on the response of the silicon
 for an individual pixel, but also how much interference has taken
 place. Normally, these two effects are not separated, and a `flat-field'
 exposure will measure the combination of the two. However, as the
 interference effect is a strong function of wavelength, the `flat'
 will vary markedly with wavelength, giving a `fringe' effect in the
 `flat', tracing out the variations in thickness of the chip over its
 surface area. This effect is normally washed out over the wavelength
 width of the filter response, and the fringing gets lost.
  
 If the night sky has emission lines in the part of its spectrum which
 falls with the filter response, then that additional light, having
 a narrow wavelength range, will have its own `flat', different from
 the total `flat' with (possibly, depending on the pattern of chip
 thickness variations) a `fringe' pattern. Thus using a normal
 `flat-field' will not `flatten' the sky contribution correctly.
  
 This is got round by seeing what this difference is, and allowing for
 it. One takes a long exposure of an area of sky where there are few
 or no  stars or other objects. (Such areas are usually in front
 of dark clouds.) Then after the standard processing, including
 using the normal `flat-field', the mean level is subtracted. What
 is left can be considered as the additional signal from the night
 sky emission lines. It can now be subtracted, scaled appropriately
 for exposure times, from other normal frames, after they have been
 processed.
  
 There are a number of additional effects to consider:-
  
  - The mean level was used to subtract the other night-sky light,
    as we wish to make the output sky level a correct match to the
    total incoming flux.
  
  - Often, the night sky emission line spectrum will vary. A simple
    scaling in strength may be allowed for by having a number of
    fringe frames, scaled by varying amounts, and seeing which does
    the best job in removing the fringe effect. A variation in the
    relative strength of a number of emission lines in the filter
    response wavelength coverage, will however mean making a totally
    new `fringe' frame.
  
  - `Fringe' frames may also be made from normal exposures. A
    large number of exposures, each containing a large proportion
    of blank sky with the astronomical objects in them occupying
    different positions, are taken. Then by averaging them with a
    technique that throws away divergent pixels (say modal averaging),
    the mean underlying night-sky `fringe' pattern may be seen.
  
  
3 General
  
  1)  A non-linearity in the input can be dealt with.
  
  2)  Special corrections can be done. At present, these are:-
  
       - AAT 1988 RCA CCD band correction
  
  3)  The image can be normalised, either scaled so that the average
      value in a selected area to be unity, or scaled by the exposure
      time to an exposure time of 1 second, or having a mean value
      subtracted.
  
  4)  The final image can be displayed on a image display.
  
  5)  The exposure time of the image is needed if an input calibration
      'dark' image or 'fringe' image is used. This exposure time is
      picked up from a descriptor, whose name is input by the user
      with the 'EXPNAME' parameter.
  
  
3 Calibration_frames
  
 This section describes how to make the master calibration frames which
 `unccd' uses to calibrate the program exposures.
  
 (In these descriptions, refeerence is often made to averaging frames.
  You should be aware of these various methods of averaging, their
  strengths and weaknesses, and especially how they deal with
  discordant pixels.)
  
 Determine the bad pixel list
 ----------------------------
  
 Look at a variety of types of exposures - bias; flat field; star field;
 standards. Are then any areas that look 'bad', i.e. the signal
 is clearly wrong. Too high, too low, etc. (A common fault
 is a part of a column can be significantly low.)
  
 Use `interact', with:- zoom, cvalues, area, inspect, etc, to determine
 the location of such areas. Make a bad pixel list (use `tbkey'),
 as described in the `unccd' help for the `bad' parameter.
  
  
 Determine the bias frame
 ------------------------
  
 1) Have a look
  
 2) Smooth a bias image with `imsmooth', on scales of 10x10, 50x50,
    and 100x100 to see if there is any overall pattern.
  
 If there is no pattern, ignore the bias frames. If there is one, then
 make a mean bias frame with as little noise as possible consistent
 with preserving any detectable pattern.
  
 Make the bias frame. First, strip out the overscan area, and then
 subtract its mean level. Then average with other bias exposures
 to make a mean bias frame.
  
 Then consider the output bias frame. Is it worthwhile using? Will
 it actually correct the exposures to any significant degree, or
 will it just add noise?
  
  
 Determine the 1 sec preflash frame
 ----------------------------------
  
 Use `unccd' to make each individual preflash frame.
  
  1) Strip out the overscan area, and subtract its mean level
  
  2) Subtract any useful bias frame
  
  3) Flag bad areas with the bad pixel list
  
 Then average other preflash exposures, each scaled to 1 sec, to make
 a mean preflash frame,
  
 Is the output preflash frame worthwile? For the exposures will
 it actually correct the exposures to any significant degree, or
 will it just add noise?
  
 Why do we need to make a `1 second' master frame?
  
  
 Determine the 1 sec dark current frame
 --------------------------------------
  
 Use `unccd' to make each individual dark frame:-
  
  1) Strip out the overscan area, and subtract its mean level
  
  2) Subtract any useful bias frame
  
  3) Flag bad areas with the bad pixel list
  
 Then average with other dark exposures to make a mean dark frame,
 each scaled to 1 sec.
  
 Is the output dark frame worthwhile? For the Star field exposures will
 it actually correct the exposures to any significant degree, or
 will it just add noise?
  
 Why do we need to make a `1 second' master frame?
  
  
 Determine the master flat field frames
 --------------------------------------
  
 Use `unccd' to make each individual flat frame.
  
  1) Strip out the overscan area, and subtract its mean level
  
  2) Subtract any useful bias frame
  
  3) Subtract any useful preflash frame
  
  4) Flag bad areas with the bad pixel list
  
 Then take the individual ones and average them together to make
 a mean.
  
  
 Determine the 1 sec fringe frame
 --------------------------------
  
 Use `unccd' to make each individual fringe frame:-
  
  1) Strip out the overscan area, and subtract its mean level
  
  2) Subtract any useful bias frame
  
  3) Flag bad areas with the bad pixel list
  
  4) Flag any areas contaminated by stars
  
  5) Divide by the flat field for the filter
  
  6) Subtract the mean level
  
  7) Divide by the exposure time in seconds
  
 Then average a number of these individual fringe frames to make a
 mean fringe frame. This is now scaled to 1 sec. The averaging technique
 should be one that rejects pixels in individual frames which are
 contaminated by stars or cosmic rays.
  
 Is the output fringe frame worthwhile? For the Star field exposures will
 it actually correct the exposures to any significant degree, or
 will it just add noise?
  
 Why do we need to make a `1 second' master frame?
  
3 Input/Output
  
  1)  The input image can be in one of a number of formats.
  
    The formats and the value of the 'DTYPE' parameter to select them
    are:-
  
            Format                                 DTYPE
            ------                                 ----
  
    A) Signed 16-bit integer (-32768 to 32767)    'SIGNED'
    B) Unsigned 16-bit integer (0-65535)          'UNSIGNED'
    C) Which is flagged as signed but actually    'BADSIGNED'
       contains unsigned numbers (0-65535)
    D) Real 32-bit numbers                        'REAL'
  
  2)  The input calibration images are either `real' or `short'
      images.
  
  3)  All calculations inside the program are done in REAL*4 (32-bit)
      precision.
  
  4)  The final image can be output to file. This output is either
      a `real' image, or a `short' image with
      user-chosen BSCALE and BZERO  to deal with the 16-bit
      resolution of the output pixel values.
  
3 How_to_Normalise
  
  The output image may be normalised (that is its mean level set to
  1.0), before the final output if desired.
  
  Whether this is done, and if it is then how, is controlled by the
  'NORM' parameter. The options are:-
  
     'NORM'          Method
     ------          ------
  
      Flux        Normalise average val to 1.0 (divide by mean)
      Time        Norm values to what they would have been if the
                  exposure time had been 1.0 seconds
      None        No normalisations
      Sub         Subtract mean
  
  If normalisation is done, and 'Flux' or 'Sub' is chosen, then the
  the mean has to calculated. The area of the image used to calculate
  the  mean can be set by the 'NNORM' parameter.
  
  The 'NNORM' parameter defines the (X start, X end, Y start, Y end) of
  the chosen area.
  
  The default is the whole of the area that will be stored as the
  output image.
  
3 Display
  
  The output image may be displayed. This is controlled by the 'DISP'
  parameter.
  
  If the display has been chosen, then the 'NDISP' parameter is used
  to select an area of the image to display. The area is input as
  (X start, X end, Y start, Y end of the input image area).
  
  The default is the entire output area.
  
  After the display the user is ask, via the 'ENOUGH' parameter, for
  when the program should continue, as some displays remove the
  picture when the program ends.
  
  The display is done with a pixel value contrast of +/- 3 std dev
  about the mean, with high pixels values set as black, and low as
  white.
  
3 Parameters
  
4 Bad
  (Default - null)
  
  The table containing the bad pixel list of 'bad' areas (if none,
  press 'return').
  
  These will be set to 'invalid' in the output image.
  
  The list is a table which consists of rows of data, each of
  which describe a rectangular 'bad' area. Each row has 4 integers
  giving x,y ranges. Thus if the first 'bad' area to be described has a
  blh corner at x1,y1, and a trh corner at x2,y2, then the first row
  in the table will be x1,x2,y1,y2. Then the second entry will have
  the ranges for the second area, and so on.
  
  The coordinates are relative to the entire input image.
  
  The table is in the Starman table format of a real NDF file.
  
4 Bias
  (Default - 'no'          Choice - 'yes:no')
  
  Do you want to find a mean bias level from an `overscan' area?
  
  This mean will be subtracted from the image.
  
  The area is defined by the `NBIAS' input.
  
4 Biasbad
  (Default - null)
  
  The table containing the bad pixel list for the bias 'overscan'
  area (if none, press `return').
  
  These will define the areas of the bias 'overscan' area not to use in
  calculating the mean bias.
  
  The table consists of rows of data, each of
  which describe a rectangular 'bad' area. Each row has 4 integers
  giving x,y ranges. Thus if the first 'bad' area to be described has a
  blh corner at x1,y1, and a trh corner at x2,y2, then the first row
  in the table will be x1,x2,y1,y2. Then the second entry will have
  the ranges for the second area, and so on.
  
  The coordinates are relative to the entire input image.
  
  The table is in the Starman table format of a real NDF file.
  
4 Correct
  (Default - 'none'      Choice - 'none:mode1')
  
  Do you want to correct the image for some type of fault?
  
  Choice    Result
  ------    ------
  None      No correction.
  Mode1     The AAT type row/column fault. In this, at present the
            high/low adjacent rows are just averaged.
  
4 Disp
  (default - 'no'              Choice - 'yes:no')
  
  Do you want the output image displayed on the screen?
  
4 Dolims
  (Default - 'no'      Choice - 'yes:no')
  
  Do you want to flag values above and below certain values as `bad'?
  
  If you do, then you will be asked in the `lims' parameter what
  limits to acceptable values you want to input.
  
4 Dtype
  (Default - 'signed'     Choice  - 'unsigned:signed:badsigned:real')
  
  The input image is taken as made of Integer*2 16-bit numbers, or
  as real 32-bit numbers. (The calculations inside the program use
  real numbers.)
  
  The formats and the value of the 'DTYPE' parameter to select them
  are:-
  
            Format                                 DTYPE
            ------                                 ----
  
       Signed 16-bit integer (-32768 to 32767)    'SIGNED'
  
       Unsigned 16-bit integer (0-65535)          'UNSIGNED'
  
       Which is flagged as signed but actually    'BADSIGNED'
       contains unsigned numbers (0-65535)
  
       Real 32-bit numbers                        'REAL'
  
  The data is read in in the proper way. The input image may have
  BSCALE and BZERO parameters, and these are applied, but any
  magic value INVAL parameter is ignored.
  
4 Enough
  (Default - 'yes'      Choice - 'yes:no')
  
  Finished looking at screen?
  
4 Expname
  (Default - 'exposed'          Choice - any)
  
  The name of the descriptor in the input image giving the exposure
  time. A choice of 'None' indicates there is no such descriptor.
  
4 Exptime
  (Default - 1.0      Range - 0.0 to 1.0e8 )
  
  Length of exposure in seconds.
  
  This is only used if the exposure time cannot be found from the
  input image header which the user has said contains the
  exposure time.
  
4 Gain
  (Default - 0.0    Range - -1.0e8 to 1.0e8)
  
  The gain of the chip, in terms of electrons per adu. This is added
  as information to the output image descriptors. If 0.0 (the default)
  is input, then this is not added.
  
4 Im_b
  (Default - null)
  
  The name of the file with the bias frame to subtract from
  the input image.
  
  This should be a standard Adam .NDF file.
  
  A null response means that no bias is to be input.
  
4 Im_d
  (Default - null)
  
  The name of the file with the dark frame to subtract from
  the input image.
  
  This should be a standard Adam .NDF file.
  
  A null response means that no dark is to be input.
  
  It should be a dark frame scaled so as to be that which would
  result from a 1 second dark exposure.
  
  This is scaled in the program to the actual exposure time of the
  exposure.
  
4 Im_fl
  (Default - null)
  
  The name of the file with the flat field frame to divide into the
  processed (bias, preflash, dark) input image.
  
  This should be a standard Adam .NDF file.
  
  A null response means that no flat field is to be input.
  
  This should be the sensitivity function of the chip, thus a pixel
  of high sensitivity will have a high value, and one with low
  sensitivity will have a low value. It should have a mean level of
  1.0.
  
4 Im_fr
  (Default - null)
  
  The name of the file with the fringe frame to subtract from
  the input image.
  
  This should be a standard Adam .NDF file.
  
  A null response means that no fringe is to be input.
  
  It should be a fringe frame scaled so as to be that which would
  result from a 1 second exposure.
  
  This is scaled in the program to the actual exposure time of the
  exposure.
  
4 Im_p
  (Default - null)
  
  The name of the file with the preflash frame to subtract from
  the input image.
  
  This should be a standard Adam .NDF file.
  
  A null response means that no preflash is to be input.
  
  It should be a Preflash frame scaled so as to be that which would
  result from a 1 second preflash exposure.
  
  This is scaled in the program to the actual preflash time of the
  exposure.
  
4 In
  (Default - null)
  
  The name of the input image file.
  
  This should be a standard Adam .NDF file, but can be in a number of
  formats (real, signed 16-bit, unsigned 16-bit, badsigned 16-bit).
  
4 Lims
  (Defaults -  0.0,32767.0 or 0.0,65535.0      Range - -1.0e10 to 1.0e10 )
  
  The low and high limits to acceptable values in the input image.
  
  If you have answered 'YES' to the `dolims' query, then you are
  asked this.
  
  The values wanted are those after scaling for BSIZE and BZERO of
  the input image. Thus they are not the file storage 16-bit values,
  but the true, proper values they should be if it were not for the
  need to work with 16-bit images.
  
4 Lin
  (Default - 'none'      Choice - 'none:mode1')
  
  Do you want to correct the input data for non-linearity?
  
  Choice   Result
  ------   ------
  None     No linearity correction
  
  Mode1    This correction is of the form:-
           Raw-bias = (Corrected-bias)*[1.0 + factor*(Corrected-bias)]
  
4 Linf
  (Default - 3.2*10-6      Range - -1.0e8 to 1.0e8)
  
  The factor 'factor' in the linearisation equation to use in correcting
  for the non-linearity of the CCD. (see paramater 'lin'.)
  
4 Narea
  (Default - 1,nx,1,ny           Range - 1 to 100000)
  
  This is the X start, X end, Y start, Y end of the image area to be
  taken, processed and output.
  
  This is input as four integers, separated by commas.
  
4 Nbias
  (Default - 1,1,1,1          Range - 1 to 100000)
  
  This is the X start, X end, Y start, Y end of the bias `overscan'
  area to be used.
  
  This is input as four integers, separated by commas.
  
4 Ndisp
  (Default  -  Output area         Range - 1 to 100000)
  
  This is X start, X end, Y start, Y end of the input image area to be
  displayed.
  
  This is only asked for if the query `disp' has been answered `YES'.
  
  This is input as four integers, separated by commas.
  
4 Nnorm
  (Default  -  Output area        Range - 1 to 100000)
  
  This is the X start, X end, Y start, Y end of the image area to be
  used in calculating the normalising value for the scaling.
  
  This is only asked for if the query `norm' has been answered `FLUX,
  or `SUB'.
  
  This is input as four integers, separated by commas.
  
4 Noise
  (Default - 0.0        Range -  -1.0e8 to 1.0e8)
  
  The read-out noise of the chip. This is added as information to the
  output image descriptors. If 0.0 (the default) is input, then this
  is not added.
  
4 Norm
  (Default - 'none'    Choice - see below)
  
  The method of normalising the image.
  
  Option     Result
  ------     -------
  flux       Normalise average val to 1.0 (divide by mean)
  
  time       Norm values to what they would have been if the
             exposure time had been 1.0 seconds
  
  none       No normalisations
  
  sub        Subtract mean
  
4 Objname
  (Default - 'OBJECT'     Choice - any)
  
  The name of the descriptor in the input image giving the object
  name. A choice of 'None' indicates there is no such descriptor.
  
4 Offset
  (Default - 0,0     Range - -10000 to 10000)
  
  The (X,Y) offset, relative to the entire raw input image, of the
  pixels of the reference (dark, flat field, etc.) images and bad
  pixel lists.
  
  Thus if the reference images were made in such a way that the (1,1)
  pixel of the reference images should be applied to the (11,11) pixel
  of the ENTIRE input image (not, that is, to the location of the
  pixel in the area in the input image that will become the output
  image), then the `offset' would be (10,10).
  
  The non-default option is mainly used for two cases:-
  
     When a window of the normal CCD image has been used, so that only
     a part of the CCD image is read out. In this case, then the
     reference images will have normally been made for the `normal'
     entire CCD area - a bigger area. In these cases, the `offset'
     will always be two positive numbers, being the shift of the start
     of the windowed small image from the start of the normal large
     CCD image.
  
     When an `overscan' bias area is at the left of the image, so that
     the reference images and the bad pixel lists, while refering,
     normally, to the de-biased image, thus start not at the (1,1)
     pixel of the raw input image, even if it is a whole CCD image.
  
  If, further, the output image blh has an offset from the (1,1) pixel
  of the input image, then this does NOT affect the `offset'.
  
4 Out
  (Default - null)
  
  The output file.
  
  This is a 'real' image or a 'short' Integer*2 image with
  BZERO, BSCALE as chosen by the user. The default BZERO and BSCALE are
  taken from the first input frame.
  
  It is a standard Starman ADAM NDF image.
  
  If you put a null response in, then the output image is not stored.
  
  It is a standard Starman ADAM NDF image.
  
4 Outtype
  (Default - same as input          Choice - 'real:short')
  
  Should the output image be:-
  
  'real'    This is a 32-bit real image with a precision of about
            1 in 10 million, nad values between +/- 10**38
  
  'short'   This is a 16-bit integer image, with a precision of about
            1 in 60000. The numbers are stored on disk as integers
            between -32768 and +32767. They are used in the Starman
            programs as real numbers, by the use of BSCALE and BZERO,
            such that:-
  
                'used value' = BSACLE*'disk value' + BZERO
  
            The advantage of this is that if this precision is adequate
            then the files are half the size of 'real' files. The
            problem is that one has to be constantly aware of the
            'digitisation' of the images when being stored on disk.
            Also, many other program packages do not use the
            BSCALE and BZERO, so cannot get the 'true' values.
  
4 Prefname
  (Default - 'PREFLASH'       Choice - any)
  
  The name of the header in the input image which holds the
  length of the preflash exposure in seconds.
  
  If 'None' is entered, the user is asked for the preflash
  time.
  
  This parameter is only asked for if a preflash frame is used.
  
4 Preftime
  (Default - 1.0      Range - 0.0 to 1.0e8 )
  
  Length of preflash in seconds.
  
  This is only used if the user inputs that there is a prflash frame
  and that the preflash time cannot be found from the input image
  header.
  
4 Scale
  (Default - as described below          Range - -1.0e20 to 1.0e20)
  
   The two output image constants of BSCALE and BZERO.
  
   The output image is Integer*2, and has BSCALE and BZERO headers so
   that
  
       Real pixel value = BSCALE*(file pixel value)  + BZERO
  
5 Bscale
  (Default - 1st input image BSCALE value, or if none, then 1.0)
  
   The BSCALE parameter for the output image.
  
   Thus normally this is 1.0, or that of the input image.
  
   If the output image has been scaled for averaging, then a
   different scale may be appropriate.
  
   Thus for the flat field output, the pixels would all contain 1!
   So in these cases the default scale is 0.0001, and so in the case
   of the flat field the values would be about 10000, allowing for a
   reasonable dynamic range. For the averaging of preflash, and bias,
   a scale of 1.0 would be ok, but for dark and fringe, a scale of
   0.0001 might be ok, as these are scaled to 1 second exposure times.
   Anyway for these, have a look at the output, to see if the dynamic
   range has been chosen ok.
  
5 Bzero
  (Default - 1st input image BZERO value, or if none, then 0.0 or
   32766.0)
  
   The BZERO parameter for the output image.
  
   Normally this is 0.0 or the input value.
  
   However for UNSIGNED or BADSIGNED input (16-bit unsigned numbers),
   the default is put at 32766, so the full range of numbers can be
   dealt with in the output. The value is 32766, not 32767, and thus
   a number of 65536 is put out as invalid (flagged with INVAL value).
   The reason for so chopping the highest unsigned number, is that
   -32768 is reserved as the INVAL number, and it was thought better
   to loose the 65536s than the 0s.
  
4 Tit
  (Default - see below                       Choice - any)
  
  The Title to add to the output image. Default is the name in the
  image 'objname' descriptor.
  
3 Author
         A.J.Penny  RAL             1991 March
  
1 Tb_progs
  
 These are the Starman programs designed for handling tables.
  
 TBHSEET is the main interactive program for handing tables.
  
 The tables are the Starman format tables, using Real 32-bit
 Starman .SDF Adam images.
  
  
  
2 Tbcalc
  
 Calculate table elements.
  
 This program allows arithmetic and mathematical functions to be
 applied to a number of input tables and constants by means of a
 FORTRAN-like expression which specifies the required functions. In
 addition to the standard FORTRAN facilities, a number of special
 functions are available (e.g. for adding noise).
  
3 Method
  
 For up to 20 columns of the output table, the user inputs a
 Fortran-like equation (through the parameters EQN1, EQN2, ...).
 These equations can contain references to:-
  
   - specified columns of specified tables (which must all have the
     same number of rows, but mayhave different numbers of columns)
   - variables
   - constants
   - Fortran operators on these (e.g. '+', or 'cos()', ... )
  
 (For more details on the structure of these equations ) see
 the 'equation' sub-help.)
  
 For each specified output column, the relevant equation is
 analysed and the operations are performed. Each row of that output
 column contains the results of the equation, with the data for
 the input tables coming from the matching row of those input tables.
  
 More specifically, the equations are analysed to identify the names
 of tables and variables and to evaluate constants and are then
 converted into reverse-Polish notation. The tables and variables are
 prompted for in alphabetical order and the program then performs
 simple 'stack-arithmetic' to evaluate the expression for each output
 table element.
  
 The output table can be made by:-
  
   - Imposing the calculated columns on a 'template' table - (which
     must be one of the input tables, if there are any)
   - Imposing the calculated columns on a 'template' table - (which
     must be one of the input tables, if there are any) - and zeroing
     all the other columns.
   - Making a new table from scratch - whose total number of
     columns is user defined, and whose columns that are not
     calculated set to zero.
  
 If a 'template' table is used, and any of the calculated columns
 are 'beyond' the end of the template, then the output is extended
 to hold those, with any columns missed out set to zero.
  
 The size of the output table is:-
  - That of the 'template' table, plus (optionally) some columns.
  - Or has a user defined number of columns with the number of rows
    being the same as the number of rows in the input tables.
  - Or, if there are no input tables, the number or columns and rows
    are user defined.
  
3 Equations
  
 An arithmetic expression of up to 80 characters which gives the
 function to be evaluated for each output table element. The syntax
 is similar to Fortran (same operator precedence, etc.) but with the
 following differences:
  
     a) Input tables are represented by any of the variables TAn1,
        TBn2, ... to TZnm, where the 'A', 'B' etc., refer to the
        table and the 'n1', 'n2', .. etc., refer the column number
        in that table to use.
  
     b) Numerical parameters by any of the variables variables A to Z
  
     c) Constants by any numerical Fortran constant (real or integer,
        including exponent if required).
  
     d) Arithmetic is performed as though all values were real, The
        actual calculations are performed in double precision, and
        the results translated back to reals.
  
     e) The standard Fortran functions are available and identified
        by their generic names, i.e. SQRT, EXP, LOG10, LOG, SIN, COS,
        TAN, ASIN, ACOS, ATAN, ATAN2, SINH, COSH, TANH, ABS, AINT,
        ANINT, MOD, SIGN, DIM, MIN & MAX. Note, however, that MIN
        and MAX may take only 2 arguments.
  
     f) To avoid problems with the way the Starlink environment
        handles character parameters:-
  
         The comma ',' must be replaced with the colon ':',
         for separating function arguments.
  
         The division sign '/' may be replaced by the percent sign '%',
         although this latter substitution is not necessary when
         replying to a prompt at the terminal.
  
     g) There are three extra functions available:-
  
        CLIP(A,B,C)  This gives the value B so long as it lies in
                     the interval A to C (inclusive). Otherwise it
                     gives a zero result. It may be used to remove
                     output values outside a certain range (e.g.
                     if a division operation has resulted in very
                     large output values).
  
        GAUSS(X)     Gives gaussian noise with zero mean and
                     standard deviation X (the value returned is
                     different at each element and for each call
                     of GAUSS).
  
        RAN(X)       Gives uniform noise with a value between zero
                     and X (the value returned is different at each
                     element and for each call of RAN).
  
     h) The equation can hold the characters 'RR' and 'CC'. These
        denote the 'row number' and the 'column number'.
  
  For example, an equation of the form:-
  
        TA2*3.3 + 0.5 + COS(TB1) + A + MOD(RR:10.0) + CC%3
  
  will fill each row of a specified output column with:-
  
    ( 3.3 times the element in that row of column 2 of the input table
        specified through parameter 'INA' )
  + ( 0.5 )
  + ( cosine of the element in that row of column 1 of the input table
        specified through parameter 'INB' )
  + ( the user defined value of the variable 'A' )
  
  + ( row number, modulo 10 )
  
  + ( (column number)/3 )
  
3 Input
  
  Only tables and variables used in the expressions are prompted for and
  these are requested in alphabetical order, and only once each.
  
3 Parameters
  
4 A
  (Default - 0.0           Range -1.0e37 to 1.0e37
  
  The value to be used in the expressions for the value of
  the variable 'A'.
  
  [This help applies to any of the input variables from 'A', 'B',
   'C' .... 'Z'.]
  
4 Clear
  (Default - 'no'     Choice - 'yes:no')
  
  Are the columns of the output table that have not been set by
  the equations to be set to zeroes?
  
4 Column
  (Default - 1       Range - 0 to 999 )
  
  The column number in the output table that the results of the
  calculations from the equation are to be put into.
  
  A response of zero indicates that no more columns are to be
  calculated.
  
  [This help applies to 'COLUMN1', 'COLUMN2', ... 'COLUMN20'
   which apply to any of the up to 20 input equations.]
  
4 Eqn
  (Default - null          Choice - as defined below)
  
  The FORTRAN-style expression that gives the elements in the
  defined (by 'ColumnN') column in the output table.
  
  Its style is given the 'equation' section of this help.
  
  [This help applies to 'EQN1', 'EQN2', ... 'EQN20'
   of any of the up to 20 input equations.]
  
4 Head
  (Default - see below          Choice - any)
  
  The (up to) 20 character string giving the 'header' of the
  column for the first equation.
  
  The default will be that of the template table or just blanks
  if there is no template.
  
  [This help applies to 'HEAD1', and any of the other 'HEAD2',
   'HEAD3', .... 'HEAD20', of the up to 20 input equations,
   each with its own column from 'NCOLUMN1' , etc..]
  
4 Ina
 (Default - null)
  
 The input table corresponding to 'TA' to be used in the arithmetic
 expressions.
  
 If a template is used, and no tables are mentioned in the equation,
 this will be used for the template file.
  
4 Inb
 (Default - null)
  
 The input table corresponding to 'TB' to be used in the arithmetic
 expressions.
  
 [This help is also used for the other input tables 'TC', ... 'TZ'.]
  
4 Numcols
  (Default - largest column number defined    Range - that to 999)
  
  The number of columns in the output table. If a template table is
  not being used, then this must be a user-defined value. This
  number must be at least as large as the largest column number
  defined for any of the equations.
  
4 Numrows
  (Default - 1             Range - 1 to 100000)
  
  If there are no input tables, the user has the choice of how
  many rows there are in the output table. Then all the rows will
  have the same set of values for the columns. The names of the
  rows will be '#1', '#2', etc..
  
4 Out
  (Default - null)
  
 The output table to contain the result.
  
 This contains the defined columns. There may be other columns. These
 other columns contain either the values from the input template table,
 or are full of zeroes if there was;- no input tables, no input
 template table, or the user decided to set those columns to zero.
  
 The size of the output table is:-
  - That of the 'template' table, plus (optionally) some columns.
  - Or has a user defined number of columns with the number of rows
    being the same as the number of rows in the input tables.
  - Or, if there are no input tables, the number or columns and rows
    are user defined.
  
  The names of the rows will either be those from the template table,
  or will be '#1', '#2', etc..
  
  The table is stored as a standard Starman table in an ADAM .SDF image,
  with `real' 32-bit real values.
  
4 Seed
  (Default - 1234567891    Range - 1200000001 to 1400000001)
  
  The seed number to be used in any random number generators.
  This is used in the 'GAUSS()' and 'RAN()' operators. These
  will provide the same pattern of numbers in the same
  seed number is input.
  
  It has to be a large positive odd number.
  
4 Template
  (Default - 'none'      Choice - 'none:ta:tb:tc:td:te:tf:tg:th:ti:tj:
                                   tk:tl:tm:tn:to:tp:tq:tr:ts:tt:tu:
                                   tv:tw:tx:ty:tz')
  
  The parameter that defines the input table to be used as the
  template for the output table.
  
  If a template tables is used (selected from the 'TA', etc. parameters
  that must come from those already used in the 'EQN1', etc.,
  parameters), then the output table is a copy of the that template
  table, except for the new columns values from the equations (with
  the choice of zeroing all the other values).
  
  If a table is mention in the equations, then the first 'default's and
  'choice's are used. If not, then the second are.
  
4 Title
  (Default - title of input template table or 'Output from Tbcalc'
   Choice - any )
  
  The title for the output table.
  
4 Use_template
  (Default - 'no'        Choice - 'yes:no' )
  
  There are no input tables, so use a template table to provide
  names, headers, number of rows and columns?
  
3 Author
  
  Alan Penny              RAL            1991 Dec
   (adapted from MATHS of R.F.Warren-Smith)
2 Tbchart
  
 This plots out a realistic looking star map, with filled circles,
 bigger for brighter stars, at the positions of an input list of
 star positions and magnitudes. The star identifications may be put
 by the stars. Overlapping stars may be distinguished by having
 circles round all stars. If used, these circles may be removed
 (overwritten).
  
 The input file is a table with columns with headers showing the
 'X','Y' positions and 'MAGNITUDES' or 'HEIGHTS'. If these headers
 are absent, it is assumed that columns 1,2,3 have X,Y,MAG.
  
 The program is worked using a menu-driven approach. You choose
 various options from the menu. This menu can be driven through a
 'panel-button' type of display.
  
 With an interactive device, a cursor can be used to read out the
 cursor position and the details of the nearest star read out.
  
 The user has control of the ranges of star positions and magnitudes
 that are plotted out and the size of the area plotted. More than
 one input list may be plotted.
  
 In a star identifier, a '#' as the 1st charcater is ignored, and a star
 identifier consisting solely of '#' is not put out.
  
3 Menu
  
  This is the menu of options open to you.
  
  Option        Function
  ------        --------
  clear         Clear plot
  close         Close the graphical device
  cursor        Use cursor to get position and nearest star
  exit          Exit from this program
  getdata       Get star posns and magns from an input table
  label         Plot by each star its name from input table
  lsize         Set the size of the names written by the stars
  mrange        Set the magnitude range of stars to be plotted
  mscale        Set rate which stars get bigger with magnitude
  open          Open the plot device
  panel         Switch between panel and keyboard option selection
  plot          Plot the stars as filled-in circles
  prange        Set the range in X an Y of stars to be plotted
  psize         Set the range of the graph axes in X and Y
  ring          Write rings round stars
  ring_rem      Remove rings written round stars
  
 To input cursor positions, position cursor at desired point
 and press any key. End by locating cursor outside graph
  
3 Cursor_Use
  
   To input cursor positions, position cursor at desired point
   and press any key. End by locating cursor outside graph
  
3 Panel_choice
  
 In the menu-driven mode of this program, there is the capability
 to interact with this menu in a `windows' type mode. If you choose
 the `Panel' option in the `Option' choice, then if you have an
 X-window device a small panel appears on the screen. This has what look
 like buttons with all the available options. You select these by
 putting a cursor on the `button' and then pressing a mouse button.
  
 The panel has a `help' button which lists out one line
 descriptions of all the options. This button also tells you what
 the program is doing:- 'working', 'waiting', etc.
  
3 Parameters
  
4 Devlimx
  (Default - Min,max in table      Range - -1.0e10 to 1.0e10)
  
  The X start and end of the area to be plotted.
  
4 Devlimy
  (Default - Min,max in table      Range - -1.0e10 to 1.0e10)
  
  The Y start and end of the area to be plotted.
  
4 Gtype
  (Default - 'xwindows'            Choice - any)
  
  A character string giving the local name for the graphics
  display type.
  
  'xwindows' will put it out on the screen of your X-window,
  if you are using one.
  
  If 'ask' is input, then the program asks a very similar question,
  in a different way. A response here of '?' will bring up a listing
  of all the possible names of graphics devices which are supported
  on your machine, and you then input the appropriate name.
  
4 Hmin
  (Default - Minimum in table       Range - 1.0e-10 to 1.0e10)
  
  The zero point in the scale for plotting the radii of the
  circles to represent a star. These circles have radii
  of:- (MMIN-mag)*MSCALE in terms of the plotted scale.
  
  MMIN is converted from 'Hmin' by (30.0-2.5*alog10(hmin))
  
4 Hrange
  (Default - Min,max in table      Range - 1.0e-10 to 1.0e10)
  
  The start and end of the range of heights in the table
  that a star can have to be plotted.
  
  The heights are converted to magnitudes by the equation
  Mag = 30.0 - 2.5*alog10(ht).
  
4 In
  (default - null)
  
  The name of the file containing the input (position, magnitude)
  table. It must have at least three columns.
  
  The program looks for columns with headers 'X', 'Y', and 'MAGNITUDE'.
  If it cant find 'MAGNITUDE', it will look for 'HEIGHT'. If it cant
  find these, it will assume that Column 1 has 'X', Column 2 has 'Y'
  and Column 3 has 'MAGNITUDE'. If 'HEIGHT' is used, these are
  transformed into magnitudes by the equation:-
  
         Mag = 30.0 - 2.5*alog10(ht)
  
  Abbreviations and lower case headers are accepted.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Linecol
   (Default - 'black'            Choice - `black:white')
  
    Colour of plot lines. This is determined by whether you have a
    black or white background to your plots.
  
4 Lsize
  (Default - 1.0               Range - 0.0 to 1.0e10)
  
  The size of the text to be used when plotting the stars
  identifiers. A size of 1.0 gives letters with heights of about
  1/100th of the plotted Y range.
  
4 Mmin
  (Default - Maximum in table       Range - -1.0e10 to 1.0e10)
  
  The zero point in the scale for plotting the radii of the
  circles to represent a star. These circles have radii
  of:- (MMIN-mag)*MSCALE in terms of the plotted scale.
  
4 Mrange
  (Default - Min,max in table      Range - -1.0e10 to 1.0e10)
  
  The start and end of the range of magnitudes in the table
  that a star can have to be plotted.
  
4 Mscale
  (Default - 1.0        Range - -1.0e10 to 1.0e10)
  
  The 'SCALE' in the scale for plotting the radii of the
  circles to represent a star. These circles have radii
  of:- (MMIN-mag)*MSCALE in terms of the plotted scale.
  
4 Numbutt
  (Default - see below          Range - 2 to 3)
  
  Number of `X-Window' buttons available on the mouse.
  
  Some devices have two and some have three buttons available. This
  can depend both on their actual presence, and also on the X Windows
  software that is being run.
  
  With three buttons, then the Starman programs use all three, with
  the right-hand button being used mainly as the 'exit' button.
  
  With two buttons, then the third button is simulated by pressing
  both of the buttons down, with the middle one being pressed slightly
  BEFORE the left-hand one. Use of the middle button in its normal
  way has to be modified, in that one has to pause for half a second
  after using it.
  
  [This parameter is usally 'hidden', with the machine manager setting
   it to the appropriate value for the local set-up. Sometimes it will
   be left to the user to set, depending on his software configuartion.]
  
4 Option
  (Default - see below          Choices - see below)
  
  This is the menu of options open to you.
  
  Option        Function
  ------        --------
  clear         Clear plot
  close         Close the graphical device
  cursor        Use cursor to get position and nearest star
  exit          Exit from this program
  getdata       Get star posns and magns from an input table
  label         Plot by each star its name from input table
  lsize         Set the size of the names written by the stars
  mrange        Set the magnitude range of stars to be plotted
  mscale        Set rate which stars get bigger with magnitude
  open          Open the plot device
  panel         Switch between panel and keyboard option selection
  plot          Plot the stars as filled-in circles
  prange        Set the range in X an Y of stars to be plotted
  psize         Set the range of the graph axes in X and Y
  ring          Write rings round stars
  ring_rem      Remove rings written round stars
  
 To input cursor positions, position cursor at desired point
 and press any key. End by locating cursor outside graph
  
4 Xrange
  (Default - Min,max in table      Range - -1.0e10 to 1.0e10)
  
  The X start and end of X range of positions in the table
  that a star can have to be plotted.
  
4 Yrange
  (Default - Min,max in table      Range - -1.0e10 to 1.0e10)
  
  The Y start and end of Y range of positions in the table
  that a star can have to be plotted.
  
3 Author
  
  Alan Penny                    RAL             1991 May
2 Tbcomps
  
  This takes a table and finds positions in it which are within a
  given annulus of any other position in the table. Such positions are
  output to an output table.
  
  Optionally, it can output those positions which are NOT within these
  annulii.
  
3 Parameters
  
4 In
  (Default - null)
  
  The file containing the input table
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Limits
  (Default - 0.0,20.0      Range - 0.0 to 1.0e10)
  
  Annulus around every position which is either forbidden or
  necessary for any other position in the table to be in, for it be
  included in the output table of positions.
  
4 Option
   (Default - 'in'       Choices -  'in:not_in')
  
   Find all positions within (in) or not within (not_in)
   annulus round any other position.
  
4 Out
  (Default - null)
  
  The file containing the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
  (Default - 'Output from TBCOMPS'             Choice - any)
  
    The Title to be added to the output file
  
3 Author
  
    A J Penny                  RAL               1991 May
2 Tbcut
  
   This cuts out columns and rows of a table and ouputs those cut out
   rows and columns to a new table in a new file.
  
   You can input up to 10 stretches of columns and up to 10 stretches
   of rows to cut out and save.
  
3 Parameters
  
4 Col
  (Default - 1,all (0,0 after 1st)     Range - 0 to no of columns)
  
   The 1st section of columns to cut out and save. Thus '1,2' would cut
   out and save the first two columns of the input table.
  
   If the first number is zero, then this entry is ignored
   and no more column sections are requested.
  
   This help is applied to the up to 10 parameters, 'COL_1', 'COL_2',
   'COL_3', .... 'COL_10', for the 10 possible different column sections.
  
4 In
  (Default - null)
  
  The name of the file containing the input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Out
  (Default - null)
  
  The name of the file to contain the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Row
  (Default - 1,all (0,0 after 1st)     Range - 0 to no of rows)
  
   The 1st section of rows to cut out and save. Thus '1,2' would cut
   out and save the first two rows of the input table.
  
   If the first number is zero, then this entry is ignored
   and no more row sections are requested.
  
   This help is applied to the 10 parameters, 'ROW_1', 'ROW_2',
   'ROW_3', .... 'ROW_10', for the 10 possible different row sections.
  
4 Title
  (Default - 'Output from TBCUT'           Choice - any)
  
  The keyword to be added to the output file as a 'Title'.
  
3 Author
  
      A J Penny            RAL                              1991 Feb
2 Tbdes
  
  List, copy, write or delete the descriptors of a table.
  
  Choose which one of the four options you wish to do, with
  the `OPTION' parameter. Then do that option. The options are:-
  
  - List some or all of the descriptors of a table
  - Copy all descriptors to another table
  - Write new descriptors from keyboard to table
  - Delete some of the descriptors of a table
  
3 List_option
  
  It types the size; pixel value scale and zero; title.
  
  Then it asks whether you want all descriptors output or just specificied
  ones. If you want all, it outputs them. If you want specific ones, it
  asks for the name of a specific descriptor. You give it, and it types
  out the descriptors value. It then repeats asking for names until you
  reply with a null (' ` or <carriage return>).
  
  You can specify that the program looks at only one descriptor before
  exiting. This mode is chosen with the `ALL_LIST=no' and `ONLYONE=yes'
  setting of the parameters.
  
3 Copy_option
  
  This copies the descriptors of one table onto another.
  Optionally you can choose to overwrite or not descriptors that
  already occur in the output table. If you do overwrite, then
  you can choose to delete existing descriptors before overwriting.
  
3 Write_option
  
  Allows descriptor items to be overwritten with new information, or
  inserted if they were not present, into a table.
  
  If the `LOOP' parameter is not set (or set to `yes'), then the
  program loops, asking for new descriptor names until a `null'
  response is input. If it is set to `no' (in the command line),
  then only one descriptor is asked for.
  
3 Delete_option
  
  Allows descriptor items to be deleted from a table.
  
  If the `LOOP' parameter is not set (or set to `yes'), then the
  program loops, asking for new descriptor names until a `null'
  response is input. If it is set to `no' (in the command line),
  then only one descriptor is asked for.
  
3 Parameters
  
4 All_list
  (Default - `yes'          Choice - `yes:no')
  
  Do you want all the descriptors output, or just specified one or ones?
  
4 Cvalue
  (Default - null           Choice - any)
  
  A character string to give the `value' to insert into
  the descriptor.
  
  This is asked from when in the `write' mode, using descriptors
  input from the keyboard and writing them to the table.
  
4 Delete
  (Default - `yes'        Choice - `yes:no')
  
  In copying descriptors, delete any previously existing descriptor
  with the same name as any of the descriptors to be copied over.
  
  This is only asked for if you have already said you wish to
  overwrite any existing decsriptor.
  
4 Format
  (Default - `char'           Choice - `char:integer:real')
  
  The data format for the descriptor to have.
  
  This is asked from when in the `write' mode, using descriptors
  input from the keyboard and writing them to the table.
  
4 In
  (Default - null)
  
  The name of the input table file.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
  In the `write' and `delete' options, this table is also written
  to, and is thus also an `output' file.
  
4 Ivalue
  (Default - 0                Range -  to -2147483648 to 2147483647)
  
  The integer value to give the `value' to insert into
  the descriptor.
  
  This is asked from when in the `write' mode, using descriptors
  input from the keyboard and writing them to the table.
  
4 More
  (Default - `yes'      Choice - `yes:no')
  
  Do you want any more typing out of these descriptors (if doing all of
  them) or of this descriptor (if doing single specific descriptors)?
  
4 Name
  (Default - ` `       Choice - any)
  
  Name of descriptor you want to have its value typed out.
  
  If you reply with a null (' ` or <carriage return>), it ceases
  asking for descriptor names.
  
4 Onlyone
  (Default - `no'      Choice - `yes:no')
  
  Do you want the program to look at only one descriptor before
  exiting?
  
  This option can only be chosen if the `ALL_LIST=no' option has
  previously been chosen.
  
4 Option
  (Default - `list'         Choice - `copy:delete:list:write' )
  
  Choose one of the options.
  
  Option      Function
  ------      --------
  Copy        Copy descriptors from one table to another
  Delete      Delete a descriptor(s) from a table
  List        List descriptor(s) in a table
  Write       Write descriptors from the keyboard into a table
  
4 Out
  (Default - null)
  
  The output table to copy descriptors from the input table into.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Over
  (Default - `yes'        Choice - `yes:no')
  
  In copying descriptors, overwrite existing values where there
  is an existing descriptor of the same name.
  
4 Paging
  (Default - `no'      Choice - `yes:no')
  
  When listing out descriptors, should the listing halt every 20
  descriptors to give you a chance to read them.? (You then
  carry on with the `MORE' parameter.)
  
4 Rvalue
  (Default - 0.0                Range - -1.0e37 to 1.0e37)
  
  The real value to give the `value' to insert into
  the descriptor.
  
  This is asked from when in the `write' mode, using descriptors
  input from the keyboard and writing them to the table.
  
3 Author
         A.J.Penny  RAL             1991 June
  
2 Tbjoin
  
  Join tables.
  
  This program allows up to nine tables to be concatenated.
  
  It allows you to shift the data in the tables relative to each
  other before joining.
  
  Thus if you have:-
                             _______      __________
                             l     l      l        l
                             l     l      l        l
                             l     l      l        l
                             l  A  l      l  B     l
                             l     l      l        l
                             l     l      l        l
                             -------      ----------
  
  you can join them
  
                             _______
                             l     l
                             l  A  l
                             l  __________
                             l  l  l     l
                             l  l  l     l
                             l  l  l     l
                             -------     l
                                l   B    l
                                l        l
                                ----------
  
   They do not even have to overlap.
  
   The 2nd (and optionally ) later table is written on top of the 1st
   table data,identifiers, and headers deleting them. Parameters with no
   entry are put to 0.0.
  
   To simply add one table onto the end of another, use the default
   displacements.
  
3 Parameters
  
4 Coloff
 (Default - 0         Range - -1000000 to 1000000)
  
  The number of columns that the columns in the table are to be
  shifted left or right before the table is added, relative
  to the first table.
  
  Can be +ve or -ve.
  
  [This help parameter applies to all tables except the first.
  The parameters are 'COLOFF2', 'COLOFF3', ... 'COLOFF9'.]
  
4 In
  (Default - null)
  
  One of the up to nine input tables.
  
  Put null (just 'return') to exit.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
  [This help parameter applies to all tables. The parameters are
 'IN1', 'IN2', ... 'IN9'.]
  
4 Out
  (Default - null)
  
  The output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Rowoff
 (Default - see below    Range - -1000000 to 1000000)
  
  The number of rows that the rows in the table are to be shifted
  up or down before the table is added, relative to the first input
  table.
  
  The default is that value which will add this table to the end
  of the previously input tables.
  
  Can be +ve or -ve.
  
  [This help parameter applies to all tables except the first.
  The parameters are 'ROWOFF1', 'ROWOFF2', ... 'ROWOFF9'.]
  
4 Title
  (Default - That of 1st table or 'Output from TBJOIN'      Choice - any)
  
      The title for the output table.
  
3 Author
  Alan Penny             RAL              1991 May
  
2 Tbkey
  
  This program inputs data for a table from the keyboard.
  
  The user inputs the following information on the keyboard:-
  
  1) The number of columns the output table will have.
  
  2) The lines (rows) of data, in the format:-
  
         r1,r2,r3,,,rn,name
  
     The `r1', `r2' ,,   are the input values. If less numbers than
     the number of columns is input, the later ones will be assigned
     the value zero. Up to 100 entries can be input in the line (up
     to the maximum set by the `NUMCOL' parameter).
  
     The `name' is the identifier for the row. If this is ommitted
     then the identifier will be "\#N', where `N' is the number of the
     row. The identifier can have up to 20 characters.
  
     The total length of the character string must be less than or
     equal to 256 characters.
  
  3) A null entry signifying the end of inputting data.
  
  4) The name of the file to output the table to.
  
  5) A text string as the `title' to the table
  
  6) Text strings as `headers' for each column.
  
  
   If more than 1000 lines are to be input, you must set the MAXROW
   parameter accordingly, before entering the program.
  
3 Parameters
  
4 Data
  ( Default - null        Choice - see below)
  
  A character string giving the data to be input, in the format:-
  
         r1,r2,r3,,,rn,name
  
     The 'r1', 'r2' ,,   are the input values. If less numbers than
     the number of columns is input, the later ones will be assigned
     the value zero. Up to 100 entries can be input in the line (up
     to the maximum set by the 'NUMCOL' parameter).
  
     The total length of the character string must be less than or
     equal to 256 characters.
  
  
     Where 'name' is the identifier for the row. If this is ommitted
     then the identifier will be "#N', where 'N' is the number of the
     row. The identifier can have up to 20 characters.
  
  A null entry signifies the end of inputting data.
  
4 Header
  (Default - see below   Choice - see below)
  
  The character string to act as header for the column. This can
  be up to 20 characters long. This is asked for each column.
  
  The defaults are:-
  
    Column Number     Default
    -------------     -------
         1               'X'
         2               'Y'
         3             'MAGNITUDE'
    later ones           ' '
  
4 Numcol
  (Default - 2    Range - 1 to 20)
  
  The number of columns to input into the table. (The identifier
  does not count as a column.)
  
4 Maxrow
  (Default - 1000   Range - 1 to 1000000)
  
  The maximum number of rows that can be input.
  
  This is a hidden parameter, and is not asked for. It can be set on the
  command line or by setting outside.
  
4 Out
  (Default - null)
  
  The name of the file to contain the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
  (Default - 'Output from TBKEY'    Choice - any)
  
  A character string (up to 50 characters) to be added to the output
  file as its 'title'.
  
3 Author
  
   Alan Penny            RAL       1991 May
2 Tblist
  
 Make a text (ASCII) version of a table which can be typed out
 on the user's console, and can be output to an ASCII text file.
  
3 Modes
  
 There are four modes of formatting the output:-
  
   Option      Output from each row
   ------      --------------------
  'SHORT'   -  The name and the values of the first three columns.
               The values are output in a 12 character floating format.
  
  'FULL'    -  The name (optionally), and all columns. The values are
               output in a 12 character floating format, with four
               values in each line of the output.
  
  'FIXFORM' -  The name (optionally) and up to 15 selected columns are
               output. The number of characters output in the names is
               defined. The values are output with each column having a
               fixed format of having so many places before the
               decimal point, and so many after.
  
  'FORM'    -  Up to 15 selected columns may be chosen from the table.
               These are output with (optionally) the name. The number
               of characters output in the names is defined. The values
               are output in a 12 character floating format, with four
               values in each line of the output.
  
  'HEADER'  -  Just puts out the standard header (see below).
  
3 Header
  
  There is an option to preceed the values by a standard header.
  This gives the title and the headers for the columns.
  This standard is useful, as TBLOAD can use it to input a similar
  (perhaps edited) text file. Its format is:-
  
   No  Contents           1st ten characters      Contents
   --  --------           ------------------      --------
   1   Title              'Title is: '            up to 50 characters
   2   No of columns      'Columns = '            Integer
   3   No of rows         'Rows =    '            Integer
   4   1st column header  'HEAD001   '            up to 20 characters
   5   2nd column header  'HEAD002   '            up to 20 characters
   etc   etc                etc                     etc
   X   No of descriptors  'NumDes =  '            Integer
   Y   1st descriptor     name                    value
   Y   2nd descriptor     name                    value
   etc  etc               etc                      etc
  
   There must be the same number of headers as there are columns.
  
   [The number of columns does not include the names.]
  
   The 'no of descriptors' line must be there. If there are no
   descriptors, then the number should be '0'.
  
   [The table size and headers are, strictly speaking, descriptors
    themselves, but they are not counted as such in this
    descriptor count. It is only concerned with other, incidental,
    descriptors.]
  
3 Parameters
  
4 Header
  (Default - see below          Choice - 'full:short:none')
  
 The type of the text lines that precede the table contents lines in the
 output.
  
  The Choice of types is:-
  
   Choice    Contents of the Lines
   ----      ---------------------
   Full      A standard heading, which gives the size, the title, the
             headers for the columns, and the descriptors.
   Short     Just the title and the headers in a short form
   None      Nothing
  
  The standard heading is useful, as TBLOAD can use it to input a similar
  (perhaps edited) text file.
  
  The default is 'short', or 'full' if 'full' chosen for the value
  output mode.
  
4 In
  (Default - null)
  
  The name of the file containing the input table
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Naft
  (Default - 2           Range - 0 to 100)
  
  The number of characters after the decimal point in the output
  column.
  
  [This refers to the up to 15 output columns through the parameters
   'NAFT1', 'NAFT2', ... 'NAFT15'.]
  
4 Nbef
  (Default - 4           Range - 0 to 100)
  
  The number of characters before the decimal point in the output
  column.
  
  [This refers to the up to 15 output columns through the parameters
   'NBEF1', 'NBEF2', ... 'NBEF15'.]
  
4 Ncol
  (Default - next       Range - 0 to no of columns in table)
  
  The number of the column in the table to be output in the output
  column.
  
  If 0 is input, no more columns are asked for.
  
  [This refers to the up to 15 output columns through the parameters
   'NCOL1', 'NCOL2', ... 'NCOL15'.]
  
4 Numname
  (Default - 12             Range - 0 to 20)
  
  The number of characters of the name of each row to output.
  
  If 0 is chosen, then the name is not output.
  
4 Out
  (Default - null           Choice - see below)
  
  The name of the file containing the output ASCII file. This
  should have a descriptor, i.e. a simple choice would be
  'tblist.lis'. If the descriptor is omitted, then '.dat' is
  taken.
  
  If the default null response is made, then no file is output.
  
4 Outmode
  (Default - 'short'      Choice - 'short:full:fixform:form')
  
 The mode of formatting the output.
  
 There are four modes of formatting the output:-
  
   Option      Output from each row
   ------      --------------------
  'SHORT'   -  The name and the values of the first three columns.
               The values are output in a 12 character floating format.
  
  'FULL'    -  The name (optionally), and all columns. The values are
               output in a 12 character floating format, with four
               values in each line of the output.
  
  'FIXFORM' -  The name (optionally) and up to 15 selected columns are
               output. The number of characters output in the names is
               defined. The values are outputwith each column having a
               fixed format of having so many places before the
               decimal point, and so many after.
  
  'FORM'    -  Up to 15 selected columns may be chosen from the table.
               These are output with (optionally) the name. The number
               of characters output in the names is defined. The values
               are output in a 12 character floating format, with four
               values in each line of the output.
  
  'HEADER'  -  Just puts out the standard header (see below).
  
4 Typing
  (Default - 'yes'              Choice - 'yes:no')
  
  Type out the output to the user's console?
  
4 Author
   Alan Penny                  RAL             1991 November
2 Tbload
  
  This takes an ASCII text file, and loads the contents into a table.
  
  The input file may contain either just the numbers or both the names
  and numbers. In the first case, then default names #1,#2,,,#n are
  put into the table. In the second case, the name should be the first
  entry in the line.
  
  The numbers for one row of the output table may take up more than one
  line in the input file. In this case, all the lines of the input file
  should be in the same format, that is a constant number of lines in
  the input file are put into each row of the output table. Also in this
  case, if names are being input, then the name for each row must occur
  only once in the set of input lines (at the beginnning of the first
  line).
  
  The numbers in a line in the input file must be separated by blanks
  and/or commas.
  
3 Headers
  
  The table title and headers may be input automatically, if they are
  put in a standard format at the start of the input file. This format
  is a series of lines with the first ten characters being a description
  and the remainder the values. The order of these lines is fixed. It
  is:-
  
   No  Contents           1st ten characters      Contents
   --  --------           ------------------      --------
   1   Title              'Title is: '            up to 50 characters
   2   No of columns      'Columns = '            Integer
   3   No of rows         'Rows =    '            Integer
   4   1st column header  'HEAD001   '            up to 20 characters
   5   2nd column header  'HEAD002   '            up to 20 characters
   etc   etc                etc                     etc
   N   No of descriptors  'NumDes =  '            Integer
   N+1 1st descriptor     name                    value
   N+2 2nd descriptor     name                    value
   etc  etc               etc                      etc
  
   There must be the same number of headers as there are columns.
  
   [The number of columns does not include the names.]
  
   The 'no ofdescriptors' line must be there. If there are no
   descriptors, then the number should be '0'.
  
   [The table size and headers are, strictly speaking, descriptors
    themselves, but they are not counted as such in this
    descriptor count. It is only concerned with other, incidental,
    descriptors.]
  
  
  If this standard format is not chosen, then the headers are input by
  hand, with the first 20 coming from individual program parameters, and
  any remaining input on a single program parameter.
  
  
3 Parameters
  
4 Head
  (Default - ' '          Choice - see below)
  
  The character string to put as the header of the next column.
  This may be up to 20 characters long
  
4 Head001
  (Default - ' '          Choice - see below)
  
  The character string to put as the header of the 'nth' column.
  This may be up to 20 characters long
  
  [This help applies to the up to 20 headers, 'HEAD001', 'HEAD002',
  ..., 'HEAD020'.]
  
4 Header
  (Default - 'no'         Choice - 'yes:no')
  
  Does the input file start of with the standard header format
  information? If it does, then this format is:-
  
   No  Contents           1st ten characters      Contents
   --  --------           ------------------      --------
   1   Title              'Title is: '            up to 50 characters
   2   No of columns      'Columns = '            Integer
   3   No of rows         'Rows =    '            Integer
   4   1st column header  'HEAD001   '            up to 20 characters
   5   2nd column header  'HEAD002   '            up to 20 characters
   etc   etc                etc                     etc
   X   No of descriptors  'NumDes =  '            Integer
   Y   1st descriptor     name                    value
   Y   2nd descriptor     name                    value
   etc  etc               etc                      etc
  
   There must be the same number of headers as there are columns.
  
   [The number of columns does not include the names.]
  
   The 'no of descriptors' line must be there. If there are no
   descriptors, then the number should be '0'.
  
   [The table size and headers are, strictly speaking, descriptors
    themselves, but they are not counted as such in this
    descriptor count. It is only concerned with other, incidental,
    descriptors.]
  
4 Hignore
  (Default - 0             Range - 0 to 10000)
  
  As there is not the standard header start to the file, how many
  lines at the start of the file shall be ignored?
  
4 In
  (Default - null)
  
  The name of the file containing the input text ASCII data.
  
4 Names
  (Default - 'no'         Choice - 'yes:no')
  
  Does the input file contain a name for each row of
  the output table?
  
4 Nlines
  (Default - 1            Range - 1 to 1000)
  
  The number of lines in the input file that the data, for
  each output table row, occupy.
  
4 Out
  (Default - null)
  
  The name of the file to contain the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
  (Default - ' '            Choice - any)
  
  The title to put into the output table. This can be
  up to 50 characters long.
  
3 Author
   alan penny                RAL          1991 May
2 Tbmatch
  
   This takes two tables and makes two new ones which are copies
   of the old ones, but only contain the entries which do (or
   optionally do not) have names which occur in the other table.
  
   If the choice is to have entries which do occur in both tables,
   then there is the choice to have those entries occur in the
   output tables either in the same order, or in the order that
   they appeared in their input tables, If the same order is chosen,
   the order is that of occurence in the first table. If there are
   repeated entries with the same names, then only the last such
   occurence is copied over. If the original order is chosen
   however, then those entries occur in the output tables in the
   same order as they occur in their respective input tables and
   repeated entries of the same name are all copied over.
  
   If the choice is to have entries which do not occur in both
   tables, then those entries occur in the output tables in the
   same order as they occur in their respective input tables.
   Repeated entries of the same name are all copied over.
  
3 Parameters
  
4 In1
  (Default - null)
  
  The name of the file with the 1st input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 In2
  (Default - null)
  
  The name of the file with the 2nd input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Option
   (Default - 'accept'            Choice - 'accept:reject')
  
   Accept or reject entries who have names in common with the other
   table.
  
4 Out1
  (Default - null)
  
  The name of the file for the 1st output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Out2
  (Default - null)
  
  The name of the file for the 2nd output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Same
  (Default - 'yes'       Choice - 'yes:no')
  
  Are entries to be copied over in the same order ('yes'), or
  not (when they are copied in the order they occur in their
  repective input tables) ('no') ?
  
4 Title1
  (Default - Input 1st table title or 'Output from TBMATCH'
   Choice - any)
  
   The Title to be added to the 1st output file.
  
4 Title2
  (Default - Input 2nd table title or 'Output from TBMATCH'
   Choice - any)
  
   The Title to be added to the 2nd output file.
  
  
3 Author
  
    A J Penny            STScI         87-12-18
2 Tbnative
  
  This programs converts a table made on a different type of machine
  to the format suitable for the machine the program is run on.
  
  This is not essential, as the programs automatically convert
  tables written on different machines, but it saves time and
  simplifies things if this is done.
  
  The table must already be in NDF format.
  
3 Parameters
  
4 In
  (Default - null)
  
  The name of the file with the input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Out
  (Default - null)
  
  The name of the file for the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
3 Author
  
   Patrick Morris         Leeds University       1992 Jan
2 Tbnmatch
  
  Put tables in the same order of names.
  
  This takes up to 40 tables and reorders the numbers of the rows
  so that the output tables all have the names of the rows in the
  same order. As some tables may not have rows with names that
  occur in other table(s), then dummy rows with zero entries are
  added and/or inserted into the output tables. Such rows are
  flagged with a user defined value set in a user defined column.
  
  If a table has more than one row with the same name, then of those
  rows, only the last such row is copied over.
  
  The order of the output rows will be that of the first table,
  then that of those rows in the second table which are not in
  the first table, then that of the rows in the third table that
  are not in the first two, and so on.
  
  Up to 40 tables may be input.
  
3 Parameters
  
4 Flagcol
  (Default - 3          Range - 1 to smallest number of columns in
                                     input tables)
  
  Column in output tables to put a flag value into to indicate a
  missing entry. The other entries in that row will be set at zero.
  
4 Flagval
  (Default - 50.0              Range - -1.0e20 to 1.0e20)
  
  Value to put in `flag' column to indicate a missing entry.
  The other entries in that row will be set at zero.
  
4 In
  (Default - null)
  
  The input file containing the input nth table.
  
  Put a null to end. (Must have at least one input table.)
  
  [This help refers to the up to 40 input tables, through the
  parameters 'IN1', 'IN2', ... 'IN40'.]
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Maximum
  (Default - 10000        Range - 1 to 1000000)
  
  Maximum number of rows allowed to occur in output tables.
  (This is limitedfor the sake of efficiency in the computing.)
  
4 Out
  (Default - null)
  
  The output file containing the reordered (and possibly extended)
  version of the corresponding input table.
  
  [This help refers to the up to 40 input tables, through the
  parameters 'OUT1', 'OUT2', ... 'OUT40'.]
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
 (Default - Input file title or `Output from Tbnmatch'     Choice - any)
  
 The Title to be inserted in the Output file.
  
  
3 Author
         A.J.Penny                RAL                   1991 July
2 Tbplot
 This plots tables or images out onto a graph:-
  
   1) The contents of two columns of one or two tables can be plotted
        as X,Y points, or as a line joining those points.
   2) An image may be plotted as a grey-scale image, or as a contour map.
   3) Text and axes labels may be put onto the graph.
   4) The contents of one table column can be plotted as a histogram (not
        onto the graph of actions 1-3).
   5) A cursor position can be read out.
  
 The program uses either an 'automatic' mode, where the input can be
 done as a simple series of commands, or a menu-driven approach. In the
 latter options from a menu can be repeatedly chosen either from a
 'panel-button' type of display, or via the keyboard.
  
3 Menu
  
  This is the menu of options open to you.
  
   Option      Function
   ------      --------
   all_clear   Clear Display - data and axes
   aspect      Select between graph having axes on the same scale or
                 being independantly scaled
   clear       Clear Display - just data
   close       Close Display
   contour     Plot the counter map of the image
   cursor      Get position in graph and nearest table point, with cursor
   display     Display the image as a picture
   exit        Exit from program
   get_image   Open an input image
   get_table   Open an input table(s)
   histogram   Plot histogram of values in a table column
   label       Plot axis labels on graph
   line        Plot table data as line
   open        Open (new) display device
   panel       Toggle between keyboard and panel option input
   points      Plot table data as points
   prange      Change limits on table X,Y acceptable limits
   psize       Change the size of the plot
   text        Plot input text at a position on the graph
  
3 Cursor_use
  
   To input cursor positions, position cursor at desired point
   and press any key on the keyboard, or maybe press any
   button on the cursor. End by locating cursor outside graph
   and pressing a key.
  
3 Parameters
  
4 Aspect
  (Default - 'yes' or last           Choice - 'yes:no')
  
  Should the graph axes be scaled the same?
  
  If not, then the X range of the graph will fill the X size of
  the window, whilst the Y range will fill the Y size. If yes, then
  the graph will be plotted with X and Y scales the same (as is done
  with maps).
  
4 Atype
  (Default - `points'       Choice - `points:line:hist:disp:cont')
  
  What type of graph do you want plotted?
  
   Option   Result
   ------   ------
   Points   Plot symbols at table XY positions
   Line     Plot of a line joining successive table XY positions
   Hist     A histogram of table, where X = X and Y = number at X
   Disp     Grey-scale display of image
   Cont     Contour map of image
  
4 Contour
  (Default - see below         Range - -1.0e20 to 1.0e20)
  
  The lower and upper limits of image values that are plotted out
  in the contour map, and the step between the contour levels.
  
  Thus an input of `10.0,100.0,20.0' would put out contour
  levels of (10.0,30.0,50.0,70.0,90.0).
  
  The default is `(minimum of data),(maximum of data),(1/10th of range)'
  
4 Devlimx
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The X values of the start and end of the plotted graph.
  
4 Devlimy
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The Y values of the start and end of the plotted graph.
  
4 Gtype
  (Default - 'xwindows'            Choice - any)
  
  A character string giving the local name for the graphics
  display type.
  
  'xwindows' will put it out on the screen of your X-window deviice,
  if you are using one.
  
  If 'ask' is input, then the program asks a very similar question,
  in a different way. A response here of '?' will bring up a listing
  of all the possible names of graphics devices which are supported
  on your machine, and you then input the appropriate name.
  
4 Hrange
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The lower and upper limits of table data to be put into histogram.
  
4 Im
  (Default - null)
  
  The name of the file containing the input image
  
  The table must be a standard Starman image format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real or 'short'
  16-bit integer ones.
  
4 Imoffset
  (Default - 0,0                      Range - -1.0e20 to 1.0e20)
  
  The X and Y offset from the (1,1) position in the graph of the
  (1,1) position of the displayed points, line, image, or contour.
  
4 Imxrange
  (Default - X size of image           Range - 1 to X image size
  
  The X start and end of the X range of the image to be plotted.
  
4 Imyrange
  (Default - Y size of image           Range - 1 to Y image size)
  
  The Y start and end of the Y range of the image to be plotted.
  
4 In1
  (Default - null)
  
  The name of the file containing the first input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 In2
  (Default - null)
  
  The name of the file containing the second input table.
  
  If the second input table is the same as the first one, then
  just press the 'carriage return' key.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Linecol
   (Default - 'black'            Choice - `black:white')
  
    Colour of plot lines. This is determined by whether you have a
    black or white background to your plots.
  
4 Lstyle
  (Default - 1       Range - 1 to 5)
  
  Code for style line is to be plotted.
  
  Number  Style
  -----   -----
    1     Full line
    2     Long dashes
    3     Dash-dot-dash
    4     Dotted
    5     Dash-dot-dot
  
4 Nbin
  (Default - last chosen, first=40     Range - 1 to 200)
  
  No of bins in histogram.
  
4 Ncol1
  (Default - 1     Range - 1 to no of columns)
  
  Column in first table to take data from.
  
4 Ncol2
  (Default - 1     Range - 1 to no of columns)
  
  Column in second table to take data from.
  
4 Numbutt
  (Default - see below          Range - 2 to 3)
  
  Number of `X-Window' buttons available on the mouse.
  
  Some devices have two and some have three buttons available. This
  can depend both on their actual presence, and also on the X Windows
  software that is being run.
  
  With three buttons, then the Starman programs use all three, with
  the right-hand button being used mainly as the 'exit' button.
  
  With two buttons, then the third button is simulated by pressing
  both of the buttons down, with the middle one being pressed slightly
  BEFORE the left-hand one. Use of the middle button in its normal
  way has to be modified, in that one has to pause for half a second
  after using it.
  
  [This parameter is usally 'hidden', with the machine manager setting
   it to the appropriate value for the local set-up. Sometimes it will
   be left to the user to set, depending on his software configuartion.]
  
4 Option
  (Default - see below          Choices - see below)
  
  This is the menu of options open to you.
  
  Option        Function
  ------        --------
   aspect      Select between graph having axes on the same scale or
                 being independantly scaled
   clear       Clear Display
   close       Close Display
   contour     Plot the counter map of the image
   cursor      Get position in graph and nearest table point, with cursor
   display     Display the image as a picture
   exit        Exit from program
   get_image   Open an input image
   get_table   Open an input table(s)
   histogram   Plot histogram of values in a table column
   label       Plot axis labels on graph
   line        Plot table data as line
   open        Open (new) display device
   panel       Toggle between keyboard and panel option input
   points      Plot table data as points
   prange      Change limits on table X,Y acceptable limits
   psize       Change the size of the plot
   text        Plot input text at a position on the graph
  
 To input cursor positions, position cursor at desired point
 and press any key, or maybe any cursor button. End by
 locating cursor outside graph
  
4 Position
  (Default - b.l.h. corner of graph     Range - -1.0e20 to 1.0e20)
  
  X,Y position to put into the graph the input text.
  
4 Symbol
  (Default - 2       Range - 0 to 31)
  
  Code for style that the points to be plotted in the graph as.
  
  The full explanation of the symbols is given in the PGPLOT manual.
  
4 Text
  (Default - null)
  
   The text to plot onto the graph.
  
4 Use
  (Default - `panel'                  Choice - `auto:panel:key')
  
  Automatic (auto) or interactive (panel:key) mode?
  
  In the interactive mode, after you have input the X and Y
  data, you can do any operations you like (although the
  program suggests a route for the first few operations). You
  then exit when you want.
  
  The 'panel' choice puts you straight into the 'panel' mode,
  whereas 'key' selects the 'keyboard' entry.
  
  In the automatic mode, you choose the type of graph you
  want plotted up, the program then asks you for the relevant
  input, plots the graph and exits. This is useful if you have
  a simple thing to do, and/or wnat to exit automatically.
  
  In either case, any graph left on the X-window at the end
  remains displayed. It can be removed by closing the window
  or by doing `xdestroy xwindows'.
  
4 Vprange
  (Default - -2/+3 std dev from mean in image  Range - -1.0e20 to 1.0e20)
  
  The minimum and maximum pixel values in the image that are plotted.
  The grey-scale is scaled between these limits.
  
4 Xlabel
  ( Default - null or Header of Column in table 1)
  
  Text to put onto X axis of graph.
  
4 Xrange
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The X start and end of X range of positions in the table
  that a data point can have and still be plotted.
  
4 Ylabel
  ( Default - null or Header of Column in table 2)
  
  Text to put onto Y axis of graph.
  
4 Yrange
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The Y start and end of Y range of positions in the table
  that a data point can have and still be plotted.
  
3 Author
  
  Alan Penny                    RAL             1995 October
2 Tbpmatch
  
   Match XY Positions in Two Tables.
  
   This takes two tables and makes two new ones which are copies of
   the old ones, but only contain the rows which match in X,Y position
   (within an input tolerance).
  
   The new table entries are in the same order as order they occur in
   the 1st table, but of course there may be rows missing if a match
   fails for that row.
  
   If the second table has more than one star near enough to the position
   of the star in the 1st to qualify, then selection is done on the
   basis of the option chosen.
  
     Option     Function
     ------     --------
     alldup      All such stars - each star as often as it appears
     allnodup    All such stars - each star only once
     largest     Only the star with the largest value in NUMCOL
     nearest     Only the nearest star
     smallest    Only the star with the smallest value in NUMCOL
  
   The position of an entry is taken as X from the first column
   and Y from the second column in the table.
  
3 Parameters
  
4 In1
  (Default - null)
  
  The name of the file containing the 1st input table
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 In2
  (Default - null)
  
  The name of the file containing the second input table
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Method
  (Default - 'nearest'    Choice -
                            'alldup:allnodup: nearest:largest:smallest')
  
   If the second table has more than one star near enough to the position
   of the star in the 1st to qualify, then selection is done on the
   basis of the option chosen.
  
     Option     Function
     ------     --------
     Alldup      All such stars - each star as often as it appears
     Allnodup    All such stars - each star only once
     Largest     Only the star with the largest value in NUMCOL
     Nearest     Only the nearest star
     Smallest    Only the star with the smallest value in NUMCOL
  
   The position of an entry is taken as X from the first column
   and Y from the second column in the table.
  
4 Mismatch
   (Default - 1.0      Range - 0.0 to 1.0e20)
  
    Distance two stars can be apart and still be regarded as matching
    in X,Y position.
  
4 Numcol
    (Default - 1     Range - 1 to number of columns)
  
   If any duplicity is to be resolved by parameter value (see 'Method')
   then this is the table column to get the value from.
  
4 Out1
  (Default - null)
  
  The name of the file to contain the 1st output table
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Out2
  (Default - null)
  
  The name of the file to contain the second output table
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title1
  (Default - First input table title or 'Output from TBPMATCH'
   Choice - any)
  
   The Title to be added to the first output table.
  
4 Title2
  (Default - Second input table title or 'Output from TBPMATCH'
   Choice - any)
  
   The Title to be added to the second output table.
  
3 Author
  
    A J Penny            STScI         87-12-18
2 Tbrenum
  
   It takes a table and outputs an identical one, except the
   identifiers are labelled #1,#2,,,#n.
  
3 Parameters
  
4 In
  (Default - null)
  
  The name of the file with the input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Out
  (Default - null)
  
  The name of the file with the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
  (Default - Input table title or 'Output from TBRENUM'    Choice - any)
  
    The Title to be added to the output table.
  
3 Author
  
    A J Penny                  STScI             87-12-18
2 Tbsheet
  
 TBSHEET is a spread-sheet program for the Starman tables.
  
 An input table (or part of it) is displayed as a grid on your graphics
 screen. You may perform various inspections, changes, and
 manipulations on the table. Part of these are the ability to add up to
 200 columns and up to 2000 rows to the table. The resultant table may
 be output to file.
  
 The format of the displayed screen is to some extent under the control
 of the user.
  
 The input table may be omitted. In this case a table of a size defined
 by the user, containing zeroes is set up for starting with.
  
 The display of the spread sheet uses the 'PGPLOT' graphics
 sub-routines, so you will need a terminal capable of graphics display,
 capable of writing 'black' areas, for which a PGPLOT driver exists.
  
3 Use
  
  The user starts the programs, inputs the input file name (or null),
  and inputs the display type and whether it is monochrome or not.
  The programs then puts up the table on the screen.
  
  The user then chooses to replace a value or row name or column
  header by clicking on them, or chooses one of the options. The option
  choice is done by placing the cursor on an 'option' box and pressing
  any key on the keyboard, or maybe cursor button. Then the program
  performs that option (which may involve further user input either
  from the cursor or from the keyboard - the 'prompt' message will
  indicate this).
  
  This process is then repeated, until the user chooses to exit.
  
3 Menu
  
 Numbers in the table are changed by clicking on them, and then
 using the keyboard to replace the values. The same goes for the
 row names and the column headers. For the other options, place
 the cursor on the desired option in the menu panel displayed above
 the table, and press a key on the keyboard or maybe use the
 cursor button.
  
 Menu of options available:-
  
 Name          Function
 ----          --------
 Add Cols      Add columns to the table. A column (or columns)
                is added to the data, located after the
                column picked by the cursor. (See below for
                data entry.)
 Add Rows      Add rows to the table. A row (or rows)
                is added to the data, located after the
                row picked by the cursor. (See below for
                data entry.)
 Calculate     Make the entries in a column from a FORTRAN-like equation
 Command       Access the command line for help or exit
 Correlate     Calculate the statistics of two columns
                (picked by the cursor), first of themselves
                then of the correlation between them.
 Delete Col    Delete a column, picked by the cursor
 Delete Cols   Delete a number of contiguous columns, defined
                by user input
 Delete Row    Delete a row, picked by the cursor
 Delete Rows   Delete a number of contiguous rows, defined
                by user input
 Down          Move the displayed table so that the number
                of the row displayed at the top increases
                by one.
 Down page     Move the displayed table so that the number
                of the row displayed at the top increases
                by the number of rows displayed.
 Exit          Exit from the program.
 Format        Change the format and colour of the display.
 Help          Type out this help information.
 Histogram     Histogram of a column is plotted by picking a
                column with a cursor. The sheet is then
                replaced by the histogram. When you wish
                to return to the sheet, just answer question.
 Input         Load a new table
 Insert        Insert data into table. Select a range of rows
                of columns by the cursor (t.l.h and b.r.h
                corners). Keyboard enter data one at a time
 Insert Cols   Add columns to the table. A column (or columns)
                is added to the data, located before the
                column picked by the cursor. (See below for
                data entry.)
 Insert Rows   Add rows to the table. A row (or rows)
                is added to the data, located before the
                row picked by the cursor. )See below for
                data entry.)
 Left          Move the displayed table so that the number
                of the column displayed at the left increases
                by one.
 Left page     Move the displayed table so that the number
                of the column displayed at the left increases
                by the number of columns displayed.
 Plot          One column can be plotted against another, both
                picked by cursor. Double click gives column
                choice by keyboard. The sheet is then
                replaced by the plot. When you wish
                to return to the sheet, just answer question.
 Position      Change the column/row shown at the top left
                of the display to that demanded.
 Renumber      Load the names of all the rows with numbers
                in the format #n, where n is the number of
                the row.
 Right         Move the displayed table so that the number
                of the column displayed at the left decreases
                by one.
 Right page    Move the displayed table so that the number
                of the column displayed at the left decreases
                by the number of columns displayed.
 Sort Down     Sort the rows of the table by looking at the
                values of entries in a column (picked by the
                the cursor), and sorting so these are in
                descending order.
 Sort Up       Sort the rows of the table by looking at the
                values of entries in a column (picked by the
                the cursor), and sorting so these are in
                ascending order.
 Stats         Calculate the statistics of one or two columns
                (picked by the cursor). Double click gives
                column choice by keyboard.
 Store         Store the present table in an output file
 Title         Change the title of the table
 Undo          Undo the last deletion or weed, if no sub-
                sequent changes have been made in the table.
 Up            Move the displayed table so that the number
                of the row displayed at the top decreases
                by one.
 Up page       Move the displayed table so that the number
                of the row displayed at the top decreases
                by the number of rows displayed.
 Weed          Delete rows of the table by looking at the
                values of entries in a column (picked by the
                the cursor), and seeing if they lie within
                (or without) a chosen range.
  
3 Data_Entry
  
 Table values may be entered in four ways:-
  
 1) Click on (row,column)  position, and enter a value by the keyboard.
  
 2) Click on the 'insert' option, choose an area of the table
    to enter the data into, and then use the keyboard.
  
    Use the cursor to set top left hand row and column corner of
    the set and then again to specify the bottom right hand corner.
  
    Then through the keyboard enter values, one at a time. The data are
    entered from the top down.
  
    To stop, enter - !! -
  
 3) Click one of the four the 'insert cols/rows' or 'add rows/cols' options.
  
    Row Data Entry
    --------------
  
     Entering data for a row is done by typing in values for
     the entries in the row, separated by commas. If you do not
     enter all the values, the rest are given the value of zero.
     If you enter all the row values, you may add the name. The
     name must have no spaces (you may wish to use _ for a space)
     If you do not input a name, the row is given the name #n
     where n is the number of the row. You are then asked for the
     values for the next row to be entered. A completely null
     response ends the inputting of data.
  
     Column Data Entry
     -----------------
  
     Entering data for columns is done by typing in values for
     the entries in the first row of each column, separated by
     commas. The number of entries you put in will be taken as
     the number of columns to put into the table. All the rows
     in each column are then given the value of that in the their
     first row. The column header is set as a blank space.
  
 4) Row names and columns headers can be input by clicking on them, and
    entering values through the keyboard.
  
3 Calculations
  
 There is an option when using this program to perform arithmetic
 and mathematical functions to be applied to the values of column(s) in
 the table ( and to, optionally, a number of input tables) and
 constants by means of a FORTRAN-like expression which specifies the
 required functions. The results are then loaded into the desired
 column of the working table.
  
 In addition to the standard FORTRAN facilities, a number of special
 functions are available (e.g. for adding noise).
  
4 Method
  
  General
  -------
  
 The user inputs a Fortran-like equation (through the parameter
 EQUATION).
 These equations can contain references to:-
  
   - specified columns of specified tables (which must all have the
     same number of rows, but mayhave different numbers of columns)
     The table presently in the spread-sheet can be refered to.
   - variables
   - constants
   - Fortran operators on these (e.g. '+', or 'cos()', ... )
  
 (For more details on the structure of these equations ) see below.
  
 The equation is then analysed and the operations are performed.
 Each row of the output column column contains the results of the
 equation, with the data for the input tables coming from the matching
 row of those input tables.
  
 More specifically, the equation is analysed to identify the names
 of tables and variables and to evaluate constants and are then
 converted into reverse-Polish notation. The tables and variables are
 prompted for in alphabetical order and the program then performs
 simple 'stack-arithmetic' to evaluate the expression for each output
 table element.
  
 The Equation
 ------------
  
 An arithmetic expression of up to 80 characters which gives the
 function to be evaluated for each output table element. The syntax
 is similar to Fortran (same operator precedence, etc.) but with the
 following differences:
  
 a) Input tables are represented by any of the variables TBn1, TCn2,...
    to TZnm, where the 'B', 'C', etc., refer to the table and the 'n1',
    'n2', .. etc., refer the column number in that table to use.
  
 b) The table presently displayed in the spread sheet is refered to
    as 'TA'. The column numbers are refered to as normal.
  
 c) Numerical parameters by any of the variables variables A to Z
  
 d) Constants by any numerical Fortran constant (real or integer,
    including exponent if required).
  
 e) Arithmetic is performed as though all values were real, The actual
    calculations are performed in double precision, and the results
    translated back to reals.
  
 f) The standard Fortran functions are available and identified
    by their generic names, i.e. SQRT, EXP, LOG10, LOG, SIN, COS, TAN,
    ASIN, ACOS, ATAN, ATAN2, SINH, COSH, TANH, ABS, AINT, ANINT, MOD,
    SIGN, DIM, MIN & MAX. Note, however, that MIN and MAX may take only
    2 arguments.
  
 g) To avoid problems with the way the Starlink environment
    handles character parameters:-
  
      The comma ',' must be replaced with the colon ':',
      for separating function arguments.
  
      The division sign '/' may be replaced by the percent sign '%',
      although this latter substitution is not necessary when
      replying to a prompt at the terminal.
  
 h) There are three extra funstions available:-
  
    CLIP(A,B,C)  This gives the value B so long as it lies in the
                 interval A to C (inclusive). Otherwise it gives a
                 zero result. It may be used to remove output values
                 outside a certain range (e.g. if a division operation
                 has resulted in very large output values).
  
    GAUSS(X)     Gives gaussian noise with zero mean and standard
                 deviation X (the value returned is different at each
                 element and for each call of GAUSS).
  
    RAN(X)       Gives uniform noise with a value between zero and X
                 (the value returned is different at each element and
                 for each call of RAN).
  
  For example, an equation of the form:-
  
        TA2*3.3 + 0.5 + COS(TB1) + A + MOD(RR:10.0) + CC%3
  
  will fill each row of a specified output column with:-
  
    ( 3.3 times the element in that row of column 2 of the presently
      displayed table )
  
  + ( 0.5 )
  
  + ( cosine of the element in that row of column 1 of the input table
        specified through parameter 'INB' )
  
  + ( the user defined value of the variable 'A' )
  
  + ( row number, modulo 10 )
  
  + ( (column number)/3 )
  
3 Input
  
  Only tables and variables used in the expressions are prompted for and
  these are requested in alphabetical order, and only once each.
  
  The table refered to as 'TA' is the table presently in the spread
  sheet, and is thus not asked for.
  
3 Cursor_Use
  
 Place the cursor on the desired location and press any key
 on the keyboard, or maybe use the cursor button.
  
3 Description_of_screen
  
 When the table is displayed, the screen shows the table itself
 and a number of other things.
  
 To the left of the table, there are the row numbers and the names
 attached to each row.
  
 Above the table, there are the column numbers and the headers attached
 to each row.
  
 To the left and above the table, there is the program 'prompts', which
 indicate the current state of the program.
  
 Along the top of the screen, there are the 'option' boxes which the
 user points to undertake an action.
  
3 Program_Prompts
  
 In using the program, you may occaisionly be wondering if it is waiting
 for input from you. It actually tells you what it is doing, with a
 display to the top left of the table:-
  
   Displayed               Colour    Action desired of you
   ---------               -----     ---------------------
   `Waiting (Option)'      Red       Place cursor on Option box, press
                                      any key or maybe cursor button
   `Waiting (Position)'    Red       Place cursor on the appropriate
                                     position. [This may be a table value,
                                     a table column or row, a row name
                                     or a column header.] Press any
                                     key or maybe the cursor button
   `Waiting (Keyboard)'    Red       Input data via keyboard
   `Working'               Green     Wait until program asks you
  
3 Parameters
  
4 A
  (Default - 0.0                     Range - -1.0e37 to 1.0e37)
  
  The value to be used in the expressions for the value of
  the variable 'A',  in the `calculations' option.
  
 This help is repeated for the variables `B' to `Z'.
  
4 Aspect
  (Default - `no'             Choice - 'yes:no')
  
  Plot the X and Y axes of the graph at the same scale?
  
  If not, then the X and Y axes are scaled to fit the display
  area.
  
4 Chnames
  (Default - present value (starting value=10)   Range - 2 to 20)
  
  The number of characters of the row names to display.
  
4 Colnum
  (Default - present value (starting value=4)  Range - 2 to 100)
  
  The number of columns to display on the screen.
  
  The number of rows displayed is automatically adjusted to fill the
  screen.
  
  Clearly, the more columns shown, the smaller the character size.
  
4 Colours
  (Default - present value (starting value = '2,1,3,4,5')
   Range - 5 integers with values between 1 and 10)
  
  The colour to give to each of five elements of the screen.
  
  Number   Element             Default
  ------   -------             -------
    1      Background          White
    2      Numbers/names/      Black
           table grid
    3      Prompt - waiting    Red
    4      Prompt - working    Green
    5      Options box grid    Blue
  
  The colours that can be given instead to these are:-
  
   Number    1     2    3    4     5    6     7       8     9      10
   Colour  Black White Red Green Blue Cyan Magenta Yellow Orange Grn/Ylw
  
  (If the screen is monochrome, then the background is displayed
  as white and the rest as black.)
  
4 Cols
  (Default - 1,2          Range - 1 to X size of table)
  
  The numbers of the two columns use.
  
4 Command
  (Default - 'no'           Choice - 'yes:no')
  
  This performs no operation. It merely gives the user a chance
  access the CL command line for help
  
  The user types '?' or '??', (without the 's) and gets access to
  help system. Then do 'return' to get back.
  
  '!!' will exit.
  
4 Data
  (Default - null        Choice - any)
  
  A character string giving the data to input to a column or row.
  These are numbers (in the form (e.g.) 123 or -12.34 or -1.2e4),
  and maybe a name, separated by commas or spaces. There should
  be as many numbers as are needed to fill the column or row. If
  there are more, then the first numbers filling up the table
  are taken, and the next entry is taken as the column header or
  row name. If there are fewer, then the remaining numbers are
  filled up with zeroes. If there is no name at the end of the
  entry, then the column header/row name is taken as '#n' where
  n is the number of the column/row.
  
  The name must be no more than 20 characters long
  
  Numbers in a bad form, (e.g. 12j34) are taken as 0.0.
  
  Thus for a table row entry for row number five, where there are
  three columns, the character strings below would give the following
  input:-
  
    Input                             Stored
                       Column1    Column2   Column3    Name
    -----              ------------------------------------
    1,2.1,-1.2e3         1.0       2.0       -1200.0    #5
    1,2,3,fred           1.0       2.0          3.0     fred
    1,2                  1.0       2.0          0.0     #5
    1,2,3,4,fred         1.0       2.0          3.0     4
    1,2j2,3              1.0       0.0          3.0     #5
  
4 Devlimx
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The X values of the start and end of the plotted graph.
  
4 Devlimy
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The Y values of the start and end of the plotted graph.
  
4 Equation
  (Default - null                  Choice - as defined below)
  
  The FORTRAN-style expression that gives the elements to be loaded into the
  desired column in the working table.
  
  [For a more deatiled help than that given here,  look in the
  `The Equation' part of the `calculations' help sections above.]
  
  An arithmetic expression of up to 80 characters which gives the
  function to be evaluated for each output table element. The syntax
  is similar to Fortran (same operator precedence, etc.) but with the
  following differences:
  
 a) Input tables are represented by any of the variables TAn1, TBn2, ...
    to TZnm, where the 'A', 'B' etc., refer to the table and the 'n1',
    'n2', .. etc., refer the column number in that table to use.
    The table presently in the spread sheet is refered to as 'TA'.
 b) Numerical parameters by any of the variables variables A to Z
 c) Constants by any numerical Fortran constant (real or integer,
    including exponent if required).
 d) Arithmetic is performed as though all values were real, The actual
    calculations are performed in double precision, and the results
    translated back to reals.
 e) The standard Fortran functions are available and identified
    by their generic names, i.e. SQRT, EXP, LOG10, LOG, SIN, COS, TAN,
    ASIN, ACOS, ATAN, ATAN2, SINH, COSH, TANH, ABS, AINT, ANINT, MOD,
    SIGN, DIM, MIN & MAX. Note, however, that MIN and MAX may take only
    2 arguments.
 f) To avoid problems with the way the Starlink environment
    handles character parameters, the comma ',' must be replaced with
    the colon ':' for separating function arguments. Similarly, the
    division sign '/' may be replaced by the percent sign '%', although
    this latter substitution is not necessary when replying to a prompt
    at the terminal.
 g) There are three extra funstions available:-
    CLIP(A,B,C)  This gives the value B so long as it lies in the
                 interval A to C (inclusive). Otherwise it gives a
                 zero result. It may be used to remove output values
                 outside a certain range (e.g. if a division operation
                 has resulted in very large output values).
    GAUSS(X)     Gives gaussian noise with zero mean and standard
                 deviation X (the value returned is different at each
                 element and for each call of GAUSS).
    RAN(X)       Gives uniform noise with a value between zero and X
                 (the value returned is different at each element and
                 for each call of RAN).
  
  For example, an equation of the form:-
  
        TA2*3.3+0.5+COS(TB1)+A
  
  will fill each row of a specified output column with:-
  
    ( 3.3 times the element in that row of column 2 of the present
        table )
  + ( 0.5 )
  + ( cosine of the element in that row of column 1 of the input table
        specified through parameter 'INB' )
  + ( the user defined value of the variable 'A' )
  
4 Gtype
  (Default - 'xwindows'            Choice - any)
  
  A character string giving the local name for the graphics
  display type.
  
  'xwindows' will put it out on the screen of your X-window device,
  if you are using one.
  
  If 'ask' is input, then the program asks a very similar question,
  in a different way. A response here of '?' will bring up a listing
  of all the possible names of graphics devices which are supported
  on your machine, and you then input the appropriate name.
  
4 Header
  (Default - present value         Choice - any)
  
  The character string to replace the current column header with.
  
  This must be no longer than 20 characters long.
  
4 Hrange
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The lower and upper limits of data to be put into histogram.
  
4 In
  (Default - null)
  
  The name of the file containing the input table, or that of a new
  input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Inb
  (Default - null)
  
 When using the `calculation' mode to input data, then tables
 can be accessed in the `EQUATION' parameter. This is the input
 file containing the table corresponding to a 'TB' specfication
 in the equation.
  
 This is not to be confused with the `main' input table specified
 via the `IN' parameter.
  
 There can be up to 25 other tables accessed through the `TA' and
 `TC' to `TZ' parameters in the equation.
  
 All input tables must come from different files. To input a table
 more than once in the equation - refer to it by only one parameter.
  
 [This help is used for the `INC' to `INZ' parameters, accessed
  through the `TC' to `TZ', too.]
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Limits
  (Default - 0.0,0.0          Range - 2 real numbers in the
                                      range -1.0e20 to 1.0e20)
  
  If the value of a table entry (in the specified column) in a row
  lies within this range of values, then the row will either be
  accepted or rejected. (The choice of accept/reject is made with
  the 'weedopt' parameter after this parameter.)
  
4 Linecol
   (Default - 'black'            Choice - (black:white)
  
   Colour of plot lines. Your choice should be determined by whether
   you have a black or white background to your plots.
  
4 Lstyle
  (Default - 1       Range - 1 to 5)
  
  Code for style line is to be plotted.
  
  Number  Style
  -----   -----
    1     Full line
    2     Long dashes
    3     Dash-dot-dash
    4     Dotted
    5     Dash-dot-dot
  
4 Mono
  (Default - 'no'           Choice - 'yes:no')
  
  Is the display screen for the table, a monochrome display or not?
  (If it is a colour display, then the display can be made a little
   clearer than for a monochrome display.)
  
4 More
  (Default - 'yes'           Choice - 'yes:no')
  
  Do you want any more typing out of this help?
  
4 Name
  (Default - present value         Choice - any)
  
  The character string to replace the current row name with.
  
  This must be no longer than 20 characters long.
  
4 Nbin
  (Default - last chosen, first=40     Range - 1 to 200)
  
  No of bins in histogram.
  
4 Numcols
  (Default - 0,end of current table    Range - 2 integers between 0 and
                                                 end of cureent table)
  
  The range of columns to delete.
  
  If either of the limits is `0', then no deletion takes place.
  
4 Numrows
  (Default - 0,end of current table    Range - 2 integers between 0 and
                                                 end of cureent table)
  
  The range of rows to delete.
  
  If either of the limits is `0', then no deletion takes place.
  
4 Ok
  (Default - 'no'         Choice - 'yes:no')
  
  In choosing to exit from the program without having previously
  stored the table since the last change, you will loose all the
  changes made to the table since the start (or since you last
  stored the then current state of the table).
  
  If you want this, then answering 'yes' will result in the
  program finishing. If on the other hand you do want to store the
  current state of the table, then answer 'no' (the default) and you
  will get back to the option choice. You can then store the table
  and then exit.
  
4 Out
  (Default - null)
  
  The name of the file to contain the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Position
  (Default - present position          Range - 1 to max of num of
                                                 columns and rows)
  
  The column position and row position of the table entry displayed
  at the top left hand of the display.
  
  This positions the display so that the specified entry is at the
  top left of the display.
  
4 Seed
  (Default - 1234567891     Range - 1200000001 to 1400000001)
  
  The seed number to be used in any random number generators.
  This is used in the `GAUSS()' and `RAN()' operators. These
  will provide the same pattern of numbers in the same
  seed number is input. This is used  in the `calculations' option.
  
  It has to be a large positive odd number.
  
4 Size
  (Default - 2,100             Choice - 2 integers each between
                                        1 and 10000)
  
  As there is no input table, a blank one is made. This parameter
  defines the size of the table - the number of columns and the
  numbers of rows. The table will have zeroes in it and the `#n'
  format entries for the names and headers.
  
4 Symbol
  (Default - 2       Range - 0 to 31)
  
  Code for style that the points to be plotted in the graph as.
  
  The full explanation of the symbols is given in the PGPLOT manual.
  
4 Title
  (Default - the title of the input table    Choice - any)
  
  The title to give to the present table. This is a
  character string, less than 50 characters long.
  
4 Value
  (Default - present value         Range - -1.0e20 to 1.0e20)
  
  The value to replace the current table entry value with.
  
4 Weedopt
  (Default - 'accept'          Choice - 'accept:reject')
  
  Do you want to accept or reject those rows whose entries
  in the specificed column lie within the limits specified?
  
4 Xrange
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The X start and end of X range of positions in the table
  that a data point can have to be plotted.
  
4 Yrange
  (Default - Min,max in table      Range - -1.0e20 to 1.0e20)
  
  The Y start and end of Y range of positions in the table
  that a data point can have to be plotted.
  
3 Author
  
    Alan Penny                      RAL              1991 July
2 Tbsort
  
   This takes a table and makes a new one with identical entries,
   but sorted on the values in a user defined column, either in
   ascending or descending order.
  
3 Parameters
  
4 In
  (Default - null)
  
  The file containing the input table
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Numcol
  (Default - 1            Range - 1 to last column)
  
  The  number of the column to do the sorting on.
  
4 Option
   (Default - 'ascending'      Choice - 'ascending:descending')
  
   Whether to sort into ascending or descending order.
  
4 Out
  (Default - null)
  
  The file to contain the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
  (Default - input table title or 'Output from Tbsort'    Choice - any)
  
    The Title to be added to the output file
  
3 Author
  
    A J Penny                  RAL               1991 May
2 Tbstat
  
  Calculate some statistics of one or two columns of data in a
  table or tables.
  
  The input of the second column is optional.
  
  It calculates statistics for each column:- number of values,
  minimum, maximum, mean, std dev, and std dev of mean.
  
  If there are two columns, it also calculates the regression line
  fit of one on the other and the correlation.
  
3 Parameters
  
4 In1
  (Default - null)
  
  The name of the file containing the first input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 In2
  (Default - null)
  
  The name of the file containing the second input table.
  
  (optional)
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Ncol1
  (Default - 1     Range - 1 to no of columns)
  
  First column in first table to take data from.
  
4 Ncol2
  (Default - 1     Range - 1 to no of columns)
  
  Second column in same or another table to take data from.
  
  (optional)
  
3 Author
  
  Alan Penny                    RAL             1991 May
2 Tbtran_auto
  
   This takes a table with X,Y positions and makes a new one with identical
   entries, but with the positions transformed onto the same coordinate
   system as another XY table.
  
   There have to be common stars in the two tables but they do not have to
   be matched, or aligned, or complete. The two coordinate systems must be
   related by (shift:rotation:magnification). Thus `shapes' in the two
   coordinate systems must be  similar. The program will fail if there is
   a shear, or a different scaling in and X and Y, or a distortion.
  
   It helps the program considerably if there are heights or magnitudes
   of the stars available. This is looked for in column three. If there
   is a header with `height' or 'mag', then this column is taken to
   have those values. If there is no such header, the user is asked
   if they are. If there is no column 3, or it does not contain heights
   or magnitudes, then the stars are analysed as though there are
   ordered by height, with the `brightest' first.
  
   The entries in columns 1 and 2 are taken as `X', `Y'. The output table
   then has values `X_1', `Y_1' with:-
  
     X_1   =    c_x(1) + c_x(2)*X  + c_x(3)*Y
  
     Y_1   =    c_y(1) + c_y(2)*X  + c_y(3)*Y
  
  With the `X coefficents', c_x(1), c_x(2), c_x(3) and the
  `Y coefficents', c_y(1), c_y(2), c_y(3), are calculated by
  the program.
  
3 Method
  
  The program works out the triangle between the three
  brightest stars in each list. It then looks at the two
  triangles, and sees if they are the same by comparing
  the ratios in each triangle of the length of longest
  side to the length of next longest, and to the length
  of the shortest side. If the ratios are the same within
  a chosen tolerance, then the triangle probably must have
  been made with the same stars.
  
  If the triangles do not match, then this is repeated
  with the four brightest in each list. The program works
  out all the possible triangles between the stars in each
  list. It then looks at each triangle in one list, and
  sees if there is a matching triangle in the other list.
  If there is no match, this is then repeated with the five
  brightest stars, and so on, until a match is made.
  
  The precision of the matching needed, and the number of
  matched triangles needed to confirm the right matching has
  been done is at the users choice.
  
  After enough triangles have been matched, and for each of these
  matched triangles they are enough like it, and enough such
  well matched triangles have been found, the stars in these
  triangles are assumed to be the same in the two lists.
  
  Then the transformation equation between them is calculated.
  
  The transform can either be the (shift:rotation:magnification)
  transform described above or a simple XY shift without rotation,
  magnification or squeezing.
  
  The first ('input') list is then transformed into the
  coordinate system of the second ('master') list, using this
  transformation equation.
  
 Column three of the Input and Master tables are assummed to have either
 the heights or magnitudes of the stars in the tables. These are then
 used so that the program searches amongst the bright stars first for
 triangle matches. If there is no column three for a table, then the
 stars are taken in the order they are in in the table.
  
3 Parameters
  
4 Ftol
  (Default - 5.0 or 2.0      Range - 0.0 to 1.0e7)
  
  The X or Y distance that a position calculated from the transform
  made for one matched triangle may be off from the position calculated
  from another matched triangle, and the two triangles still
  considered to be on the same coordinate system.
  
  The positions are calculated at the four corners of the system of
  stars that are in the matched triangles. Actually a bit outside the
  corners.
  
  This should be set as small as you think reasonable. If too small
  the program will reject real triangle matches. If too large,
  it will accept false triangle matches.
  
  The default error allowed is set at 2.0, for a simple XY shift, and
  at 5.0 for the more flexible full transform.
  
4 In
  (Default - null)
  
  The file containing the input table, to be transformed.
  
  The first two columns must be X,Y. It helps if there is a third
  column with either height or magnitude.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 In_mags
  (Default - 'heights'             Choice - 'heights:mags:none')
  
 Are the values in column three of the Input table magnitudes or
 heights? [If this is described in the table header for this
 column, this question is not asked.]
  
 Column three is used so that the program searches amongst the
 bright stars first for matches. If there is no column three, or the
 answer to this is `none', then the stars are taken in the order
 they are in in the table.
  
4 Ms_mags
  (Default - 'heights'              Choice - 'heights:mags:none')
  
 Are the values in column three of the Master table magnitudes or
 heights? [If this is described in the table header for this
 column, this question is not asked.]
  
 Column three is used so that the program searches amongst the
 bright stars first for matches. If there is no column three, or the
 answer to this is `none', then the stars are taken in the order
 they are in in the table.
  
4 Master
  (Default - null)
  
  The file containing the master table, to whose coordinate
  system the `input' table will be transformed.
  
  The first two columns must be X,Y. It helps if there is a third
  column with either height or magnitude.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Ntri
  (Default - 4      Range - 1 to 10000)
  
  For each matched triangle, this is the number of other matched
  triangles that must be like it, for the matched triangle to count
  as a 'good' matched triangle.
  
  If made larger, the program will do a better job of rejecting
  false triangles, but will take longer.
  
  If the program finds matches from only a small number of triangles,
  it automatically relaxes this criteria.
  
4 Out
  (Default - null)
  
  The file containing the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
  (Default - Input table title or `Output from TBTRAN_AUTO'
   Choice - any)
  
  The Title to be added to the output file.
  
4 Tol
  (Default - 1.0      Range - 0.0 to 1.0e7)
  
  The X or Y distance a vertex of one triangle may be off from
  the system of another matched triangle, and the two triangles
  still be recognised as a match.
  
  This should be set as small as you think reasonable. If too small
  the program will reject real triangle matches. If too large,
  it will accept false triangle matches.
  
4 Totntri
  (Default - 8      Range - 1 to 10000)
  
  This is the number of 'good' matched triangles that must be found
  for a fit to be considered sound and the calculations stopped.
  
  [The definition of 'good' is given in the help for the NTRI
   parameter.]
  
  If made larger, the program will do a better job of rejecting
  false triangles, but will take longer.
  
  If the program finds matches from only a small number of triangles,
  it automatically relaxes this criteria.
  
4 Type
  (Default - 'full'                  Choice - 'full:xyshift')
  
 Should the transformation equation determined be a full one
 (xy shift, rotation, magnification), or just an xy shift?
  
 The fit cannot be one that changes the shape of objects.
  
4 Xcoeff
  (This is an output parameter)
  
  The three output coefficents for the X transform.
  
  Calculated    X_1 = c_x(1) + c_x(2)*X  + c_x(3)*Y
  
  
4 Ycoeff
  (This is an output parameter)
  
  The three output coefficents for the Y transform.
  
  Calculated    Y_1 = c_y(1) + c_y(2)*X  + c_y(3)*Y
  
3 Author
  
    P W Morris                 Leeds             1994 Jan
    A J Penny                  RAL               1994 Nov
2 Tbtran_do
  
   This takes a table and makes a new one with identical entries,
   but with the positions transformed through a transformation matrix.
  
   The entries in columns 1 and 2 are taken as 'X,Y'. The output table
   then has values X_1  and Y_1  , where:-
  
        X_1 = c_x(1) + c_x(2)*X  + c_x(3)*Y
  
        Y_1 = c_y(1) + c_y(2)*X  + c_y(3)*Y
  
  
    The `X coefficents', c_x(1), c_x(2), c_x(3), and the `Y coefficents'
    c_y(1), c_y(2), c_y(3), being input by the user.
  
3 Parameters
  
4 In
  (Default - null)
  
  The file containing the input table. It must have the X,Y positions
  in columns 1 and 2.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Out
  (Default - null)
  
  The file containing the output table, with the transformed
  positions.
  
  The will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
  (Default - Input table title or 'Output from TBTRAN_DO'
   Choice - any)
  
    The Title to be added to the output file.
  
4 Xcoeff
  (Default - 0.0,0.0,0.0              Range - -1.0e20 to 1.0e20)
  
  The three coefficents for the X transfomation.
  
        X_1 = c_x(1) + c_x(2)*X  + c_x(3)*Y
  
4 Ycoeff
  (Default - 0.0,0.0,0.0              Range - -1.0e20 to 1.0e20)
  
  The three coefficents for the Y transfomation.
  
        Y_1 =  c_y(1) + c_y(2)*X  + c_y(3)*Y
  
3 Author
  
    A J Penny                  RAL               1991 May
2 Tbtran_load
  
   This calculates the transformation coefficents between two
   coordinate systems, converting:-
  
     'magnification, rotation, shift'
  
     to a transformation matrix of the form:-
  
        X_1 = c_x(1) + c_x(2)*X  + c_x(3)*Y
  
        Y_1 = c_y(1) + c_y(2)*X  + c_y(3)*Y
  
    The input parameters are fed in, and the six transformation
    coefficents are calculated.
  
    The input parameters are:-
  
      - The centre of the old coordinate system.
      - The magnification to apply to the old coordinate system.
      - The anticlockwise rotation in degrees to apply to that
            magnified coordinate system, about its old centre.
      - The shift to apply to that magnified, rotated coordinate system.
  
  The results are typed out, and also put into the program paramters.
  
3 Parameters
  
4 Centre
  (Default - 0.0,0.0       Range - -1.0e20 to 1.0e20)
  
  The old X,Y centre of the system.
  
4 Magnify
  (Default - 1.0         Range - 0.0 to 1.0e20)
  
  The magnification to apply to the old system.
  
4 Rotate
  (Default - 0.0       Range - -1.0e20 to 1.0e20)
  
  The anticlockwise rotation (in degrees) to apply to
  the magnified system, about the old cntre.
  
4 Shift
  (Default - 0.0,0.0       Range - -1.0e20 to 1.0e20)
  
  The X,Y shift to apply to the magnified, rotated system.
  
4 Xcoeff
  (This is an output parameter)
  
  The three output cofficents for the X system
  
        X_1 = c_x(1) + c_x(2)*X  + c_x(3)*Y
  
4 Ycoeff
  (This is an output parameter)
  
  The three output cofficents for the Y system
  
        Y_1 = c_y(1) + c_y(2)*X  + c_y(3)*Y
  
3 Author
  
    A J Penny                  RAL               1991 May
2 Tbtran_make
  
   This takes two tables (whose entries in columns 1 and 2 are X,Y
   positions of at least some same points) and calculates the
   transformation between the coordinate systems of the two tables.
  
   The coordinates in the first table are taken as `X,Y', and those
   in the second are taken as 'X_1 ,Y_1 ', and the transformation is:-
  
     Calculated   X_1 = c_x(1) + c_x(2)*X  + c_x(3)*Y
  
     Calculated   Y_1 = c_y(1) + c_y(2)*X  + c_y(3)*Y
  
   The coefficients are calculated so as to minimise the errors
   between 'calculated positions in the second table' and
   'actual positions in the second tables'. Points which are too
   discordant are dropped from the calculation of the transformation.
  
   Four types of transformation may be calculated:-
  
   Code          Type
   ----          ----
   shift         Shift [c_x(2)=1; c_x(3)=0; c_y(2)=0; c_y(3)=1]
   rotshift      Shift and rotation
   magnrotshift  Shift, rotation and magnification
   full          Shift, rotation, magnification and X/Y stretch
  
  
  The input tables may either be taken as consisting of matching pairs,
  or the program can look for rows with the same names to treat as the
  matching pairs.
  
  The results are typed out, and also put into the program paramters.
  
3 Parameters
  
4 In1
  (Default - null)
  
  The name of the file containing the 1st input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 In2
  (Default - null)
  
  The name of the file containing the 2nd input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Names
  (Default - 'no'            Choice - 'yes:no')
  
  Match up pairs of points in the 1st and 2nd tables by looking
  for rows with the same names? If not, then assume entries
  are the same order in the two tables.
  
4 Siglim
  (Default - 2.5     Range - 0.0 to 1.0e20)
  
  When calculating the transformations, discordant points are
  rejected if their calculated positions in the 2nd table lie
  more than 'SIGLIM' times the standard deviation away from the
  2nd table positions.
  
4 Trtype
  (Default - 'full'  Choice - 'shift:rotshift:magnrotshift:full')
  
  The type of transformation to be calculated.
  
   Option        Type
   ------        ----
   full          Shift, rotation, magnification and stretch
   magrotshift   Shift, rotation and magnification
   rotshift      Shift and rotation
   shift         Shift [c_x(2)=1; c_x(3)=0; c_y(2)=0; c_y(3)=1]
  
4 Xcoeff
  (This is an output parameter)
  
  The three output cofficents for the X system
  
   Calculated  X_1 = c_x(1) + c_x(2)*X  + c_x(3)*Y
  
4 Ycoeff
  (This is an output parameter)
  
  The three output cofficents for the Y system
  
   Calculated  Y_1 = c_y(1) + c_y(2)*X  + c_y(3)*Y
  
3 Author
  
    A J Penny                  RAL               1991 May
2 Tbvalue
  
  This takes the value of a single element in an input table, and types
  out that value and also puts it out as a parameter of the program.
  
  The column the element is taken from may be defined either from the
  number of the column or from the column's header.
  
  The row the element is taken from may be defined either from the
  number of the row or from the row's name.
  
3 Parameters
  
4 Column
  (Default - 1           Range - 1 to number of columns in table)
  
  The number of the desired column.
  
4 Header
  (Default - ' '        Choice - any)
  
  The (up to) 20 character string of the header of the desired
  column.
  
4 In
  (Default - null)
  
  The input file containing the input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Name
  (Default - ' '        Choice - any)
  
  The (up to) 20 character string of the name of the desired row.
  
4 Row
  (Default - 1           Range - 1 to number of rows in table)
  
  The number of the desired row.
  
4 Usehead
  (Default - 'no'    Choice - 'yes:no')
  
  Define the column desired from its header ('yes'), or from the
  the number of the column ('no')?
  
4 Usename
  (Default - 'no'    Choice - 'yes:no')
  
  Define the row desired from its name ('yes'), or from the
  the number of the row ('no')?
  
4 Value
  (Output parameter)
  
  The value of the table element is put out into this program
  parameter.
  
3 Author
  
    A J Penny                 RAL            1991 Dec
2 Tbweed
  
  This makes a new table which is a copy of an old table, but
  with only those rows whose values in user defined columns lie in
  (or optionally outside) user assigned ranges are copied over.
  
  Up to ten columns can be tested. The repeated asking for columns
  is stopped by responding '0' to the request for column number.
  
3 Parameters
  
4 In
  (Default - null)
  
  The name of the input file containing the input table.
  
  The table must be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Lims
  (Default - 0.0,0.0          Range - -1.0e20 to 1.0e20)
  
   The lower and upper limits to the acceptable values for the entries
   in this column.
  
   If 0 is input, then this column input is ignored, and no more
   are asked for.
  
   [This help applies to the up to 10 columns, through the 'LIMS1',
   'LIMS2', ... 'LIMS10' parameters.]
  
4 Ncol
  (Default - 1            Range - 0 to no of columns)
  
   The number of the first column whose values are to be tested.
  
   If 0 is input, then this column input is ignored, and no more
   are asked for.
  
   [This help applies to the up to 10 columns, through the 'NCOL1',
   'NCOL2', ... 'NCOL10' parameters.]
  
4 Option
   (Default - 'accept'     Choice - 'accept:reject')
  
   Accept or reject entries whose column values falls in the
   given ranges.
  
4 Out
  (Default - null)
  
  The name of the output file to contain the output table.
  
  The table will be a standard Starman table format file. It
  is a Starman ADAM .SDF image, with `real' 32-bit real values,
  with each column having a header of up to 20 characters, and
  each row having a name of up to 20 characters.
  
4 Title
  (Default - Input table title or 'Output from TBWEED'     Choice - any)
  
    The Title to be added to the output file.
  
3 Author
  
    A J Penny                RAL               1991 May
1 Images

  Starman has some image handlers ready for use. These are the 
  IM-programs, and they have their own help. There is also the
 'Interact' program, the main image display interaction program.

2 Formats

 In an ideal world you would not need to know how your data are 
 stored. The storage mechanism would be transparent, and you would 
 perceive your data directly through the programs.  However, for 
 historical reasons there are numerous data formats in astronomical 
 software, and at the moment you have to be aware how your data is 
 stored. Starman is no exception to this. It uses the ADAM image 
 format and you need to know a little bit about this to use the 
 programs properly.

 The Starman suite of programs uses a simple data format for storing
 images in. Images are stored on disk as `SDF' files. Thus an called 
 'fred' will be stored as 'fred.sdf' on disk. (As with the tables, 
 inside any Starman program, you do not use the `.sdf' suffix in 
 referring to the image.)

 Both 'real' format and 'short' format images can be used. The 'real'
 format uses 4 bytes per pixel, and the 'short' format only 2 bytes
 per pixel. However, the 'short' format needs care with handling.

 It is important to understand the limitations of the precision. see
 the `Precision' help.

 There is some progress being made for a system whereby the programs
 can read images in a number of other formats (e.g. IRAF, FITS, etc.),
 but this is only just becominmg available. Check whether this is
 here by trying to read data in such formats.

2 What_is_in_an_image

 An image is a 2-D array of numbers. The numbers in an image are 
 considered as stored in individual `pixels'. The coordinates are 
 called 'X' and 'Y'.

 The numbers are stored with a precision of about 1 in 10 million
 for 'real' images, and with a precision of about 1 in 50000 for
 'short' images, but see the `help' in `Starman images precision' for 
 more detail on this.

 Each image also has two descriptors, BSCALE and BZERO. These
 are used so that the value of a pixel is:-

      Value = BSCALE*(disk value) + BZERO

 Generally you need not be aware of this, but see the 
 `Starman images precision' help.

 Each image also has a pixel magic value descriptor, `INVAL'.
 This is used to flag `bad' pixels. A pixel having this
 value (its `stored' value, not necessarily its 'true' value)
 will be considered by the programs as being a `bad' one
 and dealt with specially.

 The image also has a descriptor 'TITLE', a 50 long character 
 string. It does not form any part of the image itself, but can 
 be accessed by the user as a source of additional personal 
 information about the image. Thus for example an image called 
 'VFLAT' (stored as vflat.sdf on disk), could have a title of:-

       'This is a flat field for the V filter'

 This title is then available for inspection by the user, say by 
 the program `Imdes', and may be put out to the user by some 
 programs to show the user something about the image.

 The image may also have any number of further descriptors,
 added by the user, or input via `Imfitsin', or by some other
 programs.

2 Precision

 The numbers in an image can have any value, but there is an 
 actual storage matter. On the disk (or on tape), the numbers are 
 coded either into 16-bit integers (short format) or as 32-bit 
 reals (real format).

 Each image has assigned a scale (BSCALE) and a zero (BZERO), 
 which are applied to all the numbers in an image. Thus the number 
 actually stored is:-

         Stored value = (true value-BZERO)/BSCALE

 Thus if an image has BZERO 900,000.0 and BSCALE 10.0, then
 a value of 1,000,000 will be stored as 10,000.

 Similarly, when a program reads an image from disk or tape,
 it will get the true value by:-

        True value = (Stored value)*BSCALE + BZERO

 All calculations inside a program are done in real single precision
 arithmetic, accurate to about 1 part in 10 million.

3 Real format

 Numbers are stored as 32-bit real numbers, with possible values
 between +/- 10 to the 37. The accuracy is about 1 part in 10 million.

 In most real images, BSCALE is set at 1.0, and BZERO at 0.0.
  
3 Short format

 Numbers are stored into 16-bit integers.

 Thus if a program wants to store a number of value (say) 1,000,000 
 it cannot do this directly, as a 16-bit number can only have a value 
 between -32768 and +32767. So each image often has to make use of 
 the scale (BSCALE) and zero (BZERO) values, which are applied to all 
 the numbers in an image.

 The advantage of this is that images are generally half the
 size of a `real' image. This means that disk and tape
 storage problems are halved, and reading and writing images
 into and out of programs is faster.

 A disadvantage of this is that the precision of stored values is
 only about 1 in 60000. This is however good enough for most
 astronomical work.

 Another disadvantage is that one has to be careful about
 dynamic range. If one wanted to store an image whose values
 varied between 0.8 and 1.2, with a precision of 0.0001 (say a
 flat field), then it would be no good storing this with
 the common default of (BSCALE=1.0,BZERO=0.0), as the values
 would actually stored as the INTEGERS `0' and '1', and on
 reaccessing them, they would then only have the values
 of 0.0 and 1.0. They way round this is to put the BSCALE
 and BZERO appropriately. Thus for this example, a BSCALE of
 0.0001 and a BZERO of 0.0 would store the numbers as integers
 between 8000 and 12000, which would then be able to be
 accessed as values between 0.8 and 1.2 with steps of 0.0001,
 as is desired.
 
 The programs deal with this generally without you having
 to think about it, but some programs (IMFITSIN for example in
 certain cases) will not do this, so you have to think before you
 use them.

2 Coordinates

 The bottom-left-hand pixel in an image is called the (1,1) pixel. Each
 pixel is thought of stretching for one pixel coordinate wide. Thus the
 blh pixel is thought of as stretching from 0.0 to 0.9999.. in X and Y,
 with its centre at (0.5,0.5).
  
2 Image_Menu

  The general programs to deal with images as images are:-
  ----------------------------------------------------------

  Name          Function
  ----          --------

 imcalc         Apply maths to an image or to any combination of images
 imcube         Cut a 2-D image out of a 3-D or 4-D image
 imcut          Make another image (sectioned,binned,inverted)
 imdes          Look at the descriptors (headers) of an image
 imfits_dr      Read a FITS image from a disk file
 imflash        Simple display of image
 imjoin         Join a number of images together
 imkey          Insert pixel values by keyboard into an image
 import         Import descriptors from other extensions into 'Starman'
 imrotate       Rotate image ant-clockwise by 90,180,or270 degrees
 imsmooth       Apply 'top-hat' or Gaussian smoothing to an image
 imstat         Calculate statistics for an image
 imtype         Convert files between (real;integer;16-bit integer)
 imweed         Set pixel values within a defined range to be invalid

 There are other programs which handle images. These are listed
 in the other 'help' sections. Amongst these the most relevant here is:-

  Name          Function
  ----          --------
 interact       Interact with a displayed image
 tbplot         Plot table graph/histogram - image picture/contour
 
2 Image_Display

 Images can be simply displayed on any X-device.

 Sometimes if you are on a remote device, you will need to do
 the Starlink utility `xdisplay'.

 Also any device, including hardcopy, can be used to output a greyscle
 plot of an image  by using the image graphical output in the INSPECT
 option in the INTERACT program.

2 Conversion_from_other_systems

 If you have images in the FITS, FIGARO, or non-Starman ADAM formats, 
 there are programs in Starman and KAPPA which you can use to convert 
 them to the .SDF format used by Starman. 

  Format                 Conversion Program
  ------                 --------------------
  FITS (disk)            imfits_dr 
  ADAM (=HDS/NDF/SDF)    import 
  Figaro (=DST)          dst2ndf in KAPPA, then import
  FITS                   fitsin in KAPPA, then import

 As the ADAM and Figaro conversion programs usually give you `Real'
 images, you can then use IMTYPE to convert them to the 16-bit
 Integer*2 `Short' format optional use in Starman. (Remember the possible
 use of scaling to avoid under/overflow.)

 The image made from Figaro or HDS may be 3-D or 4-D. You can use
 'imcube' to extract the desired 2-D plane out of the image.
    
 If you are in real trouble, use those packages to write a FITS tape
 and read the files in with FITSIN in KAPPA.

2 Conversion_to_other_systems

 To put images into the FITS/ADAM/FIGARO formats, there 
 programs in in ADAM and Figaro which you can use to convert them to 
 the desired format from the .SDF format used by Starman. 

  Format                 Conversion Program
  ------                 --------------------
  ADAM (=HDS/NDF/SDF)    import in Starman (converts descriptors)
  Figaro (=DST)          dst2ndf2dst in KAPPA, after import
  FITS                   fitsout in KAPPA, after import
  FITS (disk)            dfitsout in KAPPA, after import

 If your Starman images are in the 'short' format', then as the ADAM 
 and Figaro conversion programs usually work with `Real'
 images, you will have to use 'imtype' to convert the normal Starman
 16-bit Integer*2 `Short' formats to `Real', before converting them.

 You should then use 'import' to copy descriptors in the FITS or
 FIGARO extensions.
1 Introduction

 Starman is a crowded field stellar photometry solution.

 With Starman you take the raw CCD frames and with the minimum of
 interaction measure magnitudes of stars which are in crowded fields. 
 The suite of programs not only includes the actual measuring programs, 
 but also ones to sort out your observations, do the reductions of the 
 raw CCD to linear intensity images, determine the stellar profiles, and 
 handle the first stages of producing such things as color-magnitude 
 diagrams. 

 Bug reports, suggestions for improvements or new programs should be
 sent to 'alan.penny@rl.ac.uk'.

 'Starman' is not an acronym, and so should only have the first letter
 of its name in capitals.

 Starman has been constructed as a package of programs to aid the reduction of
 globular-cluster stellar photometry. After the programs that deal with the
 actual measuring of star magnitudes were written, it became apparent that it
 was necessary to have a large number of other programs to support those core
 programs, if actual astronomy was to be done. Thus the package has became
 capable of dealing with many of the diverse problems that occur when
 performing stellar photometry on images. For this reason, it has became
 worth releasing to the community as a general purpose stellar-photometry
 tool.

 In the `support' component of the Starman package, there are a number of
 general purpose programs for image and table handling and for display.
 These are thus useful in other, non-stellar-photometry, astronomical data
 reduction studies.
 
2 KAPPA

 Using KAPPA

 The additional useful programs which back up Starman are those already
 existing in the KAPPA package which are listed elsewhere.

To use these, you must add the KAPPA package. Do:-

     > kappa

 To access help on KAPPA programs, do:-

     > kaphelp
1 Menu

 A listing of Starman programs. 
 
2 Stellar_Photometry_Programs

  Stellar Photometry Programs

 Name           Function
 ----           --------
 addstars       Add or subtract stars to an image with noise
 automag        Automatic aperture photometry
 average        Take the average of a number of outputs from MEASURE
 chi            Put thresholds on the goodness of fit of MEASURE output
 diagram        Plot a Colour-Magnitude or Two-Colour diagram
 dustring       Add or remove 'dustrings' from an image
 interact       General image display and interaction program
                 - Perform interactive aperture photometry
                 - Perform interactive Gaussian photometry
                 - Zoom, pan, blink
                 - Inspect image values, slice, plot, make hard-copy
                 - Set and alter colour Look-Up Table
                 - Mark and/or display position lists
                 - Scrutinise the output of MEASURE 
 profile        Find the mean profile of a number of stars
 simplemag      Do simple Gaussian profile fitting photometry of stars
 sprinkle       Make a table of stars with randomised positions, magnitudes
 starfind       Find stars in an image
 unccd          Process a raw CCD image to remove detector effects

2 Image_handling_programs

 Image handling programs

 Name           Function
 ----           --------

 imcalc         Apply maths to an image or to any combination of images
 imcube         Cut a 2-D image out of a 3-D or 4-D image
 imcut          Make another image (sectioned,binned,inverted)
 imdes          Look at the descriptors (headers) of an image
 imfits_dr      Simple FITS image into Starman NDF image format
 imflash        Simple display of image
 imjoin         Join a number of images together
 imkey          Insert pixel values by keyboard into an image
 import         Import descriptors from other extensions into 'Starman'
 imrotate       Rotate image ant-clockwise by 90,180,or270 degrees
 imsmooth       Apply 'top-hat' or Gaussian smoothing to an image
 imstat         Calculate statistics for an image
 imtype         Convert files between (real;integer;16-bit integer)
 imweed         Set a defined range of pixel values to Invalid
   
 interact       General image display and interaction program
                 - Perform interactive aperture photometry
                 - Perform interactive Gaussian photometry
                 - Zoom, pan, blink
                 - Inspect image values, slice, plot, make hard-copy
                 - Set and alter colour Look-Up Table
                 - Mark and/or display position lists
                 - Scrutinise the output of MEASURE 
 tbplot         Plot table graph/histogram - image picture/contour

 There are other programs in KAPPA which handle images. 

2 Table_handling_programs

 Table handling programs

 Name           Function
 ----           --------
 tbcalc         Calculate entries in table column(s)
 tbchart        Plot out a realistic star map
 tbcomps        Find stars within/not within an annulus of each other
 tbcut          Cut out parts of a table
 tbdes          List/write/copy/delete descriptors
 tbjoin         Join tables together
 tbkey          Input numbers from keyboard into a table
 tblist         Type and/or put in file the contents of a table
 tbload         Input an ASCII text file into a table
 tbmatch        Extract entries with matching names in two tables
 tbnative       Convert table format from different machine
 tbnmatch       Order tables so they have their names in the same order
 tbplot         Plot table graph/histogram - image picture/contour
 tbpmatch       Extract entries with matching positions in two tables
 tbrenum        Renumber names in a table
 tbsheet        Spread-sheet program for inspection/insertion/etc
 tbsort         Sort entries in a table
 tbstat         Perform statistics on column(s) in tables(s)
 tbtran_auto    Transform one XY table to another automatically
 tbtran_do      Transform XY table positions using transform eqn
 tbtran_load    Calc transform eqn from a given magn, rotn, shift
 tbtran_make    Calc transform eqn from two matched XY tables
 tbvalue        Output the value of a table element
 tbweed         Make a table with only those entries with a parameter
                  in a range

 interact       General image display and interaction program
                 - Perform interactive aperture photometry
                 - Perform interactive Gaussian photometry
                 - Zoom, pan, blink
                 - Inspect image values, slice, plot, make hard-copy
                 - Set and alter colour Look-Up Table
                 - Mark and/or display position lists
                 - Scrutinise the output of MEASURE 

1 Parameters

2 Parameter_introduction

 Starman is a command-driven package.  Thus to run the program 
 `imcut', you  type `imcut'. Commands in their turn have parameters
 by which you can qualify their behaviour. Thus to tell the `imcut'
 program that you want the first 50 pixels in X cut out, you
 have to set the \verb|imcut| parameter `xrange' to `1,50'. The 
 values of parameters are obtained by the programs in one of 
 seven ways:-

  1) By your responses to a prompt
  2) When you supply them on the command line when starting 
      the program 
  3) When there is a `\\' on the command line 
  4) When you set them up globally
  5) From `hidden' values
  6) By using the `Advanced Interfacing' described elsewhere.
  7) By making a new .ifl `interface' file 


 This is the ADAM parameter system which is described in the
 ADAM SUN4 document. For convenience, the main aspects of this
 parameter system as seen by a user of Starman are described below. 

 [Most of what follows is thus applicable to any ADAM application.] 

2 Response_to_Prompts

 When a program is running, and wants to know the value of the
 (say) `XXX' parameter, it will output a request in the format:-

      XXX - prompt/ >
  or
      XXX - prompt/default/ >

 You respond with the value that you want the parameter to have. If a single
 value is needed, just input that. If more than one value is needed, input
 them separated by commas. Character strings may have spaces. If you reply
 with a `carriage return', then the default value, if any is taken. There
 are rules on defaults, acceptable values, and on getting help.

2 Command_Line_Setting

 Parameters may be assigned values on the command line. Thus to run IMCUT
 where you want the cut out first 50 pixels in X of the image, you could
 type:-

  > imcut $STARMAN_DATA/imcut_in out=fred xrange=\[1,50\] 
          yrange=\[1,99\] bin=\

 or

  > imcut $STARMAN_DATA/imcut_in out=fred xrange=\[1,50\] \\

 The first 50 pixels in X and the first 99 pixels in Y will be cut out with
 no binning. In the first example. you will only now need the on-line input 
 of the `TITLE' whilst running the program, 
 
 This example illustrates a number of facets of inputting parameter values on
 the command line. The rules about command line input are:- You have to put
 the parameter name and an equals sign before the parameter value. If you do
 not, then that parameter value is taken to refer to the parameter which is
 in the same position in the program `interface' file, the file which
 Starman uses to access parameters. Generally, the first two
 parameters in an interface file will be the `IN' and `OUT'  parameters, 
 but this is not an iron-clad rule. If the parameter name and `>' are 
 followed by a blank space, the default values are taken.

2 `Hidden'_Setting

 Some programs have parameter values that you cannot normally get at. The
 program will automatically assign the default values to these parameters.
 These parameters are known as `hidden' parameters. 

 These defaulted parameters enable programs to have many options, say for
 controlling the appearance of some graphical output, without making routine
 operations tedious because of a large number of prompts. These defaulted
 values are described in the HELP for each program. 

 If you wish to change the values of these parameters, you may do so by
 inputting them on the command line.


2 Advanced_Screen_Interface_Setting

 For certain parameters in certain programs, one can use the flexible Advanced
 Screen Interface described elsewhere.

2 Interface_Files

 The Starman programs pick up information about the parameters from
 the `interface' file. Thus there is an interface file for (say) 
 the `imcut' program.

 This can be looked at:-

 > ls $STARMAN_BIN/bin/imcut.ifl

                         (EXTRACT FROM)
 #   
 # IMCUT.IFL
 #
 interface IMCUT
    helplib   '$STARMAN_HELP_A IMCUT parameters'
    parameter IN
       type    NDF
       access  READ
       helpkey 'IN'
       ppath   'dynamic,default'
       default !
       position 1
       prompt 'Input image'
    endparameter
    parameter OUT
       type    NDF
       access  WRITE
       helpkey 'OUT'
       ppath   'dynamic,default'
       default !
       position 2
       prompt 'Output image'
    endparameter
    parameter XRANGE
       type    '_INTEGER'
       ppath   'dynamic'
       position 3
       helpkey 'XRANGE'
       prompt 'X range to cut out'
    endparameter
    parameter CHECK
       type    '_LOGICAL'
       ppath   'dynamic'
       position 7
       helpkey 'CHECK'
       prompt  'If any box pixel invalid, output invalid? (yes:no)'
    endparameter
    parameter TITLE
       type    'LITERAL'
       ppath   'dynamic'
       position 8
       helpkey 'TITLE'
       prompt  'Title to add to output image'
    endparameter
 endinterface
 
 You can set you own `permanent' parameter values by making your own
 interface file. `cp' the file from the `starman' directory into the
 directory you are working in (as `NAME'.ifl), and alter the lines. Thus to
 set the XRANGE to `1,50', add into the XRANGE parameter part:-

     VPATH 'default'
     DEFAULT '1,50'

 Then every time you run IMCUT when you are in this directory,
 the XRANGE parameter will be `hidden' and set at this value. This
 will be true even if you exit from Starman and later re-enter. However
 this only works if your default directory is this directory where your
 new interface file is.

2 Defaults

 When you are inputting parameters by responding to a prompt, you may be
 given a `default' value. Thus if you are using IMCUT, when you are asked
 for the range in X pixels to cut out, for an input image with 100 pixels in 
 X, you would get:-

    XRANGE - prompt/[1,100]/ >

 Thus the default values are to take the entire X range. There are three 
 types of responses you can make. You can:- input your own values to override
 the defaults (in this case `2,99' would override); input some of your
 own values. If there is more than one value to input, if you do not put
 all the values in, the remaining ones are set at the default (in this 
 example `2' would results in values of `2,100' being taken); you can
 just press `carriage return', when the defaults are taken.
 
 Help on the defaults is given in the normal help system

2 Acceptable_Inputs

 For some parameters, there are checks on the input. Thus for the
 `imcut' xrange| parameters, any input of X pixel range which would fall
 outside the image would be refused.

 If an unacceptable value is input, a help on what is wrong is output,
 and then either the parameter is asked for again, or the program will
 take some other action.

 Help on acceptable values is given in the normal help system.

2 Help_on_Parameters

 Help on the parameters of a program is available via the normal help
 for the program. Thus to get a list of all the parameters for the 
 program `imcut', type:-

     > starmanhelp imcut param

 You will then also be able to get the help on the individual 
 parameters.
 
 When you are actually running the program, respond with `?', and the
 help on the parameter will be given.

2 Menus

 Some Starman parameters are menus from which you select an option.
 You do not have to enter the full option string, but merely a string 
 that selects a choice unambiguously.  In many cases this can be as
 little as a single character.  Here is an example from IMCUT:-

     SAMPLE - prompt/'yes'/ >

 The acceptable values you could input now are `yes' or `no'. But `y' 
 or `n' would also be acceptable. 

1 Phot_run_thru

  A Photometry run through.

 The first goal of Starman is to provide tools for performing stellar 
 photometry on images. To give an introduction on how to use these tools,
 a list is given below of a basic run through of how to get from the
 data on tape to the output astronomy.
 
  1) IMFITS_DR 
       Read the data from a FITS disk file into \starman format files.

  2) UNCCD
       Process your raw image into one without CCD effects.

  3) INTERACT    
       Make a table of the (X,Y) positions of about six bright
       isolated stars.

  4) PROFILE    
       Use those stars to define the mean star profile.

  5) STARFIND (+INTERACT) or just INTERACT
       Make a table of the (X,Y) positions of all the stars in the image
       you want to measure, and also all the stars that
       affect them. If you are measuring stars on a series
       of exposures to the same field, you should first make a
       'deep' exposure by adding all the exposures together
       with IMJOIN, and then marking the positions on that.
       This will enable you to mark the very faintest stars.
       Wether it is worth the effort if you have to align the
       images first is another matter.
 
  6) MEASURE   
       Do the fitting, using the profile and star position
       list already made.
 
  7) INTERACT    
       Have a look at the cleaned image and/or the places
       stars fitted etc, to do a quality control check
       You may at this stage wish to go back a number of steps.
 
  8) CHI 
       Take the magnitude list output of MEASURE and define
       the Chi-squared values for an acceptable fit.
 
  9) AVERAGE     
       Average all acceptable fits from several different
       exposures measured using the same star list.
 
 10) DIAGRAM    
       Combine the magnitudes to make a colour-magnitude
       or colour-colour diagram.

 11) AUTOMAG 
       Perform automatic aperture photometry on the images
       with the standard stars, and correct for atmospheric 
       extinction.

 

1 Photometry

 The Starman package provides the tools for doing stellar photometry. 
 However the  user will also need some expertise in doing photometry if 
 he or she is to use the tools properly. The amount of expertise one needs 
 to do such photometry depends on the accuracy desired and the precise 
 type of photometry being done. Starman provides the tools for photometry, 
 but cannot provide the expertise. A sub-section of this help lists some 
 reading that might be useful for novices in photometry. 

2 Crowded-Field_Stellar_Photometry

  No help yet available, sorry.

2 Photo-electric_Type_Photometry

 There is a major photometry mode, that of the `Classical' Photo-Electric
 photometry mode (with data either from P-E photometers or CCDs). This mode
 is one where a (possibly large) number of individual magnitude estimates
 are made during a night, each of a single star, scattered over the sky, 
 and it is desired to reduce them to a standard-magnitude system. Starman 
 cannot deal efficiently with  reducing magnitudes made in this mode. 

 There is the Starman program AUTOMAG which is designed to take CCD 
 images and do part of this work, looking up standard magnitudes and 
 allowing for extinction. However the output from that program needs 
 extensive further work, such as allowing for errors in the night's 
 extinction, allowing for colour, time, and/or azimuth dependent 
 extinction, determining colour equations. If there is only a limited 
 amount of such data, this further work can be done by hand. If a large 
 amount has to be reduced, then special purpose programs need to be 
 written by the user.

2 Further_Reading

  No help yet available, sorry.
1 Program

 A Programmer's Guide to Starman

 For the best guide, browse through the source code, with
 `starmanhyperhelp'.

 Starman has evolved from the Interim environment ASPIC GRASP suite
 of programs, with the influence of the IRAF SPP programming language.
 It now runs under the Starlink ADAM environment.

 The aim has been to produce readable code, and to protect against
 future changes in the environment.

 Thus the code is written in what seems to me to be a nice and neat, but not
 too curt, style. Sub-routine calls to the outside world are insulated
 through subroutines, and all non-public domain libraries have been
 excluded.

2 Use_of_the_ADAM_Environmant

 To understand the basic rules of using the ADAM Environment, resd the
 Starlink Starlink Guide/4 document.

 All communication with the ADAM system goes through the routines
 in the `starflib_adam.f' file. (Although IMPORT avoids this.) These
 routines provide simple interface calls for the programmer.
 
 The ADAM use of the `.ifl' interface files for communication with the 
 outside world is normal.

2 Programming_Style

 The style generally follows the IRAF SPP style. Features are:-

  - Use of include files with COMMON for passing numbers around the programs.

  - Use of `implicit none' to check on varaibles.

  - Use of a standard way of starting a subroutine -

    CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
    C s/r name -- one line description                           
    C    lines of description                                    
    C                                                            
    C   author              institution              date        
                                                              
          subroutine name ( param1, param2, etc. )               
                                                              
          implicit none                                          
          include files                                          
                                                              
          type       param1       !i: description                
          type       param2       !o: description                
    C--                                                          
          types    work variables                                
    Cbegin                                                       
                                                                 
           s/r code                                             


 - The use of the ``--'' double minus sign indicates the start and
   end of the s/r description. So in no other location are two
   minus signs to be used.

 - Extensive use of comments.

 - Use of comments to be restricted to after column 80, preceeded
   by an exclamation mark. Sometimes comments starting from
   line 1 (with a ``C'') have to be present for readability.

 - No sub-routine to extend over more than 200 lines (including
   start and comment lines).

 - All programs to work as sub-routines to the ADAM system. Thus a 
   program should start with a special subroutine whose only
   purposes are to be linked in with the ADAM `top' system, and in its
   turn call the real program, which starts with a subroutine
   of name `t_PROGRAM', and to set up the Starman programming
   start values, and to translate those back to the ADAM system
   when leaving the programe

    CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 
    C `name' -- (Program) `one line description'                 
    C                                                            
    C   author              institution              date        
                                                                
          subroutine `name' ( ierradam )                         
                                                              
          implicit none                                          
                                                              
          integer    ierradam       !o: ADAM error flag          
    C--                                                          
    Cbegin                                                       
                                                              
          call starman_start                                   
                                                              
          call t_`name'                                        
                                                              
          call starman_end ( ierradam )                        
                                                              
          end                                                  
 
 - Use of a common `ST_FAILED' variable to show program failure.

 - Exit from s/rs on `ST_FAILED' being set.

 - Code to be in lower case.
 
 - Indentation by three columns at each step.

 - Variables in COMMON to be in upper case.

 - Often used variables relating to images and tables to
   be given standard names and be loaded by the use
   of the `image.inc' and `table.inc' include files.

 - The top level sub-routine to be mainly just a small set of
   calls to sub-routinesw which do the actual work.


2 Starman_General_Sub-routines

 In the `/lib' sub-directory, there are a large number of subroutines
 which are used by more than one program. The programmer should
 browse through the files there. 

 The routines which address the ADAM routines are kept in one file, the
 `starflib_adam.f' file. There is also a file which has routines that whilst
 they are not too peculiar, do have some Unix specific calls and have
 thus been separated to ease in porting, into the file `starflib_unix.f'.

 Amongst the routines are a number of sets of sub-routines which are of 
 general use in writing programs. These general sets include:-

 - Typing out: 
      There are two sr/s, printo which
      types out a line of text, and printd which does the same, but can
      insert variables in it, in the fashion of the C routine printf.
      To make that work, you need to start the program with pargbeg
      to set up the system. Then the routines parg(cilr) let you load
      character strings, integers, logicals and reals, which are then
      inserted in a printd s/r as 

       call printd ( ' text %c %d %l %f ' )   

 - Text:  
      There are useful s/rs for dealing with text strings. These
      are lbgone, lens, charln, lowcase, uppcase.

 - Vector Arithmetic:   
      Arrays of numbers may be simply manipulated with the routines found 
      in `starflibv.f'. 
      An example of this is call aaddr ( a, b, c, n ) which will add
      the two real arrays, `a' and `b', to produce the array `c', doing it for 
      the first `n' items in the arrays. These routines do not deal with 
      `magic' values.

 - Image I/O:   
      Opening images for reading and writing 
      is done with the opim(isur)(rw), opimz(rw), 
      opim4zr, and opim4(irs)w routines (these in turn use the
      ADAM environment calls to do the actual work). Images are closed 
      with the canpar routine. There are also routines for
      accessing descriptors of images, gtimzd, gtdes(cir), 
      gtdesn, gtdesn_gen, gtim(irs)d, ptdes(cir), 
      gtdescn, 

 - Table I/O:  
      Opening tables for reading and writing 
      is done with the optab(rw) routines (these in turn use the
      ADAM environment calls to do the actual work). Tables are closed 
      with the canpar routine. There are also a number of routines
      for accessing names and headers in tables.

 - Parameter I/O:  
       Getting parameters from the
      user are done with the get1(bcir)  and
      get(2345)(ir) routines. These 
      parameters are cancelled with the canpar routine. Putting
      parameters is done with the put(123)(ir) routines. These 
      routines in turn call ADAM ones.

 - Work Space:  
      Work space is opened with the gtwrk(irs) routines, and closed
      with the wrkcan one.

 - Image Display:  
     The image DS_ display routines work for X-windows. 
     One can also use the PGPLOT routines through GKS
     to access other output devices

 - Graphics:  
      There are routines which can be used
      as an interface to some of the PGPLOT routines, These are mainly to
      do with opening and closing devices, where it has been found
      useful to have them in a standard form. There are some other packs of
      PGPLOT routines that have been found useful. 
           
 - Copying Arrays: 
      There are a number of routines
      that copy data between arrays in a number of useful fashions.

 - Maths: 
      There are a number of useful mathematical routines. These have been
      provided to escape from the straight-jacket of the NAG system, and 
      thus make the suite portable. There is a complete `sort' set in 
      these.



2 Needed_Outside_Libraries

 The needed libraries, outside of those of Starman, are:-

 - Graphics:  
     The graphics works through PGPLOT. For the Starlink implementation, 
     PGPLOT uses GKS and GNS libraries, and the EMS_ and CHR_ libraries.

 - Image Display:  
     The image DS_ display routines work for X-windows. Thus the libraries for
     X drivers are needed. The PGPLOT routines are needed for the GKS
     calls in PGPLOT to access other output devices.

 - Astrometry:  
      The Starlink SLALIB astrometry library.

 - NAG:  
      The Numerical Algorithms Group NAG library. This is not used.

2 Directory_Structure

 The main Starman directory contains Starman start script and the
 help file.
 
 The sub-directories contain:-

 - /bin --  Executables and .ifl interface files

 - /`program' --  Each sub-directory contains the code for one
      of the Starman programs, together with its makefile. These are not
      the general purpose image and table programs, which are in the 
      /image and /table  sub-directories.

 - /image --  Code for the `image' programs, for example
                       imcalc, imcut, etc.

 - /table --  Code for the `table' programs, for example
                       tbcalc, tbcut, etc.

 - /lib --  General purpose subroutines and subroutines to 
                     access the ADAM environment.

 - /disp --  Display subroutines.

 - /docs /help /hyper --  Documentation

 - /build --  Package build under the Starlink system.

 - /monolith --  Files for building the monolithic version.



2 Making_the_programs

 Starman uses the normal Unix  \bf make system. It has its top level
 makefile.

 These perform some of the functions of the UNIX  make tool, but are
 much more simple and limited.

3 Monolith_version

 To enable things to load quickly, all programs are statically linked.
 However, this does case problems in disk space, as each executable is large.
 To save on this disk space, all the programs can be loaded into one
 monolith, which is not much larger than a single executable.

 This does not mean that the programs can be used singly, as each program is
 set up as a separate (small) file, which then points to the monolith.

 This is loaded from the `/monolith' sub-directory, together with
 the `load_monolith' script and the `mon_link' in the `/bin'
 sub-directory.

 This makes the `starman_mon' executable, with the `starman_mon.ifl'
 interface file, which is only needed when the program runs in ICL.
1 Run_through

 Below is an annotated example of a Starman session invocated from the
 command line. Explanations and commentary associated with each annotation is
 given on the facing page.

 > starman                                                               {1}

  ____________________________________________________________________  
 |  Starman - Stellar Photometry               Version 2.0    Nov 94  | 
 |            Image and Table Handling                                | 
 |                                                                    | 
 |1) Help:                         starmanhyperhelp / starmanhelp     | 
 |2) Advice/Bug Reports:           starmanhypergripe / starmangripe   | 
 |                                   - or - mail alan.penny@rl.ac.uk  | 
 |3) Prompts in programs:          ? or ?? for help : !! to exit      | 
 |4) Default data for a prompt:    $STARMAN_DATA/progam_parameter     | 
 |                                    e.g. $STARMAN_DATA/measure_in   | 
 |5) Demonstration:                starmandemo                        | 
 |                                                                    | 
 |All rights reserved. Starlink copyright and disclaimer notices apply| 
  --------------------------------------------------------------------  
                                                             
 >imcut                                                                  {2}
 IN - Input image /!/ > $STARMAN_DATA/profile_in                         {3}
 XRANGE - X range to cut out /[1,200]/ > ?                               {4}
   Imcut                                                      
                                                              
    Parameters                                              
                                                              
    Xrange                                               
                                                        
    (Default - 1,input image X size  Range - 1 to input image X size)  

    X start and X end of the area of image to cut out and put in 
    new image. If the X end is smaller than the X start, then the 
    output image is inverted in X.                                     
                                                              
 XRANGE - X range to cut out /[1,200]/ >                                  {5}
 YRANGE - Y range to cut out /[1,200]/ > 21,180                           {6}
 BIN - XY size of box for binning of pixels /[1,1]/ > 1,2                 {7}
 SAMPLE - BLH pixel or average of bin box? (sample:average) /'average'/ > {8}
 CHECK - If any box pixel invalid, output invalid? (yes:no) /NO/ >        {9}
 OUT - Output image /!/ > fred                                           {10}
 TITLE - Title to add to output image /'Profile_in'/ > fred title        {11}
 >                                                           
                                                             
 >imcut                                                                  {12}
 IN - Input image /!/ > !!                                               {13}
 !! Application exit status Status value:148013867                       {14}
 >                                                            
                                                              
 >imflash fred                                                           {15}
 Title is: A trial run of Starman                                        {16}
 Display values: Min =   3322.042  Max = 2420,425                        
 Size = 200 by 90                                                        
 ENOUGH/yes/:=                                                           {17}
 >                                                            
 >interact $STARMAN_DATA/profile_in                                      {18}
 EASYSTART - Use the standard start sequence of operations? /YES/ >      {19}
  Title is: Profile_in                                                   {20}
  Display values: Min = 1531.723  Max = 528.4710         
  Size = 200x200  :  Type = SHORT                        
 
  The image is displayed, and a window with a `panel' of control    {21}-{25}
  buttons and a window with help in it are displayed.

       *******************************************************
 
  1) To run any Starman program, you must have loaded the `Starman' system.
     The `Starman' command does this.  You can still use shell commands
     in this mode.

  2) Let's run a Starman application.  IMCUT cuts a section out of an
     image. 

  3) The input image is profile_in.sdf in the sub-directory 
     $STARMAN_TESTDATA (whose logical name was set up in the Starlink login).
     You must omit the `.SDF' qualifier.  The image is a standard Starman ADAM 
     .SDF image. These have either `real' 32-bit real values, or `short' 16-bit 
     integer values, and can have the `BSCALE' and `BZERO' values, and 
     `magic pixel values' indicating `bad' pixels.

  4) The program now asks for the X range of pixels to be cut out,
     and give the default start and end value. A question mark to any
     Starman request will bring the help on that request, as it does here.

  5) The request is now repeated, and you take the default, the whole
     X range.

  6) Now you are asked for the Y range. You want to select the range 
     from 21 to 200. You enter 21. As you have put in only
     one parameter, and two are asked for, the second parameter is
     taken as the default value shown, in this case 200.

  7) A request on how much to bin the output image. You tell it to
     bin by a factor of x1 in X and x2 in Y.
 
  8) How to make the average of the box. You choose one of the two
     possible character strings `average' or `sample'. By just doing
     `return' you accept the default `average'.

  9) This is asks whether set `invalid' if any `invalid'.
     Many questions will be in this `logical' mode, where the
     acceptable answers are `yes', or `no'.
       
 10) The name of the new file to contain the output image is requested.
     Do not include the `.sdf' qualifier. Never use the name of an existing
     file, the programs do not deal with version numbers of files.

 11) All images have a `TITLE' header, which can be used to contain
     some information and the image.

 12) You decide to do another `imcut'

 13) But you change your mind. At any request by any program for input,
     if you type `!!', the program ends, loosing any output.

 14) If a program ends in a non-normal way, you sometimes get a rather
     strange ADAM error message. You can generally ignore these.
 
 15) Now let's run look at the new image. IMFLASH displays the image with
     a high contrast around the `sky' level. Notice that the parameters
     qualifying IMFLASH are located on the command line, separated by spaces. 
     Up to eight such parameters can be input on the command line. Parameter
     values on the command line are not subsequently prompted for by the
     application. Note also that the name of the image, `fred', has no 
     parameter name in front of it. A later section of the manual will 
     describe when the parameter name may be omitted. The display device will 
     be the X window that user is using.

 16) The program displays the image on your screen.
     As you can see, the binning has `squished' the image in the Y direction.
     The program also types out some information about the image and its
     display.

 17) Press `return' when you have seen enough. The image now disappears.
     (To keep the image displayed, leave the program running, and open
     another UNIX window to run a fresh \starman session to do your
     work in.)
  
 18) Now let's look more closely at the `profile_in' image.
     Note that the the name of the image to work with for now is
     input on the command line.

 19) Select the suggested option of the standard way of inputting an image.

 20) The image is displayed, some details typed out, and a window with
     a `panel' of control buttons and a window with help in it are
     displayed.

 21) Control is now transferred to the panel, with the keyboard only 
     being used to input information from time to time. When control has 
     to be shifted between the keyboard, the panel, and the image, it is
     sometimes necessary to click on those areas to shift attention to 
     them before they can be used. We shall now have a short trip round
     a few of the extensive capabilities of `Interact'.

      (`LHB' = click left-hand button on cursor when the 
        cursor is placed at the  appropriate place. `MHB' = middle, `RHB' 
        = right-hand button. `click' = press and release)

     Action            Further Action/Result
     ------            ---------------------
     LHB on `Zoom'     Move cursor round image and watch the panel 
                       display the pixel values. Place cursor in image
                       centre and click twice (slight pause between
                       clicks) the cursor middle 
                       button. The image should zoom up by x2. Click
                       once on cursor right-hand button to return to 
                       panel control. 

     LHB on `HELP'     The `help' for these buttons is typed out. Press 
                       carriage return on the keyboard a number of times, 
                       until control is returned to the panel. 

     LHB on `Colour'   Panel for affecting colour display appears. 

     LHB on `Load'     Load a new Look-Up Table, by replying `4' on 
                       keyboard when asked `LUTNUM/1/:='. 

     LHB on `Scale'    Hold cursor left-hand button down and move about 
                       image. 
                       See how the LUT changes. Release button. 

     LHB on `Load'     Load the origional Look-Up Table, by replying `1' 
                       on keyboard when asked `LUTNUM/1/:='. 

     LHB on `RETURN'   Go back to `Interact' panel buttons. 

     LHB on `Aperture' `Aperture' buttons loaded. This enables the
                       aperture photometry options. You first have to
                       choose whether `annulus' or `separate' 
                       measuring mode. Choose the default with a 
                       carriage return to the keyboard question 
                       `METHOD/annulus/:='. Move the cursor to the
                       screen, and shrink the `star' aperture by
                       clicking the left-hand cursor button. Accept 
                       the new size by clicking the right-hand button.
                       Accept the present inner and outer radii of 
                       the sky annulus by clicking the right-hand 
                       button twice. Then LHB on `Measure' to select
                       the option of measuring. Move the cursor to
                       a star in the image. Click the cursor left-hand 
                       button and see the measurement put out
                       on the keyboard window. Click the cursor 
                       right-hand button to return to the panel. 

     LHB on `RETURN'   Return to `Interact' buttons. The program
                       will then ask you if you want to store the
                       measurement in a file. As you do not, you
                       reply `no' on the keyboard. 

     LHB on `EXIT'     Exit from the program. 


1 Running

 Each of the programs in Starman can be run simply in the user's
 normal C Shell. Scripts can be written to combine programs or to
 run them repeatedly.

 You can also run the programs from inside the Starlink ICL environment.

 The programs have been written in the Starlink ADAM Environment. This
 has the advantage that there are a number of useful programs in the 
 KAPPA packages which supplement Starman, and that some of the Starman
 programs in turn are useful for current users of such packages.

 Particularly, the standard data format NDF is used. (You can see
 this as all data files have the '.sdf' suffixes.)
 
 Users wishing to know more about the  ADAM Environment and the
 KAPPA programs should read the relevant documents
 SG~4 and SUN~95.
1 Screen

 This gives help on various aspects of screen display

2 Image_Display

 Images can be displayed on any X windows display.

 The display must have an 8-bit display (i.e. 256
 colours available at any one time). It may not work on mono or 24-bit
 displays.

 Also any device, including hardcopy, can be used to output a greyscale plot
 of an image by using the image graphical output in the INSPECT option in
 the INTERACT program. 

2 Use_of_Pointer_and_Buttons

 To mark a position, one puts the pointer on the desired position, and marks
 that point by pressing one of the buttons on the mouse. Each button will
 often have a different effect, and one should look at the `help' for the
 program to see what the buttons actually do in any particular case.
 Usually, the right-hand button denotes 'exit' from the particular function
 being performed.  Starman can work with either two or three buttons
 available for use on the mouse. If only two buttons can be used, then the
 action of the third button is simulated by pressing the two buttons
 together, with the middle one being pressed shortly before the left-hand
 one. In this case also use of the middle button by itself has to followed
 by a half-second pause.
 
 (To see how to set up for the actual number, look at the 'help' for
 `Numbutt' in the desired program.)

2 Look-Up_Table

 Starman can only be used to display images on devices that have 8-bit
 colour displays. This nominally gives the use of 256 different colours.

 Starman allocates the first two colours to black and white, the next
 eight to the 

 `red:green:blue:cyan:magenta:yellow:coral:palegreen'

 colours of PGPLOT. The next five are then various shades of grey from
 black to white for the `panel' and other uses.

 Images are then displayed using the next 150 colours. The default
 when you run any of these programs is these colours are black to
 white, going through shades of grey. An image is displayed by taking
 the pixel values, translating them into numbers between 1 and 150,
 and loading them in the display device. The display device then has
 has a colour for corresponding to each of the numbers between 1 and
 150. These colours are linear combinations of (red, green and blue).
 Thus white is (1.0,1.0,1.0), black is (0.0,0.0,0.0), blue is
 (0.0,0.0,1.0), and so on.
 
 (When an image is displayed, the default is displayed so that high pixel
 values are given low look-up table (LUT) values, and thus come out as
 blacked than low pixel values. Thus images are generally shown as
 `negatives'.) 

 When the LUT is altered, it is the colours that correspond to those 150
 numbers that are changed, not the numbers themselves. Thus if a pixel value
 has been loaded into the display as (say) 15, it will first of all be a
 dark grey (colour - 0.1,0.1,0.1). If the LUT is changed, the colour could
 now be anything (say pink - 0.7,0.5,0.5). 
 
 However, with X window devices, some or all of the 256 possible colours may
 have already been allocated by another program, and thus be inaccessible to
 the Starman program. In this case, the Starman program first of tries to
 use only 75 LUT colours, and then only 50 LUT colours. If these are
 available, it uses those, and has to make a coarser binning of the display.
 If there are less than 50 colours available, then the program will use those
 `default' colours available to all programs on the device. They may well be
 very few of these, and thus the display may be very simplistic.
 
2 Graphical_User_Interface

 Starman has two modes whereby when inside some its programs, one can get
 away from the old-fashioned interaction of typing in lines of commands.

   Macintosh-like_Interaction

 For a number of programs, to do with image and graph display the `OPTION'
 parameters, where the program is repeatedly asking for different options,
 one can set up a `panel' of `push-buttons' which you click on with the
 cursor to choose the desired option. This is much like the way you use
 a Macintosh.
 
 To do this you need to be at a workstation. The programs where this is
 possible and the parameters where it can be done are:- 
 
  Program    Option Parameter 
  -------    ----------------
  Diagram    `Option' 
  Dustring   `Option' 
  Interact   `Option' `Aloption' `Aoption' `Coption' `Goption' 
             `Ioption' `Soption'
  Profile    `Option' `Doption', `Moption', `Roption' `Woption' 
  Tbchart    `Option' 
  Tbplot     `Option' 

 If, in response to a request for these parameters, one inputs `panel', then
 a panel of the various options is put up on the workstation screen, and one
 can choose the options by clicking on the `buttons' in the `panel'.

2 Graph_Display

 Starman uses the PGPLOT/GKS packages to output graphs. This means that
 nearly all graphical output devices, including hardcopy, on Starlink can be
 used. When a graph is to be plotted, you are asked for the value of the
 `GTYPE' parameter. You then input the GNS name of the device you want. If
 you choose the default `ask', you then get another question and you can
 then type `?'. This will give you the list of the names of the available
 devices. You will have to consult your system manager to see which physical
 device is attached to which name. 
 
 The usual names re `xwindows' and `ps', for X window devices and
 Postcript printers.

   Use_of_Pointer_and_Buttons

 With PGPLOT, one puts the pointer on the desired position, and marks that
 point by pressing any key on the {\em keyboard}.
 
2 Tables_Spread-Sheet

 There is a spread-sheet for interacting with tables, which works,
 to a limited extent, like the spread-sheet programs on your PC.
 This is the TBSHEET program. If you have a terminal that supports
 graphics, however simply, then you can use this to inspect and
 change the values in the table. Also simple applications like
 SORTing and WEEDing may be done.

 The table is put up on the screen in a grid, and all the options
 to inspect and/or change the table are put up as boxes. One uses
 the cursor to click on values to change them, or on options to
 undertake those options.

1 Source

  The source Fortran and C code of programes is useful in seeing 
  exactly how the programs work, and for using as a template 
  when programming.

  The source code of the programs is available, either through
  the hypertext help system 'starmanhyperhelp', or in the
  Starman hypertext disk directory, $STARMAN_HYPER. In
  that directory the files containing the source code have
  `source' as part of their name.

1 Starting

 Getting started with Starman. This describes soem of the various
 parts of using Starman.

2 Quotas

 Simple programs in Starman run correctly with normal the normal quotas
 set for you by your Starlink node manager. 

2 Setting_Up_Starman

 Setting up your system to be able to use Starman.
  
 On Starlink machines, when Starman has been set up by the system
 manager, just type 'starman'. You will need to have already set
 up the Starlink software with 'source /star/etc/login'.

 On other machines, find where the Starman programs are, and run the
 shell script 'starman', for example:-

      'source /home/dajp/ajp/snew1/starman' 

2 Running_Starman

 To run Starman from the shell just enter the command

     > starman

 This executes a procedure which you stay in while executing Starman 
 commands. It also defines some logical names. You now can
 mix Starman commands with the familiar UNIX ones.
 While setting up the names, some information about the current version
 is given out.

 You can now run the Starman programs by just typing their names.
 
 So what do you get for your trouble?  There is a classified
 list of the programs available. These are explained in more detail
 elsewhere.

2 Issuing_Commands

 To run an application you then can just give its name---you will be
 prompted for any required parameters. Alternatively, you may enter
 parameter values on the command line specified by position or by
 keyword.  More on this elsewhere.

 Remember that UNIX is case sensitive, so keep the names in lower case.

2 Answering_Questions

  Answering questions on the keyboard

  When running a program, it will generally ask you a series of
  questions. These will come either as simple questions or
  as questions with default choices.

  An example of a simple question is (say), when the program
  wants the name of an input image. You will see appear on the
  screen something like:-

      IN -  Input image file name? /!/ >

  You should then type the name of file containing the image.
  If you just press `return', then the program will take this
  as the same as entering a `blank'. Such an input will have the
  effect that the particular stage of the program desires.
  Thus, for eaxmple, it may decide that you dont want any input
  image. Or it may decide that, to continue, it needs this name,
  and this case may either ask you again or it may just stop.
     
  An example of a question with a default, is when the program
  wants you to tell which of a list of options you want it do next.
  It may have some idea of what you likely reponse should be, or
  it may just guess (probably incorrectly). In this case, you
  will see something like:-

      OPTION - Which action to perform? /'image/' >

  In this case, again you would type in the name of the option
  you want it to perform. However it is suggesting (correctly or
  incorrectly) that you should want the `image' option. In this
  case, if you press `return', then it assumes that the this
  is the same as if you have typed `image', and will go and
  perform the image option. This suggestion is referred to as the
  `default' in the rest of the Starman help system.

2 Obtaining_Help

 The Starman help system may be entered either whilst you are not 
 running a program, or whilst you are running a program and 
 inputting a parameter value.

 When you are not actually running a program, then an introduction to 
 Starman can be obtained in hypertext with 

     >starmanhyperhelp 

 or in line mode with

     > starmanhelp 

 This puts you in the top level of the Starman help and you can 
 explore all the sub-topics. There is a sub-topic for each program 
 and then more general helps:-

 Author   Information on the Starman author 
 Guide    A short run-through on using Starman 
 Help     More information on the HELP system
 Images   Information on Images 
 Menu     A list of programs with a one line description
 Starman  General information on the Starman package 
 Tables   Information on Tables 

 When you are inside a program, the help system is available every time 
 you are asked by Starman for a parameter. Then by replying with a
 question mark, you get the help on that particular parameter.
 
      IN -  Input image file name? /!/ > ?

 If you want more general help on the program you are running, then
 respond to the parameter query with:-

      IN -  Input image file name? /!/ > ??

 which gets into the general Starman help.

2 Upper_and_lower_case

 Generally, Starman does not mind if your typed in input is
 in upper and/or lower case.

 Of course, in UNIX, file names are case sensitive, and so the
 directory names, such as $STARMAN&$95 DATA, also are case
 sensitive.

 However, some times you are asked for text input, for example
 the `title' to add to an image. The case of the characters is
 then preserved.

2 Exiting_a_Program 

 If you are inside a Starman program and wish to stop running it, 
 then if you are putting in a parameter, just put in two 
 exclamation marks (!!). If the program is running by itself 
 either press the CTRLand C buttons or the CTRL  and Z  ones.

 If you have finished using Starman altogether, you need take no action,
 unless you are in ICL, in which case type

     ICL> exit

 which returns you to the shell.

1 Tables

  The Starman suite of programs uses a simple table system for passing
  tabular information back and forth between programs and to and
  from the user.

  These tables are actually stored on disk as `SDF' files. Thus a 
  table called 'fred' will be stored as 'fred.sdf' on disk.
  (As with the images, inside any Starman program, you do not
  use the `.sdf' suffix in referring to the table.)

  Starman has some simple table handlers ready for use. These are the 
  TB-programs, and they have their own help.

2 What_is_in_a_table

  A `table' may be considered as being made up of `rows', where a 
  row contains a name and set up numbers. Then the table itself
  contains a number of these `rows'.

  The numbers in a row are set into `columns'. The information
  in a particular column generally concerns the same `aspect' from
  row to row.

  Each column can also have a name (its header).

  Thus, for example, if one wanted to make a table of the positions
  of stars, one could put the `X' position in the first column and
  the 'Y' position in the second column. So if one had three stars,
  `fred', `george', and 'arthur', with X,Y positions of (1.2,2.3),
   (3.4,4.5), and (5.6,6.7) respectively, and the columns are to
   have the names `X' and 'Y', then the table would look like
  this:-

  --- ------------------------------------------
  |           Name       Column 1    Column 2  |
  |                                            |
  |  Row 1    fred         1.2          2.3    |
  |  Row 2    george       3.4          4.5    |
  |  Row 3    arthur       5.6          6.7    |
  |                                            |
  |   Header               `X'          `Y'    |
  |---------------------------------------------

  A table also has a 'title'. This is a character string which
  can be added to the file containing the table. It does not
  form any part of the table itself, but can be accessed by the
  user as a source of additional personal information about the
  table. Thus for example a table called 'BADPIXELS' (stored as
  badpixels.sdf;1 on disk), could have a title of:-

       'This is a list of bad areas on my CCD'.

  This title is then available for inspection by the user, say by 
  the program `Tblist', and may be put out to the user by some 
  programs to show the user something about the table).

  The `name' of a row may be up to 20 characters long. (A common
  default usage is for them not to have names like 'arthur', but to
  be in the form `#n', e.g.  '#201', `#1456'.

  The numbers in the columns are 32-bit real numbers, thus having
  a precision of about 6 decimal places, and a possible range
  of about -10**38 to + 10**38.

  The table may also have any number of further descriptors,
  added by the user or some programs.

2 Menu

  A listing of the available table handling programs:-

  Name          Function
  ----          --------

 tbcalc         Calculate entries in table column(s)
 tbchart        Plot out a realistic star map
 tbcomps        Find stars within/not within an annulus of each other
 tbcut          Cut out parts of a table
 tbdes          List/write/copy/delete descriptors
 tbjoin         Join tables together
 tbkey          Input numbers from keyboard into a table
 tblist         Type and/or put in file the contents of a table
 tbload         Input an ASCII text file into a table
 tbmatch        Extract entries with matching names in two tables
 tbnative       Convert table format from different machine
 tbnmatch       Order tables so they have their names in the same order
 tbplot         Plot table graph/histogram - image picture/contour
 tbpmatch       Extract entries with matching positions in two tables
 tbrenum        Renumber names in a table
 tbsheet        Spread-sheet program for inspection/insertion/etc
 tbsort         Sort entries in a table
 tbstat         Perform statistics on column(s) in tables(s)
 tbtran_auto    Transform one XY table to another automatically
 tbtran_do      Transform XY table positions using transform eqn
 tbtran_load    Calc transform eqn from a given magn, rotn, shift
 tbtran_make    Calc transform eqn from two matched XY tables
 tbvalue        Output the value of a table element
 tbweed         Make a table with only those entries with a parameter 
                  in a range

2 Structure

  (Some of this information is for people who want to access the tables
  directly via their own programs.)

  Data are stored in .SDF files as real*4 values. The first 5 values 
  in a row code a row name, and the data columns start after that. 
  Programs which ask for parameter number or column number start 
  their numbering from the first data column. Each file must have at 
  least two columns.

  There are also file 'descriptors' which can contain individual items 
  of information, in a way analogous to FITS descriptors.

  Some programs assign to each data column a header parameter and some
  programs use these parameters to find the column containing the 
  desired data. Some programs just rely on the column positions. These 
  column header parameters are stored as descriptors of the SDF image. 
  The header for column 1 is stored as the value of paramter HEAD001, 
  that for 2 in HEAD002, and so on. The headers are character strings 
  up to 20 characters long. 

  Although in actuality inside the computer the identifier is stored in 
  the same way as the columns, taking up five columns, it is not 
  thought of as occupying a column, and the data columns are numbered
  from 1. The 'size' of a row in a file, given by the 'NITEM'
  descriptor, is thus five more than the number of columns.

  The number of rows in a table is given by the 'LSTLEN' descriptor of 
  the file.

  The 'LABEL' of the file, that is the 'type', is 'XYLIST'.

2 The_onlie_begetter

  As a matter of interest to more sophisticated users and programmers ,
  this is an enhanced version of the Starlink Interim Environment 
  EDRS table system, copyright R.F.Warren-Smith.


2 Other_programs

  There are no other useful programs in KAPPA.
1 Version

  Version 2.0       1995 January
