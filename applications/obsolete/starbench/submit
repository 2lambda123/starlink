#!/bin/csh -f
#+
#  Name:
#    submit
#
#  Purpose:
#    An interactive script to submit a series of cron jobs to execute
#    benchmarks on the host system.
#
#  Language:
#    c shell
#
#  Invocation:
#    /<installation_dir>/submit
#
#  Description:
#    First, obtain information from the user as to when the cron jobs are to
#    execute and how many to do. Decide where to put the log files. Then write
#    a control script to run the benchmarks and send output to the log files.
#    Edit the user's crontab file to execute this control script. Also write
#    a script to re-edit the crontab file to remove the benchmark entry. This
#    script is queued for execution after the final cron job has run, using
#    the at command. All temporary scripts and files are cleaned up.
#
#  Authors:
#    Tim Gledhill (tmg@star.herts.ac.uk)
#
#  History:
#    20-SEP-1994 (tmg):
#       Original version.
#    31-OCT-1994 (tmg):
#       Check that the benchmarks are not being run from the installation
#       directory.
#    15-FEB 1996 (tmg)
#       v0.9: Initial checks are now made by the starbench.csh script.
#    18-JUL-1996 (tmg)
#       v1.0 incorporating IRAF benchmarks.
#       Propagate the LD_LIBRARY_PATH variable to the cron job (in case the
#         fortran shareables are not in the usual places).
#    04-DEC-1998 (tmg)
#       v1.2 propagate the iraf variable though to the cron jobs.
# 
#-
# Interrupt handling.
#
      onintr end_submit
#
# Check that the startup script has been run.
#
      if ( ! $?BENCH_DIR ) then
        echo ""
        echo "Please source 'starbench.csh' to start up the Benchmark Utilities"
        echo ""
        goto end_submit
      endif
#
# Print some information.
#
      echo ""
      echo " Submit"
      echo " ------"
      echo ""
      echo " This is an  interactive script to submit benchmarks for execution"
      echo " by the cron at regular intervals. In this way a benchmark profile"
      echo " of the host machine can be built up."
      echo ""
#
# What time do you want to run the jobs?
#
      echo " The benchmarks will be run every hour. Give the number of minutes"
      echo " past the hour to start each job. If you are running benchmarks on"
      echo " several machines then it is a good idea to space them out.       "
      echo ""
      echo -n " Number of minutes past the hour [0] : "
      set mins = $<
      if ( $mins == "" ) then
        set mins = "0"
      endif
#
# When to stop?
#
      echo ""
      echo " How many times should the benchmarks be run? The default is to run"
      echo " them over a twenty-four hour period."
      echo ""
      echo -n " Number of times to run benchmarks [24] : "
      set ntimes = $<
      if ( $ntimes == "" ) then
        set ntimes = 24
      endif
#
# Where to put the output?
#
      echo ""
      echo " Give the name of a directory to hold the log files generated by"  
      echo " the benchmarks. The default is to  put them in the current work"
      echo " directory."
      get_logdir:
        echo ""
        echo -n " Give a directory for the log files [.] : "
        set logdir = $<
        if ( $logdir == "" ) then
          set logdir = $cwd
        else
          ls $logdir >& /dev/null
          if ( $status != 0 ) then
            echo ""
            echo " Directory $logdir does not exist, try again"
            echo ""
            goto get_logdir
          endif
        endif
      end_get_logdir:
#
# The default is to just run the ussc benchmarks. See if the user wants
# to modify this.
#
      echo ""
      echo " The default is to just run the USSC benchmarks [ussc]. If you wish"
      echo " you may run the IRAF  benchmarks instead  [iraf] or both  USSC and"
      echo " IRAF benchmarks [both]."
      get_packs:
        echo ""
        echo -n " Specify which benchmarks to run [ussc] : "
        set packs = $<
        if ( $packs == "" ) set packs = "ussc"
        if ( $packs == "IRAF" ) set packs = "iraf"
        if ( $packs == "USSC" ) set packs = "ussc"
        if ( $packs == "BOTH" ) set packs = "both"
        if ( $packs != "ussc" && $packs != "iraf" && $packs != "both" ) then
          echo ""
          echo " $packs is an invalid response: Specify ussc, iraf or both"
          echo ""
          goto get_packs
        endif
      end_get_packs:
#
# Write a control script to execute the benchmarks from the crontab.
#
      set control = `$BENCH_DIR/tmpfile`
      echo "#\!/bin/csh -f "                                      > $control
      echo "# Script to execute benchmarks from the cron"        >> $control
      echo "# Generated: `date`"                                 >> $control
      echo "#"                                                   >> $control  
      echo "set now = "'`date`'                                  >> $control
      echo "set logfile = ${logdir}"'/$now[4]$now[3]$now[2].log' >> $control
      echo "setenv PATH $PATH"                                   >> $control
      echo "setenv LD_LIBRARY_PATH $LD_LIBRARY_PATH"             >> $control
      echo "setenv TERM $TERM"                                   >> $control
      echo "setenv iraf $iraf"                                   >> $control
      echo "source /star/etc/login"                              >> $control
      echo "source /star/etc/cshrc"                              >> $control
      echo "cd $cwd"                                             >> $control
      echo "source $BENCH_DIR/starbench.csh"                     >> $control
      echo "$BENCH_DIR/bench -p $packs -l "'$logfile'            >> $control
      echo "exit"                                                >> $control
      chmod 711 $control
#
# Get a copy of the crontab file and add a line for the new jobs. Resubmit
# the file. Handle the case where there is no crontab file - this will
# generate an error normally.
#
      set cronfile = `$BENCH_DIR/tmpfile`
      crontab -l >& $cronfile 
      if ( $status == 0 ) then
        echo "$mins * * * * ${cwd}/$control > /dev/null 2>&1" >> $cronfile
      else
        rm $cronfile
        echo "$mins * * * * ${cwd}/$control > /dev/null 2>&1" > $cronfile
      endif
      crontab $cronfile
      echo ""
      echo " ...cron jobs started"
      echo ""
      'rm' $cronfile
#
# Write a script to delete the cron job that has just been added.
#
      set killcron = `$BENCH_DIR/tmpfile`
      echo "#\!/bin/csh -f "                                 > $killcron
      echo "# Script to remove benchmark cron jobs"         >> $killcron
      echo "# Generated: `date`"                            >> $killcron
      echo "# "                                             >> $killcron
      echo "cd $cwd"                                        >> $killcron
      echo "crontab -l > $cronfile"                         >> $killcron
      echo "sed /${control}/d < $cronfile > ${cronfile}_new"   >> $killcron
      echo "crontab ${cronfile}_new"                        >> $killcron
      echo "'rm' ${cronfile}_new"                           >> $killcron
      echo "'rm' $cronfile"                                 >> $killcron
      echo "exit"                                           >> $killcron
#
# Permit execution of the script and submit it.
#
      chmod 711 $killcron  
      at <<! now + $ntimes hours 
        ${cwd}/$killcron
        'rm' ${cwd}/$killcron
        'rm' ${cwd}/$control
!
      echo ""
      echo " ...cron termination procedure queued"
      echo ""
#
# End of script submit.
#
      end_submit:
      exit
