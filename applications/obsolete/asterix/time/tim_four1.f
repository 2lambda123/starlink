C SUBROUTINE FOUR1 FROM NUMERICAL RECIPES.
C THIS IS THE BRENNER VERSION.
      SUBROUTINE TIM_FOUR1(DATA,NN,ISIGN)
C REPLACES DATA BY ITS DISCRETE FOURIER TRANSFORM, IS ISIGN=1; OR
C REPLACES DATA BY NN * ITS INVERSE DISCRETE FOURIER TRANSFORM IF
C ISIGN=-1.  DATA IS A COMPLEX ARRAY OF LENGTH NN, OR EQUIVALENTLY,
C A REAL ARRAY OF LENGTH 2*NN.  NN ***MUST*** BE AN INTEGER POWER
C OF 2 !  THIS IS NOT CHECKED FOR!
C **NOTE THAT THE SIGN CONVENTION USED HERE IS OPPOSITE OF THAT USED
C   BY KANASEWICH, I.E., THIS PROGRAM FINDS
C    H(n) = SUM(h(k)*exp(2i*pi*i*k*n/N)) FROM k=0 to N-1 (FORWARD)
C and h(k) = SUM(H(n)*exp(-2*pi*i*k*n/N)) from n=0 to N-1 (INVERSE)
C
      REAL*8 WR,WI,WPR,WPI,WTEMP,THETA
C D.P. FOR TRIGONOMETRIC RECURRENCES.
      DIMENSION DATA (2*NN)
      N=2*NN
C BIT REVERSAL SECTION...
      J=1
      DO 11 I=1,N,2
C EXCHANGE TWO COMPLEX NUMBERS...
         IF(J.GT.I)THEN
            TEMPR=DATA(J)
            TEMPI=DATA(J+1)
            DATA(J)=DATA(I)
            DATA(J+1)=DATA(I+1)
            DATA(I)=TEMPR
            DATA(I+1)=TEMPI
         ENDIF
         M=N/2
1        IF((M.GE.2).AND.(J.GT.M))THEN
           J=J-M
           M=M/2
         GO TO 1
         ENDIF
         J=J+M
11    CONTINUE
      MMAX=2
C DANIELSON-LANCZOS SECTION...
C OUTER LOOP EXECUTED LOG_2(NN) TIMES.
2     IF(N.GT.MMAX)THEN
         ISTEP=2*MMAX
         THETA=6.28318530717959D0/(ISIGN*MMAX)
         WPR=-2.D0*DSIN(0.5D0*THETA)**2
         WPI=DSIN(THETA)
         WR=1.D0
         WI=0.D0
         DO 13 M=1,MMAX,2
           DO 12 I=M,N,ISTEP
             J=I+MMAX
C DANIELSON-LANCZOS FORMULA...
             TEMPR=SNGL(WR)*DATA(J)-SNGL(WI)*DATA(J+1)
             TEMPI=SNGL(WR)*DATA(J+1)+SNGL(WI)*DATA(J)
             DATA(J)=DATA(I)-TEMPR
             DATA(J+1)=DATA(I+1)-TEMPI
             DATA(I)=DATA(I)+TEMPR
             DATA(I+1)=DATA(I+1)+TEMPI
12         CONTINUE
C TRIGONOMETRIC RECURRENCE...
         WTEMP=WR
         WR=WR*WPR-WI*WPI+WR
         WI=WI*WPR+WTEMP*WPI+WI
13       CONTINUE
      MMAX=ISTEP
      GO TO 2
      ENDIF
*
      END
