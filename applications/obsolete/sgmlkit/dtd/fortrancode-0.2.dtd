<![ ignore [
  DTD for fortran code.

  Calls general programcode DTD (qv)

  Invoke with

    <!doctype programcode 
	public "-//Starlink//DTD Fortran Source Code 0.2//EN">

  Author: 
    NG: Norman Gray (Glasgow)

  History: March 1999 (NG):
    Original version

  Copyright 1999, Particle Physics and Astronomy Research Council.
]]>

<!--============================== Notation ==============================
  The Fortran notation is declared in the PROGRAMCODE DTD which this
  includes at the end.
-->
<!entity % language.attr	-- language attribute declaration --
	 "language notation (fortran77) #fixed fortran77">

<!--============================== Architectures ==============================

  Declare the PROGRAMCODE DTD to be an architecture.

  This doesn't have a huge impact, but as well as being The Right HyTime
  Thing To Do, it allows us to impose the PROGRAMCODE structure even
  on (admittedly rare) files which do whizzy things in their internal
  DTD subset.
-->
<?IS10744 ArcBase programcode>
<!notation 
	programcode
		-- A base architecture used in conformance with the
		   Architectural Form Definition Requirements of
		   International Standard ISO/IEC 10744 --
	system ''>
<!entity % generalcode.dtd
	public "-//Starlink//DTD Program Source Code 0.2//EN">
<!attlist #notation programcode
	ArcFormA
		name #fixed programcode
	ArcDTD
		cdata "%generalcode.dtd"
	ArcDocF
		cdata #fixed programcode
	>


<!--============================== Maps ==============================

  Set up maps, to make typing prologues easier.

  Collect a suitable set of starttag and cdata entities.

  First, arrange that ^*+ and ^*- begin and end the prologue, and that
  ^* is ignored while within the prologue.
-->
<!entity startprologue.ref	starttag "func">
<!entity endprologue.ref	starttag "codebody">
<!entity nullentity.ref		cdata "">
<!entity partype.ref		starttag "type"	>
<!entity pardesc.ref		starttag "description">

<!shortref	generalmap	"&#RS;*+"	startprologue.ref
						>
<!shortref	prologuemap	"&#RS;*+"	startprologue.ref
				"&#RS;*-"	endprologue.ref
				"&#RS;*"	nullentity.ref
						>

<!--
  Now some tricksier stuff for documenting routine parameters.
  Structure is

     <!element parameter - o (name, type, description)>

  Within PARAMETER element, have `=' be a shortref for TYPE (don't
  have it within NAME, since that element is also used within the
  ROUTINENAME element) and discard &#RS;* as usual.  Within TYPE, have
  both `:' and &#RE be shortrefs for DESCRIPTION.  Within the
  DESCRIPTION, merely discard &#RS;*

  This means that

    <parameter given>
      <name>Blah
      <type>float
      <description>This is a variable

  is contractable to

    <parameter given>
      Blah = float
      This is a variable

-->
<!shortref	parametermap	"="		partype.ref
				"&#RS;*"	nullentity.ref
						>
<!shortref	descriptionmap	"&#RS;*"	nullentity.ref
						>
<!shortref	partypemap	"&#RE;"		pardesc.ref
				":"		pardesc.ref
						>
<!usemap	generalmap	programcode	>
<!usemap	prologuemap	func		>
<!usemap	parametermap	parameter	>
<!usemap	descriptionmap	description	>
<!usemap	partypemap	type		>



<!--============================== DTD Body ==============================

  Finally, include the text of the general DTD
-->
%generalcode.dtd;
