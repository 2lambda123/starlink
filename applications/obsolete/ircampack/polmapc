#!/bin/csh
#+
#  Name:
#     POLMAPC

#  Purpose:
#     Display a polarisation map on top of a total intensity contour
#     plot

#  Language:
#     C shell

#  Description:
#     The specified graphics device is cleared and a contour plot of 
#     the total intensity NDF is displayed. A vector plot is overlayed 
#     on top of this image, with annotations and a key to the vector 
#     scale. The vectors are drawn using pen 2 from the KAPPA pallette
#     which is initially set to white. The colour of the vectors can 
#     subsequently be changed using the KAPPA application PALENTRY.

#  Usage:
#     POLMAPC P THETA I ANGROT DEVICE

#  Parameters:
#     P = NDF (Read)
#        NDF holding percentage polarisation.
#     THETA = NDF (Read)
#        NDF holding polarisation angle.
#     I = NDF (Read)
#        NDF holding total intensity.
#     ANGROT = _REAL (Read)
#        Angle by which to rotate the vectors before displaying them (in
#        degrees).
#     DEVICE = DEVICE (Read)
#        Name of the graphics device to use. [Current graphics device]

#  Notes:
#     - This is a script and so command line parameters can be 
#     specified by position only, not by keyword.
#     - The suggested defaults for the three input NDFs are the
#     output NDFS from a previous application or script. 
#     - This routine is based on KAPPA applications TURBOCONT and VECPLOT.

#  Authors:
#     DSB: David Berry (STARLINK)
#     {enter_new_authors_here}

#  History:
#     30-SEP-1993 (DSB):
#        Original version.
#     {enter_changes_here}
#-

#  Store the name of the current command.
      set IRCCOM = "polmapc"

#  Ensure IRCAMPACK and KAPPA commands are available
      alias echo 'echo >/dev/null'
      kappa
      ircampack
      unalias echo

#  Obtain the current set of values for the IRCAM global parameters.
      set GLOBPAR = `ircamset`

#  Get the percentage polarisation NDF. First establish any command 
#  line value as the primary value
      if( $#argv > 0 ) then
         set DEF1 = $argv[1]
      endif

#  Now establish any defined global value as the suggested default.
      set DEF2 = $GLOBPAR[6]
      if( $DEF2 == 'undefined' ) unset DEF2

#  Now set the prompt.
      set PROM = "P - NDF holding percentage polarisation image"

#  Now get the NDF. Abort if requested.
      ircamndf
      if( $?NDFNAM == 0 ) exit

#  Save the NDF name. If a parameter abort was requested the NDFNAM 
#  variable will be undefined and the script will consequently abort.
      set P = $NDFNAM

#  Now do the same for the polarisation angle NDF.
      if( $#argv > 1 ) then
         set DEF1 = $argv[2]
      endif
      set DEF2 = $GLOBPAR[7]
      if( $DEF2 == 'undefined' ) unset DEF2
      set PROM = "THETA - NDF holding polarisation angle"
      ircamndf
      if( $?NDFNAM == 0 ) exit
      set THETA = $NDFNAM

#  Now do the same for the total intensity NDF.
      if( $#argv > 2 ) then
         set DEF1 = $argv[3]
      endif
      set DEF2 = $GLOBPAR[5]
      if( $DEF2 == 'undefined' ) unset DEF2
      set PROM = "I - NDF holding total intensity"
      ircamndf
      if( $?NDFNAM == 0 ) exit
      set I = $NDFNAM

#  Now obtain the angle by which to rotate the vectors before displaying
#  them.
      if( $#argv > 3 ) then
         set DEF1 = $argv[4]
      endif
      set DEF2 = $GLOBPAR[10]
      if( $DEF2 == 'undefined' ) set DEF2 = "0.0"
      set PROM = "ANGROT - Angle by which to rotate vectors (in degrees)"
      ircamstr
      if( $?STRING == 0 ) exit
      set ANGROT = $STRING

#  If a graphics device name was supplied on the command line, establish 
#  it as the current graphics device. 
      if( $#argv > 5 ) then
         gdset DEVICE=$argv[6]

#  Otherwise, get the current graphics device (if any). The grep command 
#  selects the line displayed by KAPPA:GLOBALS which describes the graphics 
#  device. The awk command selects the word following the last colon in the 
#  line. This may need to be changed if the format of the output generated by 
#  KAPPA:GLOBALS is changed.
      else
         set DEVICE = `globals | grep "graphics device" | awk '{for(f=NF;f;f--)if($f==":")print $(f+1);exit}'`

#  See if the device is undefined. If so, get a new value from the user.
         if( `echo $DEVICE | grep "undefined"` != "" || $DEVICE == "" ) then
            gdset
         endif
      endif

#  Now get the new current graphics device. 
      set DEVICE = `globals | grep "graphics device" | awk '{for(f=NF;f;f--)if($f==":")print $(f+1);exit}'`

#  Abort if no graphics device is defined.
      if( `echo $DEVICE | grep "undefined"` != "" || $DEVICE == "" ) exit

#  Clear the current graphics device
      echo "  Setting up the graphics device..."
      gdclear device=$DEVICE

#  Set up the default pallette
      paldef device=$DEVICE
      palentry 2 white device=$DEVICE

#  Label the base picture.
      piclabel base device=$DEVICE

#  Create a smaller picture to contain the contour plot. Room must be left
#  round the edges for the annotation produced by VECPLOT.
      picdef mode=cc fraction=0.7 nooutline device=$DEVICE

#  Now draw the contour plot.
      echo "  Drawing the contour map..."
      echo " "
      turbocont ndf=$I mode=area ncont=6 noaxes nokey noborder device=$DEVICE
      echo " "

#  Re-select the base picture.
      picsel base device=$DEVICE

#  Draw the vector map. Suppress the display of unwanted warning messages using
#  awk.
      echo "  Drawing the vector map..."
      vecplot $P $THETA angrot=$ANGROT cosys=data noclear \
              pltitl="'Polarisation map'" veccol=2 device=$DEVICE \
              | awk -f `alias awkvec`

#  Store the new IRCAM global parameters.
      ircamset p=$P theta=$THETA i=$I angrot=$ANGROT >/dev/null

#  Finish
      exit
