#!/bin/csh
#+
#  Name:
#     POLZAP

#  Purpose:
#     Manually remove blemishes or bad pixels from 4 images

#  Language:
#     C shell

#  Description:
#     The NDFs supplied for parameters IN1 to IN4 are displayed in turn on 
#     the specified graphics device (bad pixels are shown blue). The user 
#     can then inspect the image for blemishes or bad pixels. If any are 
#     found, a cursor is used to identify the area containing the blemish
#     and the pixels within the area are set bad. The names of the 
#     output NDFs are derived from the input NDF names by appending the 
#     string supplied for parameter SUFFIX to them.
#
#     The cursor should be used to give two points. The area removed is then
#     either the range of lines spanned by the two points, the range of columns
#     spanned by the two points, or a rectangular region with opposite corners
#     at the two points. The user indicates which sort of area to use in
#     response to prompts for parameter LINCOL made immediately prior to
#     displaying the cursor. If a null value is given for LINCOL then no
#     further regions are removed.

#  Usage:
#     POLZAP IN1 IN2 IN3 IN4 SUFFIX DEVICE

#  Parameters:
#     IN1 = NDF (Read)
#        NDF obtained with the waveplate at 0 degrees.
#     IN2 = NDF (Read)
#        NDF obtained with the waveplate at 45 degrees.
#     IN3 = NDF (Read)
#        NDF obtained with the waveplate at 22.5 degrees.
#     IN4 = NDF (Read)
#        NDF obtained with the waveplate at 67.5 degrees.
#     SUFFIX = LITERAL (Read)
#        A string to append to the end of the supplied NDF names to 
#        get the output NDF names.
#     DEVICE = DEVICE (Read)
#        Name of the graphics device to use [Current graphics device]

#  Notes:
#     - This is a script and so command line parameters can be 
#     specified by position only, not by keyword.
#     - The suggested defaults for the four input NDFs are the
#     output NDFS from the previous application or script. 
#     -  This script is based on KAPPA applications DISPLAY and ZAPLIN.

#  Authors:
#     DSB: David Berry (STARLINK)
#     {enter_new_authors_here}

#  History:
#     15-DEC-1993 (DSB):
#        Original version.
#     {enter_changes_here}
#-

#  Store the name of the current command.
      set IRCCOM = "polzap"

#  Ensure IRCAMPACK and KAPPA commands are available
      alias echo 'echo >/dev/null'
      kappa
      ircampack
      unalias echo

#  Store the path of the directory containing the kappa parameter files.
      if( ${?ADAM_USER} ) then
         set PARDIR = $ADAM_USER
      else
         set PARDIR = $HOME/adam
      endif

#  Obtain the current set of values for the IRCAM global parameters.
      set GLOBPAR = `ircamset`

#  Get the 0 degree input NDF. First establish any command line value
#  as the primary value
      if( $#argv > 0 ) then
         set DEF1 = $argv[1]
      endif

#  Now establish any defined global value as the suggested default.
      set DEF2 = $GLOBPAR[1]
      if( $DEF2 == 'undefined' ) unset DEF2

#  Now set the prompt.
      set PROM = "IN1 - NDF obtained with waveplate at 0 degrees"

#  Now get the NDF. Abort if the NDF name is not defined.
      ircamndf
      if( $?NDFNAM == 0 ) exit

#  Save the NDF name. If a parameter abort was requested the NDFNAM variable
#  will be undefined and the script will consequently abort.
      set IN1 = $NDFNAM

#  Now do the same for the 45 degree input NDF. 
      if( $#argv > 1 ) then
         set DEF1 = $argv[2]
      endif
      set DEF2 = $GLOBPAR[2]
      if( $DEF2 == 'undefined' ) unset DEF2
      set PROM = "IN2 - NDF obtained with waveplate at 45 degrees"
      ircamndf
      if( $?NDFNAM == 0 ) exit
      set IN2 = $NDFNAM

#  Now do the same for the 22.5 degree input NDF. 
      if( $#argv > 2 ) then
         set DEF1 = $argv[3]
      endif
      set DEF2 = $GLOBPAR[3]
      if( $DEF2 == 'undefined' ) unset DEF2
      set PROM = "IN3 - NDF obtained with waveplate at 22.5 degrees"
      ircamndf
      if( $?NDFNAM == 0 ) exit
      set IN3 = $NDFNAM

#  Now do the same for the 67.5 degree input NDF. 
      if( $#argv > 3 ) then
         set DEF1 = $argv[4]
      endif
      set DEF2 = $GLOBPAR[4]
      if( $DEF2 == 'undefined' ) unset DEF2
      set PROM = "IN4 - NDF obtained with waveplate at 67.5 degrees"
      ircamndf
      if( $?NDFNAM == 0 ) exit
      set IN4 = $NDFNAM

#  Obtain the suffix for the output NDFs.
      if( $#argv > 4 ) then
         set DEF1 = $argv[5]
      endif
      set PROM = "SUFFIX - Suffix for output NDF names"
      ircamstr
      if( $?STRING == 0 ) exit
      set SUFFIX = $STRING

#  If a graphics device name was supplied on the command line, establish 
#  it as the current graphics device. 
      if( $#argv > 5 ) then
         gdset DEVICE=$argv[6]

#  Otherwise, get the current graphics device (if any). The grep command 
#  selects the line displayed by KAPPA:GLOBALS which describes the graphics 
#  device. The awk command selects the word following the last colon in the 
#  line. This may need to be changed if the format of the output generated by 
#  KAPPA:GLOBALS is changed.
      else
         set DEVICE = `globals | grep "graphics device" | awk '{for(f=NF;f;f--)if($f==":")print $(f+1);exit}'`

#  See if the device is undefined. If so, get a new value from the user.
         if( `echo $DEVICE | grep "undefined"` != "" || $DEVICE == "" ) then
            gdset
         endif
      endif

#  Now get the new current graphics device. 
      set DEVICE = `globals | grep "graphics device" | awk '{for(f=NF;f;f--)if($f==":")print $(f+1);exit}'`

#  Abort if no graphics device is defined.
      if( `echo $DEVICE | grep "undefined"` != "" || $DEVICE == "" ) exit

#  Clear the current graphics device
      echo "  Setting up the graphics device..."
      gdclear device=$DEVICE

#  Set up the default pallette (except that entry 2 is set to BLUE2 - used for
#  bad pixels) and grey-scale LUT.
      paldef device=$DEVICE
      palentry 2 blue2 device=$DEVICE
      lutgrey device=$DEVICE

#  Create a picture to contain the image display. 
      picdef mode=cc fraction=0.85 nooutline device=$DEVICE

#  Loop round each of the input images.
      foreach IN ($IN1 $IN2 $IN3 $IN4)

#  Display the next image. The awk command suppressed the message
#  produced by display which describes the scaling of the image.
         echo "  Displaying $IN on the graphics device..."
         display $IN mode=percentiles percentiles=\[5,95\] badcol=2 \
                 noaxes device=$DEVICE | awk '{if($1!="Data")print $0}'

#  Now allow the user to identify any blemishes. The identified pixels
#  are set bad. 
         echo " "
         echo "  Use the cursor to identify lines, columns or rectangular"
         echo "  regions to be removed. When all required regions have been"
         echo "  removed, give a null value for parameter LINCOL."
         echo " "
         zaplin ${IN} ${IN}${SUFFIX} device=$DEVICE MARK MODE=CURSOR \
                ZAPTYPE=BAD

#  Do the next input NDF.
      end

#  Store the new IRCAM global parameters.
      ircamset ${IN1}${SUFFIX} ${IN2}${SUFFIX} ${IN3}${SUFFIX} ${IN4}${SUFFIX} >/dev/null

#  Finish
      echo " "
      echo " "
      exit
