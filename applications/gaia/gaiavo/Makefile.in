# Makefile.in --
#
#	This file is a Makefile for Sample TEA Extension.  If it has the name
#	"Makefile.in" then it is a template for a Makefile;  to generate the
#	actual Makefile, run "./configure", which is a configuration script
#	generated by the "autoconf" program (constructs like "@foo@" will get
#	replaced in the actual Makefile).
#
# Copyright (c) 1999 Scriptics Corporation.
# Copyright (c) 2002-2005 ActiveState Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: Makefile.in 25776 2007-12-19 12:17:20Z pdraper $

# Increment this number for new sources. Forces generation to enumerate
# them in the Makefile.
NEW_SOURCE_COUNT = 0

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added in a customized configure script.
#========================================================================

#SAMPLE_NEW_VAR	= @SAMPLE_NEW_VAR@

# Install these scripts. None, need proper GAIA scripts, which are
# handled in the starconf section. You could put the gaia.sh script
# in here for some standalone support.
PROGS =

# Testing applications
TEST_APPS = gaia.sh

#========================================================================
# Nothing of the variables below this line should need to be changed.
# Please check the TARGETS section below to make sure the make targets
# are correct.
#========================================================================

#========================================================================
# The names of the source files is defined in the configure script.
# The object files are used for linking into the final library.
# This will be used when a dist target is added to the Makefile.
# It is not important to specify the directory, as long as it is the
# $(srcdir) or in the generic, win or unix subdirectory.
#========================================================================

PKG_SOURCES	= @PKG_SOURCES@
PKG_OBJECTS	= @PKG_OBJECTS@

PKG_STUB_SOURCES = @PKG_STUB_SOURCES@
PKG_STUB_OBJECTS = @PKG_STUB_OBJECTS@

#========================================================================
# PKG_TCL_SOURCES identifies Tcl runtime files that are associated with
# this package that need to be installed, if any.
#========================================================================

PKG_TCL_SOURCES = @PKG_TCL_SOURCES@

#========================================================================
# This is a list of public header files to be installed, if any.
#========================================================================

PKG_HEADERS	= @PKG_HEADERS@

#========================================================================
# "PKG_LIB_FILE" refers to the library (dynamic or static as per
# configuration options) composed of the named objects.
#========================================================================

PKG_LIB_FILE	= @PKG_LIB_FILE@
PKG_STUB_LIB_FILE = @PKG_STUB_LIB_FILE@

PKG_BIN_FILE	= vot2tab$(EXEEXT) tab2vot$(EXEEXT) listvot$(EXEEXT) \
	          $(PACKAGE_NAME)_tcl$(EXEEXT)

bin_BINARIES	= $(PKG_BIN_FILE) $(PROGS)
lib_BINARIES	= $(PKG_LIB_FILE)
BINARIES	= $(lib_BINARIES) $(bin_BINARIES)

SHELL		= @SHELL@

srcdir		= @srcdir@
prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
libdir		= @libdir@
datadir		= @datadir@
mandir		= @mandir@
includedir	= @includedir@

DESTDIR		=

PKG_DIR		= $(PACKAGE_NAME)$(PACKAGE_VERSION)
pkgdatadir	= $(datadir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkgincludedir	= $(includedir)/$(PACKAGE_NAME)

top_builddir	= .

INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@
INSTALL_SCRIPT	= @INSTALL_SCRIPT@

PACKAGE_NAME	= @PACKAGE_NAME@
PACKAGE_VERSION	= @PACKAGE_VERSION@
CC		= @CC@
CXX		= @CXX@
CFLAGS_DEFAULT	= @CFLAGS_DEFAULT@
#CFLAGS_WARNING	= @CFLAGS_WARNING@
CLEANFILES	= @CLEANFILES@ $(TEST_APPS) *.o tests/*.o
EXEEXT		= @EXEEXT@
LDFLAGS_DEFAULT	= @LDFLAGS_DEFAULT@
MAKE_LIB	= @MAKE_LIB@ $(MERGE_OBJECTS)
MAKE_SHARED_LIB	= @MAKE_SHARED_LIB@
MAKE_STATIC_LIB	= @MAKE_STATIC_LIB@
MAKE_STUB_LIB	= @MAKE_STUB_LIB@
OBJEXT		= @OBJEXT@
RANLIB		= @RANLIB@
RANLIB_STUB	= @RANLIB_STUB@
SHLIB_CFLAGS	= @SHLIB_CFLAGS@
SHLIB_LD	= @SHLIB_LD@
SHLIB_LD_LIBS	= @SHLIB_PKG_LIBS@ @SHLIB_LD_LIBS@ @SHLIB_LD_CXX_LIBS@
LD_LIBS		= @PKG_LIBS@ @SHLIB_LD_LIBS@ @SHLIB_LD_CXX_LIBS@
STLIB_LD	= @STLIB_LD@
#TCL_DEFS	= @TCL_DEFS@
TCL_BIN_DIR	= @TCL_BIN_DIR@
TCL_SRC_DIR	= @TCL_SRC_DIR@
TK_BIN_DIR	= @TK_BIN_DIR@
#TK_SRC_DIR	= @TK_SRC_DIR@

# Not used, but retained for reference of what libs Tcl required
#TCL_LIBS	= @TCL_LIBS@

#========================================================================
# TCLLIBPATH seeds the auto_path in Tcl's init.tcl so we can test our
# package without installing.  The other environment variables allow us
# to test against an uninstalled Tcl.  Add special env vars that you
# require for testing here (like TCLX_LIBRARY).
#========================================================================

EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR)
#EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR):$(TK_BIN_DIR)
TCLLIBPATH	= $(top_builddir)
TCLSH_ENV	= TCL_LIBRARY=`@CYGPATH@ $(TCL_SRC_DIR)/library` \
		  @LD_LIBRARY_PATH_VAR@="$(EXTRA_PATH):$(@LD_LIBRARY_PATH_VAR@)" \
		  PATH="$(EXTRA_PATH):$(PATH)" \
		  TCLLIBPATH="$(TCLLIBPATH)"
#		  TK_LIBRARY=`@CYGPATH@ $(TK_SRC_DIR)/library`

TCLSH_PROG	= @TCLSH_PROG@
TCLSH	= $(TCLSH_ENV) $(TCLSH_PROG)

#WISH_PROG	= @WISH_PROG@
#WISH	= $(TCLSH_ENV) $(WISH_PROG)


SHARED_BUILD	= @SHARED_BUILD@

INCLUDES	= @PKG_INCLUDES@ @TCL_INCLUDES@
#INCLUDES	= @PKG_INCLUDES@ @TCL_INCLUDES@ @TK_INCLUDES@ @TK_XINCLUDES@

PKG_CFLAGS	= @PKG_CFLAGS@


# TCL_DEFS is not strictly need here, but if you remove it, then you
# must make sure that configure.in checks for the necessary components
# that your library may use.  TCL_DEFS can actually be a problem if
# you do not compile with a similar machine setup as the Tcl core was
# compiled with.
#DEFS		= $(TCL_DEFS) @DEFS@ $(PKG_CFLAGS)
DEFS		= @DEFS@ $(PKG_CFLAGS)

CONFIG_CLEAN_FILES = Makefile pkgIndex.tcl

CPPFLAGS	= @CPPFLAGS@
LIBS		= @PKG_LIBS@ @LIBS@
AR		= @AR@
CFLAGS		= @CFLAGS@
CXXFLAGS        = @CXXFLAGS@
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CXXCOMPILE	= $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) $(CXXFLAGS)


# Libtool linking.
LIBTOOL      = @LIBTOOL@
LTLINK       = $(LIBTOOL) --mode=link --tag=CXX $(CXX) $(CFLAGS) $(CXXFLAGS)


#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc tclIndex

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

tclIndex:
	(cd $(srcdir)/library; $(TCLSH_PROG) mkIndex.tcl)


#========================================================================
# Your doc target should differentiate from doc builds (by the developer)
# and doc installs (see install-doc), which just install the docs on the
# end user machine when building from source.
#========================================================================

doc:

# generate man pages for itcl classes
gendoc:
	(cd  $(srcdir)/library; $(TCLSH) itcldoc [A-Z]*.tcl)

# remove generated man pages
cleandoc:
	rm -f $(srcdir)/man/[A-Z]*.mann



install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries

#========================================================================
# This rule installs platform-independent files, such as header files.
# The list=...; for p in $$list handles the empty list case x-platform.
#========================================================================

install-libraries: libraries
	@test -d $(DESTDIR)$(pkgincludedir) || mkdir -p $(DESTDIR)$(pkgincludedir)
	@echo "Installing header files in $(DESTDIR)$(pkgincludedir)"
	@list='$(PKG_HEADERS)'; for i in $$list; do \
	    echo "MANIFEST:$(srcdir)/$$i" ; \
	    $(INSTALL_DATA) $(srcdir)/$$i $(DESTDIR)$(pkgincludedir) ; \
	done;

#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc:
#install-doc: doc
#	@mkdir -p $(DESTDIR)$(mandir)/mann
#	@echo "Installing documentation in $(DESTDIR)$(mandir)"
#	@list='$(srcdir)/doc/*.n'; for i in $$list; do \
#	    echo "Installing $$i"; \
#	    rm -f $(DESTDIR)$(mandir)/mann/`basename $$i`; \
#	    $(INSTALL_DATA) $$i $(DESTDIR)$(mandir)/mann ; \
#	done

shell: binaries libraries
	@$(TCLSH) $(SCRIPT)

gdb:
	$(TCLSH_ENV) gdb $(TCLSH_PROG) $(SCRIPT)

depend:

#========================================================================
# $(PKG_LIB_FILE) should be listed as part of the BINARIES variable
# mentioned above.  That will ensure that this target is built when you
# run "make binaries".
#
# The $(PKG_OBJECTS) objects are created and linked into the final
# library.  In most cases these object files will correspond to the
# source files above.
#========================================================================

$(PKG_LIB_FILE): $(PKG_OBJECTS) $(MERGE_OBJECTS)
	-rm -f $(PKG_LIB_FILE)
	${MAKE_LIB}
	$(RANLIB) $(PKG_LIB_FILE)

#$(PKG_STUB_LIB_FILE): $(PKG_STUB_OBJECTS)
#	-rm -f $(PKG_STUB_LIB_FILE)
#	${MAKE_STUB_LIB}
#	$(RANLIB_STUB) $(PKG_STUB_LIB_FILE)

#=========================================================================
# Build the package binaries.
#=========================================================================

vot2tab$(EXEEXT): vot2tab.o $(PKG_LIB_FILE)
	$(LTLINK) $(LDFLAGS) vot2tab.o $(PKG_LIB_FILE) \
	      $(LD_SEARCH_FLAGS) $(LD_LIBS) -lxerces-c \
	      -o vot2tab$(EXEEXT)

tab2vot$(EXEEXT): tab2vot.o $(PKG_LIB_FILE)
	$(LTLINK) $(LDFLAGS) tab2vot.o $(PKG_LIB_FILE) \
	      $(LD_SEARCH_FLAGS) $(LD_LIBS) -lxerces-c \
	      -o tab2vot$(EXEEXT)

listvot$(EXEEXT): listvot.o $(PKG_LIB_FILE)
	$(LTLINK) $(LDFLAGS) listvot.o $(PKG_LIB_FILE) \
	      $(LD_SEARCH_FLAGS) $(LD_LIBS) -lxerces-c \
	      -o listvot$(EXEEXT)

$(PACKAGE_NAME)_tcl$(EXEEXT): tclAppInit.o
	$(LTLINK) $(LDFLAGS) tclAppInit.o \
	      $(LD_SEARCH_FLAGS) $(LD_LIBS) $(TCL_LIB_SPEC) \
	      -o $(PACKAGE_NAME)_tcl$(EXEEXT)

#========================================================================
# We need to enumerate the list of .c to .o lines here.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# sample.$(OBJEXT): $(srcdir)/generic/sample.c
# 	$(COMPILE) -c `@CYGPATH@ $(srcdir)/generic/sample.c` -o $@
#
# Setting the VPATH variable to a list of paths will cause the makefile
# to look into these paths when resolving .c to .obj dependencies.
# As necessary, add $(srcdir):$(srcdir)/compat:....
#========================================================================

VPATH = $(srcdir):$(srcdir)/generic:$(srcdir)/tkhtml

.c.@OBJEXT@:
	$(COMPILE) -c `@CYGPATH@ $<` -o $@

.C.@OBJEXT@:
	$(CXXCOMPILE) -c `@CYGPATH@ $<` -o $@

#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.$(OBJEXT) core *.core
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f $(CONFIG_CLEAN_FILES)
	-rm -rf config.cache config.log config.status autom4te.cache

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Library files go into the lib directory.
# In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries: binaries
	@test -d $(DESTDIR)$(pkglibdir) || mkdir -p $(DESTDIR)$(pkglibdir)
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "MANIFEST:$(DESTDIR)$(libdir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(libdir)/$$p; \
	    stub=`echo $$p|sed -e "s/.*\(stub\).*/\1/"`; \
	    if test "x$$stub" = "xstub"; then \
		echo " $(RANLIB_STUB) $(DESTDIR)$(libdir)/$$p"; \
		$(RANLIB_STUB) $(DESTDIR)$(libdir)/$$p; \
	    else \
		echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
		$(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	    fi; \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo "MANIFEST:$(DESTDIR)$(libdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib; \
		fi; \
	    fi; \
	  fi; \
	done
	@list='$(PKG_TCL_SOURCES) library/tclIndex $(PACKAGE_NAME)_version.tcl'; \
	for p in $$list; do \
	  if test -f $(srcdir)/$$p; then \
	    destp=`basename $$p`; \
	    echo "MANIFEST:$(DESTDIR)$(pkglibdir)/$$destp"; \
	    $(INSTALL_DATA) $(srcdir)/$$p $(DESTDIR)$(pkglibdir)/$$destp; \
	  fi; \
	done
	@if test "x$(SHARED_BUILD)" = "x1"; then \
	    echo "MANIFEST:$(DESTDIR)$(pkglibdir)"; \
	    $(INSTALL_DATA) pkgIndex.tcl $(DESTDIR)$(pkglibdir); \
	fi

#	(cd $(DESTDIR)$(pkglibdir); $(TCLSH_PROG) mkIndex.tcl)

#========================================================================
# Install binary executables (e.g. .exe files and dependent .dll files)
# This is for files that must go in the bin directory (located next to
# wish and tclsh), like dependent .dll files on Windows.
#
# You should not have to modify this target, except to define bin_BINARIES
# above if necessary.
#========================================================================

install-bin-binaries: binaries
	@test -d $(DESTDIR)$(bindir)/gaia || mkdir -p $(DESTDIR)$(bindir)/gaia
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "MANIFEST:$(DESTDIR)$(bindir)/gaia/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/gaia/$$p; \
	  fi; \
	done

.SUFFIXES: .c .$(OBJEXT) .C .f .gen .gsc .gsn

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(top_builddir)/configure
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

#  Reconfigure when configure is younger than config.status. Sign of
#  update from svn of build system.
config.status: $(top_builddir)/configure
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status --recheck

uninstall-binaries:
	list='$(lib_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  p=`basename $$p`; \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(bin_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/gaia/$$p; \
	done

.PHONY: all binaries clean depend distclean doc install libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

FORCE:

#========================================================================
# C++ Test cases
#========================================================================
#test: binaries libraries $(TEST_APPS)


#========================================================================
# Run Tcl test cases
#========================================================================
#tcltest: binaries libraries
#	(cd tests; sh all.tcl)


#============================================================================
# Dummy targets to keep build system happy
#============================================================================

distdir:

#============================================================================
#  Generate parsing and serialization code from VOTable schema. Requires
#  XSD from codesynthesis to be installed. Not part of distribution.
#============================================================================

VOTable1.1.C: VOTable1.1.xsd
	xsdcxx cxx-tree --root-element VOTABLE \
	    --generate-serialization \
	    --namespace-map http://www.ivoa.net/xml/VOTable/v1.1=votable_11 \
	    --parser-regex '/VOTABLE/VOTABLE_read/' \
	    --serializer-regex '/VOTABLE/VOTABLE_write/' \
	    --generate-wildcard \
	    VOTable1.1.xsd
	rm -f generic/VOTable1.1.C
	mv VOTable1.1.cxx generic/VOTable1.1.C
	rm -f generic/VOTable1.1.hxx
	mv VOTable1.1.hxx generic/VOTable1.1.hxx

#  Note no serialization support for this. Do not want to write these.
VOTable1.1_dns.C: VOTable1.1_dns.xsd
	xsdcxx cxx-tree --root-element VOTABLE \
	    --namespace-map '=votable_11_dns' \
	    --parser-regex '/VOTABLE/VOTABLE_read/' \
	    --generate-wildcard \
	    VOTable1.1_dns.xsd
	rm -f generic/VOTable1.1_dns.C
	mv VOTable1.1_dns.cxx generic/VOTable1.1_dns.C
	rm -f generic/VOTable1.1_dns.hxx
	mv VOTable1.1_dns.hxx generic/VOTable1.1_dns.hxx

VOTable1.2.C: VOTable1.2.xsd
	xsdcxx cxx-tree --root-element VOTABLE \
	    --generate-serialization \
	    --namespace-map http://www.ivoa.net/xml/VOTable/v1.2=votable_12 \
	    --parser-regex '/VOTABLE/VOTABLE_read/' \
	    --serializer-regex '/VOTABLE/VOTABLE_write/' \
	    --generate-wildcard \
	    VOTable1.2.xsd
	rm -f generic/VOTable1.2.C
	mv VOTable1.2.cxx generic/VOTable1.2.C
	rm -f generic/VOTable1.2.hxx
	mv VOTable1.2.hxx generic/VOTable1.2.hxx

VOTable1.3.C: VOTable1.3.xsd
	xsdcxx cxx-tree --root-element VOTABLE \
	    --generate-serialization \
	    --namespace-map http://www.ivoa.net/xml/VOTable/v1.3=votable_13 \
	    --parser-regex '/VOTABLE/VOTABLE_read/' \
	    --serializer-regex '/VOTABLE/VOTABLE_write/' \
	    --generate-wildcard \
	    VOTable1.3.xsd
	rm -f generic/VOTable1.3.C
	mv VOTable1.3.cxx generic/VOTable1.3.C
	rm -f generic/VOTable1.3.hxx
	mv VOTable1.3.hxx generic/VOTable1.3.hxx

#  Local dependencies.
VOTableWriteFunctions.o: ./generic/VOTableWriteFunctions.icc
