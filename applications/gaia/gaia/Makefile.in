# $Id$
#
# Makefile.in - Makefile for GAIA extensions.
#
# This file is processed by configure to produce the actual Makefile.
#
# who             when       what
# --------------  ---------  ---------------------------------------------
# Peter W. Draper 6-Oct-1997 Created
# ------------------------------------------------------------------------

# run make in these sub directories
SUBDIRS      = colormaps bitmaps src mktclapp library

# root of source tree
SRC_ROOT     = @SRC_ROOT@

# path to this dir
SRCDIR       = $(SRC_ROOT)/src

# C compiler
CC           = @CC@

# C++ compiler
CXX          = @CXX@

# Fortran and atask linker command
FC           = @FC@
FFLAGS       = @FFLAGS@
ALINK        = @ALINK@
LINK         = @LINK@

# Static/dynamic non-atask linker flags
LDFLAG1 =
LDFLAG2 =

# -D flags
DEFINES      = -DSHARED=@SHARED@ @TCLUTIL_DEFS@

# other flags to pass to compiler
CFLAGS       = @CXXDEBUGFLAGS@

# install directories
TOPDIR       = @DESTDIR@
BINDIR       = @BINDIR@
LIBDIR       = @LIBDIR@
RTD_DIR      = @RTD_DIR@

# Include directives for Tcl, Tk, and X include files
TCL_INCLUDE   = @TCLINCSW@
TK_INCLUDE    = @TKINCSW@
X_INCLUDE     = @XINCSW@

# X Libraries
X_LIB        = @XLIBSW@
EXTRA_LIBS   = @LIBS@

# Tk libs
TCLTKLIBS = @ITK_LIB_SPEC@ \
            @TIX_LIB_SPEC@ \
            @TK_LIB_SPEC@ \
            @BLT_LIB_SPEC@ \
            @TCLX_LIB_SPEC@ \
            @ITCL_LIB_SPEC@ \
            @TCL_LIB_SPEC@ \
	    -ltkhtml	

# Tclutil library
TCLUTIL_LIB          = -ltclutil
TCLUTIL_LIB_STATIC   = @TCLUTIL_LIB_STATIC@

# Astrotcl library
ASTROTCL_LIB         = -lastrotcl
ASTROTCL_LIB_STATIC  = @ASTROTCL_LIB_STATIC@

# Rtd library
RTD_LIB              = -lrtd
RTD_LIB_STATIC       = @RTD_LIB_STATIC@

# Catalog library
CAT_LIB              = -lcat
CAT_LIB_STATIC       = @CAT_LIB_STATIC@

# Skycat libraries
SKYCAT_LIB           = -lskycat
SKYCAT_LIB_STATIC    = @SKYCAT_LIB_STATIC@

#  Local library.
LOCAL_LIBRARY = lib/libgaia.a
# info needed for shared libraries (see configure.in or tclConfig.sh
# for an explanation)
SHLIB_CFLAGS=@SHLIB_CFLAGS@
SHLIB_LD=@SHLIB_LD@
SHLIB_SUFFIX=@SHLIB_SUFFIX@
SHLIB_LD_LIBS=@SHLIB_LD_LIBS@
DL_LIBS=@DL_LIBS@
LD_FLAGS=@LD_FLAGS@
LD_SEARCH_FLAGS=@LD_SEARCH_FLAGS@ -L$(LIBDIR)
LIB_RUNTIME_DIR=@LIB_RUNTIME_DIR@

# Extension for executables
EXEEXT=@EXEEXT@

# ------------------------------------------------------------------------
#       Libraries required to link against Fortran source code
#       using a C++ compiler.
# ------------------------------------------------------------------------
STARLINK = @STARLINK@
F77_LIBS = -L./ @F77_LIBS@
STAR_LIB = @STARLINK@/lib
STAR_INC = @STARLINK@/include
COMPIFL  = @STARLINK@/bin/compifl
#  Define sets of ADAM libraries we need to link against. Note that
#  ast_link and ndf_link must be carefully managed to avoid picking up
#  default AST libraries for errors and graphics.
AST_LIBS = -L$(STAR_LIB) `ast_link -myerr -mygrf`
ADAM_LIBS = -L$(STAR_LIB) `ard_link` `ams_link_adam` `fio_link` `cat_link` `subpar_link_adam` `ndf_link`  -lpda

#  Main wish interpreter for GAIA.
DEMO_WISH = bin/gaia_wish

#  Command-line interpretor.
DEMO_TCL = bin/gaia_tcl

#  GAIA monolith
GAIAMON = bin/gaiaMon$(EXEEXT)

#  Tasks in GAIA monolith.
GAIA_TASKS = ardstat asc2tab autocrop cat2tab tab2asc tab2cat 
TASK_LINKS = bin/ardstat bin/asc2tab bin/autocrop bin/cat2tab \
             bin/tab2asc bin/tab2cat 

#  Interface files for individual applications.
IFL_FILES = src/ardstat.ifl src/asc2tab.ifl src/autocrop.ifl \
            src/cat2tab.ifl src/tab2asc.ifl src/tab2cat.ifl
IFC_FILES = $(IFL_FILES:.ifl=)

INCLUDES     = $(TK_INCLUDE) $(TCL_INCLUDE) $(X_INCLUDE) -I$(STAR_INC)

CC_SWITCHES  = $(DEFINES) $(INCLUDES) $(CFLAGS)

# these objects are only needed to make the gaia_wish binary for the demos
OBJECTS      = tkAppInit.o tclAppInit.o

INSTALL      = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
RANLIB       = @RANLIB@
SHELL        = /bin/sh
RM           = rm -f
LN           = ln -s

# ------------------------------------------------------------------------
all: $(DEMO_WISH) $(DEMO_TCL) $(GAIAMON)

#  Link wish. 
$(DEMO_WISH): normallib tkAppInit.o FORCE
	@echo "linking \"$(DEMO_WISH)\"..."
	- @RANLIB@ $(LIBDIR)/libskycat.a
	$(CXX) $(CC_SWITCHES) tkAppInit.o -o $(DEMO_WISH)  \
	       $(LDFLAG1) $(ADDLIBS) $(LD_SEARCH_FLAGS) $(AST_LIBS) \
	       $(SKYCAT_LIB) $(LOCAL_LIBRARY) \
	       $(ADDLIBS) $(AST_LIBS) $(ADAM_LIBS) $(AST_LIBS) $(TCLTKLIBS) \
	       $(X_LIB) $(LDFLAG2) $(EXTRA_LIBS)

$(DEMO_TCL): normallib tclAppInit.o FORCE
	@echo "linking \"$(DEMO_TCL)\"..."
	$(CXX) $(CC_SWITCHES)  tclAppInit.o -o $(DEMO_TCL) \
	       $(LD_SEARCH_FLAGS) $(LOCAL_LIBRARY) $(LDFLAG1) \
	       $(ADDLIBS) $(ADAM_LIBS) \
	       $(TCLTKLIBS) $(LDFLAG2) $(EXTRA_LIBS)

$(GAIAMON): normallib gaiaMon.c gaiaMon.ifc
	echo "linking \"$(GAIAMON)\"..."
	$(ALINK) gaiaMon.c $(LOCAL_LIBRARY) $(ADDLIBS) \
	   -L$(STAR_LIB) $(LD_SEARCH_FLAGS) \
	   `fio_link_adam` `ard_link_adam` `ndf_link_adam` `cat_link_adam`
	if test -f $(GAIAMON); then \
	   $(RM) $(GAIAMON);\
	fi
	mv gaiaMon$(EXEEXT) $(GAIAMON)
	for f in gaiaMon $(IFC_FILES) ""; do \
	   if test -f "$${f}.ifl"; then \
	      $(COMPIFL) $$f; \
	      $(INSTALL_DATA) $${f}.ifc bin/; \
	      $(RM) $${f}.ifc; \
	   else :; fi;\
	done
	for f in $(GAIA_TASKS); do \
	    (cd bin; \
	       if test -f $$f; then $(RM) -f $$f; else :; fi;\
	     $(LN) gaiaMon $$f;\
	    );\
	done

#  Rule to create the monolith interface file from the source.
gaiaMon.ifc: $(IFL_FILES)
	@- if test -f gaiaMon.ifl ; then $(RM) -f gaiaMon.ifl; else :; fi
	echo "MONOLITH gaiaMon" > gaiaMon.ifl
	cat $(IFL_FILES) >> gaiaMon.ifl
	echo "ENDMONOLITH" >> gaiaMon.ifl

normallib: FORCE
	for i in $(SUBDIRS); do (cd $$i; echo "$$i:"; $(MAKE)) done

install-top:
	@if test -d $(TOPDIR); then : ; else mkdir $(TOPDIR); fi

install-bin:
	@if test -d $(BINDIR); then : ; else mkdir $(BINDIR); fi
	chmod 0755 $(DEMO_WISH)
	$(INSTALL) $(DEMO_WISH) $(BINDIR)
	chmod 0755 $(DEMO_TCL)
	$(INSTALL) $(DEMO_TCL) $(BINDIR)
	$(INSTALL) $(GAIAMON) $(BINDIR)
	for f in gaiaMon $(GAIA_TASKS) ""; do \
	   if test -f bin/"$${f}.ifc"; then \
	      $(INSTALL_DATA) bin/"$${f}.ifc" $(BINDIR)/; \
	   else :; fi;\
	done
	for f in $(GAIA_TASKS); do \
	    (cd $(BINDIR); \
	       if test -f $$f; then $(RM) -f $$f; else :; fi;\
	     $(LN) gaiaMon $$f;\
	    );\
	done
	@(cd mktclapp; $(MAKE) install)

install-man:
	@(cd man; $(MAKE) install)

install-demos:
	@(cd demos; $(MAKE) install)

# install the tcl library files.
install-library:
	@(cd library; $(MAKE) install)

install-colormaps:
	@(cd colormaps; $(MAKE) install)

install-bitmaps:
	@(cd bitmaps; $(MAKE) install)

install: install-top install-library install-bin install-colormaps install-bitmaps

clean:
	$(RM) $(OBJECTS) $(DEMO_WISH) $(DEMO_TCL) $(GAIAMON) $(GAIAMON).ifc \
	      $(IFC_FILES) $(TASK_LINKS) $(TASK_LINKS:=.ifc)
	for i in $(SUBDIRS); do (cd $$i; echo "$$i:"; $(MAKE) $@) done

distclean: clean
	$(RM) config.status config.cache config.log Makefile
	for i in $(SUBDIRS); do (cd $$i; echo "$$i:"; $(MAKE) $@) done

depend:

man: FORCE
	for i in $(SUBDIRS); do (cd $$i; echo "$$i:"; $(MAKE) $@) done

.SUFFIXES: .C
.c.o:
	$(CC) -c $(CC_SWITCHES) $<

.C.o:
	$(CXX) -c $(CC_SWITCHES) $<

FORCE:

