      SUBROUTINE RTD1_STAT<T>( BAD, EL, DATA, MASK, NGOOD, DMIN, DMAX, 
     :                         SUM, MEAN, STDEV, STATUS )
*+
*  Name:
*     RTD1_STAT<T>
 
*  Purpose:
*     Compute simple statistics for masked array.
 
*  Language:
*     Starlink Fortran 77
 
*  Invocation:
*     CALL RTD1_STAT<T>( BAD, EL, DATA, NGOOD, DMIN,
*                        DMAX, SUM, MEAN, STDEV, STATUS )
 
*  Description:
*     This routine computes simple statistics for a masked array,
*     namely: the number of valid pixels, the minimum and maximum pixel
*     values, the pixel sum, the mean, and the standard deviation.
 
*  Arguments:
*     BAD = LOGICAL (Given)
*        Whether checks for bad pixels should be performed on the array
*        being analysed.
*     EL = INTEGER (Given)
*        Number of pixels in the array.
*     DATA( EL ) = <TYPE> (Given)
*        Array to be analysed.
*     MASK( EL ) = INTEGER (Given)
*        Mask that indicates which elements of DATA to calculate 
*        the statistics for.
*     NGOOD = INTEGER (Returned)
*        Number of valid elements in the array.
*     DMIN = DOUBLE PRECISION (Returned)
*        Minimum pixel value in the array.
*     DMAX = DOUBLE PRECISION (Returned)
*        Maximum pixel value in the array.
*     SUM = DOUBLE PRECISION (Returned)
*        Sum of the valid pixels.
*     MEAN = DOUBLE PRECISION (Returned)
*        Mean of the valid pixels.
*     STDEV = DOUBLE PRECISION (Returned)
*        Standard deviation of the valid pixels.
*     STATUS = INTEGER (Given and Returned)
*        The global status.
 
*  Notes:
*     - This is a generic function and may have any of the types
*
*        Type                Code      Fortran type
*        Byte                B         BYTE
*        Unsigned Byte       UB        BYTE
*        Word                W         INTEGER*2
*        Unsigned Word       UW        INTEGER*2
*        Integer             I         INTEGER
*        Real                R         REAL
*        Double Precision    D         DOUBLE PRECISION
*
*     Just replace the <T> in the routine name by the character code of
*     the data type that you want to process.
*
*     -  If NGOOD is zero, then the values of all the derived
*     statistics will be undefined and will be set to the "bad" value
*     appropriate to their data type (except for the pixel sum, which
*     will be zero).

*  Copyright:
*     Copyright (C) 1997 Central Laboratory of the Research Councils
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of the
*     License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied warranty
*     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*     GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA


*  Authors:
*     PWD: Peter W. Draper (STARLINK - Durham University)
*     {enter_new_authors_here}
 
*  History:
*     19-MAR-1996 (PWD):
*        Original version. Based on KPG1_STAT.      
*     {enter_further_changes_here}
 
*  Bugs:
*     {note_any_bugs_here}
 
*-
 
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing
 
*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT primitive data constants
 
*  Arguments Given:
      LOGICAL BAD
      INTEGER EL
      <TYPE> DATA( EL )
      INTEGER MASK( EL )
 
*  Arguments Returned:
      INTEGER NGOOD
      INTEGER IMIN
      DOUBLE PRECISION DMIN
      INTEGER IMAX
      DOUBLE PRECISION DMAX
      DOUBLE PRECISION SUM
      DOUBLE PRECISION MEAN
      DOUBLE PRECISION STDEV
 
*  Status:
      INTEGER STATUS             ! Global status
 
*  Local Variables:
      DOUBLE PRECISION SUMSQ     ! Sum of pixels squared
      DOUBLE PRECISION VALUE     ! Double precision array value
      INTEGER I                  ! Loop counter for array pixels
 
*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'
 
*.
 
*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN
 
*  Initializations.
      SUMSQ = 0.0D0
      NGOOD = 0
      SUM = 0.0D0
      STDEV = 0.0D0
      DMIN = VAL__MAX<T>
      DMAX = VAL__MIN<T>
      IMIN = VAL__MAXI
      IMAX = VAL__MINI

*  Now convert the array values to double precision, count them, 
*  and form sums for the statistics. 
      IF ( BAD ) THEN 

*  BAD pixel checks necessary.
         DO 1 I = 1, EL
            IF ( MASK( I ) .GT. 0 ) THEN 
               IF ( DATA( I ) .NE. VAL__BAD<T> ) THEN
                  VALUE = NUM_<T>TOD( DATA( I ) )
                  NGOOD = NGOOD + 1
                  SUM = SUM + VALUE
                  SUMSQ = SUMSQ + ( VALUE * VALUE )
                  IF ( VALUE .LT. DMIN ) THEN
                     DMIN = VALUE
                     IMIN = I
                  END IF
                  IF ( VALUE .GT. DMAX ) THEN
                     DMAX = VALUE
                     IMAX = I
                  END IF
               END IF
            END IF
 1       CONTINUE
      ELSE 

*  No BAD pixel checks necessary.
         DO 2 I = 1, EL
            IF ( MASK( I ) .GT. 0 ) THEN 
               VALUE = NUM_<T>TOD( DATA( I ) )
               NGOOD = NGOOD + 1
               SUM = SUM + VALUE
               SUMSQ = SUMSQ + ( VALUE * VALUE )
               IF ( VALUE .LT. DMIN ) THEN
                  DMIN = VALUE
                  IMIN = I
               END IF
               IF ( VALUE .GT. DMAX ) THEN
                  DMAX = VALUE
                  IMAX = I
               END IF
            END IF
 2       CONTINUE
      END IF
 
*  If there were no valid pixels, then use null result values.
      IF ( NGOOD .EQ. 0 ) THEN
         IMIN = VAL__BADI
         DMIN = VAL__BADD
         IMAX = VAL__BADI
         DMAX = VAL__BADD
         SUM = 0.0D0
         MEAN = VAL__BADD
         STDEV = VAL__BADD
 
*  Otherwise, calculate the pixel mean.
      ELSE
         MEAN = SUM / DBLE( NGOOD )
 
*  Before calculating the standard deviation, check for (a) only one
*  contributing pixel, (b) all pixels having the same value and (c)
*  rounding errors producing a negative variance value. In all these
*  cases, calculate a standard deviation value of zero.
         STDEV = SUMSQ - ( MEAN * MEAN * DBLE( NGOOD ) )
         IF ( ( NGOOD .EQ. 1 ) .OR. ( DMIN .EQ. DMAX ) .OR. 
     :        ( STDEV .LT. 0.0D0 ) ) THEN
            STDEV = 0.0D0
 
*  Otherwise, calculate the standard deviation normally.
         ELSE
            STDEV = SQRT( STDEV / DBLE( NGOOD - 1 ) )
         END IF
      END IF
      END
