      SUBROUTINE RTD1_SUFIT<T>( MASK, IMAGE, VAR, DIM1, DIM2, USEVAR, 
     :                          X, Y, Z, W, NVALID, SIGSUM, STATUS )
*+
*  Name:
*    RTD1_SUFIT<T>

*  Purpose:
*     Setups up arrays of data for surface fitting.

*  Language:
*     Starlink Fortran-77

*  Invocation:
*     CALL RTD1_SUFIT<T>( MASK, IMAGE, VAR, DIM1, DIM2, USEVAR, 
*                         X, Y, Z, W, NVALID, STATUS )

*  Description:
*     This routine sets up the arrays of data that are necessary to
*     perform a surface fit for the routine RTD1_DOFIT. It copies
*     valid X, Y, variance and data values. If USEVAR is FALSE then
*     a set of uniform weights are used.

*  Arguments:
*     MASK( DIM1, DIM2 ) = INTEGER (Given)
*        A mask for the values in IMAGE. Positive values are considered
*        to correspond to potentially valid pixels.
*     IMAGE( DIM1, DIM2 ) = <TYPE> (Given)
*        The image data to copy into the fitting arrays.
*     VAR( DIM1, DIM2 ) = <TYPE>
*        Any data variances if available.
*     DIM1 = INTEGER (Given)
*        The first dimension of MASK and IMAGE.
*     DIM2 = INTEGER (Given)
*        The second dimension of MASK and IMAGE.
*     USEVAR = LOGICAL (Given)
*        If variances are to be used as weights.
*     X( * ) = REAL (Returned)
*        An array of the X positions of any valid data in IMAGE.
*     Y( * ) = REAL (Returned)
*        An array of the Y positions of any valid data in IMAGE.
*     Z( * ) = REAL (Returned)
*        An array of the data values of any valid data in IMAGE.
*     W( * ) = REAL (Returned)
*        An array of weights for the valid data in IMAGE.
*     NVALID = INTEGER (Returned)
*        The number of valid values in X, Y, Z and W.
*     SIGSUM = REAL (Returned)
*        The sum of the weights.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     The arrays X, Y, Z and W must be large enough to contain the
*     all the valid values of IMAGE.
*
*     This is a generic function and may have any of the types
*
*        Type                Code      Fortran type
*        Byte                B         BYTE
*        Unsigned Byte       UB        BYTE
*        Word                W         INTEGER*2
*        Unsigned Word       UW        INTEGER*2
*        Integer             I         INTEGER
*        Real                R         REAL
*        Double Precision    D         DOUBLE PRECISION
*
*     Just replace the <T> in the routine name by the character code of
*     the data type that you want to process.

*  Copyright:
*     Copyright (C) 1997 Central Laboratory of the Research Councils
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of the
*     License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied warranty
*     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*     GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA


*  Authors:
*     PWD: Peter Draper (STARLINK - Durham University)
*     {enter_new_authors_here}

*  History:
*     14-MAR-1996 (PWD):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE             ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'         ! Standard SAE constants
      INCLUDE 'PRM_PAR'         ! PRIMDAT constants

*  Arguments Given:
      INTEGER DIM1
      INTEGER DIM2
      <TYPE> IMAGE( DIM1, DIM2 )
      INTEGER MASK( DIM1, DIM2 )
      <TYPE> VAR( DIM1, DIM2 )
      LOGICAL USEVAR

*  Arguments Returned:
      REAL X( * )
      REAL Y( * )
      REAL Z( * )
      REAL W( * )
      INTEGER NVALID
      REAL SIGSUM

*  Status:
      INTEGER STATUS            ! Global status

*  Local Variables:
      INTEGER I                 ! Loop variable
      INTEGER J                 ! Loop variable

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Loop over IMAGE and test each pixel for validity. If valid copy into
*  the next available elements.
      NVALID = 0
      SIGSUM = 0.0
      DO 1 J = 1, DIM2
         DO 2 I = 1, DIM1
            IF ( MASK( I, J ) .GT. 0 ) THEN
               IF ( IMAGE( I, J ) .NE. VAL__BAD<T> ) THEN
                  NVALID = NVALID + 1
                  X( NVALID ) = REAL( I )
                  Y( NVALID ) = REAL( J )
                  Z( NVALID ) = REAL( IMAGE( I, J ) )
                  IF ( USEVAR ) THEN 
                     W( NVALID ) = 1.0 / SQRT( REAL( VAR( I, J ) ) )
                     SIGSUM = SIGSUM + W( NVALID )
                  ELSE
                     W( NVALID ) = 1.0
                  END IF
               END IF
            END IF
 2       CONTINUE
 1    CONTINUE
      IF ( .NOT. USEVAR ) THEN 
         SIGSUM = REAL( NVALID )
      END IF
      END
