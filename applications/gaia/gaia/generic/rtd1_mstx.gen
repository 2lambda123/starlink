      SUBROUTINE RTD1_MST<T>( MASK, DIM1, DIM2, IMAGE, VALID,
     :                        XMIN, XMAX, YMIN, YMAX, NVALID, STATUS )
*+
*  Name:
*     RTD1_MST<T>

*  Purpose:
*     Returns statistics about a masked image.

*  Language:
*     Starlink Fortran-77

*  Invocation:
*     CALL RTD1_MST<T>( MASK, DIM1, DIM2, IMAGE, XMIN, XMAX,
*                       YMIN, YMAX, NVALID, STATUS )

*  Description:
*     This routine returns the extent and number of (optionally) valid
*     non-masked pixels in a image. The mask is an INTEGER array in
*     which included pixels have a value greater than zero (this is as
*     produced by the ARD subroutine library).

*  Arguments:
*     MASK( DIM1, DIM2 ) = INTEGER (Given)
*       The mask.
*     DIM1 = INTEGER (Given)
*        The first dimension of MASK and IMAGE.
*     DIM2 = INTEGER (Given)
*        The second dimension of MASK and IMAGE.
*     IMAGE( DIM1, DIM2 ) = <TYPE> (Given)
*        The image. Only used if pixels also need to be valid.
*     VALID = LOGICAL (Given)
*        If true then pixels in the mask must also be valid in the
*        image to be included.
*     XMIN = REAL (Returned)
*        The X index of the first valid pixel in the image.
*     XMAX = REAL (Returned)
*        The X index of the last valid pixel in the image.
*     YMIN = REAL (Returned)
*        The Y index of the first valid pixel in the image.
*     YMAX = REAL (Returned)
*        The Y index of the last valid pixel in the image.
*     NVALID = INTEGER (Returned)
*        The number of valid pixels in the image (that is a count of
*        positive values in the mask that are also non-BAD if VALID is
*        true).
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     This is a generic function and may have any of the types
*
*        Type                Code      Fortran type
*        Byte                B         BYTE
*        Unsigned Byte       UB        BYTE
*        Word                W         INTEGER*2
*        Unsigned Word       UW        INTEGER*2
*        Integer             I         INTEGER
*        Real                R         REAL
*        Double Precision    D         DOUBLE PRECISION
*
*     Just replace the <T> in the routine name by the character code of
*     the data type that you want to process.

*  Copyright:
*     Copyright (C) 1996-2001 Central Laboratory of the Research Councils

*  Authors:
*     PWD: Peter Draper (STARLINK - Durham University)
*     {enter_new_authors_here}

*  History:
*     18-MAR-1996 (PWD):
*        Original version.
*     01-JUN-2001 (PWD):
*        Made test for non-BAD pixels optional.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE             ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'         ! SAE constants
      INCLUDE 'PRM_PAR'         ! Primitive data values/size

*  Arguments Given:
      INTEGER DIM1
      INTEGER DIM2
      INTEGER MASK( DIM1, DIM2 )
      <TYPE> IMAGE( DIM1, DIM2 )
      LOGICAL VALID

*  Arguments Returned:
      REAL XMIN
      REAL XMAX
      REAL YMIN
      REAL YMAX
      INTEGER NVALID

*  Status:
      INTEGER STATUS            ! Global status

*  Local Variables:
      INTEGER I                 ! Loop variable
      INTEGER J                 ! Loop variable
*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Initialise results.
      NVALID = 0
      XMAX = 1.0
      YMAX = 1.0
      XMIN = REAL( DIM1 )
      YMIN = REAL( DIM2 )

      IF ( VALID ) THEN

*  Image pixels need to be valid.
         DO 1 J = 1, DIM2
            DO 2 I = 1, DIM1
               IF ( MASK( I, J ) .GT. 0 ) THEN
                  IF ( IMAGE( I, J ) .NE. VAL__BAD<T> ) THEN
                     NVALID = NVALID + 1
                     XMAX = MAX( REAL( I ), XMAX )
                     YMAX = MAX( REAL( J ), YMAX )
                     XMIN = MIN( REAL( I ), XMIN )
                     YMIN = MIN( REAL( J ), YMIN )
                  END IF
               END IF
 2          CONTINUE
 1       CONTINUE
      ELSE

*  Image pixels do not need to be valid.
         DO 4 J = 1, DIM2
            DO 3 I = 1, DIM1
               IF ( MASK( I, J ) .GT. 0 ) THEN
                  NVALID = NVALID + 1
                  XMAX = MAX( REAL( I ), XMAX )
                  YMAX = MAX( REAL( J ), YMAX )
                  XMIN = MIN( REAL( I ), XMIN )
                  YMIN = MIN( REAL( J ), YMIN )
               END IF
 3          CONTINUE
 4       CONTINUE
      END IF
      END
