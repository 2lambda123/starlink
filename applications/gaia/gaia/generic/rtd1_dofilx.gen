      SUBROUTINE RTD1_DOFIL<T>( XMIN, YMIN, XSIZE, YSIZE, FITDAT,
     :                          DIM1, DIM2, MASK, ER, NERROR,
     :                          USEVAR, HVQUAL, QUAL, BADBIT,
     :                          IMAGE, VAR, STATUS )
*+
*  Name:
*     RTD1_DOFIL<T>

*  Purpose:
*     Replaces pixels in an image with those from a surface fit.

*  Language:
*     Starlink Fortran-77.

*  Invocation:
*     CALL RTD1_DOFIL<T>( XMIN, YMIN, XSIZE, YSIZE, FITDAT,
*                         DIM1, DIM2, MASK, ER, NERROR,
*                         USEVAR, HVQUAL, QUAL, BADBIT,
*                         IMAGE, VAR, STATUS )

*  Description:
*     This routine replaces the pixels in IMAGE at the positions from
*     XMIN to XMIN+XSIZE-1 and YMIN to YMIN+YSIZE-1 that are masked
*     as a positive value in MASK. The replacement data is a product
*     of PDA_BISPEV and is stored in the order described in that
*     function. The function value used at each point has one of a set
*     of errors from a given distribution added to it to give the
*     effect of noisy data. If variances are given then they are
*     replaced by the variance of the noise distribution (which should
*     be guassian). If a quality array is given then the BADBITS of
*     any changed pixels are reset.

*  Arguments:
*     XMIN = INTEGER (Given)
*        The lower bound in X of the region to replace. Only masked
*        pixels within this region are replaced.
*     YMIN = INTEGER (Given)
*        The lower bound in Y of the region to replace. Only masked
*        pixels within this region are replaced.
*     XSIZE= INTEGER (Given)
*        The size in X of the region to replace. Only masked
*        pixels within this region are replaced.
*     YSIZE= INTEGER (Given)
*        The size in Y of the region to replace. Only masked
*        pixels within this region are replaced.
*     FITDAT( * ) = REAL (Given)
*        The fitted surface data in the form output by PDA_BISPEV.
*     DIM1 = INTEGER (Given)
*        First dimension of IMAGE.
*     DIM2 = INTEGER (Given)
*        Second dimension of IMAGE.
*     MASK( DIM1, DIM2 ) = INTEGER (Given)
*        Mask of values showing which pixels to replace. Pixels with a
*        positive values are replaced.
*     ER( NERROR ) = REAL (Given)
*        Array of gaussian errors. Used to add noise to fit.
*     NERROR = INTEGER (Given)
*        The number of values in errors array.
*     USEVAR = LOGICAL (Given)
*        Whether or not variances are supplied.
*     HVQUAL = LOGICAL (Given)
*        Whether or not a quality array has been given.
*     QUAL = BYTE( DIM1,DIM2 ) (Given and Returned)
*        The quality data.
*     BADBIT = BYTE (Given)
*        BADBITS mask of quality data.
*     IMAGE( DIM1, DIM2 ) = <TYPE> (Given and Returned)
*        The image data with region to replace.
*     VAR( DIM1, DIM2 ) = <TYPE> (Given and Returned)
*        The variances of the image data.
*     STATUS = INTEGER ({status_access_mode})
*        The global status.

*  Notes:
*     This is a generic function and may have any of the types
*
*        Type                Code      Fortran type
*        Byte                B         BYTE
*        Unsigned Byte       UB        BYTE
*        Word                W         INTEGER*2
*        Unsigned Word       UW        INTEGER*2
*        Integer             I         INTEGER
*        Real                R         REAL
*        Double Precision    D         DOUBLE PRECISION
*
*     Just replace the <T> in the routine name by the character code of
*     the data type that you want to process.

*  Copyright:
*     Copyright (C) 1997 Central Laboratory of the Research Councils
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of the
*     License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied warranty
*     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*     GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA


*  Authors:
*     PWD: Peter Draper (STARLINK - Durham University)
*     {enter_new_authors_here}

*  History:
*     14-MAR-1996 (PWD):
*        Original version.
*     16-MAR-1996 (PWD):
*        Converted to generic.
*     17-NOV-1997 (PWD):
*        Added code to support quality.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE             ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'         ! Standard SAE constants

*  Arguments Given:
      INTEGER XMIN
      INTEGER XSIZE
      INTEGER YMIN
      INTEGER YSIZE
      INTEGER DIM1
      INTEGER DIM2
      REAL FITDAT( * )
      INTEGER MASK( DIM1, DIM2 )
      INTEGER NERROR
      REAL ER( NERROR )
      LOGICAL USEVAR
      LOGICAL HVQUAL
      BYTE QUAL( DIM1, DIM2 )
      BYTE BADBIT

*  Arguments Given and Returned:
      <TYPE> IMAGE( DIM1, DIM2 )
      <TYPE> VAR( DIM1, DIM2 )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER I                 ! Loop variable
      INTEGER IX                ! Loop variable
      INTEGER IY                ! Loop variable
      INTEGER J                 ! Loop variable
      INTEGER IERROR            ! Error array counter
      INTEGER IBIT              ! Integer buffer for BADBIT value
      BYTE MYBYTE               ! Local byte variable
      INTEGER MYINT             ! Local integer variable
      INTEGER IBAD              ! Local NOT(BADBIT)

*  Equivalence a local integer to a local byte. 
      EQUIVALENCE ( MYBYTE, MYINT )

*  Local References:
      INCLUDE 'NUM_DEC_CVT'
      INCLUDE 'NUM_DEF_CVT'
*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set all bits of MYINT to 0.
      MYINT = 0

*  Copy BADBIT to MYBYTE (thus zero extending it) and then copy to IBIT.
      MYBYTE = BADBIT
      IBIT = MYINT

*  Find NOT(BADBIT) and store in local integer.
      IBAD = 0
      IBAD = BADBIT
      IBAD = NOT( IBAD )

*  Loop over the new values and replace any masked pixels with
*  the new values.
      IERROR = 1
      IY = YMIN
      DO 1 J = 1, YSIZE
         IX = XMIN
         DO 2 I = 1, XSIZE
            IF ( MASK( IX, IY ) .GT. 0 ) THEN

*  Set image to replacement surface value plus a noise contribution.
               IMAGE( IX, IY ) = NUM_RTO<T>(
     :                              FITDAT( YSIZE * ( I - 1) + J ) +
     :                              ER( IERROR )
     :                           )

*  Set variance if used.
               IF ( USEVAR ) THEN
                  VAR( IX, IY ) = NUM_RTO<T>(
     :                              ER( IERROR ) * ER( IERROR )
     :                            )
               END IF

*  Reset quality, if used.
               IF ( HVQUAL ) THEN 
                  MYBYTE = QUAL( IX, IY )
                  MYINT = IAND( MYINT, IBAD)
                  QUAL( IX, IY ) = MYBYTE
               END IF

*  Increment position into error array and wrap if appropriate.
               IERROR = IERROR + 1
               IF ( IERROR .GT. NERROR ) IERROR = 1
            END IF
            IX = IX + 1
 2       CONTINUE
         IY = IY + 1
 1    CONTINUE
      END
