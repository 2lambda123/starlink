      SUBROUTINE RTD_CP<T>( BAD, REPL, IN, EL, OUT, STATUS )
*+
*  Name:
*     RTD_CP<T>

*  Purpose:
*     Copys a vectorised array of data into another, possibly
*     replacing any bad values with a given value.

*  Language:
*     Starlink Fortran 77

*  Arguments:
*     BAD = LOGICAL (Given)
*        Whether to replace any bad values.
*     REPL = <TYPE> (Given)
*        The replacement value for any bad values.
*     IN( EL ) = <TYPE> (Given)
*        The array of data to copy.
*     EL = INTEGER (Given)
*        Number of elements of IN to copy to OUT.
*     OUT( EL ) = <TYPE>
*        The copied array, with possible bad value replacement.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Copyright:
*     Copyright (C) 1997 Central Laboratory of the Research Councils
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of the
*     License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied warranty
*     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*     GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA


*  Authors:
*     PWD: Peter Draper (STARLINK)
*     {enter_new_authors_here}

*  History:
*     19-JAN-1996 (PWD):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! Primdat constants

*  Arguments Given:
      LOGICAL BAD
      INTEGER EL
      <TYPE> REPL
      <TYPE> IN( EL )

*  Arguments Returned:
      <TYPE> OUT( EL )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER I                  ! Loop variable

*.

*  Check global status.
      IF ( STATUS .NE. SAI__OK ) RETURN
      IF ( BAD ) THEN

*  Loop over array testing against the VAL__BAD<T> value.
         DO 1 I = 1, EL
            IF ( IN( I ) .NE. VAL__BAD<T> ) THEN
               OUT( I ) = IN( I )
            ELSE
               OUT( I ) = REPL
            END IF
 1       CONTINUE
      ELSE 

*  Just copy array.
         DO 2 I = 1, EL
            OUT( I ) = IN( I )
 2       CONTINUE
      END IF
      END
