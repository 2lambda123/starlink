#!/bin/sh
# The next line is executed by /bin/sh, but not Tcl \
exec $GAIA_DIR/gaia_tcl $0 ${1+"$@"}
#+
#   Name:
#      gaiadisp

#   Purpose:
#      Display images in a GAIA tool.

#   Usage:
#         gaiadisp [-p value] [-l low -h high] [-c component] image
#      or
#         gaiadisp [-p value] [-l low -h high] [-c component] image clone_number
#      or
#         gaiadisp [-p value] [-l low -h high] [-c component] image1 image2 image3 ...

#   Description:
#      This command displays images in GAIA. It has two basic modes
#      display a single image into a specified "clone", or display
#      a list of images into a series of automatically created clones.
#      Optional arguments allow for a percentile cut to be applied
#      and a data component of an NDF to be displayed (VARIANCE,
#      ERROR or QUALITY).
#
#      Clones are specified by an integer number less than 1000.
#      The special number -1 indicates that a number should be generated.

#   Notes:

#   Authors:
#      Peter W. Draper (PWD):

#  Copyright:
#     Copyright (C) 1996-2005 Central Laboratory of the Research Councils.
#     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
#     Copyright (C) 2007-2009 Science and Technology Facilities Council.
#     All Rights Reserved.

#  Licence:
#     This program is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as
#     published by the Free Software Foundation; either version 2 of the
#     License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be
#     useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software
#     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
#     02110-1301, USA


#   History:
#      25-NOV-1996 (PWD):
#         Original version.
#      09-MAR-1998 (PWD):
#         Now uses the remote control interface, rather than send
#         mechanism (less X security complaints).
#      18-MAY-1999 (PWD):
#         Converted to use GAIA single binary gaia_stcl.
#      15-APR-2004 (PWD):
#         Merged with the gaiadispmany script that was never released.
#-
#.

#  Check the command-line arguments.

#  Handle the -p and -c arguments.
package require cmdline
set options {
   {p.arg  -1     "percentile cut for display (50-100)"}
   {l.arg  "NULL" "low intensity cut for display"}
   {h.arg  "NULL" "high intensity cut for display"}
   {c.arg  "DATA" "NDF component, DATA, VARIANCE, ERROR or QUALITY"}
}

set usage ":
             gaiadisp \[options] image
             gaiadisp \[options] image clone_number
             gaiadisp \[options] image1 image2 image3 ...
options:"
array set params [::cmdline::getoptions argv $options $usage]

set percentile "$params(p)"
set low "$params(l)"
set high "$params(h)"
set component "$params(c)"
set clone -1

#  Allow shortname for component.
switch -glob $component {
   d* -
   D* {
      set component "DATA"
   }
   e* -
   E* {
      set component "ERROR"
   }
   v* -
   V* {
      set component "VARIANCE"
   }
   q* -
   Q* {
      set component "QUALITY"
   }
   default {
      puts stderr "Unknown NDF component: \"$component\""
      puts stderr "Should be one of DATA, VARIANCE, ERROR or QUALITY"
      exit
   }
}

#  Handle non option values (images and clone number).
set argc [llength $argv]
if { $argc == 1 } {
    if { [lindex $argv 0] == "" } {
       set argc 0
    }
}

if { $argc == 1 } {
   set clone ""
} elseif { $argc == 2 } {
   set clone [lindex $argv 1]
   if { [catch { expr $clone+1 }] } {
      set clone -1
   } else {
      set argv [lindex $argv 0]
   }
} elseif { $argc > 2 } {
   set clone -1
} else {
   set argv "-help"
   puts stderr [::cmdline::usage $options $usage]
   exit
}

#  Get the standard contact scripts.
source $env(GAIA_DIR)/connect_to_gaia.tcl

#  Useful to know when instance is created.
set created_instance 0

#  Open up connection to GAIA.
lassign [connect_to_gaia] gaia_fd created_instance

#  Find useful objects.
lassign [get_gaia_parts $gaia_fd] ctrlwidget rtdimage gaia

#  Create a name parser.
set namer [::gaia::GaiaImageName .namer]

#  Loop over all images.
foreach image $argv {

   # Parse name.
   $namer configure -imagename $image
   if { ! [$namer exists] } {
      puts stderr "Cannot read image: $image"
      continue
   }

   #  Make it absolute (also stripping off tmp_mnt, if present).
   $namer absolute

   #  If it has a FITS extension then we need to protect the [].
   $namer protect

   #  Construct the command needed to display the image. Note
   #  complication when we create GAIA, need to display into the first
   #  clone.
   if { $created_instance || $clone == "" } {

      #  Apply component choice before open.
      set cmd "$gaia configure -component $component"
      send_to_gaia $gaia_fd remotetcl $cmd

      set cmd "$gaia open [$namer fullname]"
      set created_instance 0
   } else {
      #  Component is passed as configuration arguments.
      set cmd "$gaia noblock_clone $clone [$namer fullname] 0 -component $component"
   }

   #  And send the command.
   set gaianame [send_to_gaia $gaia_fd remotetcl $cmd]
   if { $gaianame == "" || [string match ".gaia*" $gaianame] } {
      puts stderr "Displayed image: $image"
   } else {
      puts stderr "Failed to display image: ($gaianame)"
   }

   #  If have any cuts apply those. Note this applies to the clone
   #  not the base gaia, unless this is the first image.
   if { ( $percentile >= 50.0 && $percentile <= 100.0 ) || 
        ( $low != "NULL" && $high != "NULL" ) } {
      if { $gaianame == "" } {
         set cmd "$gaia get_image"
      } else {
         set cmd "$gaianame get_image"
      }
      set gaiaimage [send_to_gaia $gaia_fd remotetcl $cmd]
      set cmd "$gaiaimage get_image"
      set image [send_to_gaia $gaia_fd remotetcl $cmd]

      #  Apply percentile.
      if { $percentile >= 50.0 && $percentile <= 100.0 } {
         set cmd "$image autocut -percent $percentile"
         send_to_gaia $gaia_fd remotetcl $cmd
      }

      #  Apply cuts.
      if { $low != "NULL" && $high != "NULL" } {
         set cmd "$image cut $low $high"
         send_to_gaia $gaia_fd remotetcl $cmd
      }
   }
}
close $gaia_fd
exit
