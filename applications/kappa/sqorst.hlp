.help sqorst Starlink kappa
.nf
    Squashes or stretches a 2-d data array in either or both axes
 
   The output data array, written to an IMAGE structure, is produced
   by either squashing or stretching the 2-d data array, in the input
   IMAGE structure, in either or both of the x and y axes. The
   dimensions of the output data array, are given by the user. The
   stretching is performed by keeping the edge pixels fixed and
   calculating the intervening pixels by bi-linear interpolation. The
   squashing is performed by calculating each pixel in the output
   array as the mean of the corresponding pixels in the input array.
 
   The magic-value method is used for processing bad data.

AUTHORS

   Dave Baines (ROE::ASOC5)
   Malcolm Currie  STARLINK (RAL)

BUGS

   None known.

HISTORY

   18/08/1983 : Original version                (ROE::ASOC5)
   19/02/1984 : Modified to use TITLE component (ROE::ASOC5)
   1986 Aug 8 : Standardised prologue formatting. Added status check
                on entry (RAL::CUR).
   1986 Sep 1 : Added arguments section to prologue, renamed APPG0I
                routine to AIF_GET0I and tidied (RAL::CUR).
   1987 Oct 16: Reordered tidying and extra status checks
                (RAL::CUR)
   1988 Feb 19: Extra error report (RAL::CUR).
   1988 Mar 16: Substituted AIF_ANTMP to annul workspace
                (RAL::CUR).
   1988 Mar 17: Referred to `array' rather than `image'
                (RAL::CUR)
   1988 Jun 20: More reporting of error context (RAL::CUR)
   1989 Jun 13: Allow for processing primitive NDFs (RAL::CUR)
   1989 Aug  7: Passed array dimensions as separate variables
                to STRX, STRY, SQSHX and SQSHY (RAL::CUR).
   1989 Dec 21: Workspace managed by AIF_TEMP (RAL::CUR).
   1990 Jun 25: Fixed bug that occurred when an output dimension is
                the same as the input (RAL::CUR).
   1991 Oct 25: Propagates UNITS, LABEL, and HISTORY (RAL::CUR).
   1992 Feb 25: Limited processing of simple NDFs (RAL::CUR).
   1992 Mar  3: Replaced AIF parameter-system calls by the extended
                PAR library (RAL::CUR).

PARAMETERS

   INPIC  = IMAGE( READ )
       IMAGE structure containing the 2-d data array to be squashed
         or stretched.
   XDIM   = INTEGER( READ )
       First dimension for the output 2-d data array.
   YDIM   = INTEGER( READ )
       Second dimension for the output 2-d data array.
   OUTPIC = IMAGE( WRITE )
       IMAGE structure to contain the 2-d data array after being
         squashed or stretched.
   OTITLE = CHAR( READ )
       Will form the TITLE component for the output IMAGE structure.

INPIC

  position    1
  keyword     'INPIC'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  ppath       'GLOBAL'
  association '<-GLOBAL.DATA_ARRAY'
  prompt      'Input image'
  help        'Name of the IMAGE structure containing the 2-d data 
              array to be modified'

XDIM

  position    2
  keyword     'XDIM'
  type        '_INTEGER'
  vpath       'PROMPT'
  ppath       'CURRENT,DYNAMIC'
  prompt      'First dimension of output image'
  help        'First scaling factor is this value divided by the 
              first dimension of the input data array'

YDIM

  position    3
  keyword     'YDIM'
  type        '_INTEGER'
  vpath       'PROMPT'
  ppath       'CURRENT,DYNAMIC'
  prompt      'Second dimension of output image'
  help        'Second scaling factor is this value divided by the 
              second dimension of the input data array'

OUTPIC

  position    4
  keyword     'OUTPIC'
  type        'IMAGE'
  access      'WRITE'
  vpath       'PROMPT'
  association '->GLOBAL.DATA_ARRAY'
  prompt      'Output image'
  help        'Name of the IMAGE structure to contain the data array 
              after modification'

OTITLE

  position    5
  keyword     'OTITLE'
  type        '_CHAR'
  vpath       'DEFAULT'
  prompt      'Title for output image'
  default     'KAPPA - Sqorst'
  help        'Character string to be used as a title for the output 
              IMAGE structure'
 1 STATS
Computes simple statistics for an NDF's pixels.
 Usage:
    stats ndf [comp] [clip] [logfile]
 Description:
    This application computes and displays simple statistics for the
   pixels in an NDF's data, quality or variance array.  The
   statistics available are:
    -  the pixel sum,
    -  the pixel mean,
    -  the pixel standard deviation,
    -  the value and position of the minimum- and maximum-valued
   pixels,
    -  the total number of pixels in the NDF,
    -  the number of pixels used in the statistics, and
    -  the number of pixels omitted.
    Iterative K-sigma clipping may also be applied as an option.

Parameters

For information on individual parameters, select from the list below:

CLIP

CLIP( ) = _REAL (Read)
   An optional 1-dimensional array of clipping levels to be
   applied, expressed as standard deviations.  If a null value is
   supplied for this parameter (the default), then no iterative
   clipping will take place and the statistics computed will
   include all the valid NDF pixels.
    If an array of clipping levels is given, then the routine will
   first compute statistics using all the available pixels. It
   will then reject all those pixels whose values lie outside K
   standard deviations of the mean (where K is the first value
   supplied) and will then re-evaluate the statistics. This
   rejection iteration is repeated in turn for each value in the
   CLIP array.  A maximum of 5 values may be supplied, all of
   which must be positive. [!]

COMP

COMP = LITERAL (Read)
   The name of the NDF array component for which statistics are
   required: "Data", "Error", "Quality" or "Variance" (where
   "Error" is the alternative to "Variance" and causes the square
   root of the variance values to be taken before computing the
   statistics).  If "Quality" is specified, then the quality
   values are treated as numerical values (in the range 0 to
   255).  ["Data"]

LOGFILE

LOGFILE = FILENAME (Write)
   A text file into which the results should be logged.  If a null
   value is supplied (the default), then no logging of results
   will take place. [!]

MAXCOORD

MAXCOORD( ) = _DOUBLE (Write)
   A 1-dimensional array of values giving the data co-ordinates of
   the centre of the (first) maximum-valued pixel found in the
   NDF array.  The number of co-ordinates is equal to the number of
   NDF dimensions.

MAXIMUM

MAXIMUM = _DOUBLE (Write)
   The maximum pixel value found in the NDF array.

MAXPOS

MAXPOS( ) = _INTEGER (Write)
   A 1-dimensional array of pixel indices identifying the (first)
   maximum-valued pixel found in the NDF array.  The number of
   indices is equal to the number of NDF dimensions.

MEAN

MEAN = _DOUBLE (Write)
   The mean value of all the valid pixels in the NDF array.

MINCOORD

MINCOORD( ) = _DOUBLE (Write)
   A 1-dimensional array of values giving the data co-ordinates of
   the centre of the (first) minimum-valued pixel found in the
   NDF array.  The number of co-ordinates is equal to the number
   of NDF dimensions.

MINIMUM

MINIMUM = _DOUBLE (Write)
   The minimum pixel value found in the NDF array.

MINPOS

MINPOS( ) = _INTEGER (Write)
   A 1-dimensional array of pixel indices identifying the (first)
   minimum-valued pixel found in the NDF array.  The number of
   indices is equal to the number of NDF dimensions.

NDF

NDF = NDF (Read)
   The NDF data structure to be analysed.

NUMBAD

NUMBAD = _INTEGER (Write)
   The number of pixels which were either not valid or were
   rejected from the statistics during iterative K-sigma
   clipping.

NUMGOOD

NUMGOOD = _INTEGER (Write)
   The number of NDF pixels which actually contributed to the
   computed statistics.

NUMPIX

NUMPIX = _INTEGER (Write)
   The total number of pixels in the NDF (both good and bad).

SIGMA

SIGMA = _DOUBLE (Write)
   The standard deviation of the pixel values in the NDF array.

TOTAL

TOTAL = _DOUBLE (Write)
   The sum of the pixel values in the NDF array.

Examples

stats image
   Computes and displays simple statistics for the data array in
   the NDF called image.
 stats ndf=spectrum variance
   Computes and displays simple statistics for the variance array
   in the NDF called spectrum.
 stats spectrum error
   Computes and displays statistics for the variance array in the
   NDF called spectrum, but takes the square root of the variance
   values before doing so.
 stats halley logfile=stats.dat
   Computes statistics for the data array in the NDF called
   halley, and writes the results to a logfile called stats.dat.
 stats ngc1333 clip=[3.0,2.8,2.5]
   Computes statistics for the data array in the NDF called
   NGC1333, applying three iterations of K-sigma clipping.  The
   statistics are first calculated for all the valid pixels in
   the data array.  Those pixels with values lying more than 3.0
   standard deviations from the mean are then rejected, and the
   statistics are re-computed.  This process is then repeated
   twice more, rejecting pixel values lying more than 2.8 and 2.5
   standard deviations from the mean.  The final statistics are
   displayed.

Related_Applications

   KAPPA: HISTAT, INSPECT, NDFTRACE; Figaro: ISTAT.

Authors

RFWS: R.F. Warren-Smith (STARLINK, RAL)
 MJC: Malcolm J. Currie  STARLINK

History

 19-MAR-1991 (RFWS):
    Complete re-write of earlier routine to use NDF_ routines and
    the extra facilities these provide.
  11-APR-1991 (RFWS):
    Improved the prologue.
  1992 March 3 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

Implementation_Status

   -  This routine correctly processes the AXIS, DATA, VARIANCE,
   QUALITY, TITLE, and HISTORY components of the NDF.
    -  Processing of bad pixels and automatic quality masking are
   supported.
    -  All non-complex numeric data types can be handled.  Arithmetic
   is performed using double-precision floating point.
    -  Any number of NDF dimensions is supported.
.endhelp
