*+  HSTEQP - Histogram equalisation of pens.

      SUBROUTINE HSTEQP( SCAIMG, DIM1, DIM2, RSHADE, MAXV, MINV, NINTS,
     :                   PENS, X, Y, CUMUL, HIST, STATUS )
*
*    Description :
*
*     A histogram of the scaled image is produced, and is used to
*     assign colours to the pens in such a way that the resultant
*     image should contain as near a given distribution of colour as
*     possible. The only available distribution is a linear one. The
*     gradient of the amount of the colour against the colour is defined
*     by the user, and must lie in the range -1 to 1. Assuming for the
*     moment that a grey scale is being used as the colour set, a
*     gradient of 0 should give an even amount of each shade, a gradient
*     of -1 will give a dark image, and a gradient of +1 will give a
*     rather white image.
*
*    Invocation :
*
*     CALL HSTEQP( SCAIMG, DIM1, DIM2, RSHADE, MAXV, MINV, NINTS, PENS,
*    :             X, Y, CUMUL, HIST, STATUS )
*
*    Arguments :
*
*     SCAIMG( DIM1, DIM2 ) = REAL( READ )
*         The array containing the scaled image.
*     DIM1 = INTEGER( READ )
*         The first dimension of the 2-d array.
*     DIM2 = INTEGER( READ )
*         The second dimension of the 2-d array.
*     RSHADE = REAL( READ )
*         Gradient of the amount of colour against colour in the range
*           -1 to 1. In other words the weighting of the histogram
*           equalisation. -1 gives a dark picture, 1 a light picture and
*           a true equalisation, i.e. even amounts of each shade.
*     MAXV = REAL( READ )
*         Maximum value for scaling of image.
*     MINV = REAL( READ )
*         Minimum value for scaling of image.
*     NINTS = INTEGER( READ )
*         The number of greyscale intensities available on
*           the chosen device and number of bins in histogram.
*     PENS( 0:NINTS-1 ) = INTEGER( WRITE )
*         The array in which is returned the colour to be
*           assigned to each pen.
*     X( 0:NINTS-1 ) = DOUBLE( WRITE )
*         Work array for normalised pen numbers in the usable range,
*           range, used for the least-squares fit
*     Y( 0:NINTS-1 ) = DOUBLE( WRITE )
*         Work array for normalised value of the cumulative frequency 
*           chart
*     CUMUL( 0:NINTS-1 ) = INTEGER( WRITE )
*         Work array discrete cumulative frequency chart
*     HIST( 0:NINTS-1 ) = INTEGER( WRITE )
*         Work array for the histogram
*     STATUS = INTEGER( READ, WRITE )
*         Global status parameter.
*
*    Method :
*
*     Check for error on entry - return if not o.k.
*     The histogram of the image between the scaling limits is formed.
*     Let the probability of a particular pen, r, being used be P(r),
*     and the probability of a particular colours being used be Q(s).
*     We require Q(s) = a+bs. Let the function linking the pens with
*     the colours be r=T(s). From probability theory we have that
*     P(r) = Q(s)*ds/dr. Thus P(r)dr = Q(s)ds. However, the integral of
*     P(r)dr is just the cumulative frequency value for a pen, say C(r).
*     Hence we have that C(r) = as+bs*s/2+c. However, when r=0, s=0.
*     Thus c = C( 0 ). If the pens lie in the range 0 to n and the
*     colours in the range 0 to m, then when r = n, s = m and C(n) = 1.
*     Hence 1 = am+bm*m/2+C(0), from which we obtain
*     a = ( 1-C( 0 ) )/m-bm/2. We now have s as a unique function of r :
*      s = -a/b-sqrt( a*a+2b( C(r)-C(0) ) )/b
*     The function C(r) is approximated by fitting a sixth-order
*     polynomial to the discrete cumulative frquency obtained from the
*     histogram. The polynomial is generated by using least squares. The
*     solution of the equations for the coefficients is done using
*     Gaussian elimination with partial pivoting.
*
*     For a much more detailed description of histogram equalisation
*     see 'Digital Image Processing' by R.C.Gonzalez and P.Wintz.
*
*    Authors :
*
*     Based on ADHC written by P.T.Wallace, K.F.Hartley and W.F.Lupton.
*     K.F.Hartley ( RGVAD::KFH )
*     A.P.Horsfield ( RGVAD::KFH )
*     S.Chan ( RGVAD::KFH )
*     Malcolm Currie  STARLINK (RAL::CUR)
*
*    History :
*
*     28 July 1983: Original ( RGVAD::KFH )
*     1986 Sep 18: Completely revamped; renamed from KFH_HIST; 
*                  standardised to RAPI2D style; renamed parameters
*                  section to arguments and added access; made more
*                  general by making the number of bins/colour indices
*                  an argument, and also four associated work arrays;
*                  removed PAR calls - parameters now supplied as 
*                  arguments; removed tabs; relocated 'local' variables
*                  to import etc.; corrected error-handling and tidied
*                  (RAL::CUR).
*     1988 Jun 22: Added identification to error reporting (RAL::CUR).
*     1989 Aug  7: Passed array dimensions as separate variables
*                  (RAL::CUR).
*     1990 Apr  7: Constrained the fit to lie in the defined bounds so
*                  that evaluating the root of the quadratic equation
*                  does not result in an undefined value, and improved
*                  the commentary (RAL::CUR).
*
*    Type Definitions :

      IMPLICIT NONE

*    Global constants :

      INCLUDE 'SAE_PAR'

*    Import :

      INTEGER
     :    DIM1, DIM2,
     :    NINTS

      REAL
     :    SCAIMG( DIM1, DIM2 ),
     :    MAXV,
     :    MINV,
     :    RSHADE

*     Export :

      INTEGER
     :    PENS( 0:NINTS-1 ),
     :    CUMUL( 0:NINTS-1 ),
     :    HIST( 0:NINTS-1 )

      DOUBLE PRECISION
     :    X( 0:NINTS-1 ),
     :    Y( 0:NINTS-1 )

*    Status :

      INTEGER STATUS

*    Local variables :

      DOUBLE PRECISION
     :    A,                    ! Coefficient in the expression relating
                                ! colour to pen number
     :    C0,                   ! Minimum value of the calculated
                                ! cumulative frequency chart
     :    COEFF( 0:7, 0:6 ),    ! Coefficients of the equations to be
                                ! solved for least squares fit
     :    MAXVAL,               ! Maximum value of cofficient. Used for
                                ! partial pivoting
     :    POLCO( 0:6 ),         ! Polynomial coefficients
     :    SHADE,                ! relative amounts of each colour wanted
     :    STEP,                 ! difference in pen value between
                                ! successive pens
     :    SUM( 0:12 ),          ! sums of powers of pen numbers between
                                ! 0 and 12
     :    TEMP,                 ! general variable
     :    XI,                   ! Pen number used for evaluating the
                                ! colour from the polynomial
     :    XJ,                   ! Pen number raised to some(?) power
     :    XMAX,                 ! Pen number at the highest point used
                                ! for fit
     :    XMIN                  ! Pen number at the lowest point used
                                ! for fit

      INTEGER
     :    I, J, K, L,           ! general variables
     :    LOWER,                ! Lowest part of the cumulative
                                ! frequency chart to which the
                                ! polynomial will be fitted.
     :    POS,                  ! Row containing the largest coefficient
     :    UPPER                 ! largest part of the cumulative
                                ! frequency chart to be used for the
                                ! least-squares fit
*-

*    If the status is bad,  then return to the calling program.

      IF ( STATUS .NE. SAI__OK ) GOTO 999

*    Report error and return should the maximum and minimum be the same

      IF ( MAXV .EQ. MINV ) THEN
         CALL ERR_REP( 'ERR_HSTEQP_EQL',
     :     'HSTEQP: Maximum and minimum are equal', STATUS )
         STATUS = SAI__ERROR
         GOTO 999
      END IF

      SHADE = DBLE( RSHADE )

*    Clear histogram array.

      DO I = 0, NINTS-1, 1
         HIST( I ) = 0
      END DO

*    Create histogram.

      CALL GENHIS( DIM1, DIM2, SCAIMG, 1, 1, DIM1, DIM2, NINTS, MAXV,
     :             MINV, HIST, STATUS )

*    Create the cumulative frequency chart.

      CUMUL( 0 ) = HIST( 0 )

      DO  I = 1, NINTS-1, 1
         CUMUL( I ) = CUMUL( I-1 ) + HIST( I )
      END DO

*       Set up data for least-squares fit.

      DO  I = 0, NINTS-1, 1

*          Save the pen numbers.

         X( I ) = DBLE( MINV ) + DBLE( I*( MAXV-MINV ) )/
     :            DBLE( NINTS-1 )

*       Save the normalized cumulative frequency chart.

         Y( I ) = DBLE( CUMUL( I ) )/DBLE( CUMUL( NINTS-1 ) )

      END DO

*    The fit is done between the 2% and 96% points of the
*    cumulative frequency chart.
*
*    Find the 2% point ( approximately )

      LOWER = 0

      DO WHILE ( Y( LOWER ) .LT. 0.02 )
         LOWER = LOWER + 1
      END DO

*       Find the 96% point ( approximately )

      UPPER = NINTS - 1

      DO WHILE ( Y( UPPER ) .GT. 0.96 )
         UPPER = UPPER - 1
      END DO

*    If there are more than 20 points then do the fit.

      IF ( UPPER-LOWER .LT. 20 ) THEN
         CALL MSG_SETI( 'FITPOINTS', UPPER-LOWER )
         CALL ERR_REP( 'ERR_HSTEQP_ISFP',
     :     'HSTEQP: Insufficient points ( ^FITPOINTS ) to do the fit. '/
     :     /'Choose a smaller dynamic range.', STATUS )
         STATUS = SAI__ERROR
         GOTO 999
      END IF

*    For maximum accuracy normalize the pen numbers to the range 0 to 1.

      XMIN = X( LOWER )
      XMAX = X( UPPER )

      DO  I = LOWER, UPPER, 1
         X( I ) = ( X( I ) - XMIN )/( XMAX - XMIN )
      END DO

*    Set to zero the tables into which the sums will be put.

      DO  I = 0, 12, 1
         SUM( I ) = 0.0D0
      END DO

      DO  I = 0, 6, 1
         COEFF( 7, I ) = 0.0D0
      END DO

*    Form the sums of the powers of x ( the pen numbers ).

      DO  I = LOWER, UPPER, 1

         XJ = 1.0D0

         DO  J = 0, 12, 1

            SUM( J ) = SUM( J )+XJ

            IF ( J .LT. 7 ) COEFF( 7, J ) = COEFF( 7, J ) - Y( I ) * XJ

            XJ = XJ*X( I )

         END DO
      END DO

*    Transfer the sums to the coefficients array ready for solving the
*    linear simultaneous equations to obtain the coefficients of the
*    polynomial.

      DO  I = 0, 6, 1
         DO  J = 0, 6, 1
            COEFF( J, I ) = SUM( J + I )
         END DO
      END DO

*    Do Gaussian elimination to calculate the polynomial coefficients.

      I = 0

      DO WHILE ( I .LT. 7 )

*       Find the maximum value in the column.
*

         MAXVAL = ABS( COEFF( I, I ) )
         POS = I

         DO J = I, 6, 1
            IF ( ABS( COEFF( I, J ) ) .GT. MAXVAL ) THEN
               MAXVAL = ABS( COEFF( I, J ) )
               POS = J
            END IF
         END DO

*       If the maximum value is greater than 1E-10 then do the
*       operations on the row, otherwise stop the routine, as the
*       results are going to be very inaccurate.

         IF ( MAXVAL .LT. 1.0D-10 ) THEN
            CALL ERR_REP( 'ERR_HSTEQP_INAF',
     :        'HSTEQP: Inaccurate fit', STATUS )
            STATUS = SAI__ERROR
            GOTO 999
         END IF

*       Swap the present row with that containing the largest value.
 
         IF ( I .NE. POS ) THEN
            DO  J = 0, 7, 1
               TEMP = COEFF( J, I )
               COEFF( J, I ) = COEFF( J, POS )
               COEFF( J, POS ) = TEMP
            END DO
         END IF

*       Eliminate the first I-1 variables.

         IF ( I .NE. 0 ) THEN
            DO  J = 0, I - 1, 1
               DO  K = 7, J, -1
                  COEFF( K, I ) = COEFF( K, I ) - COEFF( K, J ) *
     :                            COEFF( J, I )
               END DO
            END DO
         END IF

*       Divide throuought the Ith row by the Ith element, so that the
*       Ith element becomes one.

         DO J = 7, I, -1
            COEFF( J, I ) = COEFF( J, I ) / COEFF( I, I )
         END DO

*       Point to the next row.

         I = I+1

      END DO

*    Substitute back to obtain the coefficients.

      POLCO( 6 ) = -COEFF( 7, 6 )

      DO  I = 5, 0, -1

         POLCO( I ) = -COEFF( 7, I )

         DO  J = 6, I+1, -1
            POLCO( I ) = POLCO( I ) - COEFF( J, I ) * POLCO( J )
         END DO

      END DO

*    Assign colours to the pens.

      STEP = DBLE( MAXV - MINV )/( ( XMAX - XMIN ) * DBLE( NINTS - 1 ) )

      XI = 0.0D0

*    Calculate the minimum value for the cumulative frequency chart.

      C0 = POLCO( 0 )

*    Even distribution.

      IF ( SHADE .EQ. 0.0 ) THEN

*       Assign colours to the pens in such a way that they are
*       used in equal amounts in the displayed image.

         DO  I = 0, NINTS-1, 1

*          Constrain the fit beyond the 2- and 96-per-cent limits.

            IF ( I .LT. LOWER ) THEN
               TEMP = 0.0D0
            ELSEIF ( I .GT. UPPER ) THEN
               TEMP = 1.0D0 - C0
            ELSE

*             Evaluate the polynomial fit to the normalised cumulative
*             histogram, allowing for the offset.

               TEMP = ( POLCO( 0 ) + XI * ( POLCO( 1 ) + XI *
     :                ( POLCO( 2 ) + XI * ( POLCO( 3 ) + XI *
     :                ( POLCO( 4 ) + XI * ( POLCO( 5 ) + XI *
     :                ( POLCO( 6 ) ) ) ) ) ) ) ) - C0

*             Move to the next data value.

               XI = XI + STEP
            END IF

            PENS( I ) = MIN( MAX( INT( DBLE( NINTS ) * TEMP ), 0 ),
     :                  NINTS - 1 )
         END DO

      ELSE

*       Assign colours to the pens such that the distribution required
*       by the user is obtained.

         A = 1.0D0 - C0 - SHADE / 2.0

         DO  I = 0, NINTS - 1, 1
  
*          Constrain the fit beyond the 2- and 96-per-cent limits.

            IF ( I .LT. LOWER ) THEN
               TEMP = 0.0D0
            ELSEIF ( I .GT. UPPER ) THEN
               TEMP = 1.0D0 - C0
            ELSE

*             Evaluate the polynomial fit to the normalised cumulative
*             histogram, allowing for the offset.

               TEMP = ( POLCO( 0 ) + XI * ( POLCO( 1 ) + XI * 
     :                ( POLCO( 2 ) + XI * ( POLCO( 3 ) + XI * 
     :                ( POLCO( 4 ) + XI * ( POLCO( 5 ) + XI * 
     :                ( POLCO( 6 ) ) ) ) ) ) ) ) - C0

*             Ensure that the fitted value lies in the physical region.

               TEMP = MIN( MAX ( 0.0D0, TEMP ), 1.0D0 - C0 )
 
*             Move to the next data value.

               XI = XI + STEP
            END IF

*          Solve the quadratic equation that arises from integrating
*          the required cumulative histogram form, as given by the
*          linear equation SHADE * PEN + C0 - SHADE/2.

            PENS( I ) = MIN( MAX( INT( REAL( NINTS ) * ( -A/SHADE
     :                  + SQRT( A * A + 2.0D0 * SHADE * TEMP ) /
     :                  SHADE ) ), 0 ), NINTS - 1 )
         END DO

      END IF

 999  CONTINUE

      END
