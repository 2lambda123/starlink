.help colour_table_and_pa Starlink kappa
.nf
An image display has a colour table which converts integer values
in the display's memory into the colours that you see on the monitor.
(Aside: Some people would call the colour table a video lookup
table, but the term lookup table is needed for another purpose.)
There are usually somewhere between 64 and 256 entries or indices
in the colour table that are numbered consecutively increasing from
0.  For example, if there were 256 colour indices then you would be
able display 256 different colours simultaneously;  and when you
display an image your data values would be scaled to map onto the
integer range of the colour indices, 0--255.

In many systems the full colour table is used.  This has the
disadvantage that if you want to annotate images with captions or
axes, plot coloured borders about images, plot graphs etc., yet
simultaneously display images with certain colour tables, there may
be conflict of interests.  For instance, a linear greyscale colour
table's first few colour indices will be almost black.  By default,
these same indices, particularly index 1, are used by GKS/SGS for
line graphics, thus any plots will be invisible.  If you reset
colour index 1 to white, the appearance of your image alters.
Whenever you alter the colour table to enhance the look of your
image, it will affect the line graphics.

To circumvent this dilemma, KAPPA reserves a portion of the colour
table, called the palette, that is unaffected by changes to the rest
of the colour table. It is shown schematically below.  The palette
contains 16 indices.  N is the total number of indices.  In KAPPA
the remainder of colour indices is called the colour table.

  0                              15 16                           N-1
 _____________________________________________________ ... _________
 | | | | | | | | | | | | | | | | | | | | | | | | | | |     | | | | |
 ----------------------------------------------------- ... ---------
 <-----------  Palette  -----------><-------  Colour Table  ------->


Manipulating_Colour_Tables

KAPPA provides a number of commands for adjusting a colour table.
LUTFLIP, LUTHILITE, LUTROT, LUTTWEAK are all IDI-based. Remember
that only the colour table will be flipped; highlighted; rotated;
stretched, or squashed, and/or have its origin moved.  Thus during
flipping, colour index 16 will swap with N-1, 17 with N-2 etc. 
CRELUT uses an enlarged palette to modify a lookup table. 


Lookup_Tables

In order to distinguish between the set of colours in the physical
image display (the colour table) and some external table of colours,
the latter is called a lookup table.  Lookup tables comprise a
series of red, green and blue (RGB) intensities, each normalised to
1.0; they may be stored in NDFs---indeed some are provided with
KAPPA---or be coded within applications.

A lookup table may be transferred into the display's colour table.
However, the number of indices in the colour table is usually not
the same as the number of colours in the lookup table and so a
simple substiution is not possible.  Therefore, KAPPA squeezes or
stretches the lookup table to make it fit in the available number of
colour-table indices.  Normally, linear interpolation between
adjacent lookup-table entries defines the resultant colour, though
you can select a nearest-neighbour algorithm.  The latter is suited
to lookup tables with sharp boundaries between contrasting colours,
e.g. a series of coloured blocks, and the former to smoothly varying
lookup tables where there are no obvious discontinuities, e.g.
spectrum-like.

Let's have a few examples.
 
     % lutheat
     % lutramps
     % lutread pastel
     % lutable li ex sawtooth nn
     % lutsave pirated
 
LUTHEAT loads the standard `heat' lookup table into the colour table
using linear interpolation, whilst LUTRAMPS loads the standard
coloured ramps using the nearest neighbours in the lookup table.
LUTREAD reads the lookup table stored in the DATA_ARRAY of the NDF
called pastel and maps it onto the colour table via linear
interpolation.  In the fourth example the lookup table in NDF
sawtooth is mapped onto the colour table via a linear
nearest-neighbour method.  The "ex" tells LUTABLE to read an
external file.  In the final example LUTSAVE saves the current
colour table into a lookup-table NDF called pirated.  LUTSAVE is
quite useful as you can steal other people's attractive colour
tables that they've carelessly left in the display's memory!  It
does not matter should the display not have a palette, since 
 
     ICL> lutsave pirated full
 
will save the full set of colour indices to the NDF.


Creating_Lookup_Tables



From_a_Text_File

You can make a text file of the RGB intensities and use TRANDAT to
create the NDF, or manipulate the colour table and then save it in a
lookup-table NDF.  If you choose the second option remember that all
RGB intensities must lie in the range 0.0--1.0, where 1.0 is the
maximum intensity; and that equal red, green, and blue intensities
yields a shade of grey. So for example if you want a six equal blocks
of red, blue, yellow, pink, sienna and turquoise you could create the
text file col6.dat with contents
 
     # Red, blue, yellow, pink, sienna, and turquoise LUT
     1.0 0.0 0.0
     0.0 0.0 1.0
     1.0 1.0 0.0
     0.9 0.56 0.56
     0.56 0.42 0.14
     0.68 0.92 0.92
 
and then run TRANDAT to make the NDF called collut6.
 
     % trandat col6 collut6 shape='[3,6]' auto


Running_CRELUT

There is an interactive task called CRELUT for creating lookup tables.
Let's be honest; it's a bit dated compared with what is possible today
with X-windows, but it works, and I still use it.

CRELUT has a number of stages that cannot be expressed via the
examples in the reference manual, so here is a walk through with
commentary.  It would be a good idea to find an image display and
repeat the example yourself.  CRELUT asks for an initial lookup
table.  Since we don't have one we enter !; this results in a
greyscale being loaded in the colour table.  Next we nominate an
image for which we want to tailor the lookup table.  In order to
display it and to compute an histogram we must also provide scaling
limits. The chosen limits encompass most data values.
 
     ICL> crelut 
     INLUT - NDF containing input lookup table /@$KAPPA_DIR/spectrum_lut/ > ! 
     NDF - Image to be displayed /@$KAPPA_DIR/ccdframec/ > 
     LOW - Low value for image scaling /2250/ >
     HIGH - High value for image scaling /30790.990234375/ > 3000
 
The image appears in grey above the histogram of values between 2250
and 3000.  Notice that the histogram shows the appearance of data
values given along the data-value axis, currently just grey
intensities.  Had we entered ! to parameter NDF, a ramp would appear
rather than the histogram. Below the histogram are two rows of 16
enumerated colours and grey levels.  The bottom line is the standard
palette, as would be given by command PALDEF, and an adjustable
upper line. To manipulate the colour table (and hence generate a new
lookup table) we select palette colours and data-value ranges.
First we want to add some colours of our own to the palette. 

We first add a named colour, sienna, to the palette, followed by a
pale yellow given as RGB intensities.  We try Violetred, but don't
like it so the previous grey value is restored.  Orchid is paler
than Violetred and more like what we want.  A null ends the loop.
Note that once you have completed this section you cannot add more
colours to the palette.  The current RGB is given so minor
adjustments can be made.  Also you don't have to add palette colours
in numerical order.
 
     Now you may add to the predefined palette. Numbers 16 to 31, are
     available. 
     Type ! to complete the modifications. 
     PALNUM - Number of the palette entry to be modified /16/ > 
     The current RGB is 0,0,0. 
     COLOUR - New palette colour > sienna 
     OK - Accept this colour (Y/N)? /NO/ > y 
     PALNUM - Number of the palette entry to be modified /17/ > 
     The current RGB is 6.666667E-02,6.666667E-02,6.666667E-02. 
     COLOUR - New palette colour > 1.0,1.0,0.3 
     OK - Accept this colour (Y/N)? /NO/ > y 
     PALNUM - Number of the palette entry to be modified /18/ > 
     The current RGB is 0.1333333,0.1333333,0.1333333. 
     COLOUR - New palette colour > violetred 
     OK - Accept this colour (Y/N)? /NO/ > 
     PALNUM - Number of the palette entry to be modified /18/ > 
     The current RGB is 0.1333333,0.1333333,0.1333333. 
     OUR - New palette colour > orchid 
     OK - Accept this colour (Y/N)? /NO/ > y 
     PALNUM - Number of the palette entry to be modified /19/ > ! 
 
Now we change the colour table.  Notice the appearance of the histogram
alters.  Between 2300 and 2380 the colour smoothly varies from blue to
orchid. (We tried a narrower range but did not like it.)  Next a
block of sienna represents values in the range 2375--2400.  Notice that
the order of the colours matters, c.f. the 2500--2600 range
where 2500 appears pale yellow and 2600 is red.  A null ends the 
manipulation.
 
     Now you may interactively change the lookup table (LUT). You
     give ranges of data values (that map to LUT pens) to be
     assigned colours obtained by interpolation of pairs of numbered
     colours selected from the palette.  Type ! to complete the
     creation of the LUT. 

     VALRANGE - Data-value range to be assigned colours > 2300,2350 
     COLRANGE - Select one or two colours from the palette > 4,18 

     VALRANGE - Data-value range to be assigned colours > 2300,2380 
     COLRANGE - Select one or two colours from the palette > 4,18 
  
     VALRANGE - Data-value range to be assigned colours > 2375,2400 
     COLRANGE - Select one or two colours from the palette > 16 
  
     VALRANGE - Data-value range to be assigned colours > 2900,3000 
     COLRANGE - Select one or two colours from the palette > 6 
  
     VALRANGE - Data-value range to be assigned colours > 2500,2600 
     COLRANGE - Select one or two colours from the palette > 17,2
  
     VALRANGE - Data-value range to be assigned colours > ! 
 
Finally, we save the lookup table in an NDF called YUK, but not the
palette.  The original palette is restored.
 
     Type the null character, !, if the created LUT is not to be saved. 
     OUTLUT - NDF to save the lookup table > YUK 
     OUTPAL - NDF to save the palette /!/ > 
 

Palette

There are four commands for controlling the palette all beginning
PAL. If you inherit the image display after a non-KAPPA user or
after a device reset, you will probably have to reset the palette.
You can do this either by loading the default palette---black,
white, the primary then secondary colours, and eight equidistant
grey levels---with the command PALDEF; or load a palette you've
created yourself via PALREAD.  You modify the palette by changing
individual colours within it using PALENTRY.  The colour
specification can be a named colour (see topic "Colour_Set" for a
list), or RGB intensities.  For example,
 
     % palentry 1 Skyblue
     % palentry 14 [1.0,1.0,0.3]
 
would make palette index 1 sky blue and index 14 a pale yellow.
Once you have a palette you like, save it in an NDF with PALSAVE.
IDSTATE reports the current palette colours by name, picking the
nearest named colour from the standard colour set given in
"Colour_Set".

The palette has limited direct use in KAPPA so far, but it is
expected to grow as more applications support different colouring
of the components of a plot.  One example, is in DISPLAY where you
can have a coloured border for effect (as seen on television news
programmes).  The colour of the border is selected from the palette
or the nearest colour in the palette is used.

Indirectly, the appearance of existing plots may be changed.
Palette entry 0 is the background colour, and entries 1--5
correspond to SGS pens or PGPLOT colour indices of the same number.
By choosing a palette colour equal to the background colour,
features may be `erased'.

Note that X-windows overlays only have one colour, and so do not
have a palette.

.endhelp
