      SUBROUTINE KAPVIEW_MON( STATUS )
*+
*  Name:
*     KAPVIEW_MON

*  Purpose:
*     Top-level KAPVIEW subroutine for A-task monolith on UNIX.

*  Language:
*     Starlink Fortran 77

*  Type of Module:
*     ADAM A-task

*  Invocation:
*     CALL KAPVIEW_MON( STATUS )

*  Arguments:
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Description:
*     This is the top-level A-task monolith subroutine for the KAPVIEW
*     suite of A-tasks.  Each KAPVIEW command is an alias to a softlink
*     that points to this monolith.  The chosen command is obtained
*     from the ADAM routine TASK_GET_NAME.  The command may be specified
*     from the shell or ICL.  Given the command, the requested A-task
*     is called after a successful matching of the input string with a
*     valid task name.  If there is no match, an error report is made.

*  Implementation Deficiencies:
*     The input string has to be forced to upper-case.

*  Copyright:
*     Copyright (C) 1995, 1997, 1999, 2004 Central Laboratory of the
*     Research Councils. Copyright (C) 2005-2006 Particle Physics &
*     Astronomy Research Council.  Copyright (C) 2009 Science &
*     Technology Facilities Council.  All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie  (STARLINK)
*     DSB: David S. Berry (STARLINK)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     1995 August 19 (MJC):
*        Original version.
*     1995 October 30 (MJC):
*        Added PICEMPTY, PICENTIRE, and PICVIS.
*     1997 May 31 (MJC):
*        Added DRAWSIG.  Removed BLINK, IDUNZOOM, IDVISIBLE.  V1.1.
*        Temporarily removed COLUMNAR and HIDE.
*     13-MAY-1999 (DSB):
*        Changed history application name to incorporate the current
*        version of KAPPA.
*     23-AUG-1999 (DSB):
*        V0.14 - Added SCATTER.
*     30-AUG-1999 (DSB):
*        Added multiple invocation of applications using LPG looping.
*     16-MAR-2004 (DSB):
*        Added call to LPG_REPLA.
*     29-SEP-2005 (DSB):
*        Added warnings about unannulled GRP identifiers.
*     2005 November 25 (MJC):
*        Added CLINPLOT.
*     27-JAN-2006 (DSB):
*        Add warnings about locator leaks
*     27-JAN-2006 (TIMJ):
*        Need to exclude GLOBAL from leak check.
*     31-JAN-2006 (TIMJ):
*        Use ERR_MARK/RLSE and annul status if HDS_INFOI fails for any
*        reason.
*     2-NOV-2007 (DSB):
*        Use NDG_BEGPV/ENDPV to provide automatic provenance
*        propagation.
*     2009 July 21 (MJC):
*        Use MSG_FILTER environment variable to set reporting level.
*     27-JUL-2009 (TIMJ):
*        Change API for MSG_IFGETENV
*     29-JUL-2009 (TIMJ):
*        MSG_IFGET now called in fixed part.
*     19-OCT-2009 (DSB):
*        Use NDG_BEGGH/NDG_ENDGH to record contents of group parameters in
*        the history component of output NDFs.
*     19-OCT-2012 (DSB):
*        Use NDF_CANCL to cancel all newly active NDF parameters at the
*        end of the monolith. This avoid such parameters causing warnings
*        aboud dangling HDS locators.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT  NONE             ! no implicit typing allowed

*  Global Constants:
      INCLUDE  'SAE_PAR'         ! SSE global definitions
      INCLUDE  'GRP_PAR'         ! GRP definitions
      INCLUDE  'DAT_PAR'         ! DAT definitions

*  Status:
      INTEGER  STATUS

*  External References:
      LOGICAL LPG_AGAIN          ! Invoke the application again?
      INTEGER CHR_LEN            ! Length of string

*  Local Variables:
      REAL DELAY                 ! Delay between loops in seconds
      LOGICAL DISAB              ! Disable looping?
      CHARACTER*60 FILTER        ! HDS_INFOI filter string
      INTEGER IPOSN              ! Position in string
      INTEGER LSTAT              ! Local status
      INTEGER MSGLEV             ! Message level
      CHARACTER*15 NAME          ! Task name from the command
      INTEGER NGRP0              ! Number of active GRP groups on entry
      INTEGER NGRP1              ! Number of active GRP groups on exit
      INTEGER NLOC0              ! Number of active locators on entry
      INTEGER NLOC1              ! Number of active locators on exit
      LOGICAL REPL               ! Replace input NDFs?
      LOGICAL VERB               ! Run in verbose mode?

*.

*  Check the inherited status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Mark any currently active NDF parameters, so that they will not be
*  cancelled by the call to NDF_CANCL at the end of this rotuine.
      CALL NDF_CANCL( '*', STATUS )

*  Note the current number of active GRP identifiers.
      CALL GRP_INFOI( GRP__NOID, 0, 'NGRP', NGRP0, STATUS )

*  Obtain the command from the environment.  This returns uppercase
*  names.
      CALL TASK_GET_NAME( NAME, STATUS )

*  Need to construct a string to filter out parameter locators
*  from the list of active locators. Need monolith and taskname
*  excluded. Also seem to need HDS_SCRATCH excluded.
      FILTER = '!KAPVIEW_MON,!HDS_SCRATCH,!GLOBAL,!'
      IPOSN = CHR_LEN( FILTER )
      CALL CHR_APPND( NAME, FILTER, IPOSN )

*  Note the current number of active locators (excluding parameter
*  system
      CALL HDS_INFOI( DAT__NOLOC, 'LOCATORS', FILTER,
     :                NLOC0, STATUS )

*  Identify and execute the task.
*  ==============================

*  Make CAT run in quiet mode.
      CALL CAT_TUNES( 'QUIET', 'YES', STATUS )

*  Define the current application name for history.  The package version
*  number gets substituted in here when the KAPPA release source tar
*  file is contructed.
      CALL NDF_HAPPN( NAME // ' (KAPPA @PACKAGE_VERSION@)', STATUS )

*  See if NDF names should be reported when looping.
      CALL KPG1_ENVDF( 'KAPPA_REPORT_NAMES', VERB, STATUS )

*  If not, see if verbose reporting is required.
      IF ( .NOT. VERB ) CALL KPG1_VERB( VERB, 'KAPPA', STATUS )

*  See if looping should be disabled.
      CALL KPG1_ENVDF( 'KAPPA_LOOP_DISABLE', DISAB, STATUS )

*  See if a delay should be included between invocations.
      DELAY = 0.0
      CALL KPG1_ENV0R( 'KAPPA_LOOP_DELAY', DELAY, STATUS )

*  Initialise the common blocks used to control multiple invocation of
*  applications to process lists of NDFs.
      CALL LPG_START( VERB, DELAY, DISAB, STATUS )

*  See if input NDFs are allowed to be overwritten by output NDFs.
      CALL KPG1_ENVDF( 'KAPPA_REPLACE', REPL, STATUS )
      CALL LPG_REPLA( REPL, STATUS )

*  Loop round invoking the task for each set of NDFs specified by the
*  user.
      DO WHILE( LPG_AGAIN( STATUS ) )

*  Begin a provenance block. This causes event handlers to be registered
*  with the NDF library so that a handler routine in NDG is called every
*  time an NDF is opened. This handler routine keeps a record of all
*  NDFs that are opened for input or output, until the block is closed
*  by calling NDG_ENDPV.
         CALL NDG_BEGPV( STATUS )

*  Begin a GRP NDF history block. This causes the contents of GRP groups
*  to be appended to default history text added to any NDFs during the
*  block.
         CALL NDG_BEGGH( STATUS )

*  Check the string against valid A-task names---if matched then call
*  the relevant A-task.

*  Plot the boundary of an ARD description.
         IF ( NAME .EQ. 'ARDPLOT' ) THEN
            CALL ARDPLOT ( STATUS )

*  Draws a grid of line plots for a three-dimensional NDF's values
*  against their axis co-ordinates.
         ELSE IF ( NAME .EQ. 'CLINPLOT' ) THEN
            CALL CLINPLOT ( STATUS )

*  Produces a colour composite image from 1, 2 or 3 NDFs.
         ELSE IF ( NAME .EQ. 'COLCOMP' ) THEN
            CALL COLCOMP ( STATUS )

*  Contours a two-dimensional NDF.
         ELSE IF ( NAME .EQ. 'CONTOUR' ) THEN
            CALL CONTOUR ( STATUS )

*  Reports the co-ordinates of points selected using the
*  cursor and selects the current picture.
         ELSE IF ( NAME .EQ. 'CURSOR' ) THEN
            CALL CURSOR ( STATUS )

*  Displays a two-dimensional NDF.
         ELSE IF ( NAME .EQ. 'DISPLAY' ) THEN
            CALL DISPLAY( STATUS )

*  Draws north/east arrows.
         ELSE IF ( NAME .EQ. 'DRAWNORTH' ) THEN
            CALL DRAWNORTH( STATUS )

*  Draws +/-n standard-deviation lines on a line plot.
         ELSE IF ( NAME .EQ. 'DRAWSIG' ) THEN
            CALL DRAWSIG( STATUS )

*  Creates a radial or azimuthal profile of a two-dimensional image.
         ELSE IF ( NAME .EQ. 'ELPROF' ) THEN
            CALL ELPROF ( STATUS )

*  Clears a graphics device and purges its database entries.
         ELSE IF ( NAME .EQ. 'GDCLEAR' ) THEN
            CALL GDCLEAR( STATUS )

*  Shows which graphics devices are available.
         ELSE IF ( NAME .EQ. 'GDNAMES' ) THEN
            CALL GDNAMES ( STATUS )

*  Selects a current graphics device.
         ELSE IF ( NAME .EQ. 'GDSET' ) THEN
            CALL GDSET ( STATUS )

*  Shows the current status of a graphics device.
         ELSE IF ( NAME .EQ. 'GDSTATE' ) THEN
            CALL GDSTATE( STATUS )

*  Draws a line plot of a one-dimensional NDF's data values against
*  their axis co-ordinates.
         ELSE IF ( NAME .EQ. 'LINPLOT' ) THEN
            CALL LINPLOT ( STATUS )

*  Manipulates an image-display colour table.
         ELSE IF ( NAME .EQ. 'LUTABLE' ) THEN
            CALL LUTABLE ( STATUS )

*  Edit or create a colour table for an image-display device in an NDF.
         ELSE IF ( NAME .EQ. 'LUTEDIT' ) THEN
            CALL LUTEDIT ( STATUS )

*  Saves the current colour table of an image-display device in an NDF.
         ELSE IF ( NAME .EQ. 'LUTSAVE' ) THEN
            CALL LUTSAVE ( STATUS )

*   Draws a colour-table key.
         ELSE IF ( NAME .EQ. 'LUTVIEW' ) THEN
            CALL LUTVIEW ( STATUS )

*  Draws a multi-line plot of a two-dimensional NDF's data values
*  against their axis co-ordinates.
         ELSE IF ( NAME .EQ. 'MLINPLOT' ) THEN
            CALL MLINPLOT ( STATUS )

*  Loads the default palette to a colour table.
         ELSE IF ( NAME .EQ. 'PALDEF' ) THEN
            CALL PALDEF( STATUS )

*  Enters a colour into an image display's palette.
         ELSE IF ( NAME .EQ. 'PALENTRY' ) THEN
            CALL PALENTRY( STATUS )

*  Fills the reserved palette of a colour table from an NDF.
         ELSE IF ( NAME .EQ. 'PALREAD' ) THEN
            CALL PALREAD( STATUS )

*  Saves the current reserved portion of a colour table to an NDF.
         ELSE IF ( NAME .EQ. 'PALSAVE' ) THEN
            CALL PALSAVE( STATUS )

*  Uses a cursor to select the current picture and to report the
*  co-ordinates of points.
         ELSE IF ( NAME .EQ. 'PICCUR' ) THEN
            CALL PICCUR( STATUS )

*  Defines a new graphics-database picture or an array of pictures.
         ELSE IF ( NAME .EQ. 'PICDEF' ) THEN
            CALL PICDEF( STATUS )

*  Finds the first empty FRAME picture in the graphics database.
         ELSE IF ( NAME .EQ. 'PICEMPTY' ) THEN
            CALL PICEMPTY( STATUS )

*  Finds the first unobscured and unoscuring FRAME picture in the
*  graphics database.
         ELSE IF ( NAME .EQ. 'PICENTIRE' ) THEN
            CALL PICENTIRE( STATUS )

*  Finds the attributes of a picture interior to the current picture.
         ELSE IF ( NAME .EQ. 'PICIN' ) THEN
            CALL PICIN( STATUS )

*  Labels the current graphics-database picture.
         ELSE IF ( NAME .EQ. 'PICLABEL' ) THEN
            CALL PICLABEL ( STATUS )

*  Lists the pictures in the graphics database for a device.
         ELSE IF ( NAME .EQ. 'PICLIST' ) THEN
            CALL PICLIST ( STATUS )

*  Selects a graphics-database picture by its label.
         ELSE IF ( NAME .EQ. 'PICSEL' ) THEN
            CALL PICSEL ( STATUS )

*  Transforms co-ordinates between the current and base pictures.
         ELSE IF ( NAME .EQ. 'PICTRANS' ) THEN
            CALL PICTRANS ( STATUS )

*  Finds the first unobscured FRAME picture in the graphics database.
         ELSE IF ( NAME .EQ. 'PICVIS' ) THEN
            CALL PICVIS( STATUS )

*  Produces a scatter plot between two N-dimensional NDFs.
         ELSE IF ( NAME .EQ. 'SCATTER' ) THEN
            CALL SCATTER( STATUS )

*  Plots a two-dimensional vector map.
         ELSE IF ( NAME .EQ. 'VECPLOT' ) THEN
            CALL VECPLOT ( STATUS )

         ELSE

*  No such option exists.
            STATUS = SAI__ERROR
            CALL MSG_SETC( 'CMD', NAME )
            CALL ERR_REP( 'KAPVIEW_MON_NOCOM',
     :     'KAPVIEW: No such option ^CMD.', STATUS )

         END IF

*  End the GRP NDF history block.
         CALL NDG_ENDGH( STATUS )

*  End the provenance block. This will result in every output NDF being
*  given a provenance extension containing a record of the input NDFs
*  that the application accessed in order to create the output NDF. Any
*  output NDF that already contains a provenance extension is left
*  unchanged (so individual application can override this automatic
*  provenance handling by adding a provenance extension to the output
*  NDF itself).
         CALL NDG_ENDPV( 'KAPPA:'//NAME, STATUS )

      END DO

*  Note the current number of active GRP identifiers. Do this in a new
*  error reporting context so that we get the correct value even if an
*  error has occurred.
      CALL ERR_BEGIN( STATUS )
      CALL GRP_INFOI( GRP__NOID, 0, 'NGRP', NGRP1, STATUS )

*  If there are more active groups now than there were on entry, there
*  must be a problem (GRP identifiers are not being freed somewhere). So
*  report it.
      IF ( STATUS .EQ. SAI__OK .AND. NGRP1 .GT. NGRP0 ) THEN
         CALL MSG_BLANK( STATUS )
         CALL MSG_SETC( 'NAME', NAME )
         CALL MSG_SETI( 'NGRP0', NGRP0 )
         CALL MSG_SETI( 'NGRP1', NGRP1 )
         CALL MSG_OUT( 'KAPPA_NGRP', 'WARNING: The number of active '//
     :             'GRP identifiers increased from ^NGRP0 to ^NGRP1 '//
     :             'during execution of ^NAME (KAPPA programming '//
     :             ' error).', STATUS )
         CALL GRP_INFOI( GRP__NOID, 0, 'ACTIVE', NGRP1, STATUS )
         CALL MSG_BLANK( STATUS )
      END IF
      CALL ERR_END( STATUS )

*  The NDF library registers locators with SUBPAR for any NDFs that are
*  opened directly using NDF_ASSOC or NDF_EXIST (most KAPPA routines use
*  LPG_ASSOC instead). These locators are only annulled when the associated
*  parameters are cancelled, but most kappa applications do not explicitly
*  cancel their NDF parameters. This means that such locators are picked
*  up by the following check for dangling HDS locators. In order to
*  prevent this, we cancel any remaining NDF parameters now, excluding
*  any that were marked by the call to NDF_CANCL at the start of this
*  routine.
      CALL NDF_CANCL( ' ', STATUS )

*  Note the current number of active locators. Do this in a new
*  error reporting context so that we get the correct value even if an
*  error has occurred.
      CALL ERR_MARK
      LSTAT = SAI__OK
      CALL HDS_INFOI( DAT__NOLOC, 'LOCATORS', FILTER,
     :     NLOC1, LSTAT )

*  If there are more active locators now than there were on entry, there
*  must be a problem (HDS locators are not being freed somewhere). So
*  report it.
      IF ( LSTAT .EQ. SAI__OK .AND. NLOC1 .GT. NLOC0 ) THEN
         CALL MSG_BLANK( LSTAT )
         CALL MSG_SETC( 'NAME', NAME )
         CALL MSG_SETI( 'NLOC0', NLOC0 )
         CALL MSG_SETI( 'NLOC1', NLOC1 )
         CALL MSG_OUT( 'KAPPA_NLOC', 'WARNING: The number of active '//
     :             'HDS locators increased from ^NLOC0 to ^NLOC1 '//
     :             'during execution of ^NAME (KAPPA programming '//
     :             'error).', LSTAT )
         CALL MSG_BLANK( LSTAT )
      END IF
      IF ( LSTAT .NE. SAI__OK ) CALL ERR_ANNUL( LSTAT )

      CALL ERR_RLSE

*  End and return.

      END

