      SUBROUTINE NDFPACK_MON( STATUS )
*+
*  Name:
*     NDFPACK_MON

*  Purpose:
*     Top-level NDFPACK subroutine for A-task monolith on UNIX.

*  Language:
*     Starlink Fortran 77

*  Type of Module:
*     ADAM A-task

*  Invocation:
*     CALL NDFPACK_MON( STATUS )

*  Arguments:
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Description:
*     This is the top-level A-task monolith subroutine for the NDFPACK
*     suite of A-tasks.  Each NDFPACK command is an alias to a softlink
*     that points to this monolith.  The chosen command is obtained
*     from the ADAM routine TASK_GET_NAME.  The command may be specified
*     from the shell or ICL.  Given the command, the requested A-task
*     is called after a successful matching of the input string with a
*     valid task name.  If there is no match, an error report is made.

*  Implementation Deficiencies:
*     The input string has to be forced to upper-case.

*  Copyright:
*     Copyright (C) 1995, 1997-1999, 2004 Central Laboratory of the
*     Research Councils. Copyright (C) 2005-2006 Particle Physics &
*     Astronomy Research Council.  Copyright (C) 2009 Science &
*     Technology Facilities Council.  All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     MJC: Malcolm J. Currie  (STARLINK)
*     DSB: David S. Berry (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1995 August 19 (MJC):
*        Original version.
*     1997 May 31 (MJC):
*        Added FITSMOD. V1.1.
*     7-OCT-1998 (DSB):
*        Added WCSADD, WCSATTRIB, WCSCOPY, WCSFRAME, WCSSHOW, WCSREMOVE,
*        CHAIN, RESHAPE for V0.13.
*     13-MAY-1999 (DSB):
*        Changed history application name to incorporate the current
*        version of KAPPA.
*     30-AUG-1999 (DSB):
*        Added multiple invocation of applications using LPG looping.
*     16-MAR-2004 (DSB):
*        Added call to LPG_REPLA.
*     2005 April 15 (MJC):
*        Added FITSEXIST, now a separate A-task.
*     29-SEP-2005 (DSB):
*        Added warnings about unannulled GRP identifiers.
*     2005 April 15 (MJC):
*        Added FITSVAL, now a separate A-task.
*     26-JAN-2006 (DSB):
*        Add warnings about locator leaks
*     27-JAN-2006 (TIMJ):
*        Need to exclude GLOBAL from leak check.
*     31-JAN-2006 (TIMJ):
*        Use ERR_MARK/RLSE and annul status if HDS_INFOI fails for any
*        reason.
*     2-NOV-2007 (DSB):
*        Use NDG_BEGPV/ENDPV to provide automatic provenance
*        propagation.
*     24-JAN-2008 (DSB):
*        Added PROVADD.
*     26-FEB-2008 (DSB):
*        Added PROVMOD.
*     29-FEB-2008 (DSB):
*        Added PROVREM.
*     2009 July 21 (MJC):
*        Use MSG_FILTER environment variable to set reporting level.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT  NONE             ! no implicit typing allowed

*  Global Constants:
      INCLUDE  'SAE_PAR'         ! SSE global definitions
      INCLUDE  'GRP_PAR'         ! GRP definitions
      INCLUDE  'DAT_PAR'         ! DAT definitions

*  Status:
      INTEGER  STATUS

*  External References:
      EXTERNAL RESHAPE           ! To distinguish KAPPA RESHAPE from 
                                 ! Fortran intrinsic function of the 
                                 ! same name
      LOGICAL LPG_AGAIN          ! Invoke the application again?
      INTEGER CHR_LEN            ! Length of string

*  Local Variables:
      REAL DELAY                 ! Delay between loops in seconds
      LOGICAL DISAB              ! Disable looping?
      CHARACTER*60 FILTER        ! HDS_INFOI filter string
      INTEGER IPOSN              ! Position in string
      INTEGER LSTAT              ! Local status
      INTEGER MSGLEV             ! Message level
      CHARACTER*15 NAME          ! Task name from the command
      INTEGER NGRP0              ! Number of active GRP groups on entry
      INTEGER NGRP1              ! Number of active GRP groups on exit
      INTEGER NLOC0              ! Number of active locators on entry
      INTEGER NLOC1              ! Number of active locators on exit
      LOGICAL REPL               ! Replace input NDFs?
      LOGICAL VERB               ! Run in verbose mode?

*.

*  Check the inherited status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Note the current number of active GRP identifiers.
      CALL GRP_INFOI( GRP__NOID, 0, 'NGRP', NGRP0, STATUS )

*  Obtain the command from the environment.  This returns uppercase
*  names.
      CALL TASK_GET_NAME( NAME, STATUS )

*  Need to construct a string to filter out parameter locators
*  from the list of active locators. Need monolith and taskname
*  excluded. Also seem to need HDS_SCRATCH excluded.
      FILTER = '!NDFPACK_MON,!HDS_SCRATCH,!GLOBAL,!'
      IPOSN = CHR_LEN( FILTER )
      CALL CHR_APPND( NAME, FILTER, IPOSN )

*  Note the current number of active locators (excluding parameter
*  system
      CALL HDS_INFOI( DAT__NOLOC, 'LOCATORS', FILTER,
     :                NLOC0, STATUS )

*  Set the message-reporting level.
*  ================================
      CALL MSG_IFGETENV( 'MSG_FILTER', STATUS )

*  Identify and execute the task.
*  ==============================

*  Make CAT run in quiet mode.
      CALL CAT_TUNES( 'QUIET', 'YES', STATUS )

*  Define the current application name for history.  The package version
*  number gets substituted in here when the KAPPA release source tar 
*  file is contructed.
      CALL NDF_HAPPN( NAME // ' (KAPPA @PACKAGE_VERSION@)', STATUS )

*  See if NDF names should be reported when looping.
      CALL KPG1_ENVDF( 'KAPPA_REPORT_NAMES', VERB, STATUS )

*  If not, see if verbose reporting is required.
      IF ( .NOT. VERB ) CALL KPG1_VERB( VERB, 'KAPPA', STATUS )      

*  See if looping should be disabled.
      CALL KPG1_ENVDF( 'KAPPA_LOOP_DISABLE', DISAB, STATUS )

*  See if a delay should be included between invocations.
      DELAY = 0.0
      CALL KPG1_ENV0R( 'KAPPA_LOOP_DELAY', DELAY, STATUS )

*  Initialise the common blocks used to control multiple invokation of
*  applications to process lists of NDFs.
      CALL LPG_START( VERB, DELAY, DISAB, STATUS )

*  See if input NDFs are allowed to be overwritten by output NDFs.
      CALL KPG1_ENVDF( 'KAPPA_REPLACE', REPL, STATUS )
      CALL LPG_REPLA( REPL, STATUS )

*  Loop round invoking the task for each set of NDFs specified by the 
*  user.
      DO WHILE( LPG_AGAIN( STATUS ) )

*  Begin a provenance block. This causes event handlers to be registered
*  with the NDF library so that a handler routine in NDG is called every
*  time an NDF is opened. This handler routine keeps a record of all 
*  NDFs that are opened for input or output, until the block is closed 
*  by calling NDG_ENDPV.
         CALL NDG_BEGPV( STATUS )

*  Check the string against valid A-task names---if matched then call
*  the relevant A-task.

*  Expands spaced axes in an NDF into the primitive form.
         IF ( NAME .EQ. 'AXCONV' ) THEN
            CALL AXCONV ( STATUS )

*  Sets a new label value for an axis within an NDF data structure.
         ELSE IF ( NAME .EQ. 'AXLABEL' ) THEN
            CALL AXLABEL ( STATUS )

*  Sets a new units value for an axis within an NDF data structure.
         ELSE IF ( NAME .EQ. 'AXUNITS' ) THEN
            CALL AXUNITS ( STATUS )

*  Concatenates a series of vectorized NDFs.
         ELSE IF ( NAME .EQ. 'CHAIN' ) THEN
            CALL CHAIN ( STATUS )

*  Erases an HDS object.
         ELSE IF ( NAME .EQ. 'ERASE' ) THEN
            CALL ERASE ( STATUS )

*  Reads a FITS disk file composed of simple, group or table files.
         ELSE IF ( NAME .EQ. 'FITSDIN' ) THEN
            CALL FITSDIN ( STATUS )

*  Inquires whether or not a keyword exists in a FITS extension.
         ELSE IF ( NAME .EQ. 'FITSEXIST' ) THEN
            CALL FITSEXIST ( STATUS )

*  Exports NDF-extension information into an NDF FITS extension.
         ELSE IF ( NAME .EQ. 'FITSEXP' ) THEN
            CALL FITSEXP ( STATUS )

*  Imports FITS information into an NDF extension.
         ELSE IF ( NAME .EQ. 'FITSIMP' ) THEN
            CALL FITSIMP ( STATUS )

*  Reads a FITS tape composed of simple, group or table files.
         ELSE IF ( NAME .EQ. 'FITSIN' ) THEN
            CALL FITSIN ( STATUS )

*  Lists the FITS extension of an NDF.
         ELSE IF ( NAME .EQ. 'FITSLIST' ) THEN
            CALL FITSLIST ( STATUS )

*  Edits an NDF FITS extension via a text file or parameters.
         ELSE IF ( NAME .EQ. 'FITSMOD' ) THEN
            CALL FITSMOD ( STATUS )

*  Creates an NDF FITS extension from a text file.
         ELSE IF ( NAME .EQ. 'FITSTEXT' ) THEN
            CALL FITSTEXT ( STATUS )

*  Reports the value of a keyword in a FITS extension.
         ELSE IF ( NAME .EQ. 'FITSVAL' ) THEN
            CALL FITSVAL ( STATUS )

*  Sets the NDF history update mode.
         ELSE IF ( NAME .EQ. 'HISCOM' ) THEN
            CALL HISCOM ( STATUS )

*  Lists NDF history records.
         ELSE IF ( NAME .EQ. 'HISLIST' ) THEN
            CALL HISLIST ( STATUS )

*  Sets the NDF history update mode.
         ELSE IF ( NAME .EQ. 'HISSET' ) THEN
            CALL HISSET ( STATUS )

*  Converts an HDS object to  machine data representation.
         ELSE IF ( NAME .EQ. 'NATIVE' ) THEN
            CALL NATIVE ( STATUS )

*  Copies an NDF (or NDF section) to a new location.
         ELSE IF ( NAME .EQ. 'NDFCOPY' ) THEN
            CALL NDFCOPY ( STATUS )

*  Compresses an NDF 
         ELSE IF ( NAME .EQ. 'NDFCOMPRESS' ) THEN
            CALL NDFCOMPRESS ( STATUS )

*  Displays the attributes of an NDF data structure.
         ELSE IF ( NAME .EQ. 'NDFTRACE' ) THEN
            CALL NDFTRACE ( STATUS )

*  Store provenance
         ELSE IF ( NAME .EQ. 'PROVADD' ) THEN
            CALL PROVADD ( STATUS )

*  Modify provenance
         ELSE IF ( NAME .EQ. 'PROVMOD' ) THEN
            CALL PROVMOD ( STATUS )

*  Remove provenance
         ELSE IF ( NAME .EQ. 'PROVREM' ) THEN
            CALL PROVREM ( STATUS )

*  Display provenance
         ELSE IF ( NAME .EQ. 'PROVSHOW' ) THEN
            CALL PROVSHOW ( STATUS )

*  Set pixels bad which have a given set of qualities.
         ELSE IF ( NAME .EQ. 'QUALTOBAD' ) THEN
            CALL QUALTOBAD ( STATUS )

*  Reshapes an NDF, treating its arrays as vectors.
         ELSE IF ( NAME .EQ. 'RESHAPE' ) THEN
            CALL RESHAPE ( STATUS )

*  Removes named qualities from an NDF.
         ELSE IF ( NAME .EQ. 'REMQUAL' ) THEN
            CALL REMQUAL( STATUS )

*  Sets values for an axis array component within an NDF data
*  structure.
         ELSE IF ( NAME .EQ. 'SETAXIS' ) THEN
            CALL SETAXIS ( STATUS )

*  Sets new bad-pixel flag values for an NDF.
         ELSE IF ( NAME .EQ. 'SETBAD' ) THEN
            CALL SETBAD ( STATUS )

*  Sets a new value for the quality bad-bits mask of an NDF.
         ELSE IF ( NAME .EQ. 'SETBB' ) THEN
            CALL SETBB ( STATUS )

*  Sets new bounds for an NDF.
         ELSE IF ( NAME .EQ. 'SETBOUND' ) THEN
            CALL SETBOUND ( STATUS )

*  Manipulates the contents of a specified NDF extension.
         ELSE IF ( NAME .EQ. 'SETEXT' ) THEN
            CALL SETEXT ( STATUS )

*  Sets a new value for the label component of an NDF data structure.
         ELSE IF ( NAME .EQ. 'SETLABEL' ) THEN
            CALL SETLABEL ( STATUS )

*  Sets a new value for one or all of an NDF's axis-normalisation
*  flags.
         ELSE IF ( NAME .EQ. 'SETNORM' ) THEN
            CALL SETNORM ( STATUS )

*  Sets a new pixel origin for an NDF.
         ELSE IF ( NAME .EQ. 'SETORIGIN' ) THEN
            CALL SETORIGIN ( STATUS )

*  Add WCS info.
         ELSE IF ( NAME .EQ. 'SETSKY' ) THEN
            CALL SETSKY ( STATUS )

*  Add quality names
         ELSE IF ( NAME .EQ. 'SETQUAL' ) THEN
            CALL SETQUAL ( STATUS )

*  Display quality names
         ELSE IF ( NAME .EQ. 'SHOWQUAL' ) THEN
            CALL SHOWQUAL ( STATUS )

*  Sets a new value for the title component of an NDF data structure.
         ELSE IF ( NAME .EQ. 'SETTITLE' ) THEN
            CALL SETTITLE ( STATUS )

*  Sets a new numeric type for the data and variance components of an
*  NDF.
         ELSE IF ( NAME .EQ. 'SETTYPE' ) THEN
            CALL SETTYPE ( STATUS )

*  Sets a new value for the units component of an NDF data structure.
         ELSE IF ( NAME .EQ. 'SETUNITS' ) THEN
            CALL SETUNITS ( STATUS )

*  Sets new values for the variance component of an NDF data structure.
         ELSE IF ( NAME .EQ. 'SETVAR' ) THEN
            CALL SETVAR ( STATUS )

*  Add a Frame into the WCS component of an NDF.
         ELSE IF ( NAME .EQ. 'WCSADD' ) THEN
            CALL WCSADD ( STATUS )

*  Manage the attributes of the WCS component of an NDF.
         ELSE IF ( NAME .EQ. 'WCSATTRIB' ) THEN
            CALL WCSATTRIB ( STATUS )

*  Copy the WCS component from one NDF to another.
         ELSE IF ( NAME .EQ. 'WCSCOPY' ) THEN
            CALL WCSCOPY ( STATUS )

*  Chaneg the current co-ordinate Frame in the WCS component of an NDF.
         ELSE IF ( NAME .EQ. 'WCSFRAME' ) THEN
            CALL WCSFRAME ( STATUS )

*  Remove Frames from the WCS component of an NDF.
         ELSE IF ( NAME .EQ. 'WCSREMOVE' ) THEN
            CALL WCSREMOVE ( STATUS )

*  Display a WCS structure as an AST dump.
         ELSE IF ( NAME .EQ. 'WCSSHOW' ) THEN
            CALL WCSSHOW ( STATUS )

         ELSE

*  No such option exists.
            STATUS = SAI__ERROR
            CALL MSG_SETC( 'CMD', NAME )
            CALL ERR_REP( 'NDFPACK_MON_NOCOM',
     :     'NDFPACK: No such option ^CMD.', STATUS )

         END IF

*  End the provenance block. This will result in every output NDF being
*  given a provenance extension containing a record of the input NDFs
*  that the application accessed in order to create the output NDF. Any
*  output NDF that already contains a provenance extension is left
*  unchanged (so individual application can override this automatic
*  provenance handling by adding a provenance extension to the output
*  NDF itself).
         CALL NDG_ENDPV( 'KAPPA:'//NAME, STATUS )

      END DO

*  Note the current number of active GRP identifiers. Do this in a new
*  error reporting context so that we get the correct value even if an
*  error has occurred.
      CALL ERR_BEGIN( STATUS )
      CALL GRP_INFOI( GRP__NOID, 0, 'NGRP', NGRP1, STATUS )

*  If there are more active groups now than there were on entry, there
*  must be a problem (GRP identifiers are not being freed somewhere). So
*  report it.
      IF ( STATUS .EQ. SAI__OK .AND. NGRP1 .GT. NGRP0 ) THEN
         CALL MSG_BLANK( STATUS )
         CALL MSG_SETC( 'NAME', NAME )
         CALL MSG_SETI( 'NGRP0', NGRP0 )
         CALL MSG_SETI( 'NGRP1', NGRP1 )
         CALL MSG_OUT( 'KAPPA_NGRP', 'WARNING: The number of active '//
     :             'GRP identifiers increased from ^NGRP0 to ^NGRP1 '//
     :             'during execution of ^NAME (KAPPA programming '//
     :             ' error).', STATUS )
         CALL MSG_BLANK( STATUS )
      END IF
      CALL ERR_END( STATUS )

*  Note the current number of active locators. Do this in a new
*  error reporting context so that we get the correct value even if an
*  error has occurred.
      CALL ERR_MARK
      LSTAT = SAI__OK
      CALL HDS_INFOI( DAT__NOLOC, 'LOCATORS', FILTER,
     :     NLOC1, LSTAT )

*  If there are more active locators now than there were on entry, there
*  must be a problem (HDS locators are not being freed somewhere). So
*  report it.
      IF ( LSTAT .EQ. SAI__OK .AND. NLOC1 .GT. NLOC0 ) THEN
         CALL MSG_BLANK( LSTAT )
         CALL MSG_SETC( 'NAME', NAME )
         CALL MSG_SETI( 'NLOC0', NLOC0 )
         CALL MSG_SETI( 'NLOC1', NLOC1 )
         CALL MSG_OUT( 'KAPPA_NLOC', 'WARNING: The number of active '//
     :             'HDS locators increased from ^NLOC0 to ^NLOC1 '//
     :             'during execution of ^NAME (KAPPA programming '//
     :             'error).', LSTAT )
         CALL MSG_BLANK( LSTAT )
      END IF
      IF ( LSTAT .NE. SAI__OK ) CALL ERR_ANNUL( LSTAT )

      CALL ERR_RLSE

*  End and return.

      END
