      SUBROUTINE KPS1_CPB<T>( NEL, INVERT, VAR, DATREF, DATOUT, 
     :                        VAROUT, NBAD, STATUS )
*+
*  Name:
*     KPS1_CPB<T>

*  Purpose:
*     Copies bad pixels from DATREF to DATOUT

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_CPB<T>( NEL, INVERT, VAR, DATREF, DATOUT, VAROUT, NBAD, 
*                       STATUS )

*  Description:
*     This routine is called by copybad, and is passed two arrays, DATOUT 
*     and DATREF, which contain the data values of two NDF files. If any 
*     element in DATREF is equal to VAL__BAD<T> (or, if INVERT is .TRUE., 
*     is not equal to VAL__BAD<T>), and the corresponding element in DATOUT 
*     is not equal to VAL__BAD<T>, then the corresponding element in DATOUT 
*     is set to VAL__BAD<T>. If a variance array is present in NDF OUT,
*     then the corresponding variance element is also set to VAL__BAD<T>.

*  Arguments:
*     NEL = INTEGER (Given)
*         Number of elements in either of the arrays.
*     INVERT = LOGICAL (Given)
*         Should the good/bad status of each pixelin DATREF be inverted?
*     VAR = LOGICAL (Given)
*         Is a variance array present in NDF OUT ?
*     DATREF( NEL ) = <TYPE> (Given)
*         Array containing the data values of NDF REF.
*     DATOUT( NEL ) = <TYPE> (Given and Returned)
*         Array containing the data values of NDF OUT.
*     VAROUT( NEL ) = <TYPE> (Given and Returned)
*         Array containing the variance values of NDF OUT.
*     NBAD = Integer (Returned)
*         Number of bad pixels copied to the output NDF.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Copyright:
*     Copyright (C) 1998 Central Laboratory of the Research Councils.
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2014 Science and Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     TDCA: Tim D.C. Ash (STARLINK)
*     DSB: David S. Berry (STARLINK)
*     MJC: Malcolm J. Currie (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     9-OCT-1998 (TDCA):
*        Original version.
*     13-OCT-1998 (DSB):
*        - Routine name changed so that different data types can have the
*          same "root" name without exceeding 5 characters ("kps1_cpb").
*        - Re-order the arguments into the standard order ( "Given", then
*          "Given and Returned", then "Returned").
*        - Declare the arrays with an explicit dimension.
*        - Argument names changed to indicate their purpose more clearly.
*        - Insert standard "start of code" comment ("*.") after all the 
*          declarations etc.
*        - Include comments and standard white space in the code.
*        - Remove check which prevented pixels which were already bad in
*          the input NDF being included in the count of bad pixels.
*        - Include the required check on the inherited status value.
*     27-ARP-2006 (DSB):
*        Made generic and added INVERT argument.
*     2014 May 1 (MJC):
*        Documented actual meaning of NBAD argument.
*     {enter_further_changes_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE               ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'           ! Standard SAE constants
      INCLUDE 'PRM_PAR'

*  Arguments Given:
      INTEGER NEL                 ! No of elements
      LOGICAL INVERT              ! Variance array present in OUT ?
      LOGICAL VAR                 ! Variance array present in OUT ?
      <LTYPE> DATREF( NEL )       ! Pixel values from REF

*  Arguments Given and Returned:
      <LTYPE> DATOUT( NEL )       ! Pixel values from OUT
      <LTYPE> VAROUT( NEL )       ! Variance values from OUT

*  Arguments Returned:
      INTEGER NBAD                ! Number of bad pixels copied

*  Status:
      INTEGER STATUS              ! Global status

*  Internal Variables:
      INTEGER COUNT               ! Loop counter  

*.

*  Initialise the number of bad values copied.
      NBAD = 0

*  Check inherited status.
      IF( STATUS .NE. SAI__OK ) RETURN

*  First do normal (not inverted) case.
      IF( .NOT. INVERT ) THEN

*  Loop round each element of the arrays.
         DO COUNT = 1, NEL

*  If the reference NDF has a bad data value, ensure that the output DATA
*  and VARIANCE arrays are both bad.
            IF( DATREF( COUNT ) .EQ. VAL__BAD<T> ) THEN
 
               DATOUT( COUNT ) = VAL__BAD<T>
               IF( VAR ) VAROUT( COUNT ) = VAL__BAD<T>

            END IF

*  Increment the number of bad pixels in the output NDF.
            IF( DATOUT( COUNT ) .EQ. VAL__BAD<T> ) NBAD = NBAD + 1

         END DO

*  Now do inverted case.
      ELSE

*  Loop round each element of the arrays.
         DO COUNT = 1, NEL

*  If the reference NDF has a bad data value, ensure that the output DATA
*  and VARIANCE arrays are both bad.
            IF( DATREF( COUNT ) .NE. VAL__BAD<T> ) THEN
 
               DATOUT( COUNT ) = VAL__BAD<T>
               IF( VAR ) VAROUT( COUNT ) = VAL__BAD<T>

            END IF

*  Increment the number of bad pixels in the output NDF.
            IF( DATOUT( COUNT ) .EQ. VAL__BAD<T> ) NBAD = NBAD + 1

         END DO

      END IF

      END 
