      SUBROUTINE KPS1_XYZW<T>( DIM1, DIM2, ARRAY, XAXIS, YAXIS, BAD,
     :                         VARWTS, VAR, SIZE, X, Y, Z, W, NGOOD,
     :                         XMIN, XMAX, YMIN, YMAX, STATUS )
*+
*  Name:
*     KPS1_XYZWx

*  Purpose:
*     Converts a two-dimensional array into a list of x-y co-ordinates,
*     values and weights.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_XYZWx( DIM1, DIM2, ARRAY, XAXIS, YAXIS, BAD, VARWTS,
*                      VAR, SIZE, X, Y, Z, W, NGOOD, XMIN, XMAX, YMIN,
*                      YMAX, STATUS )

*  Description:
*     This routine converts a two-dimensional array into a list of x-y
*     co-ordinates, data values and weights for each of the good pixels
*     in the array.  The x-y co-ordinates come from the axis arrays
*     supplied.  If variance weighting is selected (VARWTS is .TRUE.), 
*     weights are calculated from the reciprocal of the variance for
*     each pixel, otherwise the weights are returned set to 1.0.
*
*     If BAD is .TRUE., the returned lists exclude bad pixels, and any
*     pixels with bad variance when variance weighting is selected.

*     This is a variant of the KAPLIBS routine KPG1_XYZW in which the
*     X, Y, Z, and W arrays take the same type as the input data array.

*  Arguments:
*     DIM1 = INTEGER (Given)
*        The first dimension of the two-dimensional array.
*     DIM2 = INTEGER (Given)
*        The second dimension of the two-dimensional array.
*     ARRAY( DIM1, DIM2 ) = ? (Given)
*        The input data array.
*     XAXIS( DIM1 ) = DOUBLE PRECISION (Given)
*        X axis co-ordinates for the input data array.
*     YAXIS( DIM2 ) = DOUBLE PRECISION (Given)
*        Y axis co-ordinates for the input data array.
*     BAD = LOGICAL (Given)
*        Flag indicating whether bad values or variances may be present.
*     VARWTS = LOGICAL (Given)
*        Flag indicating if the variance array contains valid data.
*     VAR( DIM1, DIM2 ) = ? (Given)
*        An optional array containing the variance of the values
*        in the input data array, used to generate a weight for each
*        element.  It is only used if VARWTS is .TRUE..
*     SIZE = INTEGER (Given)
*        The total number of pixels.
*     X( SIZE ) = ? (Returned)
*        The mean x positions for each pixel
*     Y( SIZE ) = ? (Returned)
*        The mean y positions for each pixel.
*     Z( SIZE ) = ? (Returned)
*        The data value for each pixel.
*     W( SIZE ) = ? (Returned)
*        The weight for each pixel.
*     NGOOD = INTEGER (Returned)
*        The number of good pixels, having both a good value and
*        weight.
*     XMIN = DOUBLE PRECISION (Returned)
*        Minimum x co-ordinate.
*     XMAX = DOUBLE PRECISION (Returned)
*        Maximum x co-ordinate.
*     YMIN = DOUBLE PRECISION (Returned)
*        Minimum y co-ordinate.
*     YMAX = DOUBLE PRECISION (Returned)
*        Maximum y co-ordinate.
*     STATUS = INTEGER (Given and Returned)
*        Global status value.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate.  The
*     ARRAY, VAR, X, Y, W, Z arrays supplied to the routine must have 
*     the data type specified.
*     -  Uses the magic-value method for bad or undefined pixels.

*  Copyright:
*     Copyright (C) 1993 Science & Engineering Research Council.
*     Copyright (C) 1995 Central Laboratory of the Research Councils.
*     Copyright (C) 2007, 2010 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This programme is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*     
*     This programme is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE.  See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this programme; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     SMB: Steven M Beard (ROE)
*     MJC: Malcolm J. Currie (STARLINK)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     21-Apr-1993: (SMB)
*        Original version.
*     1995 August 2 (MJC):
*        Converted to generic.  Used a modern-style prologue and coding.
*        Used double-precision axis co-ordinates.
*     2007 July 5 (MJC):
*        Made X, Y, Z, and W arrays the same generic type as the input
*        array, renaming from KPG1_XYWZ.
*     2010 April 26 (TIMJ):
*        Do not let through data with bad variances (rather than setting
*        the weight to 0).
*     2010 April 27 (MJC):
*        Exclude pixels with bad variance from the fit.
*     {enter_further_changes_here}

*  Bugs:
*     {note_new_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'            ! SSE global definitions
      INCLUDE 'PRM_PAR'            ! Magic-value definitions

*  Arguments Given:
      INTEGER DIM1
      INTEGER DIM2
      <TYPE> ARRAY( DIM1, DIM2 )
      DOUBLE PRECISION XAXIS( DIM1 )
      DOUBLE PRECISION YAXIS( DIM2 )
      LOGICAL BAD
      LOGICAL VARWTS
      <TYPE> VAR( DIM1, DIM2 )
      INTEGER SIZE

*  Arguments Returned:
      <TYPE> X( SIZE )
      <TYPE> Y( SIZE )
      <TYPE> Z( SIZE )
      <TYPE> W( SIZE )
      INTEGER NGOOD
      DOUBLE PRECISION XMIN
      DOUBLE PRECISION XMAX
      DOUBLE PRECISION YMIN
      DOUBLE PRECISION YMAX

*  Status:
      INTEGER STATUS               ! Global status

*  Local Constants:
      DOUBLE PRECISION WTOLER      ! Tolerance to prevent extremely large
      PARAMETER ( WTOLER = 1.0D-7 ) ! weights: maximum weight 10 million

*  Local Variables:
      INTEGER I                    ! Loop counter
      INTEGER IX                   ! Loop counter
      INTEGER IY                   ! Loop counter
      <LTYPE> TOLER                ! Tolerance
      <LTYPE> WMAX                 ! Maximum weight found

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'        ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'        ! NUM definitions for conversions

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Find the tolerance for the data type for optimisation.
      IF ( '<T>' .EQ. 'R' ) THEN
         TOLER = NUM_DTOR( WTOLER )
      ELSE
         TOLER = WTOLER
      END IF

*  Bad values may be present.
*  ==========================

*  Check whether there are likely to be bad values present.  If there
*  are none, used the faster algorithm without any checks.
      IF ( BAD ) THEN

*  Bad pixels present---rigorous algorithm.

*  Initialise the number of good pixels and the maximum weight, and
*  scan through each pixel in the array in turn.
         NGOOD = 0
         WMAX = 0<CONST>

         DO IY = 1, DIM2
            DO IX = 1, DIM1

*  Ensure this is a good pixel. Bad ones are ignored.
               IF ( ARRAY( IX, IY ) .NE. VAL__BAD<T> ) THEN

*  Increment the number of good pixels and load up the x, y, and z
*  arrays.  (Note that the input axis arrays are double precision but 
*  the output arrays are <COMM> so a conversion is needed).
                  NGOOD = NGOOD + 1
                  X( NGOOD ) = NUM_DTO<T>( XAXIS( IX ) )
                  Y( NGOOD ) = NUM_DTO<T>( YAXIS( IY ) )
                  Z( NGOOD ) = ARRAY( IX, IY )

*  If there is a valid variance array then use this to determine a
*  weight for this pixel.
                  IF ( VARWTS ) THEN

*  Check the variance is not bad.
                     IF ( VAR( IX, IY ) .NE. VAL__BAD<T> ) THEN

*  Set the weight to the reciprocal of the variance.  Use a tolerance
*  to prevent a divide by zero and prevent extremely large weights.
                        W( NGOOD ) = 1<CONST> / MAX( TOLER,
     :                               VAR( IX, IY ) )
                     ELSE

*  The variance is bad.  Ignore this pixel from the fit because its
*  weight is indeterminate.
                        NGOOD = NGOOD - 1
                     END IF

*  Keep track of the maximum weight so far.
                     WMAX = MAX( WMAX, W( NGOOD ) )
                  ELSE

*  There is no variance.  Set all weights to 1.0.
                     W( NGOOD ) = 1<CONST>
                  END IF
               END IF
            END DO
         END DO

*  If variances have been used, and the maximum weight is greater than
*  the tolerance (to avoid a divide by zero), normalise all the weights
*  to the range 0.0--1.0.
         IF ( VARWTS .AND. ( WMAX .GT. TOLER ) ) THEN
            DO I = 1, NGOOD
               W( I ) = W( I ) / WMAX
            END DO
         END IF
      ELSE

*  No bad pixels present---fast algorithm.
*  =======================================

*  Initialise the number of good pixels and the maximum weight, and
*  scan through each pixel in the array in turn.
         NGOOD = 0
         WMAX = 0<CONST>

         DO IY = 1, DIM2
            DO IX = 1, DIM1

*  Increment the number of good pixels and load up the x, y, and z
*  arrays.  (Note that the input axis arrays are double precision but 
*  the output arrays are <COMM> so a conversion is needed).
               NGOOD = NGOOD + 1
               X( NGOOD ) = NUM_DTO<T>( XAXIS( IX ) )
               Y( NGOOD ) = NUM_DTO<T>( YAXIS( IY ) )
               Z( NGOOD ) = ARRAY( IX, IY )

*  If there is a valid variance array then use this to determine a
*  weight for this pixel.
               IF ( VARWTS ) THEN

*  Set the weight to the reciprocal of the variance.  Use a tolerance
*  to prevent a divide by zero and prevent extremely large weights.
                  W( NGOOD ) = 1<CONST> / MAX( TOLER, VAR( IX, IY ) )

*  Keep track of the maximum weight so far.
                  WMAX = MAX( WMAX, W( NGOOD ) )
               ELSE

*  There is no variance. Set all weights to 1.0.
                  W( NGOOD ) = 1<CONST>
               END IF
            END DO
         END DO

*  If variances have been used, and the maximum weight is greater than
*  the tolerance (to avoid a divide by zero), normalise all the weights
*  to the range 0.0--1.0.
         IF ( VARWTS .AND. ( WMAX .GT. WTOLER ) ) THEN
            DO I = 1, NGOOD
               W( I ) = W( I ) / WMAX
            END DO
         END IF
      END IF

*  Assume the upper and lower boundaries of the x and y co-ordinates
*  are the same as the extremes of the axis values.  This is not
*  perfect, an entire row or column at the edge could have been made of
*  bad pixels, but it saves searching through the entire data set
*  again.  Note that the following allows for axes running in either
*  direction.
      XMIN = MIN( XAXIS( 1 ), XAXIS( DIM1 ) )
      XMAX = MAX( XAXIS( 1 ), XAXIS( DIM1 ) )
      YMIN = MIN( YAXIS( 1 ), YAXIS( DIM2 ) )
      YMAX = MAX( YAXIS( 1 ), YAXIS( DIM2 ) )
 
      END
