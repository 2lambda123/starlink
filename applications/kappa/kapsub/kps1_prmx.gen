      SUBROUTINE KPS1_PRMX<T>( NDIM, DIM, DIMO, PERM, IN, OUT, STATUS )
*+
*  Name:
*     KPS1_PRMX<T>

*  Purpose:
*     Copies an array, permuting the axes.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_PRMX<T>( NDIM, DIM, DIMO, PERM, IN, OUT, STATUS )

*  Description:
*     This routine copies an n-dimensional array, permuting its axes in
*     the process.

*  Arguments:
*     NDIM = INTEGER (Given)
*        Number of array dimensions.  This must be no greater than
*        NDF__MXDIM.
*     DIM( NDIM ) = INTEGER (Given)
*        Input array dimensions.
*     DIMO( NDIM ) = INTEGER (Given)
*        Output array dimensions.
*     PERM( NDIM ) = INTEGER (Given)
*        The first element is the index of the pixel axis within the 
*        input that is to become axis 1 in the output.  The second 
*        element is the index of the pixel axis within the input that is
*        to become axis 2 in the output, etc.  Axes are numbered from 1.
*     IN( * ) = <TYPE> (Given)
*        The input array.
*     OUT( * ) = <TYPE> (Given)
*        The output array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Copyright:
*     Copyright (C) 2001 Central Laboratory of the Research Councils.
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2007 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     DSB: David S. Berry (DSB)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     6-FEB-2001 (DSB):
*        Original version.
*     2006 April 12 (MJC):
*        Remove unused variable and wrapped long lines.
*     2007 October 4 (MJC):
*        Protect against exceeding various array bounds for
*        NDF__MXDIM-dimensional data.
*     {enter_further_changes_here}

*-
 
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing
 
*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'NDF_PAR'          ! NDF__ constants
 
*  Arguments Given:
      INTEGER NDIM
      INTEGER DIM( NDIM )
      INTEGER DIMO( NDIM )
      INTEGER PERM( NDIM )
      <TYPE> IN( * )
 
*  Arguments Returned:
      <TYPE> OUT( * )
 
*  Status:
      INTEGER STATUS             ! Global status
 
*  Local Variables:
      INTEGER EL                 ! No. of pixels in array
      INTEGER I                  ! Axis index
      INTEGER IOUT( NDF__MXDIM + 1 ) ! Output pixel indices
      INTEGER J                  ! Index of output pixel
      INTEGER K                  ! Index of input pixel
      INTEGER LDIM( NDF__MXDIM + 1 ) ! Copy of o/p dimensions plus dummy
      INTEGER STEPI( NDF__MXDIM ) ! Input steps indexed by input axis
      INTEGER STEP( NDF__MXDIM + 1 ) ! Input steps indexed by output
                                 ! axis

*.
 
*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Find the vector steps within the input array for unit increment along
*  each input axis, find the total number of pixels in the array, and 
*  initialise the indices of the current output pixel.
      EL = 1
      DO I = 1, NDIM
         STEPI( I ) = EL
         EL = EL * DIM( I )
         IOUT( I ) = 1
         LDIM( I ) = DIMO( I )
      END DO
      IOUT( NDIM + 1 ) = 1
      LDIM( NDIM + 1 ) = 1

*  Permute the step array so that it is indexed by output axis instead 
*  of input axis.
      DO I = 1, NDIM
         STEP( I ) = STEPI( PERM( I ) )
      END DO
      STEP( NDIM + 1 ) = EL

*  Initialise the vector index within the input array of the current 
*  output pixel.
      K = 1

*  Do each output value.
      DO J = 1, EL

*  Copy the data value.
         OUT( J ) = IN( K )

*  Increment the indices of the current output pixel, and update the
*  vector index of the corresponding input pixel.
         I = 1
         IOUT( 1 ) = IOUT( 1 ) + 1
         K = K + STEP( 1 )
         DO WHILE( IOUT( I ) .GT. LDIM( I ) .AND. J .LT. EL )
            IOUT( I ) = 1
            K = K - DIMO( I ) * STEP( I )
            I = I + 1
            IOUT( I ) = IOUT( I ) + 1
            K = K + STEP( I )
         END DO

      END DO

      END
