      SUBROUTINE KPS1_ARDM<T>( BAD, CONST, INSIDE, EL, MASK, ARRAY, 
     :                         STATUS )
 
*+
*  Name:
*     KPS1_ARDM<T>

*  Purpose:
*     Sets to bad all elements of an array that have a positive mask
*     value.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_ARDM<T>( BAD, CONST, INSIDE, EL, MASK, ARRAY, STATUS )

*  Description:
*     This routine uses an integer mask (probably from ARD) to flag
*     elements of an array.  Whenever a positive mask value is found
*     the associated pixel in the output image is set to VAL__BADR.

*  Arguments:
*     BAD = LOGICAL (Given)
*        If .TRUE. assign bad values to the output pixels. Otherwise
*        assign the CONST value.
*     CONST = DOUBLE PRECISION (Given)
*        The constant value to assign to the output pixels. Only used if
*        BAD is .FALSE.
*     INSIDE = LOGICAL (Given)
*        If .TRUE. assign the values to the inside of the region (i.e.
*        the positive mask values). Otheriwse, assign thr value to the
*        outside of the region (zero mask values).
*     EL = INTEGER (Given)
*        The dimension of the input and output arrays.
*     MASK( EL ) = INTEGER (Given)
*        The mask array.  Positive values willgenerate bad values in the
*        array.
*     ARRAY( EL ) = <TYPE> (Given & Returned)
*        The array to be masked.
*     STATUS  =  INTEGER (Given and Returned)
*        Global status value.

*  Copyright:
*     Copyright (C) 1995, 2001 Central Laboratory of the Research
*     Councils. All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     DSB: David Berry (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1995 June 30 (MJC):
*        Original version.
*     30-NOV-2001 (DSB):
*        Reconstructed the generic source and added arguments BAD, CONST
*        and INSIDE.
*     {enter_further_changes_here}

*-
 
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing
 
*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE parameters
      INCLUDE 'PRM_PAR'          ! VAL_ constants
 
*  Status:
      INTEGER STATUS             ! Global status value
 
*  Arguments Given:
      LOGICAL BAD
      DOUBLE PRECISION CONST
      LOGICAL INSIDE
      INTEGER EL
      INTEGER MASK( EL )
 
*  Arguments Given and Returned:
      <TYPE> ARRAY( EL )
 
*  Local Variables:
       <TYPE> C                  ! Constant value
       INTEGER I                 ! Loop counter
 
*  Internal References:
      INCLUDE 'NUM_DEC_CVT'    ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'    ! NUM definitions for conversions
*.
 
*  Check the global inhertied status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Store the constant to use.
      IF( BAD ) THEN
         C = VAL__BAD<T>
      ELSE
         C = NUM_DTO<T>( CONST )
      END IF 

*  Deal with cases where the inside of the region is to be replaced.
      IF( INSIDE ) THEN 

*  Loop for each array element.  Replace the element with the bad value
*  whenever the corresponding mask value is positive.
         DO I = 1, EL
            IF ( MASK( I ) .GT. 0 ) ARRAY( I ) = C
         END DO

*  Now deal with cases where the outside of the region is to be replaced.
      ELSE

*  Loop for each array element.  Replace the element with the bad value
*  whenever the corresponding mask value is zero.
         DO I = 1, EL
            IF ( MASK( I ) .EQ. 0 ) ARRAY( I ) = C
         END DO

      END IF

      END
