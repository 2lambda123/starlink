      SUBROUTINE KPS1_MFTS<T>( AXIS, SUBTRA, DIMS, MXKNOT, NCOEF, KNOT,
     :                         COEFF, SCALE, DATS, STATUS )
*+
*  Name:
*     KPG1_MFTSx

*  Purpose:
*     Evaluates and optionally subtract B-spline line fits.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_MFTS<T>( AXIS, SUBTRA, DIMS, MXKNOT, NCOEF, KNOT,
*                        COEFF, SCALE, DATS, STATUS )

*  Description:
*     This routine evaluates and optionally subtracts the fits produced
*     by the KPS1_MFTx and KPS1_MFTQx routines for each trend vector.

*  Arguments:
*     AXIS = INTEGER (Given)
*        The axis defining the lines that have been fitted.
*     SUBTRA = LOGICAL (Given)
*        Whether to subtract the line fits.  Otherwise the evaluations
*        are returned.
*     DIMS( NDF__MXDIM ) = INTEGER (Given)
*        The dimensions of the input data.  Extra dimension should have
*        size 1 up to NDF__MXDIM.
*     MXKNOT = INTEGER (Given)
*        The maximum number of knots and coefficients per trend fit.
*     NCOEF( * ) = INTEGER (Returned)
*        The number coefficents of the cubic B-splines for each trend.
*        The dimension of this should be the product of all the 
*        dimensions that are not the fit axis.
*     KNOT( MXKNOT, * ) = REAL (Returned)
*        The knot positions of the cubic B-splines for each trend.  The
*        size of the last dimension of this should be the product of
*        all the dimensions that are not the fit axis.
*     COEFF( MXKNOT, * ) = REAL (Returned)
*        The coefficients of the cubic B-splines for each trend.  The
*        size of the last dimension of this should be the product of
*        all the dimensions that are not the fit axis.
*     SCALE( * ) = REAL (Returned)
*        The scale factors of ordered trends that were used to scale
*        each trend vector to the -1 to +1 range.  The dimension of this 
*        should be the product of all the dimensions that are not the 
*        fit axis.
*     DATS( * ) = ? (Given and Returned)
*        The data.  The fit will be written to, or subtracted from this.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  This routine works in n-D, where n is 1 to 7.
*
*     - There is a routine for each numeric data type: replace "x" in
*       the routine name by D, R, I, W, UW, B or UB as appropriate. The
*       base and arrays supplied to the routine must have the data type
*       specified.
*     - Calculations are in single-precision floating point.

*  Copyright:
*     Copyright (C) 2008 Science and Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (Starlink)
*     {enter_new_authors_here}

*  History:
*     2008 May 16 (MJC)
*        Original version based upon KPS1_LFTS.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE             ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'         ! Standard SAE constants
      INCLUDE 'PRM_PAR'         ! PRIMDAT constants
      INCLUDE 'NDF_PAR'         ! NDF public constants

*  Arguments Given:
      INTEGER AXIS
      LOGICAL SUBTRA
      INTEGER DIMS( NDF__MXDIM )
      INTEGER MXKNOT
      INTEGER NCOEF( * )
      REAL KNOT( MXKNOT, * )
      REAL COEFF( MXKNOT, * )
      REAL SCALE( * )

*  Arguments Given and Returned:
      <TYPE> DATS( * )

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER B                  ! Pixel index of work arrays
      INTEGER DIMSB( NDF__MXDIM ) ! Dimensions excluding the axis
      INTEGER I( 7 )             ! Equivalences of I1-I7 loop variables
      INTEGER I1, I2, I3, I4, I5, I6, I7 ! Loop variables
      INTEGER IERR               ! PDA stauts
      INTEGER IP1, IP2, IP3, IP4, IP5, IP6, IP7 ! Loop variables
      INTEGER J                  ! Loop counter
      INTEGER K                  ! Loop counter
      INTEGER STRID( NDF__MXDIM ) ! Dimension strides
      INTEGER STRIDA( NDF__MXDIM ) ! Dimension strides excluding axis
      INTEGER STRIDB( NDF__MXDIM ) ! Dimension strides excluding axis
      <TYPE> TVAL                ! The current data value
      REAL VAL                   ! The current data value
      
*  Equivalences so we can index loop variables by AXIS.
      EQUIVALENCE( I1, I( 1 ) )
      EQUIVALENCE( I2, I( 2 ) )
      EQUIVALENCE( I3, I( 3 ) )
      EQUIVALENCE( I4, I( 4 ) )
      EQUIVALENCE( I5, I( 5 ) )
      EQUIVALENCE( I6, I( 6 ) )
      EQUIVALENCE( I7, I( 7 ) )

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! Declare NUM_ conversion functions
      INCLUDE 'NUM_DEC_<T>'      ! Declare NUM_ arithmetic functions
      INCLUDE 'NUM_DEF_CVT'      ! Define NUM_ conversion functions
      INCLUDE 'NUM_DEF_<T>'      ! Define NUM_ arithmetic functions

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Calculate the strides for each dimension.
      STRID( 1 ) = 1
      DO  J = 2, NDF__MXDIM
         STRID( J ) = STRID( J - 1 ) * DIMS( J - 1 )
      END DO

*  Calculate the strides for each dimension, this time excluding AXIS
*  so we can step around the workspace final dimension.
*  First copy all dimensions, except that for AXIS.
      K = 1
      DO J = 1, NDF__MXDIM
         IF ( J .NE. AXIS ) THEN
            DIMSB( K ) = DIMS( J )
            K = K + 1
         END IF
      END DO
      DIMSB( NDF__MXDIM ) = 0

*  Create strides for this new dimensionality.
      STRIDB( 1 ) = 1
      DO J = 2, NDF__MXDIM - 1
         STRIDB( J ) = STRIDB( J - 1 ) * DIMSB( J - 1 )
      END DO

*  Create strides that match those of the full array.
      K = 1
      DO J = 1, NDF__MXDIM
         IF ( J .NE. AXIS ) THEN
            STRIDA( J ) = STRIDB( K )
            K = K + 1
         ELSE
            STRIDA( J ) = 0
         END IF
      END DO

*  Need to be careful with numeric errors. So establish handlers. Use
*  NUM not VAL for efficiency.
      CALL NUM_HANDL( NUM_TRAP )
      CALL NUM_CLEARERR()

*  Loop over the whole data array.  Move around data array using IP1 to
*  IP7 and workspace array using B (as in related functions that pick 
*  out ranges of one axis).
      B = 1
      DO I7 = 1, DIMS( 7 )
         IP7 = ( I7 - 1 ) * STRID( 7 )
         DO I6 = 1, DIMS( 6 )
            IP6 = IP7 + ( I6 - 1 ) * STRID( 6 )
            DO I5 = 1, DIMS( 5 )
               IP5 = IP6 + ( I5 - 1 ) * STRID( 5 )
               DO I4 = 1, DIMS( 4 )
                  IP4 = IP5 + ( I4 - 1 ) * STRID( 4 )
                  DO I3 = 1, DIMS( 3 )
                     IP3 = IP4 + ( I3 - 1 ) * STRID( 3 )
                     DO I2 = 1, DIMS( 2 )
                        IP2 = IP3 + ( I2 - 1 ) * STRID( 2 )
                        DO I1 = 1, DIMS( 1 )
                           IP1 = IP2 + I1

*  Check that there is a fit for the trend, and that the scale factor
*  is valid.
                           IF ( NCOEF( B ) .GT. 0 .AND.
     :                          ABS( SCALE( B ) ) .GT. VAL__SMLR ) THEN

*  Evaluate the cubic B-spline for the single trend element (hence the
*  "3, 1"), applying the inverse scaling to restore original values.  It 
*  would be more efficient if we could store all values of the trend in
*  a single call...
                              CALL PDA_SPLEV( KNOT( 1, B ), NCOEF( B ),
     :                                        COEFF( 1, B ), 3, 
     :                                        REAL( I( AXIS ) ), VAL, 1,
     :                                        IERR )
                              VAL = VAL / SCALE( B )
                           ELSE
                              VAL = VAL__BADR
                           END IF

*  Check for BADness.
                           TVAL = DATS( IP1 )
                           IF ( VAL .NE. VAL__BADR ) THEN

*  Subtract, or not, from data value.
                              IF ( SUBTRA ) THEN 
                                 DATS( IP1 ) = NUM_SUB<T>( TVAL, 
     :                                         NUM_RTO<T>( VAL ) )
                              ELSE 
                                 DATS( IP1 ) = NUM_RTO<T>( VAL )
                              END IF

*  Failed subtraction so output is now BAD.
                              IF ( .NOT. NUM_WASOK() ) THEN
                                 DATS( IP1 ) = VAL__BAD<T>
                                 CALL NUM_CLEARERR()
                              END IF
                           END IF
                           
*  Move to the next workspace pixel and next coefficients.
                           B = B + STRIDA( 1 )
                        END DO
                        B = B + STRIDA( 2 ) - STRIDA( 1 ) * DIMS( 1 )
                     END DO
                     B = B + STRIDA( 3 ) - STRIDA( 2 ) * DIMS( 2 )
                  END DO
                  B = B + STRIDA( 4 ) - STRIDA( 3 ) * DIMS( 3 )
               END DO
               B = B + STRIDA( 5 ) - STRIDA( 4 ) * DIMS( 4 )
            END DO
            B = B + STRIDA( 6 ) - STRIDA( 5 ) * DIMS( 5 )
         END DO
         B = B + STRIDA( 7 ) - STRIDA( 6 ) * DIMS( 6 )
      END DO
      
* Remove error handler.
      CALL NUM_REVRT

      END
