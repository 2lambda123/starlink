      SUBROUTINE KPS1_MFED<T>( NCLIP, CLIP, EL, ARRAY, STATUS )
*+
*  Name:
*     KPS1_MFEDx

*  Purpose:
*     Flags deviant pixels from a linear fit.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_MFED<T>( NCLIP, CLIP, EL, ARRAY, STATUS )

*  Description:
*     This routine serves MFITTREND.  It fits a straight line to 
*     a supplied line of data, and iteratively rejects outliers, 
*     replacing them with bad pixels.

*  Arguments:
*     NCLIP = INTEGER (Given)
*        The number of clipping cycles for the rejection of outliers.
*     CLIP( NCLIP ) = REAL (Given)
*        The clipping levels in standard deviations for the rejection 
*        of outliers.
*     EL = INTEGER (Given)
*        The number of elements in the line to analysed.
*     ARRAY( EL ) = ? (Given & Returned)
*        The line of data being fitted.  On exit, deviant points will
*        replaced with the bad-pixel value.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for double-precision and real data types:
*     replace "x" in the routine name by D or R as appropriate.  The
*     ARRAY argument supplied to the routine must have the data type
*     specified.

*  Copyright:
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59, Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2006 June 1 (MJC):
*        Original version.
*     2007 January 11 (MJC):
*        Used reordered argument in KPS1_LFTS.
*     2007 March 6 (MJC):
*        Correct declared type of WORK1 array.
*     2007 September 7 (MJC):
*        Revised KPS1_LFTx argument list.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'NDF_PAR'          ! NDF_ public constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT public constants
      INCLUDE 'CNF_PAR'          ! For CNF_PVAL function
      
*  Arguments Given:
      INTEGER EL
      INTEGER NCLIP
      REAL CLIP( NCLIP )

*  Arguments Given and Returned:
      <TYPE> ARRAY( EL )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Constants:
      INTEGER AXIS               ! Axis number
      PARAMETER ( AXIS = 1 )

      LOGICAL BAD                ! Process bad pixels
      PARAMETER ( BAD = .TRUE. )

      INTEGER MAXRNG             ! Maximum number of range limits
      PARAMETER( MAXRNG = 2 )

      INTEGER ORDER              ! Fit order
      PARAMETER ( ORDER = 1 )

      INTEGER OP1                ! Fit order plus one
      PARAMETER ( OP1 = ORDER + 1 )

*  Local Variables:
      DOUBLE PRECISION AS( OP1 * OP1  ) ! Workspace
      DOUBLE PRECISION COEFF( OP1 ) ! Polynomial coefficients
      INTEGER DIMS( NDF__MXDIM ) ! Dimensions of input array
      DOUBLE PRECISION DMAX      ! Max. value of pixels in array
      DOUBLE PRECISION DMAXC     ! Max. pixel value after clipping
      DOUBLE PRECISION DMIN      ! Min. value of pixels in array
      DOUBLE PRECISION DMINC     ! Min. pixel value after clipping
      <LTYPE> HIGH               ! Higher rejection threshold
      INTEGER I                  ! Loop counter
      INTEGER IERR               ! Position of first error (dummy)
      INTEGER IMAX               ! Vector index of max. pixel
      INTEGER IMAXC              ! Vector index of max. clipped pixel
      INTEGER IMIN               ! Vector index of min. pixel
      INTEGER IMINC              ! Vector index of min. clipped pixel
      INTEGER IPRES              ! Pointer to residuals
      INTEGER IPWORK             ! Pointer to work array 
      INTEGER J                  ! Loop counter
      <LTYPE> LOW                ! Lower rejection threshold
      DOUBLE PRECISION MEAN      ! Mean of pixels in array
      DOUBLE PRECISION MEANC     ! Mean of pixels after clipping
      INTEGER NBAD               ! Number of bad values
      INTEGER NGOOD              ! Number of valid values
      INTEGER NGOODC             ! Number valid values after clipping
      INTEGER NERR               ! Number of errors
      INTEGER NREPHI             ! Number of high residuals rejected
      INTEGER NREPLO             ! Number of low residuals rejected
      INTEGER RANGES( MAXRNG )   ! Exclusion ranges
      DOUBLE PRECISION STDEV     ! Standard devn. of pixels in array
      DOUBLE PRECISION STDEVC    ! Std. devn. of pixels after clipping
      DOUBLE PRECISION SUM       ! Sum of pixels in array
      DOUBLE PRECISION SUMC      ! Sum of pixels after clipping
      DOUBLE PRECISION WORK1( OP1 ) ! Workspace
      INTEGER WORK2( OP1 )       ! Workspace

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions
            
*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Get some workspace for the subtracted array and a copy of the
*  original data with rejected pixels flagged as bad.
      CALL PSX_CALLOC( EL, '<HTYPE>', IPRES, STATUS )
      CALL PSX_CALLOC( EL, '<HTYPE>', IPWORK, STATUS )
      IF ( STATUS .NE. SAI__OK ) GO TO 999

*  Initialise some variables for the fitting.
      RANGES( 1 ) = 1
      RANGES( 2 ) = EL

      DO I = 1, NDF__MXDIM
         DIMS( I ) = 1
      END DO
      DIMS( AXIS ) = EL

      DO J = 1, NCLIP

*  Fit a linear slope to all the data. 
         CALL KPS1_LFT<T>( ORDER, AXIS, RANGES, MAXRNG, .FALSE., ARRAY,
     :                     .FALSE., ARRAY, DIMS, ARRAY, AS, COEFF, 
     :                     WORK1, WORK2, STATUS )

*  Copy the flagged (or the initial unflagged array on the first pass)
*  array to what will become the subtracted-fit array.
         CALL VEC_<T>TO<T>( BAD, EL, ARRAY, %VAL( CNF_PVAL( IPRES ) ), 
     :                      IERR, NERR, STATUS )

*  Form the residuals from the fit.
         CALL KPS1_LFTS<T>( ORDER, AXIS, .TRUE., DIMS, COEFF, 
     :                      %VAL( CNF_PVAL( IPRES ) ), STATUS )

*  Derive the statistics of the residuals to the fit.
         CALL KPG1_STAT<T>( BAD, EL, %VAL( CNF_PVAL( IPRES ) ),
     :                      0, CLIP, NGOOD, IMIN, DMIN, IMAX, DMAX,
     :                      SUM, MEAN, STDEV, NGOODC, IMINC, DMINC, 
     :                      IMAXC, DMAXC, SUMC, MEANC, STDEVC, STATUS )

*  Flag outliers beyond the clipping interval.
         LOW = NUM_DTO<T>( MEAN - DBLE( CLIP( J ) ) * STDEV )
         HIGH = NUM_DTO<T>( MEAN + DBLE( CLIP ( J ) ) * STDEV )

*  Replace the values in the output array outside the range with the
*  new values, otherwise copy from the input to the output NDF.
         CALL KPG1_THRS<T>( BAD, EL, %VAL( CNF_PVAL( IPRES ) ),
     :                      LOW, HIGH, VAL__BAD<T>, VAL__BAD<T>,
     :                      %VAL( CNF_PVAL( IPWORK ) ),
     :                      NREPLO, NREPHI, STATUS )

         IF ( NREPLO .GT. 0 .OR. NREPHI .GT. 0 ) THEN

*  Multiply the values by 0 to form a mask of the rejected elements.
            CALL KPG1_CMUL<T>( BAD, EL, %VAL( CNF_PVAL( IPWORK ) ), 
     :                         0.0D0, %VAL( CNF_PVAL( IPRES ) ), NBAD,
     :                         STATUS )

*  Add the mask to the array being fitted.
            CALL VEC_ADD<T>( BAD, EL, ARRAY, %VAL( CNF_PVAL( IPRES ) ), 
     :                       %VAL( CNF_PVAL( IPWORK ) ), 
     :                       IERR, NERR, STATUS )

* Copy the flagged array to the returned array.
            CALL VEC_<T>TO<T>( BAD, EL, %VAL( CNF_PVAL( IPWORK ) ), 
     :                         ARRAY, IERR, NERR, STATUS )
         END IF
      END DO

  999 CONTINUE

*  Free workspaces arrays.
      CALL PSX_FREE( IPWORK, STATUS )
      CALL PSX_FREE( IPRES, STATUS )

      END
