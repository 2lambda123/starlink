      SUBROUTINE KPS1_LFTS<T>( ORDER, AXIS, SUBTRA, DIMS, BS, DATS,
     :                         STATUS )
*+
*  Name:
*     KPG1_LFTSx

*  Purpose:
*     Evaluate and optionally subtract polynomial line fits.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_LFTS<T>( ORDER, AXIS, SUBTRA, DIMS, BS, DATS, STATUS )

*  Description:
*     This routine evaluates and optionally subtracts the fits produced
*     by the KPS1_LFTx and KPS1_LFTQx routines.

*  Arguments:
*     ORDER = INTEGER (Given)
*        The order of polynomial to fit used to create the coefficients.
*     AXIS = INTEGER (Given)
*        The axis defining the lines that have been fitted.
*     SUBTRA = LOGICAL (Given)
*        Whether to subtract the line fits.  Otherwise the evaluations
*        are returned.
*     DIMS( NDF__MXDIM ) = INTEGER*8 (Given)
*        The dimensions of the input data.  Extra dimension should have
*        size 1 up to NDF__MXDIM.
*     BS( ORDER + 1, * ) = DOUBLE PRECISION (Given)
*        The polynomial coeffients. This array should be produced by the
*        KPS1_LFTx routine for polynomials of order ORDER and for data
*        with the given dimensions along the given AXIS.
*     DATS( * ) = ? (Given and Returned)
*        The data.  The fit will be written to, or subtracted from this.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  This routine works in n-D, where n is 1 to 7.
*
*     - There is a routine for each numeric data type: replace "x" in
*       the routine name by D, R, I, W, UW, B or UB as appropriate. The
*       base and arrays supplied to the routine must have the data type
*       specified.

*  Copyright:
*     Copyright (C) 2005, 2007 Particle Physics & Astronomy Research
*     Council.  All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     PWD: Peter W. Draper (JAC, Durham University)
*     {enter_new_authors_here}

*  History:
*     16-SEP-2005 (PWD):
*        Original version based upon KPS1_LFTx.
*     2007 January 11 (MJC):
*        Move DATS argument to regulation order.
*     2011 January 4 (MJC):
*        Divide the processing by the SUBTRA flag's value to avoid
*        accessing undefined values.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE             ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'         ! Standard SAE constants
      INCLUDE 'PRM_PAR'         ! PRIMDAT constants
      INCLUDE 'NDF_PAR'         ! NDF public constants

*  Arguments Given:
      INTEGER ORDER
      INTEGER AXIS
      LOGICAL SUBTRA
      INTEGER*8 DIMS( NDF__MXDIM )
      DOUBLE PRECISION BS( ORDER + 1, * )

*  Arguments Given and Returned:
      <TYPE> DATS( * )

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

      EXTERNAL KPS1_POLYV
      DOUBLE PRECISION KPS1_POLYV ! Value of polynomial

*  Local Variables:
      <TYPE> TVAL                   ! The current data value
      DOUBLE PRECISION DVAL         ! The current data value
      INTEGER*8 B                   ! Pixel index of work arrays
      INTEGER*8 DIMSB( NDF__MXDIM ) ! Dimensions excluding the axis
      INTEGER*8 I( 7 )              ! Equivalences of I1-I7 loop variables
      INTEGER*8 I1, I2, I3, I4, I5, I6, I7 ! Loop variables
      INTEGER*8 IP1, IP2, IP3, IP4, IP5, IP6, IP7 ! Loop variables
      INTEGER*8 J                   ! Loop counter
      INTEGER*8 K                   ! Loop counter
      INTEGER*8 STRID( NDF__MXDIM ) ! Dimension strides
      INTEGER*8 STRIDA( NDF__MXDIM )! Dimension strides excluding axis
      INTEGER*8 STRIDB( NDF__MXDIM )! Dimension strides excluding axis

*  Equivalences so we can index loop variables by AXIS.
      EQUIVALENCE( I1, I( 1 ) )
      EQUIVALENCE( I2, I( 2 ) )
      EQUIVALENCE( I3, I( 3 ) )
      EQUIVALENCE( I4, I( 4 ) )
      EQUIVALENCE( I5, I( 5 ) )
      EQUIVALENCE( I6, I( 6 ) )
      EQUIVALENCE( I7, I( 7 ) )

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! Declare NUM_ conversion functions
      INCLUDE 'NUM_DEC_<T>'      ! Declare NUM_ arithmetic functions
      INCLUDE 'NUM_DEF_CVT'      ! Define NUM_ conversion functions
      INCLUDE 'NUM_DEF_<T>'      ! Define NUM_ arithmetic functions
*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Calculate the strides for each dimension.
      STRID( 1 ) = 1
      DO  J = 2, NDF__MXDIM
         STRID( J ) = STRID( J - 1 ) * DIMS( J - 1 )
      END DO

*  Calculate the strides for each dimension, this time excluding AXIS
*  so we can step around the workspace final dimension.
*  First copy all dimensions, except that for AXIS.
      K = 1
      DO J = 1, NDF__MXDIM
         IF ( J .NE. AXIS ) THEN
            DIMSB( K ) = DIMS( J )
            K = K + 1
         END IF
      END DO
      DIMSB( NDF__MXDIM ) = 0

*  Create strides for this new dimensionality.
      STRIDB( 1 ) = 1
      DO J = 2, NDF__MXDIM - 1
         STRIDB( J ) = STRIDB( J - 1 ) * DIMSB( J - 1 )
      END DO

*  Create strides that match those of the full array.
      K = 1
      DO J = 1, NDF__MXDIM
         IF ( J .NE. AXIS ) THEN
            STRIDA( J ) = STRIDB( K )
            K = K + 1
         ELSE
            STRIDA( J ) = 0
         END IF
      END DO

*  Need to be careful with numeric errors. So establish handlers. Use
*  NUM not VAL for efficiency.
      CALL NUM_HANDL( NUM_TRAP )
      CALL NUM_CLEARERR()

      IF ( SUBTRA ) THEN

*  Loop over the whole data array.  Move around data array using IP1 to
*  IP7 and workspace array using B (as in related functions that pick
*  out ranges of one axis).
         B = 1
         DO I7 = 1, DIMS( 7 )
            IP7 = ( I7 - 1 ) * STRID( 7 )
               DO I6 = 1, DIMS( 6 )
               IP6 = IP7 + ( I6 - 1 ) * STRID( 6 )
               DO I5 = 1, DIMS( 5 )
                  IP5 = IP6 + ( I5 - 1 ) * STRID( 5 )
                  DO I4 = 1, DIMS( 4 )
                     IP4 = IP5 + ( I4 - 1 ) * STRID( 4 )
                     DO I3 = 1, DIMS( 3 )
                        IP3 = IP4 + ( I3 - 1 ) * STRID( 3 )
                        DO I2 = 1, DIMS( 2 )
                           IP2 = IP3 + ( I2 - 1 ) * STRID( 2 )
                           DO I1 = 1, DIMS( 1 )
                              IP1 = IP2 + I1

*  Check for badness and evaluate the polynomial.
                              TVAL = DATS( IP1 )
                              IF ( TVAL .NE. VAL__BAD<T> ) THEN
                                 DVAL = KPS1_POLYV( ORDER, BS( 1, B ),
     :                                              DBLE( I( AXIS ) ) )

*  Subtract from the good data value.
                                 DATS( IP1 ) =  NUM_SUB<T>( TVAL,
     :                                          NUM_DTO<T>( DVAL ) )
                              END IF

*  Failed conversion from double precision, or subtraction so output is
*  now bad.
                              IF ( .NOT. NUM_WASOK() ) THEN
                                 DATS( IP1 ) = VAL__BAD<T>
                                 CALL NUM_CLEARERR()
                              END IF

*  Move to the next workspace pixel and next coefficients.
                              B = B + STRIDA( 1 )
                           END DO
                           B = B + STRIDA( 2 ) - STRIDA( 1 ) * DIMS( 1 )
                        END DO
                        B = B + STRIDA( 3 ) - STRIDA( 2 ) * DIMS( 2 )
                     END DO
                     B = B + STRIDA( 4 ) - STRIDA( 3 ) * DIMS( 3 )
                  END DO
                  B = B + STRIDA( 5 ) - STRIDA( 4 ) * DIMS( 4 )
               END DO
               B = B + STRIDA( 6 ) - STRIDA( 5 ) * DIMS( 5 )
            END DO
            B = B + STRIDA( 7 ) - STRIDA( 6 ) * DIMS( 6 )
         END DO

*  No subtraction.  The division is is required because the supplied
*  data array may not be initialised, i.e. only has write access, and
*  tests for input bad pixels are meaningless.
      ELSE

*  Loop over the whole data array.  Move around data array using IP1 to
*  IP7 and workspace array using B (as in related functions that pick
*  out ranges of one axis).
         B = 1
         DO I7 = 1, DIMS( 7 )
            IP7 = ( I7 - 1 ) * STRID( 7 )
               DO I6 = 1, DIMS( 6 )
               IP6 = IP7 + ( I6 - 1 ) * STRID( 6 )
               DO I5 = 1, DIMS( 5 )
                  IP5 = IP6 + ( I5 - 1 ) * STRID( 5 )
                  DO I4 = 1, DIMS( 4 )
                     IP4 = IP5 + ( I4 - 1 ) * STRID( 4 )
                     DO I3 = 1, DIMS( 3 )
                        IP3 = IP4 + ( I3 - 1 ) * STRID( 3 )
                        DO I2 = 1, DIMS( 2 )
                           IP2 = IP3 + ( I2 - 1 ) * STRID( 2 )
                           DO I1 = 1, DIMS( 1 )
                              IP1 = IP2 + I1

*  Evaluate the polynomial.
                              DVAL = KPS1_POLYV( ORDER, BS( 1, B ),
     :                                           DBLE( I( AXIS ) ) )

*  Subtract from the good data value.
                              DATS( IP1 ) = NUM_DTO<T>( DVAL )

*  Failed conversion from double precision, so output is now bad.
                              IF ( .NOT. NUM_WASOK() ) THEN
                                 DATS( IP1 ) = VAL__BAD<T>
                                 CALL NUM_CLEARERR()
                              END IF

*  Move to the next workspace pixel and next coefficients.
                              B = B + STRIDA( 1 )
                           END DO
                           B = B + STRIDA( 2 ) - STRIDA( 1 ) * DIMS( 1 )
                        END DO
                        B = B + STRIDA( 3 ) - STRIDA( 2 ) * DIMS( 2 )
                     END DO
                     B = B + STRIDA( 4 ) - STRIDA( 3 ) * DIMS( 3 )
                  END DO
                  B = B + STRIDA( 5 ) - STRIDA( 4 ) * DIMS( 4 )
               END DO
               B = B + STRIDA( 6 ) - STRIDA( 5 ) * DIMS( 5 )
            END DO
            B = B + STRIDA( 7 ) - STRIDA( 6 ) * DIMS( 6 )
         END DO
      END IF

* Remove error handler.
      CALL NUM_REVRT

      END
