      SUBROUTINE KPS1_LFT<T>( ORDER, AXIS, RANGES, NRANGE, USEVAR, DATS,
     :                        VARS, DIMS, AS, BS, WRK1, WRK2, STATUS )
*+
*  Name:
*     KPG1_LFTx

*  Purpose:
*     Fit polynomials to all lines of data that lie parallel to
*     an axis.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_LFT<T>( ORDER, AXIS, RANGES, NRANGE, USEVAR,
*                       DATS, VARS, DIMS, AS, BS WRK1, WRK2, STATUS )

*  Description
*     This routine fits polynomials, of a given order, to all lines of
*     data that lie parallel to a given, and lie within ranges along
*     that axis. The fits can be weighted by the inverse values of the
*     associated variances.
*
*     The polynomial coefficients returned in the BS array.

*  Arguments:
*     ORDER = INTEGER (Given)
*        The order of polynomial to fit. Starts at 0 for a constant.
*     AXIS = INTEGER (Given)
*        The axis defining the lines to be fit.
*     RANGES( NRANGE ) = INTEGER (Given)
*        Pairs of array coordinates along the axis. Only data within
*        these ranges will be used in the fit.
*     NRANGE = INTEGER (Given)
*        The number of values in RANGES, must be an even number.
*     USEVAR = LOGICAL (Given)
*        If true then the variances will be used to weight the fits.
*     DATS( * ) = ? (Given and Returned)
*        The data with dimensions DIMS. The fit will be subtracted from
*        this if requested.
*     VARS( * ) = ? (Given)
*        The variances of the data. These will be used to weight the
*        fits if USEVAR is true.
*     DIMS( NDF__MXDIM ) = INTEGER (Given)
*        The dimensions of the input data. Extra dimension should have
*        size 1 up to NDF__MXDIM.
*     AS( ORDER + 1, ORDER + 1, * ) = DOUBLE PRECISION (Returned)
*        Workspace for least squares A matrices of cumulative sums.
*        The size of the last dimension of this should be the product of
*        all the dimensions that are not the fit axis.
*     BS( ORDER + 1, * ) = DOUBLE PRECISION (Returned)
*        Workspace for least squares B vectors cumulative sums.
*        On exit this contains the coefficients of the polynomials.
*
*        Since there are ORDER + 1 of these for each line, the size of
*        the last dimension of this should be the product of all the
*        dimensions that are not the fit axis.  The coefficients will be
*        accessed in Fortran order for the axis, for instance if the
*        third axis if fitted in a cube then this array has an effective
*        shape of (ORDER+1,NX,NY), if the second axis is chosen then the
*        shape is (ORDER+1,NX,NZ) etc.
*     WRK1( ORDER + 1 ) = DOUBLE PRECISION (Returned)
*        Workspace.
*     WRK2( ORDER + 1 ) = INTEGER (Returned)
*        Workspace.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  This routine works in n-D, where n is 1 to 7.  Even if the
*     array has actually less dimensions there is negligible loss of
*     efficiency to supply dummy (=1) higher dimensions.
*
*     - To work as quickly as possible the fits are performed by running
*     over the data in fast order and accumulating the least squares
*     matrices for each line as and when the data are encountered. The
*     solutions are then determined in a single separate section. This
*     requires a lot of workspace (order side**(ndims-1)).
*
*     - There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate. The
*     base and arrays supplied to the routine must have the data type
*     specified.

*  Authors:
*     PWD: Peter W. Draper (JAC, Durham University)
*     {enter_new_authors_here}

*  History:
*     16-SEP-2005 (PWD):
*        Original version based upon KPS1_INLE.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants
      INCLUDE 'NDF_PAR'          ! NDF public constants

*  Arguments Given:
      INTEGER ORDER
      INTEGER AXIS
      INTEGER NRANGE
      INTEGER RANGES( NRANGE )
      LOGICAL USEVAR
      INTEGER DIMS( NDF__MXDIM )
      <TYPE> VARS

*  Arguments Given and Returned:
      <TYPE> DATS( * )
      DOUBLE PRECISION AS( ORDER + 1, ORDER + 1, * )
      DOUBLE PRECISION BS( ORDER + 1, * )
      DOUBLE PRECISION WRK1( * )
      INTEGER WRK2( * )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      <TYPE> TVAL               ! The current data value.
      <TYPE> TVAR               ! The current variance.
      DOUBLE PRECISION DVAL     ! The current data value.
      DOUBLE PRECISION DVAR     ! The current variance.
      INTEGER B                 ! Pixel index of work arrays
      INTEGER I( 7 )            ! Equivalences of I1-I7 loop variables
      INTEGER I1, I2, I3, I4, I5, I6, I7 ! Loop variables
      INTEGER J                 ! Loop counter
      INTEGER K                 ! Loop counter
      INTEGER L                 ! Loop counter
      INTEGER LB                ! Bounds loop counter
      INTEGER LLBND( NDF__MXDIM ) ! Loop lower bounds
      INTEGER LUBND( NDF__MXDIM ) ! Loop upper bounds
      INTEGER P                 ! Pixel index of the interleaved array
      INTEGER STRID( NDF__MXDIM ) ! Dimension strides
      INTEGER STRIDA( NDF__MXDIM ) ! Dimension strides excluding the axis
      INTEGER WEL               ! Workspace elements

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'     ! Declare NUM_ conversion functions
      INCLUDE 'NUM_DEC_<T>'     ! Declare NUM_ arithmetic functions
      INCLUDE 'NUM_DEF_CVT'     ! Define NUM_ conversion functions
      INCLUDE 'NUM_DEF_<T>'     ! Define NUM_ arithmetic functions


*  Equivalences so we can index loop variables by AXIS.
      EQUIVALENCE( I1, I( 1 ) )
      EQUIVALENCE( I2, I( 2 ) )
      EQUIVALENCE( I3, I( 3 ) )
      EQUIVALENCE( I4, I( 4 ) )
      EQUIVALENCE( I5, I( 5 ) )
      EQUIVALENCE( I6, I( 6 ) )
      EQUIVALENCE( I7, I( 7 ) )
*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Calculate the strides for each dimension.
      STRID( 1 ) = 1
      DO  J = 2, NDF__MXDIM
         STRID( J ) = STRID( J - 1 ) * DIMS( J - 1 )
      END DO

*  Calculate the strides for each dimension, this time excluding AXIS
*  so we can step around the workspace final dimension. WEL is the
*  total number of workspace elements.
      IF ( AXIS .NE. 1 ) THEN
         WEL = DIMS( 1 )
      ELSE
         WEL = 1
      END IF
      STRIDA( 1 ) = 1
      K = 2
      DO J = 2, NDF__MXDIM
         IF ( J .NE. AXIS ) THEN
            STRIDA( K ) = STRIDA( K - 1 ) * DIMS( K - 1 )
            WEL = WEL * DIMS( J )
            K = K + 1
         END IF
      END DO

*  Reorder so workspace has same dimensions as data. Do this by giving
*  the AXIS dimension size 0.
      K = NDF__MXDIM - 1
      DO J = NDF__MXDIM, 1, -1
         IF ( J .EQ. AXIS ) THEN
            STRIDA( J ) = 0
         ELSE
            STRIDA( J ) = STRIDA( K )
            K = K - 1
         END IF
      END DO

*  Initialise the workspaces used for the cumulative sums.
      DO J = 1, WEL
         DO L = 1, ORDER + 1
            BS( L, J ) = 0.0D0
            DO K = 1, ORDER + 1
               AS( K, L, J ) = 0.0D0
            END DO
         END DO
      END DO

*  Set the loop bounds. These are the dimensions of all axes, except for
*  the one that defines the ranges.
      DO J = 1, NDF__MXDIM
         LLBND( J ) = 1
         LUBND( J ) = DIMS( J )
      END DO

*  Loop over all input pixels. Note we use a fully expanded set of
*  dimensions as we need to run over the values in fast order and
*  maintain an additional stepping over the workspace sums.

*  Outer loop is over the bounds along the selected axis.
      DO LB = 1, NRANGE, 2
         LLBND( AXIS ) = RANGES( LB )
         LUBND( AXIS ) = RANGES( LB + 1 )

*  Initialise counters for stepping around array and workspaces.
         P = 1
         B = 1

*  For each possible axis. Note these outer loops are usually done
*  NRANGE/2 times only.
         DO I7 = LLBND( 7 ), LUBND( 7 )
            DO I6 = LLBND( 6 ), LUBND( 6 )
               DO I5 = LLBND( 5 ), LUBND( 5 )
                  DO I4 = LLBND( 4 ), LUBND( 4 )
                     DO I3 = LLBND( 3 ), LUBND( 3 )
                        DO I2 = LLBND( 2 ), LUBND( 2 )
                           DO I1 = LLBND( 1 ), LUBND( 1 )

*  Increment sums for this pixel.
                              TVAL = DATS( P )
                              IF ( TVAL .NE. VAL__BAD<T> ) THEN
                                 DVAL = NUM_<T>TOD( TVAL )
                                 IF ( USEVAR ) THEN
                                    DVAR = NUM_<T>TOD( VARS( P ) )
                                 ELSE
                                    DVAR = 1.0D0
                                 END IF
                                 CALL KPS1_LFTPS( DBLE( I( AXIS ) ),
     :                                            DVAL, DVAR,
     :                                            ORDER, .FALSE.,
     :                                            AS( 1, 1, B ),
     :                                            BS( 1, B ) )
                              END IF

*  Move to the next input pixel and next workspace pixel.
                              P = P + STRID( 1 )
                              B = B + STRIDA( 1 )
                           END DO
                           P = P + STRID( 2 ) - STRID( 1 ) * DIMS( 1 )
                           B = B + STRIDA( 2 ) - STRIDA( 1 ) * DIMS( 1 )
                        END DO
                        P = P + STRID( 3 ) - STRID( 2 ) * DIMS( 2 )
                        B = B + STRIDA( 3 ) - STRIDA( 2 ) * DIMS( 2 )
                     END DO
                     P = P + STRID( 4 ) - STRID( 3 ) * DIMS( 3 )
                     B = B + STRIDA( 4 ) - STRIDA( 3 ) * DIMS( 3 )
                  END DO
                  P = P + STRID( 5 ) - STRID( 4 ) * DIMS( 4 )
                  B = B + STRIDA( 5 ) - STRIDA( 4 ) * DIMS( 4 )
               END DO
               P = P + STRID( 6 ) - STRID( 5 ) * DIMS( 5 )
               B = B + STRIDA( 6 ) - STRIDA( 5 ) * DIMS( 5 )
            END DO
            P = P + STRID( 7 ) - STRID( 6 ) * DIMS( 6 )
            B = B + STRIDA( 7 ) - STRIDA( 6 ) * DIMS( 6 )
         END DO
      END DO

*  Solve linear equations and get the polynomial coefficients.
      DO J = 1, WEL
         CALL KPS1_LFTSV( ORDER, AS( 1, 1, J ), .TRUE., BS( 1, J ),
     :                    WRK1, WRK2, STATUS )
      END DO

      END
