      SUBROUTINE KPS1_MFRM<T>( AXIS, NRANGE, RANGES, CLIP, DIMS,
     :                        RESIDS, RESUM, WORK, STATUS )
*+
*  Name:
*     KPG1_MFRMx

*  Purpose:
*     Flags fit outliers based upon rms residuals for lines of data that
*     lie parallel to an axis.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_MFRM<T>( AXIS, NRANGE, RANGES, CLIP, DIMS, RESIDS, 
*                      RESUM, STATUS )

*  Description:
*     This routine forms the root-mean-squared residuals for MFITTREND 
*     fits along along an axis within the fitting ranges of grid
*     co-ordinates.  It then finds the outliers of the fits that exceed
*     the mean rms residual plus CLIP standard deviations.  The record 
*     of the outliers is an updated residuals array; all the residuals 
*     comprising the rejected fit are set bad. 

*  Arguments:
*     AXIS = INTEGER (Given)
*        The axis defining the fitted lines.
*     NRANGE = INTEGER (Given)
*        The number of values in RANGES, must be an even number.
*     RANGES( NRANGE ) = INTEGER (Given)
*        Pairs of array co-ordinates along the axis.  Only the residual
*        within these ranges will be compare, and should be the regions
*        used to generate the fits.
*     CLIP = REAL (Given)
*        Number of standard deviations about the mean beyond which the
*        fit is deemed to be bad. 
*     DIMS( NDF__MXDIM ) = INTEGER (Given)
*        The dimensions of the input data.  Extra dimension should have
*        size 1 up to NDF__MXDIM.
*     RESID( * ) = ? (Given and Returned)
*        The residuals with dimensions DIMS.  On exit, any residuals
*        corresponding to rejected fits are set bad.
*     RESUM( * ) = DOUBLE PRECISION (Returned)
*        The summed root-mean-square residuals.  The dimension is the 
*        product of DIMS divided by DIMS( AXIS ), i.e. there is one
*        element for each fit.
*     WORK( * ) = INTEGER (Returned)
*        Workspace to store the number of good residuals.  The 
*        dimension is the product of DIMS divided by DIMS( AXIS ).
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  This routine works in n-D, where n is 1 to 7.  Even if the
*     array has actually fewer dimensions there is negligible loss of
*     efficiency to supply dummy (=1) higher dimensions.
*
*     - To work as quickly as possible the residuals are summed by 
*     running over the data in fast order and accumulated.
*
*     - There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate.  The
*     RESIDS array supplied to the routine must have the data type
*     specified.

*  Copyright:
*     Copyright (C) 2007 Particle Physics & Astronomy Research
*     Council.  All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     MJC: Malcolm J. Currie (Starlink)
*     {enter_new_authors_here}

*  History:
*     2007 January 11 (MJC):
*        Original version based upon KPS1_LFTx.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants
      INCLUDE 'NDF_PAR'          ! NDF public constants

*  Arguments Given:
      INTEGER AXIS
      INTEGER NRANGE
      INTEGER RANGES( NRANGE )
      REAL CLIP
      INTEGER DIMS( NDF__MXDIM )

*  Arguments Given and Returned:
      <TYPE> RESIDS( * )

*  Arguments Returned:
      DOUBLE PRECISION RESUM( * )
      INTEGER WORK( * )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      <TYPE> TVAL                ! The current data value
      DOUBLE PRECISION DVAL      ! The current data value
      INTEGER B                  ! Pixel index of work arrays
      INTEGER DIMSB( NDF__MXDIM ) ! Dimensions excluding the axis
      INTEGER I( 7 )             ! Equivalences of I1-I7 loop variables
      INTEGER I1, I2, I3, I4, I5, I6, I7 ! Loop variables
      INTEGER IP1, IP2, IP3, IP4, IP5, IP6, IP7 ! Loop variables
      INTEGER J                  ! Loop counter
      INTEGER K                  ! Loop counter
      INTEGER L                  ! Loop counter
      INTEGER LB                 ! Bounds loop counter
      INTEGER LLBND( NDF__MXDIM ) ! Loop lower bounds
      INTEGER LUBND( NDF__MXDIM ) ! Loop upper bounds
      DOUBLE PRECISION MEAN      ! Mean rms residual
      INTEGER NGOOD              ! Number of good residuals
      DOUBLE PRECISION STDEV     ! Standard deviation rms residual
      INTEGER STRID( NDF__MXDIM ) ! Dimension strides
      INTEGER STRIDA( NDF__MXDIM ) ! Dimension strides excluding axis
      INTEGER STRIDB( NDF__MXDIM ) ! Dimension strides excluding axis
      DOUBLE PRECISION SUM       ! Sum of rms residuals
      DOUBLE PRECISION SUMSQ     ! Sum of rms residuals squared
      DOUBLE PRECISION THRESH    ! Clipping threshold
      INTEGER WEL                ! Workspace elements

*  Equivalences so we can index loop variables by AXIS.
      EQUIVALENCE( I1, I( 1 ) )
      EQUIVALENCE( I2, I( 2 ) )
      EQUIVALENCE( I3, I( 3 ) )
      EQUIVALENCE( I4, I( 4 ) )
      EQUIVALENCE( I5, I( 5 ) )
      EQUIVALENCE( I6, I( 6 ) )
      EQUIVALENCE( I7, I( 7 ) )

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! Declare NUM_ conversion functions
      INCLUDE 'NUM_DEC_<T>'      ! Declare NUM_ arithmetic functions
      INCLUDE 'NUM_DEF_CVT'      ! Define NUM_ conversion functions
      INCLUDE 'NUM_DEF_<T>'      ! Define NUM_ arithmetic functions
*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Calculate the strides for each dimension.
      STRID( 1 ) = 1
      DO  J = 2, NDF__MXDIM
         STRID( J ) = STRID( J - 1 ) * DIMS( J - 1 )
      END DO

*  Calculate the strides for each dimension, this time excluding AXIS
*  so we can step around the workspace final dimension.  WEL is the
*  total number of workspace elements.  First copy all dimensions, 
*  except that for AXIS.
      K = 1
      DO J = 1, NDF__MXDIM
         IF ( J .NE. AXIS ) THEN
            DIMSB( K ) = DIMS( J )
            K = K + 1
         END IF
      END DO
      DIMSB( NDF__MXDIM ) = 0

*  Create strides for this new dimensionality and count workspace
*  elements.
      STRIDB( 1 ) = 1
      WEL = 1
      DO J = 2, NDF__MXDIM - 1
         STRIDB( J ) = STRIDB( J - 1 ) * DIMSB( J - 1 )
         WEL = WEL * DIMSB( J - 1 )
      END DO

*  Create strides that match those of the full array.
      K = 1
      DO J = 1, NDF__MXDIM
         IF ( J .NE. AXIS ) THEN
            STRIDA( J ) = STRIDB( K )
            K = K + 1
         ELSE
            STRIDA( J ) = 0
         END IF
      END DO

*  Set the loop bounds. These are the dimensions of all axes, except for
*  the one that defines the ranges.
      DO J = 1, NDF__MXDIM
         LLBND( J ) = 1
         LUBND( J ) = DIMS( J )
      END DO

*  Initialise counters.
      DO J = 1, WEL
         WORK( J ) = 0
      END DO

*  Loop over all input pixels. Note we use a fully expanded set of
*  dimensions as we need to run over the values in fast order and
*  maintain an additional stepping over the workspace sums.

*  Outer loop is over the bounds along the selected axis.
      DO LB = 1, NRANGE, 2
         LLBND( AXIS ) = RANGES( LB )
         LUBND( AXIS ) = RANGES( LB + 1 )

*  For each possible axis. Note these outer loops are usually done
*  NRANGE/2 times only.
         B = 1
         DO I7 = LLBND( 7 ), LUBND( 7 )
            IP7 = ( I7 - 1 ) * STRID( 7 )
            DO I6 = LLBND( 6 ), LUBND( 6 )
               IP6 = IP7 + ( I6 - 1 ) * STRID( 6 )
               DO I5 = LLBND( 5 ), LUBND( 5 )
                  IP5 = IP6 + ( I5 - 1 ) * STRID( 5 )
                  DO I4 = LLBND( 4 ), LUBND( 4 )
                     IP4 = IP5 + ( I4 - 1 ) * STRID( 4 )
                     DO I3 = LLBND( 3 ), LUBND( 3 )
                        IP3 = IP4 + ( I3 - 1 ) * STRID( 3 )
                        DO I2 = LLBND( 2 ), LUBND( 2 )
                           IP2 = IP3 + ( I2 - 1 ) * STRID( 2 )
                           DO I1 = LLBND( 1 ), LUBND( 1 )
                              IP1 = IP2 + I1

*  Increment sums for this pixel.
                              TVAL = RESIDS( IP1 )
                              IF ( TVAL .NE. VAL__BAD<T> ) THEN
                                 DVAL = NUM_<T>TOD( TVAL )
                                 RESUM( B ) = RESUM( B ) + DVAL * DVAL
                                 WORK( B ) = WORK( B ) + 1
                              END IF

*  Move to the next workspace pixel.
                              B = B + STRIDA( 1 )
                           END DO
                           B = B + STRIDA( 2 ) - STRIDA( 1 ) * DIMS( 1 )
                        END DO
                        B = B + STRIDA( 3 ) - STRIDA( 2 ) * DIMS( 2 )
                     END DO
                     B = B + STRIDA( 4 ) - STRIDA( 3 ) * DIMS( 3 )
                  END DO
                  B = B + STRIDA( 5 ) - STRIDA( 4 ) * DIMS( 4 )
               END DO
               B = B + STRIDA( 6 ) - STRIDA( 5 ) * DIMS( 5 )
            END DO
            B = B + STRIDA( 7 ) - STRIDA( 6 ) * DIMS( 6 )
         END DO
      END DO

*  Derive the rms deviations.
      DO J = 1, WEL
         IF ( WORK( J ) .GT. 0 ) THEN
            RESUM( J ) = SQRT( RESUM( J ) / DBLE( WORK( J ) ) )
         ELSE
            RESUM( J ) = VAL__BADD
         END IF
      END DO

*  Initialise for forming statistics.
      NGOOD = 0
      SUM = 0.0D0
      SUMSQ = 0.0D0

      DO J = 1, WEL
         IF ( RESUM( J ) .NE. VAL__BADD ) THEN
 
*  Convert the array values to double precision, count them, and form
*  sums for the statistics.
            NGOOD = NGOOD + 1
            SUM = SUM + RESUM( J )
            SUMSQ = SUMSQ + ( RESUM( J ) * RESUM( J ) )
         END IF
      END DO

*  Before calculating the standard deviation, check for only one
*  contributing pixel, and rounding errors producing a negative 
*  variance value.  In all these cases, calculate a standard deviation 
*  value of zero.
      IF ( NGOOD .GT. 0 ) MEAN = SUM / DBLE( NGOOD )
      STDEV = SUMSQ - ( MEAN * MEAN * DBLE( NGOOD ) )
      IF ( ( NGOOD .EQ. 1 ) .OR. ( STDEV .LT. 0.0D0 ) ) THEN
         STDEV = 0.0D0
 
*  Otherwise, calculate the standard deviation normally.
      ELSE
         STDEV = SQRT( STDEV / DBLE( NGOOD - 1 ) )
      END IF

*  Reject the outliers.  Note that this is one-sided.
      THRESH = MEAN + DBLE( CLIP ) * STDEV
      DO J = 1, WEL
         IF ( RESUM ( J ) .GT. THRESH ) THEN
            RESUM( J ) = VAL__BADD
         END IF
      END DO

*  Apply the rejection to all elements along each fitted line.
      B = 1
      DO I7 = 1, DIMS( 7 )
         IP7 = ( I7 - 1 ) * STRID( 7 )
         DO I6 = 1, DIMS( 6 )
            IP6 = IP7 + ( I6 - 1 ) * STRID( 6 )
            DO I5 = 1, DIMS( 5 )
               IP5 = IP6 + ( I5 - 1 ) * STRID( 5 )
               DO I4 = 1, DIMS( 4 )
                  IP4 = IP5 + ( I4 - 1 ) * STRID( 4 )
                  DO I3 = 1, DIMS( 3 )
                     IP3 = IP4 + ( I3 - 1 ) * STRID( 3 )
                     DO I2 = 1, DIMS( 2 )
                        IP2 = IP3 + ( I2 - 1 ) * STRID( 2 )
                        DO I1 = 1, DIMS( 1 )
                           IP1 = IP2 + I1

*  Replace elements in bad detrended lines.
                           IF ( RESUM( B ) .EQ. VAL__BADD ) THEN
                              RESIDS( IP1 ) = VAL__BAD<T>
                           END IF

*  Move to the next detrended-line pixel.
                           B = B + STRIDA( 1 )
                        END DO
                        B = B + STRIDA( 2 ) - STRIDA( 1 ) * DIMS( 1 )
                     END DO
                     B = B + STRIDA( 3 ) - STRIDA( 2 ) * DIMS( 2 )
                  END DO
                  B = B + STRIDA( 4 ) - STRIDA( 3 ) * DIMS( 3 )
               END DO
               B = B + STRIDA( 5 ) - STRIDA( 4 ) * DIMS( 4 )
            END DO
            B = B + STRIDA( 6 ) - STRIDA( 5 ) * DIMS( 5 )
         END DO
         B = B + STRIDA( 7 ) - STRIDA( 6 ) * DIMS( 6 )
      END DO

      END
