      SUBROUTINE KPS1_MFLD<T>( DTAXIS, NCLIP, CLIP, FOREST, DIMS, ARRAY,
     :                         STATUS )
*+
*  Name:
*     KPS1_MFLDx

*  Purpose:
*     Flags deviant pixels from a linear fit for all elements
*     along a given axis.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_MFLD<T>( DTAXIS, NCLIP, CLIP, FOREST, DIMS, ARRAY,
*                        STATUS )

*  Description:
*     This routine serves MFITTREND.  It fits a straight line to
*     to all lines of the supplied data that lie parallel to a given
*     axis, and iteratively rejects outliers within each line using the
*     dispersion within that line with respect to its median.

*  Arguments:
*     DTAXIS = INTEGER (Given)
*        The axis index of the dimension that is being detrended.
*     NCLIP = INTEGER (Given)
*        The number of clipping cycles for the rejection of outliers.
*     CLIP( NCLIP ) = REAL (Given)
*        The clipping levels in standard deviations for the rejection
*        of outliers.
*     FOREST = LOGICAL (Given)
*        If .TRUE. the data have many spectral features---a line
*        forest---for which a revised approach using the mode of the
*        histogram along each line of data.
*     DIMS( NDF__MXDIM ) = INTEGER*8 (Given)
*        The dimensions of the array to be analysed.
*     ARRAY( * ) = ? (Given & Returned)
*        The lines of data being fitted.  On exit, deviant points will
*        replaced with the bad-pixel value.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for double-precision and real data types:
*     replace "x" in the routine name by D or R as appropriate.  The
*     ARRAY argument supplied to the routine must have the data type
*     specified.

*  Copyright:
*     Copyright (C) 2007, 2008, 2016, 2018 Science & Technology
*     Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51, Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2007 September 30 (MJC):
*        Original version adapted from KPS1_MFADx.
*     2008 May 15 (MJC):
*        Used revised API for KPS1_LFTx.
*     2016 March 29 (MJC):
*        Add FOREST argument and determine the mode from the histogram
*        peak to assess outliers in line forests.
*     2018 April 25 (MJC):
*        Take the residuals with respect to the median instead of the
*        mean to handle extended bright emission.
*     2018 November 14 (MJC):
*        Replace a call to KPG1_HSTAx with the accurate and robust
*        KPG_STOSx.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'NDF_PAR'          ! NDF_ public constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT public constants
      INCLUDE 'CNF_PAR'          ! For CNF_PVAL function

*  Arguments Given:
      INTEGER DTAXIS
      INTEGER NCLIP
      REAL CLIP( NCLIP )
      LOGICAL FOREST
      INTEGER*8 DIMS( NDF__MXDIM )

*  Arguments Given and Returned:
      <TYPE> ARRAY( * )

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      REAL VAL_DTO<T>            ! Double to <COMM> conversion

*  Local Constants:
      LOGICAL BAD                ! Process bad pixels
      PARAMETER ( BAD = .TRUE. )

      INTEGER LINDIM             ! Dimensionality of a line
      PARAMETER ( LINDIM = 1 )

      INTEGER MAXRNG             ! Maximum number of range limits
      PARAMETER( MAXRNG = 2 )

      INTEGER ORDER              ! Fit order
      PARAMETER ( ORDER = 1 )

*  Local Variables:
      INTEGER*8 AREA             ! Number of lines to be fit at once
      REAL CLFRAC( 2 )           ! Clipped fractions
      INTEGER*8 DIMPRM( NDF__MXDIM ) ! Permuted dimensions
      DOUBLE PRECISION DMAX      ! Max. value of pixels in array
      DOUBLE PRECISION DMIN      ! Min. value of pixels in array
      DOUBLE PRECISION DSTAT( 7 )! Array of floating-point statistics
      DOUBLE PRECISION DSTATC( 7 ) ! Array of clipped f.p. statistics
      INTEGER*8 DTEL             ! Number of elements along detrend axis
      DOUBLE PRECISION DMODE     ! Dummy (mode of pixels in array)
      DOUBLE PRECISION DPEVAL( 4 ) ! Dummy values at percentiles
      INTEGER*8 EL               ! Number of elements in supplied array
      REAL FRAC( 2 )             ! Percentiles for data range
      <LTYPE> GMEAN              ! Gaussian mean
      INTEGER*8 GNUMB            ! Number of values lower than GMEAN
      <LTYPE> HIGH               ! Higher rejection threshold
      DOUBLE PRECISION HRANGE( 2 ) ! Histogram data limits
      INTEGER*8 I                ! Loop counter
      INTEGER*8 IDIMS( NDF__MXDIM ) ! Paste-array dimensions
      INTEGER*8 IERR             ! Position of first error (dummy)
      INTEGER IMAX( 1 )          ! Vector index of max. pixel
      INTEGER IMIN( 1 )          ! Vector index of min. pixel
      INTEGER IPAS               ! Pointer to workspace for A matrix
      INTEGER IPBS               ! Pointer to coefficients
      INTEGER IPLINE             ! Pointer to a single detrend line
      INTEGER IPMASK             ! Pointer to a single masked line
      INTEGER IPPERM             ! Pointer to permuted supplied array
      INTEGER IPPRES             ! Pointer to permuted residuals array
      INTEGER IPRES              ! Pointer to residuals
      INTEGER IPRLIN             ! Pointer to a single line of residuals
      INTEGER IPWORK             ! Pointer to work array
      INTEGER IPWRK1             ! Pointer to workspace
      INTEGER IPWRK2             ! Pointer to workspace
      INTEGER*8 ISTAT( 3 )       ! Array of integer statistics
      INTEGER*8 ISTATC( 3 )      ! Array of clipped integer statistics
      INTEGER J                  ! Loop counter
      INTEGER K                  ! Loop counter
      INTEGER*8 LBND( 1 )        ! Lower bound of the whole array
      INTEGER*8 LBNDL( 1 )       ! Lower bound of a line section
      <LTYPE> LOW                ! Lower rejection threshold
      DOUBLE PRECISION MEAN      ! Mean of pixels in array
      DOUBLE PRECISION MEANC     ! Mean of pixels after clipping
      DOUBLE PRECISION MEDIAN    ! Median of pixels in array
      DOUBLE PRECISION MODE      ! Mode of pixels in array
      INTEGER*8 NBAD             ! Number of bad values
      INTEGER*8 NEL              ! Number of elements (not used)
      INTEGER*8 NGOOD            ! Number of valid values
      INTEGER*8 NERR             ! Number of errors
      INTEGER*8 NREPHI           ! Number of high residuals rejected
      INTEGER*8 NREPLO           ! Number of low residuals rejected
      INTEGER*8 ODIMS( NDF__MXDIM ) ! Base-array dimensions
      INTEGER*8 OFFSET( NDF__MXDIM ) ! Paste origin offsets
      REAL PERCNT( 4 )           ! Quartile and +/-2-sigma percentiles
      INTEGER PERMBA( NDF__MXDIM ) ! Backward-permutation indices
      INTEGER PERMFO( NDF__MXDIM ) ! Forward-permutation indices
      DOUBLE PRECISION PERVAL( 4 ) ! Values corresponding to percentiles
      INTEGER*8 RANGES( MAXRNG ) ! Exclusion ranges
      DOUBLE PRECISION RNGAVE    ! Mean histogram limits
      DOUBLE PRECISION RNGDIF    ! Extent of histogram limits
      DOUBLE PRECISION SKEW      ! Skewness of pixels in array
      DOUBLE PRECISION STDEV     ! Standard devn. of pixels in array
      DOUBLE PRECISION STDEVM    ! One-sided standard devn. from mode
      DOUBLE PRECISION SUM       ! Sum of pixels in array
      LOGICAL TBAD               ! Modifiable flag process bad pixels?
      INTEGER*8 UBND( 1 )        ! Upper bound of the whole array
      INTEGER*8 UBNDL( 1 )       ! Upper bound of a line section
      REAL UPECNT( 4 )           ! Used percentiles
      LOGICAL USEMOD             ! Use the mode for clipping?

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*  Local Data:
      DATA PERCNT / 2.23, 25.0, 75.0, 97.77 /

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Find the number of elements in the array and the size of the
*  A- and B-matrix workspaces.  We need space for the cumulative
*  coefficient sums and the coefficients themselves (Ax=B).
      EL = 1
      AREA = 1
      DO I = 1, NDF__MXDIM
         EL = EL * DIMS( I )
         IF ( I .NE. DTAXIS ) THEN
            AREA = AREA * DIMS( I )
         END IF
      END DO
      DTEL = DIMS( DTAXIS )

*  Form the permutation arrays needed to make the trend axis first and
*  then to restore the original order.
      PERMFO( 1 ) = DTAXIS
      DO I = 1, NDF__MXDIM
         IF ( I .GT. DTAXIS ) THEN
            PERMBA( I ) = I
            PERMFO( I ) = I
         ELSE IF ( I .LT. DTAXIS ) THEN
            PERMBA( I ) = I + 1
            PERMFO( I + 1 ) = I
         ELSE
            PERMBA( I ) = 1
         END IF
         DIMPRM( I ) = DIMS( PERMFO( I ) )
      END DO

*  Define some fixed bounds and dimensions needed by the paste
*  and permute routines.
      IDIMS( 1 ) = DTEL
      ODIMS( 1 ) = EL
      DO I = 2, NDF__MXDIM
        OFFSET( I ) = 0
        IDIMS( I ) = 1
        ODIMS( I ) = 1
      END DO
      LBND( 1 ) = 1
      UBND( 1 ) = EL

*  Initialise some variables for the fitting.
      RANGES( 1 ) = 1
      RANGES( 2 ) = DIMS( DTAXIS )

*  Obtain the workspace for the fits.
      CALL PSX_CALLOC8( AREA * ( ORDER + 1 ) * ( ORDER + 1 ),
     :                 '_DOUBLE', IPAS, STATUS )

      CALL PSX_CALLOC8( AREA * ( ORDER + 1 ), '_DOUBLE', IPBS, STATUS )
      CALL PSX_CALLOC8( AREA * ( ORDER + 1 ), '_DOUBLE', IPWRK1, STATUS )
      CALL PSX_CALLOC8( AREA * ( ORDER + 1 ), '_INTEGER', IPWRK2,
     :                 STATUS )

*  Get some workspace for the subtracted array and a permuted version of
*  it and the output array, a copy of the original data with rejected
*  pixels flagged as bad, and a mask of rejected pixels.
      CALL PSX_CALLOC8( EL, '<HTYPE>', IPRES, STATUS )
      CALL PSX_CALLOC8( EL, '<HTYPE>', IPPERM, STATUS )
      CALL PSX_CALLOC8( EL, '<HTYPE>', IPPRES, STATUS )
      CALL PSX_CALLOC8( DTEL, '<HTYPE>', IPMASK, STATUS )
      CALL PSX_CALLOC8( DTEL, '<HTYPE>', IPWORK, STATUS )
      CALL PSX_CALLOC8( DTEL, '<HTYPE>', IPRLIN, STATUS )
      CALL PSX_CALLOC8( DTEL, '<HTYPE>', IPLINE, STATUS )
      IF ( STATUS .NE. SAI__OK ) GO TO 999
      TBAD = BAD

      DO J = 1, NCLIP

*  Fit a linear slope to all the data.
         CALL KPS1_LFT<T>( ORDER, DTAXIS, MAXRNG, RANGES, .FALSE.,
     :                     ARRAY, .FALSE., ARRAY, DIMS, ARRAY,
     :                     %VAL( CNF_PVAL( IPAS ) ),
     :                     %VAL( CNF_PVAL( IPBS ) ),
     :                     %VAL( CNF_PVAL( IPWRK1 ) ),
     :                     %VAL( CNF_PVAL( IPWRK2 ) ), STATUS )

*  Copy the flagged (or the initial unflagged array on the first pass)
*  array to what will become the subtracted-fit array.
         CALL VEC8_<T>TO<T>( BAD, EL, ARRAY, %VAL( CNF_PVAL( IPRES ) ),
     :                       IERR, NERR, STATUS )

*  Form the residuals from the fit.
         CALL KPS1_LFTS<T>( ORDER, DTAXIS, .TRUE., DIMS,
     :                      %VAL( CNF_PVAL( IPBS ) ),
     :                      %VAL( CNF_PVAL( IPRES ) ), STATUS )

*  For the rejection process each line to be fit is filtered separately.
*  To make this easier, permute the axes in the supplied array and
*  residuals so that the trend axis is first.  Then within the permuted
*  arrays, each line is offset from the next by the length of the trend
*  axis in bytes.  There are AREA lines to test.
         CALL KPS1_PRMX<T>( NDF__MXDIM, DIMS, DIMPRM, PERMFO,
     :                      %VAL( CNF_PVAL( IPRES ) ),
     :                      %VAL( CNF_PVAL( IPPRES ) ), STATUS )

         CALL KPS1_PRMX<T>( NDF__MXDIM, DIMS, DIMPRM, PERMFO, ARRAY,
     :                      %VAL( CNF_PVAL( IPPERM ) ), STATUS )

*  Whether or not to attempt to use the mode.
         USEMOD = .FALSE.

*  Set the percentiles needed for the moments method to estimate the
*  mode.
         IF ( FOREST ) THEN
            UPECNT( 2 ) = PERCNT( 2 )
            UPECNT( 3 ) = PERCNT( 3 )

*  Set the percentiles given as fractions to determine the value range
*  for the histogram, limits that will exclude wild outliers.
            FRAC( 1 ) = 0.001
            FRAC( 2 ) = 0.999
         END IF

         DO I = 1, AREA

*  Extract a detrend line and its residuals.
            LBNDL( 1 ) = 1 + ( I - 1 ) * DTEL
            UBNDL( 1 ) = I * DTEL
            CALL KPG1_CPND8<T>( LINDIM, LBND, UBND,
     :                         %VAL( CNF_PVAL( IPPRES ) ),
     :                         LBNDL, UBNDL,
     :                         %VAL( CNF_PVAL( IPRLIN ) ), NEL, STATUS )

            CALL KPG1_CPND8<T>( LINDIM, LBND, UBND,
     :                         %VAL( CNF_PVAL( IPPERM ) ),
     :                         LBNDL, UBNDL,
     :                         %VAL( CNF_PVAL( IPLINE ) ), NEL, STATUS )

*  Derive the statistics of the residuals to the fit.  No clipping is
*  applied here.  First the regular statistics...
            CALL KPG_OSTA8<T>( BAD, DTEL, %VAL( CNF_PVAL( IPRLIN ) ), 0,
     :                      CLIP, ISTAT, DSTAT, ISTATC, DSTATC, STATUS )
            MEAN = DSTAT( 4 )
            STDEV = DSTAT( 5 )
            SKEW = DSTAT( 6 )
            NGOOD = ISTAT( 1 )

*  then get the median.  Given a strong signal, the mean will lie outside
*  the baseline peak of the spectrum's histogram, whereas the median is
*  far more likely to reside in that peak.  Thus clipping about the
*  median will be more closely with respect to the baseline, as desired.
            CALL KPG_STOS8<T>( DTEL, %VAL( CNF_PVAL( IPRLIN ) ), NGOOD,
     :                        1, VAL__BADR, MEDIAN, PERVAL, STATUS )

*  Flag outliers beyond the clipping interval.
            IF ( STDEV .NE. VAL__BADD ) THEN

               IF ( FOREST ) THEN

*  Obtain the percentile limits within the line, using a fine histogram
*  with iterations if there are extreme outliers.
                  CALL KPG1_FRAC8<T>( DTEL, %VAL( CNF_PVAL( IPRLIN ) ),
     :                                2, FRAC, TBAD, CLFRAC, HRANGE,
     :                                STATUS )

*  Determine the line's mode between those data limits by forming
*  the zeroth moment using neighbouring histogram bins about the most
*  populous bin.  Strictly we should calculate a possibly slightly
*  lower NGOOD, but here it's not critical.  Protect against
*  pathological cases.
                  RNGDIF = ABS( HRANGE( 2 ) - HRANGE( 1 ) )
                  RNGAVE = 0.5D0 * ( ABS( HRANGE( 2 ) ) +
     :                               ABS( HRANGE( 1 ) ) )
                  USEMOD = STATUS .EQ. SAI__OK .AND.
     :                     RNGDIF .GT. 100D0 * VAL__EPSD * RNGAVE
                  IF ( USEMOD ) THEN
                     DO K = 1, 4
                        PERVAL( K ) = 0.0D0
                     END DO
                     UPECNT( 2 ) = PERCNT( 2 )
                     UPECNT( 3 ) = PERCNT( 3 )

*  Obtain the percentile values.
                     CALL KPG_STOS8<T>( DTEL, %VAL( CNF_PVAL( IPRLIN ) ),
     :                                 NGOOD, 4, PERCNT, MEDIAN, PERVAL,
     :                                 STATUS )

*  Save the percentile values for later.  They will be overwritten
*  otherwise.
                     DO K = 1, 4
                        DPEVAL( K ) = PERVAL( K )
                     END DO

*  Refine the mode.
                     CALL KPS1_HSMO<T>( BAD, DTEL,
     :                                  %VAL( CNF_PVAL( IPRLIN ) ),
     :                                  'HNUMBIN', 'MOMENTS',
     :                                  HRANGE( 2 ), HRANGE( 1 ), NGOOD,
     :                                  2, UPECNT( 2 ),
     :                                  DPEVAL, MODE, STATUS )
                     USEMOD = STATUS .EQ. SAI__OK

*  Restore the quartile percentiles which have been set bad by
*  KPS1_HSMOx.
                     UPECNT( 2 ) = PERCNT( 2 )
                     UPECNT( 3 ) = PERCNT( 3 )

*  Assume that the noise about the baseline is normally distributed,
*  with a mean equal to the mode of the total distribution of values
*  in the line.  We want to find the two-sigma percentiles with respect
*  to that, rather than the whole distribution.

*  Call routine to count up the values.
                     GMEAN = VAL_DTO<T>( .FALSE., MODE, STATUS )
                     IF ( SKEW .GT. 0D0 ) THEN
                        CALL KPG1_NUMB8<T>( BAD, .FALSE., .FALSE., DTEL,
     :                                     %VAL( CNF_PVAL( IPRLIN ) ),
     :                                     GMEAN, GNUMB, STATUS )

*  Scale the two-sigma percentile as if we were dealing with a Gaussian.
                        UPECNT( 1 ) = PERCNT( 1 ) * 2.0 *
     :                                REAL( GNUMB + 1 ) / REAL( NGOOD )

*  Find the percentile corresponding to -2 sigma to estimate the
*  baseline noise.
                        CALL KPS1_HSMO<T>( BAD, DTEL,
     :                                     %VAL( CNF_PVAL( IPRLIN ) ),
     :                                     'HNUMBIN', 'MOMENTS',
     :                                     HRANGE( 2 ), HRANGE( 1 ),
     :                                     NGOOD, 3, UPECNT,
     :                                     PERVAL, DMODE, STATUS )
                     ELSE
                        CALL KPG1_NUMB8<T>( BAD, .FALSE., .TRUE., DTEL,
     :                                     %VAL( CNF_PVAL( IPRLIN ) ),
     :                                     GMEAN, GNUMB, STATUS )

*  Scale the two-sigma noise percentile as if we were dealing with a Gaussian.
                        UPECNT( 4 ) = PERCNT( 4 ) * 2.0 *
     :                                REAL( GNUMB - 1 ) / REAL( NGOOD )

*  Find the percentile corresponding to +2 sigma to estimate the
*  baseline noise.  Note the percentile value is now the third.
                        CALL KPS1_HSMO<T>( BAD, DTEL,
     :                                     %VAL( CNF_PVAL( IPRLIN ) ),
     :                                     'HNUMBIN', 'MOMENTS',
     :                                     HRANGE( 2 ), HRANGE( 1 ),
     :                                     NGOOD, 4, UPECNT,
     :                                     PERVAL, DMODE, STATUS )
                    END IF
                  END IF
               END IF

               IF ( USEMOD ) THEN

* Since there will normally be a strong skewness, use the spread of the
* side without the tail to obtain the baseline noise with less bias from
* spectral lines.  A broader noise causes too much of spectral-line
* wings to be included in the fit leading to incorrect baseline
* subtraction.
                  IF ( SKEW .GT. 0D0 ) THEN
                     STDEVM = 0.5D0 * ABS( MODE - PERVAL( 1 ) )
                  ELSE
                     STDEVM = 0.5D0 * ABS( MODE - PERVAL( 4 ) )
                  END IF

                  LOW = NUM_DTO<T>( MODE - DBLE( CLIP( J ) ) * STDEVM )
                  HIGH = NUM_DTO<T>( MODE + DBLE( CLIP ( J ) ) * STDEVM )
               ELSE
                  LOW = NUM_DTO<T>( MEDIAN - DBLE( CLIP( J ) ) * STDEV )
                  HIGH = NUM_DTO<T>( MEDIAN + DBLE( CLIP ( J ) ) * STDEV )
               END IF

*  Replace the values in the output array outside the range with the
*  new values, otherwise copy from the input to the output NDF.
               CALL KPG1_THRS8<T>( BAD, DTEL, %VAL( CNF_PVAL( IPRLIN ) ),
     :                             LOW, HIGH, VAL__BAD<T>, VAL__BAD<T>,
     :                             %VAL( CNF_PVAL( IPWORK ) ),
     :                             NREPLO, NREPHI, STATUS )

               IF ( NREPLO .GT. 0 .OR. NREPHI .GT. 0 ) THEN

*  Multiply the values by 0 to form a mask of the rejected elements.
                  CALL KPG1_CMUL8<T>( BAD, DTEL,
     :                                %VAL( CNF_PVAL( IPWORK ) ),
     :                                0.0D0, %VAL( CNF_PVAL( IPMASK ) ),
     :                                NBAD, STATUS )

*  Add the mask to the array being fitted.
                  CALL VEC8_ADD<T>( BAD, DTEL,
     :                             %VAL( CNF_PVAL( IPLINE ) ),
     :                             %VAL( CNF_PVAL( IPMASK ) ),
     :                             %VAL( CNF_PVAL( IPWORK ) ),
     :                             IERR, NERR, STATUS )

*  Copy the flagged array to the returned, but permuted, array.
                  CALL VEC8_<T>TO<T>( BAD, DTEL,
     :                               %VAL( CNF_PVAL( IPWORK ) ),
     :                               %VAL( CNF_PVAL( IPLINE ) ),
     :                               IERR, NERR, STATUS )

*  Paste the line with flagged features back into the raw permuted data.
                  OFFSET( 1 ) = ( I - 1 ) * DTEL
                  CALL KPG1_PAST8<T>( .FALSE., .TRUE., OFFSET, IDIMS,
     :                               DTEL, %VAL( CNF_PVAL( IPLINE ) ),
     :                               ODIMS, EL,
     :                               %VAL( CNF_PVAL( IPPERM ) ),
     :                               STATUS )
               END IF
            END IF
         END DO

*  Restore the original permutation of the supplied array, but now it
*  has pixels with the largest residuals masked.
         CALL KPS1_PRMX<T>( NDF__MXDIM, DIMPRM, DIMS, PERMBA,
     :                      %VAL( CNF_PVAL( IPPERM ) ), ARRAY, STATUS )

      END DO

  999 CONTINUE

*  Free workspaces arrays.
      CALL PSX_FREE( IPLINE, STATUS )
      CALL PSX_FREE( IPRLIN, STATUS )
      CALL PSX_FREE( IPPERM, STATUS )
      CALL PSX_FREE( IPPRES, STATUS )
      CALL PSX_FREE( IPMASK, STATUS )
      CALL PSX_FREE( IPWORK, STATUS )
      CALL PSX_FREE( IPRES, STATUS )
      CALL PSX_FREE( IPWRK2, STATUS )
      CALL PSX_FREE( IPWRK1, STATUS )
      CALL PSX_FREE( IPBS, STATUS )
      CALL PSX_FREE( IPAS, STATUS )

      END
