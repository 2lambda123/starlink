      SUBROUTINE KPS1_MFEB<T>( COMPRS, DIMS, BDIMS, BARRAY, MASK,
     :                         STATUS )
*+
*  Name:
*     KPS1_MFEBx

*  Purpose:
*     Transfers bad pixels from an array binned along one or more
*     axes to an unbinned mask.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_MFEBx( COMPRS, DIMS, BDIMS, BARRAY, MASK, STATUS )

*  Description:
*     This transfers bad pixels from the supplied binned array
*     to sections within the supplied unbinned array.  It is assumed
*     that the binned and unbinned arrays have the same origin, and that
*     the binned array fully covers the unbinned array.  The routine
*     accounts for the case where binned elements extend beyond the
*     the unbinned data.

*  Arguments:
*     COMPRS( NDF__MXDIM ) = INTEGER (Given)
*        The binning factors, i.e. the number of elements of the 
*        original unbinned array along each axis that were combined to
*        form one element of ARRAY.  (Although binned elements with
*        the highest indices may have fewer contributing unbinned
*        elements than COMPRS, since the binned array must at least
*        span the unbinned data, the binning factor is a constant for 
*        all binned elements.)
*     CLIP( NCLIP ) = REAL (Given)
*        The clipping levels in standard deviations for the rejection 
*        of outliers.
*     DIMS( NDF__MXDIM ) = INTEGER (Given)
*        The dimensions of the unbinned array.
*     BDIMS( NDF__MXDIM ) = INTEGER (Given)
*        The dimensions of the binned array.
*     BARRAY( * ) = ? (Given)
*        The binned array.
*     MASK( * ) = BYTE (Given & Returned)
*        The unbinned mask array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for double-precision and real data types:
*     replace "x" in the routine name by D or R as appropriate.  The
*     BARRAY argument supplied to the routine must have the data type
*     specified.

*  Copyright:
*     Copyright (C) 2007, 2009, 2011 Science & Technology Facilities
*     Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59, Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2007 August 16 (MJC):
*        Original version.
*     2007 September 6 (MJC):
*        No longer write to the array itself but log the feature mask
*        in the new BYTE MASK that replaces the ARRAY argument. 
*     2009 August 7 (MJC):
*        Cope with extra bins in binned array for original elements
*        beyond an integer multiple of the bin size.  Thus cannot assume
*        the dimensions of the binned array as being DIMS(I)/COMPRS(I)
*        for the ith dimension.  Instead the new BDIMS argument supplies
*        the actual dimensions of the binned array.
*     2011 May 19 (MJC):
*        Fixed bug occurring when the final compressed section has one
*        fewer elements than the other sections.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'NDF_PAR'          ! NDF constants
      INCLUDE 'PRM_PAR'          ! Bad values
      INCLUDE 'CNF_PAR'          ! For CNF_PVAL

*  Arguments Given:
      INTEGER COMPRS( NDF__MXDIM )
      INTEGER DIMS( NDF__MXDIM )
      INTEGER BDIMS( NDF__MXDIM )
      <TYPE> BARRAY( * )

*  Arguments Given and Returned:
      BYTE MASK( * )
      
*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER BIND( NDF__MXDIM ) ! Indices from vectorised binned array
      INTEGER BEL                ! Number of elements in binned array
      INTEGER ECMPRS( NDF__MXDIM ) ! Effective compression factor
      INTEGER EL                 ! Number of elements in unbinned array
      INTEGER FEL                ! Number of elements in final section
      LOGICAL FINAL              ! Final incomplete section?
      INTEGER I                  ! Loop counter
      INTEGER IPSECT             ! Pointer to unbinned bad section
      INTEGER J                  ! Loop counter
      INTEGER LBND( NDF__MXDIM ) ! Section lower bounds
      INTEGER OFFSET( NDF__MXDIM ) ! Offset of section wrt unbinned
      INTEGER REM                ! Number of unbinned elements stored
                                 ! in incomplete bin along a dimension
      INTEGER SEL                ! Maximum number of elements in section

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Obtain the maximum number of original elements in a binned element,
*  and the total number of elements in both the binned and unbinned
*  arrays.
      EL = 1
      BEL = 1
      SEL = 1
      FEL = 1
      DO I = 1, NDF__MXDIM
         LBND( I ) = 1
         EL = EL * DIMS( I )
         BEL = BEL * BDIMS( I )
         SEL = SEL * COMPRS( I )

*  Determine the number of mask-array elements generated from the 
*  final binned element.  A full bin would correspond to COMPRS( I ) 
*  elements.  
*  The expression will evaluate to 0 for an each match or for 
*  uncompressed dimensions
         REM = COMPRS( I ) - ( BDIMS( I ) * COMPRS( I ) - DIMS( I ) )
         IF ( REM .GT. 0 ) THEN
            ECMPRS( I ) = REM
         ELSE
            ECMPRS( I ) = COMPRS( I )
         END IF
         
         FEL = FEL * ECMPRS( I )
      END DO

*  Initialise the MASK.
      DO I = 1, EL
         MASK( I ) = 0
      END DO

*  Allocate some work space for the section corresponding to a single
*  element in the binned array.  This is the maximum size needed for
*  each binned element.  The final element along a dimension may
*  transfer fewer bad values than this because the original dimension
*  was not an integer multiple of the compression factor.
      CALL PSX_CALLOC( SEL, '_BYTE', IPSECT, STATUS )
      IF ( STATUS .NE. SAI__OK ) GOTO 999

*  Fill it with the bad value.
      CALL KPG1_FILLB( VAL__BADB, SEL, %VAL( CNF_PVAL( IPSECT ) ),
     :                 STATUS )

*  Search for bad pixels.  Convert the vectorised index of each bad
*  pixel into n-dimensional pixel indices.
      I = 1
      DO WHILE ( I .LE. BEL )
         IF ( BARRAY( I ) .EQ. VAL__BAD<T> ) THEN
            CALL KPG1_VEC2N( 1, I, NDF__MXDIM, LBND, BDIMS, BIND, 
     :                       STATUS )

*  Determine the offset of the section of bad pixels with respect to the
*  origin of the unbinned array.  Also determine if it is a final
*  incomplete section.
            FINAL = .FALSE.
            DO J = 1, NDF__MXDIM
               OFFSET( J ) = ( BIND( J ) - 1 ) * COMPRS( J )
               FINAL = FINAL .OR. 
     :                 OFFSET( J ) + COMPRS( J ) .GT. DIMS( J )
            END DO

*  Transfer only what can be accommodated in the mask (that has the
*  same dimensions as the unbinned array.
            IF ( FINAL ) THEN

*  Paste the bad-pixel section into the appropriate place within the
*  unbinned array, using the smaller dimensions.
               CALL KPG1_PASTB( .FALSE., .TRUE., OFFSET, ECMPRS, FEL,
     :                          %VAL( CNF_PVAL( IPSECT ) ), DIMS, EL,
     :                          MASK, STATUS )
            ELSE

*  Paste the bad-pixel section into the appropriate place within the
*  unbinned array.
               CALL KPG1_PASTB( .FALSE., .TRUE., OFFSET, COMPRS, SEL,
     :                          %VAL( CNF_PVAL( IPSECT ) ), DIMS, EL,
     :                          MASK, STATUS )
            END IF
         END IF
         I = I + 1
      END DO

      CALL PSX_FREE( IPSECT, STATUS )

  999 CONTINUE
      END
