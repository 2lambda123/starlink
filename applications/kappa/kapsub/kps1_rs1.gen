      SUBROUTINE KPS1_RS1<T>( NDIM, IDIM, FACTS, DIMI, DIMO, INTERP, 
     :                        PARAMS, HASVAR, HASQUA, HASAXI, DATI, 
     :                        VARI, QUAI, AXI, BAD, DATWKI, VARWKI, 
     :                        QUAWKI, DATWKO, VARWKO, QUAWKO, DATO, 
     :                        VARO, QUAO, AXO, STATUS )
*+
*  Name:
*     KPS1_RS1<T>

*  Purpose:
*     Resamples one dimension of an array by squashing or stretching.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL KPS1_RS1<T>( NDIM, IDIM, FACTS, DIMI, DIMO, INTERP, PARAMS,
*                       HASVAR, HASQUA, HASAXI, DATI, VARI, QUAI,
*                       AXI, BAD, DATWKI, VARWKI, QUAWKI,
*                       DATWKO, VARWKO, QUAWKO, DATO, VARO, 
*                       QUAO, AXO, STATUS )

*  Description:
*     This routine resamples a data and associated variance, quality and
*     axis arrays by applying a linear transformation to it along a 
*     single dimension.

*  Arguments:
*     NDIM = INTEGER (Given)
*        The number of dimensions in the arrays.
*     IDIM = INTEGER (Given)
*        The index of the dimension along which to resample.
*     FACTS( NDIM ) = DOUBLE PRECISION (Given)
*        The expansion factors for each axis.
*     DIMI( NDIM ) = INTEGER (Given)
*        The dimensions of the input arrays DATI and VARI.
*     DIMO( NDIM ) = INTEGER (Given)
*        The dimensions of the output arrays DATO and VARO.
*     INTERP = INTEGER (Given)
*        The resampling scheme as passed to AST_RESAMPLE<T>.
*     PARAMS( * ) = DOUBLE PRECISION (Given)
*        The auxiliary resampling parameters as passed to 
*        AST_RESAMPLE<T>.
*     HASVAR = LOGICAL (Given)
*        Whether the variance is to be resampled.
*     HASQUA = LOGICAL (Given)
*        Whether the quality is to be resampled.
*     HASAXI = LOGICAL (Given)
*        Whether the AXIS Centres are to be resampled.
*     DATI( * ) = <TYPE> (Given)
*        The input data array.
*     VARI( * ) = <TYPE> (Given)
*        The input variance array (only used if HASVAR is true).
*     QUAI( * ) = BYTE (Given)
*        The input quality array (only used if HASQUA is true).
*     AXI( * ) = DOUBLE PRECISION (Given)
*        The input AXIS Centre array (only used if HASAXI is true).
*     BAD = LOGICAL (Given and Returned)
*        On input, a .TRUE. value indicates that the input data 
*        (and variance) arrays may contain bad pixels.  On exit, it will
*        be set only if the output data (and variance) arrays actually
*        do contain bad pixels.
*     DATWKI( * ) = <TYPE> (Returned)
*        A workspace array, with DIMI( IDIM ) elements.
*     VARWKI( * ) = <TYPE> (Returned)
*        A workspace array, with DIMI( IDIM ) elements.  Only used if
*        HASVAR is true.
*     QUAWKI( * ) = BYTE (Returned)
*        A workspace array, with DIMI( IDIM ) elements.  Only used if
*        HASQUA is true.
*     DATWKO( * ) = <TYPE> (Returned)
*        A workspace array, with DIMO( IDIM ) elements.
*     VARWKO( * ) = <TYPE> (Returned)
*        A workspace array, with DIMO( IDIM ) elements.  Only used if
*        HASVAR is true.
*     QUAWKO( * ) = BYTE (Returned)
*        A workspace array, with DIMO( IDIM ) elements.  Only used if
*        HASQUA is true.
*     DATO( * ) = <TYPE> (Returned)
*        The output data array.
*     VARO( * ) = <TYPE> (Returned)
*        The output variance array (only used if HASVAR is true).
*     QUAO( * ) = BYTE (Returned)
*        The output quality array (only used if HASQUA is true).
*     AXO( * ) = DOUBLE PRECISION (Returned)
*        The output AXIS Centre array (only used if HASAXI is true).
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Copyright:
*     Copyright (C) 2002 Central Laboratory of the Research Councils.
*     Copyright (C) 2006 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2007 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     MBT: Mark Taylor (Starlink)
*     DSB: David Berry (STARLINK)
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     3-JAN-2002 (MBT):
*        Original version.
*     16-JAN-2002 (DSB):
*        Added propagation of Quality and AXIS Centres.
*     2006 April 12 (MJC):
*        Remove unused variable and wrapped long lines.
*     18-MAY-2007 (DSB):
*        Added argument FACTS.
*     3-JULY-2007 (DSB):
*        Corrected calculation of the Mapping parameters.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants
      INCLUDE 'NDF_PAR'          ! NDF system constants
      INCLUDE 'AST_PAR'          ! AST system declarations and constants

*  Arguments Given:
      INTEGER NDIM
      INTEGER IDIM
      DOUBLE PRECISION FACTS( NDIM )
      INTEGER DIMI( NDIM )
      INTEGER DIMO( NDIM )
      INTEGER INTERP
      DOUBLE PRECISION PARAMS( * )
      LOGICAL HASVAR
      LOGICAL HASQUA
      LOGICAL HASAXI
      <TYPE> DATI( * )
      <TYPE> VARI( * )
      BYTE QUAI( * )
      DOUBLE PRECISION AXI( * )

*  Arguments Given and Returned:
      LOGICAL BAD

*  Arguments Returned:
      <TYPE> DATWKI( * )
      <TYPE> VARWKI( * )
      BYTE QUAWKI( * )
      <TYPE> DATWKO( * )
      <TYPE> VARWKO( * )
      BYTE QUAWKO( * )
      <TYPE> DATO( * )
      <TYPE> VARO( * )
      BYTE QUAO( * )
      DOUBLE PRECISION AXO( * )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      DOUBLE PRECISION TOL       ! Tolerance for AST_RESAMPLE<T>
      DOUBLE PRECISION T1, T2, T3! Temporary storage
      INTEGER FLAGS              ! Flags for AST_RESAMPLE<T>
      INTEGER I                  ! Loop variable
      INTEGER IO                 ! Offset into array
      INTEGER J                  ! Loop variable
      INTEGER MAP                ! AST Mapping for 1d resample
      INTEGER MAXPIX             ! Maximum linear approximation scale
      INTEGER NBAD               ! Number of bad pixels
      INTEGER OFFI               ! Offset into input arrays
      INTEGER OFFO               ! Offset into output arrays
      INTEGER POS( NDF__MXDIM )  ! Position in arrays
      INTEGER STRIDI( NDF__MXDIM ) ! Per-dimension strides, input arrays
      INTEGER STRIDO( NDF__MXDIM ) ! Per-dimension strides, output arrays
      LOGICAL DONE               ! Loop completion flag

*.

*  Check the inherited status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Construct a Mapping to do the transformation.  It must map between
*  coordinate systems in which the coordinate of the centre of a pixel
*  is given by its pixel index.
      T1 = 0.5D0*DBLE( DIMI( IDIM ) + 1 )
      T2 = 0.5D0*DBLE( DIMO( IDIM ) + 1 )
      T3 = DBLE( DIMI( IDIM ) ) + 0.5D0
      MAP = AST_WINMAP( 1, T1, T3, T2, ( T3 - T1 )*FACTS( IDIM ) + T2,
     :                  ' ', STATUS )
      MAP = AST_SIMPLIFY( MAP, STATUS )

*  Get the strides along each dimension of the input and output arrays.
      STRIDI( 1 ) = 1
      STRIDO( 1 ) = 1
      DO I = 2, NDIM
         STRIDI( I ) = STRIDI( I - 1 ) * DIMI( I - 1 )
         STRIDO( I ) = STRIDO( I - 1 ) * DIMO( I - 1 )
      END DO

*  Resample the Data and Variance arrays.
*  ======================================

*  Initialise the offsets into the input and output arrays.
      OFFI = 1
      OFFO = 1

*  Set the initial position in the array.
      DO I = 1, NDIM
         POS( I ) = 1
      END DO

*  Set constant values for the resampling routine.
      FLAGS = 0
      IF ( HASVAR ) FLAGS = FLAGS + AST__USEVAR
      IF ( BAD ) FLAGS = FLAGS + AST__USEBAD
      TOL = 0.1D0
      MAXPIX = DIMI( IDIM ) + DIMO( IDIM )

*  Loop over all the lines along the resampling dimension.
      NBAD = 0
      DONE = .FALSE.
      DO WHILE ( .NOT. DONE )
 
*  Copy the line we will resample from the input arrays into work
*  buffers.
         IO = OFFI
         IF ( HASVAR ) THEN
            DO I = 1, DIMI( IDIM )
               DATWKI( I ) = DATI( IO )
               VARWKI( I ) = VARI( IO )
               IO = IO + STRIDI( IDIM )
            END DO
         ELSE
            DO I = 1, DIMI( IDIM )
               DATWKI( I ) = DATI( IO )
               IO = IO + STRIDI( IDIM )
            END DO
         END IF

*  Perform the one-dimensional resampling.
         NBAD = NBAD + AST_RESAMPLE<T>( MAP, 1, 1, DIMI( IDIM ), DATWKI,
     :                                  VARWKI, INTERP, AST_NULL,
     :                                  PARAMS, FLAGS, TOL, MAXPIX, 
     :                                  VAL__BAD<T>, 1, 1, DIMO( IDIM ),
     :                                  1, DIMO( IDIM ), DATWKO, VARWKO,
     :                                  STATUS )

*  Copy the resampled line from work buffers into the output arrays.
         IO = OFFO
         IF ( HASVAR ) THEN
            DO I = 1, DIMO( IDIM )
               DATO( IO ) = DATWKO( I )
               VARO( IO ) = VARWKO( I )
               IO = IO + STRIDO( IDIM )
            END DO
         ELSE
            DO I = 1, DIMO( IDIM )
               DATO( IO ) = DATWKO( I )
               IO = IO + STRIDO( IDIM )
            END DO
         END IF

*  Locate the start of the next line in the input arrays.
         J = 1
   1     CONTINUE
         IF ( J .LE. NDIM ) THEN
            IF ( J .EQ. IDIM ) THEN
               J = J + 1
               GO TO 1
            ELSE
               IF ( POS( J ) .LT. DIMI( J ) ) THEN
                  OFFI = OFFI + STRIDI( J )
                  OFFO = OFFO + STRIDO( J )
                  POS( J ) = POS( J ) + 1
               ELSE
                  OFFI = OFFI - ( DIMI( J ) - 1 ) * STRIDI( J )
                  OFFO = OFFO - ( DIMO( J ) - 1 ) * STRIDO( J )
                  POS( J ) = 1
                  J = J + 1
                  GO TO 1
               END IF
            END IF
         ELSE
            DONE = .TRUE.
         END IF
      END DO

*  Update information about whether the output array contains bad
*  pixels.
      BAD = NBAD .GT. 0

*  Resample the Quality array.
*  ===========================
      IF( HASQUA ) THEN

*  Initialise the offsets into the input and output arrays.
         OFFI = 1
         OFFO = 1

*  Set the initial position in the array.
         DO I = 1, NDIM
            POS( I ) = 1
         END DO

*  Set constant values for the resampling routine.
         FLAGS = 0
         TOL = 0.1D0
         MAXPIX = DIMI( IDIM ) + DIMO( IDIM )

*  Loop over all the lines along the resampling dimension.
         NBAD = 0
         DONE = .FALSE.
         DO WHILE ( .NOT. DONE )
 
*  Copy the line we will resample from the input arrays into work
*  buffers.
            IO = OFFI
            DO I = 1, DIMI( IDIM )
               QUAWKI( I ) = QUAI( IO )
               IO = IO + STRIDI( IDIM )
            END DO

*  Perform the one-dimensional resampling.
            NBAD = NBAD + AST_RESAMPLEUB( MAP, 1, 1, DIMI( IDIM ), 
     :                                    QUAWKI, QUAWKI, INTERP, 
     :                                    AST_NULL, PARAMS, FLAGS, TOL, 
     :                                    MAXPIX, VAL__BADUB, 1, 1, 
     :                                    DIMO( IDIM ), 1, DIMO( IDIM ),
     :                                    QUAWKO, QUAWKO, STATUS )

*  Copy the resampled line from work buffers into the output arrays.
            IO = OFFO
            DO I = 1, DIMO( IDIM )
               QUAO( IO ) = QUAWKO( I )
               IO = IO + STRIDO( IDIM )
            END DO

*  Locate the start of the next line in the input arrays.
            J = 1
   2        CONTINUE
            IF ( J .LE. NDIM ) THEN
               IF ( J .EQ. IDIM ) THEN
                  J = J + 1
                  GO TO 2
               ELSE
                  IF ( POS( J ) .LT. DIMI( J ) ) THEN
                     OFFI = OFFI + STRIDI( J )
                     OFFO = OFFO + STRIDO( J )
                     POS( J ) = POS( J ) + 1
                  ELSE
                     OFFI = OFFI - ( DIMI( J ) - 1 ) * STRIDI( J )
                     OFFO = OFFO - ( DIMO( J ) - 1 ) * STRIDO( J )
                     POS( J ) = 1
                     J = J + 1
                     GO TO 2
                  END IF
               END IF
            ELSE
               DONE = .TRUE.
            END IF
         END DO

      END IF

*  Resample the Axis array.
*  ========================
      IF( HASAXI ) THEN
         FLAGS = AST__USEBAD
         NBAD = AST_RESAMPLED( MAP, 1, 1, DIMI( IDIM ), AXI, AXI, 
     :                         INTERP, AST_NULL, PARAMS, FLAGS, TOL, 
     :                         MAXPIX, VAL__BADD, 1, 1, DIMO( IDIM ), 
     :                         1, DIMO( IDIM ), AXO, AXO, STATUS )
      END IF

      END
