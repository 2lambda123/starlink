## Process this file with automake to produce Makefile.in

SUBDIRS = @subdirs@

bin_SCRIPTS = $(PUBLICSCRIPTS) $(DYNSCRIPTS) $(STYLE_FILES)

bindatadir = $(bindir)
bindata_DATA = $(STYLE_FILES) $(DATA_FILES) $(MISC_FILES)

LOCAL_LINK = kapsub/libkapsub.la atools/libatools.la ccdpack/libccdpack.la `$(srcdir)/kappa_nogks_link_adam`

bin_MONOLITHS = kappa_mon kapview_mon ndfpack_mon
kappa_mon_SOURCES = kappa_mon.f $(KAPPA_F_ROUTINES) $(KAPPA_F2_ROUTINES)
kappa_mon_LDADD = $(LOCAL_LINK)
kappa_mon_TASKS = $(KAPPA_TASKS)

kapview_mon_SOURCES = kapview_mon.f $(KAPVIEW_F_ROUTINES)
kapview_mon_LDADD = $(LOCAL_LINK)
kapview_mon_TASKS = $(KAPVIEW_TASKS)

ndfpack_mon_SOURCES = ndfpack_mon.f $(NDFPACK_F_ROUTINES)
ndfpack_mon_LDADD = $(LOCAL_LINK)
ndfpack_mon_TASKS = $(NDFPACK_TASKS)

#  List of Fortran routines required for building the package.  This is
#  just a list of all the Fortran source files (excluding BLOCK DATA
#  routines and the main routine, which are treated separately).

F_ROUTINES = $(CCDPACK_F_ROUTINES) $(ATOOLS_F_ROUTINES) \
             $(KAPPA_F_ROUTINES) $(KAPPA_F2_ROUTINES) $(KAPSUB_F_ROUTINES) \
             $(KAPVIEW_F_ROUTINES) $(MEM_F_ROUTINES) \
             $(NDFPACK_F_ROUTINES) $(KAPVIEW_MONO_SOURCE) \
             $(KAPPA_MONO_SOURCE) $(NDFPACK_MONO_SOURCE)

KAPVIEW_F_ROUTINES = \
ardplot.f colcomp.f contour.f \
cursor.f drawsig.f drawnorth.f display.f elprof.f \
gdclear.f gdnames.f gdset.f gdstate.f \
linplot.f lutable.f \
lutsave.f lutview.f lutedit.f \
mlinplot.f paldef.f palentry.f \
palread.f palsave.f piccur.f picdef.f \
picempty.f picentire.f picin.f piclabel.f \
piclist.f picsel.f pictrans.f picvis.f \
scatter.f vecplot.f 

# Special kappa f routines for commands which clash with the C 
# run-time-library. These are separate because the names of the atask
# actions (and consequently the names of the interface files) cannot 
# be generated by simply removing ".f" from the fortran file names.
# The name of the associated atask actions are instead derived from the 
# .ifl file names listed in KAPPA_F2_IFLS.
KAPPA_F2_ROUTINES = kap_div.f kap_pow.f
KAPPA_F2_IFLS = div.ifl pow.ifl

#  Kappa f files for which there are no corresponding iraf .par files.
KAPPA_F3_ROUTINES = kaphelp.f

#  All other kappa .f files.
KAPPA_F1_ROUTINES = \
add.f aperadd.f ardgen.f ardmask.f \
block.f cadd.f calc.f calpol.f cdiv.f \
centroid.f chpix.f cmult.f collapse.f compadd.f \
compave.f compick.f convolve.f copybad.f \
creframe.f csub.f errclip.f \
expon.f ffclean.f \
fillbad.f fitsurface.f flip.f fourier.f \
gausmooth.f glitch.f globals.f \
histat.f histeq.f histogram.f \
laplace.f kstest.f \
logar.f look.f lucy.f manic.f \
makesurface.f maths.f median.f \
mstats.f mult.f noglobals.f nomagic.f \
normalize.f numb.f outset.f parget.f paste.f \
permaxes.f pixdupe.f psf.f rift.f \
regrid.f rotate.f segment.f setmagic.f shadow.f slide.f \
sqorst.f stats.f sub.f substitute.f surfit.f thresh.f \
trandat.f trig.f wiener.f zaplin.f \
listmake.f listshow.f profile.f wcsalign.f wcstran.f kapversion.f

#  kappa routines for which the atask action name can be derived from the 
#  the f file name by remving the .f file suffix.
KAPPA_F_ROUTINES = $(KAPPA_F1_ROUTINES) $(KAPPA_F3_ROUTINES)


MEM_F_ROUTINES = mem2d.f

NDFPACK_F_ROUTINES = \
axconv.f axlabel.f axunits.f erase.f \
fitsdin.f fitsexp.f fitsimp.f fitsin.f \
fitslist.f fitsmod.f fitstext.f \
hiscom.f hislist.f hisset.f \
native.f ndfcopy.f ndftrace.f \
setaxis.f setbad.f setbb.f setbound.f \
setext.f setlabel.f setnorm.f setorigin.f \
setsky.f settitle.f settype.f \
setunits.f setvar.f \
wcsadd.f wcsattrib.f wcscopy.f wcsframe.f wcsremove.f wcsshow.f \
chain.f reshape.f showqual.f setqual.f remqual.f qualtobad.f

MONO_SOURCE = $(KAPPA_MONO_SOURCE) $(KAPVIEW_MONO_SOURCE) \
              $(NDFPACK_MONO_SOURCE)

KAPVIEW_MONO_SOURCE = kapview_mon.f
KAPPA_MONO_SOURCE = kappa_mon.f
NDFPACK_MONO_SOURCE = ndfpack_mon.f

#  List of ancillary data files (all types).

DATA_FILES = $(NDFS) $(NON_NDFS)

#  List of ancillary data files (non-NDFs).

NON_NDFS = m31_arm.FIT ccdframec.FIT 

#  List of ancillary data files (NDFs).

NDFS = $(LUTS) $(TEST_FILES) 

#  Define the standard colour tables.

LUTS = luts/bgyrw_lut.sdf luts/cont_lut.sdf luts/fc_lut.sdf \
luts/heat_lut.sdf luts/ikon_lut.sdf luts/warm_lut.sdf	    \
luts/ramps_lut.sdf luts/spectrum_lut.sdf luts/zebra_lut.sdf \
luts/grey_lut.sdf luts/logo_lut.sdf luts/cold_lut.sdf

#  Define the package test data (NDFs only!).

TEST_FILES = data/ccdframec.sdf data/comwest.sdf data/spectrum.sdf    \
data/m31.sdf data/iras.sdf data/m31_issa_100.sdf data/m31_issa_60.sdf \
data/m31_issa_25.sdf data/m31_issa_12.sdf data/m57.sdf data/logo.sdf  \
data/scupol_i.sdf data/scupol_p.sdf data/scupol_ang.sdf		      \
data/m31_issa_12a.sdf data/cobe.sdf data/scumos.sdf

#  Define the plotting style files.

STYLE_FILES = styles/kappa_style.def styles/kappa_ardplot_style.def   \
styles/kappa_lutview_style.def styles/kappa_keystyle.def	      \
styles/kappa_linplot_keystyle.def styles/kappa_vecplot_keystyle.def   \
styles/kappa_display_keystyle.def styles/sty0 styles/sty1 styles/sty2 \
styles/sty3 styles/kappa_contour_keystyle.def			      \
styles/kappa_drawnorth_style.def styles/kappa_linplot_style.def	      \
styles/style.def

#  Define the package demo files for use with stardemo.tcl

DEMO_FILES = kappa.demo v0.14-5.demo v0.15-9.demo v0.16-3.demo v1.0.demo
TEST_DEMO = v1.0

#  Other miscellaneous files in kappa-source.tar
MISC_FILES = misc/cpoint.bit misc/dpoint.bit misc/minus.bit \
misc/plus.bit misc/unzoom.bit misc/uparrow.bit lutedit.help \
misc/blank.bit


#  Define the tasks for each monolith.

KAPPA_TASKS = $(KAPPA_F_ROUTINES:.f=) $(KAPPA_F2_IFLS:.ifl=)

KAPVIEW_TASKS = $(KAPVIEW_F_ROUTINES:.f=)

NDFPACK_TASKS = $(NDFPACK_F_ROUTINES:.f=)


#  List of public script files.  These are scripts which form part of
#  the package and will be required by users of it.  They will be
#  installed in the $(INSTALL_BIN) directory with execute permission
#  set.

PUBLICSCRIPTS = $(SHELLSCRIPTS) $(ICL_FILES) $(TCL_FILES) \
	$(AWKSCRIPTS)

SHELLSCRIPTS = fitsedit.csh fitshead.csh lutread.csh multiplot.csh \
pazo.csh s2p

AWKSCRIPTS = nfi.awk

ICL_FILES = colstar.icl fancylook.icl flatfield.icl kappa_proc.icl \
multistat.icl unsharpmask.icl

TCL_FILES = tkast.tcl dialog.tcl adamtask.tcl adamMessageRelay \
stardemo.tcl stardemo_procs.tcl pazo.csh lutedit.tcl

#  Define the set of all interface files.

IFL_FILES = $(KAPPA_IFL_FILES) $(KAPVIEW_IFL_FILES) $(NDFPACK_IFL_FILES)
#	$(MONO_IFL)
# $(MEM_IFL)

#  Define the interface files required for compilation.

KAPPA_IFL_FILES = $(KAPPA_F_ROUTINES:.f=.ifl) $(KAPPA_F2_IFLS)

KAPVIEW_IFL_FILES = $(KAPVIEW_F_ROUTINES:.f=.ifl)

NDFPACK_IFL_FILES = $(NDFPACK_F_ROUTINES:.f=.ifl)

MEM_IFL = $(MEM_F_ROUTINES:.f=.ifl)

MONO_IFL = $(MONO_SOURCE:.f=.ifl)

DYNSCRIPTS = kappa.csh kappa.icl kappa.sh

#  Generate ifl and startup scripts from the ifd file and then do any 
#  necessary post processing of the generated files to overcome 
#  deficiencies in ifd2star
$(IFL_FILES) $(DYNSCRIPTS): kappa.ifd
	$(IFD2STAR) kappa
	sed -e "s#picgrid 'picdef mode=array fraction=1.0#picgrid 'picdef array 1.0#g" kappa.csh > temp
	mv temp kappa.csh
	sed -e "s#picxy 'picdef mode=xy fraction=1.0#picxy 'picdef xy 1.0#g" kappa.csh > temp
	mv temp kappa.csh

	sed -e "s#picg(rid) picdef mode=array fraction=1.0#picg(rid) picdef array 1.0#g" kappa.icl > temp
	mv temp kappa.icl
	sed -e "s#picx(y) picdef mode=xy fraction=1.0#picx(y) picdef xy 1.0#g" kappa.icl > temp
	mv temp kappa.icl
      
	sed -e 's#prefix=""#prefix=\\"\\"#g' kappa.csh > temp
	mv temp kappa.csh


# Help source file
starhelp_DATA = kappa.shl

.hlp.shl:
	@HLIB@ $<

kappa.hlp: $(KAPPA_F1_ROUTINES) $(KAPVIEW_F_ROUTINES) $(NDFPACK_F_ROUTINES) kappa_master.hlp
	cat $(KAPPA_F1_ROUTINES) $(KAPVIEW_F_ROUTINES) $(NDFPACK_F_ROUTINES) > all.f
	@PROHLP@ in=all.f out=all.hlp single=no
	cat kappa_master.hlp all.hlp > kappa.hlp
	-rm -f all.hlp

# Fixup scripts with bin location
# The scripts needs to have installation locations edited into them
edit = sed \
	-e 's,@bindir\@,$(bindir),g' \
	-e 's,@VERSION\@,$(VERSION),g'

multiplot.csh: multiplot.csh.in
	-rm -f multiplot.csh.tmp multiplot.csh
	$(edit) \
	    -e 's,@edited_input\@,start: produced from multiplot.csh.in by Makefile.am,' \
	    $(srcdir)/multiplot.csh.in > multiplot.csh.tmp
	mv multiplot.csh.tmp multiplot.csh

