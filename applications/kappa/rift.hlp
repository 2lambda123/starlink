.help rift Starlink kappa
.nf
Adds a scalar to a section of an NDF data structure to correct
rift-valley defects.

Usage:

   rift in scalar out section

Description:

   The routine adds a scalar (i.e. constant) value to each pixel of
   an NDF's data array within a sub-section to produce a new NDF
   data structure.

Parameters

For information on individual parameters, select from the list below:

IN

IN = NDF (Read)
   Input NDF data structure, to which the value is to be added.

OUT

OUT = NDF (Write)
   Output NDF data structure.

SCALAR

SCALAR = _DOUBLE (Read)
   The value to be added to the NDF's data array within the
   section.

SECTION

SECTION = LITERAL (Read)
   The pixels to which a scalar is to be added.  This is defined
   as an NDF section, so that ranges can be defined along any
   axis, and be given as pixel indices or axis (data)
   co-ordinates.  So for example "3,4,5" would select the pixel
   at (3,4,5); "3:5," would select all elements in columns 3 to
   5; ",4" selects line 4.  See "NDF Sections" in SUN/95, or the
   online documentation for details.

TITLE

TITLE = LITERAL (Read)
   Value for the title of the output NDF.  A null value will cause
   the title of the NDF supplied for parameter IN to be used
   instead. [!]

Examples

rift aa 10.7 bb "100:105" 20
   This adds 10 in the columns 100 to 105 in the data array of
   the NDF called aa and stores the result in the NDF called bb.
   In other respects bb is a copy of aa.

rift cubein -100 cubeout ",,4"
   This adds -100 to all values in the fourth plane of the data
   array of the NDF called cubein and stores the result in the
   NDF called cubeout.  In other respects cubeout is a copy of
   cubeout.

rift in=aa scalar=2 out=bb section="-10:5,200~9"
   This adds 2 to the rectangular section between columns -10 to
   5 and lines 196 to 204 of the data array of the NDF called aa
   and stores the result in the NDF called bb.  In other respects
   bb is a copy of aa.

Notes

For similar operations performed on a subset, use the appropriate
application to process the relevant section and then run PASTE to
paste the result back into the full array.

Related_Applications

   KAPPA: CADD, CHPIX, GLITCH, PASTE, SEGMENT, ZAPLIN; Figaro: CSET,
   ICSET, NCSET, TIPPEX.

Authors

MJC: Malcolm J. Currie (STARLINK)

DSB: David S. Berry (STARLINK)

History

 1991 October 31 (MJC):
    Original version based on RFWS's CADD.

 1995 April 28 (MJC):
    Used the SECTION parameter instead of pixel bounds.  Made Usage
    and Examples Lowercase.  Added Related Applications, Examples,
    and Implementation Status.

 5-JUN-1998 (DSB):
    Added propagation of the WCS component.

Implementation_Status

   -  This routine correctly processes the AXIS, DATA, QUALITY,
   VARIANCE, LABEL, TITLE, UNITS, WCS and HISTORY components of an NDF
   data structure and propagates all extensions.

   -  Processing of bad pixels and automatic quality masking are
   supported.

   -  The bad-pixel flag is set to TRUE if undefined values are
   created during the arithmetic.

   -  All non-complex numeric data types can be handled.
.endhelp
