.help log10 Starlink kappa
.nf
    Takes the base-10 logarithm of each pixel of a data array
 
   This routine takes the logarithm to base 10 of each pixel of
   a data array. The result goes into a new output data array.
   Both data arrays are stored in the IMAGE format.
 
   The magic-value method is used for processing bad data.

AUTHORS

   Mark McCaughrean UoE ( REVA::MJM )
   Malcolm Currie  STARLINK (RAL::CUR)

BUGS

   None known.

HISTORY

   02-07-1986 : First implementation (REVA::MJM)
   1986 Aug 7 : Renamed algorithm subroutine (LOGARR), changed new
                2nd argument to total number of pixels. Corrected
                default base to 10. (RAL::CUR)
   1986 Aug 29: Added argument section, generalised to vectors and
                tidied (RAL::CUR).
   1987 Oct 15: Reordered tidying and used CMP_SHAPE (RAL::CUR)
   1988 Mar 17: Referred to `array' rather than `image'
                (RAL::CUR)
   1988 May 30: More reporting of error context (RAL::CUR)
   1989 Jun 13: Allow for processing primitive NDFs (RAL::CUR)
   1991 Oct 25: Propagates AXIS, LABEL, and HISTORY (RAL::CUR).
   1992 Feb 25: Limited processing of simple NDFs (RAL::CUR).
   1992 Mar  3: Replaced AIF parameter-system calls by the extended
                PAR library (RAL::CUR).

PARAMETERS

   INPIC  =  IMAGE( READ )
       Input IMAGE structure containing the data array
   BASE  =  REAL( READ )
       Base of logarithm to be taken of each input data array pixel
   OUTPIC  =  IMAGE( WRITE )
       Output IMAGE structure holding result of processed data
   OTITLE  =  CHAR( READ )
       Title string for the output IMAGE structure

INPIC

  position    1
  keyword     'INPIC'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  ppath       'GLOBAL'
  association '<-GLOBAL.DATA_ARRAY'
  prompt      'Input image'
  help        'Name of the IMAGE structure containing the input data 
              array'

BASE

  position    2
  keyword     'BASE'
  type        '_REAL'
  access      'READ'
  vpath       'DEFAULT'
  prompt      'Base'
  default     10.0
  help        'Base of the logarithm to be taken of each input 
              data-array pixel'

OUTPIC

  position    3
  keyword     'OUTPIC'
  type        'IMAGE'
  access      'WRITE'
  vpath       'PROMPT'
  association '->GLOBAL.DATA_ARRAY'
  prompt      'Output image'
  help        'Name given to the IMAGE structure holding the data 
              array resulting from taking logs'

OTITLE

  position    4
  keyword     'OTITLE'
  type        'LITERAL'
  vpath       'DEFAULT'
  prompt      'Title for output image'
  default     'KAPPA - Log10'
  help        'Character string used as a title for the output IMAGE 
              structure.'
 1 LOGAR
    Takes the logarithm of each pixel of a data array (specified
    base)
 
   This routine takes the logarithm to a specified base of each
   pixel of a data array. The result goes into a new output data
   array. Both data arrays are stored in the IMAGE format.
 
   The magic-value method is used for processing bad data.

AUTHORS

   Mark McCaughrean UoE ( REVA::MJM )
   Malcolm Currie  STARLINK (RAL::CUR)

BUGS

   None known.

HISTORY

   02-07-1986 : First implementation (REVA::MJM)
   1986 Aug 7 : Renamed algorithm subroutine (LOGARR), changed new
                2nd argument to total number of pixels. (RAL::CUR)
   1986 Aug 29: Added argument section, generalised to vectors and
                tidied (RAL::CUR).
   1987 Oct 15: Reordered tidying and used CMP_SHAPE (RAL::CUR)
   1988 Mar 17: Referred to `array' rather than `image'
                (RAL::CUR)
   1988 May 30: More reporting of error context (RAL::CUR)
   1989 Jun 13: Allow for processing primitive NDFs (RAL::CUR)
   1991 Oct 25: Propagates AXIS, LABEL, and HISTORY (RAL::CUR).
   1992 Feb 25: Limited processing of simple NDFs (RAL::CUR).
   1992 Mar  3: Replaced AIF parameter-system calls by the extended
                PAR library (RAL::CUR).

PARAMETERS

   INPIC  =  IMAGE( READ )
       Input IMAGE structure containing the data array
   BASE  =  REAL( READ )
       Base of logarithm to be taken of each input data array pixel
   OUTPIC  =  IMAGE( WRITE )
       Output IMAGE structure holding result of processed data
   OTITLE  =  CHAR( READ )
       Title string for the output IMAGE structure

INPIC

  position    1
  keyword     'INPIC'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  ppath       'GLOBAL'
  association '<-GLOBAL.DATA_ARRAY'
  prompt      'Input image'
  help        'Name of the IMAGE structure containing the input data 
              array'

BASE

  position    2
  keyword     'BASE'
  type        '_REAL'
  access      'READ'
  vpath       'PROMPT'
  ppath       'CURRENT,DYNAMIC,DEFAULT'
  prompt      'Base'
  default     2.718282
  help        'Base of the logarithm to be taken of each input 
              data-array pixel'

OUTPIC

  position    3
  keyword     'OUTPIC'
  type        'IMAGE'
  access      'WRITE'
  vpath       'PROMPT'
  association '->GLOBAL.DATA_ARRAY'
  prompt      'Output image'
  help        'Name given to the IMAGE structure holding the data 
              array resulting from taking logs'

OTITLE

  position    4
  keyword     'OTITLE'
  type        'LITERAL'
  vpath       'DEFAULT'
  prompt      'Title for output image'
  default     'KAPPA - Logar'
  help        'Character string used as a title for the output IMAGE 
              structure.'
 1 LOGE
    Takes the natural logarithm of each pixel of a data array
 
   This routine takes the logarithm to base e of each pixel of
   a data array. The result goes into a new output data array.
   Both data arrays are stored in the IMAGE format.
 
   The magic-value method is used for processing bad data.

AUTHORS

   Mark McCaughrean UoE ( REVA::MJM )
   Malcolm Currie  STARLINK (RAL::CUR)

BUGS

   None known.

HISTORY

   02-07-1986 : First implementation (REVA::MJM)
   1986 Aug 7 : Renamed algorithm subroutine (LOGARR), changed new
                2nd argument to total number of pixels. (RAL::CUR)
   1986 Aug 29: Added argument section, generalised to vectors and
                tidied (RAL::CUR).
   1987 Oct 15: Reordered tidying and used CMP_SHAPE (RAL::CUR)
   1988 Mar 17: Referred to `array' rather than `image'
                (RAL::CUR)
   1988 May 30: More reporting of error context (RAL::CUR)
   1989 Jun 13: Allow for processing primitive NDFs (RAL::CUR)
   1991 Oct 25: Propagates AXIS, LABEL, and HISTORY (RAL::CUR).
   1992 Feb 25: Limited processing of simple NDFs (RAL::CUR).
   1992 Mar  3: Replaced AIF parameter-system calls by the extended
                PAR library (RAL::CUR).

PARAMETERS

   INPIC  =  IMAGE( READ )
       Input IMAGE structure containing the data array
   BASE  =  REAL( READ )
       Base of logarithm to be taken of each input data array pixel
   OUTPIC  =  IMAGE( WRITE )
       Output IMAGE structure holding result of processed data
   OTITLE  =  CHAR( READ )
       Title string for the output IMAGE structure

INPIC

  position    1
  keyword     'INPIC'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  ppath       'GLOBAL'
  association '<-GLOBAL.DATA_ARRAY'
  prompt      'Input image'
  help        'Name of the IMAGE structure containing the input data 
              array'

BASE

  position    2
  keyword     'BASE'
  type        '_REAL'
  access      'READ'
  vpath       'DEFAULT'
  prompt      'Base'
  default     2.718282
  help        'Base of the logarithm to be taken of each input 
              data-array pixel'

OUTPIC

  position    3
  keyword     'OUTPIC'
  type        'IMAGE'
  access      'WRITE'
  vpath       'PROMPT'
  association '->GLOBAL.DATA_ARRAY'
  prompt      'Output image'
  help        'Name given to the IMAGE structure holding the data 
              array resulting from taking logs'

OTITLE

  position    4
  keyword     'OTITLE'
  type        'LITERAL'
  vpath       'DEFAULT'
  prompt      'Title for output image'
  default     'KAPPA - Loge'
  help        'Character string used as a title for the output IMAGE 
              structure.'
 1 LOOK
    Outputs the values of a sub-array of a 2-d data array to the
    screen or a text file.
 
   This routine reports to user or writes to a text file the values
   in a specified sub-array of the 2-d data array in the input IMAGE
   structure.  Three options are allowed --- Peep gives a fixed 7x7
   box on the screen, centred on a given pixel; Examine gives an NxM
   box on the screen, with lower left pixel as specified; List
   outputs the specified sub-array to a text text file (maximum
   width 132 characters) of a defined name.  Beware that the List
   option can produce very large files if it is not used sensibly.
 
   The magic-value method is used for processing bad data. Bad pixels
   are denoted in the display or file by INVALID rather than a
   numerical value.

AUTHORS

   Mark McCaughrean UoE ( REVA::MJM )
   Malcolm Currie  STARLINK (RAL::CUR)

BUGS

   None known.

HISTORY

   11-06-1986 : First implementation (REVA::MJM)
   15-06-1986 : Modified to include Examine option (REVA::MJM)
   1986 Aug 7 : Renamed algorithmic routines to PEEPSB and LISTSB
                (RAL::CUR).
   1986 Aug 29: Added argument section to prologue, and nearly
                conformed to Starlink standards (RAL::CUR).
   1987 Oct 15: Reordered tidying and extra status check
                (RAL::CUR)
   1988 Mar 17: Referred to `array' rather than `image'
                (RAL::CUR)
   1988 Jun 4 : More reporting of error context (RAL::CUR)
   1988 Jun 30: File name obtained in LISTSB (RAL::CUR).
   1988 Dec  6: Improved Examine XSIZE default (RAL::CUR).
   1989 Jul 27: Passed array dimensions to PEEPSB and LISTSB as
                separate variables (RAL::CUR).
   1990 Feb 22: Modified the calling sequence for the new
                more-modular version of LISTSB (RAL::CUR).
   1992 Feb 25: Limited processing of simple NDFs (RAL::CUR).
   1992 Mar  3: Replaced AIF parameter-system calls by the extended
                PAR library (RAL::CUR).

PARAMETERS

   INPIC  =  IMAGE( READ )
       IMAGE structure containing the 2-d data array to be inspected.
   CHOICE = LITERAL( READ )
       The means by which the data array is examined.  The options
         are 'Peep' --- reports the values in a 7x7 pixel region;
         'Examine' --- reports the values of a region whose size is
         defined by the user; and 'List' is similar to 'Examine',
         but it generates a listing to a text file.
   XCEN  =  INTEGER( READ )
       x centre of box to be examined on the screen.
   YCEN  =  INTEGER( READ )
       y centre of box to be examined on the screen.
   XLOW  =  INTEGER( READ )
       x pixel index of the lower left of the sub-array to be output.
   YLOW  =  INTEGER( READ )
       y pixel index of the lower left of the sub-array to be output.
   XSIZE  =  INTEGER( READ )
       x size of the sub-array to be output.
   YSIZE  =  INTEGER( READ )
       y size of the sub-array to be output.
   FILENAME  =  FILENAME( READ )
       Name of the file to be used for the output of the sub-array
         listing.
   ANOTHER = LOGICAL( READ )
       If true, another look at the data is required.

INPIC

  position    1
  keyword     'INPIC'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  ppath       'GLOBAL'
  association '<->GLOBAL.DATA_ARRAY'
  prompt      'Image to be inspected'
  help        'Give name of the IMAGE structure holding the 2-d data 
              array to be inspected.'

CHOICE

  position    2
  keyword     'CHOICE'
  type        'LITERAL'
  vpath       'PROMPT'
  ppath       'CURRENT,DYNAMIC,DEFAULT'
  default     'Peep'
  prompt      'Peep, Examine or List'
  help        'Peep lists a 7x7 neighbourhood to screen, Examine
              reports an NxM box to screen, List gives a listing to
              a file.'
 #in          'Peep', 'Examine', 'List'

XCEN

  keyword     'XCEN'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  ppath       'CURRENT,DYNAMIC'
  prompt      'x centre pixel index of 7x7 box'
  help        'Give the x centre pixel index of the sub-array to be 
              peeped.'

YCEN

  keyword     'YCEN'
  type        '_INTEGER'
  vpath       'PROMPT'
  access      'READ'
  ppath       'CURRENT,DYNAMIC'
  prompt      'y centre pixel index of 7x7 box'
  help        'Give the y centre pixel index of the sub-array to be 
              peeped.'

XLOW

  keyword     'XLOW'
  type        '_INTEGER'
  vpath       'PROMPT'
  access      'READ'
  ppath       'CURRENT,DYNAMIC'
  prompt      'x start pixel index of sub-array'
  help        'Give the x start pixel index of the sub-array to be 
              inspected.'

YLOW

  keyword     'YLOW'
  type        '_INTEGER'
  vpath       'PROMPT'
  access      'READ'
  ppath       'CURRENT,DYNAMIC'
  prompt      'y start pixel index of sub-array'
  help        'Give the y start pixel index of the sub-array to be 
              inspected.'

XSIZE

  keyword     'XSIZE'
  type        '_INTEGER'
  vpath       'PROMPT'
  access      'READ'
  ppath       'DYNAMIC'
  prompt      'x size of sub-array'
  help        'Give the x size of the sub-array to be inspected.'

YSIZE

  keyword     'YSIZE'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  ppath       'DYNAMIC'
  prompt      'y size of sub-array'
  help        'Give the y size of the sub-array to be inspected.'

FILENAME

  keyword     'FILENAME'
  type        'FILENAME'
  access      'READ'
  vpath       'PROMPT'
  ppath       'DEFAULT'
  default     LOOKOUT.LIS
  prompt      'Name of listing file'
  help        'Give name of the ASCII file to contain the sub-array 
              listing.'

ANOTHER

  keyword     'ANOTHER'
  type        '_LOGICAL'
  access      'READ'
  vpath       'PROMPT'
  ppath       'DEFAULT'
  default     Y
  prompt      'Another inspection ?'
  help        'Answer YES if another sub-array is to be peeped or 
              listed.'
 1 LUCY
Performs a Richardson-Lucy deconvolution of a 1- or 2-dimensional
array.
 Usage:
    lucy in psf out [aim]
 Description:
    This application deconvolves the supplied 1- or 2-dimensional
   array using the Richardson-Lucy (R-L) algorithm.  It takes an
   array holding observed data and another holding a Point-Spread
   Function (PSF) as input and produces an output array with higher
   resolution.  The algorithm is iterative, each iteration producing
   a new estimate of the restored array which (usually) fits the
   observed data more closely than the previous estimate (in the
   sense that simulated data generated from the restored array is
   closer to the observed data).  The closeness of the fit is
   indicated after each iteration by a normalised chi-squared value
   (i.e. the chi-squared per pixel).  The algorithm terminates when
   the normalised chi-squared given by parameter AIM is reached, or
   the maximum number of iterations given by parameter NITER have
   been performed.  The current estimate of the restored array is
   then written to the output NDF.
    Before the first iteration, the restored array is initialised
   either to the array given by parameter START, or, if no array is
   given, to the difference between the mean value in the input data
   array and the mean value in the background (specified by
   parameters BACK and BACKVAL).  Simulated data is then created from
   this trial array by smoothing it with the supplied PSF, and then
   adding the background on.  The chi-squared value describing the
   deviation of this simulated data from the observed data is then
   found and displayed.  If the required chi-squared is not reached
   by this simulated data, the first iteration commences, which
   consists of creating a new version of the restored array and then
   creating new simulated data from this new restored array (the
   corresponding chi-squared value is displayed).  Repeated
   iterations are performed until the required chi-squared is
   reached, or the iteration limit is reached.  The new version of
   the restored array is created as follows.
       1 - A correction factor is found for each data value.  This is
      the ratio of the observed data value to the simulated data
      value.  An option exists to use the Snyder modification as
      used by the LUCY program in the STSDAS package within IRAF.
      With this option selected, the variance of the observed data
      value is added to both the numerator and the denominator when
      finding the correction factors.
       2 - These correction factors are mapped into an array by
      smoothing the array of correction factors with the transposed
      PSF.
       3 - The current version of the restored array is multiplied by
      this correction factor array to produce the new version of the
      restored array.
    For further background to the algorithm, see L. B. Lucy,
   Astron.J. 1974, Vol 79, No. 6.

Parameters

For information on individual parameters, select from the list below:

AIM

AIM = _REAL (Read)
   The chi-squared value at which the algorithm should terminate.
   Smaller values of AIM will result in higher apparent resolution
   in the output array but will also cause noise in the observed
   data to be interpreted as real structure.  Small values will
   require larger number of iterations, so NITER may need to be
   given a larger value.  Very-small values may be completely
   un-achievable, indicated by chi-squared not decreasing (or
   sometimes increasing) between iterations.  Larger values will
   result in smoother output arrays with less noise.  [1.0]

BACK

BACK = NDF (Read)
   An NDF holding the background value for each observed data
   value.  If a null value is supplied, a constant background
   value given by parameter BACKVAL is used. [!]

BACKVAL

BACKVAL = _REAL (Read)
   The constant background value to use if BACK is given a null
   value. [0.0]

CHIFAC

CHIFAC = _REAL (Read)
   The normalised chi-squared value which is used to determine if
   the algorithm should terminate is the mean of the following
   expression (the mean is taken over the entire input array,
   the margins used to pad the input array are excluded):
       ( D - S )**2 / ( CHIFAC*S - V )
    where D is the observed data value, S is the simulated data
   value based on the current version of the restored array, V is
   the variance of the error associated with D, and CHIFAC is the
   value of parameter CHIFAC.  Using 0 for CHIFAC results in the
   standard expression for chi-squared.  However, the algorithm
   sometimes has difficulty fitting bright features and so may
   not reach the required normalised chi-squared value.  Setting
   CHIFAC to 1 (as is done by the LUCY program in the STSDAS
   package within IRAF) causes larger data values to be given
   less weight in the chi-squared calculation, and so encourages
   lower chi-squared values. [1.0]

IN

IN= NDF (Read)
   The input NDF containing the observed data.

NITER

NITER = _INTEGER (Read)
   The maximum number of iterations to perform. [50]

OUT

OUT = NDF (Write)
   The restored output array.  The background specified by
   parameters BACK and BACKVAL will have been removed from this
   array.  The output is the same size as the input.  There is no
   VARIANCE component in the output, but any QUALITY values are
   propagated from the input to the output.

PSF

PSF = NDF (Read)
   An NDF holding an estimate of the Point-Spread Function (PSF)
   of the input array.  This could, for instance, be produced
   using the KAPPA application `PSF'. There should be no bad
   pixels in the PSF otherwise an error will be reported.  The
   PSF can be centred anywhere within the array, but the location
   of the centre must be specified using parameters XCENTRE and
   YCENTRE.  The PSF is assumed to have the value zero outside
   the supplied NDF.

SIGMA

SIGMA = _REAL (Read)
   The standard deviation of the noise in the observed data.
   This is only used if parameter VARIANCE is given the value
   FALSE.  The run-time default is an estimate of the noise
   based on the difference between adjacent pixel values in the
   observed data. []

START

START = NDF (Read)
   An NDF containing an initial guess at the restored array.
   This could, for instance, be the output from a previous run of
   LUCY, in which case the deconvolution would continue from the
   point it had previously reached.  If a null value is given,
   then the restored array is initialised to a constant value
   equal to the difference between the mean observed data value
   and the mean background value. [!]

SNYDER

SNYDER = _LOGICAL (Read)
   If TRUE then the variance of the observed data sample is added
   to both the numerator and denominator when evaluating the
   correction factor for each data sample.  This is the modified
   form of the R-L algorithm used by the LUCY program in the
   STSDAS package within IRAF. [TRUE]

THRESH

THRESH = _REAL (Read)
   The fraction of the PSF peak amplitude at which the extents of
   the PSF are determined.  These extents are used to determine
   the size of the margins used to pad the supplied input array.
   Lower values of THRESH will result in larger margins being
   used.  THRESH must be positive and less than 0.5.  [0.0625]

TITLE

TITLE = LITERAL (Read)
   A title for the output NDF.  A null (!) value means using the
   title of the input NDF. [!]

VARIANCE

VARIANCE = _LOGICAL (Read)
   If TRUE, then the variance of each input data sample will be
   obtained from the VARIANCE component of the input NDF.  An
   error is reported if this option is selected and the NDF has
   no VARIANCE component.  If FALSE, then a constant variance
   equal to the square of the value given for parameter SIGMA is
   used for all data samples.  The run-time default is TRUE if the
   input NDF has a VARIANCE component, and FALSE otherwise. []

WLIM

WLIM = _REAL (Read)
   If the input array contains bad pixels, then this parameter
   may be used to determine the number of good data values which
   must contribute to an output pixel before a valid value is
   stored in the restored array.  It can be used, for example, to
   prevent output pixels from being generated in regions where
   there are relatively few good data values to contribute to the
   restored result. It can also be used to `fill in' small areas
   (i.e. smaller than the PSF) of bad pixels.
    The numerical value given for WLIM specifies the minimum total
   weight associated with the good pixels in a smoothing box
   required to generate a good output pixel (weights for each
   pixel are defined by the normalised PSF).  If this specified
   minimum weight is not present, then a bad output pixel will
   result, otherwise a smoothed output value will be calculated.
   The value of this parameter should lie between 0.0 and
   1.0.  WLIM=0 causes a good output value to be created even if
   there is only one good input value, whereas WLIM=1 causes a
   good output value to be created only if all input values are
   good.  Values less than 0.5 will tend to reduce the number of
   bad pixels, whereas values larger than 0.5 will tend to
   increase the number of bad pixels.
    This threshold is applied each time a smoothing operation is
   performed.  Many smoothing operations are typically performed
   in a run of LUCY, and if WLIM is larger than 0.5 the effects
   of bad pixels will propagate further through the array at each
   iteration.  After several iterations this could result in there
   being no good data left.  An error is reported if this
   happens. [0.001]

XCENTRE

XCENTRE = _INTEGER (Read)
   The x pixel index of the centre of the PSF within the supplied
   PSF array.  The run-time default is the middle pixel (rounded
   down if there are an even number of pixels per line). []

YCENTRE

YCENTRE = _INTEGER (Read)
   The y pixel index of the centre of the PSF within the supplied
   PSF array. The run-time default is the middle line (rounded
   down if there are an even number of lines). []

Examples

lucy m51 star m51_hires
   This example deconvolves the array in the NDF called m51,
   putting the resulting array in the NDF called m51_hires.  The
   PSF is defined by the array in NDF star (the centre of the
   PSF is assumed to be at the central pixel).  The deconvolution
   terminates when a normalised chi-squared value of 1.0 is
   reached.
 lucy m51 star m51_hires 0.5 niter=60
   This example performs the same function as the previous
   example, except that the deconvolution terminates when a
   normalised chi-squared value of 0.5 is reached, giving higher
   apparent resolution at the expense of extra spurious
   noise-based structure.  The maximum number of iterations is
   increased to 60 to give the algorithm greater opportunity to
   reach the reduced chi-squared value.
 lucy m51 star m51_hires2 0.1 start=m51_hires
   This example continues the deconvolution started by the
   previous example in order to achieve a normalised chi-squared
   of 0.1.  The output array from the previous example is used to
   initialise the restored array.

Notes

- The convolutions required by the R-L algorithm are performed by
the multiplication of Fourier transforms.  The supplied input
array is extended by a margin along each edge to avoid problems
of wrap-around between opposite edges of the array.  The width of
this margin is about equal to the width of the significant part
of the PSF (as determined by parameter THRESH).  The application
displays the width of these margins.  The margins are filled by
replicating the edge pixels from the supplied input NDFs.
 - The R-L algorithm works best for arrays which have zero
background.  Non-zero backgrounds cause dark rings to appear
around bright, compact sources.  To avoid this a background array
should be created before running LUCY and assigned to the
parameter BACK.  The SEGMENT and SURFIT applications within KAPPA
can be used to create such a background array.

Related_Applications

   KAPPA: FOURIER, MEM2D, WIENER.

Authors

DSB: David Berry (STARLINK)
 MJC: Malcolm J. Currie (STARLINK)

History

 6-MAR-1995 (DSB):
    Original version, based on MEM2D and Rhys Morris's LUCY.
  1995 April 6 (MJC):
    Used conditional message reporting and modern-style variable
    declarations.  Added Related Applications.  Corrected typo's
    and made stylistic changes.
  5-JUN-1998 (DSB):
    Added propagation of the WCS component.

Implementation_Status

   -  This routine correctly processes the AXIS, DATA, QUALITY,
   VARIANCE, LABEL, TITLE, UNITS, WCS and HISTORY components of the
   input NDF and propagates all extensions.
    -  Processing of bad pixels and automatic quality masking are
   supported.
    -  All non-complex numeric data types can be handled.  Arithmetic
   is performed using single-precision floating point.
.endhelp
