.help hds_data_types Starlink kappa
.nf
KAPPA applications can process NDFs in one or more of the following
HDS data types. The correspondence between Fortran types and HDS
data types is as follows: 
    ------------------------------------------
   | HDS Type | Number   | VAX FORTRAN Type |
   |          | of bytes |                  |
   ------------------------------------------
   | _DOUBLE  |    8     | DOUBLE PRECISION |
   | _INTEGER |    4     | INTEGER          |
   | _REAL    |    8     | REAL             |
   | _UBYTE   |    1     | BYTE             |
   | _BYTE    |    1     | BYTE             |
   | _UWORD   |    2     | INTEGER*2        |
   | _WORD    |    2     | INTEGER*2        |
   ------------------------------------------
 _UBYTE and _UWORD types are unsigned and so permit data ranges of
0--255 and 0--65535 respectively.
 1 Hints
This topic contains hints for new and intermediate user.
 2 Aborting_an_Application
In normal circumstances when you've finished using KAPPA nothing
need be done from the shell, but to end an ICL session, enter the
EXIT command to return to the shell.
 What if you've done something wrong, like entering the wrong value
for a parameter?  If there are further prompts you can enter the
abort code !! to exit the application.  This is recommended even
from the shell because certain files like your NDFs may become
corrupted if you use a crude CTRL/C.  If, however, processing of the
data has begun in the application, it is probably best to let the
task complete, unless it is a long job like image deconvolution.
If you really must abort, CTRL/C should be hit.  From ICL this ought
to return you to a prompt, but the processing will continue.  Then
you can stop the running process by `killing' it.  First find the
task name
      ICL> tasks
                           TASKNAME  Process Id
                    ndfpack_mon16528  15186
 and then kill it.
      ICL> kill ndfpack_mon16528
 for a task in the NDFPACK monolith.  NDFPACK will be loaded again
once you enter one its commands.  If several attempts with CTRL/C
fail to return you to an ICL prompt then it's time for the heavy
artillery---you may have to kill your window.  Once back to the
shell enter icl to return to ICL, and then kill the process as
described above.
 If you have interrupted a task, it may be necessary to delete the
parameter file (topic "Parameters Defaults") and the graphics
database (topic "Graphics_Database").
 2 Starlink_initialisation
 Before you can run a Starlink application you need to make the
startup scripts available and define some environment variables.
The easiest way is to insert the line
      source /star/etc/cshrc
 into your .cshrc or .tcshrc file, and in .login file you include the
equivalent line
      source /star/etc/login
 which you've presumably done to be reading this.  It's here for
completeness in case you need to show someone else how to do it.
 At non-Starlink sites the /star path may be different.
 2 Data_conversion
See topics "Getting_Data_into_KAPPA", "Automatic_Data_Conversion",
and SUN/55.
 2 Finding_an_Application
Help Topic "Summary" lists in alphabetical order the 181 commands
and their functions, and "Classified_Commands" is a classified list
of the same commands.  Many examples are given throughout the help
library.
 2 Getting_Started
A good place to start is to look at the tutorials on pages 3--9 of
SUN/95.  Also look at the other help sub-topics in the "Hints", and
the "Parameters Summary" topic, which describe how to obtain help,
how to run programmes, and controlling parameters to applications.
If you want to produce graphics, first see
"Selecting_Graphics_Devices".
 2 Graphics
See topic "Selecting_Graphics_Devices" for selecting an output
device for your plots.  If you are using an image display topic
"Colour_Table_and_Palette" gives details of how to control the
appearance of colour tables and the annotation palette.  There are
also examples of how to create lookup tables.  See topic
"Graphics_Database" for an explanation of the graphics database, and
Section 9 of SUN/95 has illustrated examples of how to use the
database.  The topics on "Co-ordinate_Systems" and
"Interaction_Mode" are partially related to the graphics database.
 2 Issuing_Commands
To run an application you then can just give its name---you will be
prompted for any required parameters.  Alternatively, you may enter
parameter values on the command line specified by position or by
keyword.  More on this in the "Parameters" topic.
 Commands are interpreted in a case-independent way from ICL, but
from the shell they must be given in lowercase.  In ICL, commands
may also be abbreviated provided they are unambiguous strings with
at least four characters.  Commands shorter than five characters,
therefore, cannot be shortened. So
      ICL> CREF
     ICL> CREFR
     ICL> CreFra
     ICL> CREFRAM
 
would all run CREFRAME.  Whereas
 
     ICL> FITS
     ICL> FITSI
 
would be ambiguous, since there are several commands beginning
FITS, and two starting FITSI, namely FITSIN and FITSIMP.
 Note if other packages are active there is the small possibility of
a command-name clash.  Issuing such a command will run that command
in the package last activated.  You can ensure running the KAPPA
command by inserting a kap_ prefix before the command name.  For
example,
       % kap_rotate
 will execute KAPPA's ROTATE application.  There may also be a clash
with UNIX commands and shell built-in functions, though there are
now far fewer conflicts than in earlier versions of KAPPA, with
only look being ambiguous.  There is also a glob in the C-shell
which might confuse you should you forget that GLOBALS cannot be
abbreviated from the shell.
 Since the KAPPA commands are the same in both the shell and ICL,
the % and ICL> prompts in the examples and description throughout
this help library are interchangeable unless noted otherwise.
 2 Obtaining_Help
To access the KAPPA help use KAPHELP.
      ICL> kaphelp
 The system responds by introducing KAPPA's help library, followed by
a long list of topics for which help is available, followed by the
prompt "Topic?".  These topics are mostly the commands for running
applications, but they also include global information on matters
such as parameters, data structures and selecting a graphics device.
 From ICL you can issue other commands for obtaining help about KAPPA.
      ICL> help kappa
     ICL> help packages
 The former is nearly equivalent to entering kaphelp.  However, it is
less easy to use as it lacks many of the navigational aids of
KAPHELP.  The latter gives a summary of Starlink packages available
from ICL.  If you select the KAPPA subtopic, you'll get a precis of
the package's facilities.  (This is part of an index of Starlink
packages.)
 If you have commenced running an application you can still access
the help library whenever you are prompted for a parameter.  See
the topic "Parameters Help" for details. 
 2 Navigating_Help_Hierarchies
The help information is arranged hierarchically.  The help system
enables you to navigate the library by prompting when it has either
presented a screen's worth of text or has completed displaying the
previously requested help.  The information displayed by the help
system on a particular topic includes a description of the topic
and a list of subtopics that further describe the topic.
 You can select a new topic by entering its name or an unambiguous
abbreviation.  If you press the carriage-return key (<CR>) you will
either continue reading a topic where there is further text to show,
or move up one level in the hierarchy.  Entering a CTRL/D (pressing
D whilst holding the CTRL key) terminates the help session.  See the
description of KAPHELP for a full list of the options available at
prompts inside the help system, and the rules for wildcarding and
abbreviating topics.
 2 Help_on_KAPPA_commands
Help on an individual KAPPA application is simply achieved by
entering kaphelp followed by the command name, for example
      % kaphelp centroid
 will give the description and usage of the CENTROID command.  There
are subtopics which contain details of the parameters, including
defaults, and valid ranges; examples; notes expanding on the
description; implementation status; and occasionally timing.
For example,
      ICL> kaphelp hist param ndf
 gives details of parameter NDF in all applications prefixed by
HIST.
 (From ICL you can also invoke its help system, thus
      ICL> help centroid
 is similar to kaphelp centroid, though the ICL system has drawbacks,
and you are recommended to run KAPHELP.
 The instruction
      ICL> kaphelp help classified
 displays a list of subject areas as subtopics.  Each subtopic lists
and gives the function of each KAPPA application in that
classification.  There is also an alphabetic list which can be
obtained directly via the command
      ICL> help summary
 2 Hypertext_Help
A modified version of the KAPPA documentention exists in hypertext
form.  One way to access it is to use the showme command
      % showme sun95
 and a Web browser will appear, presenting the index to the hypertext
form of this document.  The hypertext permits easy location of
referenced documents and applications.  It also includes colour
illustrations.
 The findme command lets you search the Starlink documents by
keywords.  For instance,
      % findme masking
 searches the document looking for the word "masking" in them.  The
level of searching depends on whether a match is found.  The search
starts with the document title, the page (section) titles, and
finally the document text.  The deeper the search, the longer it
will take.  There are switches provided to limit the level of the
search.  The search string may include sed or grep regular
expressions.  See SUN/188 or enter
      % findme findme
     % findme showme 
 to learn more about the findme and showme commands.
 2 Changing_the_Current_Directory_in_ICL
You should change default directories in ICL using its
DEFAULT command, and not cd.  Thus
      ICL> default /home/scratch/dro
 makes /home/scratch/dro the default directory for the ICL session,
and for existing and future subprocesses, including application
packages.
 2 Problems
Solutions to some common problems using KAPPA are given in topic
"Problems_Problems".
 2 Running_KAPPA
KAPPA runs from the C-shell and variants, and also from the
interactive command language---ICL.  Both run monolithic programmes
for efficiency.  Both have their advantages and disadvantages.  Of
the latter, the shell forces you to escape certain characters, and
ICL does not have a foreach to loop through a wildcarded list of
NDFs.  You may simply prefer the familiar shell to ICL, though
UNIX commands, including editing, are accessible from ICL via a !
prefix.  This is not the place to expound the intrinsic merits of
the two command languages, but where there are differences affecting
KAPPA, they'll be indicated.  The choice is yours.
 To run KAPPA from the shell just enter the following command.
      % kappa
 This executes a procedure setting up aliases for KAPPA's command
names and to make help information available.  Then you'll be able
to mix KAPPA commands with the familiar shell ones. 
 To run KAPPA from ICL you have to start up the command language if
you are not already using it.  This requires just one extra command,
namely
      % icl
 You will see any messages produced by system and user procedures,
followed by the ICL> prompt.  Again there is a procedure for making
the commands known to the command language, and not unexpectedly, it
too is
      ICL> kappa
 Then you are ready to go.  In either case you'll see message from
KAPPA telling you which version is ready for use.
 2 Subsets
See topic "NDF_sections" to find a concise and convenient way of
making KAPPA process only a subset of your dataset.
.endhelp
