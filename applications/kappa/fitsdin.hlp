.help fitsdin Starlink kappa
.nf
Reads a FITS disc file composed of simple, group or table objects.

Usage:

   fitsdin files out [auto] fmtcnv [logfile] dscftable=? table=?

Description:

   This application reads selected disc-FITS files.  The files may
   be Basic (simple) FITS, and/or have TABLE extensions (Harten et
   al. 1988).

   The programme reads a simple or a random-groups-format FITS file
   (Wells et al. 1981; Greisen & Harten 1981), and writes the data
   into an NDF, and the headers into the NDF's FITS extension.
   Table-format files (Grosbol et al. 1988) are read, and the
   application creates two files: a text formatted table/catalogue
   and a FACTS description file (as used by SCAR) based upon the FITS
   header cards.  Composite FITS files can be processed.  You may
   specify a list of files, including wildcards.  A record of the
   FITS headers, and group parameters (for a group-format file) can
   be stored in a text file.

   There is an option to run in automatic mode, where the names of
   output NDF data structures are generated automatically, and you
   can decide whether or not format conversion is to be applied to
   all files (rather than being prompted for each).  This is very
   useful if there is a large number of files to be processed.  Even
   if you want unique file names, format-conversion prompting may be
   switched off globally.

Parameters

For information on individual parameters, select from the list below:

AUTO

AUTO = _LOGICAL (Read)
   It is TRUE if automatic mode is required, where the name of
   each output NDF structure or table file is to be generated by
   the application, and therefore not prompted; and a global
   format-conversion switch may be set.  In manual mode the FITS
   header is reported, but not in automatic.

   In automatic mode the application generates a filename
   beginning with the input filename, less any extension.  For
   example, if the input file was SATURN.FITS the filename of the
   output NDF would be SATURN.SDF, and an output table would be
   SATURN.DAT with a description file dscfSATURN.DAT.  If there
   are sub-files (more than one FITS object in the file) a suffix
   _<subfile> is appended.  So if SATURN.FITS comprised a simple
   file followed by a table, the table would be called
   SATURN_2.DAT and the description file DSCFSATURN_2.DAT.  For
   group format a suffix G<groupnumber> is appended.  Thus if
   SATURN.FITS is a group format file, the first NDF created
   would be called SATURN.SDF, the second would be SATURNG2.SDF.
   [FALSE]

DSCFTABLE

DSCFTABLE = FILENAME (Read)
   Name of the text file to contain the FACTS descriptors, which
   defines the table's format for SCAR.  Since SCAR is now
   deprecated, this parameter has little use, except perhaps to
   give a summary of the format of the file specified by parameter
   TABLE.  A null value (!) means that no description file will
   be created, so this is now the recommended usage.  If your
   FITS file comprises just tables, you should consider other
   tools such as the CURSA package, which has facilities for
   examining and processing ASCII and binary tables in FITS files.

   A suggested filename for the description file is reported
   immediately prior to prompting in manual mode.  It is the name
   of the catalogue, as written in the FITS header, with a "dscf"
   prefix.

ENCODINGS

ENCODINGS = LITERAL (Read)
   Determines which FITS keywords should be used to define the
   world co-ordinate information stored in NDF's WCS component.
   The allowed values (case-insensitive) are:

   "FITS-WCS" --- This uses keywords CRVALi, CDELTi, CRPIXi,
      PCiiijjj, etc., as described in the (draft) FITS world
      co-ordinate system paper by E.W.Greisen and M.Calabretta
      (A & A, in preparation).

   "DSS" --- This is the system used by the Digital Sky Survey,
      and uses keywords AMDXn, AMDYn, PLTRAH, etc.

   "Native" --- This is the native system used by the AST library
      (see SUN/210), and is the most general.  The others are
      limited in the co-ordinate systems they can describe, and
      may thus not fully describe the NDF's WCS component.

   A comma-separated list of up to three values may be supplied,
   in which case the value actually used is in the first in the
   list for which corresponding keywords can be found in the FITS
   header. If a null parameter value (!) is supplied, the encoding
   is chosen automatically on the basis of the available headers. [!]

FILES

FILES() = LITERAL (Read)
   A list of (optionally wild-carded) file specifications which
   identify the disc-FITS files to be processed.  Up to 10 values
   may be given, but only a single specification such as "*.FITS"
   is normally required.  Be careful not to include non-FITS files
   in this list.

FMTCNV

FMTCNV = _LOGICAL (Read)
   This specifies whether or not format conversion will occur.
   If FALSE, the HDS type of the data array in the NDF will be
   the equivalent of the FITS data format in the file (e.g.
   BITPIX = 16 creates a _WORD array).  If TRUE, the data array
   in the current file, or all files in automatic mode, will be
   converted from the FITS data type in the FITS file to _REAL in
   the NDF.  The conversion applies the values of the FITS
   keywords BSCALE and BZERO to the FITS data to generate the
   "true" data values.  If BSCALE and BZERO are not given in the
   FITS header, they are taken to be 1.0 and 0.0 respectively.
   The suggested default is TRUE.

GLOCON

GLOCON  = _LOGICAL (Read)
   If FALSE, a format-conversion query occurs for each FITS file.
   If TRUE, the value of parameter FMTCNV is obtained before any
   file numbers and will apply to all data arrays.  It is ignored
   in automatic mode---in effect it becomes true. [FALSE]

LOGFILE

LOGFILE = FILENAME (Read)
   The file name of the text log of the FITS header cards.
   For group-format data the group parameters are evaluated
   and appended to the full header.  The log includes the names of
   the output files used to store the data array or table. A null
   value (!) means that no log file is produced. [!]

OUT

OUT = NDF (Write)
   Output NDF structure holding the full contents of the FITS
   file.  If the null value (!) is given no NDF will be created.
   This offers an opportunity to review the descriptors before
   deciding whether or not the data are to be extracted.

TABLE

TABLE = FILENAME (Read)
   Name of the text file to contain the table itself, read from
   the file.  In manual mode, the suggested default filename is
   the name of description file less the "DSCF" prefix, or if
   there is no description file or if the description file does
   not have the DSCF prefix, the suggested name reverts to the
   catalogue name in the FITS header.

Examples

fitsdin files=*.fit auto nofmtcnv
   This reads all the files with extension "fit" in the default
   directory.  If the files were sao.fit and moimp.fit and each
   contained just an image array, the output NDFs will be sao and
   moimp respectively.  The data will not have format conversion.

fitsdin files=ccd.ifits fmtcnv logfile=jkt.log
   This reads the file ccd.ifits and processes all the FITS
   objects within it.  Integer data arrays are converted to real
   using the scale and zero found in the FITS header.  A record
   of the headers and the names of the output files are written
   to the text file jkt.log.

fitsdin files="*.*fits,*.mt" glocon fmtcnv
   This reads the files *.*fits and *.mt and processes all the
   FITS objects within them.  Integer data arrays are converted
   to real using the scale and zero found in the FITS header.
   Any IEEE-format data will not be converted although the global
   conversion switch is on.

References

   Wells, D.C., Greisen, E.W. & Harten, R.H. 1981,
      Astron. Astrophys. Suppl. Ser. 44, 363.
   Greisen, E.W. & Harten, R.H. 1981,
      Astron. Astrophys. Suppl. Ser. 44, 371.
   Grosbol, P., Harten, R.H., Greisen, E.W & Wells, D.C.
      1988 Astron. Astrophys. Suppl. Ser. 73, 359.
   Harten, R.H., Grosbol, P., Greisen, E.W & Wells, D.C.
      1988 Astron. Astrophys. Suppl. Ser. 73, 365.

Related_Applications

   KAPPA: FITSHEAD, FITSIMP, FITSIMP, FITSLIST; CONVERT: FITS2NDF;
   CURSA; Figaro: RDFITS.

Authors

MJC: Malcolm J. Currie (STARLINK)

RDS: Richard D. Saxton (STARLINK, Leicester)

DSB: David S. Berry (STARLINK)

History

 1990 December 4 (MJC):
    Original version.

 1991 February 28 (MJC):
    Added the NCARD argument for various revised FTS1_x calls.

 1991 October 10 (MJC):
    Fixed bug when GLOCON and FMTCNV set to true and dealing with
    IEEE-format data.

 1992 February 24 (MJC):
    Ensured that HDS file mapping will occur after tuning option
    is added.

 1992 March 3 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 December (RDS):
    Modifications to improve the portability, including: BUFFER
    and RECORD now mapped as BYTE arrays and passed into the
    various subroutines as character arrays using descriptors
    created by GRP1_CDESC.  File names are obtained using GRP,
    wildcarding is done with a portable subroutine.  The FITS
    files are opened for sequential access on the VAX but for
    direct access on other platforms.  Calls to subroutines using
    the BUFFER and RECORD mapped arrays, have generally had their
    arguments reordered.

 1993 January 5 (MJC):
    Fixed bugs: tidied workspace, processing of integer data, and
    multiple FITS objects.

 1993 January 20 (MJC):
    Made to work for DECstations.

 1993 December 3 (MJC):
    Made to work for Alphas.

 1995 October 5 (MJC):
    Documentation overhaul.  Changed dynamic default of FMTCNV.

 1996 June 6 (MJC):
    Linux usage enabled.

 9-JUN-1998 (DSB):
    Added support for WCS component.

Implementation_Status

   -  The application processes files blocked at other than an
   integer multiple of 2880 bytes up to a maximum of 28800, provided
   it is a multiple of the number of bytes per data value.

   -  For simple or group format FITS:

      -  IEEE floating point is supported.

      -  If BUNIT is present its value will appear as the NDF's units
      component.

      -  If OBJECT is present its value will appear as the NDF's
      title component.

      -  If the BLANK item is present in the header, undefined pixels
      are converted from the BLANK value to Starlink-standard bad
      value during data conversion.

      -  An AXIS component will be stored in the NDF if the CRVALn
      keyword is present.  (n is the number of the dimension.)  If
      the CRPIXn keyword is absent it defaults to 1, and likewise
      for the CDELTn keyword.  The value of CRTYPEn is made the label
      of the axis structure.

   -  For groups format, a new NDF is created for each data array.
   The name of the NDF of the second and subsequent data arrays is
   generated by the application as the <filename>G<number>, where
   <filename> is the name of the first NDF, you supply or generated
   automatically, and <number> is the number of the group.

   Each group NDF contains the full header in the FITS extension,
   appended by the set of group parameters.  The group parameters
   are evaluated using their scales and offsets, and made to look
   like FITS cards, whose keywords are derived from the values of
   PTYPEm in the main header.  (m is the number of the group
   parameter.) The same format is used in the log file.

   -  If there is no data array in the FITS file, i.e. the FITS file
   comprises header cards only, then a dummy vector data array of
   dimension two is created to make the output a valid NDF.  This
   data array is undefined.
.endhelp
