      SUBROUTINE CCG1_SD1<T>( NPIX, NLINES, STACK, MINPIX,
     :                       RESULT, RESVAR, NCON, STATUS )
*+
*  Name:
*     CCG1_SD1x

*  Purpose:
*     Combines data lines using an unweighted standard deviation.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_SD1<T>( NPIX, NLINES, STACK, MINPIX, RESULT, RESVAR,
*                      NCON, STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data.  The data values in each lines are then combined to
*     form an unweighted standard deviation.  The output standard
*     deviations are returned in the array RESULT.  The squared
*     standard error of the variance is returned in RESVAR.

*  Arguments:
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = <TYPE> (Given)
*        The array of lines which are to be combined into a single line.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = <TYPE> (Returned)
*        The output line of data.
*     RESVAR( NPIX ) = REAL (Returned)
*        The output variances.
*     NCON( NLINES ) = DOUBLE PRECISION (Given and Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  This routine performs its work in double precision.
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate.  The
*     STACK, RESULT, and RESVAR arguments supplied to the routine must
*     have the data type specified.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2005 December 27 (MJC):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER NPIX
      INTEGER NLINES
      INTEGER MINPIX
      <TYPE> STACK( NPIX, NLINES )

*  Arguments Given and Returned:
      DOUBLE PRECISION NCON( NLINES )

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> RESVAR( NPIX )

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?
      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      DOUBLE PRECISION MEAN      ! Mean value
      INTEGER NGOOD              ! Number of good pixels
      DOUBLE PRECISION STDEV     ! Standard deviation
      DOUBLE PRECISION SUMV      ! Sum of weighted values
      DOUBLE PRECISION SUMSQ     ! Sum of squared values
      DOUBLE PRECISION VAL       ! Present data value
      DOUBLE PRECISION VARNCE    ! Variance

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.


*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Establish the numeric error handler.
      CALL NUM_HANDL( NUM_TRAP )
      DO 1 I = 1, NPIX

*  Loop over for all possible output pixels.  Initialise sums.
         SUMV = 0.0D0
         SUMSQ = 0.0D0

*  Set good pixel count and reset num_error from any errors that have
*  occurred.
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels forming weighted mean
*  sums.
         DO 5 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> ) THEN

*  Convert input type to double precision before forming sums should be
*  no numeric errors on this attempt.
               VAL = NUM_<T>TOD( STACK( I, J ) )

*  Conversion increment good-value counter.
               NGOOD = NGOOD + 1

*  Form mean sum, and sum of the squares.
               SUMV = SUMV + VAL 
               SUMSQ = SUMSQ + ( VAL * VAL )

*  Update the contribution buffer; all values contribute when forming
*  the mean.
               NCON( J ) = NCON( J ) + 1.0D0
            END IF
    5    CONTINUE

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN

*  Calculate the pixel mean.
            MEAN = SUMV / DBLE( NGOOD )

*  Before calculating the standard deviation, check for only one
*  contributing pixel, and rounding errors producing a negative 
*  variance value.  In all these cases, calculate a standard 
*  deviation value of zero.
            VARNCE = SUMSQ - ( MEAN * MEAN * DBLE( NGOOD ) )
            IF ( ( NGOOD .EQ. 1 ) .OR. ( VARNCE .LT. 0.0D0 ) ) THEN
               RESULT( I ) = 0.0D0

*  Otherwise, calculate the standard deviation normally.
            ELSE
               STDEV = SQRT( VARNCE / DBLE( NGOOD - 1 ) )
            END IF

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               RESVAR( I ) = VAL__BAD<T>
            ELSE
               RESULT( I ) = NUM_DTO<T>( STDEV )
               RESVAR( I ) = NUM_DTO<T>( STDEV / DBLE( NGOOD ) )
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid.
            RESULT( I ) = VAL__BAD<T>
            RESVAR( I ) = VAL__BAD<T>
         END IF

    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT
      END
