      SUBROUTINE CCG1_AD1<T>( NPIX, NLINES, STACK, MINPIX,
     :                       RESULT, RESVAR, NCON, STATUS )
*+
*  Name:
*     CCG1_AD1x

*  Purpose:
*     Combines data lines using absolute deviations from an unweighted
*     mean.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_AD1x( NPIX, NLINES, STACK, MINPIX,
*                     RESULT, RESVAR, NCON, STATUS )

*  Description:
*     This routine accepts an array consisting of a series of
*     (vectorised) lines of data. The data values in the lines are then
*     combined to form an unweighted mean, and then the absolute mean
*     deviation from the mean.  The output means are returned in the
*     array RESULT.  The output variances are standard-error values and 
*     are returned in RESVAR.

*  Arguments:
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = <TYPE> (Given)
*        The array of lines which are to be combined into a single line.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = <TYPE> (Returned)
*        The output line of data.
*     RESVAR( NPIX ) = <TYPE> (Returned)
*        The output variances.
*     NCON( NLINES ) = DOUBLE PRECISION (Given and Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2005 December 24 (MJC):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER NPIX
      INTEGER NLINES
      INTEGER MINPIX
      <TYPE> STACK( NPIX, NLINES )

*  Arguments Given and Returned:
      DOUBLE PRECISION NCON( NLINES )

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> RESVAR( NPIX )

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?
      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      DOUBLE PRECISION MEAN      ! Mean value
      INTEGER NGOOD              ! Number of good pixels
      DOUBLE PRECISION SUM1      ! Sum of absolute deviations
      DOUBLE PRECISION SUM2      ! Sum of unweighted values

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

      DO 1 I = 1, NPIX

*  Loop over for all possible output pixels.
         SUM1 = 0.0D0
         SUM2 = 0.0D0
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels forming the required 
*  sums.
         DO 5 J = 1, NLINES
            IF ( STACK( I, J ) .NE. VAL__BAD<T> ) THEN

*  Conversion increment good value counter.
               NGOOD = NGOOD + 1

*  Sum the data values.
               SUM2 = SUM2 + NUM_<T>TOD( STACK( I, J ) )

*  Update the contribution buffer; all values contribute when forming
*  the mean.
               NCON( J ) = NCON( J ) + 1.0D0
            END IF
    5    CONTINUE

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN
            MEAN = SUM2 / DBLE( NGOOD )

*  Loop over all possible contributing pixels forming the required 
*  sum.
            DO 4 J = 1, NLINES
               IF ( STACK( I, J ) .NE. VAL__BAD<T> ) THEN

*  Sum the data values.
                  SUM1 = SUM1 + ABS( NUM_<T>TOD( STACK( I, J ) ) - 
     :                               MEAN )
               END IF
    4       CONTINUE

*  Derive the required statistics.  The variance uses the standard
*  error.  
            RESULT( I ) = NUM_DTO<T>( SUM1 / DBLE( NGOOD ) )  
            RESVAR( I ) = NUM_DTO<T>( SUM1 / DBLE( NGOOD * NGOOD ) )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               RESVAR( I ) = VAL__BAD<T>
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid.
            RESULT( I ) = VAL__BAD<T>
            RESVAR( I ) = VAL__BAD<T>
         END IF

    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
