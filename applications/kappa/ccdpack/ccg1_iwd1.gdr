      SUBROUTINE CCG1_IWD1<T>( NPIX, NLINES, STACK, VARS, COORDS,
     :                         MINPIX, RESULT, RESVAR, NCON, STATUS )
*+
*  Name:
*     CCG1_IWD1<T>

*  Purpose:
*     Combines data lines using the dispersion of the intensity-weighted
*     co-ordinate.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_IWD1x( NPIX, NLINES, STACK, VARS, COORDS, MINPIX,
*                      RESULT, RESVAR, NCON, STATUS )

*  Description:
*     This routine accepts an array consisting of a series of
*     (vectorised) lines of data and their co-ordinates.  For each
*     pixel the subroutine forms the weighted dispersion of the
*     co-ordinate and an estimated variance along a line of data.  The
*     weights are the data values and their inverse variances.  The 
*     output co-ordinate dispersions are returned in the array RESULT.
*     The output variances in RESVAR are the standard error of RESULT.

*  Arguments:
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     STACK( NPIX, NLINES ) = <TYPE> (Given)
*        The array of lines which are to be combined into a single line.
*     VARS( NPIX, NLINES ) = <TYPE> (Given)
*        The data variances.
*     COORDS( NPIX, NLINES ) = <TYPE> (Given)
*        The world co-ordinates.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = <TYPE> (Returned)
*        The output line of data.
*     RESVAR( NPIX ) = <TYPE> (Returned)
*        The output variances.
*     NCON( NLINES ) = DOUBLE PRECISION (Given and Returned)
*        The actual number of contributing pixels from each input line
*        to the output line.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D or R as appropriate.  The STACK, VARS, 
*     COORDS, RESULT, and RESVAR arguments supplied to the routine must 
*     have the data type specified.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2006 January 6 (MJC):
*        Original version.
*     2006 January 26 (MJC):
*        Added a dimension to COORDS to provide a co-ordinate for each
*        pixel.  This avoids the assumption of a constant AXIS-like
*        array applicable to output pixels.  Remove the WIDTHS now that
*        the AIPS++ definition is agreed to be wrong.  Incorporate the
*        inverse data variance in the weights through the new VARS
*        argument.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER NPIX
      INTEGER NLINES
      INTEGER MINPIX
      <TYPE> STACK( NPIX, NLINES )
      <TYPE> VARS( NPIX, NLINES )
      <TYPE> COORDS( NPIX, NLINES )

*  Arguments Given and Returned:
      DOUBLE PRECISION NCON( NLINES )

*  Arguments Returned:
      <TYPE> RESULT( NPIX )
      <TYPE> RESVAR( NPIX )

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?
      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      DOUBLE PRECISION COORD     ! A co-ordinate
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      DOUBLE PRECISION M1        ! M1 moment (intensity weighted
                                 ! co-ordinate)
      INTEGER NGOOD              ! Number of good pixels
      DOUBLE PRECISION SUM       ! Sum of weighted co-ordinates
      DOUBLE PRECISION SUMSQ     ! Sum of squared weighted co-ordinates
      DOUBLE PRECISION SUMW      ! Sum of weights
      DOUBLE PRECISION VAL       ! A data value
      DOUBLE PRECISION VAR       ! A variance
      DOUBLE PRECISION VARNCE    ! Almost variance
      DOUBLE PRECISION WEIGHT    ! Weight from intensity

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Set the numeric error and set error flag value.
      CALL NUM_HANDL( NUM_TRAP )

      DO 1 I = 1, NPIX

*  Loop over for all possible output pixels.
         SUM = 0.0D0
         SUMSQ = 0.0D0
         SUMW = 0.0D0
         NGOOD = 0
         CALL NUM_CLEARERR()

*  Loop over all possible contributing pixels forming the required 
*  sums.
         DO 5 J = 1, NLINES
            IF (  STACK( I, J ) .NE. VAL__BAD<T> .AND.
     :           COORDS( I, J ) .NE. VAL__BAD<T> ) THEN

*  Conversion increment good value counter.
               NGOOD = NGOOD + 1

*  Convert input type to double precision before forming sums.  There
*  should be no numeric errors on this attempt.
               VAL = NUM_<T>TOD( STACK( I, J ) )
               VAR = NUM_<T>TOD( VARS( I, J ) )
               COORD = NUM_<T>TOD( COORDS( I, J ) )
               WEIGHT = VAL / VAR

*  Sum the intensity weights of the flux for the line.
               SUMW = SUMW + WEIGHT

*  Sum the weighted square of the co-ordinates.
               SUMSQ = SUMSQ + COORD * COORD * WEIGHT

*  Sum the weighted moment.
               SUM = SUM + COORD * WEIGHT

*  Update the contribution buffer; all values contribute when forming
*  the intensity-weighted co-ordinate.
               NCON( J ) = NCON( J ) + 1.0D0
            END IF
    5    CONTINUE

*  If there are sufficient good pixels, output the result.  Add the
*  relative errors in quadrature, normalised by the result.
*  If there are sufficient good pixels, derive the weighted mean.
         IF ( NGOOD .GE. MINPIX .AND. ABS( SUMW ) .GT. VAL__SMLD ) THEN
            M1 = NUM_DTO<T>( SUM / SUMW )
            VARNCE = ( SUMSQ - M1 * M1 * DBLE( NGOOD ) ) / SUMW
            IF ( VARNCE .GT. 0.0D0 ) THEN
               RESULT( I ) = NUM_DTO<T>( SQRT( VARNCE / 
     :                                   DBLE( NGOOD - 1 ) ) )
            ELSE
               RESULT( I ) = VAL__BAD<T>
            END IF

*  Just use the standard error on the dispersion.
            RESVAR( I ) = RESULT( I ) / DBLE( NGOOD )

*  Trap numeric errors.
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BAD<T>
               RESVAR( I ) = VAL__BAD<T>
            END IF
         ELSE

*  Not enough contributing pixels, set output invalid.
            RESULT( I ) = VAL__BAD<T>
            RESVAR( I ) = VAL__BAD<T>
         END IF

    1 CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
