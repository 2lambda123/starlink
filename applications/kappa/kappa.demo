# This file contains the definitions of demonstrations to be displayed
# using the kapdemo.tcl command. Several files can be loaded by the GUI, 
# in which case the contents of all the files are concatenated and
# treated as if they had occurred within a single file, in the order
# supplied. If a demo with the same name occurs in two or more files,
# a warning will be issued.
#
# Each file can describe several demonstrations. Zero, one or more of
# each of the following commands are allowed within the file, in any 
# order:
#
#    package {body}
#    demo <name> {body}
#    link <tag> <text>
#
# The "package" command gives information about the package being
# demonstrated. Zero, one or more of the following sub-commands can be 
# used within the body of a package command, in any order:
#
#    package {
#       name <name>            ( e.g. "name KAPPA" )
#       sun  <doc>             ( e.g. "sun sun95" )
#       info <text>            
#       version <version>      ( e.g. "version 0.14-3" )
#       email <email>          ( e.g. "email ussc@star.rl.ac.uk" )
#       url <url>              ( e.g. "url http://www.ast.man.ac.uk/~dsb/kappa/kappa.html" )
#       monolith <task> <file> ( e.g. "monolith polpack $POLPACK_DIR/polpack_mon")
#       link <tag> <text>
#    }
#
# The value of <doc> should be formatted for use with the "showme" command 
# (e.g. "sun95", not "SUN/95"). The "monolith" commands should define all
# the monoliths needed by the package demonstrations. <task> is a name by 
# which you can refer to the monolith when issuing an "Obey" command within 
# a demo script. <file> is the file spec for the executable monolith
# binary. Note, all the KAPPA monoliths are loaded automatically and so
# do not need to be inclued in the package command. The <text> associated
# with the "info" command should give a brief description of the package,
# such as is contained in the document abstract.
#
# The "demo" command defines an entire single demonstration, which is
# referred to in the GUI using the specified <name>. Zero, one or more of 
# the following sub-commands can be used within the body of a demo command,
# in any order:
#
#    demo <name> {
#       env <var>
#       step {body}
#       info <text>
#       link <name> <text>
#    } 
#
# Each "env" command declares an environment variable which is to be 
# recognised within the body of any "command" commands (see below). For
# instance the line you must include the line "env KAPPA_DIR" at the start 
# of the demo body if any of the commands within the demo refer to 
# "$KAPPA_DIR/"
# 
# Each "step" command defines a sequence of commands, commentary, etc, for 
# part of the demo (the entire demo can be contained in a single step if
# desired). The body of a "step" command can contain zero, one, or more of 
# any of the following commands, in any order:
#
#    demo <name> {
#       step {
#          pause <time>
#          text <text>
#          command {body}
#          alpha <"on" or "off">
#          link <tag> <text>
#       }
#    }
#
# The "pause" command suspends the demo for a period given by <time>, in
# seconds (this is only actually used if "automatic paging" has been selected 
# in the GUI - otherwise the demo suspends until the user presses a
# keyboard key). The demo can be "un-suspended" at any time by pressing 
# any keyboard key. Allow 3 seconds to read each line of text (assuming a
# maximum line length of 68 characters), or 3 words per second. The values
# supplied in this file can be scaled up or down before being used by
# means of the "Speed" control in the GUI.
#
# The "text" command causes the specified <text> to be displayed in the
# commentary area, replacing the previous commentary text. See below for a
# description of the formatting option which can be used within <text>.
# The commentary should consist of lots of short pages, rather than fewer
# long pages, since long texts will overflow the relatively small commentary 
# area (there is no scroll bar for the commentary area since the demo is 
# supposed to be usable without any user interaction).
#
# The body of the "command" command is any Tcl command to be executed.
# Typically this will invoke a command from the package being demonstrated, 
# using the Tcl command:
# 
#    Obey <monolith> <action> "parameter settings"
#
# The "alpha" command is used to switch the alpha screen on or off. The
# alpha screen contains the standard output generated by the previous
# "Obey" command, and replaces the GWM image display when visible.
#
# The "info" command ( a sub-command of the "demo" command - see above)
# should be used to supply text giving a brief explanation of the purpose
# and scope of the demonstration.
#
# Words and characters within any <text> value can be tagged in various ways.
# A tag is applied to text using the following syntax: 
#
#  <tag text>
#
# Here "tag" should be replaced by the tag name (tag names are case
# insensitive, except for showme document names), and "text" by the text 
# to be tagged. The angle brackets delimit the scope of the tag. Tags can 
# be nested, with inner tags over-riding outer tags if necessary. The 
# following predefined tags should always be used to tag all occurences of 
# the associated objects:
#
#    ATTR    - AST attribute names, values or settings
#    COMMAND - Package commands (i.e. atask actions)
#    FILE    - Disk file names/paths
#    EMPH    - General emphasised text
#    FOR     - Foreign terms ("e.g.", "etc.", "i.e.", etc)
#    PACK    - Package names (KAPPA, CCDPACK, ICL, IRAF, etc)
#    DOC     - A starlink document reference (eg "SUN/95"). 
#    PARAM   - Atask parameter names
#    BUTTON  - References to buttons or other controls in the GUI.
#    URL     - The text should be an http URL beginning "http:".
#
# Tags which have the form "htx:xxxx" are assumed to represent
# hyper-links to other starlink documents. if the tagged text is clicked,
# a showme command is executed to display the document specified by "xxxx"
# in the tag name. An htx label may be specified by appending it to the
# end of the document name, separated by a vertical bar (e.g.
# "htx:sun95|se_style" refers to label se_style within sun95.htx).
#
# HTX hyperlinks are created if possible for any text tagged as a COMMAND
# or as a DOC (the package command must define a <doc> to be able to do
# this).
#
# Tags which begin with "http:" are assumed to be a URL which is
# displayed (using showme) if the tagged text is clicked on.
#
# Any other tag names are assumed to describe hyper-links to text defined
# by "Link" commands within the supplied demo files. Characters thus tagged
# are displayed in a different colour, and pressing a mouse button while
# the pointer is over the tagged text will result in a dialog box appearing
# containing the linked text. The text to display for each link is defined
# by a "Link" command. Link commands have the form:
#
#   link <tag> <text>
#
# <tag> is the name of the tag associated with the text, and <text> is
# the body of the text (which may contain further tagged text in just the
# same way).
#
# "Link" commands may be placed at any level in the file. The level at
# which the Link command occurs determines its scope. Links can only be
# referred to within <text> values defined at levels lower than or equal to 
# the level at which the Link command occurs. Thus a link defined in a
# "step" cannot be referred to within <text> defined at the top (global)
# level, but a link defined at the global level can be referred to
# anywhere.
# 
# If the same tag is used by Link commands at two different levels, the <text> 
# defined within the lower level Link command will be used within <text>
# defined at the same or lower levels.
#
# If the same tag is used by Link commands at the same level, the text
# associated with the last one within the suppied file (or files) is used.


#  Describe the package. Note, the PKG_VERS string is replaced by
#  the package version number when the kappa.tar.Z release file is created. 
#  This is done by script $KAPPA_REF/make_unix_release.
package {
   name "KAPPA"
   version "PKG_VERS"
   email "ussc@star.rl.ac.uk"
   url "http://www.ast.man.ac.uk/~dsb/kappa/kappa.html"
   sun "sun95"
   monolith polpack $POLPACK_DIR/polpack_mon

   info "<pack KAPPA> is a package comprised of about 180 general-purpose
   commands for astronomical image processing and data visualisation. It
   is developed and maintained by the UK Starlink project. It is intended
   to work in conjunction with Starlink's other various specialised
   packages.\n\nIn addition to the standard Starlink data format---the
   <ndf NDF>, <pack KAPPA> can also process data in many other common
   astronomical formats by using a transparent <emph `<convert
   on-the-fly>'> conversion scheme.  Many commands can process data
   arrays of arbitrary dimension, and others work on both spectra and
   images. <pack KAPPA> operates from the <pack UNIX> C-shell, from
   Starlink <pack ICL>, and from <pack IRAF> cl.\n\nClick <htx:sun95
   here> to see the full hyper-text documentation."

} 

# Globally available linked texts.

      link CONVERT "Data stored in the <emph Starlink> NDF format is
      processed directly by <pack KAPPA>, but data stored in many other
      common astronomical data formats (<pack FITS, IRAF, DST>, <for
      etc.>) can also be processed using a transparent '<emph
      on-the-fly>' conversion process. Using this scheme, the user may
      supply non-NDF data files to <pack KAPPA> commands just as if they
      were NDFs, and they will be converted automatically into NDF
      format, using the facilities of the <emph Starlink> <pack CONVERT>
      package (see <htx:sun55 <doc SUN/55>>). This facility can be tuned
      in various ways. For instance, you can choose whether <pack KAPPA>
      commands should always produce output data files in a specified
      format (irrespective of the format of the input data), or in the
      same format as the 'corresponding' input data files.\n\nThe NDF
      format is very versatile, allowing a variance and quality value to
      be stored with every pixel, together with a sophisticated system
      for handling co-ordinate information, <for etc>. Other data formats
      may not always be able to represent the full NDF structure, and
      this should be born in mind when using <pack KAPPA> to process
      <emph foreign> (<for i.e.> nonNDF) data files." 
