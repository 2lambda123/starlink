.help tranmake Starlink kappa
.nf
Makes a transformation structure given its co-ordinate mappings.

Usage:

   tranmake transform trtype comment
      { nvin=? nvout=? class=? for1=? inv1=? ... for7=? inv7=?
        fa-fz=? pa-pz=?
      { tr
      trtype

Description:

   This application creates a transformation data structure from
   forward and inverse mappings that you supply.  The TRANSFORMER
   application uses such a structure to transform an NDF by
   resampling.  The structure can have classification qualifiers and
   a comment.

   For convenience, TRANMAKE can create a two-dimensional linear
   transformation merely from the six coefficients, or
   two-dimensional Cartesian-to-polar transformation given the
   origin position and angle.

Parameters

For information on individual parameters, select from the list below:

CLASS

CLASS( ) = LITERAL (Read)
   A list of classifications that describe the properties of the
   transformation.  This is optional, but the information can be
   used to make other applications run more efficiently.  This
   applies particularly to linear or constant determinants.
   Valid values are:
      "Linear"       --- linear and preserves straight lines,
      "Independent"  --- preserves the independence of the axes,
      "Diagonal"     --- preserves the axes themselves,
      "Isotropic"    --- preserves angles and shapes,
      "Positive_det" --- a component of reflection is absent,
      "Negative_det" --- a component of reflection is present,
      "Constant_det" --- the scale factor is constant,
      "Unit_det"     --- areas (or volumes etc.) are preserved.

   See SUN/61 Appendix B for more details of transformation
   classification and a table of the classifications of common
   mappings.  The suggested default is null (!) meaning unknown,
   and no classification is written to the transformation
   structure.  This parameter is ignored unless TRTYPE="Expres".

COMMENT

COMMENT = LITERAL (Read)
   The comment string associated with the transformation.
   A null value (!) causes a blank comment to be written into
   the transformation.  Use the "-->" symbol to indicate the
   forward transformation.  The suggested default is the null
   value.

FA-FZ

FA-FZ = LITERAL (Read)
   These parameters supply the values of `sub-expressions' used
   in the expressions FOR1-FOR7, and INV1-INV7.  Any of the 26
   may appear; there is no restriction on order.  These
   parameters should be used when repeated expressions are
   present in complex transformations.  Sub-expressions may
   contain references to other sub-expressions and constants
   (PA-PZ).  An example of using sub-expressions is:
      FOR1 > "XX=PA*ASIND(FA/PA)*X/FA"
      FOR2 > "YY=PA*ASIND(FA/PA)*Y/FA"
      INV1 > "X=PA*SIND(FB/PA)*XX/FB"
      INV2 > "Y=PA*SIND(FB/PA)*YY/FB"
      FA > SQRT(X*X+Y*Y)
      PA > 100D0
      FB > SQRT(XX*XX+YY*YY)
   where the parameter name is to the left of > and its value is
   to the right of the >.  This parameter is ignored unless
   TRTYPE="Expres".

FITTYPE

FITTYPE = _INTEGER (Read)
   The type of fit specified by coefficients supplied via the
   TR parameter.  Appropriate values are:
      1 -- shift of origin,
      2 -- shift of origin and rotation,
      3 -- shift of origin and magnification,
      4 -- shift of origin, rotation, and magnification
           (solid body), and
      5 -- a full six-parameter fit.

   The value of this parameter is used to classify the
   transformation (see the CLASS parameter).  This parameter is
   ignored unless TRTYPE="Bilinear".  [5]

FOR1-FOR7

FOR1-FOR7 = LITERAL (Read)
   The NVIN expressions that define the forward mapping or
   mappings of the transformation.  FOR1 applies to first
   output variable, and so on through to FOR7 for the seventh
   input variable.  The expressions are written in Fortran-like
   syntax.  The arithmetic operators (+,-,/,*,**) follow the
   normal order of precedence.  Using matching (nested)
   parentheses will explicitly define the order of expression
   evaluation.  The expression may contain constants and the
   built-in functions (LOG10, SQRT, SIN, TAND etc.) described in
   SUN/61 Appendix A.

   For a null forward transformation there must still be NVOUT
   expressions, each just containing the name of the output
   variable, for example, "X".  An example expression is
   "Z=PA*(NINT(ZP)+0.5)".

   This parameter is ignored unless TRTYPE="Expres".

INV1-INV7

INV1-INV7 = LITERAL (Read)
   The NVOUT expressions that define the inverse mapping or
   mappings of the transformation.  INV1 applies to first input
   variable, and so on through to INV7 for the seventh input
   variable.  The expressions are written in Fortran-like syntax.
   The arithmetic operators (+,-,/,*,**) follow the normal order
   of precedence.  Using matching (nested) parentheses will
   explicitly define the order of expression evaluation.  The
   expression may contain constants and the built-in functions
   (LOG10, SQRT, SIN, TAND etc.) described in SUN/61 Appendix A.

   For a null inverse mapping there must still be NVIN
   expressions, each just containing the name of the input
   variable, for example, "XX".  Generally, it is the inverse
   mapping that is required.  An example expression is
   "X=MOD(10*SQRT((XX+YY)*ZZ),360)"

   This parameter is ignored unless TRTYPE="Expres".

NVIN

NVIN = INTEGER (Read)
   The number of input variables in the transformation.  It must
   lie in the range 1 to 7.  The suggested default is the current
   value, and 2 initially.   This parameter is ignored unless
   TRTYPE="Expres".

NVOUT

NVOUT = INTEGER (Read)
   The number of output variables in the transformation.  It must
   lie in the range 1 to 7.  The suggested default is the number
   of input variables.  This parameter is ignored unless
   TRTYPE="Expres".

PA-PZ

PA-PZ = _DOUBLE (Read)
   These parameters supply the values of constants used in the
   expressions FOR1-FOR7, and INV1-INV7.  Any of the 26 may
   appear; there is no restriction on order.  Using parameters
   allows the substitution of repeated constants using one
   reference.  This is especially convenient for constants with
   many significant digits.  It also allows easy modification of
   parameterised expressions (expressions say with an adjustable
   centre) provided the application has not been used in the
   interim.  The parameter PI has a default value of
   3.14159265359D0.  An example of using parameters is:
      FOR1 > "XX=SQRT(FX*FX+FY*FY)"
      FOR2 > "YY=ATAN2D(-FY,FX)"
      INV1 > "X=XX*SIND(YY)+PA"
      INV2 > "Y=-YY*COSD(XX)+PB"
      FX > X-PA
      FY > Y-PB
      PA > X-centre-value
      PB > Y-centre-value
   where the parameter name is to the left of > and its value is
   to the right of the >.  This example maps Cartesian
   co-ordinates (x,y) to polar (r,theta) about a specified centre.
   This parameter is ignored unless TRTYPE="Expres".

PREC

PREC = LITERAL (Read)
   The arithmetic precision with which the transformation
   functions will be evaluated when used.  This may be either
   "_REAL" for single precision, "_DOUBLE" for double precision,
   or "_INTEGER" for integer precision.  Elastic precisions are
   used, such that a higher precision will be used if the input
   data warrant it.  So for example if PREC = "_REAL", but
   double-precision data were to be transformed, double-precision
   arithmetic would actually be used.    This parameter is
   ignored unless TRTYPE="Expres". ["_REAL"]

TR

TR( 6 ) = _DOUBLE (Read)
   If TRTYPE="Bilinear" is chosen then the values of this
   parameter are the 6 coefficients of a linear transformation of
   the type.
         X' = TR(1) + TR(2)*X + TR(3)*Y
         Y' = TR(4) + TR(5)*X + TR(6)*Y
   The initial suggested default is the identity transformation.
   ([0,1,0,0,0,1]).

   If TRTYPE="Polar", only three values are needed.  TR(1) and
   TR(2) are the x-y co-ordinates of the origin of the centre of
   the polar co-ordinate system.  An optional third value is
   the angular origin measured in degrees starting from the
   x-axis in an anticlockwise direction.  If this is omitted, it
   defaults to 0.  The initial suggested default is [0,0,0].

   This parameter is ignored unless TRTYPE="Bilinear" or "Polar".

TRANSFORM

TRANSFORM = TRN (Write)
   The actual or implied HDS object to store the created
   transformation.  It may be an HDS container file, in which
   case the transformation structure is placed within a structure
   called TRANSFORM at the top level of the file; or a path to
   the HDS object.  So for instance, if parameter
   TRANSFORM=warp9, the transformation will be placed in the
   top-level structure TRANSFORM within the HDS file warp9.sdf.
   In this case the container file may already exist.  If, on the
   other hand, the explicit structure is named, the
   transformation information will be placed there.  For example,
   to place the transformation in the extension GALPHOT of the
   NDF called NGC253, parameter TRANSFORM would be NGC253.MORE.GALPHOT.
   The structure name is limited to 15 printing characters.  Note
   that in either case the structure must not already exist.  If
   it does, an error condition results.

   This has parameter no suggested default.

TRTYPE

TRTYPE = LITERAL (Read)
   The type of transform which will be supplied.  Valid values are
   "Bilinear", "Expres", and "Polar".

   "Bilinear" requests that the transform will be generated from
   the six coefficients specified by parameter TR in the
   equations:
      X' = TR(1) + TR(2)*X + TR(3)*Y
      Y' = TR(4) + TR(5)*X + TR(6)*Y
   that define a linear two-dimensional transformation.

   "Expres" lets an arbitrary transformation be specified using
   algebraic-like statements of the type:
      FOR1 > "XX=PA+PC*X"
      FOR2 > "YY=PD+PE*Y"
      INV1 > "X=(XX-PA)/PC"
      INV2 > "Y=(YY-PD)/PE"
   where the parameter name is to the left of > and its value is
   to the right of the >.  The PA-PZs are reserved for constants
   (FA-FZ are also reserved for repeated expressions).  This
   example allows independent offsets and scales in x and y.  The
   inverse mapping must be supplied.

   "Polar" makes a 2-dimensional Cartesian-to-polar
   transformation, where the origin in Cartesian co-ordinates, and
   polar angle are specified by parameter TR.

   ["Expres"]

Examples

tranmake xyz nvin=1 nvout=1 for1="xd=1.01*x-0.34"
   inv1="x=(xd+0.34)/1.01" \
    This creates a transformation structure TRANSFORM in the HDS
    file called xyz.sdf.  It specifies mappings between one input
    and one output variable.  The output variable is 1.01 the
    output variable less 0.34.

tranmake xyz nvin=1 nvout=1 for1="xd=1.01*x-0.34" class=linear
   inv1="x=(xd+0.34)/1.01" comment="Copier correction"
    As above, except that because the transformation is linear
    (it is a magnification and translation), the classification is
    set to "Linear".  "Copier correction" is written as the comment
    in the structure.

tranmake transform=turn.more.rot45 nvin=2 nvout=2
   class=["linear","isotropic","unit_det"] pa=45
   for1="xo=cosd(pa)*xi-sind(pa)*yi"
   for2="yo=sind(pa)*xi+cosd(pa)*yi"
   inv1="xi=cosd(pa)*xo+sind(pa)*yo"
   inv2="yi=-sind(pa)*xo+cosd(pa)*yo" \
    This creates a transformation structure TURN.MORE.ROT45 (in
    HDS file turn.sdf) that rotates a two-dimensional co-ordinate
    system by 45 degrees clockwise.  Three classes---linear,
    isotropic, unit determinant---are assigned for this
    transformation.  (As it is a rotation, positive and constant
    determinants are also applicable.)

tranmake shiftim trtype=lin tr=[8.73,1,0,-64.6,0,1] fittype=1 \
   This creates an HDS file called raw_origin.sdf containing a
   transformation structure called TRANSFORM at the top-level.
   This transformation defines a shift of 8.73 of the first
   variable (usually x in an image) and a negative shift of 64.6
   in the second variable (normally y).  The shift is specified
   using the appropriate linear-transformation coefficients
   [XSHIFT,1,0,YSHIFT,0,1] and is correctly classified as a
   fit type of 1.  There is no comment.

tranmake my_ndf.more.my_extension.tran1 bilinear "15-deg rotation"

[0,0.965926,-0.258819,0,0.258819,0.965926] fittype=2
   This creates a transformation structure called TRAN1
   in the extension MY_EXTENSION of the NDF called my_ndf.  The
   structure defines a rotation by 15 degrees in about the (0,0)
   position in a plane (say x-y of an image).  The rotation
   is specified using the appropriate linear transformation
   coefficients [0,COS,-SIN,0,SIN,COS].  The comment stored in the
   structure is "15-deg rotation".

tranmake polish.origin1 trtype=p tr=[100.0,21.3] \
   This creates an HDS file called polish.sdf containing a
   transformation structure called ORIGIN1 at the top-level.
   This structure defines a Cartesian-to-polar transformation
   about an origin at (100.3,21.3) in pixel co-ordinates.
   There is no comment stored in ORIGIN1.

Notes

-  This routine does not check that the forward and inverse
expressions actually define a pair of complementary mappings.

-  On completion, the destination structure for the
transformation information equates to the current transformation
global parameter.

Related_Applications

   KAPPA: FLIP, ROTATE, SLIDE, TRANINVERT, TRANJOIN, TRANSFORMER,
   TRANTRACE; CCDPACK: CCDEDIT, TRANLIST, TRANNDF.

Authors

MJC: Malcolm J. Currie (STARLINK)

History

 1993 March 22 (MJC):
    Original version.

 1995 February (MJC):
    Included tokens for constants and expressions, and the
    two-dimensional linear fit.
.endhelp
