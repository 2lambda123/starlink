      SUBROUTINE KAPPA_MON( STATUS )
*+
*  Name:
*     KAPPA_MON

*  Purpose:
*     Top-level KAPPA subroutine for A-task monolith on UNIX.

*  Language:
*     Starlink Fortran 77

*  Type of Module:
*     ADAM A-task

*  Invocation:
*     CALL KAPPA_MON( STATUS )

*  Arguments:
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Description:
*     This is the top-level A-task monolith subroutine for the KAPPA
*     suite of A-tasks.  Each KAPPA command is an alias to a softlink
*     that points to this monolith.  The chosen command is obtained
*     from the ADAM routine TASK_GET_NAME.  The command may be specified
*     from the shell or ICL.  Given the command, the requested A-task
*     is called after a successful matching of the input string with a
*     valid task name.  If there is no match, an error report is made.

*  Implementation Deficiencies:
*     The input string has to be forced to upper-case.

*  Copyright:
*     Copyright (C) 1992 Science & Engineering Research Council.
*     Copyright (C) 1995, 1997-1999, 2004 Central Laboratory of the
*     Research Councils. Copyright (C) 2005-2006 Particle Physics &
*     Astronomy Research Council.  Copyright (C) 2009 Science &
*     Technology Facilities Council.  All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
*     02110-1301, USA.

*  Authors:
*     MJC: Malcolm J. Currie  (STARLINK)
*     DSB: David S. Berry (STARLINK)
*     PWD: Peter W. Draper (JAC, Durham University)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     1992 June 19 (MJC):
*        Original based upon the KAPPA_PM monolith.
*     1995 August 7 (MJC):
*        Set the application name for the NDF HISTORY.
*     1995 August 19 (MJC):
*        Renamed from KAPPA_PM as it is now a proper monolith.
*        Removed applications now in separate monoliths.
*     1997 May 31 (MJC):
*        Added KSTEST and SUBSTITUTE for V0.10.
*     7-OCT-1998 (DSB):
*        Added COPYBAD PROFILE LISTSHOW LISTMAKE WCSALIGN WCSTRAN for
*        V0.13
*     13-MAY-1999 (DSB):
*        Changed history application name to incorporate the current
*        version of KAPPA.
*     30-AUG-1999 (DSB):
*        Added multiple invocation of applications using LPG looping.
*     16-MAR-2004 (DSB):
*        Added call to LPG_REPLA.
*     2005 August 12 (MJC):
*        Added INTERLEAVE.
*     20-SEP-2005 (PWD):
*        Added MFITTRENDS.
*     29-SEP-2005 (DSB):
*        Added warnings about unannulled GRP identifiers.
*     26-JAN-2006 (TIMJ):
*        Add warnings about locator leaks.
*     27-JAN-2006 (TIMJ):
*        Need to exclude GLOBAL from leak check.
*     31-JAN-2006 (TIMJ):
*        Use ERR_MARK/RLSE and annul status if HDS_INFOI fails for any
*        reason.
*     23-MAR-2006 (TIMJ):
*        Enable AST Memory Cache.
*     2006 April 13 (MJC):
*        Added CHANMAP.
*     2006 October 10 (MJC):
*        Added ODDEVEN.
*     2006 October 10 (MJC):
*        Added CUMULVEC.
*     2007 March 16 (MJC):
*        Added BEAMFIT.
*     2007 July 18 (MJC):
*        Added PLUCK.
*     2-NOV-2007 (DSB):
*        Use NDG_BEGPV/ENDPV to provide automatic provenance
*        propagation.
*     2009 July 21 (MJC):
*        Use MSG_FILTER environment variable to set reporting level.
*     27-JUL-2009 (TIMJ):
*        Change API for MSG_IFGETENV
*     29-JUL-2009 (TIMJ):
*        MSG_IFGET now called in fixed part.
*     19-OCT-2009 (DSB):
*        Use NDG_BEGGH/NDG_ENDGH to record contents of group parameters in
*        the history component of output NDFs.
*     2009 November 10 (MJC/DSB):
*        Add CARPET.
*     19-OCT-2012 (DSB):
*        Use NDF_CANCL to cancel all newly active NDF parameters at the
*        end of the monolith. This avoid such parameters causing warnings
*        aboud dangling HDS locators.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT  NONE              ! no implicit typing allowed

*  Global Constants:
      INCLUDE  'SAE_PAR'          ! SSE global definitions
      INCLUDE  'GRP_PAR'          ! GRP definitions
      INCLUDE  'DAT_PAR'          ! DAT definitions
      INCLUDE  'AST_PAR'          ! AST_TUNE definition

*  Status:
      INTEGER  STATUS

*  External References:
      LOGICAL LPG_AGAIN           ! Invoke the application again?
      INTEGER CHR_LEN             ! Length of string

*  Local Variables:
      REAL DELAY                 ! Delay between loops in seconds
      LOGICAL DISAB              ! Disable looping?
      CHARACTER*60 FILTER        ! HDS_INFOI filter string
      INTEGER IPOSN              ! Position in string
      INTEGER LSTAT              ! Local status
      INTEGER MEMCACHE           ! Previous state of AST memory cache
      INTEGER MSGLEV             ! Message level
      CHARACTER*15 NAME          ! Task name from the command
      INTEGER NGRP0              ! Number of active GRP groups on entry
      INTEGER NGRP1              ! Number of active GRP groups on exit
      INTEGER NLOC0              ! Number of active locators on entry
      INTEGER NLOC1              ! Number of active locators on exit
      LOGICAL REPL               ! Replace input NDFs?
      LOGICAL VERB               ! Run in verbose mode?

*.

*  Check the inherited status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Configure AST to cache memory for performance
      MEMCACHE = AST_TUNE( 'MemoryCaching', 1, STATUS )

*  For debugging, watch one of the leaked GRP identifiers listed by the
*  call to GRP_WATCH at the end of this routine (if any).
*      CALL GRP_WATCH( 3129345, status );

*  Mark any currently active NDF parameters, so that they will not be
*  cancelled by the call to NDF_CANCL at the end of this rotuine.
      CALL NDF_CANCL( '*', STATUS )

*  Note the current number of active GRP identifiers.
      CALL GRP_INFOI( GRP__NOID, 0, 'NGRP', NGRP0, STATUS )

*  Obtain the command from the environment.  This returns uppercase
*  names.
      CALL TASK_GET_NAME( NAME, STATUS )

*  Need to construct a string to filter out parameter locators
*  from the list of active locators. Need monolith and taskname
*  excluded. Also seem to need HDS_SCRATCH excluded.
      FILTER = '!KAPPA_MON,!HDS_SCRATCH,!GLOBAL,!'
      IPOSN = CHR_LEN( FILTER )
      CALL CHR_APPND( NAME, FILTER, IPOSN )

*  Note the current number of active locators (excluding parameter
*  system
      CALL HDS_INFOI( DAT__NOLOC, 'LOCATORS', FILTER,
     :                NLOC0, STATUS )

*  Identify and execute the task.
*  ==============================

*  Make CAT run in quiet mode.
      CALL CAT_TUNES( 'QUIET', 'YES', STATUS )

*  Define the current application name for history. The package version
*  number gets substituted in here when the KAPPA release source tar
*  file  is contructed.
      CALL NDF_HAPPN( NAME // ' (KAPPA @PACKAGE_VERSION@)', STATUS )

*  See if NDF names should be reported when looping.
      CALL KPG1_ENVDF( 'KAPPA_REPORT_NAMES', VERB, STATUS )

*  If not, see if verbose reporting is required.
      IF ( .NOT. VERB ) CALL KPG1_VERB( VERB, 'KAPPA', STATUS )

*  See if looping should be disabled.
      CALL KPG1_ENVDF( 'KAPPA_LOOP_DISABLE', DISAB, STATUS )

*  See if a delay should be included between invocations.
      DELAY = 0.0
      CALL KPG1_ENV0R( 'KAPPA_LOOP_DELAY', DELAY, STATUS )

*  Initialise the common blocks used to control multiple invocation of
*  applications to process lists of NDFs.
      CALL LPG_START( VERB, DELAY, DISAB, STATUS )

*  See if input NDFs are allowed to be overwritten by output NDFs.
      CALL KPG1_ENVDF( 'KAPPA_REPLACE', REPL, STATUS )
      CALL LPG_REPLA( REPL, STATUS )

*  Loop round invoking the task for each set of NDFs specified by the
*  user.
      DO WHILE( LPG_AGAIN( STATUS ) )

*  Begin a provenance block. This causes event handlers to be registered
*  with the NDF library so that a handler routine in NDG is called every
*  time an NDF is opened. This handler routine keeps a record of all
*  NDFs that are opened for input or output, until the block is closed
*  by calling NDG_ENDPV.
         CALL NDG_BEGPV( STATUS )

*  Begin a GRP NDF history block. This causes the contents of GRP groups
*  to be appended to default history text added to any NDFs during the
*  block.
         CALL NDG_BEGGH( STATUS )

*  Check the string against valid A-task names---if matched then call
*  the relevant A-task.

*  Adds two NDF data structures.
         IF ( NAME .EQ. 'ADD' ) THEN
            CALL ADD ( STATUS )

*  Derives statistics of pixels within a specified circle of a
*  two-dimensional data array.
         ELSE IF ( NAME .EQ. 'APERADD' ) THEN
            CALL APERADD ( STATUS )

*  Creates a text file describing selected regions of an image.
         ELSE IF ( NAME .EQ. 'ARDGEN' ) THEN
            CALL ARDGEN ( STATUS )

*  Uses an ARD file to set some pixels of an NDF to be bad.
         ELSE IF ( NAME .EQ. 'ARDMASK' ) THEN
            CALL ARDMASK ( STATUS )

*  Fits Gaussian beams in an NDF
         ELSE IF ( NAME .EQ. 'BEAMFIT' ) THEN
            CALL BEAMFIT ( STATUS )

*  Smooths a one- or two-dimensional image using a square or rectangular
*  box filter.
         ELSE IF ( NAME .EQ. 'BLOCK' ) THEN
            CALL BLOCK ( STATUS )

*  Adds a scalar to an NDF data structure.
         ELSE IF ( NAME .EQ. 'CADD' ) THEN
            CALL CADD ( STATUS )

*  Evaluates a mathematical expression.
         ELSE IF ( NAME .EQ. 'CALC' ) THEN
            CALL CALC ( STATUS )

*  Calculates polarisation parameters.
         ELSE IF ( NAME .EQ. 'CALPOL' ) THEN
            CALL CALPOL ( STATUS )

*  Forms a `carpet' cube by extruding an image along a third
*  `data value' axis.
         ELSE IF ( NAME .EQ. 'CARPET' ) THEN
            CALL CARPET ( STATUS )

*  Divides an NDF by a scalar.
         ELSE IF ( NAME .EQ. 'CDIV' ) THEN
            CALL CDIV ( STATUS )

*  Finds the centroids of star-like features in an NDF.
         ELSE IF ( NAME .EQ. 'CENTROID' ) THEN
            CALL CENTROID ( STATUS )

*  Creates a channel map from a cube NDF by compressing along a
*  nominated axis.
         ELSE IF ( NAME .EQ. 'CHANMAP' ) THEN
            CALL CHANMAP ( STATUS )

*  Replaces the values of selected pixels in an NDF.
         ELSE IF ( NAME .EQ. 'CHPIX' ) THEN
            CALL CHPIX ( STATUS )

*  Multiplies an NDF by a scalar.
         ELSE IF ( NAME .EQ. 'CMULT' ) THEN
            CALL CMULT ( STATUS )

*  Collapse an NDF along one axis.
         ELSE IF ( NAME .EQ. 'COLLAPSE' ) THEN
            CALL COLLAPSE ( STATUS )

*  Reduces the size of an NDF by adding values in rectangular boxes.
         ELSE IF ( NAME .EQ. 'COMPADD' ) THEN
            CALL COMPADD ( STATUS )

*  Reduces the size of an NDF by averaging values in rectangular boxes.
         ELSE IF ( NAME .EQ. 'COMPAVE' ) THEN
            CALL COMPAVE ( STATUS )

*  Reduces the size of an NDF by picking equally spaced pixels.
         ELSE IF ( NAME .EQ. 'COMPICK' ) THEN
            CALL COMPICK ( STATUS )

*  Convolves a pair of one- or two-dimensional NDFs together.
         ELSE IF ( NAME .EQ. 'CONVOLVE' ) THEN
            CALL CONVOLVE ( STATUS )

*  Copies bad pixels from one NDF to another.
         ELSE IF ( NAME .EQ. 'COPYBAD' ) THEN
            CALL COPYBAD ( STATUS )

*  Generate a test two-dimensional data array from a selection of
*  several types.
         ELSE IF ( NAME .EQ. 'CREFRAME' ) THEN
            CALL CREFRAME ( STATUS )

*  Subtracts a scalar from an NDF data structure.
         ELSE IF ( NAME .EQ. 'CSUB' ) THEN
            CALL CSUB ( STATUS )

*  Form cumyulative vector.
         ELSE IF ( NAME .EQ. 'CUMULVEC' ) THEN
            CALL CUMULVEC ( STATUS )

*  Divides one NDF data structure by another.
         ELSE IF ( NAME .EQ. 'DIV' ) THEN
            CALL KAP_DIV( STATUS )

*  Removes pixels with large errors from an NDF.
         ELSE IF ( NAME .EQ. 'ERRCLIP' ) THEN
            CALL ERRCLIP ( STATUS )

*  Takes the exponential of each pixel of a data array (specified base).
         ELSE IF ( NAME .EQ. 'EXPON' ) THEN
            CALL EXPON ( STATUS )

*  Removes defects from a substantially flat two-dimensional NDF.
         ELSE IF ( NAME .EQ. 'FFCLEAN' ) THEN
            CALL FFCLEAN ( STATUS )

*  Removes regions of bad values from a two-dimensional NDF.
         ELSE IF ( NAME .EQ. 'FILLBAD' ) THEN
            CALL FILLBAD ( STATUS )

*  Reverses an NDF's pixels along a specified dimension.
         ELSE IF ( NAME .EQ. 'FITSURFACE' ) THEN
            CALL FITSURFACE ( STATUS )

*  Reverses an NDF's pixels along a specified dimension.
         ELSE IF ( NAME .EQ. 'FLIP' ) THEN
            CALL FLIP ( STATUS )

*  Performs forward and inverse Fourier transforms of 1- or
*  two-dimensional NDFs.
         ELSE IF ( NAME .EQ. 'FOURIER' ) THEN
            CALL FOURIER ( STATUS )

*  Smooths a one- or two-dimensional image using a Gaussian filter.
         ELSE IF ( NAME .EQ. 'GAUSMOOTH' ) THEN
            CALL GAUSMOOTH ( STATUS )

*  Replaces bad pixels in a two-dimensional data array with the local
*  median.
         ELSE IF ( NAME .EQ. 'GLITCH' ) THEN
            CALL GLITCH ( STATUS )

*  Displays the values of the KAPPA global parameters.
         ELSE IF ( NAME .EQ. 'GLOBALS' ) THEN
            CALL GLOBALS ( STATUS )

*  Computes ordered statistics for an NDF's pixels using a histogram.
         ELSE IF ( NAME .EQ. 'HISTAT' ) THEN
            CALL HISTAT ( STATUS )

*  Performs an histogram equalisation on an NDF.
         ELSE IF ( NAME .EQ. 'HISTEQ' ) THEN
            CALL HISTEQ ( STATUS )

*  Computes an histogram of an NDF's values.
         ELSE IF ( NAME .EQ. 'HISTOGRAM' ) THEN
            CALL HISTOGRAM ( STATUS )

*  Forms a higher-resolution NDF by interleaving a set of NDFs.
         ELSE IF ( NAME .EQ. 'INTERLEAVE' ) THEN
            CALL INTERLEAVE ( STATUS )

*  Gives help about KAPPA.
         ELSE IF ( NAME .EQ. 'KAPHELP' ) THEN
            CALL KAPHELP ( STATUS )

*  Check the package version number.
         ELSE IF ( NAME .EQ. 'KAPVERSION' ) THEN
            CALL KAPVERSION ( STATUS )

*  Compares data sets using the Kolmogorov-Smirnov test
         ELSE IF ( NAME .EQ. 'KSTEST' ) THEN
            CALL KSTEST ( STATUS )

*  Performs a Laplacian convolution as an edge detector in a
*  two-dimensional data array.
         ELSE IF ( NAME .EQ. 'LAPLACE' ) THEN
            CALL LAPLACE ( STATUS )

*  Create a positions list.
         ELSE IF ( NAME .EQ. 'LISTMAKE' ) THEN
            CALL LISTMAKE ( STATUS )

*  Display a positions list.
         ELSE IF ( NAME .EQ. 'LISTSHOW' ) THEN
            CALL LISTSHOW ( STATUS )

*  Takes the logarithm of each pixel of a data array (specified base).
         ELSE IF ( NAME .EQ. 'LOGAR' ) THEN
            CALL LOGAR ( STATUS )

*  Outputs the values of a sub-array of a two-dimensional data array to
*  the screen or an ASCII file.
         ELSE IF ( NAME .EQ. 'LOOK' ) THEN
            CALL LOOK ( STATUS )

*  Performs a Richardson-Lucy deconvolution of a one- or two-dimensional
*  array.
         ELSE IF ( NAME .EQ. 'LUCY' ) THEN
            CALL LUCY ( STATUS )

*   Creates a signal-to-noise NDF.
         ELSE IF ( NAME .EQ. 'MAKESNR' ) THEN
            CALL MAKESNR ( STATUS )

*   Creates a two-dimensional NDF from the coefficients of a polynomial
*   surface.
         ELSE IF ( NAME .EQ. 'MAKESURFACE' ) THEN
            CALL MAKESURFACE ( STATUS )

*  Converts all or part of a data array from one dimensionality to
*  another.
         ELSE IF ( NAME .EQ. 'MANIC' ) THEN
            CALL MANIC ( STATUS )

*  Evaluates mathematical expressions applied to NDF data structures.
         ELSE IF ( NAME .EQ. 'MATHS' ) THEN
            CALL MATHS ( STATUS )

*  Smooths a two-dimensional data array using a weighted median filter.
         ELSE IF ( NAME .EQ. 'MEDIAN' ) THEN
            CALL MEDIAN ( STATUS )

*  Determine trends using polynomial fits.
         ELSE IF ( NAME .EQ. 'MFITTREND' ) THEN
            CALL MFITTREND ( STATUS )

*  Does cumulative statistics on a two-dimensional sub-array over a
*  sequence of two-dimensional data arrays.
         ELSE IF ( NAME .EQ. 'MSTATS' ) THEN
            CALL MSTATS ( STATUS )

*  Multiplies two NDF data structures.
         ELSE IF ( NAME .EQ. 'MULT' ) THEN
            CALL MULT ( STATUS )

*  Resets the KAPPA global parameters.
         ELSE IF ( NAME .EQ. 'NOGLOBALS' ) THEN
            CALL NOGLOBALS ( STATUS )

*  Replaces all occurrences of magic-value pixels in a data array by a
*  user-defined value.
         ELSE IF ( NAME .EQ. 'NOMAGIC' ) THEN
            CALL NOMAGIC ( STATUS )

*  Normalizes one NDF to a similar NDF by calculating a scale
*  and zero difference.
         ELSE IF ( NAME .EQ. 'NORMALIZE' ) THEN
            CALL NORMALIZE ( STATUS )

*  Counts the number of elements of a data array with values
*  greater than a specified value.
         ELSE IF ( NAME .EQ. 'NUMB' ) THEN
            CALL NUMB ( STATUS )

*  Averages alternate pixels in a vector.
         ELSE IF ( NAME .EQ. 'ODDEVEN' ) THEN
            CALL ODDEVEN ( STATUS )

*  Sets pixels outside a specified circle in a two-dimensional data
*  array to a specified value.
         ELSE IF ( NAME .EQ. 'OUTSET' ) THEN
            CALL OUTSET ( STATUS )

*  Obtains the value or values of an application parameter.
         ELSE IF ( NAME .EQ. 'PARGET' ) THEN
            CALL PARGET ( STATUS )

*  Pastes a series of NDFs upon each other.
         ELSE IF ( NAME .EQ. 'PASTE' ) THEN
            CALL PASTE ( STATUS )

*  Permute NDF axes
         ELSE IF ( NAME .EQ. 'PERMAXES' ) THEN
            CALL PERMAXES ( STATUS )

*  Expands an NDF by pixel duplication.
         ELSE IF ( NAME .EQ. 'PIXDUPE' ) THEN
            CALL PIXDUPE ( STATUS )

*  Plucks slices from an NDF at arbitrary positions.
         ELSE IF ( NAME .EQ. 'PLUCK' ) THEN
            CALL PLUCK ( STATUS )

*  Takes the specified power of each pixel of a data array.
         ELSE IF ( NAME .EQ. 'POW' ) THEN
            CALL KAP_POW ( STATUS )

*  Create a one-dimensional profile through an N-dimensional NDF.
         ELSE IF ( NAME .EQ. 'PROFILE' ) THEN
            CALL PROFILE ( STATUS )

*  Determines the parameters of a model star profile by fitting
*  star images in a two-dimensional NDF.
         ELSE IF ( NAME .EQ. 'PSF' ) THEN
            CALL PSF ( STATUS )

*  Uses an AST Region to set some pixels of an NDF to be bad.
         ELSE IF ( NAME .EQ. 'REGIONMASK' ) THEN
            CALL REGIONMASK ( STATUS )

*  Transforms an NDF.
         ELSE IF ( NAME .EQ. 'REGRID' ) THEN
            CALL REGRID ( STATUS )

*  Adds a scalar to a section of a an NDF data structure to correct
*  rift-valley defects.
         ELSE IF ( NAME .EQ. 'RIFT' ) THEN
            CALL RIFT ( STATUS )

*  Rotates a two-dimensional data array through any angle.
         ELSE IF ( NAME .EQ. 'ROTATE' ) THEN
            CALL ROTATE ( STATUS )

*  Copies polygonal segments from one two-dimensional data array to
*  another.
         ELSE IF ( NAME .EQ. 'SEGMENT' ) THEN
            CALL SEGMENT ( STATUS )

*  Replaces all occurrences of a given value in an NDF array with the
*  bad value.
         ELSE IF ( NAME .EQ. 'SETMAGIC' ) THEN
            CALL SETMAGIC ( STATUS )

*  Enhances edges in a two-dimensional NDF using a shadow effect.
         ELSE IF ( NAME .EQ. 'SHADOW' ) THEN
            CALL SHADOW ( STATUS )

*  Realigns a two-dimensional data array via an x-y shift.
         ELSE IF ( NAME .EQ. 'SLIDE' ) THEN
            CALL SLIDE ( STATUS )

*  Squashes or stretches a two-dimensional data array in either or both
*  axes.
         ELSE IF ( NAME .EQ. 'SQORST' ) THEN
            CALL SQORST ( STATUS )

*  Computes simple statistics for an NDF's pixels.
         ELSE IF ( NAME .EQ. 'STATS' ) THEN
            CALL STATS ( STATUS )

*  Subtracts one NDF data structure from another.
         ELSE IF ( NAME .EQ. 'SUB' ) THEN
            CALL SUB ( STATUS )

*  Replaces all occurrences of a given value in an NDF array with
*  another value.
         ELSE IF ( NAME .EQ. 'SUBSTITUTE' ) THEN
            CALL SUBSTITUTE ( STATUS )

*  Fits a polynomial or spline surface to two-dimensional data array.
         ELSE IF ( NAME .EQ. 'SURFIT' ) THEN
            CALL SURFIT ( STATUS )

*  Edits an NDF such that array values below and above two thresholds
*  take constant values.
         ELSE IF ( NAME .EQ. 'THRESH' ) THEN
            CALL THRESH ( STATUS )

*  Converts free-format data into an NDF.
         ELSE IF ( NAME .EQ. 'TRANDAT' ) THEN
            CALL TRANDAT ( STATUS )

*  Performs a trigonometric transformation on a data array.
         ELSE IF ( NAME .EQ. 'TRIG' ) THEN
            CALL TRIG ( STATUS )

*  Align a group of NDFs using the WCS components.
         ELSE IF ( NAME .EQ. 'WCSALIGN' ) THEN
            CALL WCSALIGN ( STATUS )

*  Mosaic a group of NDFs using the WCS components.
         ELSE IF ( NAME .EQ. 'WCSMOSAIC' ) THEN
            CALL WCSMOSAIC ( STATUS )

*  Transforms positions between NDF WCS Frames.
         ELSE IF ( NAME .EQ. 'WCSTRAN' ) THEN
            CALL WCSTRAN ( STATUS )

*  Translates WCS by given offsets
         ELSE IF ( NAME .EQ. 'WCSSLIDE' ) THEN
            CALL WCSSLIDE ( STATUS )

*  Applies a Wiener filter to a one- or two-dimensional array.
         ELSE IF ( NAME .EQ. 'WIENER' ) THEN
            CALL WIENER ( STATUS )

*  Replaces regions in a two-dimensional data array by bad values or by
*  linear interpolation.
         ELSE IF ( NAME .EQ. 'ZAPLIN' ) THEN
            CALL ZAPLIN ( STATUS )

         ELSE

*  No such option exists.
            STATUS = SAI__ERROR
            CALL MSG_SETC( 'CMD', NAME )
            CALL ERR_REP( 'KAPPA_MON_NOCOM',
     :     'KAPPA: No such option ^CMD.', STATUS )

         END IF

*  End the GRP NDF history block.
         CALL NDG_ENDGH( STATUS )

*  End the provenance block. This will result in every output NDF being
*  given a provenance extension containing a record of the input NDFs
*  that the application accessed in order to create the output NDF. Any
*  output NDF that already contains a provenance extension is left
*  unchanged (so individual application can override this automatic
*  provenance handling by adding a provenance extension to the output
*  NDF itself).
         CALL NDG_ENDPV( 'KAPPA:'//NAME, STATUS )

      END DO

*  Note the current number of active GRP identifiers. Do this in a new
*  error reporting context so that we get the correct value even if an
*  error has occurred.
      CALL ERR_BEGIN( STATUS )
      CALL GRP_INFOI( GRP__NOID, 0, 'NGRP', NGRP1, STATUS )

*  If there are more active groups now than there were on entry, there
*  must be a problem (GRP identifiers are not being freed somewhere). So
*  report it.
      IF ( STATUS .EQ. SAI__OK .AND. NGRP1 .GT. NGRP0 ) THEN
         CALL MSG_BLANK( STATUS )
         CALL MSG_SETC( 'NAME', NAME )
         CALL MSG_SETI( 'NGRP0', NGRP0 )
         CALL MSG_SETI( 'NGRP1', NGRP1 )
         CALL MSG_OUT( 'KAPPA_NGRP', 'WARNING: The number of active '//
     :             'GRP identifiers increased from ^NGRP0 to ^NGRP1 '//
     :             'during execution of ^NAME (KAPPA programming '//
     :             'error).', STATUS )
         CALL MSG_BLANK( STATUS )
         CALL GRP_WATCH( 0, STATUS )
      END IF
      CALL ERR_END( STATUS )

*  The NDF library registers locators with SUBPAR for any NDFs that are
*  opened directly using NDF_ASSOC or NDF_EXIST (most KAPPA routines use
*  LPG_ASSOC instead). These locators are only annulled when the associated
*  parameters are cancelled, but most kappa applications do not explicitly
*  cancel their NDF parameters. This means that such locators are picked
*  up by the following check for dangling HDS locators. In order to
*  prevent this, we cancel any remaining NDF parameters now, excluding
*  any that were marked by the call to NDF_CANCL at the start of this
*  routine.
      CALL NDF_CANCL( ' ', STATUS )

*  Note the current number of active locators. Do this in a new
*  error reporting context so that we get the correct value even if an
*  error has occurred.
      CALL ERR_MARK
      LSTAT = SAI__OK
      CALL HDS_INFOI( DAT__NOLOC, 'LOCATORS', FILTER,
     :     NLOC1, LSTAT )

*  If there are more active locators now than there were on entry, there
*  must be a problem (HDS locators are not being freed somewhere). So
*  report it.
      IF ( LSTAT .EQ. SAI__OK .AND. NLOC1 .GT. NLOC0 ) THEN
         CALL MSG_BLANK( LSTAT )
         CALL MSG_SETC( 'NAME', NAME )
         CALL MSG_SETI( 'NLOC0', NLOC0 )
         CALL MSG_SETI( 'NLOC1', NLOC1 )
         CALL MSG_OUT( 'KAPPA_NLOC', 'WARNING: The number of active '//
     :             'HDS locators increased from ^NLOC0 to ^NLOC1 '//
     :             'during execution of ^NAME (KAPPA programming '//
     :             'error).', LSTAT )
         CALL MSG_BLANK( LSTAT )
      END IF
      IF ( LSTAT .NE. SAI__OK ) CALL ERR_ANNUL( LSTAT )

      CALL ERR_RLSE

*  Clear the AST memory cache
      MEMCACHE = AST_TUNE( 'MemoryCaching', MEMCACHE, STATUS )

*  End and return.

      END

