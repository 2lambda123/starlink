      SUBROUTINE POLPACK_MON( STATUS )
*+
*  Name:
*     POLPACK_MON

*  Purpose:
*     Top-level POLPACK subroutine for A-task monolith on Unix.

*  Language:
*     UNIX Fortran 77

*  Type of Module:
*     ADAM A-task

*  Invocation:
*     CALL POLPACK_MON( STATUS )

*  Arguments:
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Description:
*     This is the top-level A-task monolith subroutine for the suite of A-tasks
*     associated with the POLPACK package. The chosen command is obtained from
*     the ADAM routine TASK_GET_NAME. The command may be specified from the
*     shell, ICL, StarTcl, etc. Given the command, the requested A-task is
*     called after a successful matching of the input string with a valid task
*     name.  If there is no match, an error report is made.

*  Copyright:
*     Copyright (C) 1998 Central Laboratory of the Research Councils
*     Copyright (C) 2006 Particle Physics and Astronomy Research Council.
*     Copyright (C) 2008 Science & Technology Facilities Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     BC:  Brad Cavanagh (JAC)
*     DSB: David S. Berry (STARLINK)
*     {enter_new_authors_here}

*  History:
*     28-JUN-1997 (DSB):
*        Original version, modified from equivalent IRCAMPACK routine.
*     10-NOV-1998 (DSB):
*        SEGMENT removed (POLKA now uses KAPPA:SEGMENT).
*     25-MAR-1999 (DSB):
*        Added POLSIM.
*     8-JUN-1999 (DSB):
*        Added POLSTACK.
*     20-SEP-2000 (DSB):
*        Set CAT tuning parameter QUIET to YES to suppress warnings about
*        blank format strings.
*     23-NOV-2000 (DSB):
*        Added POLWRTCL.
*     7-DEC-2000 (DSB):
*        Added POLRDTCL.
*     16-AUG-2006 (BC):
*        Add GRP and locator leak checker.
*     29-APR-2008 (DSB):
*        Use NDG_BEGPV/ENDPV to provide automatic provenance propagation.
*     19-OCT-2012 (DSB):
*        Use NDF_CANCL to cancel all newly active NDF parameters at the
*        end of the monolith. This avoid such parameters causing warnings
*        aboud dangling HDS locators.
*     19-DEC-2012 (DSB):
*        Implement LPG looping.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT  NONE              ! no implicit typing allowed

*  Global Constants:
      INCLUDE  'SAE_PAR'          ! SSE global definitions
      INCLUDE  'GRP_PAR'          ! GRP definitions
      INCLUDE  'DAT_PAR'          ! DAT definitions
      INCLUDE  'PAR_PAR'          ! Parameter system definitions

*  Status:
      INTEGER  STATUS

*  External References:
      LOGICAL LPG_AGAIN           ! Invoke the application again?
      INTEGER CHR_LEN             ! Length of a character string less
                                  ! any trailing blanks

*  Local Variables:
      CHARACTER FILTER*( 60 )     ! HDS_INFOI filter string
      CHARACTER NAME*( PAR__SZNAM ) ! Action name
      INTEGER IPOSN               ! Position in string
      INTEGER LSTAT               ! Local status
      INTEGER NGRP0               ! Number of active GRP groups on entry
      INTEGER NGRP1               ! Number of active GRP groups on exit
      INTEGER NLOC0               ! Number of active locators on entry
      INTEGER NLOC1               ! Number of active locators on exit


*.

*  Check the inherited status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  For debugging, watch one of the leaked GRP identifiers listed by the
*  call to GRP_WATCH at the end of this routine (if any).
*      CALL GRP_WATCH( 3129345, status );

*  Mark any currently active NDF parameters, so that they will not be
*  cancelled by the call to NDF_CANCL at the end of this rotuine.
      CALL NDF_CANCL( '*', STATUS )

*  Note the current number of active GRP identifiers.
      CALL GRP_INFOI( GRP__NOID, 0, 'NGRP', NGRP0, STATUS )

*  Free up any compiled expressions currently in use by CAT. This should
*  be done by CAT itself, but it can't (at the moment).
      CALL ANT_XINIT( STATUS )

*  Stop CAT from complaining about blank format strings.
      CALL CAT_TUNES( 'QUIET', 'YES', STATUS )

*  Obtain the action name.
      CALL TASK_GET_NAME( NAME, STATUS )

*  Need to construct a string to filter out parameter locators
*  from the list of active locators. Need monolith and taskname
*  excluded. Also seem to need HDS_SCRATCH excluded.
      FILTER = '!POLPACK_MON,!HDS_SCRATCH,!GLOBAL,!'
      IPOSN = CHR_LEN( FILTER )
      CALL CHR_APPND(NAME, FILTER, IPOSN)

*  Note the current number of active locators (excluding parameter
*  system
      CALL HDS_INFOI( DAT__NOLOC, 'LOCATORS', FILTER,
     :     NLOC0, STATUS )

*  Define the current application name for history. The package version
*  number gets substituted in here when the POLPACK release source tar file
*  is contructed.
      CALL NDF_HAPPN( NAME // ' (@PACKAGE_VERSION@)', STATUS )

*  Re-read the polpack configuration file.
      CALL POL1_CNFIG( ' ', STATUS )

*  Initialise the common blocks used to control multiple invocation of
*  applications to process lists of NDFs.
      CALL LPG_START( .FALSE., 0.0, .FALSE., STATUS )

*  Loop round invoking the task for each set of NDFs specified by the
*  user.
      DO WHILE( LPG_AGAIN( STATUS ) )

*  Begin a provenance block. This causes event handlers to be registered
*  with the NDF library so that a handler routine in NDG is called every
*  time an NDF is opened. This handler routine keeps a record of all NDFs
*  that are opened for input or output, until the block is closed by
*  calling NDG_ENDPV.
         CALL NDG_BEGPV( STATUS )

*  Check the string against valid A-task names---if matched then call
*  the relevant A-task
         IF ( NAME .EQ. 'POLBIN' ) THEN
            CALL POLBIN( STATUS )

         ELSE IF ( NAME .EQ. 'POLCAL' ) THEN
            CALL POLCAL( STATUS )

         ELSE IF ( NAME .EQ. 'POLEXP' ) THEN
            CALL POLEXP( STATUS )

         ELSE IF ( NAME .EQ. 'POLEXPX' ) THEN
            CALL POLEXPX( STATUS )

         ELSE IF ( NAME .EQ. 'POLEXT' ) THEN
            CALL POLEXT( STATUS )

         ELSE IF ( NAME .EQ. 'POLIMP' ) THEN
            CALL POLIMP( STATUS )

         ELSE IF ( NAME .EQ. 'POLIMPX' ) THEN
            CALL POLIMPX( STATUS )

         ELSE IF ( NAME .EQ. 'POLCENT' ) THEN
            CALL POLCENT( STATUS )

         ELSE IF ( NAME .EQ. 'POLHELP' ) THEN
            CALL POLHELP( STATUS )

         ELSE IF ( NAME .EQ. 'POLIMAGE' ) THEN
            CALL POLIMAGE( STATUS )

         ELSE IF ( NAME .EQ. 'POLKA' ) THEN
            CALL POLKA( STATUS )

         ELSE IF ( NAME .EQ. 'POLPLOT' ) THEN
            CALL POLPLOT( STATUS )

         ELSE IF ( NAME .EQ. 'POLPREP' ) THEN
            CALL POLPREP( STATUS )

         ELSE IF ( NAME .EQ. 'POLRDTCL' ) THEN
            CALL POLRDTCL( STATUS )

         ELSE IF ( NAME .EQ. 'POLROTREF' ) THEN
            CALL POLROTREF( STATUS )

         ELSE IF ( NAME .EQ. 'POLSIM' ) THEN
            CALL POLSIM( STATUS )

         ELSE IF ( NAME .EQ. 'POLSTACK' ) THEN
            CALL POLSTACK( STATUS )

         ELSE IF ( NAME .EQ. 'POLVEC' ) THEN
            CALL POLVEC( STATUS )

         ELSE IF ( NAME .EQ. 'POLVERSION' ) THEN
            CALL POLVERSION( STATUS )

         ELSE IF ( NAME .EQ. 'POLWRTCL' ) THEN
            CALL POLWRTCL( STATUS )

         ELSE IF ( NAME .EQ. 'POLZCONV' ) THEN
            CALL POLZCONV( STATUS )

         ELSE

*  No such option exists.
            STATUS = SAI__ERROR
            CALL MSG_SETC( 'CMD', NAME )
            CALL ERR_REP( 'POLPACK_MON_NOCOM',
     :                    'POLPACK: No such command ^CMD.', STATUS )

         END IF

*  End the provenance block. This will result in every output NDF being
*  given a provenance extension containing a record of the input NDFs
*  that the application accessed in order to create the output NDF. Any
*  output NDF that already contains a provenance extension is left
*  unchanged (so individual application can over-ride this automatic
*  provenance handling by adding a provenance extension to the output NDF
*  itself).
         CALL NDG_ENDPV( 'POLPACK:'//NAME, STATUS )

      END DO

*  Note the current number of active GRP identifiers. Do this in a new
*  error reporting context so that we get the correct value even if an
*  error has occurred.
      CALL ERR_BEGIN( STATUS )
      CALL GRP_INFOI( GRP__NOID, 0, 'NGRP', NGRP1, STATUS )

*  If there are more active groups now than there were on entry, there
*  must be a problem (GRP identifiers are not being freed somewhere). So
*  report it.
      IF( STATUS .EQ. SAI__OK .AND. NGRP1 .GT. NGRP0 ) THEN
         CALL MSG_BLANK( STATUS )
         CALL MSG_SETC( 'NAME', NAME )
         CALL MSG_SETI( 'NGRP0', NGRP0 )
         CALL MSG_SETI( 'NGRP1', NGRP1 )
         CALL MSG_OUT( 'PPACK_NGRP', 'WARNING: The number of active '//
     :             'GRP identifiers increased from ^NGRP0 to ^NGRP1 '//
     :             'during execution of ^NAME (POLPACK programming '//
     :             ' error).', STATUS )
         CALL GRP_INFOI( GRP__NOID, 0, 'ACTIVE', NGRP1, STATUS )
         CALL MSG_BLANK( STATUS )
         CALL GRP_WATCH( 0, STATUS )
      END IF
      CALL ERR_END( STATUS )

*  The NDF library registers locators with SUBPAR for any NDFs that are
*  opened directly using NDF_ASSOC or NDF_EXIST. These locators are only
*  annulled when the associated parameters are cancelled, but most
*  polpack applications do not explicitly cancel their NDF parameters.
*  This means that such locators are picked up by the following check
*  for dangling HDS locators. In order to prevent this, we cancel any
*  remaining NDF parameters now, excluding any that were marked by the
*  call to NDF_CANCL at the start of this routine.
      CALL NDF_CANCL( ' ', STATUS )

*  Note the current number of active locators. Do this in a new
*  error reporting context so that we get the correct value even if an
*  error has occurred.
      CALL ERR_MARK
      LSTAT = SAI__OK
      CALL HDS_INFOI( DAT__NOLOC, 'LOCATORS', FILTER,
     :     NLOC1, LSTAT )

*  If there are more active locators now than there were on entry, there
*  must be a problem (HDS locators are not being freed somewhere). So
*  report it.
      IF( LSTAT .EQ. SAI__OK .AND. NLOC1 .GT. NLOC0 ) THEN
         CALL MSG_BLANK( LSTAT )
         CALL MSG_SETC( 'NAME', NAME )
         CALL MSG_SETI( 'NLOC0', NLOC0 )
         CALL MSG_SETI( 'NLOC1', NLOC1 )
         CALL MSG_OUT( 'PPACK_NLOC', 'WARNING: The number of active '//
     :             'HDS locators increased from ^NLOC0 to ^NLOC1 '//
     :             'during execution of ^NAME (POLPACK programming '//
     :             'error).', LSTAT )
         CALL MSG_BLANK( LSTAT )
      END IF
      IF (LSTAT .NE. SAI__OK) CALL ERR_ANNUL( LSTAT )

      CALL ERR_RLSE

*  End and return.

      END
