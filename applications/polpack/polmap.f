      SUBROUTINE POLMAP( STATUS )
*+
*  Name:
*     POLMAP

*  Purpose:
*     Displays polarisation maps.

*  Language:
*     Starlink Fortran 77

*  Type of Module:
*     ADAM A-task

*  Invocation:
*     CALL POLMAP( STATUS )

*  Arguments:
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Description:
*     This routine 

*  Usage:
*     polmap in 

*  ADAM Parameters:
*     BACK = NDF (Read)
*        The image to use as a background for the vector map. This may be
*        null (!) if no background image is required. [!]
*     BACKTYPE = LITERAL (Update)
*        The method to use when displaying the background image. This should 
*        be one of CONTOUR, GREY or NONE. Any unambiguous abbreviation can 
*        be supplied, and the value is case-insensitive. [GREY]
*     BADCOL = LITERAL (Update)
*        The colour with which to represent missing data. It is also used
*        as the background colour for contour maps. This should be
*        one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK, WHITE. Any
*        unambiguous abbreviation can be supplied, and the value is
*        case-insensitive. [CYAN]
*     CONCOL = LITERAL (Update)
*        The colour with which to draw contours. This should be
*        one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK, WHITE. Any
*        unambiguous abbreviation can be supplied, and the value is
*        case-insensitive. [BLACK]
*     DPI = _INTEGER (Read)
*        The dots per inch on the display screen. Some X servers fail to 
*        supply the correct value, resulting in the GUI being unplesantly
*        small or large. For this reason, an explicit value may be supplied 
*        using this parameter. If a null (!) value is supplied, then the
*        DPI value returned by the X server is used. This parameter may
*        also be used to adjust the size of the GUI to the user's
*        preference, even if the DPI value returned by the X server is correct.
*        Note, this value cannot be set from the GUI's "Options" menu. [!]
*     HELPAREA = _LOGICAL (Update)
*        If a true value is supplied, then dynamic help information will be
*        displayed in a box at the bottom of the GUI. This information
*        describes the component of the GUI currently under the mouse 
*        pointer. [TRUE]
*     IN = NDF (Read)
*        A cube holding Stokes vectors, as produced by POLCAL or POLKA.
*     LOGFILE = LITERAL (Read)
*        The name of a log file to which will be written all the messages
*        generated by the applications activated by the GUI. If "stdout"
*        is supplied, then the messages will be directed to standard
*        output (usually the screen). If a null (!) value is supplied, then 
*        no log file will be created. Note, this parameter cannot be set 
*        from the GUI's "Options" menu. [!]
*     NCONT = _INTEGER (Update)
*        The number of contours to use when displaying the background
*        image as a contour map. [4]
*     NEWCOLMAP = _LOGICAL (Read)
*        If a true value is supplied for NEWCOLMAP, then the GUI will use
*        its own private colour map. Otherwise it will share the standard 
*        colour map. Note, with a false value for NEWCOLMAP, there may 
*        be insufficient free colours in the standard colour map (i.e. if
*        other X applications are running). In this case POLMAP will report 
*        an error and abort. If this happens, try re-running with a true
*        value for NEWCOLMAP. [FALSE]
*     PERCENTILES( 2 ) = _REAL (Update)
*        The percentiles that define the scaling limits for the displayed
*        images. For example, [25,75] would scale between the quartile 
*        values. [5,95]
*        used as supplied. [3]
*     POLCOL = LITERAL (Update)
*        The colour with which to draw polygons. This should be one of RED, 
*        BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. Any unambiguous 
*        abbreviation can be supplied, and the value is case-insensitive.
*        [RED]
*     SELCOL = LITERAL (Update)
*        The colour with which to mark the selected area of the image (if any).
*        This should be one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. 
*        Any unambiguous abbreviation can be supplied, and the value is 
*        case-insensitive. [RED]
*     STARTHELP = _LOGICAL (Read)
*        If a true value is supplied, then a hyper-text browser will be
*        created with the GUI, displaying the contents page of the PolMap
*        on-line help documentation. Otherwise, the browser is only created
*        if the user accesses the on-line help information explicitly
*        from within the GUI by using the "Help" menu or the F1 key on 
*        the keyboard. [TRUE]
*     STATUSAREA = _LOGICAL (Update)
*        If a true value is supplied, then information describing the
*        currently displayed image, current options values, etc, will be 
*        displayed in a box underneath the displayed image. The contents
*        of this box can be selected using the "Options" menu in the GUI.
*        [TRUE]
*     XHAIR = _LOGICAL (Update)
*        If a true value is supplied, then a cross hair will be used
*        instead of a pointer while the mouse is over the image display
*        area. [TRUE]
*     XHAIRCOL = LITERAL (Update)
*        The colour with which to draw the cross-hair (if required). This 
*        should be one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. Any
*        unambiguous abbreviation can be supplied, and the value is
*        case-insensitive. [YELLOW]

*  Examples:

*  Notes:

*  Authors:
*     DSB: David Berry (STARLINK)
*     {enter_new_authors_here}

*  History:
*     27-AUG-1997 (DSB):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}


      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PAR_ERR'          ! PAR_ error constants
      INCLUDE 'NDF_PAR'          ! NDF_ constants

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      INTEGER CHR_LEN

*  Local Constants:
      CHARACTER COLS*46
      PARAMETER ( COLS = 'RED,BLUE,GREEN,CYAN,MAGENTA,YELLOW,BLACK,'//
     :                   'WHITE' )

*  Local Variables:
      CHARACTER
     :        BACKTP*7,          ! Type of background display required
     :        BADCOL*7,          ! Colour for missing pixels
     :        CONCOL*7,          ! Colour for contours
     :        CUBE*255,          ! Buffer for input Stokes cube name
     :        IMAGE*255,         ! Buffer for input image name
     :        LOGFIL*80,         ! Name of required log file
     :        POLCOL*7,          ! Colour for polygons
     :        SELCOL*7,          ! Colour for the selected area box
     :        SI*80,             ! String describing required status items
     :        STOKES*(NDF__MXDIM), ! Identifiers for each plane of input
     :        XHRCOL*7           ! Colour for the cross-hair
      INTEGER
     :        CUBLEN,            ! Used length of input Stokes cube buffer
     :        DIM( 3 ),          ! Dimensions of input Stokes cube
     :        DPI,               ! Dots per inch to use
     :        IMLEN,             ! Used length of input image buffer
     :        INDF1,             ! NDF identifier for Stokes cube
     :        INDF2,             ! NDF identifier for background image
     :        IWCS,              ! AST pointer for background WCS info
     :        LBND( 3 ),         ! Lower bounds of input NDF
     :        NCONT,             ! No. of contours
     :        NDIM,              ! No. of axes in cube
     :        UBND( 3 )          ! Upper bounds of input NDF
      LOGICAL 
     :        HAREA,             ! Is the help area to be displayed?
     :        NEWCM,             ! Use a new colour map?
     :        SAREA,             ! Is the status area to be displayed?
     :        STHLP,             ! Display a WWW browser at start-up?
     :        XHAIR              ! Is a cross-hair required?
      REAL
     :        PERCNT(2),         ! Display percentiles
     :        PERDEF(2)          ! Default display percentiles
*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Get an NDF identifier for the input Stokes cube. 
      CALL NDF_ASSOC( 'IN', 'READ', INDF1, STATUS )

*  Now check that the NDF looks like it was created by PolCal. Get its
*  bounds.
      CALL NDF_BOUND( INDF1, 3, LBND, UBND, NDIM, STATUS ) 

*  Get the value of the STOKES component in the POLPACK extension. 
*  This is a string in which each character identifies the corresponding
*  plane in the DATA array.
      STOKES = ' '
      CALL NDF_XGT0C( INDF1, 'POLPACK', 'STOKES', STOKES, STATUS ) 

*  Report an error if the NDF does not have 3 axes, or if the STOKES value
*  is not available.
      IF( ( NDIM .NE. 3 .OR. STOKES .EQ. ' ' ) .AND. 
     :     STATUS .EQ. SAI__OK ) THEN
         CALL NDF_MSG( 'NDF', INDF1 )
         STATUS = SAI__ERROR
         CALL ERR_REP( 'POLMAP_ERR1', '''^NDF'' does not contain '//
     :                 'Stokes parameter values.', STATUS )
         GO TO 999
      END IF

*  Store its name in a local variable, and annull the identifier.
      CALL NDF_MSG( 'NDF', INDF1 )
      CALL MSG_LOAD( ' ', '^NDF', CUBE, CUBLEN, STATUS )
      CALL NDF_ANNUL( INDF1, STATUS )

*  Get an NDF identifier for the background image. If none is supplied,
*  annul the error and use a blank name. Otherwise, check it is
*  2-dimensional, store its name in a local variable, and annull the 
*  identifier.
      CALL NDF_ASSOC( 'BACK', 'READ', INDF2, STATUS )
      IF( STATUS .EQ. PAR__NULL ) THEN
         CALL ERR_ANNUL( STATUS )
         IMAGE = ' '
         IMLEN = 0
      ELSE
         CALL KPG1_ASGET( INDF2, .TRUE., 2, LBND, UBND, IWCS, 
     :                    STATUS )
         CALL AST_ANNUL( IWCS, STATUS )

         CALL NDF_MSG( 'NDF', INDF2 )
         CALL MSG_LOAD( ' ', '^NDF', IMAGE, IMLEN, STATUS )

         CALL NDF_ANNUL( INDF2, STATUS )
      END IF

*  See if a new colour map should be used.
      CALL PAR_GET0L( 'NEWCOLMAP', NEWCM, STATUS )

*  See if a cross hair should be used over the image display area.
      CALL PAR_GET0L( 'XHAIR', XHAIR, STATUS )

*  See if the help area is to be displayed.
      CALL PAR_GET0L( 'HELPAREA', HAREA, STATUS )

*  Get the type of background display required.
      CALL PAR_CHOIC( 'BACKTYPE', 'GREY', 'GREY,CONTOUR,NONE', .FALSE., 
     :                BACKTP, STATUS )

*  Get the number of contours to use.
      CALL PAR_GET0I( 'NCONT', NCONT, STATUS )
      NCONT = MAX( 2, NCONT )

*  See if the status area is to be displayed.
      CALL PAR_GET0L( 'STATUSAREA', SAREA, STATUS )

*  See if a WWW browser displaying the PolMap manual contents page should
*  be created at start-up.
      CALL PAR_GET0L( 'STARTHELP', STHLP, STATUS )

*  Get the dots per inch to assume for the screen. A null valu means
*  use the normal TK value. Annull the error if it occurs.
      IF ( STATUS .EQ. SAI__OK ) THEN
         CALL PAR_GET0I( 'DPI', DPI, STATUS )
         IF ( STATUS .EQ. PAR__NULL ) THEN
            CALL ERR_ANNUL( STATUS )
            DPI = -1
         END IF
      END IF

*  Get an encoded string describing which status items are to be included 
*  in the status area, and in what order. 
      CALL PAR_GET0C( 'ITEMS', SI, STATUS )

*  Get the name of a logfile.
      IF ( STATUS .EQ. SAI__OK ) THEN
         CALL PAR_GET0C( 'LOGFILE', LOGFIL, STATUS )
         IF( STATUS .EQ. PAR__NULL ) THEN
            LOGFIL = ' '
            CALL ERR_ANNUL( STATUS )
         ELSE
            CALL CHR_RMBLK( LOGFIL )
         END IF
      END IF

*  Get the colours to use for various parts of the display.
      CALL PAR_CHOIC( 'BADCOL', 'CYAN', COLS, .FALSE., BADCOL, STATUS )
      CALL CHR_LCASE( BADCOL )

      CALL PAR_CHOIC( 'CONCOL', 'BLACK', COLS, .FALSE., CONCOL, STATUS )
      CALL CHR_LCASE( CONCOL )

      CALL PAR_CHOIC( 'POLCOL', 'RED', COLS, .FALSE., POLCOL, STATUS )
      CALL CHR_LCASE( POLCOL )

      CALL PAR_CHOIC( 'SELCOL', 'RED', COLS, .FALSE., SELCOL, STATUS )
      CALL CHR_LCASE( SELCOL )

      CALL PAR_CHOIC( 'XHAIRCOL', 'RED', COLS, .FALSE., XHRCOL, STATUS )
      CALL CHR_LCASE( XHRCOL )

* Find the display percentiles required. 
      PERDEF( 1 ) = -1.0
      PERDEF( 2 ) = -1.0
      CALL PAR_GDR1R( 'PERCENTILES', 2, PERDEF, 0.0, 100.0,
     :                .FALSE., PERCNT, STATUS )

*  Execute the TCL script.
      CALL DOPLMP( CUBE( : CUBLEN ), IMAGE( : IMLEN ), DPI, HAREA, 
     :             SAREA, SI, LOGFIL( : CHR_LEN( LOGFIL ) ), BADCOL, 
     :             POLCOL, SELCOL, PERCNT(1), PERCNT(2), NEWCM, XHAIR, 
     :             XHRCOL, STHLP, NCONT, CONCOL, BACKTP, STATUS )

*  The various options values may have been altered by the use of the 
*  "Options" menu in the GUI. Write them back to the parameter file in case.
      CALL PAR_PUT0I( 'NCONT', NCONT, STATUS )
      CALL PAR_PUT0L( 'XHAIR', XHAIR, STATUS )
      CALL PAR_PUT0L( 'HELPAREA', HAREA, STATUS )
      CALL PAR_PUT0L( 'STATUSAREA', SAREA, STATUS )
      CALL PAR_PUT0C( 'ITEMS', SI( : CHR_LEN( SI ) ), STATUS )
      CALL PAR_PUT0C( 'BACKTYPE', BACKTP, STATUS )
      CALL CHR_UCASE( BADCOL )
      CALL PAR_PUT0C( 'BADCOL', BADCOL, STATUS )
      CALL CHR_UCASE( CONCOL )
      CALL PAR_PUT0C( 'CONCOL', CONCOL, STATUS )
      CALL CHR_UCASE( POLCOL )
      CALL PAR_PUT0C( 'POLCOL', POLCOL, STATUS )
      CALL CHR_UCASE( SELCOL )
      CALL PAR_PUT0C( 'SELCOL', SELCOL, STATUS )
      CALL CHR_UCASE( XHRCOL )
      CALL PAR_PUT0C( 'XHAIRCOL', XHRCOL, STATUS )
      CALL PAR_PUT1R( 'PERCENTILES', 2, PERCNT, STATUS )

 999  CONTINUE

*  If an error occurred, then report a contextual message.
      IF ( STATUS .NE. SAI__OK ) THEN

*  If a null parameter was given or a parameter abort was requested, 
*  annul the error.
         IF( STATUS .EQ. PAR__NULL .OR. STATUS .EQ. PAR__ABORT ) THEN
            CALL ERR_ANNUL( STATUS )

*  If any other error occurred, then report a contextual message.
         ELSE
            CALL ERR_REP( 'POLMAP_ERR', 'POLMAP: Unable to display a '//
     :                    'polarisation map.', STATUS )
         END IF

      END IF

      END
