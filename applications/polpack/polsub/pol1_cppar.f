      SUBROUTINE POL1_CPPAR( CIIN, CIOUT, STATUS )
*+
*  Name:
*     POL1_CPPAR

*  Purpose:
*     Create output cat. parameters corresponding to input cat. ones.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL POL1_CPPAR( CIIN, CIOUT, STATUS )

*  Description:
*     Create parameters in the output catalogue corresponding to those
*     in the input catalogue.

*  Arguments:
*     CIIN  =  INTEGER (Given)
*        Identifier for the input catalogue.
*     CIOUT  =  INTEGER (Given)
*        Identifier for the output catalogue.
*     STATUS  =  INTEGER (Given and Returned)
*        The global status.

*  Copyright:
*     Copyright (C) 2017 East Asian Observatory.

*  Authors:
*     DSB: David S. Berry (EAO)
*     ACD: A C Davenhall (Edinburgh)
*     {enter_new_authors_here}

*  History:
*     29-JUN-2017 (DSB):
*        Original version, based on cap_cppar.f by ACD.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing



*  Global Constants:
      INCLUDE 'SAE_PAR'     ! Standard SAE symbolic constants.
      INCLUDE 'CAT_PAR'     ! CAT symbolic constants.

*  External References:
      INTEGER CHR_LEN

*  Arguments Given:
      INTEGER CIIN
      INTEGER CIOUT

*  Status:
      INTEGER STATUS

*  Local Variables:
      LOGICAL MORE         ! Flag: more parameters to access?
      INTEGER QCOUNT       ! Number of the current parameter.
      INTEGER QIINC        ! Identifier for the current input  parameter.
      INTEGER QIOUTC       !     "       "   "     "    output   "   .

*    The following variables represent the attributes of the current
*    parameter.
      INTEGER
     :  QCI,         ! Parent catalogue.
     :  QDTYPE,      ! Data type.
     :  QCSIZE,      ! Size if a character string.
     :  QDIMS,       ! Dimensionality.
     :  QSIZEA(10),  ! Size of each array dimension.
     :  OSTAT,       ! Status checking whether parameter in output cat.
     :  OQI,         ! Parameter identifier in the output catalogue.
     :  BUFLEN,      ! Length of BUFFER (excl. trail. blanks).
     :  LQNAME       !   "    "  QNAME  ( "  .   "  .   "   ).

      CHARACTER
     :  QNAME*(CAT__SZCMP),    ! Name.
     :  QUNITS*(CAT__SZUNI),   ! Units.
     :  QXTFMT*(CAT__SZEXF),   ! External format.
     :  QCOMM*(CAT__SZCOM),    ! Comments.
     :  QVALUE*(CAT__SZVAL),   ! Value.
     :  BUFFER*75              ! Output buffer.

      LOGICAL
     :  QPRFDS       ! Preferential display flag.

      DOUBLE PRECISION
     :  QDATE        ! Modification date.
*.

*  Check inherited status.
      IF( STATUS .NE. SAI__OK ) RETURN

*  Copy each of the parameters in the input catalogue.
      MORE = .TRUE.
      QCOUNT = 0

      DO WHILE( MORE )

*  Attempt to obtain an identifier for the next parameter in the input
*  catalogue, and proceed if ok.
         QCOUNT = QCOUNT + 1

         CALL CAT_TNDNT( CIIN, CAT__QITYP, QCOUNT, QIINC, STATUS )
         IF( STATUS .EQ. CAT__OK  .AND.  QIINC .NE. CAT__NOID ) THEN

*  Inquire the values of all the attributes for this parameter.
            CALL CAT_PINQ( QIINC, 10, QCI, QNAME, QDTYPE, QCSIZE,
     :             QDIMS, QSIZEA, QUNITS, QXTFMT, QPRFDS, QCOMM, QVALUE,
     :             QDATE, STATUS )

*  Determine whether the output catalogue already contains a parameter
*  (or column) of the given name.  Proceed if it does not; otherwise
*  issue a warning. ( Note: CAT_TIDNT returns a bad status if the output
*  catalogue does not contain the parameter).
            OSTAT = SAI__OK
            CALL CAT_TIDNT( CIOUT, QNAME, OQI, OSTAT )

            IF( OSTAT .NE. SAI__OK ) THEN

*  Annul the error generated by CAT_TIDNT.
               CALL ERR_ANNUL( OSTAT )

*  Attempt to create a corresponding parameter in the output catalogue.
               CALL CAT_PNEW0( CIOUT, CAT__QITYP, QNAME, QDTYPE,
     :                         QIOUTC, STATUS )

*  Set the attributes of this parameter to correspond to the input
*  parameter.  Note that only those attributes which can vary in a SCAR/ADC
*  catalogue are set.
               CALL CAT_TATTI( QIOUTC, 'CSIZE', QCSIZE, STATUS )
               CALL CAT_TATTC( QIOUTC, 'UNITS', QUNITS, STATUS )
               CALL CAT_TATTC( QIOUTC, 'EXFMT', QXTFMT, STATUS )
               CALL CAT_TATTC( QIOUTC, 'COMM', QCOMM, STATUS )
               CALL CAT_TATTC( QIOUTC, 'VALUE', QVALUE, STATUS )

            ELSE
               BUFFER = ' '
               BUFLEN = 0

               CALL CHR_PUTC( 'Parameter ', BUFFER, BUFLEN )

               IF( QNAME .NE. ' ') THEN
                  LQNAME = CHR_LEN(QNAME)
                  CALL CHR_PUTC( QNAME(1 : LQNAME), BUFFER, BUFLEN )
               ELSE
                  CALL CHR_PUTC( '<blank>', BUFFER, BUFLEN )
               END IF

               CALL CHR_PUTC( ' has been modified.', BUFFER, BUFLEN )
               CALL MSG_OUT( ' ', BUFFER(1 : BUFLEN), STATUS )

            END IF

          ELSE

*  Either an error has occurred or the last parameter has been accessed
*  from the input catalogue; set the termination status.
            MORE = .FALSE.
         END IF

*  Set the termination flag if any error has occurred.
         IF( STATUS .NE. SAI__OK ) MORE = .FALSE.

      END DO

      END


