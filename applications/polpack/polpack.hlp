0 Help
 Welcome to the POLPACK online help system.  Here you can display
 details about a specific POLPACK command or more-general information
 such as what POLPACK can do and how to use it.  If you need assistance
 using this help system, enter "Using_help" in response to the
 "Topic?" prompt. 

1 Introduction

POLPACK comprises applications which facilitiate the reduction of imaging
polarimetry data. Both dual-beam and single beam data can be processed.
POLPACK handles bad pixels, and processes quality, variance, and other
information stored within NDFs (cf. SUN/33). It can also process
data in other formats, such as FITS and IRAF, using an automatic-data
conversion facility (SUN/55, SSN/20).

POLPACK commands are available from both the UNIX C-shell (and
variants) and from the ICL command language.  

Type ? to see the main help topics.

1 Using_Help
 You are situated in a portable HELP library which contains help
 information about POLPACK arranged in an hierarchical structure.  The
 help system enables you to navigate the library by prompting when it
 has completed displaying the previously requested help.  The
 information displayed by the help system on a particular topic
 includes a description of the topic and a list of subtopics that
 further describe the topic.  These topic names are called keywords. 

 At a prompt you may enter:

   o  a topic or subtopic name to display the help for that topic or
      subtopic;

   o  just a <CR> to move up one level in the hierarchy, and if you
      are at the top level it will terminate the help session;

   o  a CTRL/D will terminate the help session;

   o  a question mark "?" to redisplay the text for the current topic,
      including the list of topic or subtopic names; or

   o  an ellipsis "..." to display all the text below the current point 
      in the hierarchy.  For example, "GLITCH..." displays information 
      on the GLITCH topic as well as information on all the subtopics
      under GLITCH.

 You can abbreviate any keyword using the following rules:

   1) Just give the first few characters, e.g. "PARA" for
   "Parameters".

   2) Some keywords are composed of several words separated by
   underscores.  Each word of the keyword may be abbreviated,
   e.g. "Colour_Set" can be shortened to "C_S".

   3) The characters "%" and "*" act as wildcards, where the percent
   sign matches any single character, and asterisk matches any
   sequence of characters.  Thus to display information on all
   available topics, type an asterisk (*) in reply to a hrlp prompt.

   4) If a word contains but does end with an asterisk wildcard, it
   must not be truncated.

   5) The entered string must not contain leading or embedded spaces.

 Ambiguous abbreviations result in all matches being displayed. 
 
2 Help_Parameters

 keyword ...

  Specifies one or more keywords that refer to the topic  or  subtopic
  on  which you  want  information from the help library.  Information
  within the help library is arranged in a hierarchical  manner.   The
  levels are:

  1.  None--- If you do not specify a keyword,  POLHELP introduces the 
      help system  and  lists the  top-level topics.  Each item in the
      list is a keyword in the first level of the hierarchy.

  2.  Topic-name---If you specify  a keyword  by naming  a topic,  the
      help facility  describes  the  topic.  Keywords  for  additional
      information available on this topic are listed.

  3.  Topic-name subtopic---If you  specify  a  subtopic  following  a
      topic, the help facility provides a description of the specified
      subtopic.

1 POLCAL
Calculate polarisation parameters for dual beam imaging
linear and circular polarimetry.

Description:

   Calculate polarisation parameters for dual beam imaging
   polarimetry. This routine accesses a list of input NDF data
   structures which should contain processed polarimetric
   information. It is assumed that the input data are bias/dark
   corrected, flatfielded, sky subtracted and mutually aligned.

   Each input NDF should contain an image recorded in a
   single polarisation state. The polarisation state should be
   indicated by two descriptors WPLATE (the waveplate position, one of
   0.0,45.0,22.5,67.5) and RAY (either O (ordinary) or E
   (extraordinary)) which should reside in a POLPACK NDF extension.
   The descriptors are checked for validity and used to sort the
   input data into polarimetric sets. In addition, a third
   descriptor, IMGID, should be present to indicate which images were
   recorded on the same exposure.

   The input data files are first validated using the descriptor
   information in their POLPACK extensions. They are then sorted into
   sets that can be used to calculate the output polarisation
   parameters.

   The instrumental polarisation efficiency (F factor) is calculated
   by intercomparing images to calculate the scale factors and zero
   levels. All possible intercomparisons are used and a weighted mean
   F factor calculated.

   The time dependent efficiencies (E factors) due, for example, to
   changes in integration time or sky conditions between exposures,
   are calculated. The E factors are calculated by comparing total
   intensity images against an iteratively refined median image.

   The input data is `corrected' by the polarisation and time
   dependent efficiencies and the stokes images (I,Q,U) or (I,V) are
   calculated. The output stokes images are formed by median stacking
   all possible estimates.

   In LINEAR polarimetry mode the output NDF contains I, Q and U
   stokes images. In CIRCULAR polarimetry mode the output NDF
   contains I, V stokes images.
2 Authors
TMG: Tim Gledhill (tmg@star.herts.ac.uk)
2 History
 28-JUL-1997 (TMG):
    Original version.
1 POLEXP
Copies information from the POLPACK extension to the FITS extension.

Usage:

   POLEXP in

Description:

   This routine creates FITS header cards describing the contents of
   the POLPACK extensions in a group of NDFs. The header cards are
   written to the FITS extensions of the NDFs, replacing any existing
   cards for the same keywords. The keywords used are listed below.
   Information exported to the FITS extension can be imported back
   into the POLPACK extension using POLIMP.

   The main use of this routine is for exporting POLPACK NDFs for use
   bu other non-NDF based packages.
2 Parameters
For information on individual parameters, select from the list below:
3 IN
IN = LITERAL (Read)
   A list of NDF names. The NDF names should be separated by commas
   and may include wildcards.
3 NAMELIST
NAMELIST = LITERAL (Read)
   The name of a file to create containing a list of the
   succesfully processed NDFs. This file can be used when
   specifying the input NDFs for subsequent applications. [!]
3 QUIET
QUIET = _LOGICAL (Read)
   If FALSE, then each NDF is listed as it is processed. Otherwise,
   nothing is written to the screen. [FALSE]
2 Examples
POLEXP in=^names.lis
   This example processes the NDFs listed in the text file
   "names.lis". The information stored in the POLPACK extension of
   each is exported to the FITS extension.
2 FITS_Keywords
   The following FITS keywords are created. The POLPACK extension item
   stored in the keyword is shown in parenthesise (see POLIMP for a
   description of these extension items):

         PPCKANGR  (ANGROT)
         PPCKFILT  (FILTER)
         PPCKIMID  (IMGID)
         PPCKWPLT  (WPLATE)
         PPCKRAY   (RAY)
         PPCKROT   (ROTATION)
         PPCKYROT  (YROTATION)
         PPCKSTOK  (STOKES)
2 Authors
DSB: David Berry (STARLINK)
2 History
 12-DEC-1997 (DSB):
    Original version.
1 POLHELP
Gives help about POLPACK.

Usage:

   polhelp [topic] [subtopic] [subsubtopic] [subsubsubtopic]

Description:

   Displays help about POLPACK.  The help information has
   alphabetical lists of commands, general information about
   POLPACK and related material; it describes individual commands in
   detail.

   Here are some of the main options.
      polhelp
         No parameter is given so the introduction and the top-level
         help index is displayed.
      polhelp application/topic
         This gives help about the specified application or topic.
      polhelp application/topic subtopic
         This lists help about a subtopic of the specified
         application or topic. The hierarchy of topics has a maximum
         of four levels.

   See the Section "Navigating the Help Library" for details how to
   move around the help information, and to select the topics you
   want to view.
2 Parameters
For information on individual parameters, select from the list below:
3 TOPIC
TOPIC = LITERAL (Read)
   Topic for which help is to be given. [" "]
3 SUBTOPIC
SUBTOPIC = LITERAL (Read)
   Subtopic for which help is to be given. [" "]
3 SUBSUBTOPIC
SUBSUBTOPIC = LITERAL (Read)
   Subsubtopic for which help is to be given. [" "]
3 SUBSUBSUBTOPIC
SUBSUBSUBTOPIC = LITERAL (Read)
   Subsubsubtopic for which help is to be given. [" "]
2 Navigating_the_Help_Library
   The help information is arranged hierarchically.  You can move
   around the help information whenever POLHELP prompts.  This
   occurs when it has either presented a screen's worth of text or
   has completed displaying the previously requested help.  The
   information displayed by POLHELP on a particular topic includes a
   description of the topic and a list of subtopics that further
   describe the topic.

   At a prompt you may enter:
      o  a topic and/or subtopic name(s) to display the help for that
         topic or subtopic, so for example, "polka parameters dpi"
         gives help on DPI, which is a subtopic of Parameters, which
         in turn is a subtopic of POLKA;

      o  a <CR> to see more text at a "Press RETURN to continue ..."
         request;

      o  a <CR>} at topic and subtopic prompts to move up one level
         in the hierarchy, and if you are at the top level it will
         terminate the help session;

      o  a CTRL/D (pressing the CTRL and D keys simultaneously) in
         response to any prompt will terminate the help session;

      o  a question mark "?" to redisplay the text for the current
         topic, including the list of topic or subtopic names; or

      o  an ellipsis "..." to display all the text below the
         current point in the hierarchy.  For example, "POLKA..."
         displays information on the POLKA topic as well as
         information on all the subtopics under POLKA.

   You can abbreviate any topic or subtopic using the following
   rules.

      o  Just give the first few characters, e.g. "PARA" for
         Parameters.

      o  Some topics are composed of several words separated by
         underscores.  Each word of the keyword may be abbreviated,
         e.g. "Colour_Set" can be shortened to "C_S".

      o  The characters "%" and "*" act as wildcards, where the
         percent sign matches any single character, and asterisk
         matches any sequence of characters.  Thus to display
         information on all available topics, type an asterisk in
         reply to a prompt.

      o  If a word contains, but does end with an asterisk wildcard,
         it must not be truncated.

      o  The entered string must not contain leading or embedded
         spaces.

   Ambiguous abbreviations result in all matches being displayed.
2 Authors
MJC: Malcolm J. Currie (STARLINK)

DSB: David S. Berry (STARLINK)
2 History
 1997 July 1 (DSB):
    Original, copied from kaphelp.f written by MJC.
2 Implementation_Status
   -  Uses the portable help system.
1 POLIMP
Stores information in the POLPACK extension.

Usage:

   polimp in table

Description:

   This routine should be used to prepare data prior to processing
   with POLPACK. It records the values of various items of information
   required by POLPACK (wave-plate position, filter, etc) in the POLPACK
   extensions of the supplied NDFs. These values can either be supplied
   explicitly or can be copied ("imported") from keywords stored in the
   FITS extensions of the supplied NDFs. Such keywords may, for instance,
   be provided by the instrument/telescope control systems.

   The import is controlled by a "table" which specifies how FITS
   keyword values should be used to create the corresponding POLPACK
   extension items. Each extension item may be assigned a specified
   constant value, the value of a specified FITS keyword, or the value
   of an arbitrary function of several FITS keywords.

   During the processing of data, POLPACK adds items to the POLPACK
   extension to indicate the state of the processing which has been
   applied to the data. This routine also allows values to be assigned
   to these extra extension items and thus can be used to import partially
   processed data. POLIMP can be used in conjunction with POLEXP to
   allow data to be moved backwards and forwards between POLPACK and
   other non-NDF based packages.
2 Parameters
For information on individual parameters, select from the list below:
3 IN
IN = LITERAL (Read)
   A list of NDF names. The NDF names should be separated by commas
   and may include wildcards.
3 NAMELIST
NAMELIST = LITERAL (Read)
   The name of a file to create containing a list of the
   succesfully processed NDFs. This file can be used when
   specifying the input NDFs for subsequent applications. [!]
3 QUIET
QUIET = _LOGICAL (Read)
   If FALSE, then the values stored in each NDF are listed as it is
   processed. Otherwise, nothing is written to the screen. [FALSE]
3 TABLE
TABLE = LITERAL (Read)
   The name of the file containing the table describing how FITS
   keyword values are to be translated into POLPACK extension
   items. See the topic "Table Format" for information on how to
   create a translation table. If a null value (!) is supplied,
   then a default table is used which corresponds to the FITS
   keywords written by POLEXP:

      ANGROT      PPCKANGR
      FILTER      PPCKFILT
      IMGID       PPCKIMID
      WPLATE      PPCKWPLT
      RAY?        PPCKRAY
      ROTATION?   PPCKROT
      YROTATION?  PPCKYROT
      STOKES?     PPCKSTOK
   [!]
2 Examples
polimp in='*' table=mytable.dat
   This example processes all the NDFs in the current directory
   using the import control table mytable.dat.

polimp in=^names.lis
   This example processes the NDFs listed in the text file
   "names.lis" using the default control table appropriate for
   partially processed data which has previously been exported using
   POLEXP.
2 Notes
-  Any existing values in the POLPACK extension are deleted before
processing the supplied control table.

-  A new Frame is added to the NDF's WCS component and is given the
Domain "POLANAL". This Frame is formed by rotating the pixel coordinates
Frame so that the first axis is parallel to the analyser axis. The
angle of rotation is given by the ANGROT item in the POLPACK extension
and defaults to zero if ANGROT is not specified in the control table.
2 Table_Format
   The import control (translation) table is an ordinary text file
   which contains instructions on how to assign values to the components
   of the POLPACK extension in an NDF. Constant values specified in
   the file may be used, or the values may be derived from the values
   of FITS keywords stored in the FITS extension of the NDF.

   In its most simple format each line in a FITS control table contains
   the name of a POLPACK extension item, followed by a constant value
   or FITS keyword. This causes the value of the specified FITS keyword
   or constant, to be assigned to the specified extension item. Some
   examples:

      ANGROT             ANROTA

   This copies the value of the FITS keyword ANROTA from the FITS
   extension to the ANGROT component in the POLPACK extension.

      ANGROT             45.0

   This assigns the value 45.0 to the ANGROT component of the POLPACK
   extension.

      IMGID              "M51_PLATEB"

   This assigns the value M51_PLATE to the IMGID component of the
   POLPACK extension. Note, textual constants must be enclosed within
   quotes.

   In addition to using the values of FITS keywords directly, it is also
   possible to use arbitrary functions of one or more keywords. To do
   this, each keyword used in the function must first be "declared" so
   that a data type may be associated with it. This is done by including
   lines with the following form in the control table prior to the
   function reference:

      Data-type          FITS-keyword

   Here "Data-type" must be one of _INTEGER, _REAL, _DOUBLE, _WORD, _BYTE,
   _CHAR. So for instance if you wanted to assign a value to the ANGROT
   extension item, the orientation of the analyser in degrees, from the
   FITS keyword ROTA which gives the required value in radians, you
   could use this sequence of commands:

      _REAL             ROTA
      ANGROT            57.29578*ROTA

   The function may use any of the usual Fortran operators; +, -, *, /,
   ** and built-in functions (SIN, COS, TAN, LOG, etc). See SUN/61
   (appendix A) for complete details.

   Characters strings cannot be manipulated by these functions so a single
   special format for translating their values is provided. The name
   of the destination extension item is given as usual followed by a
   FITS-keyword which supplies the string to be translated. This is then
   followed by statements which translate an "input" string into an
   "output" string. So for instance if you wanted to translate waveplate
   positions to the equivalent strings recognised by POLPACK you might
   use something like:

      WPLATE     WAVEPLT  A=0.0 -
                          B=22.5 -
                          C=45.0 -
                          D=67.5

   This does a case insensitive comparison between the value of the FITS
   keyword WAVEPLT and the strings on the left hand sides of the equals
   signs ("A", "B", etc), If a match is found, it assigns the value from
   the right hand side of the equals sign ("0.0", "22.5", etc, these
   are interpreted as strings, not numerical values) to the WPLATE
   component in the POLPACK extension. An error is reported if no match
   is found. The "-" signs at the end of each line indicate that the list
   continues on the next line. Note, if specified FITS keyword has a
   numerical value, then it is converted into textual form before doing
   the comparisons.

   If a control table contains more than one line for an extension
   item, then each line is processed in turn, replacing any value
   established by earlier lines. Thus the final value of the extension
   item will be given by the last line in the table refering to the
   extension item.

   If it is not known in advance if the FITS extension will contain the
   keyword values needed to assign a value to a particular POLPACK
   extension item, then a question mark may be appended to the name of
   the POLPACK extension item. If the required FITS keyword values
   cannot be found, then the error messages which would normally be
   issued are suppressed, and any remaining lines in the control table
   are processed as normal. If no value has been assigned to the item
   when the entire table has been processed, then the item will be set
   to its default value if it has one, or left undefined otherwise (see
   below). For instance:

      RAY?  OLDRAY
      RAY?  PPCKRAY

   causes the POLPACK extension item RAY to be assigned the value of the
   FITS keyword PPCKRAY if the keyword has a value in the FITS
   extension. If not, then the FITS keyword OLDRAY is used instead. If
   this does not exist either, then RAY is left undefined.

   Logical data types are restricted to a single keyword whose value
   must be "YES", "TRUE", "T", "Y" for TRUE or "NO", "FALSE", "N",
   "F".

   Fields in the table may be separated by commas if desired, any
   amount of white space and tabs are also allowed. Comments may be
   placed anywhere and should start with the characters "#" or "!".
   Continuation onto a new line is indicated by use of "-".
2 POLPACK_extension_items
   The POLPACK extension of an NDF may contain the following items.
   The names and types of the extension items are those as used in
   import tables. Of these, ANGROT, FILTER, WPLATE and possibly IMGID
   are the only ones that most users need be concerned with. Values
   should be assigned to these extension items before processing of
   raw data commences. Their values will often be derived from FITS
   headers written by the instrument/telescope control system. Values
   for the remaining extension items are produced by POLPACK as the
   processing proceeds and need only be included in the control
   table if you are importing partially processed data.

   Some extension items have default values which are used if the
   control table does not specify a value for them. These are
   indicated in the descriptions below:

      ANGROT (_REAL):  The anti-clockwise angle from the first axis of
      the image to the analyser position corresponding to WPLATE=0.0,
      in degrees. Defaults to 0.0.

      FILTER (_CHAR):  The filter name. If a value is supplied, then
      the value of WPLATE is appended to it (unless the filter already
      includes the WPLATE value). This value is also copied to the FILTER
      item in the CCDPACK extension. Defaults to the value of WPLATE.

      IMGID (_CHAR):  An arbitrary textual identifier for each input
      image, used to associate corresponding O and E ray images. It must
      be unique amongst the input images. Defaults to the name of the
      input image.

      RAY (_CHAR):  This item should only be specified in the control
      table if the images being imported are partially processed images
      which have been split into separate O and E ray images. It
      identifies which ray the image is derived from, and can take the
      two values "O" and "E" (upper case). Left undefined by default.

      ROTATION (_REAL):  This item should only be specified in the
      control table if the images being imported are partially processed
      images which have already been aligned. It is the clockwise
      rotation introduced into the image in order to align it with other
      images, in degrees. Left undefined by default.

      STOKES (_CHAR):  This item should only be specified in the
      control table if the images being imported are partially processed
      images containing Stokes parameters. It is a string containing one
      character for each plane in the data array of the NDF. Each
      character identifies the quantity stored in the corresponding plane
      of the data array, and will be one of I, Q, U or V. Left
      undefined by default.

      WPLATE (_CHAR):  The wave-plate position, in degrees. Must be one
      of; "0.0", "22.5", "45.0", "67.5". There is no default (an error
      is reported if no value is supplied).

      YROTATION (_REAL): This item should only be specified in the
      control table if the images being imported are partially processed
      images which have already been aligned, and if the final map may
      contain shear. It gives the clockwise rotation in degrees of the
      Y axis introduced into the image in order to align it with other
      images. In this case the ROTATION item (see above) is understood
      as giving the rotation of the X axis. Left undefined by default.
2 Authors
DSB: David Berry (STARLINK)
2 History
 3-DEC-1997 (DSB):
    Original version, based on CCDPACK:IMPORT
1 POLKA
Extract and align O and E ray areas from a set of images.

Usage:

   polka in out_s [skyframes]

Description:

   This routine extracts and aligns areas containing corresponding rays
   from a set of images containing dual or single beam polarimetry data.
   It can also perform sky subtraction based either on a set of
   supplied sky frames, or on user-specified background areas within
   the object frames.

   In dual-beam mode, two output images are created for each
   supplied input image, one containing the O-ray areas and the other
   containing the E-ray areas from the corresponding input image. All
   output images are aligned pixel-for-pixel. In single-beam mode, only
   one output image is created for each input image.

   The mappings between rays and images are determined from a set of
   fiducial positions supplied by the user, using an integrated
   graphical user interface (GUI) which activates various applications
   from the KAPPA, CCDPACK and POLPACK packages. The same GUI is used to
   specify masks enclosing the O and E ray areas of each image (each mask
   comprises one or more polygonal areas). For each input image, the
   contents of the O-ray mask is copied to the corresponding "O-ray"
   output, and the contents of the E-ray mask is copied to the corresponding
   "E-ray" output. In single-beam mode only a single mask is used
   (notionally the "O-ray" mask), but the user has the option of not
   supplying any mask at all, in which case the whole input image is
   copied to the output.

   Various options controlling the behaviour of the GUI can be set on
   the command line by assigning values to the parameters listed below.
   Alternatively, they can be set using the "Options" menu in the menu
   bar at the top of the GUI. If not supplied on the command line, these
   parameters usually adopt the values they had on the previous
   invocation of Polka. The values shown in square brackets in the
   parameter descriptions below are the initial default values.

   Detailed information on the operation of Polka and how to use the GUI
   is available by clicking on the "Help" button at the right hand end of
   the menu bar.
2 Parameters
For information on individual parameters, select from the list below:
3 BADCOL
BADCOL = LITERAL (Update)
   The colour with which to represent missing data. This should be
   one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. Any
   unambiguous abbreviation can be supplied, and the value is
   case-insensitive. [CYAN]
3 CURCOL
CURCOL = LITERAL (Update)
   The colour with which to mark the objects (i.e. image features
   or masks) currently being entered by the user. This should be
   one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. Any
   unambiguous abbreviation can be supplied, and the value is
   case-insensitive. [RED]
3 DPI
DPI = _INTEGER (Read)
   The dots per inch on the display screen. Some X servers fail to
   supply the correct value, resulting in the GUI being unplesantly
   small or large. For this reason, an explicit value may be supplied
   using this parameter. If a null (!) value is supplied, then the
   DPI value returned by the X server is used. This parameter may
   also be used to adjust the size of the GUI to the user's
   preference, even if the DPI value returned by the X server is correct.
   Note, this value cannot be set from the GUI's "Options" menu. [!]
3 DUALBEAM
DUALBEAM = _LOGICAL (Read)
   If a true value is suplied, then Polka will operate in
   dual-beam mode, producing two output images for each input image.
   Otherwise, it will operate in single-beam mode, with one output
   image being produced for each input image. In single-beam mode,
   the output image is notionally referred to as the "O-ray" image,
   and all the GUI controls related to the E-ray areas are disabled.
   Note, this parameter cannot be set from the GUI's "Options"
   menu. [TRUE]
3 FITTYPE
FITTYPE = _INTEGER (Update)
   The type of mapping which should be used between images. This
   may take the following values:

   1 - Shift of origin.

   2 - Shift of origin and rotation.

   3 - Shift of origin and magnification.

   4 - Shift of origin, rotation and magnification.

   5 - A full 6 parameter mapping of the form:

         X_out = C1  +  C2 * X_in  +  C3 * Y_in
         Y_out = C4  +  C5 * X_in  +  C6 * Y_in

       This form of mapping allows the rotation and magnification
       to be different for each axis, and is unlikely to be of use
       with most polarimetry data. [1]
3 HELPAREA
HELPAREA = _LOGICAL (Update)
   If a true value is supplied, then dynamic help information will be
   displayed in a box at the bottom of the GUI. This information
   describes the component of the GUI currently under the mouse
   pointer. [TRUE]
3 IN
IN = NDF (Read)
   A list of input images. Note, the input images cannot be
   specified within the GUI.
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of a log file to which will be written all the messages
   generated by the applications activated by the GUI. If "stdout"
   is supplied, then the messages will be directed to standard
   output (usually the screen). If a null (!) value is supplied, then
   no log file will be created. Note, this parameter cannot be set
   from the GUI's "Options" menu. [!]
3 MODE
MODE = LITERAL (Read)
   The type of polarisation being measured; Linear or Circular. This
   parameter is only accessed if an output cube holding Stokes
   parameters is being created (i.e. if OUT_S is not given a null (!)
   value). [Linear]
3 NEWCOLMAP
NEWCOLMAP = _LOGICAL (Read)
   If a true value is supplied for NEWCOLMAP, then the GUI will use
   its own private colour map. Otherwise it will share the standard
   colour map. Note, with a false value for NEWCOLMAP, there may
   be insufficient free colours in the standard colour map (i.e. if
   other X applications are running). In this case polka will report
   an error and abort. If this happens, try re-running with a true
   value for NEWCOLMAP. [FALSE]
3 OEFITTYPE
OEFITTYPE = _INTEGER (Update)
   The type of mapping which should be used between O and E rays. See
   parameter FITTYPE for a description of the allowed values. [1]
3 OUT_S
OUT_S = NDF (Write)
   The name of the output cube to hold the Stokes parameters
   calculated from the input images. If a null value is given then
   no Stokes parameters are calculated. Note, the output images
   cannot be specified within the GUI.
3 OUT
OUT = LITERAL (Write)
   This parameter is only used if parameter DUALBEAM
   is given a false value. It is a list of the names of the
   output images to create in single-beam mode, holding aligned
   intensity values from the input images. These should correspond
   one-for-one to the input images supplied using parameter IN. If
   a null (!) value is given, then no intensity images are created.
   Note, the output images cannot be specified within the GUI.
3 OUT_E
OUT_E = LITERAL (Write)
   This parameter is only used if parameter DUALBEAM is given a
   true value. It is a list of the
   names of the E-ray output images to create in dual-beam mode,
   holding aligned E-ray intensity values from the input images. These
   should correspond one-for-one to the input images supplied using
   parameter IN. If  a null (!) value is given, then no E-ray intensity
   images are created. Note, the output images cannot be specified
   within the GUI.
3 OUT_O
OUT_O = LITERAL (Write)
   This parameter is only used if parameter DUALBEAM is given a
   true value. It is a list of the
   names of the O-ray output images to create in dual-beam mode,
   holding aligned O-ray intensity values from the input images. These
   should correspond one-for-one to the input images supplied using
   parameter IN. If  a null (!) value is given, then no O-ray intensity
   images are created. Note, the output images cannot be specified
   within the GUI.
3 PERCENTILES
PERCENTILES( 2 ) = _REAL (Update)
   The percentiles that define the scaling limits for the displayed
   images. For example, [25,75] would scale between the quartile
   values. [5,95]
3 PSFSIZE
PSFSIZE = _INTEGER (Update)
   This value controls the centroiding process which is used to find
   accurate centres for the features identified using the mouse.
   It should be set roughly to the width (in pixels) of the
   features which are to be used to align the images. If the
   accurate positions wander too far from the original position, then
   a smaller value should be supplied. If it is set to zero, then
   no centroiding is performed, and the raw feature positions are
   used as supplied. [3]
3 REFCOL
REFCOL = LITERAL (Update)
   The colour with which to mark the reference objects (i.e. image
   features or masks). This should be one of RED, BLUE, GREEN, CYAN,
   MAGENTA, YELLOW, BLACK. Any unambiguous abbreviation can be supplied,
   and the value is case-insensitive. [GREEN]
3 SELCOL
SELCOL = LITERAL (Update)
   The colour with which to mark the selected area of the image (if any).
   This should be one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK.
   Any unambiguous abbreviation can be supplied, and the value is
   case-insensitive. [RED]
3 SKYFRAMES
SKYFRAMES = NDF (Read)
   A list of sky frames. These frames are subtracted from the
   supplied object frames before the output images are created. If only
   one sky frame is supplied, then it is used for all the object
   frames. Otherwise, the number of sky frames must equal the
   number of supplied object frames, and must be given in the same
   order. If a null value (!) is given for SKYFRAMES, then the sky
   background to be subtracted from each output image is determined
   by fitting a surface to sky areas identified by the user within
   the supplied object frames. [!]
3 SKYPAR
SKYPAR = _INTEGER (Update)
   If no sky frames are supplied using parameter SKYFRAMES, then
   the sky in each output image will be fitted using a polynomial
   surface. The order of the fit on each axis is given by this
   parameter (SKYPAR). A value of 0 will result in a flat surface
   (i.e. a constant value) being used, 1 will result in a linear
   surface, 2 in a quadratic surface, etc. The supplied value
   must be in the range 0 to 14. [0]
3 SKYOFF
SKYOFF = _LOGICAL (Update)
   If a true value is supplied, then the sky background is removed
   from each output image. Otherwise, no sky background is removed.
   The method used to estimate the sky background is determined by
   the SKYFRAMES parameter. [TRUE]
3 STARTHELP
STARTHELP = _LOGICAL (Read)
   If a true value is supplied, then a hyper-text browser will be
   created with the GUI, displaying the contents page of the Polka
   on-line help documentation. Otherwise, the browser is only created
   if the user accesses the on-line help information explicitly
   from within the GUI by using the "Help" menu or the F1 key on
   the keyboard. [TRUE]
3 STATUSAREA
STATUSAREA = _LOGICAL (Update)
   If a true value is supplied, then information describing the
   currently displayed image, current options values, etc, will be
   displayed in a box underneath the displayed image. The contents
   of this box can be selected using the "Options" menu in the GUI.
   [TRUE]
3 VIEW
VIEW = LITERAL (Update)
   This controls how images are placed within the image display
   area of the GUI when a new image is selected using the "Images"
   menu. It may take one of the following values:

   ZOOMED - The new image is displayed with the curremt zoom factor
   and image centre.

   UNZOOMED - The zoom factor and image centre are reset so that
   the new image just fills the image display area in at least one
   dimension. [ZOOMED]
3 XHAIR
XHAIR = _LOGICAL (Update)
   If a true value is supplied, then a cross hair will be used
   instead of a pointer while the mouse is over the image display
   area. [TRUE]
3 XHAIRCOL
XHAIRCOL = LITERAL (Update)
   The colour with which to draw the cross-hair (if required). This
   should be one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. Any
   unambiguous abbreviation can be supplied, and the value is
   case-insensitive. [YELLOW]
2 Examples
polka 'im1,im2' '*_o' '*_e'
   This example aligns and extracts the O and E ray areas from the two
   images `im1` and `im2`, subtracts a sky background (estimated
   from areas within the object frames), and stores the results in
   the images `im1_o`, `im1_e`, `im2_o` and `im2_e`. The current
   values for all other parameters are used.

polka ^in.lis out=^out.lis dualbeam=no skyframes=^sky.lis reset
   This example uses single-beam mode. It reads the names of input
   images from the text file `in.lis`, subtracts the sky frames
   read from the text file `sky.lis`, aligns them and stores
   them in the images named in the text file `out.lis`. All
   other parameters are reset to their initial default values listed
   in the parameter descriptions above.
2 Notes
- The following components are added to the POLPACK extension in the
output intensity images (the extension is first created if it does
not already exist):

ROTATION (_REAL): The clockwise rotation from the input
image to the output image (in degrees). If the input image already
contains a POLPACK extension, then the value of ROTATION written to the
output image is the sum of the input image value and the value
implied by the new mapping.

YROTATION (_REAL): This component is only written to the extension
if the output image may contain shear. It is the clockwise
rotation from the input image Y axis to the output image Y axis (in
degrees). In this case the ROTATION component (see above) is understood
as giving the rotation of the X axis. If the input image already
contains a POLPACK extension, then the value of YROTATION written to the
output image is the sum of the input image value and the value
implied by the new mapping.

RAY (_CHAR): A label identifying which of the two rays the image
contains. This will be either "O" or "E". This is only written in
dual-beam mode (see parameter DUALBEAM).

IMGID (_CHAR): An identifier for the input image from which the
output image was derived. If the input image already contains a
POLPACK extension with a IMGID value, then the IMGID value is copied
unchanged to the corresponding output images. Otherwise, the name of
the input image (without a directoty path) is used.

- The following components are added to the POLPACK extension in the
output cube holding Stokes parameter (the extension is first created
if it does not already exist):

STOKES (_CHAR):  A string containing one character for each plane in
the data array of the NDF. Each character identifies the quantity
stored in the corresponding plane of the data array, and will be one
of I, Q, U or V. Left undefined by default.
2 Authors
DSB: David Berry (STARLINK)
2 History
 18-APR-1997 (DSB):
    Original version.
1 POLMAP
Displays polarisation maps.

Usage:

   polmap in

Description:

   This routine
2 Parameters
For information on individual parameters, select from the list below:
3 BADCOL
BADCOL = LITERAL (Update)
   The colour with which to represent missing data. This should be
   one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. Any
   unambiguous abbreviation can be supplied, and the value is
   case-insensitive. [CYAN]
3 DPI
DPI = _INTEGER (Read)
   The dots per inch on the display screen. Some X servers fail to
   supply the correct value, resulting in the GUI being unplesantly
   small or large. For this reason, an explicit value may be supplied
   using this parameter. If a null (!) value is supplied, then the
   DPI value returned by the X server is used. This parameter may
   also be used to adjust the size of the GUI to the user's
   preference, even if the DPI value returned by the X server is correct.
   Note, this value cannot be set from the GUI's "Options" menu. [!]
3 HELPAREA
HELPAREA = _LOGICAL (Update)
   If a true value is supplied, then dynamic help information will be
   displayed in a box at the bottom of the GUI. This information
   describes the component of the GUI currently under the mouse
   pointer. [TRUE]
3 IN
IN = NDF (Read)
   The input image. Note, the input image cannot be specified within
   the GUI.
3 LOGFILE
LOGFILE = LITERAL (Read)
   The name of a log file to which will be written all the messages
   generated by the applications activated by the GUI. If "stdout"
   is supplied, then the messages will be directed to standard
   output (usually the screen). If a null (!) value is supplied, then
   no log file will be created. Note, this parameter cannot be set
   from the GUI's "Options" menu. [!]
3 NEWCOLMAP
NEWCOLMAP = _LOGICAL (Read)
   If a true value is supplied for NEWCOLMAP, then the GUI will use
   its own private colour map. Otherwise it will share the standard
   colour map. Note, with a false value for NEWCOLMAP, there may
   be insufficient free colours in the standard colour map (i.e. if
   other X applications are running). In this case POLMAP will report
   an error and abort. If this happens, try re-running with a true
   value for NEWCOLMAP. [FALSE]
3 PERCENTILES
PERCENTILES( 2 ) = _REAL (Update)
   The percentiles that define the scaling limits for the displayed
   images. For example, [25,75] would scale between the quartile
   values. [5,95]
   used as supplied. [3]
3 POLCOL
POLCOL = LITERAL (Update)
   The colour with which to draw polygons. This should be one of RED,
   BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. Any unambiguous
   abbreviation can be supplied, and the value is case-insensitive.
   [RED]
3 SELCOL
SELCOL = LITERAL (Update)
   The colour with which to mark the selected area of the image (if any).
   This should be one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK.
   Any unambiguous abbreviation can be supplied, and the value is
   case-insensitive. [RED]
3 STARTHELP
STARTHELP = _LOGICAL (Read)
   If a true value is supplied, then a hyper-text browser will be
   created with the GUI, displaying the contents page of the PolMap
   on-line help documentation. Otherwise, the browser is only created
   if the user accesses the on-line help information explicitly
   from within the GUI by using the "Help" menu or the F1 key on
   the keyboard. [TRUE]
3 STATUSAREA
STATUSAREA = _LOGICAL (Update)
   If a true value is supplied, then information describing the
   currently displayed image, current options values, etc, will be
   displayed in a box underneath the displayed image. The contents
   of this box can be selected using the "Options" menu in the GUI.
   [TRUE]
3 XHAIR
XHAIR = _LOGICAL (Update)
   If a true value is supplied, then a cross hair will be used
   instead of a pointer while the mouse is over the image display
   area. [TRUE]
3 XHAIRCOL
XHAIRCOL = LITERAL (Update)
   The colour with which to draw the cross-hair (if required). This
   should be one of RED, BLUE, GREEN, CYAN, MAGENTA, YELLOW, BLACK. Any
   unambiguous abbreviation can be supplied, and the value is
   case-insensitive. [YELLOW]
2 Authors
DSB: David Berry (STARLINK)
2 History
 27-AUG-1997 (DSB):
    Original version.
1 POLVEC
Calculates polarisation vectors from supplied Stokes parameters.

Usage:

   polvec in p theta i ip

Description:

   This routine creates four output NDFs holding percentage polarisation,
   polarisation angle, total intensity and polarised intensity at each
   pixel in the input cube, which should contain Stokes parameters and
   will normally have been created by POLCAL.
2 Parameters
For information on individual parameters, select from the list below:
3 DEBIAS
DEBIAS = _LOGICAL (Read)
   TRUE if a correction for statistical bias is to be made to
   percentage polarisation and polarised intensity. This correction
   subtracts the variance of the percentage polarisation from the
   squared percentage polarisation, and uses the square root of this
   as the corrected percentage polarisation.  The corresponding
   polarised intensity is then found by multiplying the corrected
   percentage polarisation by the total intensity.  The returned
   variance values are unchanged. This correction only applies to
   calculations of plane polarisation, and cannot be used if the
   input NDF does not contain variance values, or if you supply a
   FALSE value for parameter VARIANCE. If a null value (!) is
   supplied, then the correction is applied if output variances
   are being created, and not otherwise.           [!]
3 I
I = NDF (Write)
   An output NDF holding the total intensity. A null value can be
   supplied if this output image is not required.
3 IN
IN = NDF (Read)
   The 3-d NDF holding the Stokes parameters. This should have been
   created by POLCAL.
3 IP
IP = NDF (Write)
   An output NDF holding the polarised intensity. A null value can be
   supplied if this output image is not required.
3 P
P = NDF (Write)
   An output NDF holding percentage polarisation. A null value can be
   supplied if this output image is not required.
3 THETA
THETA = NDF (Write)
   An output NDF holding the polarisation angle in degrees. In the
   the case of circular polarisation, a value of zero is stored
   if the normalised Stokes parameter V is positive, and a value
   of 90 is stored otherwise. A null value can be supplied if this
   output image is not required.
3 VARIANCE
VARIANCE = _LOGICAL (Read)
   TRUE if output variances are to be calculated.  This parameter
   is only accessed if all input NDFs contain variances, otherwise
   no variances are generated.  [TRUE]
2 Notes
-  The output NDFs are deleted if there is an error during the
formation of the polarisation parameters.
2 Authors
DSB: David Berry (STARLINK)
2 History
 13-JAN-1998 (DSB):
    Original version.
