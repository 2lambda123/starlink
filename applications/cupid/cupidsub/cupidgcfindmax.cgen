#include "sae_par.h"
#include "mers.h"
#include "ast.h"
#include "cupid.h"
#include "prm_par.h"


int CGEN_FUNCTION(cupidGCFindMax)( CGEN_TYPE *array, int nel, int *imax,
                                   double *sumdata, int *status ){
/*
*+
*  Name:
*     cupidGCFindMax<X>

*  Purpose:
*     Find the element with the largest value in the supplied array. 

*  Language:
*     Starlink C

*  Synopsis:
*     int cupidGCFindMax<X>( CGEN_TYPE *array, int nel, int *imax,
*                            double *sumdata, int *status )

*  Description:
*     This functions finds the element with the largest value in the supplied 
*     1D array. 

*  Parameters:
*     array
*        Pointer to the start of the 1D array to be searched.
*     nel
*        The number of elements in the supplied array. 
*     imax
*        Pointer the location at which to return the index within the
*        supplied array of the element with the largest value. A value of
*        -1 is returned if there are no good values in the supplied array.
*     sumdata 
*        Pointer to a location at which to return the sum of the supplied
*        array values. This is only done if the supplied value for
*        "sumdata" is VAL__BADD (otherwise the supplied value is left
*        unchanged).
*     status
*        Pointer to the inherited status value.

*  Returned Value:
*     A flag indicating if all the supplied array values are bad.

*  Notes:
*     - This function can be invoked using the generic cupidGCFindMax macro 
*     defined in cupid.h. This macro has the same parameter list as 
*     cupidGCFindMax<X> except that an extra parameter is added to the start 
*     of the parameter list indicating the data type of the specific 
*     cupidGCFindMax... function to be invoked. This extra parameter should
*     be an integer and should be one of CUPID__DOUBLE, CUPID__FLOAT, etc.

*  Copyright:
*     Copyright (C) 2005 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     DSB: David S. Berry
*     {enter_new_authors_here}

*  History:
*     29-SEP-2005 (DSB):
*        Original version.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */
   double sum;          /* Sum of supplied values */
   int i;               /* Loop count */
   int ngood;           /* Number of good array values found */
   CGEN_TYPE maxval;    /* Largest value found so far */

/* Initialise. */
   *imax = -1;
   ngood = 0;
   maxval = 0;
   sum = 0.0;

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return 1;

/* Loop round all elements of the array. */
   for( i = 0; i < nel; i++ ) {

/* Skip bad values. */
      if( array[ i ] != CGEN_BAD ) {
          ngood++;

/* Increment the sum of the supplied values */
          sum += (double) array[ i ];

/* If this is the first good value,  or if this value is larger than the 
   previous found maximum, record its position. */
         if( *imax == -1 || array[ i ] > maxval ) {
            maxval = array[ i ];
            *imax = i;
         }
      }
   }

/* Return the data sum, if required. */
   if( *sumdata == VAL__BADD ) *sumdata = sum;

/* Return a flag indicating if all array values are bad. */
   return ( ngood == 0 );

}
