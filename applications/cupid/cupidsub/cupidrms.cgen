#include "sae_par.h"
#include "ast.h"
#include "cupid.h"
#include "../cupid_err.h"
#include "prm_par.h"
#include "mers.h"
#include <math.h>
#include "star/thr.h"

/* Local data types */

typedef struct CGEN_FUNCTION(CupidRmsData) {
   int operation;
   size_t r1;
   size_t r2;
   size_t rowlen;
   CGEN_TYPE *array;
   CGEN_TYPE *w;
   double maxv;
   double minv;
   double sum;
   size_t n;
   size_t nrej;
   double thresh;
} CGEN_FUNCTION(CupidRmsData);

/* Prototypes for local functions */
static void CGEN_FUNCTION(cupidRmsPar)( void *job_data_ptr, int *status );




double CGEN_FUNCTION(cupidRms)( ThrWorkForce *wf, CGEN_TYPE *array, size_t nel,
                                hdsdim rowlen, int *status ){
/*
*+
*  Name:
*     cupidRms<X>

*  Purpose:
*     Find the RMS noise in the supplied data array.

*  Language:
*     Starlink C

*  Synopsis:
*     double cupidRms<X>( ThrWorkForce *wf, CGEN_TYPE *array, size_t nel,
*                         hdsdim rowlen, int *status )

*  Description:
*     This functions finds an estimate of the RMS noise in the supplied
*     data array. The algorithm first applies a 1D Laplace filter to each
*     row of the data (this is equivalent to finding the difference between
*     adjacent pixel values in the row, then finding the difference between
*     the adjcent differences). It then estimates the RMS of the the
*     filtered data, and rejects data values greater than 4*RMS. When a
*     point is rejected, the 2 neighbouring points on either side are
*     also rejected. It then forms the RMS of the remaining data, and
*     does a new clipping iteration. This continues until the clipping
*     results in no points being rejected. The final RMS is then scaled
*     to take account of the effects of the Laplace filter and the 4*sigma
*     clipping.

*  Parameters:
*     wf = ThrWorkForce * (Given)
*        Pointer to a pool of worker threads
*     array
*        Pointer to the data array. The elements should be stored in
*        Fortran order.
*     nel
*        The number of elements in the supplied array.
*     rowlen
*        The number of elements spanned by the first pixel axis.
*     status
*        Pointer to the inherited status value.

*  Returned Value:
*     The RMS noise estimate

*  Notes:
*     - This function can be invoked using the generic cupidRms macro
*     defined in cupid.h. This macro has the same parameter list as
*     cupidRms<X> except that an extra parameter is added to the start
*     of the parameter list indicating the data type of the specific
*     cupidRms... function to be invoked. This extra parameter should
*     be an integer and should be one of CUPID__DOUBLE, CUPID__FLOAT, etc.

*  Copyright:
*     Copyright (C) 2005 Particle Physics & Astronomy Research Council.
*     Copyright (C) 2019 East Asian Observatory
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     DSB: David S. Berry
*     {enter_new_authors_here}

*  History:
*     5-OCT-2005 (DSB):
*        Original version.
*     15-MAR-2013 (DSB):
*        Ensure max and min data value sinclude *all* data - including
*        values adjacent to bad values.
*     7-JUN-2013 (DSB):
*        Assign bad value to work values if a neigbouring input value is bad.
*     31-OCT-2019 (DSB):
*        Multi-threaded.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables: */
   size_t nrej;
   CGEN_TYPE *w;        /* Pointer to work array */
   CGEN_FUNCTION(CupidRmsData) *job_data = NULL; /* Job desriptions */
   CGEN_FUNCTION(CupidRmsData) *pdata; /* Point er to a single job description */
   double maxv;         /* Largest data value in supplied array */
   double minv;         /* Smallest data value in supplied array */
   double ret;          /* Returned value */
   double sum;          /* Sum of squared residuals */
   hdsdim n;            /* Number of values summed in "sum" */
   hdsdim nrow;         /* Number of rows in supplied array */
   int iw;              /* Index of worker thread */
   int nw;              /* Number of worker threads */
   size_t step;         /* Rows per thread */

/* Initialise. */
   ret = VAL__BADD;

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return ret;

/* How many threads do we get to play with */
   nw = wf ? wf->nworker : 1;

/* Allocate job data for threads. */
   job_data = astCalloc( nw, sizeof(*job_data) );

/* Allocate memory for a copy of the data array. */
   w = astCalloc( nel, sizeof( CGEN_TYPE ) );
   if( job_data && w ) {

/* How many rows in the entire data array? */
      nrow = nel/rowlen;

/* Find how many rows to process in each worker thread. */
      if( nw > nrow ) {
         nw = nrow;
         step = 1;
      } else {
         step = nrow/nw;
      }

/* Store the range of rows to be processed by each one. Ensure that the
   last thread picks up any left-over rows. */
      for( iw = 0; iw < nw; iw++ ) {
         pdata = job_data + iw;
         pdata->r1 = iw*step;
         if( iw < nw - 1 ) {
            pdata->r2 = pdata->r1 + step - 1;
         } else {
            pdata->r2 = nrow - 1 ;
         }

/* Store the other information needed to process the group of output
   pixels. */
         pdata->array = array;
         pdata->w = w;
         pdata->rowlen = rowlen;
         pdata->operation = 1;

/* Submit the job to be processed by the next available worker thread. */
         thrAddJob( wf, 0, pdata, CGEN_FUNCTION(cupidRmsPar), 0, NULL, status );
      }

/* Wait for all jobs to complete. */
      thrWait( wf, status );

/* Find the largest and smallest data value found in any row, the total number
   of good values and the sum of the good values. */
      maxv = CGEN_MIN;
      minv = CGEN_MAX;
      n = 0;
      sum = 0.0;
      for( iw = 0; iw < nw; iw++ ) {
         pdata = job_data + iw;
         if( pdata->maxv > maxv ) maxv = pdata->maxv;
         if( pdata->minv < minv ) minv = pdata->minv;
         n += pdata->n;
         sum += pdata->sum;
      }

      if( n < 2 ) {
         *status = CUPID__FWVAL;
         errRep( "CUPIDRMS_ERR1", "The supplied data contains insufficient "
                 "good values to continue.", status );
         goto L999;

      } else if( maxv == minv ) {
         *status = SAI__ERROR;
         errRep( "CUPIDRMS_ERR2", "All pixel values in the supplied data "
                 "are equal.", status );
         goto L999;

      } else {
         ret = sqrt( sum/n );
      }

/* We now get rid of spikes by doing a 4-sigma clip on the residuals
   produced by the Laplace filter. In addition, set the two neighbouring
   pixels on either side of each rejected pixel bad. We continue to do such
   clipping until no further residuals are rejected. */
      nrej = 1;
      while( nrej ) {

         for( iw = 0; iw < nw; iw++ ) {
            pdata = job_data + iw;
            pdata->operation = 2;
            pdata->thresh = 4*ret;
            thrAddJob( wf, 0, pdata, CGEN_FUNCTION(cupidRmsPar), 0, NULL, status );
         }
         thrWait( wf, status );

         nrej = 0;
         n = 0;
         sum = 0.0;
         for( iw = 0; iw < nw; iw++ ) {
            pdata = job_data + iw;
            n += pdata->n;
            nrej += pdata->nrej;
            sum += pdata->sum;
         }

         if( n == 0 ) {
            *status = CUPID__FWVAL;
            errRep( "CUPIDRMS_ERR3", "The supplied data contains insufficient "
                    "good values to continue.", status );
            goto L999;
         } else {
            ret = sqrt( sum/n );
         }
      }

/* Scale the returned RMS error to take account of the effects of the
   Laplace filter and the 4 sigma clipping. This assumes the noise is
   Gaussian. */
      ret /= 2.46182;

/* Do not allow a value of zero to be returned- use 0.001 of the data
   range instead. */
      if( ret == 0.0 ) ret = 0.001*( maxv - minv );

   }

/* Free resources. */
L999:;
   w = astFree( w );

/* Free the job data */
   job_data = astFree( job_data );

/* Return the result. */
   return ret;
}


static void CGEN_FUNCTION(cupidRmsPar)( void *job_data_ptr, int *status ) {
/*
*  Name:
*     cupidRmsPar<X>

*  Purpose:
*     Executed in a worker thread to do various calculations for
*     cupidRms

*  Invocation:
*     cupidRmsPar<X>( void *job_data_ptr, int *status )

*  Arguments:
*     job_data_ptr = CGEN_FUNCTION(CupidRmsData) * (Given)
*        Data structure describing the job to be performed by the worker
*        thread.
*     status = int * (Given and Returned)
*        Inherited status.

*/

/* Local Variables: */
   CGEN_TYPE *pr;       /* Pointer to next data value */
   CGEN_TYPE *wr;       /* Pointer to next work value */
   CGEN_FUNCTION(CupidRmsData) *pdata; /* Structure containing job information */
   double maxv;         /* Largest data value in supplied array */
   double minv;         /* Smallest data value in supplied array */
   double sum;          /* Sum of squared residuals */
   size_t ipix;         /* Pixel count */
   size_t irow;         /* Row counter */
   double thresh;       /* The rejection threshold for residuals */
   size_t nrej;         /* Number of rejections on previus loop */
   size_t n;            /* Number of values summed in "sum" */
   size_t i;            /* Element count */
   size_t r2;           /* Index of final row to process */
   size_t rowlen;       /* No. of pixels in one row */

/* Check inherited status */
   if( *status != SAI__OK ) return;

/* Get a pointer that can be used for accessing the required items in the
   supplied structure. */
   pdata = (CGEN_FUNCTION(CupidRmsData) *) job_data_ptr;

/* Copy values form the structure into local variables */
   r2 = pdata->r2;
   rowlen = pdata->rowlen;

/* Applying a Laplace filter to each row of data */
   if( pdata->operation == 1 ) {

/* Run a 1D Laplace filter (kernel = [-1,2,-1]) over the rows to be
   processed by this thread, storing the results in the work array. At
   the same time, find the RMS value of the filtered data. A Laplace filter
   picks out the noise, but will also include spikes due to sharp slopes
   (such as the edge of star profiles, etc). */
      pr = pdata->array + pdata->r1*rowlen;
      wr = pdata->w + pdata->r1*rowlen;
      sum = 0.0;
      n = 0;
      maxv = CGEN_MIN;
      minv = CGEN_MAX;
      for( irow = pdata->r1; irow <= r2; irow++ ){
         *(wr++) = CGEN_BAD;
         pr++;
         for( ipix = 1; ipix < rowlen - 1; ipix++, wr++, pr++ ){
            if( pr[ 0 ] != CGEN_BAD ) {

               if( pr[ -1 ] != CGEN_BAD &&
                   pr[ 1 ] != CGEN_BAD ){
                  *wr = -pr[ -1 ] + 2*pr[ 0 ] - pr[ 1 ];
                  sum += ( *wr )*( *wr );
                  n++;
               } else {
                  *wr = CGEN_BAD;
               }

               if( *pr > maxv ) maxv = *pr;
               if( *pr < minv ) minv = *pr;

            } else {
               *wr = CGEN_BAD;
            }
         }
         *(wr++) = CGEN_BAD;
         pr++;
      }

      pdata->maxv = maxv;
      pdata->minv = minv;
      pdata->n = n;
      pdata->sum = sum;

/* Get rid of spikes by doing a 4-sigma clip on the residuals produced by
   the Laplace filter. In addition, set the two neighbouring pixels on
   either side of each rejected pixel bad. */
   } else if( pdata->operation == 2 ) {
      thresh = pdata->thresh;

      sum = 0.0;
      n = 0;
      nrej = 0;

      for( irow = pdata->r1; irow <= r2; irow++ ){
         wr = pdata->w + irow*rowlen + 2;

         for( i = 2; i < rowlen - 2; i++, wr++ ){
            if( *wr != CGEN_BAD ){
               if( fabs( *wr ) >  thresh ) {
                  wr[ -2 ] = CGEN_BAD;
                  wr[ -1 ] = CGEN_BAD;
                  wr[ 0 ] = CGEN_BAD;
                  wr[ 1 ] = CGEN_BAD;
                  wr[ 2 ] = CGEN_BAD;
                  nrej++;
               } else {
                  sum += ( *wr )*( *wr );
                  n++;
               }
            }
         }
      }

      pdata->n = n;
      pdata->nrej = nrej;
      pdata->sum = sum;

   } else {
      *status = SAI__ERROR;
      errRepf( "", "cupidrms: Illegal operation %d (cupid programming error).",
               status, pdata->operation );
   }
}

