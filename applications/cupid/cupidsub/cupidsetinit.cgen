#include "sae_par.h"
#include "ast.h"
#include "cupid.h"

/* Global Variables: */
/* ================= */
/* A structure holding the global parameters of the GaussClump algorithm 
   needed by this function. These are set by function cupidGaussClumps. */
extern CupidGC cupidGC;

void CGEN_FUNCTION(cupidSetInit)( CGEN_TYPE *array, int ndim, int *dims, 
                                  int imax, double rms, AstKeyMap *config, 
                                  int iclump, double *x ){
/*
*  Name:
*     cupidSetInit<X>

*  Purpose:
*     Make an initial guess at the Gaussian clump parameters.

*  Synopsis:
*     void cupidSetInit<X>( CGEN_TYPE *array, int ndim, int *dims, 
*                           int imax, double rms, AstKeyMap *config, 
*                           int iclump, double *x );

*  Description:
*     This functions makes an initial guess at the Gaussian clump
*     parameters.

*  Parameters:
*     array
*        The array containing the data to be fitted. The elements should
*        be ordered according to Fortran order (first axis varying most 
*        rapidly).
*     ndim
*        The number of pixel axes in the array.
*     dims
*        The number of pixels on each pixel axis of the array.
*     imax
*        The 1D vectorised index of the pixel with the highest value in
*        the array.
*     rms
*        The RMS noise level in the array.
*     config
*        An AST KeyMap holding tuning parameters for the algorithm.
*     iclump
*        The number of clumps found so far.
*     x
*        Pointer to an array holding the initial guesses at the
*        parameters describing a gaussian clump centred at "imax".

*  Notes:
*     - This function can be invoked using the generic cupidSetInit macro 
*     defined in cupid.h. This macro has the same parameter list as 
*     cupidSetInit<X> except that an extra parameter is added to the start 
*     of the parameter list indicating the data type of the specific 
*     cupidSetInit... function to be invoked. This extra parameter should
*     be an integer and should be one of CUPID__DOUBLE, CUPID__FLOAT, etc.

*  Authors:
*     DSB: David S. Berry
*     {enter_new_authors_here}

*  History:
*     5-OCT-2005 (DSB):
*        Original version.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}
*/      

/* Local Variables: */
   int i;               /* Loop count */
   int offset;          /* Pixel offset from peak centre */
   double *profile;     /* Pointer to array containing 1D radial profile */
   double val;          /* User supplied value for a configuration parameter */
   static double fbeam; /* Ratio of observed clump size ot beam width */

/* Abort if an error has already occurred. */
   if( *status != SAI__OK ) return;

/* Do some initialisation if no clumps have yet been found. */
   if( iclump == 0 ) {

/* See if a value has been supplied for the initial guess at the ratio 
   of the clump size to the beam width. */
      fbeam = cupidConfigD( config, "FBEAM", VAL__BADD );

/* Get the FHWM of the instrument beam, in pixels, and store its square. */
      val = cupidConfigD( config, "FWHMBEAM", 3.0 );
      cupidGC.beam_sq = val*val;

/* Get the velocity resolution, in pixels (=channels), and store its square. */
      val = cupidConfigD( config, "VELORES", 3.0 );
      cupidGC.velres_sq = val*val;

/* Get the Chi-square stiffness parameter "Sa" which encourages the peak
   amplitude of the fitted gaussian close to the maximum value in the
   observed data. */
      cupidGC.sa = cupidConfigD( config, "SA", 0.0 );

/* Get the Chi-square stiffness parameter "S0" which encourages the peak
   amplitude of the fitted gaussian to be below the maximum value in the
   observed data. */
      cupidGC.s0p1 = cupidConfigD( config, "S0", 0.0 ) + 1;

/* Get the Chi-square stiffness parameter "Sc" which encourages the peak
   position of the fitted gaussian to be close to the peak position in the
   observed data. */
      cupidGC.sc4 = 4*cupidConfigD( config, "SC", 0.0 );

/* The number of dimensions in the data. */
      cupidGC.ndim = ndim;

   }

/* Note the largest data value. */
   cupidGC.ymax = array[ imax ];

/* Loop round each pixel axis, finding an estimate of the width of the clump 
   on the pixel axis. */
   for( i = 0; i < ndim; i++ ) {

/* The radial profile starts at the peak pixel. */
      profile[ 0 ] = cupidGC.ymax;

/* We now move out away from the peak pixel along the current axis. We do
   both positive and negative directions at the same time. We loop until
   we have found a significant minimum in the profile. */
      offset = 1;



   }




/* Normalise all data values in the CupidGC structure to the RMS
   noise level. */
   cupidGC.ymax /= rms;





}

