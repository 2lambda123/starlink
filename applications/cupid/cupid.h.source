#if !defined( CUPID_INCLUDED )   /* Include this file only once */
#define CUPID_INCLUDED

#include "ast.h"
#include "star/hds.h"

/* Constants */
/* --------- */
#define CUPID__DOUBLE 1
#define CUPID__FLOAT  2

#define CUPID__GCNP1  4 /* No. of free parameters in a 1D GaussClump clump */
#define CUPID__GCNP2  7 /* No. of free parameters in a 2D GaussClump clump */
#define CUPID__GCNP3 11 /* No. of free parameters in a 3D GaussClump clump */

/* Type Definitions */
/* ---------------- */
/* A structure holding the global parameters of the GaussClump algorithm 
   needed by service functions. */
typedef struct CupidGC  {
   double *data;           /* Pointer to copy of data section being fitted */
   double *res;            /* Pointer to array to receive scale residuals */
   double *resu;           /* Pointer to array to receive unscale residuals */
   double *weight;         /* Pointer to weights for section being fitted */
   double beam_sq;         /* Square of spatial beam FWHM in pixels */   
   double lbnd[ 3 ];       /* Lower grid bounds of section being fitted */
   double maxwf;           /* Maximum factor for modifying weights */
   double minwf;           /* Minimum factor for modifying weights */
   double s0p1;            /* Chi-square stiffness parameter s0, minus 1.0 */
   double sa;              /* Chi-square stiffness parameter sa */
   double sc4;             /* Four times chi-square stiffness parameter sc */
   double ubnd[ 3 ];       /* Upper grid bounds of section being fitted */
   double velres_sq;       /* Square of velocity resolution in pixels */   
   double wsum;            /* Sum of values in "weight" array */
   double x_max[ 3 ];      /* Grid coords of "ymax" value */
   double ymax;            /* Largest data value in section being fitted */
   int dax[ 3 ];           /* External axis no. indexed by algorithm axis no. */
   int ndim;               /* Number of pixel axes in the data array */
   int nel;                /* Number of pixels in section being fitted */
   int nf;                 /* The invocation count from calcf */
   int maxnf;              /* Max invocation count for calcf */
   int nwf;                /* Number of times to modifiy the weight array */
   int ilevel;             /* Diagnostic information level */

   double initpars[ CUPID__GCNP3 ];
   double pars[ CUPID__GCNP3 ];
   double *initmodel;
   double *model;
   double *resids;
   double chisq;
   int slbnd[3];           /* Lower pixel bounds of user supplied NDF */
   
} CupidGC;


/* Function macros */
/* --------------- */

/* A macro to return the size of a cupid data type. */
#define cupidSize( type, fun ) \
   ( ( type == CUPID__DOUBLE ) ? \
      sizeof( double ) \
\
   : ( ( type == CUPID__FLOAT ) ? \
       sizeof( float ) \
\
   : ( ( *status == SAI__OK ) ? \
       *status = SAI__ERROR, \
       msgSeti( "TYPE", type ), \
       errRep( "CUPIDSIZE_ERR1", fun ": Invalid \"type\" " \
               "value (^TYPE) supplied (CUPID programming error).", \
               status ), 0 : 0 ) ) )



/* A set of macros which invoke the corresponding AST memory management
   functions, but which specify the size of a data element using a cupid
   data type rather than a C data type. The "fun" macro parameter should
   be a quoted string holding the name of the function to be included in 
   any error messages. */

#define cupidStore( mem, ptr, nel, type, fun ) \
   astStore( mem, ptr, nel*cupidSize( type, fun ) );


/* The global CUPID status value. */
/* ------------------------------- */
/* Is has a complicated name so that it will not clash with other external 
   symbols, but we provide a conveniently short macro to refer to it. The
   storage for this variable is allocated in cupid_mon.c. */
extern int *cupid_global_status;
#define status cupid_global_status

/* Function prototypes */
/* ------------------  */
double cupidConfigD( AstKeyMap *, const char *, double );
double cupidGCChiSq( int, double *, int, int );
double cupidGCModel( int, double *, double *, int, int, int );
float cupidRanVal( int, float[2] );
int cupidConfigI( AstKeyMap *, const char *, int );
void cupidClumpFind( int, int, int *, int *, void *, void *, AstKeyMap *, int, int );
void cupidDatCopy( HDSLoc *, HDSLoc * );
void cupidGCListClump( int, int, double *, double, int *, int, double );
void cupidGCcalcf( int, double *, int *, double * );
void cupidGCcalcg( int, double *, int *, double * );

HDSLoc **cupidGaussClumps( int, int, int *, int *, void *, double *, double, AstKeyMap *, int, int, int *, double * );

void cupidHdsClump( HDSLoc **, double, double *, double, int, int *, int *, int, double *, int *, int *, int, int *, AstKeyMap * );
void cupidStoreClumps( const char *, HDSLoc *, HDSLoc **, int, int, const char * );
void cupidStoreConfig( HDSLoc *, AstKeyMap * );

void clumps();
void cupidhelp();
void makeclumps();
