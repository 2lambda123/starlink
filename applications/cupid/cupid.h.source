
#if !defined( CUPID_INCLUDED )   /* Include this file only once */
#define CUPID_INCLUDED

#include "ast.h"
#include "star/hds.h"

/* Constants */
/* --------- */
#define CUPID__DOUBLE 1
#define CUPID__FLOAT  2

#define CUPID__KBACK  0
#define CUPID__KEDGE  1
#define CUPID__KPEAK  2

#define CUPID__GCNP1  4  /* No. of free parameters in a 1D GaussClump clump */
#define CUPID__GCNP2  7  /* No. of free parameters in a 2D GaussClump clump */
#define CUPID__GCNP3 11  /* No. of free parameters in a 3D GaussClump clump */

#define CUPID__CFNULL -1 /* Unassigned pixel flag */
#define CUPID__MAXINDEX 16380 /* Largest usable PixelSet index (must fit in 14 bits) */

#define CUPID__CONFIG  "NOALG_CONFIG" /* Key for config params which have no
                                         algorithm name */

/* Type Definitions */
/* ---------------- */
/* A structure holding the global parameters of the GaussClump algorithm 
   needed by service functions. */
typedef struct CupidGC  {
   double *data;           /* Pointer to copy of data section being fitted */
   double *res;            /* Pointer to array to receive scale residuals */
   double *resu;           /* Pointer to array to receive unscale residuals */
   double *weight;         /* Pointer to weights for section being fitted */
   double beam_sq;         /* Square of spatial beam FWHM in pixels */   
   double lbnd[ 3 ];       /* Lower grid bounds of section being fitted */
   double maxwf;           /* Maximum factor for modifying weights */
   double minwf;           /* Minimum factor for modifying weights */
   double s0p1;            /* Chi-square stiffness parameter s0, minus 1.0 */
   double sa;              /* Chi-square stiffness parameter sa */
   double sb;              /* Chi-square stiffness parameter sb */
   double sc4;             /* Four times chi-square stiffness parameter sc */
   double ubnd[ 3 ];       /* Upper grid bounds of section being fitted */
   double velres_sq;       /* Square of velocity resolution in pixels */   
   double wsum;            /* Sum of values in "weight" array */
   double x_max[ 3 ];      /* Grid coords of "ymax" value */
   double ymax;            /* Largest data value in section being fitted */
   int dax[ 3 ];           /* External axis no. indexed by algorithm axis no. */
   int fixback;            /* Is the background to be kept fixed during fit? */
   int ilevel;             /* Diagnostic information level */
   int maxnf;              /* Max invocation count for calcf */
   int ndim;               /* Number of pixel axes in the data array */
   int nel;                /* Number of pixels in section being fitted */
   int nf;                 /* The invocation count from calcf */
   int npar;               /* No of free params in fit (inc. background level) */
   int nwf;                /* Number of times to modifiy the weight array */

   double initpars[ CUPID__GCNP3 ];
   double pars[ CUPID__GCNP3 ];
   double *initmodel;
   double *model;
   double *resids;
   double chisq;
   int slbnd[3];           /* Lower pixel bounds of user supplied NDF */
   
} CupidGC;

/* Structure used to describe a set of contiguous pixels in the ClumpFind
   algorithm. */
typedef struct CupidPixelSet {
   int nnb;            /* No. of neighbouring PixelSets which touch this one */
   struct CupidPixelSet **nb; /* Pointer to array of "nnb" neighbouring PixelSets */
   int **nbl;          /* Pointer to array of "nnb" lists of neighbouring pixels */
   int *sznbl;         /* Pointer to array holding length of each "nbl" list */
   int index;          /* The index used to identify pixels in the set */
   int lbnd[ 3 ];      /* Lower GRID bounds of the set bounding box */
   int ubnd[ 3 ];      /* Upper GRID bounds of the set bounding box */
   double vpeak;       /* Peak pixel value */
   int peak[ 3 ];      /* Peak pixel GRID coords */
   int pop;            /* Number of pixels assigned to the pixel set */
   int edge;           /* Does the PixelSet touch an edge of the data array? */
} CupidPixelSet;


/* Function macros */
/* --------------- */

/* A macro which creates a negative pixel assignment index which
   indicates that the pixel is a member of the PixelSet with index "i"
   and is also a neighbour to a pixel belonging to the PixelSet with 
   index "j". The "j" value is moved into the upper bits of the int value. */
#define cupidMergeIndex( i, j ) \
   ( j == CUPID__CFNULL || j == i ) ? i :( -(i) - ( (j) << 14 ) )

/* A macro which takes a merged index produced by cupidMergeIndex and
   returns the index of the PixelSet to which the pixel belongs. */
#define cupidMergeSet( i ) \
   ( ( i >= CUPID__CFNULL ) ? i : ( (-i) & 0x3fff ) )

/* A macro which takes a merged index produced by cupidMergeIndex and
   returns the index of the neighbouring PixelSet. */
#define cupidMergeNeb( i ) \
   ( ( i >= CUPID__CFNULL ) ? CUPID__CFNULL : ( (-i) >> 14 ) )

/* A macro to return the size of a cupid data type. */
#define cupidSize( type, fun ) \
   ( ( type == CUPID__DOUBLE ) ? \
      sizeof( double ) \
\
   : ( ( type == CUPID__FLOAT ) ? \
       sizeof( float ) \
\
   : ( ( *status == SAI__OK ) ? \
       *status = SAI__ERROR, \
       msgSeti( "TYPE", type ), \
       errRep( "CUPIDSIZE_ERR1", fun ": Invalid \"type\" " \
               "value (^TYPE) supplied (CUPID programming error).", \
               status ), 0 : 0 ) ) )




#define cupidTestBnd \
{int itea, iteax, iteay, iteaz; \
   itea = -1; \
   for( iteaz = 1; iteaz <= dims[2]; iteaz++ ) { \
      for( iteay = 1; iteay <= dims[1]; iteay++ ) { \
         for( iteax = 1; iteax <= dims[0]; iteax++ ) { \
            itea++; \
            if( cupidMergeSet( ipa[ itea ] ) ) == ps->index ) { \
               if( iteax < ps->lbnd[ 0 ] || iteax > ps->ubnd[ 0 ] ||  \
                   iteay < ps->lbnd[ 1 ] || iteay > ps->ubnd[ 1 ] ||  \
                   iteaz < ps->lbnd[ 2 ] || iteaz > ps->ubnd[ 2 ] ) { \
                  printf("Pixel %d [%d %d %d] has ipa %d but is not in " \
                         "bounding box (%d:%d,%d:%d)\n", itea, iteax, iteay,  \
                         iteaz, ipa[itea], ps->lbnd[ 0 ], ps->ubnd[ 0 ], \
                         ps->lbnd[ 1 ], ps->ubnd[ 1 ]); \
               } \
            } \
         } \
      } \
   }





/* A set of macros which invoke the corresponding AST memory management
   functions, but which specify the size of a data element using a cupid
   data type rather than a C data type. The "fun" macro parameter should
   be a quoted string holding the name of the function to be included in 
   any error messages. */

#define cupidStore( mem, ptr, nel, type, fun ) \
   astStore( mem, ptr, nel*cupidSize( type, fun ) );


/* The global CUPID status value. */
/* ------------------------------- */
/* Is has a complicated name so that it will not clash with other external 
   symbols, but we provide a conveniently short macro to refer to it. The
   storage for this variable is allocated in cupid_mon.c. */
extern int *cupid_global_status;
#define status cupid_global_status

/* PixelSet cache used by the ClumpFind algorithm. */
/* ----------------------------------------------- */
/* Pointer to an array holding a list of PixelSet pointers. The PixelSet
   structures in this list have been created previously by cupidCFMakePS
   but have subsequently been freed (using cupidCFFreePS) and are
   currently not being used for anything, and so can be re-issued by 
   cupidCFMakePS, thus avoiding the overhead of frequenct memory
   allocation. */
extern CupidPixelSet **cupid_ps_cache;

/* This is the length of the cupid_ps_cache array. */
extern int cupid_ps_cache_size;

/* Function prototypes */
/* ------------------  */
CupidPixelSet *cupidCFDeletePS( CupidPixelSet * );
CupidPixelSet *cupidCFFreePS( CupidPixelSet *, int *, int );
CupidPixelSet *cupidCFMakePS( int );
double *cupidCFLevels( AstKeyMap *, double, double, double, int * );
double *cupidClumpDesc( int, double *, const char ***, int * );
double cupidConfigD( AstKeyMap *, const char *, double );
double cupidGCChiSq( int, double *, int, int );
double cupidGCModel( int, double *, double *, int, int, int );
float cupidRanVal( int, float[2] );
int *cupidClumpFind( int, int, int *, int *, void *, double *, double, AstKeyMap *, int, int, int * );
int *cupidGaussClumps( int, int, int *, int *, void *, double *, double, AstKeyMap *, int, int, int * );
int *cupidRCA( int *, int *, int, int[ 3 ], int[ 3 ], double, int, int, int, int );
int *cupidRCA2( int *, int *, int, int[ 3 ], int[ 3 ] );
int *cupidReinhold( int, int, int *, int *, void *, double *, double, AstKeyMap *, int, int, int * );
int *cupidFellWalker( int, int, int *, int *, void *, double *, double, AstKeyMap *, int, int, int * );
int cupidCFXtend( CupidPixelSet *, CupidPixelSet *, int *, int, int *, int[3], int, CupidPixelSet ** );
int cupidConfigI( AstKeyMap *, const char *, int );
void cupidCFAddPixel( int *, CupidPixelSet *, int, int[3], double, int, CupidPixelSet * );
void cupidDumpI( int *, int, int *, int * );
void cupidDumpD( double *, int, int *, int * );
void cupidCFMerge( CupidPixelSet *, CupidPixelSet *, int *, int[3], int *, int **, int, CupidPixelSet ** );
void cupidCFNebs( int *, int, int x[], int, int [3], int[3], int, int, int *, int *, int[27], int *, CupidPixelSet ** );
void cupidCFXfer( CupidPixelSet *, CupidPixelSet *, int *, int[3] );
void cupidDatCopy( HDSLoc *, HDSLoc * );
void cupidGCListClump( int, int, double *, double, int *, int, double );
void cupidGCcalcf( int, double *, int *, double * );
void cupidGCcalcg( int, double *, int *, double * );
void cupidGCNdfClump( int *, double, double *, double, int, int *, int *, int, double *, int *, int *, int, int *, AstKeyMap * );
void cupidREdges( int, double *, int *, int *, int, double, double, double, double );
int cupidRFillClumps( int *, int *, int, int, int[ 3 ], int[ 3 ], int );
void cupidStoreClumps( const char *, HDSLoc *, int *, int, int, const char * );
void cupidStoreConfig( HDSLoc *, AstKeyMap * );
void cupidSumClumps( int dtype, int ndim, int *lbnd, int *ubnd, int nel, int *, int, double, float *, void *, char * );
void cupidRFillLine( int *, int *, int, int, int[ 3 ], int[ 3 ], int[ 3 ], int, int, int, int, int *[3] );

void clumps();
void cupidhelp();
void makeclumps();
