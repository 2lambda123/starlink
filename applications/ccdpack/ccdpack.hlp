0 Help

 CCDPACK is a package of programs for reducing CCD data, these help you
 to debias, remove dark current, flatfield, register, resample and
 normalize your data.

 It can help you to reduce your data easily (up and including the
 flatfield stage) without any detailed knowledge of the package (or
 indeed CCD reduction) using an X based GUI.

 For instruction in how to use CCDPACK and more about CCD reduction
 in general refer to SUN/139 (or use the "ccdwww" to view the
 hypertext version).

1 CCDPACK
 CCDPACK is a package for performing the preparative stages of
 CCD reduction. This means the stages before analyses which make
 measurements of astronomical relevance. CCDPACK contains programs
 for removing the detector signature and for registering, resampling,
 normalising and combining imaging data.

 Using CCDPACK it is possible to automatically reduce CCD data (as far
 as the flatfielding stage).  Automated reductions make use of a
 scheduling system that only requires knowledge of the frame types
 (bias, flatfield etc.) and important CCD geometric features.  Using
 this information it can then decided how to reduce your data and then
 run the necessary programs.  Frame types and detector characteristics
 can be obtained from FITS headers, for certain telescopes/CCDs, so
 your job could be reduced to identifying the telescope/detector used
 and the frames you want reducing.

 Automated reductions use an X based GUI specifically designed to help
 novice and/or occasional users of CCD data (although it is expected
 to appeal to the more experienced as well) by providing an easy to
 use interface that limits options to those of immediate concern.  The
 interface features facilities for selecting from a range of known
 detectors, context sensitive help and for defining CCD
 characteristics interactively.  An equivalent command-line interface
 is also available.

 The core of CCDPACK is a suite of programs that have been designed to
 help in processing large amounts of data.  Consequently all CCDPACK
 routines process lists of data and record information using an
 internal log system.

 The instrumental correction programs cover, bias subtraction, defect
 removal, dark or pre-flash correction and flatfielding.  Bias
 correction makes use of bias frames (that are combined to reduce
 noise levels) or just the bias strips alone.

 Inter dataset transformations (registration) is primarily based on
 the determination of inter-dataset linear transformations (offsets,
 scalings, rotation and shear), although more general transformations
 can be used.  Linear transforms can be easily determined using an
 interactive procedure for displaying and selecting image features.
 This reduces the amount of image-feature identification required to a
 sensible minimum.

 If the datasets are just shifted with respect to each other, then the
 registration may be performed using a non-interactive series of
 commands which locate the all the objects in all the frames,
 determine the object-object correspondence across all datasets and
 then derive the transforms.  Alternatively a graphical application is
 provided which allows the selection of the objects to be used, this
 needs an absolute minimum of preparation.

 Data resampling uses the registering transforms, that are stored
 inside the data (no need to remember them).  General transformations
 may also be applied to `rubber-sheet' the data into novel
 configurations.

 Normalisation and combination (often also called mosaicing) is
 provided in a single comprehensive application, which is designed to
 deal with very large datasets.  This uses robust methods for
 determining scale and/or zero point corrections.

 Some of the other features of CCDPACK are the ability to define
 defective areas of CCDs using keyword descriptions in ordinary text
 files, support for many data-combination techniques (mean, median,
 trimmed mean etc.), and the ability to generate and process errors.


1 Command_descriptions

     ASTEXP: Exports AST FrameSet information from NDFs into an external file.

     ASTIMP: Imports AST FrameSet information into NDFs.

     CALCOR: Performs dark or flash count corrections.

     CCDALIGN: Determines general inter-image transformations.

     CCDCLEAR: Clears global parameters.

     CCDEDIT: Edits the CCDPACK extensions of images.

     CCDFORK: Creates a script for executing CCDPACK commands in
              a background process.

     CCDNDFAC: Accesses a list of images, writing their names to a file.

     CCDNOTE: Adds a note to the log file.

     CCDSETUP: Sets up the CCDPACK global parameters.

     CCDSHOW: Displays the current values of any CCDPACK global parameters.

     DEBIAS: Debiasses lists of images either by bias subtraction
             or by interpolation -- applies bad data masks --
             extracts a subset of the data area -- produces variances --
             applies saturation values.

     FINDCENT: Centroids image features.

     FINDOBJ: Locates and centroids image features.

     FINDOFF: Performs pattern-matching between position lists related
              by simple offsets.

     FLATCOR: Performs the flatfield correction on a list of images.

     IDICURS: Reads co-ordinates from an X display (allows zooming
              and panning).

     IMPORT: Imports FITS information into CCDPACK extensions.

     MAKEBIAS: Produces a bias calibration image.

     MAKECAL: Produces calibration images for flash or dark counts.

     MAKEFLAT: Produces a flatfield image.

     MAKEMOS: Makes image mosaics by combining and (optionally) normalising.

     PAIRNDF: Displays and manipulates image pairs to allow easy registration
              (offsets only).

     PLOTLIST: Draws position markers on a graphics display.

     PRESENT: Presents a list of images to CCDPACK.

     REDUCE: Automatic CCD data reduction facility (command-line version).

     REGISTER: Determines transformations between lists of positions.

     SCHEDULE: Schedules an automated CCDPACK reduction.

     TRANLIST: Transforms lists of positions.

     TRANNDF: Transforms (resamples) images.

     WCSREG: Aligns NDFs using multiple frames from their WCS components.

     WCSEDIT: Modifies WCS components of a set of NDFs.

     XREDUCE: Starts the automated CCD data reduction GUI.

1 Changes_this_release

  This is a minor update to CCDPACK. 

  The applications MAKEMOS and MAKEFLAT have been modified to generate
  output variances based on the scatter of the input images.

  A parameter OVERRIDE has been added to FINDOFF. This now stops
  the program if a partial solution to the registration is found.

1 ASTEXP
Exports AST FrameSet information from NDFs into an external file.

Usage:

   ASTEXP in astfile outdomain baseframe fitsid

Description:

   This task exports coordinate system information from a set of NDFs,
   writing it to an AST file.  For each NDF a frameset is written
   containing information about how to map between a selected Base
   frame and the NDF's Current frame.  Each frameset is identified
   by a key which is derived from the NDF itself, and matches keys
   which can be derived from other NDFs to which similar framesets
   ought to apply.  The key should be generated in the same way when
   the AST file is used for importing the mapping information by
   ASTIMP.  Currently the only way these keys can be generated is
   by use of the FITSID parameter.

   Used together, the framesets written out to an AST file can thus
   contain information about the relative positioning of different
   images in a set of related NDFs

   AST files written out by this application can be applied to
   other NDFs of similar origin using the ASTIMP application, so
   that registration information present in the WCS components of
   one set of NDFs (put there for instance by the REGISTER application)
   can be transferred using ASTIMP and ASTEXP to another similar set.
   This "similar set" will typically be one from chips in the same
   mosaic camera instrument.

   A 2-frame frameset is output for each NDF.  The Base frame is one
   selected by the BASEFRAME parameter, and is identical in the
   exported frameset to the one in the original NDF.  The Current frame
   in the exported frameset is the same as the Current frame in the
   original NDF, but may be given a different Domain name by the
   OUTDOMAIN parameter.

   Under normal circumstances, the Current frames of all the input
   NDFs should share the same Domain name, and so should the frames
   identified by the BASEFRAME parameter.   A warning will be issued
   if this is not the case.  Warnings will also be issued if the NDF
   identifiers are not all unique.
2 Parameters
For information on individual parameters, select from the list below:
3 ASTFILE
ASTFILE = LITERAL (Read)
   The name of the file to be written containing the sequence
   of framesets.
3 BASEEPOCH
BASEEPOCH = _DOUBLE (Read)
   If a "Sky Co-ordinate System" specification is supplied (using
   parameter BASEFRAME) for a celestial co-ordinate system, then
   an epoch value is needed to qualify it. This is the epoch at
   which the supplied sky positions were determined. It should be
   given as a decimal years value, with or without decimal places
   ("1996.8" for example). Such values are interpreted as a
   Besselian epoch if less than 1984.0 and as a Julian epoch
   otherwise.
3 BASEFRAME
BASEFRAME = LITERAL (Read)
   This parameter specifies the WCS frame from the NDFs
   relative to which the Current frames will be defined in the
   output AST file.  To be useful, this must specify a frame
   which occurs in all the NDFs in the IN list, and can be
   expected to occur in any NDF to which the AST file will
   later be applied using ASTIMP.  AXIS is a good choice since
   this may be applicable to frames which have been modified,
   for instance by a WCS-aware application like KAPPA's COMPAVE.

   The value of the parameter can be one of the following:

   - A domain name such as SKY, AXIS, PIXEL, etc.

   - An integer value giving the index of the required Frame
     within the WCS component.

   - A "Sky Co-ordinate System" (SCS) value such as EQUAT(J2000)
     (see section "Sky Co-ordinate Systems" in SUN/95).
   A domain name is usually the most suitable choice.

   Unlike the Current frame, the frame selected using this
   parameter is copied to the AST file unmodified; in particular
   it retains the same Domain name.
   [AXIS]
3 IDTYPE
IDTYPE = LITERAL (Read)
   This parameter destermines the form of the ID value which
   distinguishes the framesets from each other in the exported
   AST file.  It may have one of the following values:

      -  FITSID  -- ID is generated from FITS header (see also
                    the FITSID parameter).

      -  INDEX   -- ID is given by an integer as taken from the
                    INDICES parameter.  This normally gives the
                    frameset generated from the N'th NDF in the
                    IN list an ID with index N.
   [INDEX]
3 IN
IN = LITERAL (Read)
   A list of NDFs from which framesets are to be extracted.
   The Current frame of each should normally be the same, and
   should be a frame in which the different NDFs are correctly
   registered.  The NDF names may be specified using wildcards,
   or may be specified using an indirection file (the indirection
   character is "^").
3 INDICES
INDICES( * ) = _INTEGER (Read)
   If IDTYPE is set to INDEX, then this parameter is a list of
   integers with as many elements as there are NDFs accessed by
   the IN parameter.  It gives the sequence of indices N to be
   used for generating the ID values.  Its default value is a
   list with the appropriate number of elements starting
   1,2,3,...  This default will normally be appropriate unless
   the NDFs are being presented in an unusual order, or an order
   different from that in which they are likely to be presented
   to ASTIMP.
   [Dynamic: 1,2,3...]
3 FITSID
FITSID = FILENAME (Read)
   If the IDTYPE parameter has the value FITSID, this parameter
   gives the FITS header keyword whose value distinguishes
   frames with different coordinate system information.
   If any lower case characters are given, they are converted
   to upper case.  This may be a compound name to handle
   hierarchical keywords, in which case it has the form
   keyword1.keyword2 etc.  Each keyword must be no longer than
   8 characters.
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 OUTDOMAIN
OUTDOMAIN = LITERAL (Read)
   This parameter gives the name of the new alignment domain for
   the frames written out to the AST file.  Its value is
   usually not important, but care should be taken that it does
   not clash with other useful domains which already exist in
   the WCS components of the NDFs to which ASTFILE will be applied
   (by the ASTIMP application).  For this reason it is often not a
   good idea to use the same name as the Current domain of the
   NDFs listed in the IN parameter.  A suitable value might be the
   name of the instrument from which the NDFs are derived.

   Note that the frames which are written to the AST file are the
   Current frames of the NDFs supplied; this parameter only gives
   the name that the frames will have in the AST file, and
   consequently the name by which they will be known when the
   WCS information is imported into other NDFs using ASTIMP.

   The name is converted to upper case, and whitespace is removed.
   [CCD_EXPORT]
2 Examples
astexp reg_data* camera.ast idtype=fitsid fitsid=CHIPNUM
       outdomain=camera
   This will save the information about the relative positioning
   of the NDFs 'reg_data*' to the file 'camera.ast', calling the
   alignment domain 'CAMERA'.  The file 'camera.ast' can later be
   used by the ASTIMP application to add the same coordinate
   information to a different set of NDFs from the same instrument.
   Before running this, the NDFs 'reg_data*' should be correctly
   aligned in their Current domain.  CHIPNUM must be the name
   of a FITS header keyword present in the FITS extension of each
   NDF whose value distinguishes the CCDs from each other
   (presumably present in the unreduced data).  The mappings
   between the frame in the 'AXIS' domain of the input NDFs and
   their Current frames are recorded.

astexp "im1,im2,im3" astfile=camera.ast baseframe=PIXEL
       title="Focal plane alignment" accept
   In this case the OUTDOMAIN parameter takes its default value
   of 'CCD_EXPORT', but mappings are between the Current domains
   of the input NDFs and their 'PIXEL' domains.  This would be
   appropriate if these NDFs, or NDFs to which camera.ast will
   be applied in future, might have no valid 'AXIS' domain frames
   in their WCS components.  No suitable FITS header is available
   to distinguish the different types of NDF, so the IDTYPE
   parameter is allowed to assume its default value of INDEX.
   When camera.ast is used for importing framset information,
   the NDFs from the three different chips must be listed in the
   same order as when this command was invoked.  The title of the
   output Current frame will be as given.
2 Notes
AST file format:
   The AST file is designed to be written by ASTEXP and read by
   ASTIMP, and the user does not need to understand its format.
   It is however a text file, and if care is taken it may be
   edited by hand.  Removing entire framesets and modifying ID
   values or domain names may be done fairly easily, but care
   should be taken (see SUN/210) if any more involved changes
   are to be undertaken.  The format of the file is explained
   here.

   The AST file consists of a sequence of framesets.  Each
   frameset has an ID, and contains two frames (a Base frame and
   a Current frame) and a mapping between them.  The domains of
   all the Base frames should normally be the same, and likewise
   for all the Current frames.  For the NDFs to which the file
   will be applied by ASTIMP, their WCS components should contain
   frames in the same domain as the AST file's Base frame.

   The ID of each frameset is used to determine, for each NDF,
   which of the framesets in the file should be applied to it.
   This ID is a string which can assume one of the followin forms:

   -  "FITSID KEY VALUE"
         This will match an NDF if the first FITS header card
         with the keyword KEY has the value VALUE.  If the value
         is of type CHARACTER it must be in single quotes. KEY
         may be compound (of the form keyword1.keyword2 etc) to
         permit reading of hierarchical keywords.

   -  "INDEX N"
         This associates a frameset with an integer N.  Usually
         N will take the values 1,2,3,... for the framesets
         in the file.  Typically the N'th NDF in a list will
         match the one with an ID of "INDEX N".

   Rigorous error checking of the AST file is not performed, so
   that unhelpful modifications to the WCS components of the
   target NDFs may occur if it is not in accordance with these
   requirements.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets or after a break of sometime.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values.
   These global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.
2 Copyright
   Copyright (C) 1999 Central Laboratory of the Research Councils
2 Authors
MBT: Mark Taylor (STARLINK)
2 History
 10-MAR-1999 (MBT):
    Original version.

 19-MAR-1999 (MBT):
    Added the BASEFRAME parameter and tidied up a bit.
1 ASTIMP
Imports AST FrameSet information into NDFs.

Usage:

   ASTIMP in astfile indomain

Description:

   This task reads AST FrameSet information from a suitable file
   and uses it to modify the WCS components of the given NDFs.
   A frame in a new domain is added (the same for each NDF) within
   which a set of NDFs can be aligned.  This alignment may be used to
   assist FINDOFF in registering the images, or as a substititute
   for performing registration by matching objects.  The newly
   added domain is made the Current domain of the WCS components.

   AST files for use by this application are intended to be those
   written by the ASTEXP application, but with care frameset files
   written from other applications or doctored by hand could be used.

   If the WCS component of the NDF has a frame whose Domain has
   the same value as that of the Current frame of the frameset
   being imported, it will be overwritten, and a warning message
   issued.
2 Parameters
For information on individual parameters, select from the list below:
3 ASTFILE
ASTFILE = LITERAL (Read)
   A file containing a sequence of framesets describing the
   relative coordinate systems of NDFs from different sources.

   It is intended that this file should be one written by the
   ASTEXP application when a successful registration is made,
   and the user need not be aware of its internal structure.
   The files are readable text however, and can in principle be
   written by other applications or doctored by hand, if this
   is done with care, and with knowledge of AST objects (SUN/210).
   The format of the file is explained in the Notes section.
3 IN
IN = LITERAL (Read)
   A list of NDF names whose WCS components are to be modified
   according to ASTFILE.  The NDF names may be specified using
   wildcards, or may be specified using an indirection file
   (the indirection character is "^").
3 INDICES
INDICES( * ) = _INTEGER (Read)
   This parameter is a list of integers with as many elements as
   there are NDFs accessed by the IN parameter.  If the frameset
   identifiers are of the type 'INDEX' then it indicates, for
   each NDF, what its index number is.  Thus if only one NDF is
   given in the IN list, and the value of INDICES is [3], then
   the frameset with the identifier 'INDEX 3' will be chosen.
   Its default value is a list with the appropriate number of
   elements starting 1,2,3,...  This default will normally be
   appropriate unless the NDFs are being presented in an unusual
   order, i.e. different from that in which they were presented
   to ASTEXP when generating the AST file.
   [Dynamic: 1,2,3,...]
3 INDOMAIN
INDOMAIN = LITERAL (Read)
   The Domain name to be used for the Current frames of the
   framesets which are imported.  If a null (!) value is given,
   the frames will assume the same name as in the AST file.
   [!]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
2 Examples
astimp data* camera.ast obs1
   This will apply the AST file "camera.ast" to all the NDFs in
   the current directory with names beginning "data".  The file
   "camera.ast" has previously been written using ASTEXP with
   the parameter ASTFILE=camera.ast.  A new frame with a Domain
   called "OBS1" is added to the WCS component of each NDF.

astimp "data3,data4" instrum.ast obs1 indices=[3,4]
   This imports frameset information from the AST file instrum.ast
   which was written by ASTEXP with the IDTYPE parameter set to
   INDEX.  In this case NDFs of only the third and fourth types
   described in that file are being modified.

astimp astfile=instrum.ast in=! logto=terminal accept
   This will simply report on the framesets contained within
   the AST file "instrum.ast", writing the ID of each to the
   terminal only.
2 Notes
AST file format:
   The AST file is designed to be written by ASTEXP and read by
   ASTIMP, and the user does not need to understand its format.
   It is however a text file, and if care is taken it may be
   edited by hand.  Removing entire framesets and modifying ID
   values or domain names may be done fairly easily, but care
   should be taken (see SUN/210) if any more involved changes
   are to be undertaken.  The format of the file is explained
   here.

   The AST file consists of a sequence of framesets.  Each
   frameset has an ID, and contains two frames (a Base frame and
   a Current frame) and a mapping between them.  The domains of
   all the Base frames should normally be the same, and likewise
   for all the Current frames.  For the NDFs to which the file
   will be applied by ASTIMP, their WCS components should contain
   frames in the same domain as the AST file's Base frame.

   The ID of each frameset is used to determine, for each NDF,
   which of the framesets in the file should be applied to it.
   This ID is a string which can assume one of the followin forms:

   -  "FITSID KEY VALUE"
         This will match an NDF if the first FITS header card
         with the keyword KEY has the value VALUE.  If the value
         is of type CHARACTER it must be in single quotes. KEY
         may be compound (of the form keyword1.keyword2 etc) to
         permit reading of hierarchical keywords.

   -  "INDEX N"
         This associates a frameset with an integer N.  Usually
         N will take the values 1,2,3,... for the framesets
         in the file.  Typically the N'th NDF in a list will
         match the one with an ID of "INDEX N".

   Rigorous error checking of the AST file is not performed, so
   that unhelpful modifications to the WCS components of the
   target NDFs may occur if it is not in accordance with these
   requirements.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets or after a break of sometime.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values.
   These global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.
2 Copyright
   Copyright (C) 1999 Central Laboratory of the Research Councils
2 Authors
MBT: Mark Taylor (STARLINK)
2 History
 05-MAR-1999 (MBT):
    Original version.
1 CALCOR
Subtracts a scaled dark or flash calibration image from a series of
images.

Usage:

   calcor in out cal expose [preserve] [title]

Description:

   CALCOR subtracts dark or flash calibration data from a series of
   bias-corrected images. The calibration data are multiplied by a
   constant before subtraction, so that calibration data which have
   been normalised to counts per unit of time per pixel, can be
   scaled to the "exposure" times suitable for correcting the input
   data. If the calibration frame data levels are already correct
   to perform the necessary correction then the data should be
   scaled by a factor of one. In addition to subtracting the
   calibration data CALCOR also processes saturated values
   protecting them from modification. This protection is necessary
   if the saturated pixels are not to become differentiated.
2 Parameters
For information on individual parameters, select from the list below:
3 CAL
CAL = LITERAL (Read)
   Name of the image containing the calibration data, this would
   normally be the output from MAKECAL. The data should be
   normalised to one exposure unit. It is expected that the
   calibration image contains dark or flash exposure CCD data
   which have been bias corrected.

   The name of this file may be specified using indirection
   through a file.
   [Global calibration image]
3 EXPOSE
EXPOSE = LITERAL (Read)
   A list of (comma separated) values specifying the numbers by
   which the calibration data need to be multiplied before
   subtraction from the input data. These are the "exposure"
   factors for the dark counts expected in the input data or the
   flash exposure times. If the calibration data have been
   normalised to reflect the number of counts per second of time,
   then this is the number of seconds of flash exposure or the
   number of seconds duration between readouts, if it is a dark
   counts image.  If the calibration image has been produced so
   that the correct levels are already present, then these values
   should be returned as one. A quick method of specifying that
   all the images have the same "exposure" factors is to return a
   single value, this will then be used for all input images.

   The given values must be in the same order as the input images.
   Indirection through an ASCII file may be used.  If more than
   one line is required to enter the information then a
   continuation line may be requested by adding "-" to the end of
   the last value.
3 IN
IN = LITERAL (Read)
   Names of the images to be processed. The calibration data will be
   scaled and subtracted from these.  The image names should be
   separated by commas and may include wildcards.

   NOTE the use of wildcards with this program is NOT recommended
   unless the input images all have the same calibration exposure
   factors. The processing order of any wildcarded images cannot
   be guaranteed.
3 KEEPIN
KEEPIN = _LOGICAL (Read)
   Whether to keep (i.e. not delete) the input images (parameter IN)
   or not. Deleting the input images has the advantage of saving
   disk space, but should probably only be used if this program
   is part of a sequence of commands and the intermediary data
   produced by it are not important.

   The calibration master frame (parameter CAL) is never deleted.

   The default for this parameter is TRUE and this cannot be
   overridden except by assignment on the command line or in
   response to a forced prompt.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 OUT
OUT = LITERAL (Read)
   Names of the output images. These may be specified as list of
   comma separated names, using indirection if required, OR,
   as a single modification element (of the input names).
   The simplest modification element is the asterisk "*" which
   means call each of the output images the same name as the
   corresponding input images. So,
      IN > *
      OUT > *
   signifies that all the images in the current directory should be
   used and the output images should have the same names.

   Other types of modification can also occur, such as,
      OUT > tmp_*
   which means call the output images the same as the input images but
   put tmp_ in front of the names. Replacement of a specified
   string with another in the output file names can also be used,
      OUT > tmp_*|debias|flattened|
   this replaces the string debias with flattened in any of the
   output names tmp_*.

   NOTE the use of wildcards with this program is not recommended
   unless the input images all have the same calibration exposure
   factors. The order of processing of any wildcarded images cannot
   be guaranteed.
3 PRESERVE
PRESERVE = _LOGICAL (Read)
   If the input data type is to be preserved and used for
   processing then this parameter should be set TRUE.
   If this parameter is set FALSE then the input data will be
   processed and returned in a suitable floating point
   representation. This option is useful if the output data will
   have a significant number of BAD values due to numeric errors
   (over or under flow), or if unacceptable loss of precision
   will occur if the data are processed in their initial data type
   (due to rounding errors).

   Note if a global value for this parameter has been set, using
   CCDSETUP, then this will be used.
   [TRUE]
3 SATURATION
SATURATION = _DOUBLE (Read)
   The data saturation value, if it has been applied. See SETSAT.
   [1.0D6]
3 SETSAT
SETSAT = _LOGICAL (Read)
   If the input data have had a saturation value applied then
   this parameter should be given as TRUE. If the input data
   have been processed within CCDPACK then the saturation value
   will have been stored within the CCDPACK extension, if this
   is so then this value will be used. Note that data with
   different saturation properties (i.e. values) which have not
   been set within CCDPACK will require separate processing
   (i.e. in groups with the same properties -- see notes).
   [FALSE]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output images.
   [Output from CALCOR].
2 Examples
calcor frame1 frame2 calibration 250
   This example runs CALCOR in its most basic mode. The input data
   in image frame1 has the data in image calibration subtracted, after
   multiplying by 250. The resultant data is written to image
   frame2. Note that if saturation values have been applied to the
   data in frame1 within CCDPACK, then this will be handled
   automatically. The output data will be of the same type as the
   input data.

calcor in=^frames.dat out='*_darksub' cal=dark_master
       expose=^dark_exposures
   In this example a list of images are sequentially processed. The
   list of image names is stored in the file frames.dat. The output
   images are named after the corresponding input image with the
   characters _darksub appended. The dark times for each input
   frame are read from the file dark_exposures. This is the
   recommended method for processing lists of input images.

calcor l1551_f11 l1551_f11_ds dark_master 1.0 preserve=false
       logto=both logfile=l1551_darkcor.log
       title=dark_corrected_data
   This example follows a similar theme to the first example,
   except that the output data type is now _REAL or _DOUBLE,
   depending on the precision required to process the data. The
   calibration correction data are assumed to have the right
   exposure factor. The output image is given the title
   "dark_corrected_data" and the parameters used by CALCOR are
   stored in the logfile l1551_darkcor.log.

calcor in=ngc4151r_f1 cal=flash_master out=ngc4151r_f1_dc
       expose=310.0 setsat saturation=32767
   In this example a saturation value external to CCDPACK has
   been applied to the input image. This is indicated by setting
   SETSAT TRUE and by supplying the saturation value. Values
   which are greater than or equal to the saturation value are
   left unmodified by the calibration frame subtraction. This may
   leave the saturated values "displaced" from the local values,
   causing a discontinuity in the local isophotes, but is the
   only method by which the saturated pixels may still be
   readily identified after the subtraction of the calibration
   frame.
2 Notes
- If any of the input data have had their saturation values set
  by applications not within CCDPACK, then this routine will
  require the saturation value which has been used if the values
  are to be propagated properly. If more than one saturation
  value has been used then the input frames will need to be
  processed singly. This is because CALCOR only uses one
  saturation value per input group. If the saturation values
  have been set within CCDPACK (by DEBIAS) these will be
  processed correctly and may be different.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - TITLE   -- always "Output from CALCOR"

      - KEEPIN  -- always TRUE

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets/different devices, or after a break of sometime.
   The intrinsic default behaviour of the application may be
   restored by using the RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE, PRESERVE and CAL) have
   global values. These global values will always take precedence,
   except when an assignment is made on the command line.  In general
   global values may be set and reset using the CCDSETUP and
   CCDCLEAR commands, however, the CAL parameter may only be set by
   a run of the application MAKECAL.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 30-MAY-1991 (PDRAPER):
    Original Version.

 5-JAN-1994 (PDRAPER):
    Automated CCDPACK extensions added.

 2-FEB-1994 (PDRAPER):
    Added ability to delete input NDFs.

 19-JUL-1995 (PDRAPER):
    Removed AIF_ calls.
2 Implementation_Status
   - Supports processing of all non-complex numeric types.
     BAD pixels are processed as are all NDF components.
1 CCDALIGN
Interactive procedure to aid the alignment of images.

Usage:

   ccdalign

Description:

   This procedure aids the registration of images which are not
   related by simple offsets (see FINDOFF and PAIRNDF if they are).
   It also has the capability of dealing with groups of images which
   are almost registered (frames which have not been moved on the
   sky) saving effort in re-identification of image features.

   The basic method used is to access groups of images (or a series
   of single images if all are moved between exposures) and an
   optional reference image. The first image of the first group or the
   reference image is then displayed and a cursor application is used
   to record the positions of centroidable image features. The
   first images of all the other groups are then displayed and you
   are invited to identify the image features in the order which
   corresponds to that used for the reference image. Missing image
   features are identified as off the currently displayed image (so
   the centroid routine will fail to find them). The reference set
   of image features may be extended by identification after the
   last reference feature has been marked.

   After centroiding you are then given the option to stop. If
   you decide to then you will have labelled position lists to use
   in the other CCDPACK routines (the labelled positions will be
   called IMAGE_NAME.acc). If you chose the option to continue then
   a full registration of the images will be attempted. This may only
   be performed for "linear" transformations.

   After choosing a transformation type the procedure will then go on
   to calculate a transformation set between all the images, this is
   then used (with the extended reference set from REGISTER) to
   approximate the position of all possible image features, these are
   then located by centroiding and a final registration of all images
   is performed. The resultant images then have associated lists of
   labelled positions and TRANSFORM structures which may be used to
   transform other position lists or when resampling the data.
2 Parameters
For information on individual parameters, select from the list below:
3 NONE
NONE
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 10-JUN-1993 (PDRAPER):
    Original version.

 18-APR-1995 (PDRAPER):
    Added ability to specify percentile range.
1 CCDCLEAR
Clears CCDPACK global parameters.

Usage:

   ccdclear byname

Description:

   CCDCLEAR removes CCDPACK specific parameters from the globals
   file. It has the capability of removing all the CCDPACK global
   parameters or just a named subset.
2 Parameters
For information on individual parameters, select from the list below:
3 BYNAME
BYNAME = _LOGICAL (Read)
   This parameter controls how the parameters are cleared.
   If FALSE then all CCDPACK global parameters will be cleared.
   If TRUE then a list of the names of the global parameters to
   clear is requested (see parameter NAMES).
   [FALSE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 NAMES
NAMES = LITERAL (Read)
   Only used when BYNAME is TRUE. The response to this parameter
   should be a comma separated list of the names of the CCDPACK
   parameters which are to be cleared. Valid names are:

      ADC, BIAS, BOUNDS, CAL, DEFERRED, DIRECTION, EXTENT, FLAT,
      GENVAR, MASK, NDFNAMES, PRESERVE, RNOISE, SATURATE,
      SATURATION, SETSAT

   These correspond to the parameter names used in CCDSETUP (and
   in the other applications which access these parameters).

   The names may be abbreviated to unique values.
2 Examples
ccdclear
   Invoking CCDCLEAR without any arguments will clear all the
   CCDPACK globals, unless the BYNAME=TRUE option has been used in
   a previous invocation.

ccdclear false
   Using this invocation will definitely clear all the CCDPACK
   global parameters.

ccdclear byname names='"adc,rnoise,direc"'
   This example shows how to clear specific CCDPACK global
   parameters. The NAMES need only be unique amongst the
   possibilities so could have been abbreviated to "a,r,di".
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application. The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE ) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   using the CCDSETUP command.
2 Deficiencies
   - Relies on subpar routine call to get global file. Uses direct
     HDS calls to erase components.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 5-JUL-1991 (PDRAPER):
    Original version.

 20-JUL-1993 (PDRAPER):
    Added capability to clear specific names. Removed necessity
    for specifying the global file name.

 28-JAN-1994 (PDRAPER):
    Added saturation parameters.

 17-AUG-1995 (PDRAPER):
    Increased size of NAME buffer to DAT__SZNAM. This removes the
    possibility of comparing non-existent elements.
1 CCDEDIT
Edits CCDPACK image extensions.

Usage:

   ccdedit mode in

Description:

   This routine provides the ability to edit the contents the
   CCDPACK extensions of a list of images. The following modes
   of operation are available:

     -    associate position list(s)

     -    erase extension items

     -    add a transform structure

     -    invert a transform structure.

   The associate list facility allows the names of position lists to
   be added to image extensions, these lists are then accessed when the
   image names are given in response to an INLIST prompt (provided the
   application NDFNAMES parameter is TRUE). This option also allows a
   single position list to be associated with a range of images.

   Erase extension items is a safe way of deleting primitives and
   structures from an NDF CCDPACK extension and removes the need to
   remember the exact object name and path.

   Add transform allows arbitrary transform structures to be added.
   The transform may be generated from linear transform
   coefficients, copied from a existing transform structure or may
   be specified as an expression. Forward and inverse transformations
   are required.

   Invert transform inverts the sense of the transformation.
2 Parameters
For information on individual parameters, select from the list below:
3 CLASS
CLASS( ) = LITERAL (Read)
   If CLASSIFY is TRUE then a list of classifications that
   describe the properties of the transformation (parameters
   XFOR, YFOR, XINV and YINV) should be given. This is
   optional, but the information can be used to make other
   applications run more efficiently.  Valid values are:

      - LINEAR        -- Linear and preserves straight lines.

      - INDEPENDENT   -- Preserves the independence of the axes.

      - DIAGONAL      -- Preserves the axes themselves.

      - ISOTROPIC     -- Preserves angles and shapes.

      - POSITIVE_DET  -- A component of reflection is absent.

      - NEGATIVE_DET  -- A component of reflection is present.

      - CONSTANT_DET  -- The scale factor is constant.

      - UNIT_DET      -- Areas (or volumes etc.) are preserved.

   See SUN/61 Appendix B for more details of transformation
   classification and a table of the classifications of common
   mappings.
3 CLASSIFY
CLASSIFY = _LOGICAL (Read)
   If TRTYPE="EXPRES" is chosen then this parameter decides
   whether or not a classification of the transformation
   using parameters XFOR, YFOR, XINV and YINV will be given.
   Classification is optional, but you should note that the
   information can be used to make other applications run more
   efficiently, and the lack of a classification may stop certain
   types of operation. See SUN/61 appendix B for details. Linear
   transformations are classified by this routine using the
   FITTYPE parameter.
   [FALSE]
3 FA-FZ
FA-FZ = LITERAL (Read)
   These parameters supply the values of "sub-expressions" used in
   the expressions XFOR, YFOR, XINV and YINV. These parameters
   should be used when repeated expressions are present in complex
   transformations. Sub-expressions may contain references to
   other sub-expressions and constants (PA-PZ).
   An example of using sub-expressions is:
      XFOR > 'XX=PA*ASIND(FA/PA)*X/FA'
      YFOR > 'YY=PA*ASIND(FA/PA)*Y/FA'
      XINV > 'X=PA*SIND(FB/PA)*XX/FB'
      YINV > 'Y=PA*SIND(FB/PA)*YY/FB'
      FA > SQRT(X*X+Y*Y)
      PA > 100D0
      FB > SQRT(XX*XX+YY*YY)
3 FITTYPE
FITTYPE = _INTEGER (Read)
   The type of fit specified by coefficients supplied via the
   TR parameter. Appropriate values are.

      - 1 -- shift of origin

      - 2 -- shift of origin and rotation

      - 3 -- shift of origin and magnification

      - 4 -- shift of origin, rotation and magnification
             (solid body)

      - 5 -- a full six parameter fit

   The value of this parameter is used to classify the
   transformation (see the CLASS parameter).
   [5]
3 IN
IN = image (Read)
   A list specifying the names of the images whose CCDPACK
   extensions are to be modified. The image names should be
   separated by commas and may include wildcards.
3 INLIST
INLIST = LITERAL (Read)
   A list specifying one or more position list names (only used
   if MODE = "ALIST" ). If a single name is given then this
   position list will be associated with all the input images. If
   a list of names is given then there should be as many names
   as input images. The order of the input image names is shown so
   that the correct correspondence may be achieved.

   Position list names may NOT include wildcards. So a comma
   separated list of explicit names should be used and/or the
   names should be read from indirection files (the indirection
   indicator is "^").
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MODE
MODE = LITERAL (Read)
   The mode of operation. Can be one of

      - ALIST

      - ERASE

      - TRANSFORM

      - INVERT

   The "ALIST" option "associates" a position list(s) with images
   (this sets the "CURRENT_LIST" item).  This is useful when
   importing position lists generated externally to CCDPACK.

   The "ERASE" option removes a named item from NDF extensions.
   Two possible items are "CURRENT_LIST" and "TRANSFORM".

   The "TRANSFORM" option allows the generation or import of
   transforms into image extensions. Transforms from other images
   may be copied. Linear transforms may be generated from the (6)
   coefficients. General transforms may be specified by
   algebraic-like expressions containing the functions allowed by
   the TRANSFORM package (SUN/61). If you intend to do this, see
   the related parameters (XFOR, YFOR, XINV, YINV, FA-FZ, PA-PZ,
   CLASSIFY and CLASS) and the examples section.

   The "INVERT" option inverts the sense of transformations in
   the images.
   [ALIST]
3 NAME
NAME = LITERAL (Read)
   If MODE = "ERASE" is chosen then the value of this parameter
   names the CCDPACK extension item of the input NDFs which is to
   be erased. Typical items are "CURRENT_LIST" and "TRANSFORM".
3 PA-PZ
PA-PZ = _DOUBLE (Read)
   These parameters supply the values of constants used in the
   expressions XFOR, YFOR, XINV and YINV. Using parameters allows
   the substitution of repeated constants (with extended
   precisions?) using one reference. It also allows easy
   modification of parameterised expressions (expressions say
   with an adjustable centre) provided the application has not
   been used in the interim. The parameter PI has a default
   value of 3.14159265359D0. An example of using parameters is:
      XFOR > 'XX=SQRT(FX*FX+FY*FY)'
      YFOR > 'YY=ATAN2D(-FY,FX)'
      XINV > 'X=XX*SIND(YY)+PA'
      YINV > 'Y=-YY*COSD(XX)+PB'
      FX > X-PA
      FY > Y-PB
      PA > X-centre-value
      PB > Y-centre-value
   This maps (X,Y) to (R,THETA) about a specified centre.
3 TRANSFORM
TRANSFORM = TRN (Read)
   If TRTYPE="STRUCT" is chosen then this parameter is used to
   access the HDS object which contains a transform structure
   to copy into the input images. The standard place to store a
   transform structure (in CCDPACK) is

       - NDF_NAME.MORE.CCDPACK.TRANSFORM
3 TR
TR( 6 ) = _DOUBLE (Read)
   If TRTYPE="COEFF" is chosen then the values of this parameter
   are the 6 coefficients of a linear transformation of the
   type.
         X' = PA + PB*X + PC*Y
         Y' = PD + PE*X + PF*Y
   The default is the identity transformation.
   [0,1,0,0,0,1] [PA,PB,PC,PD,PE,PF]
3 TRTYPE
TRTYPE = LITERAL (Read)
   If MODE = "TRANSFORM" is selected then this parameter specifies
   the type of transform which will be supplied. Valid returns are

      - COEFF

      - EXPRES

      - STRUCT

   If "COEFF" is chosen then the transform will be generated from
   the 6 coefficients of the equations.
      X' = PA + PB*X + PC*Y
      Y' = PD + PE*X + PF*Y
   supplied in the order PA,PB,PC,PD,PE,PF.

   If "STRUCT" is chosen then an existing transformation structure
   will be copied into the extensions of the images. Note that
   no checking of the transform's validity will be made.

   If "EXPRES" is chosen then the transformation will be specified
   using algebraic-like statements of the type.
      XFOR > 'XX=PA+PC*X'
      YFOR > 'YY=PD+PE*Y'
      XINV > 'X=(XX-PA)/PC'
      YINV > 'Y=(YY-PD)/PE'

   The values of PA-PZ are accessed through the PA-PZ parameters.
   The PA-PZ's are reserved for constants (FA-FZ are also
   reserved for repeated expressions). This example allows
   independent offsets and scales in X and Y. The inverse
   transformation must be supplied.
   [COEFF]
3 XFOR
XFOR = LITERAL (Read)
   If TRTYPE="EXPRES" is chosen then this parameter's value is
   the transformation that maps to the new X coordinate. The
   expression can contain constants, arithmetic operators
   (+,-,/,*,**) and the functions described in SUN/61
   (SIN,COS,TAN, etc.).

   Constants may be specified using the special tokens PA-PZ.
   Prompts for the values for these tokens will then be made (this
   provides a mechanism for parameterising functions allowing
   trivial value changes). Sub-expressions which occur in many
   places may also be specified using the special tokens FA-FZ.
   These are prompted for and placed into the main expression.
   Sub-expressions may contain references to constants and other
   sub-expressions. An example expression is:
      XFOR > 'XX=PA*ASIND(FA/PA)*X/FA'
   Note the single quotes. They are necessary to protect the
   equals sign.
3 XINV
XINV = LITERAL (Read)
   If TRTYPE="EXPRES" is chosen then this parameter's value is
   the transformation that maps to the old X coordinate - the
   inverse transformation of XFOR. The expression can contain
   constants, arithmetic operators (+,-,/,*,**) and the
   functions described in SUN/61 (SIN,COS,TAN, etc.).

   Constants may be specified using the special tokens PA-PZ
   prompts for values for these tokens will then be made (this
   provides a mechanism for parameterising functions allowing
   trivial values changes). Sub-expressions which occur in many
   places may also be specified using the special tokens FA-FZ.
   These are prompted for and placed into the main expression.
   Sub-expressions may contain references to constants and other
   sub-expressions. An example expression is:
      XINV > 'X=PA*SIND(FB/PA)*XX/FB'
   Note the single quotes. They are necessary to protect the
   equals sign.
3 YFOR
YFOR = LITERAL (Read)
   If TRTYPE="EXPRES" is chosen then this parameter's value is
   the transformation that maps to the new Y coordinate. The
   expression can contain constants, arithmetic operators
   (+,-,/,*,**) and the functions described in SUN/61
   (SIN,COS,TAN, etc.).

   Constants may be specified using the special tokens PA-PZ.
   Prompts for the values of these tokens will then be made (this
   provides a mechanism for parameterising functions allowing
   trivial value changes). Sub-expressions which occur in many
   places may also be specified using the special tokens FA-FZ.
   These are prompted for and placed into the main expression.
   Sub-expressions may contain references to constants and other
   sub-expressions. An example expression is:
      YFOR > 'YY=PA*ASIND(FA/PA)*Y/FA'
   Note the single quotes. They are necessary to protect the
   equals sign.
3 YINV
YINV = LITERAL (Read)
   If TRTYPE="EXPRES" is chosen then this parameter's value is
   the transformation that maps to the old Y coordinate - the
   inverse transformation of YFOR. The expression can contain
   constants, arithmetic operators (+,-,/,*,**) and the
   functions described in SUN/61 (SIN,COS,TAN, etc.).

   Constants may be specified using the special tokens PA-PZ.
   Prompts for the values of these tokens will then be made (this
   provides a mechanism for parameterising functions allowing
   trivial value changes). Sub-expressions which occur in many
   places may also be specified using the special tokens FA-FZ.
   These are prompted for and placed into the main expression.
   Sub-expressions may contain references to constants and other
   sub-expressions. An example expression is:
      YINV > 'Y=PA*SIND(FB/PA)*YY/FB'
   Note the single quotes. They are necessary to protect the
   equals sign.
2 Examples
ccdedit mode=alist in='*' inlist=reference_set
   This example shows how to "associate" a single position list
   called reference_set with all the images in the current
   directory.

ccdedit mode=alist in='"image1,image2,image3"'
        inlist='"pos1.dat,pos2.dat,pos3.dat"'
   In this example the image image1 is associated with pos1.dat, the
   image image2 with pos2.dat and the image image3 with pos3.dat.

ccdedit mode=erase in=image_with_bad_transform name=transform
   In this example the TRANSFORM structure in the CCDPACK
   extension of the image image_with_bad_transform is removed.

ccdedit mode=invert in='*'
   In this example all the images in the current directory have
   their transforms inverted.

ccdedit mode=transform trtype=coeff in=shift_this_image
        tr='[10.25,1,0,-101.1,0,1]' fittype=1
   In this example the image shift_this_image has a transform
   structure written into its CCDPACK extension which specifies a
   shift of 10.25 in X and a negative shift of 101.1 in Y.
   The shift is specified using the appropriate linear
   transformation coefficients [XSHIFT,1,0,YSHIFT,0,1] and is
   correctly classified as a fittype of 1.

ccdedit mode=transform trtype=coeff in=rotate_this_image
        tr='[0,0.965926,-0.258819,0,0.258819,0.965926]' fittype=2
   In this example the image rotate_this_image has a transform
   structure written into its CCDPACK extension which specifies a
   rotation by 15 degrees about the [0,0] position. The rotation
   is specified using the appropriate linear transformation
   coefficients [0,cos,-sin,0,sin,cos].

ccdedit mode=transform trtype=struct in=need_transform
        transform=trn.more.ccdpack.transform
   In this example the transformation structure
   trn.more.ccdpack.transform is copied to the image need_transform.

ccdedit mode=transform trtype=expres in=map2gls
        xfor='"xx=x*cosd(y)"' yfor='"yy=y"' xinv='"x=xx/cosd(yy)"'
        yinv='"y=yy"'
   In this example the transform structure to be added to image
   map2gls is defined as an algebraic expression. The mapping used
   is a Sanson-Flamstead sinusoidal with X and Y in degrees.

ccdedit mode=transform trtype=express in=map2merc
        xfor='"x=xx"'
        yfor='"y=180/pi*log(tand((90d0+min(pa,max(-pa,yy))/2d0)))"'
        xinv='"xx=x"'
        yinv='"2d0*(atand(exp(y*pi/180d0)))-90d0"'
        pa=89.9999d0
   In this example a Mercator-like transform structure is added to
   the image map2merc. The arguments to TAND are limited to the
   range +/- 89.9999D) to stop blow-up. The parameter PI is
   defaulted to 3.14159265359D0.
2 Notes
-  NDF extension items.
   All NDF extension items dealt with by this routine are in the
   structure .MORE.CCDPACK.

- When using the MODE=ALIST option the item CURRENT_LIST in the
  CCDPACK extension of the input images is set to the name of the
  input list(s). Such image items may be used by other CCDPACK
  position list processing routines to automatically access
  these lists.

- When using the MODE=ERASE option the name of the item to be
  erase is the name of the structure or primitive after the
  XXX.MORE.CCDPACK has been removed.

- Transforms are stored in the item .MORE.CCDPACK.TRANSFORM .
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   after a break of sometime.  The intrinsic default behaviour of
   the application may be restored by using the RESET keyword on the
   command line.

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
PDRAPER: Peter Draper (STARLINK - Durham University)
2 History
 14-JUN-1993 (PDRAPER):
    Original version.

 19-JUL-1995 (PDRAPER):
    Removed AIF calls.
1 CCDFORK
   Creates a script for executing CCDPACK commands in a background
   process.

Usage:

   ccdfork input_script [output_script] [directory]

Description:

   This procedure performs any additional work that is required
   to safely execute a set of CCDPACK commands in a background job.

   The input to it is a file that contains just the CCDPACK commands
   that you want to execute. This procedure then writes another
   script that re-initializes CCDPACK and isolates any existing
   program parameters from your interactive processes.

   The output script should be executed as a nice priority
   background job (see the examples section).
2 Parameters
For information on individual parameters, select from the list below:
3 $1
$1 = filename (read)
   The name of the script file which contains the
   CCDPACK commands which are to be run in the background.
3 $2
$2 = filename (write)
   The name of the output script which will re-establish
   the current ADAM context and execute your command
   file. [ccdpack_fork]
3 $3
$3 = directory (write)
   The name of a directory in which to store the current
   ADAM context. If no value is given then a sub-directory
   of the current ADAM_USER parent is created.
   [adam_unique_string]
2 Examples
ccdfork ccdred
nice ccdpack_fork &
   In this example ccdfork saves the current ADAM parameter
   files and writes a script file named ccdpack_fork which
   will enable the ccdred script file to execute in the
   background. The output script ccdpack_fork is then nice'd
   into the background.

ccdfork ccdred batch1
nice batch1 &
   As above except that the output script is now called
   batch1.

ccdfork ccdred batch2 /scratch/user/batch2
   As above except the output script is now called batch2
   and the ADAM parameter files are written to the directory
   /scratch/user/batch2.
2 Note
   - C shell specific.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 30-APR-1992 (PDRAPER):
    Original Version.

 12-AUG-1993 (PDRAPER):
    Changed to test for ccdpack definition.
1 CCDNDFAC
Accesses a list of images and writes their names to a file.

Usage:

   ccdndfac namelist echo

Description:

   This routine accesses a list of images and writes their names to a
   text file. It is intended to be used as an aid to producing
   procedures which require the facilities of image list access used
   in CCDPACK. For this reason the usual application introductory
   message is suppressed. The names of the images may be written
   out to the terminal as an aid to memory. If no images are accessed
   then the output file will not be created, testing for the
   existence of this file is a platform independent way of
   determining if the invocation has been successful.
2 Parameters
For information on individual parameters, select from the list below:
3 ECHO
ECHO = _LOGICAL (Read)
   If TRUE then the names of the images will be written to the
   terminal unless there is only one input image.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 IN
IN = LITERAL (Read)
   A list of image names. The image names should be separated by commas
   and may include wildcards.
   [!]
3 MAXNDF
MAXNDF = _INTEGER (Read)
   The maximum number of images which should be accessed. If a null
   return "!" is given for this parameter then the normal CCDPACK
   limit will be applied.
   [!]
3 NAMELIST
NAMELIST = LITERAL (Read)
   The name of the output file to contain the names of the
   accessed images.
   [CCDNDFAC.LIS]
2 Examples
ccdndfac image_name_list true
   In this example the list of image names is written to
   image_name_list and the image names are echoed to the terminal. No
   constraint is placed on the number of images accessed (other than
   the normal CCDPACK limit).

ccdndfac image_name true maxndf=1
   In this example only a single image name is accessed. The name is
   not echoed to the terminal (even though echo is set TRUE).
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application. The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line (you may well want to do this
   when using the application from a procedure).

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line. Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
PDRAPER: Peter Draper (STARLINK - Durham University)
2 History
 10-JUN-1993 (PDRAPER):
    Original version.
1 CCDNOTE
Adds a note to the current CCDPACK log file.

Usage:

   ccdnote note

Description:

   This routine allows you to add a note to the CCDPACK log
   file. Notes are intended to cover such things as the object name,
   the person responsible for the data processing, etc. Notes can
   span more than one line if earlier lines are terminated by the
   continuation character '-'.
2 Parameters
For information on individual parameters, select from the list below:
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter, then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 NOTE
NOTE = LITERAL (Read)
   The comment to enter into the CCDPACK logfile. This may be
   continued on to other lines by using the continuation
   character "-". Input can be terminated either by not ending a
   line with a continuation character, or by use of the ! null
   character at the beginning of the line.
2 Examples
ccdnote '"Start of the NGC2261 CCD reduction - R filter"'
ccdnote '"Reduction performed by Tel. E. Scope"'
   In this example a record of the object and observer is entered
   into the current log file.
2 Behaviour_of_parameters
   The NOTE parameter has no default and retains no information
   about any previous values.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 11-JUL-1991 (PDRAPER):
    Original version.
1 CCDSETUP
Sets the CCDPACK global parameters.

Usage:

   ccdsetup logto=? logfile=? adc=? bounds=? rnoise=? mask=?
            direction=? deferred=? extent=? preserve=? genvar=?
            ndfnames=?

Description:

   CCDSETUP sets the values of a sequence of global parameters to be
   used within CCDPACK. The values of these parameters, when set,
   will override those of any others, except values entered on the
   command line. This routine should be used before starting a
   CCDPACK reduction sequence. The parameters are primarily
   concerned with values to do with the CCD device characteristics,
   items such as:

     - The ADC factor which converts the ADUs of the input data
       frames into detected electrons, for which Poissonian
       statistics are valid

     - The bias strip placements

     - The readout direction

     - The typical readout noise

     - The useful CCD area

     - The definition of the BAD areas of the chip

   The routine also initialises the CCDPACK logging system.

   All parameters may be returned as ! (the parameter-system null
   value) this indicates that the current value is to be left
   unchanged if one exists (this will be shown as the default and
   can also be accepted by pressing return) or that a value is not
   to be assigned for this global parameter. If a value is not
   assigned it will be defaulted or prompted as appropriate when
   other CCDPACK applications are run.

   The removal of global parameters is performed by the CCDCLEAR
   application.
2 Parameters
For information on individual parameters, select from the list below:
3 ADC
ADC = _DOUBLE (Read and Write)
   The Analogue-to-Digital units Conversion factor (ADC). CCD
   readout values are usually given in Analogue-to-Digital Units
   (ADUs). The ADC factor is the value which converts ADUs back
   to the number of electrons which were present in each pixel in
   the CCD after the integration had finished. This value is
   required to allow proper estimates of the inherent noise
   associated with each readout value. CCDPACK makes these
   estimates and stores them in the variance component of the
   final images. Not supplying a value for this parameter may be a
   valid response if variances are not to be generated by DEBIAS.
   [!]
3 BOUNDS
BOUNDS( 2 or 4 ) = _INTEGER (Read and Write)
   The bounds of the bias strips of the CCD. These should be in
   pixel indices (see notes) and be given in pairs up to a limit
   of 2. The sense of the bounds is along the readout direction.
   For example, 2,16,400,416 means that the bias strips are
   located between pixels 2 to 16 and 400 to 416 inclusive along
   the readout direction. The bias strips are used to either
   offset the bias frame or as an estimate of the bias which is to
   be interpolated across the frame in some way (see DEBIAS). Not
   supplying values for this parameter may be a valid response if
   the bias frame is to be directly subtracted from the data
   without offsetting.
   [!]
3 DEFERRED
DEFERRED = _DOUBLE (Read and Write)
   The deferred charge value. Often known as the "fat" or "skinny"
   zero (just for confusion). This is actually the charge which is
   not transferred from a CCD pixel when the device is read out.
   Usually this is zero or negligible and is only included for
   completeness and for processing very old data.
   [!]
3 DIRECTION
DIRECTION = LITERAL (Read and Write)
   The readout direction of the CCD. This may take the values X
   or Y.  A value of X indicates that the readout direction is
   along the first (horizontal) direction, an Y indicates that
   the readout direction is along the direction perpendicular to
   the X axis. If this value is not supplied then it will be
   defaulted to X by DEBIAS.
   [!]
3 EXTENT
EXTENT( 4 ) = _INTEGER (Read and Write)
   The extent of the useful CCD area in pixel indices (see notes).
   The extent is defined as a range in X values and a range in Y
   values (XMIN,XMAX,YMIN,YMAX). These define a section of an image
   (SUN/33). Any parts of the CCD outside of this area will not
   be present in the final output. This is useful for excluding
   bias strips, badly vignetted parts etc.
   [!]
3 GENVAR
GENVAR = _LOGICAL (Read and Write)
   The value of this parameter controls whether or not variance
   estimates will be generated within CCDPACK. A value of TRUE
   indicates that the routines MAKEBIAS and DEBIAS should generate
   variances. A value of FALSE inhibits variance generation.
   Normally variances should be generated, even though disk and
   process-time savings can be made by their omission.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read and Write)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read and Write)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all
   [BOTH]
3 MASK
MASK = LITERAL (Read and Write)
   This parameter allows you to supply information about the
   presence of defective parts of your data (such as bad lines,
   columns, hot spots etc.). You can supply this information in
   two basic forms.

     - By giving the name of an image that has the areas which are
       to be masked set BAD or to a suitable quality value
       (see DEBIAS). This can be achieved by displaying a typical
       image using KAPPA, getting logs of the positions of an outline
       enclosing the BAD area and using the KAPPA application
       SEGMENT, by using the ZAPLIN facility or by using the ARDGEN
       application together with ARDMASK (but see the next option
       instead).

     - By giving the name of an ordinary text file that contains an
       ARD (ASCII Region Definition) description. ARD is a textual
       language for describing regions of a data array. The
       language is based on a set of keywords that identify simple
       shapes (such as Column, Row, Line, Box and Circle).  ARD
       files can be generated by the KAPPA application ARDGEN, or
       can be created by hand. A description of ARD is given in
       the section "ASCII region definition files" in the DEBIAS
       help.

   If no mask file is available simply return an !

   [!]
3 NDFNAMES
NDFNAMES = _LOGICAL (Read and Write)
   The value of this parameter controls whether or not position
   list processing applications are expected to find the names of
   lists via association with images or not.

   When position lists (which are just text files of positions
   with either an index, an X and a Y value, or or just X and Y
   values) are used the option exists to associate them with a
   particular image. This is achieved by entering the name of the
   position list file into an image's CCDPACK extension under the
   item "CURRENT_LIST". Associating position lists with images has
   the advantage of allowing wildcards to be used for the input
   names and makes sure that positions are always used in the
   correct context (this is particularly useful when determining
   inter-image transformations).
   [TRUE]
3 PRESERVE
PRESERVE = _LOGICAL (Read and Write)
   The value of this parameter controls whether or not processed
   image data arrays retain their input data types. If it is set
   TRUE then CCDPACK applications will return and process any
   data in the input type. If it is set FALSE then the
   applications will output an image whose type is determined by
   which data type was considered necessary to allow processing
   of the input data. This will usually mean an output type of
   _REAL (all types not _INTEGER or _DOUBLE) or _DOUBLE (when
   input types are _INTEGER or _DOUBLE). This option should be
   used when a unacceptable loss of accuracy may occur, or when
   the data range can no longer be represented in the range of
   the present data type. The latter effect may occur when
   expanding input ADU values into electrons in DEBIAS, if the
   ADC factor is large and the input data has a type of _WORD.
   [TRUE]
3 RESTORE
RESTORE = _LOGICAL (Read)
   Whether or not you want to restore the values of the program
   parameters from a "restoration" file. If TRUE then you'll
   need to specify the name of the file using the RESTOREFILE
   parameter. A description of the contents of restoration files is
   given in the notes section.
   [FALSE]
3 RESTOREFILE
RESTOREFILE = FILENAME (Read)
   This parameter is only used if the RESTORE parameters is TRUE.
   It allows you to give the name of the restoration file to be used
   when restoring the program parameters. Restoration files are
   described in the notes section.
   [CCDPACK_SETUP.DAT]
3 RNOISE
RNOISE = _DOUBLE (Read and Write)
   The nominal readout noise (in ADUs) for the current CCD.
   Estimates of the readout noise are made by the routines
   MAKEFLAT and DEBIAS. These can be used to estimate the
   validity of this value. Not supplying a value for this
   parameter may be a valid response if variances are not to be
   generated by MAKEBIAS and/or DEBIAS.
   [!]
3 SATURATE
SATURATE = _LOGICAL (Read)
   This parameter controls whether the data are to be processed to
   detect saturated values or not. The actual saturation value is
   given using the SATURATION parameter.
   [FALSE]
3 SATURATION
SATURATION = _DOUBLE (Read)
   The data saturation value. Only used if SATURATE is TRUE.
   [1.0D6]
3 SETSAT
SETSAT = _LOGICAL (Read)
   This parameter controls how saturated data will be flagged for
   identification by later programs. If it is set TRUE then saturated
   values will be replaced by the value of the parameter SATURATION
   (which is also the value used to detect saturated data). If it is
   FALSE then saturated values will be set to BAD (also known as
   invalid).
   [FALSE]
3 SAVE
SAVE = _LOGICAL (Read)
   Whether or not to save the values of the program parameters to a
   "restoration" file. If TRUE then you'll need to specify the name
   of the file using the SAVEFILE parameter. A description of the
   contents of restoration files is given in the notes section.
   [FALSE]
3 SAVEFILE
SAVEFILE = FILENAME (Read)
   This parameter is only used if the SAVE parameters is TRUE.
   It allows you to give the name of the restoration file to be used
   when restoring the program parameters. Restoration files are
   described in the notes section.
   [CCDPACK_SETUP.DAT]
2 Notes
- Pixel indices. The bounds supplied to DEBIAS should be given as
  pixel indices. These usually start at 1,1 for the pixel at the
  lower left-hand corner of the data array component (this may
  be not true if the images have been sectioned, in which case the
  lower left hand pixel will have pixel indices equal to the data
  component origin values). Pixel indices are different from
  pixel coordinates in that they are non-continuous, i.e. can
  only have integer values, and start at 1,1 not 0,0. To change
  pixel coordinates to pixel indices add 0.5 and round to the
  nearest integer.

- Restoration files. CCDSETUP has the ability to store and restore
  its parameter values from a description stored in a text file.
  This is intended for use in retaining a particular instrumental
  setups for long periods of time (so that it is easy to create a
  database of common setups). The format of these files is very
  simple and consists of lines containing "keyword=value"
  descriptions. Where "keyword" is the name of the CCDSETUP
  parameter and "value" its value. Comments can be included using
  the character "#" at the start of a line or an "!" inline.
  Continuation lines are indicated by a "-" as the last character.
  An example of the contents of a restoration file is shown next
  (this is an actual file created by CCDSETUP).

     #
     #   CCDPACK - Restoration file
     #
     #   Written by pdraper on Wed Sep  6 17:41:54 1995.
     #
     ADC = 1  ! electrons/ADU
     RNOISE = 9.95  ! Nominal readout noise in ADUs
     EXTENT = 6, 119, 1, 128  ! Extent of useful CCD area
     BOUNDS = 1, 5, 120, 128  ! Bounds of bias strips
     DIRECTION = X  ! Readout direction
     DEFERRED = 0  ! Deferred charge in ADUs
     MASK = ccdtest_ard.dat ! Defect mask
     SATURATE = TRUE  ! Look for saturated pixels
     SATURATION = 180000 ! Saturation value
     SETSAT = FALSE ! Set saturated pixels to saturation value
     PRESERVE = TRUE  ! Preserve data types
     GENVAR = TRUE  ! Generate data variances
     NDFNAMES = TRUE  ! Position lists associated with images
     LOGTO = BOTH  ! Log file information to
     LOGFILE = CCDPACK.LOG  ! Name of logfile
2 Behaviour_of_parameters
   All parameters values are obtained by prompting. The suggested
   values (defaults) are either the current global values, if they
   exist, or the application current values (from the last time that
   the application was run). If the application has not been run
   then the "intrinsic" defaults are shown. The intrinsic defaults
   may be obtained at any time (in the absence of global values) by
   using the RESET keyword on the command line.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 1-JUL-1991 (PDRAPER):
    Original version.

 15-JAN-1992 (PDRAPER):
    Cosmetic changes.

 21-JUL-1993 (PDRAPER):
    Added NDFNAMES.

 13-SEP-1993 (PDRAPER):
    Merged with original "automated" ccdsetup.

 28-JAN-1994 (PDRAPER):
    Added saturated pixel changes.

 8-SEP-1995 (PDRAPER):
    Updated help for MASK (change to official ARD). Added help
    for V2.0 parameters.
1 CCDSHOW
Displays the value of the CCDPACK global parameters.

Usage:

   ccdshow

Description:

   This routine shows the current value of any CCDPACK global
   parameters.
2 Parameters
For information on individual parameters, select from the list below:
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter, then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
2 Behaviour_of_parameters
   The parameters (LOGTO and LOGFILE ) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   using the CCDSETUP command.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 1-AUG-1991 (PDRAPER):
    Original version.

 7-APR-1992 (PDRAPER):
    Changed to use parameter system to get values rather than
    directly accessing the global file.

 20-JUL-1993 (PDRAPER):
    Added LOG, LOGFILE and NDFNAMES parameters.

 28-JAN-1994 (PDRAPER):
    Added saturation extensions.
1 DEBIAS
Performs the debiassing and initial preparation of CCD
data.

Usage:

   debias in out bias [bounds] rnoise adc [mask]

Description:

   This routine debiasses CCD frames, masks defects, sets variances,
   corrects for CCD gain and deferred charge, sets saturated values
   and extracts the useful portion of the CCD data.

   The debiassing section operates in two basic modes -- with and
   without a bias frame. If a bias frame is supplied then it is
   subtracted from the data arrays of the input images. The subtraction
   can either be direct, or by offsetting the values of the bias by
   the mean value in the bias-strip region(s). When determining
   the mean in the bias strips a function of the distance from the
   edges is used, this reduces the effect of any contamination. If
   you are offsetting to the bias strip mean then the bias frame
   should be averaged to zero (MAKEBIAS does this).

   The second debiassing method which DEBIAS supports is the
   subtraction of interpolated values. The interpolation is
   performed between the bias strips. If only one strip is given the
   interpolation is really an extrapolation and is limited to
   constant values either for each line or for the frame as a whole.
   Interpolation between bias strips can be as for a single strip or
   may be a straight line fit for each line, or a fit of a plane to
   the bias strips (see parameter SMODE). The interpolation uses
   weighting operations as for bias frame subtraction. Bad values
   can also be rejected from the strips by sigma clipping, or the
   noise can be reduced by smoothing the values.

   Additional DEBIAS functionality includes the (optional)
   production of variance estimates for the input CCD data. It does
   this by assuming Poissonian statistics for the bias-subtracted
   data, together with a contribution for the readout noise. The
   masking of bad data areas is achieved using the transfer of
   quality information from an image, or by using an ASCII Regions
   Definition (ARD) file. The expansion of the data values into
   counts and the extraction of the useful area of the CCD are also
   performed.
2 Parameters
For information on individual parameters, select from the list below:
3 ADC
ADC = _DOUBLE (Read)
   The Analogue-to-Digital Conversion factor. This number converts
   input ADUs to detected electrons. This value is used to
   estimate the Poissonian noise in the output (debiassed) data
   values. If variances are not being generated then this value
   will not be used.

   If a global value for this parameter has been set using
   CCDSETUP then this will be used.
   [1.0]
3 BADBITS
BADBITS = _INTEGER (Read)
   If the first input image has no quality component, and you have
   specified the SETBAD= FALSE option, you will be requested to
   supply a value for BADBITS (SUN/33).  The default for this
   is 1. BADBITS is a byte value and hence can only be in the
   range 0-255.
   [1]
3 BIAS
BIAS = LITERAL (Read)
   Name of the image which contains the bias calibration data. This
   parameter may be specified as ! in which case either a
   constant or values derived from the bias strip(s) are used.
   The name of this file may be specified using indirection
   through an ASCII file. The offered default is either the last
   used master bias name or (if one exists) the name of the image
   produced by the last run of MAKEBIAS.
   [Global master bias or !]
3 BOUNDS
BOUNDS( 2 or 4 ) = _INTEGER (Read)
   The pixel indices (see notes) of the upper and lower bounds of
   the bias strip(s). These bounds can run in either the
   horizontal or vertical directions. The direction is controlled
   by the DIRECTION parameter. The bounds must be supplied in
   pairs. Pixel indices are the actual number of pixels, starting
   at 1,1 at the lower left hand corner of the image data array,
   which includes any origin offsets within the input images.

   If global values for these bounds have been set using
   CCDSETUP then those values will be used.
3 BOXSIZE
BOXSIZE( 2 ) = _INTEGER (Read)
   The sizes of the sides of the box to be used when smoothing the
   bias strips. Only used when CMODE="BOX".
   [15,15]
3 CMODE
CMODE = LITERAL (Read)
   The "clean-up" mode for the bias strips. This parameter may
   take values of "BOX", "SIGMA" or "WEIGHT". If CMODE="BOX" then
   the bias strips are smoothed with a box filter before being
   processed. If CMODE="SIGMA" then the bias strips are sigma
   clipped before being processed. If CMODE="WEIGHT" then only
   the weighting as indicated by the WMODE parameter is used to
   attempt to decrease the effects of erroneous pixel values.
   [BOX]
3 DEFERRED
DEFERRED = _DOUBLE (Read)
   The deferred charge value. This is also often known as the
   "fat" or "skinny" zero. It represents the amount of charge
   left behind in a pixel on a readout transfer. This value is
   subtracted from the data.

   If a global value for this parameter has been set using
   CCDSETUP then this will be used.
   [0.0]
3 DIRECTION
DIRECTION = LITERAL (Read)
   The readout direction of the CCD. This parameter can take
   values of "X" or "Y". X indicates that the readout direction is
   horizontal , Y indicates that the readout direction is
   vertical. The BOUNDS parameter values are assumed to be values
   along the readout direction.

   If a global value for this parameter has been set using
   CCDSETUP then this will be used.
   [X]
3 EXPAND
EXPAND = _LOGICAL (Read)
   This value controls whether or not the output data should be
   multiplied by the ADC factor to convert the input ADUs to
   counts (electrons). This option is disabled if no variances
   are generated. Care should be taken when using this option
   with a large ADC factor and data types of _WORD,_UWORD,_BYTE
   or _UBYTE as the output data range may exceed that allowed
   with these types. In this case the best option is to set
   the PRESERVE parameter FALSE.

   [Default is TRUE if input data is not an unsigned data type
   otherwise FALSE.]
3 EXTENT
EXTENT(4) = _INTEGER (Read)
   The extent of the useful CCD area. This should be given in
   pixel index values (see notes). The extent is restricted to
   that of the CCD frame, so no padding of the data can occur. If
   values outside of those permissable are given then they are
   modified to lie within the CCD frame. The values should be
   given in the order XMIN,XMAX,YMIN,YMAX.

   Normally the extent should be set so that the bias strips
   are excluded from the output data, this is essential for
   flatfields whose normalisation could be adversely biased.

   If global values for these bounds have been set using
   CCDSETUP then those values will be used.
3 FMODE
FMODE = LITERAL (Read)
   The fit mode which will be used when interpolating bias values.
   May take values of "LINE" or "PLANE". This is used together
   with the SMODE parameter to define the interpolation method,
   ie. FMODE="LINE", SMODE="LINEAR", fits each row or column of
   the bias strips by a straight line; FMODE="PLANE",
   SMODE="CONSTANT" derives a single constant for the bias value;
   FMODE="PLANE", SMODE="LINEAR" fits a plane to the bias-strip
   data.
   [LINE]
3 GENVAR
GENVAR = _LOGICAL (Read)
   If variances are to be generated then this value is set
   TRUE. If variances are not to be generated then this value
   should be set FALSE. Normally variances should be generated,
   even though disk and process time savings can be made by their
   omission.

   If a global value has been set up using CCDSETUP this value
   will be used.
   [FALSE]
3 GETBIAS
GETBIAS = _LOGICAL (Read)
   This parameter controls whether or not an attempt is to be made
   to access a master bias image.
   [TRUE]
3 GETMASK
GETMASK = _LOGICAL (Read)
   This parameter controls whether or not an attempt is to be made
   to access a defect mask using the parameter MASK.
   [TRUE]
3 IN
IN = LITERAL (Read)
   A list of the names of the images which contain the raw CCD
   data. Note that at present the input data must have a common
   processing mode, i.e. use the same bias frame, have the same
   ADC factor, readout noise etc. These values are represented
   by the parameter values of the task.

   The image names should be separated by commas and may include
   wildcards.
3 KEEPIN
KEEPIN = _LOGICAL (Read)
   Whether to keep (i.e. not delete) the input images (parameter IN)
   or not. Deleting the input images has the advantage of saving
   disk space, but should probably only be used if this program
   is part of a sequence of commands and the intermediary data
   produced by it are not important.

   The calibration master frames (parameters BIAS and possibly MASK)
   are never deleted.

   The default for this parameter is TRUE and this cannot be
   overridden except by assignment on the command line or in
   response to a forced prompt.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MASK
MASK = LITERAL (Read)
   The name of an image or ASCII Regions Definition (ARD) file.

   If an image is given then any regions of BAD values (set through
   explicit BAD values or by BADBITS in the quality component)
   will be transferred to the output image.

   If an ARD file is given then its regions will be interpreted
   and transferred to the output image. ARD is described in its own
   section.

   The regions whose quality is to be set are probably hot spots,
   line defects etc.  which contain little or no useful
   information. This parameters may be returned as ! indicating
   that no mask is to be applied.

   If a global value for this parameter has been set using
   CCDSETUP then this will be used.

   The name of this file may be specified using indirection
   through a file.
   [!]
3 NSIGMA
NSIGMA = _REAL (Read)
   The number of standard deviations to clip the bias strips at.
   This is only used in CMODE="SIGMA". The actual clipping
   occurs at NSIGMA*RNOISE. If no variances are being generated
   then the RNOISE value is estimated from the data values in
   the strips.
   [4.0]
3 OFFSET
OFFSET = _LOGICAL (Read)
   If TRUE then the input bias data array is offset
   by the mean value derived from the bias-strip areas. If FALSE
   then the bias data is directly subtracted. This parameter is
   disabled for unsigned data types as the bias data cannot have
   been previously zeroed.
   [TRUE]
3 OUT
OUT = LITERAL (Write)
   Names of the output images. These may be specified as list of
   comma separated names, using indirection if required, OR,
   as a single modification element (of the input names). The
   simplest modification element is the asterisk "*" which means
   call each of the output images the same name as the
   corresponding input images. So,
      IN > *
      OUT > *
   signifies that all the images in the current directory should be
   used and the output images should have the same names.

   Other types of modification can also occur, such as,
      OUT > tmp_*
   which means call the output images the same as the input images but
   put tmp_ in front of the names. Replacement of a specified
   string with another in the output file names can also be used,
      OUT > tmp_*|debias|flattened|
   this replaces the string debias with flattened in any of the
   output names tmp_*.
3 PRESERVE
PRESERVE = _LOGICAL (Read)
   If TRUE then the data type of the input images are used for
   processing and are preserved on exit from this routine. If
   FALSE then a suitable floating point type will be chosen for
   the output type and the processing will be performed using
   this choice.

   This option should be used when a unacceptable loss of
   accuracy may occur, or when the data range can no longer be
   represented in the range of the present data type. The latter
   effect may occur when expanding input ADU values into
   electrons, if the ADC factor is large and the input data have
   types of _WORD,_UWORD,_BYTE or _UBYTE.

   If a global value for this parameter has been set using
   CCDSETUP then this will be used.
   [TRUE]
3 RNOISE
RNOISE = _DOUBLE (Read)
   The readout noise in input data units (ADUs). An estimate of
   the readout noise is shown for unweighted values in the bias
   strips, if the bias strips are used. If variances are not
   generated then this value is not used. If variances are
   generated then the readout noise is included in the variance
   estimates.

   If a global value has been set using CCDSETUP then this will
   be used.
   [Dynamic default or 1.0]
3 SATURATE
SATURATE = _LOGICAL (Read)
   This parameter controls whether the data are to be processed to
   detect saturated values or not. The actual saturation value is
   given using the SATURATION parameter.
   [FALSE]
3 SATURATION
SATURATION = _DOUBLE (Read)
   The data saturation value. Only used if SATURATE is TRUE.
   [1.0D6]
3 SETBAD
SETBAD = _LOGICAL (Read)
   If TRUE then the quality information will be transferred
   from the MASK image to the output images in the form of BAD
   ("flagged") values in the data component. This is the usual
   method of indicating the presence of pixels with no value. If
   FALSE then the quality information will be transferred into
   the quality component, all output quality pixels will have
   their BADBITS set. (Note that if the input image already has a
   quality component the BADBITS will be set by a logical OR of
   the current bits with the BADBITS value).
   [TRUE]
3 SETSAT
SETSAT = _LOGICAL (Read)
   This parameter controls how saturated data will be flagged.
   If it is set TRUE then saturated values will be replaced by
   the value of the parameter SATURATION (which is also the value
   used to detect saturated data). If it is FALSE then saturated
   values will be set to BAD (also known as invalid).
   [FALSE]
3 SMODE
SMODE = LITERAL (Read)
   The mode which will be used to perform any interpolation fit
   between the bias strips. Can take values of "CONSTANT" or
   "LINEAR". If only one bias strip is given this may only take
   the value "CONSTANT". This is used together with the FMODE
   parameter to define the interpolation method, i.e.
   FMODE="LINE", SMODE="LINEAR", fits each row or column of the
   bias strips by a straight line; FMODE="PLANE",
   SMODE="CONSTANT" derives a single constant for the bias value;
   FMODE="PLANE", SMODE="LINEAR" fits a plane to the bias-strip
   data.
   [CONSTANT]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output image.
   [Output from DEBIAS]
3 USECON
USECON = _LOGICAL (Read)
   If TRUE then you can supply an estimate for the bias
   contribution (parameter ZERO). This value is then subtracted
   from the input image. Only use this option if you do not have
   any bias frames or bias strips and you have good reason to
   believe that the value you are supplying is accurate enough
   for your purposes.
   [FALSE]
3 USEEXT
USEEXT = _LOGICAL (Read)
   If TRUE then certain of the parameters of this program will not
   be used and the required values will be obtained from the
   CCDPACK extensions of the input images instead. This method can
   only be used if the images have been "imported" using the
   programs PRESENT or IMPORT. Typically it is used when
   processing using CCDPACK's "automated" methods (in this case
   the input images should contain all the information necessary to
   process them).

   The parameters that this effects are:
      ADC
      BOUNDS
      DEFERRED
      DIRECTION
      EXTENT
      RNOISE
      SATURATION
      ZERO

   Values obtained from the CCDPACK extension are identified in
   the output log by the presence of a trailing asterisk (*).
   [FALSE]
3 WMODE
WMODE = LITERAL (Read)
   The weighting method which is to be used when deriving means
   or performing the least squares interpolation fits using any
   bias strips. Can take the values "LINEAR", "EXP", or "NONE".
   "LINEAR" and "EXP"-onential produce weights which are maximum
   in the centre of each bias strip and which fall off towards
   the edges. "LINEAR" weighting gives zero weighting for the
   edge lines and so is the more robust.
   [LINEAR]
3 ZERO
ZERO = _DOUBLE (Read)
   If USECON=TRUE then this value is subtracted from the input
   image.
2 Examples
debias r1 r1b bias '[2,10,400,415]' adc=1.1 rnoise=8
   This example debiasses the data array in image r1 writing the
   result to image r1b. It uses the data component of image bias as
   the bias estimator. The bias is offset by the mean value found
   within the ranges 2-10 and 400-415 pixels along the X axis.
   The data in the bias strips are smoothed by a box filter and
   weighted linearly from the edges inwards. The output variance
   is produced by a combination of the Poisson statistics (using
   an ADC value of 1.1) and readout noise (value 8), together
   with the variance of the bias image (if present).

debias in=r1 out=r2 bounds='[2,10,401,416]' adc=2.5 rnoise=10
   This example debiasses the image r1 data component writing the
   result to the image r2. The bias is estimated by an interpolation
   of a constant for each data row. The constant is the result of
   a linearly weighted average of the bias strip data which has
   been box filtered.

debias in=r1 out=r2 bounds='[2,10,401,416]' smode=linear adc=5
       fmode=plane direct=y wmode=exp cmode=sigma rnoise=10
       nsigma=4
   This example debiasses the image r1 data component writing the
   result to the image r2. The bias is estimated by the fitting of a
   plane to the data in the bias strips. The bias-strip data are
   first sigma clipped at a level RNOISE*NSIGMA. The fit is
   performed with weighting based on a exponential fall off
   from the centre of the strips. The bias strips are defined by
   the bounds applied up the Y axis.

debias in='*' out='*_debias' bounds='[3,16,912,940]' adc=1 rnoise=4
       bias=bias/master_bias
   In this example all the images in the current directory are
   debiassed. The names of the output images are as those of the
   corresponding input images, except that they are trailed by the
   "_debias" string.
2 Notes
- If the input images have variance components and no variances
  are to be generated then they are processed.

- Pixel indices. The bounds supplied to DEBIAS should be given as
  pixel indices. These usually start at 1,1 for the pixel at the
  lower left-hand corner of the data-array component (this may
  not be true if the images have been sectioned, in which case the
  lower left hand pixel will have pixel indices equal to the data
  component origin values). Pixel indices are different from
  pixel coordinates in that they are non-continuous, i.e. can
  only have integer values, and start at 1,1 not 0,0. To change
  from pixel coordinates add 0.5 and round to the nearest integer.
2 ASCII_region_definition_files
   DEBIAS allows regions which are to be defined as having poor
   quality (either by setting the appropriate pixels BAD or by
   setting part of the quality component) to be described within an
   ordinary text file using the ARD (ASCII Region Definition)
   language. The ARD language is based on a set of keywords that
   identify simple shapes. Some of the regions which can be defined
   are:

      - BOX

      - CIRCLE

      - COLUMN

      - ELLIPSE

      - LINE

      - PIXEL

      - POLYGON

      - RECT

      - ROTBOX

      - ROW

   ARD descriptions can be created using the KAPPA application
   ARDGEN, or you can of course create your own by hand. An example
   of the contents of an ARD file follows.

      #
      # ARD description file for bad regions of my CCD.

      COLUMN( 41, 177, 212 )        # Three bad columns
      PIXEL( 201, 143, 153, 167 )   # Two Bad pixels
      BOX( 188, 313, 5, 5 )         # One Hot spot centred at 188,313
      ELLIPSE( 99, 120, 21.2, 5.4, 45.0 )

      # Polygons defining badly vignetted corners
      POLYGON( 2.2, 96.4, 12.1, 81.5, 26.9, 63.7, 47.7, 41.9,
               61.5, 24.1, 84.3, 0.0 , 0.0, 0.0 )
      POLYGON( 6.2, 294.3, 27.9, 321.0, 52.6, 348.7, 74.4, 371.5,
               80.0, 384.0, 0.0, 384.0 )
      #
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - TITLE   -- always "Output from DEBIAS"

      - KEEPIN  -- always TRUE

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets/different devices, or after a break of sometime.
   The intrinsic default behaviour of the application may be
   restored by using the RESET keyword on the command line.

   Certain parameters (ADC, BIAS, BOUNDS, DEFERRED, DIRECTION,
   EXTENT, GENVAR, LOGFILE, LOGTO, MASK, PRESERVE, RNOISE, SATURATE,
   SATURATION and SETSAT) have global values. These global values
   will always take precedence, except when an assignment is made on
   the command line.  In general global values may be set and reset
   using the CCDSETUP and CCDCLEAR commands, however, the BIAS
   parameter may only be set by a run of the application MAKEBIAS.

   If the parameter USEEXT is TRUE then the following parameters
   are not used: ADC, BOUNDS, DEFERRED, DIRECTION, EXTENT, RNOISE,
   SATURATION and ZERO. Values are obtained from the input image
   extensions instead.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 26-APR-1991 (PDRAPER):
    Original version.

 20-MAR-1992 (PDRAPER):
    Changed to type cast unsigned data correctly.

 5-JUN-1992 (PDRAPER):
    Changed prologue and added new combination routines.

 28-JAN-1994 (PDRAPER):
    Now uses extension information. Added parameters USEMASK
    and USEBIAS to overcome DCL's reluctance to accept !
    on command line.

 2-FEB-1994 (PDRAPER):
    Added option to delete input NDFs when processed.

 12-MAY-1994 (PDRAPER):
    Changed ARD ellipse description to +Y through -X not
    vice-versa.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK 2.0.
2 Implementation_Status
   - This task supports all components of an NDF. If requested
     [default] a variance is produced from the bias subtracted
     values. The task processes BAD pixels. The UNITS of the output
     NDF are set to ADUs or electrons depending on whether data
     expansion has occurred or not. Processing is supported for all
     HDS (non-complex) numeric types.
1 FINDCENT
Centroids image features.

Usage:

   findcent in outlist

Description:

   This routine determines the centroids of image features located
   in the data components of a list of images. It is useful for
   locating accurate values for the positions of stars given hand
   selected positions. It can also be used for centroiding any
   sufficiently peaked image features.

   The initial positions associated with each image are given in
   formatted files whose names are determined either using the
   CCDPACK image extension item CURRENT_LIST (which is maintained by
   list processing CCDPACK applications) or from an explicit list of
   names.
2 Parameters
For information on individual parameters, select from the list below:
3 AUTOSCALE
AUTOSCALE = _LOGICAL (Read)
   Whether to "automatically" adjust the centroid location
   parameters to reflect the fact that picking good initial
   positions is less likely when dealing with very large images
   (these tend to be displayed using one display pixel to
   represent many image pixels).

   If TRUE then the values of the parameters ISIZE, TOLER and
   MAXSHIFT are scaled by an amount that maps the largest
   dimension of each input image to an image of size 1024
   square (so an image of size 2048 square will have these
   parameters increased by a factor of two).
   [FALSE]
3 IN
IN = LITERAL (Read)
   The names of the images whose data components contain image
   features which are to be centroided.  The image names should be
   separated by commas and may include wildcards.
3 INLIST
INLIST = LITERAL (Read)
   If NDFNAMES is FALSE then this parameter will be used to
   access the names of the lists which contain the initial
   positions. The format of the data in the files is described in
   the notes section.

   The names of the input lists may use modifications of the
   input image names, so for instance if the position lists are
   stored in files with the same name as the input images but with
   a file type of ".dat" instead of ".sdf" then use

      INLIST > *.dat

   If the input list names are a modification of the image names say
   with a trailing type of "_initial.positions". Then a response of

      INLIST > *_initial.positions

   will access the correct files. Names may also use substitution
   elements, say the image names are *_data and the position lists
   are *_pos.dat, then a response like

       INLIST > *|data|pos.dat|

   may be used. If a naming scheme has not been used then an
   explicit list of names should be returned (wildcards cannot be
   used to specify list names). These names should be given in
   the same order as the input image names and may use indirection
   elements as well as names separated by commas. A listing of
   the input image name order (after any wildcard expansions etc.
   have been made) is shown to make sure that the order is
   correct.
3 ISIZE
ISIZE = _INTEGER (Read)
   The size of a box side (in pixels) centered on current
   position which will be used to form the marginal profiles used
   to estimate the centroid.
   [9]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter, then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MAXITER
MAXITER = _INTEGER (Read)
   The maximum number of iterations which may be used in
   estimating the centroid. Only used if the tolerance criterion
   is not met in this number of iterations.
   [3]
3 MAXSHIFT
MAXSHIFT = _DOUBLE (Read)
   The maximum shift (in pixels) allowed from an initial position.
   [5.5]
3 NAMELIST
NAMELIST = LITERAL (Read)
   Only used if NDFNAMES is FALSE. If this is the case then this
   specifies the name of a file to contain a listing of the names
   of the output lists. This file may then be used to pass the
   names onto another CCDPACK application using indirection.
   [FINDCENT.LIS]
3 NDFNAMES
NDFNAMES = _LOGICAL (Read)
   If TRUE then the routine will assume that the names of the
   input position lists are stored in the CCDPACK extension item
   "CURRENT_LIST" of the input images. The names will be present
   in the extension if the positions were located using a CCDPACK
   application (such as IDICURS). Using this facility allows the
   transparent propagation of position lists through processing
   chains.

   If a global value for this parameter has been set using
   CCDSETUP then that value will be used.
   [TRUE]
3 POSITIVE
POSITIVE = _LOGICAL (Read)
   If TRUE then the image features have increasing values
   otherwise they are negative.
   [TRUE]
3 OUTLIST
OUTLIST = FILENAME (Write)
   A list of names specifying the centroid result files. The
   names of the lists may use modifications of the input image
   names.  So if you want to call the output lists the same name
   as the input images except to add a type use.

      OUTLIST > *.cent

   Or alternatively you can use an explicit list of names.
   These may use indirection elements as well as names separated
   by commas.
   [*.cent]
3 TOLER
TOLER = _DOUBLE (Read)
   The required tolerance in the positional accuracy of the
   centroid. On each iteration the box of data from which the
   centroid is estimated is updated. If the new centroid does not
   differ from the previous value by more than this amount (in X
   and Y) then iteration stops. Failure to meet this level of
   accuracy does not result in the centroid being rejected, the
   centroiding process just stops after the permitted number of
   iterations (MAXITER).
   [0.05]
2 Examples
findcent in='*' outlist='*.cent'
   In this example all the images in the current directory are
   processed. It is assumed that the images are associated with
   positions lists of inaccurate positions (via the item
   CURRENT_LIST in the image CCDPACK extensions). These position
   lists are accessed and centroided with the appropriate images.
   On exit the new lists are named *.cent and are associated with
   the images (instead of the original "input" lists).

findcent ndfnames=false in='"image1,image2,image3"'
         inlist='"image1.pos,image2.pos,image3.pos"' outlist='*.acc'
         namelist=new_position_lists
   In this example the position list names are not previously
   associated with the images and must have their names given
   explicitly (and in the same order as the image names). The
   output lists are called the same names as the input images except
   with the extension .acc. The names of the output lists are
   written into the file new_position_lists which can be used to
   pass these names onto another application using indirection
   (in which invoke the next application with ndfnames=false
   inlist=^new_position_lists).
2 Notes
- Position list formats.

  CCDPACK supports data in two formats.

  CCDPACK format - the first three columns are interpreted as the
  following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which are the same but which have different locations
  on different images. Values in any other (trailing) columns are
  usually ignored.

  EXTERNAL format - positions are specified using just an X and
  a Y entry and no other entries.

     - Column 1: the X position

     - Column 2: the Y position

  This format is used by KAPPA applications such as CURSOR.

  Comments may be included in a file using the characters "#" and
  "!". Columns may be separated by the use of commas or spaces.

  Data following the third column is copied without modification
  into the results files

- NDF extension items.

  If NDFNAMES is TRUE then the item "CURRENT_LIST" of the
  .MORE.CCDPACK structure of the input images will be located
  and assumed to contain the names of the lists whose positions
  are to be centroided. On exit this item will be updated to
  reference the name of the centroided list of positions.
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets or after a break of sometime.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE and NDFNAMES) have global
   values. These global values will always take precedence, except
   when an assignment is made on the command line.  Global values may
   be set and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 8-JUL-1992 (PDRAPER):
    Original version.

 8-MAR-1993 (PDRAPER):
    First version for release.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK 2.0.

 3-MAR-1997 (PDRAPER):
    Removed top-level locator control (foreign data access upgrades).

 1-MAR-1999 (PDRAPER):
    Added autoscale parameter.
2 Implementation_Status
   - This routine correctly processes the DATA and QUALITY components
     of an NDF data structure. Bad pixels and all non-complex numeric
     data types can be handled.
1 FINDOBJ
Locates and centroids image features.

Usage:

   findobj in minpix outlist

Description:

   This routine processes a list of images, locating and centroiding
   image features (such as stars) which have groups of connected
   pixels above threshold values.

   Connected groups of pixels are accepted as objects if they have
   more than a minimum number of pixels. Such groups may be rejected
   if they contact the edges of the data array.

   Threshold estimation is performed using either a percentage data
   point (i.e. the value for which this percentage of pixels have a
   lower value) or by using a standard deviation and background
   value determined by fitting a gaussian to the data histogram.
2 Parameters
For information on individual parameters, select from the list below:
3 AUTOTHRESH
AUTOTHRESH = _LOGICAL (Read)
   If this parameter is TRUE then a threshold determined by
   this routine for each of the images will be used. If FALSE then
   you will be prompted for a threshold value for each image.
   [TRUE]
3 BINFRAC
BINFRAC = _DOUBLE (Read)
   The minimum fraction of the image area (expressed as a
   percentage) which is required in the peak bin when forming the
   histogram.  Ensuring that at least one bin contains this
   fraction of counts is intended to make sure that the image
   histogram is well sampled. This increases the robustness of
   mode estimates made from the histogram but decreases the
   accuracy.
   [2.5]
3 IN
3 COUNTS = _INTEGER (Write)
   On exit this parameter contains a list of the number of objects
   detected in each input image. This may be useful in scripts
   where the values can be accessed using the KAPPA (SUN/95) PARGET
   command.
IN = LITERAL (Read)
   A list of image names which contain the data components to be
   scanned for image features.  The image names should be separated
   by commas and may include wildcards.
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MINPIX
MINPIX = _INTEGER (Read)
   The minimum number of non-BAD pixels which must be present in
   a connected group for acceptance as an image feature.
   [6]
3 NAMELIST
NAMELIST = LITERAL (Read)
   The name of a file to contain the names of the output
   position lists. The names written to this file are those
   generated using the expression given to the OUTLIST parameter.
   The file may be used in an indirection expression to input
   all the position lists output from this routine into another
   routine.
   [FINDOBJ.LIS]
3 NSIGMA
NSIGMA = _DOUBLE (Read)
   The number of standard deviations above the background that
   should be used as the threshold. This parameter is only
   accessed if the USEPER parameter is FALSE and a gaussian is
   being fitted to the background.
   [5]
3 OUTLIST
OUTLIST = LITERAL (Read)
   The names of the output lists.

   These may be specified as list of comma separated names,
   using indirection if required, OR, as a single modification
   element (of the input image names). The simplest modification
   element is the asterisk "*" which means call each of the
   output lists the same name as the corresponding input images
   So,
      IN > *
      OUTLIST > *
   signifies that all the images in the current directory should be
   used and the output lists should have the same names.

   Other types of modification can also occur, such as,
      OUTLIST > *_objs.dat
   which means call the position lists the same as the input images
   but put "_objs.dat" after the names. Replacement of a specified
   string with another in the output file names can also be used,
      OUTLIST > *|_debias|_images.dat|
   this replaces the string "_debias" with "_images.dat" in any
   of the output names.

   If wildcarded names for the input images are used then is it
   recommended that wildcards are also used for the position list
   names (the order of input names is not guaranteed).

   The output files contain a integer index for each image
   feature followed by the X and Y centroid (formed using all the
   intensity information) and finally the mean intensity of
   pixels in the group.
   [*.DAT]
3 OVERRIDE = _LOGICAL (Read)
   If TRUE then it is not a fatal error to detect no objects on an 
   image. In this case the output list of positions will not be
   written and the value in the COUNTS parameter will be set to 0.
   [FALSE]
3 OVERSAMP
OVERSAMP = _INTEGER (Read)
   An oversampling factor which is used when forming the initial
   histogram (greater than 1). The oversample is estimated by
   making the initial histogram mean count OVERSAMP times
   smaller than the mean count which would give BINFRAC in every
   bin. Increasing the oversample will increase the probability
   that only one bin will meet the BINFRAC criterion.
   [5]
3 PERCENTILE
PERCENTILE = _DOUBLE (Read)
   The percentage point in the data histogram which is to be used
   as the threshold estimate.  For data which has a significant
   background count this value should always be much greater than
   50 (the median) and probably greater than the upper quantile
   (75). Only used if USEPER is TRUE.
   [96]
3 THRESH
THRESH = _DOUBLE (Read)
   The threshold which is to be used for detecting image
   features.  Connected pixel groups above this threshold form
   image features. This parameter is only used if the AUTOTHRESH
   parameter is set FALSE. In this case a value may be supplied
   for each image which is being processed.
   [Dynamic default]
3 TOUCH
TOUCH = _LOGICAL (Read)
   If TRUE then pixel groups may contact the edges of the data
   array. Contact is defined as any pixel in the connected group
   of pixels being on the first or last column or row of the
   actual data array (not including any image origin information).
   Setting this FALSE decreases the probability of incomplete
   pixel groups being centroided which would result in inaccurate
   positions.
   [FALSE]
3 USEPER
USEPER = _LOGICAL (Read)
   If TRUE then a percentage point (of the total counts) in the
   histogram will be used to estimate the threshold. Otherwise a
   gaussian fit to the data histogram will be used to estimate the
   background value.
   [TRUE]
2 Examples
findobj in='*' minpix=10 outlist='*.find'
   In this example FINDOBJ processes all the images in the current
   directory locating objects with connected pixel groups which
   have more than 9 pixels above the threshold.

findobj '"image1,image2,image10"' 6 '"obj1.dat,obj2.dat,obj3.dat"'
        useper=false nsigma=3
   In this example FINDOBJ estimates the threshold using the mode
   value in the histogram of data values as an estimate of the
   background and the fit of a gaussian to this to estimate the
   background standard deviation. The threshold used for each image
   is then 3 times the standard deviation above the estimated
   background.
2 Notes
- Threshold estimation.

  FINDOBJ is optimised to determine a reliable detection
  threshold and is not concerned with the accurate
  determination of the background value on a frame (as it
  performs no photometric measurements). For this reason the
  histogram which it uses to determine the background value is
  made in such a way that it is usually very well sampled
  (probably oversampled, for most other purposes). FINDOBJ
  should not be used in a manner for which it is not suited
  without understanding how if differs from other more
  specialized routines.

- Histogram formation and gaussian fitting.

  The histogram used by FINDOBJ is formed by (if necessary)
  re-binning until the BINFRAC criterion is met, it is expected
  that this will always result in a well sampled histogram. The
  background value is the mode of this histogram and is not
  refined during the gaussian fitting. The gaussian fitting just
  estimates the standard deviation of the background and uses a
  fixed peak value and position (the mode of the histogram) and
  iterates rejecting bins whose counts fall below 20 percent of
  the peak value, stopping when either 3 iterations have been
  performed or the standard deviation does not change by more
  than one bin width in data values.

- NDF extension items.

  On exit the CURRENT_LIST items in the CCDPACK extensions
  (.MORE.CCDPACK) of the input images are set to the names of the
  appropriate output lists. These items will be used by other
  CCDPACK position list processing routines to automatically
  access the lists.

- Output position list format.

  CCDPACK format - Position lists in CCDPACK are formatted files
  whose first three columns are interpreted as the following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which may have different locations but are to be
  considered as the same point. Comments may be included in the
  file using the characters # and !. Columns may be separated by
  the use of commas or spaces.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - THRESH   -- dynamic value
      - OVERRIDE -- always FALSE

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when re-using the
   application after a break of sometime. The intrinsic default
   behaviour of the application may be restored by using the RESET
   keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 20-OCT-1992 (PDRAPER):
    Original version.

 9-NOV-1992 (PDRAPER):
    Added threshold estimation.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK 2.0.
2 Implementation_Status
   - This routine correctly processes the DATA and QUALITY components
     of an NDF data structure. Bad pixels and all non-complex numeric
     data types can be handled.
1 FINDOFF
Performs pattern-matching between position lists related by
simple offsets.

Usage:

   findoff inlist error outlist

Description:

   This routine is designed to determine which positions in many
   unaligned and unlabeled lists match, subject to the condition
   that the transformations between the lists are well modelled by
   simple translations.

   The results from this routine are labelled position lists (one
   for each input list) which may be used to complete image
   registration using the REGISTER routine. The estimated offsets are
   also reported.
2 Parameters
For information on individual parameters, select from the list below:
3 COMPLETE
COMPLETE = _DOUBLE (Read)
   A completeness threshold for rejecting matched position
   list pairs. A completeness factor is estimated by counting the
   number of objects in the overlap region of two lists, taking
   the minimum of these two values (this adjusts for
   incompleteness due to a different object detection threshold)
   and comparing this with the number of objects actually
   matched. Ideally a completeness of 1 should be found, the lower
   this value the lower the quality of the match.
   [0.5]
3 ERROR
ERROR = _DOUBLE (Read)
   The error in the X and Y positions. This value is used to
   determine which positions match within an error box (SLOW) or
   as a bin size (FAST). An inaccurate value may result in
   excessive false or null matches.
   [1.0]
3 FAILSAFE
FAILSAFE = _LOGICAL (Read)
   If FAST is TRUE then this parameter indicates whether the SLOW
   algorithm is to be used when FAST fails.
   [TRUE]
3 FAST
FAST = _LOGICAL (Read)
   If TRUE then the FAST matching algorithm is used, otherwise
   just the SLOW algorithm is used.
   [TRUE]
3 INLIST
INLIST = LITERAL (Read)
   This parameter is used to access the names of the lists
   which contain the positions and, if NDFNAMES is TRUE, the names
   of the associated NDFs. If NDFNAMES is TRUE the names of the
   position lists are assumed to be stored in the extension of the
   NDFs (in the CCDPACK extension item CURRENT_LIST) and the names
   of the NDFs themselves should be given in response (and may
   include wildcards).

   If NDFNAMES is FALSE then the actual names of the position
   lists should be given. These may not use wildcards but may be
   specified using indirection (other CCDPACK position list
   processing routines will write the names of their results file
   into files suitable for use in this manner) the indirection
   character is "^".
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MAXDISP
MAXDISP = _DOUBLE (Read)
   This parameter gives the maximum acceptable displacement in
   pixels between the original alignment of the NDFs and the
   alignment in which the objects are matched.  If frames have
   to be displaced more than this value to obtain a match, the
   match is rejected.  This will be of use when USEWCS is set
   and the alignment defined by the WCS components of the
   NDFs is fairly accurate.  It should be set to the maximum
   expected inaccuracy in that alignment.  If null, arbitrarily
   large displacements are allowed, although note that a
   similar restriction is effectively imposed by setting the
   RESTRICT parameter.
   [!]
3 MINMATCH
MINMATCH = _INTEGER (Read)
   This parameter specifies the minimum number of positions
   which must be matched for a comparison of two lists to be
   deemed successful.  Small values (especially less than 3) of
   this parameter can lead to a high probability of false matches,
   and are only advisable for very sparsely populated lists
   and/or small values of the MAXDISP parameter (presumably in
   conjunction with USEWCS).
   [3]
3 MINSEP
MINSEP = _DOUBLE (Read)
   Positions which are very close may cause false matches by being
   within the error box of other positions. The value of this
   parameter controls how close objects may be before they are
   both rejected (this occurs before pattern-matching).
   [Dynamic -- 5.0*ERROR]
3 NAMELIST
NAMELIST = LITERAL (Read)
   The name of a file to contain the names of the output
   position lists. The names written to this file are those
   generated using the expression given to the OUTLIST parameter.
   This file may be used in an indirection expression to input
   all the position lists output from this routine into another
   routine (say REGISTER), if the associating position lists with
   NDFs option is not being used.
   [FINDOFF.LIS]
3 NDFNAMES
NDFNAMES = _LOGICAL (Read)
   If TRUE then the routine will assume that the names of the
   position lists are stored in the NDF CCDPACK extensions under
   the item "CURRENT_LIST". The names will be present in the
   extension if the positions were located using a CCDPACK
   application (such as FINDOBJ). Using this facility allows the
   transparent propagation of position lists through processing
   chains.

   If a global value for this parameter has been set using
   CCDSETUP then that value will be used.
   [TRUE]
3 OUTLIST
OUTLIST = FILENAME (Write)
   A list of names specifying the result files. These contain
   labelled positions which can be used in registration.
   The names of the lists may use modifications of the
   input names (NDF names if available otherwise the names of the
   position lists). So if you want to call the output lists
   the same name as the input NDFs except to add a type use.

      OUTLIST > *.find

   If no NDF names are given (NDFNAMES is FALSE) then if you want
   to change the extension of the files (from ".find" to ".off"
   in this case) use

      OUTLIST > *|find|off|

   Or alternatively you can use an explicit list of names.
   These may use indirection elements as well as names separated
   by commas.
   [*]
3 OVERRIDE
OVERRIDE = LOGICAL (Read)
   This parameter controls whether to continue and create an
   incomplete solution. Such solutions will result when only a
   subset of the input position lists have been matched.

   This situation would ideally indicate that one, or more, of the
   input lists are from positions not coincident with the others,
   in which case it is perfectly legimate to proceed, however, the
   more likely scenario is that they have too few positions and
   have consequently been rejected.
   [TRUE]
3 RESTRICT
RESTRICT = LOGICAL (Read)
   This parameter determines whether the mapping between coordinate
   systems of NDF pairs is used to restrict the choice of objects
   to match with each other.  If set TRUE, then only objects
   which would appear in the overlap of two frames if the
   mapping determined by the WCS components of each NDF pair
   were accurate are tested for matching.  If it is set FALSE, then
   no such restriction is made.

   This parameter should therefore be set TRUE if the translational
   part of the information about the coordinate frames in the
   WCS components is fairly accurate (especially in the case that
   there are many objects and a small overlap), and FALSE if it
   is not.

   This parameter is ignored if USEWCS is FALSE.
   [FALSE]
3 USECOM
USECOM = LOGICAL (Read)
   This parameter specifies whether the completeness value will
   be used to weight the number of matches between a pair, when
   determining the graph connecting all input datasets. Using
   a completeness weight increases the chance of selecting high
   quality matches, but may reduce the chance of selecting matches
   with the highest counts in favour of those with lower counts.
   [TRUE]
3 USEWCS
USEWCS = LOGICAL (Read)
   This parameter specifies whether the World Coordinate System
   information in the NDF should be used to make guesses about
   how to align the frames.  If set true, and if a mapping
   between the coordinates of each pair of NDFs can be found in
   the domain of the Current coordinate frame of either of the pair
   then this mapping is applied before the match is attempted.
   Additionally, if the parameter RESTRICT is TRUE, the objects
   chosen for matching up between each pair of images are only
   those which would overlap in that pair if the WCS coordinate
   information in both NDFs were accurate.  No other restriction
   is made on the basis of this information however.  Since the
   algorithms rely on shifting images in the X and Y directions
   therefore, they will be capable of matching up objects even if
   there is a significant (if RESTRICT is TRUE) or an arbitrarily
   large (if RESTRICT is FALSE) translational error in the
   coordinate system of the chosen domain, but other large errors
   in the mapping (e.g. rotational alignment) will not be
   tolerated.

   If this parameter is set FALSE, then object matching proceeds
   on the assumption that the coordinate frames of all NDFs
   are the same apart from a translation.

   This parameter is ignored if NDFNAMES is false.
   [TRUE]
2 Examples
findoff inlist='*' error=1 outlist='*.off'
   In this example all the NDFs in the current directory are
   accessed and their associated position lists are used.
   Before object matching is attempted any transformations
   implied by aligning the images in the Current frames
   of the NDFs' WCS components are applied to the position list
   coordinates.  The matched position lists are named *.off.
   The method used is to try the FAST algorithm, switching to SLOW
   if FAST fails. The completeness measure is used when forming
   the spanning tree.  Matches with completenesses less than
   0.5 and or with less than three positions, are rejected.

findoff fast nofailsafe
   In this example the only the FAST algorithm is used.

findoff usecom=false
   In this example the completeness factor is derived but not used
   to weight the edges of the spanning tree.

findoff error=0.002 minsep=0.008
   In this example very precise measurements (or small units)
   are being used. The intrinsic error in the measurements is
   around 0.002 and positions within a box 0.008 of each other are
   rejected.

findoff inlist='data*' outlist='*.off' restrict=true
   This form would be used if the NDFs 'data*' have WCS components
   which are already approximately correct.  The Current domain
   of each should be set to the domain in which they are all
   (approximately) registered.  Setting the RESTRICT parameter
   then tells FINDOFF to consider only objects in the region which
   the WCS components say ought to overlap between pairs of frames.
   This can save a lot of time if there are many objects and a
   small overlap, but will result in failure of the program if
   the WCS components are not translationally registered
   reasonably well.

findoff inlist='data*' outlist='*.off' restrict minmatch=2
        maxdisp=20 minsep=30
   In this example the NDFs are sparsely populated, and a pair
   will be considered to match if as few as two matching objects
   can be found.  The NDFs have been initially aligned in the
   Current frames of their WCS components to an accuracy of 20
   or better.  As an additional safeguard, no objects within
   30 pixels of each other in the same NDF are used for matching.
2 Notes
- Position list formats.

  CCDPACK supports data in two formats.

  CCDPACK format - the first three columns are interpreted as the
  following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which are the same but which have different locations
  on different images. Values in any other (trailing) columns are
  usually ignored.

  EXTERNAL format - positions are specified using just an X
  and a Y entry and no other entries.

     - Column 1: the X position

     - Column 2: the Y position

  This format is used by KAPPA applications such as CURSOR.

  Comments may be included in a file using the characters "#" and
  "!". Columns may be separated by the use of commas or spaces.

- NDF extension items.

  If NDFNAMEs is TRUE then the names of the input position lists
  will be gotten from the item "CURRENT_LIST" of the CCDPACK
  extension of the input NDFs. On exit this item will be updated
  to contain the name of the appropriate output lists.
2 Notes_on_Algorithms
   The pattern-matching process uses two main algorithms, one which
   matches all the point pair-offsets between any two input lists,
   looking for the matches with the most common positions, and one
   which uses a statistical method based on a histogram of the
   differences in the offsets (where the peak in the histogram is
   assumed the most likely difference). In each case an estimate of
   the positional error must be given as it is used when deciding
   which positions match (given an offset) or is used as the bin
   size when forming histograms.

   Which algorithm you should use depends on the number of points
   your positions lists contain and the expected size of the overlaps
   between the datasets. Obviously it is much easier to detect two
   lists with most of their positions in common. With small overlaps
   a serious concern is the likelihood of finding a `false' match.
   False matches must be more likely the larger the datasets and the
   smaller the overlap.

   The first algorithm (referred to as SLOW) is more careful and is
   capable of selecting out positions when small overlaps in the
   data are present (although a level of false detections will
   always be present) but the process is inherently slow (scaling as
   n**3log2(n)).  The second algorithm (referred to as FAST) is an
   n*n process so is much quicker, but requires much better
   overlapping.

   Because the FAST process takes so little CPU time it is better to
   try this first (without the SLOW process as a backup), only use
   the SLOW algorithm when you have small datasets and do not
   expect large areas (numbers of positions) of overlap.

   A third algorithm, referred to as SNGL, is used automatically if
   one or both of the lists in a pair contains only a single object.
   In this case object matching is trivial and, of course, may
   easily be in error.  SNGL can only be used if the MINMATCH
   parameter has been set to 1, which should be done with care.  The
   SNGL algorithm may be useful if there really is only one object,
   correctly identified, in all the frames.  If this is not the
   case, it should only be used when USEWCS is true and MAXDISP is
   set to a low value, indicating that the alignment of the NDFs in
   the Current frames of their WCS components is already fairly
   accurate.

   The global registration process works by forming a graph with
   each position list at a node and with connecting edges of weight
   the number of matched position-pairs. The edge weights may be
   modified by a completeness factor which attempts to assess the
   quality of the match (this is based on the ratio of the expected
   number of matches in the overlap region to the actual number,
   random matches shouldn't return good statistics when compared
   with genuine ones). This still leaves a possibility of false
   matches disrupting any attempt to register the datasets so a
   single "spanning tree" is chosen (this is a graph which just
   visits each node the minimum number of times required to get
   complete connectivity, no loops allowed) which has the highest
   possible number of matched positions (rejecting edges with few
   matched positions/low completenesses where possible). This gives
   a most likely solution to the offsets between the position lists,
   rather than the "best" solution which could well include false
   matches; compare this solution with a median as opposed to a
   mean. The final registration is then used to identify all the
   objects which are the same in all datasets (using a relaxation
   method), resulting in labelled position lists which are output
   for use by REGISTER.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when re-using the
   application after a break of sometime. The intrinsic default
   behaviour of the application may be restored by using the RESET
   keyword on the command line.

   Certain parameters (LOGTO, LOGFILE and NDFNAMES) have global
   values. These global values will always take precedence, except
   when an assignment is made on the command line.  Global values may
   be set and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
PDRAPER: Peter Draper (STARLINK)

MBT: Mark Taylor (STARLINK)
2 History
 29-SEP-1992 (PDRAPER):
    Original version.

 12-MAY-1993 (PDRAPER):
    Added new techniques for SLOW.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK 2.0.

 16-SEP-1996 (PDRAPER):
    Removed all NAG calls.

 3-MAR-1997 (PDRAPER):
    Removed top-level locator control (foreign data access upgrade).

 23-MAR-1998 (PDRAPER):
    Changed to open input formatted files as required (rather than
    all at once). This works around the FIO limit of 40 open files
    and achieves the CCDPACK limit of 100 instead.

 16-DEC-1998 (PDRAPER):
    Added OVERRIDE parameter to control the behaviour when
    only some of the datasets are paired.

 20-JAN-1999 (PDRAPER):
    Sorted out workspace problems for incomplete matching
    (IPBEEN and IPQUE increased to NOPEN from NMATCH).

 30-MAR-1999 (MBT):
    Changed to deal with WCS components of NDFs.

 26-APR-1999 (MBT):
    Now erases .MORE.CCPACK.CURRENT_LIST component for unmatched
    NDFs.
1 FLATCOR
Divides a series of images by a flatfield

Usage:

   flatcor in out flat

Description:

   This routine applies a flat field correction to a series of images.
   If any of the input data have been flagged as saturated using a
   saturation value (instead of being marked as BAD) then the
   saturation values may be protected from modification.
2 Parameters
For information on individual parameters, select from the list below:
3 FLAT
FLAT = LITERAL (Read)
   Name of the image which contains the normalised (mean of one)
   flatfield data. This should have been produced by a program
   such as MAKEFLAT. The data should have a floating point HDS
   data type (_REAL or _DOUBLE).
   The name of this file may be specified using indirection
   through a file.
   [Global flatfield]
3 IN
IN = LITERAL (Read)
   Names of the images containing the data which are to have the
   flatfield correction applied.  The image names should be
   separated by commas and may include wildcards.
3 KEEPIN
KEEPIN = _LOGICAL (Read)
   Whether to keep (i.e. not delete) the input images (parameter IN)
   or not. Deleting the input images has the advantage of saving
   disk space, but should probably only be used if this program
   is part of a sequence of commands and the intermediary data
   produced by it are not important.

   The calibration master frame (parameter FLAT) is never deleted.

   The default for this parameter is TRUE and this cannot be
   overridden except by assignment on the command line or in
   response to a forced prompt.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 OUT
OUT = LITERAL (Write)
   Names of the output images. These may be specified as list of
   comma separated names, using indirection if required, or,
   as a single modification element (of the input names).
   The simplest modification element is the asterisk "*" which
   means each of the output images the same name as the
   corresponding images files. So,
      IN > *
      OUT > *
   signifies that all the images in the current directory should be
   used and the output images should have the same names.

   Other types of modification can also
   occur, such as,
      OUT > tmp_*
   which means call the output images the same as the input images but
   put tmp_ in front of the names. Replacement of a specified
   string with another in the output file names can also be used,
      OUT > tmp_*|debias|flattened|
   this replaces the string debias with flattened in any of the
   output names tmp_*.
3 SATURATION
SATURATION = _DOUBLE (Read)
   The value at which the input data has been saturated. This
   is only required if the saturation has been flagged using a
   non-BAD value.
   [1.0D6]
3 SETSAT
SETSAT = _LOGICAL (Read)
   If the input data has had a saturation value applied then this
   value should be set to TRUE. However, if the saturation has
   been applied within CCDPACK then this will not be necessary as
   this information will have been stored in the CCDPACK
   extension.  Note that data with different saturation
   properties (i.e. saturation values) which have not been set
   within CCDPACK will require separate processing (see notes).
   [FALSE]
3 PRESERVE
PRESERVE = _LOGICAL (Read)
   If the input data types are to be preserved and used for
   processing then this parameter should be set TRUE [default].
   If this parameter is set FALSE then the input data will be
   processed and returned in a suitable floating point
   representation. This option is useful if the output data will
   have a significant number of BAD values due to numeric errors
   (over or under flow), or if unacceptable loss of precision
   will occur if the data are processed in the original data type
   (due to rounding errors).

   If a global value for this parameter has been set using
   CCDSETUP then this will be used.
   [TRUE]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output images.
   [Output from FLATCOR]
2 Examples
flatcor frame1 frame1_f flatr
   In this example the data in image frame1 are corrected for the
   flatfield response stored in image flatr. The result of dividing
   FRAME1 by flatr is written to image frame1_f. If a saturation
   value has been applied to the data in frame1 then this will be
   automatically accommodated by FLATCOR providing the saturation
   has been applied within CCDPACK.

flatcor n4151r1 n4151r1f flatfield setsat=true saturation=32767
   In this example the data have had a saturation value applied
   which has not been recorded within CCDPACK and the required
   information has been supplied.

flatcor in='*' out='*_flattened' flat=master_flatr
   In this example all the images in the current directory are
   processed. The resultant data are written to files with the
   same name as the corresponding input images, but with the
   characters "_flattened" appended to the filename.
2 Notes
- If any of the input data have had their saturation values set by
  applications not within CCDPACK, then this routine will require
  this information if the values are to be propagated properly. If
  more than one saturation value has been used then the input
  frames will need to be processed singly. This is because FLATCOR
  only uses one saturation value per input group. If the
  saturation values have been set within CCDPACK (by DEBIAS)
  these will be processed correctly and may be different.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - TITLE   -- always "Output from FLATCOR"

      - KEEPIN  -- always TRUE

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets/different devices, or after a break of sometime.
   The intrinsic default behaviour of the application may be
   restored by using the RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE, PRESERVE and FLAT) have
   global values. These global values will always take precedence,
   except when an assignment is made on the command line.  In general
   global values may be set and reset using the CCDSETUP and
   CCDCLEAR commands, however, the FLAT parameter may only be set by
   a run of the application MAKEFLAT.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 14-MAY-1991 (PDRAPER):
    Original version.

 13-JAN-1992 (PDRAPER):
    Changed to add more generic facilities.

 2-FEB-1994 (PDRAPER):
    Added ability to delete input NDFs.

 6-OCT-1995 (PDRAPER)
    Updated for CCDPACK 2.0.
2 Implementation_Status
   - Supports processing of all non-complex numeric types.
     BAD pixels are processed as are all NDF components.
1 IDICURS
Reads coordinates from an X display device.

Usage:

   idicurs outlist device

Description:

   This routine reports and records positions selected from an
   X display device. Before using this routine an image must
   have been displayed using a routine such as KAPPA DISPLAY (SUN/95).
   IDICURS allows displayed images and graphics to be zoomed
   and scrolled during the location operation.
2 Parameters
For information on individual parameters, select from the list below:
3 ARROWS
ARROWS = _LOGICAL (Read)
   Only used if SCROLL is TRUE. This parameter defines whether or
   not the keyboard arrows are used to control the display scroll.
   Using the keyboard increases the accuracy of positioning but is
   slower. Pressing Shift-Arrow-Key increases the rate of scroll.
   [FALSE]
3 COLOUR
COLOUR = _INTEGER (Read)
   The colour of the position marker. This may take any value in
   the range 0-4.
   [4]
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the image display device.
   [Current-image display device]
3 IN
IN = LITERAL (Read)
   The names of a list of images which are to be "associated" with
   the output position list. Associating a list with an image means
   that the item "CURRENT_LIST" in its CCDPACK extension will be
   set to the name of the list. In future applications the image
   name may then be used instead of the list name (any derived
   lists will then be associated with the image instead), this is
   the usual method in CCDPACK.

   The names of the images may be given as "!" in which case none
   will be associated, otherwise the image names should be as a list
   separated by commas and may include wildcards.
   [!]
3 KEEPLUT
KEEPLUT = _LOGICAL (Read)
   If TRUE then the Look-Up-Table of the current device will be
   used "as is". Otherwise a greyscale will be loaded. The
   visibility of the cursor when using X windows and with
   scrolling enabled is often a problem. To help with this the
   primary colours are loaded into the first fews pens.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MEMORY
MEMORY = _INTEGER (Read)
   The memory of the device which is to be used. This can take
   the values 0 and 1. 0 means the base memory and 1 the overlay.
   [0]
3 MSIZE
MSIZE = _REAL (Read)
   Determines the size of the position marker. This is set as a
   fraction of the X dimension of the display.
   [0.03]
3 OUTLIST
OUTLIST = FILENAME (Write)
   The name of the file which is to contain the selected
   positions. The positions are written using the
   standard format in CCDPACK which is described in the notes
   section.
   [IDICURS.LIS]
3 SCROLL
SCROLL = _LOGICAL (Read)
   If TRUE then scrolling of the image display is enabled. This
   may be very slow on devices with poor graphics facilities
   and/or slow processors so is normally disabled.
   [FALSE]
3 THICK
THICK = _INTEGER (Read)
   The thickness of the position marker in device pixels.
   [1]
2 Examples
idicurs stars.pos
   In this example IDICURS writes the output positions to the
   formatted file stars.pos.

idicurs device=xw outlist=objects.dat memory=1
   In this example the overlay plane of an xwindows display
   can be manipulated and coordinates are read. The overlay
   could contain a contour map as produced by KAPPA TURBOCONT.

idicurs outlist=group_positions in='*'
   In this example an output position list group_positions is
   associated with all the images in the current directory. This
   method could be useful if all the images are not moved
   significantly with respect to one another. This one list then
   supplies initial positions for objects in all these images (using
   the centroid routine FINDCENT would then give each image an
   accurate position list from these initial positions).

idicurs scroll arrows
   In this example scrolling via the use of the keyboard arrows is
   enabled.
2 Notes
- Output position list format.

  CCDPACK format - Position lists in CCDPACK are formatted files
  whose first three columns are interpreted as the following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which may have different locations but are to be
  considered as the same point. Comments may be included in the
  file using the characters # and !. Columns may be separated by
  the use of commas or spaces.

- X windows display.

  It is possible to scroll the memory using either the pointer or
  keyboard arrows (if the keyboard arrows are chosen then holding
  down the shift keys will accelerate the motion) parameters
  SCROLL and ARROWS control these options. The C key performs a
  quick re-centre, cancelling any zoom and scroll. The Q key
  is used to exit from the routine.

- NDF extension items.

  On exit the CURRENT_LIST items in the CCDPACK extensions
  (.MORE.CCDPACK) of the input images are set to the name of the
  output list. These items will be used by other CCDPACK position
  list processing routines to automatically access the list.
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.

   The DEVICE parameter also has a global association. This is not
   controlled by the usual CCDPACK mechanisms, instead it works in
   co-operation with KAPPA (SUN/95) image display/control routines.
2 Authors
NE: Nick Eaton  (Durham University)

PDRAPER: Peter Draper (STARLINK - Durham University)
2 History
 10-JUL-1992 (NE + PDRAPER):
    Original version, based on IDI example routine.

 10-AUG-1992 (PDRAPER):
    Added prologue, user parameters, markers & rearranged triggers.

 10-MAR-1993 (PDRAPER):
    Final version for NAM demo, incorporated X and IKON support
    into one routine. Enabled scrolling and LUT control.

 19-JUL-1993 (PDRAPER):
    Updated prologue.

 9-OCT-1995 (PDRAPER):
    Updated for CCDPACK 2.0.
1 IMPORT
Imports FITS information into images

Usage:

   import in table

Description:

   This routine imports FITS information into the CCDPACK extension
   of a list of images. FITS information (probably provided by the
   instrument/telescope control systems) can be used to specify
   certain parameters which are required by CCDPACK to perform
   "automated" reductions. These might cover such items as the type
   of data (target, flatfield, bias frame etc.), the
   Analogue-to-Digital Conversion factor, the nominal readout noise,
   the position of any bias strips (over-scan regions) etc.

   The import is controlled by a "table" which specifies how FITS
   keyword values should be interpreted. This allows the evaluation
   of functions containing many FITS keywords as well as the mapping
   of CCDPACK recognised character items to arbitrary strings.
2 Parameters
For information on individual parameters, select from the list below:
3 IN
IN = LITERAL (Read)
   A list of image names which contain the raw bias frame data.
   The image names should be separated by commas and may include wildcards.
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 NAMELIST
NAMELIST = LITERAL (Read)
   The name of a file to contain a listing of the name of the
   input images. This is intended to be of use when using these
   same names with other applications (such as SCHEDULE).
   [!]
3 TABLE
TABLE = LITERAL (Read)
   The name of the table containing the description of how FITS
   keyword values are to be translated into CCDPACK extension
   items. See the topic "Table Format" for information on how to
   create a translation table.
   ['import.tab']
2 Examples
import in='*' table=$CCDPACK_DIR/WHTSKY.DAT
   This example shows all the images in the current directory being
   processed using the import control table $CCDPACK_DIR/WHTSKY.DAT.
2 Table_Format
   The import control (translation) table is an ordinary text file
   which contains instructions on how to transfer FITS information
   from the FITS extension to the CCDPACK extension of an image.
   "Translation" is required since no standard interpretation of
   FITS keywords can be made and because the items which may be
   required can be compounds of single FITS keyword values.

   In its most simple format a FITS control table is just a series of
   lines which contain the names of CCDPACK extension items and the
   names of the FITS keywords to which they map.

      Extension-item     FITS-keyword

   If the HDS type of the destination Extension-item is known this
   may be included.

      Extension-item     _HDS-type     FITS-keyword

   Normally this is inferred. This is the format used by the KAPPA
   application FITSIMP (as of KAPPA version 0.8-6U). Extension items
   are the names of CCDPACK items (such as FTYPE, FILTER etc.).
   These may be hierarchical, e.g. TIMES.DARK. Note that they exclude the
   "NDF_NAME.MORE.CCDPACK." part of the extension path name.

   To allow functions of FITS-keywords to be possible a second
   "declarative" form of statement is necessary.

      _HDS-type          FITS-keyword

   So for instance if you wanted to derive an exposure time for an
   observation which was given in milliseconds and which you wanted
   to convert into seconds you would use this sequence of commands

      _INTEGER          EXPOSURE
      TIMES.DARK        _DOUBLE    1000.0D0*EXPOSURE

   The "_INTEGER EXPOSURE" tells this application to find a FITS
   keyword of EXPOSURE and extract its value as an integer.  If you
   wanted to estimate the dark time from a knowledge of the start
   and end times (TAI0 and TAI1).

      _DOUBLE        TAIO
      _DOUBLE        TAI1
      TIMES.DARK    _DOUBLE       (TAI1-TAI0)

   The function may use any of the usual Fortran operators; +, -, *,
   /, ** and many others that are supported by the TRANSFORM package
   (SUN/61).

   Functions are allowed to not contain any FITS-keywords in which
   case the extension item will be assigned to the value, so for
   instance constants may be given.

      EXTENT.MINX   _INTEGER       1
      EXTENT.MINY   _INTEGER       1
      FILTER        _CHAR          NONE         ! Spectroscopic

   In this way import tables could actually be used to set all the
   required values in the CCDPACK extension (but see PRESENT also).

   Characters strings cannot be manipulated by functions so two
   special formats for translating their values are provided.
   The first form allows for the concatenation of keywords and
   the second the translation from a known word to another
   (which is usually one of the CCDPACK special names). The
   concatenation form looks like:

      _CHAR         FILTER
      _CHAR         HWP
      FILTER        _CHAR          FILTER//HWP

   Which results in the FILTER extension item being set to the
   concatenation of the values of the FITS keywords FILTER and
   HWP (you can concatentate more than two values).

   In the second special form the name of the destination extension
   item and (optionally) its type are given as usual followed by a
   FITS-keyword which contains the string to be translated. This is
   then followed by statements which translate an "input" string
   into an "output" string. I.e.

      FITS1 = Ext1 FITS2 = Ext2 FITS3 = Ext3 ... FITSn = Extn

   So for instance if you wanted to translate frame types to those
   recognised by CCDPACK you might use something like.

      FTYPE    _CHAR   OBSTYPE  OBJECT=TARGET -
                                FF=FLAT -
                                ZERO=BIAS

   Which would compare the value of the FITS-keyword OBSTYPE with
   the strings "OBJECT", "FF" and "ZERO" (case insensitive) and
   convert these into the values in the right-hand side of the equals
   sign.

   Logical data types are restricted to a single keyword whose value
   must be "YES", "TRUE", "T", "Y" for TRUE or "NO", "FALSE", "N",
   "F".

   Fields in the table may be separated by commas if desired, any
   amount of white space and tabs are also allowed. Comments may be
   placed anywhere and should start with the characters "#" or "!".
   Continuation onto a new line is indicated by use of "-".
2 CCDPACK_extension_items
   The CCDPACK extension of an image may contain the following items.
   The names and types of the extension items are those as used in
   import tables. More complete descriptions of the items can be
   found with the applications that use these values.

      Name            HDS data type    Description

      ADC             _DOUBLE          The analogue to digital
                                       conversion factor.
      BOUNDS.END1     _INTEGER         The end row or column of the
                                       first bias strip region.
      BOUNDS.END2     _INTEGER         The end row or column of the
                                       second bias strip region.
      BOUNDS.START1   _INTEGER         The first row or column of the
                                       first bias strip region.
      BOUNDS.START2   _INTEGER         The first row or column of the
                                       second bias strip region.
      DEFERRED        _DOUBLE          The deferred charge.
      DIRECTION       _CHAR            The "readout" direction (X or Y).
      EXTENT.MAXX     _INTEGER         Maximum X coordinate of useful
                                       region.
      EXTENT.MAXY     _INTEGER         Maximum Y coordinate of useful
                                       region.
      EXTENT.MINX     _INTEGER         Minimum X coordinate of useful
                                       region.
      EXTENT.MINY     _INTEGER         Minimum Y coordinate of useful
                                       region.
      FILTER          _CHAR            Filter name.
      FTYPE           _CHAR            Frame type (TARGET, BIAS, FLAT,
                                       DARK or FLASH)
      RNOISE          _DOUBLE          Readout noise (ADUs)
      SATURATION      _DOUBLE          Pixel saturation count.
      TIMES.DARK      _DOUBLE          Dark count time.
      TIMES.FLASH     _DOUBLE          Pre-flash time.
2 Authors
PDRAPER: Peter Draper (STARLINK - Durham University)
2 History
 7-DEC-1993 (PDRAPER):
    Original version.

 12-SEP-1995 (PDRAPER):
    Added more prologue.
1 MAKEBIAS
Produces a master from a set of bias frames.

Usage:

   makebias in out rnoise method  { alpha=?
                                  { sigmas=? niter=?
                                  { niter=?
                                  { min=? max=?

Description:

   This routine processes a series of bias frames, so as to produce
   a single "master bias" frame in which the noise levels are reduced.
   This master bias frame can then be used to de-bias other CCD frames
   (using DEBIAS). Using the given readout noise an, optional, variance
   component may be produced for the output data. The use of a variance
   component allows the effects of noise in bias subtraction to be
   properly monitored.

   MAKEBIAS also performs other functions during processing, such as
   estimating the readout noise (which it displays for comparison
   with the nominal value), estimating the data levels, zeroing the
   average value of the input data before combination (to more
   closely follow any drifts in the zero level) and also supports
   many different methods for performing the bias-frame data
   combination. The combination methods offer a mixture of very
   robust (median) to very efficient (mean) estimators.
2 Parameters
For information on individual parameters, select from the list below:
3 ALPHA
ALPHA = _REAL (Read)
   The fraction of extreme values to remove before combining
   the data at any pixel. This fraction is removed from each
   extreme so can only take a value in the range 0 to 0.5.
   Only used if METHOD="TRIMMED"
   [0.2]
3 GENVAR
GENVAR = _LOGICAL (Read)
   If TRUE then a variance component representative of the
   readout noise will be generated. If FALSE then no variance
   component will be generated. If a variance component is not
   generated then any future estimates of variance made using the
   output image will be underestimates, however, disk space savings
   can be made using this option, if future error analyses are
   not important. If this parameter is set FALSE then a readout
   noise estimate will not be requested.

   If a global value has been set using CCDSETUP this value
   will be used, and will be shown as the default.
   [FALSE]
3 IN
IN = LITERAL (Read)
   A list of image names which contain the raw bias frame data.
   The image names should be separated by commas and may include wildcards.
3 KEEPIN
KEEPIN = _LOGICAL (Read)
   Whether to keep (i.e. not delete) the input images or not.
   Deleting the input images has the advantage of saving disk
   space, but since the images input to this routine are raw data
   files (rather than processed intermediary files) they should be
   always be keep unless space considerations are at a very high
   premium.

   The default for this parameter is TRUE and this cannot be
   overridden except by assignment on the command line or in
   response to a forced prompt.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MAX
MAX = _REAL (Read)
   If METHOD = "THRESH" then this value defines the upper limit
   for values which can be used when combining data. Note that the
   value used for this parameter will not be corrected for zero
   pointing. Hence if the output image is to be zeroed then the
   maximum value should be a offset from zero (say some positive
   number 2 or 3 sigmas large). This could be used as a form of
   sigma clipping if no variances are to be generated.
3 METHOD
METHOD = LITERAL (Read)
   The method to be used to combine the data components of
   the input images. This may be set to any unique abbreviation of
   the following:

      -  MEAN      -- Mean of the input data values

      -  MEDIAN    -- Weighted median of the input data values

      -  TRIMMED   -- An "alpha trimmed mean" in which a fraction
                      alpha of the values are removed from
                      each extreme

      -  MODE      -- An iteratively "sigma clipped" mean which
                      approximates to the modal value

      -  SIGMA     -- A sigma clipped mean

      -  THRESHOLD -- Mean with values above and below given
                      limits removed

      -  MINMAX    -- Mean with the highest and lowest values
                      removed

      -  BROADENED -- A broadened median (the mean of a small
                      number of central values)

      -  CLIPMED   -- A sigma clipped median (like SIGMA except
                      that the median of the clipped values is used)

      -  FASTMED    -- Unweighted median of the input data values
   [MEDIAN]
3 MIN
MIN = _REAL (Read)
   If METHOD = "THRESH" then this value defines the lower limit
   for values which can be used when combining the data. Note that
   the value used for this parameter will not be corrected for zero
   pointing. Hence if the output image is to be zeroed then the
   minimum value should be a offset from zero (say some negative
   number 2 or 3 sigmas large). This could be used as a form of
   sigma clipping if no variances are to be generated.
3 MINPIX
MINPIX = _INTEGER (Read)
   The minimum number of good (i.e. not BAD) pixels required
   to contribute to the value of an output pixel. Output pixels
   not meeting this requirement are set BAD.
   [1]
3 NITER
NITER = _INTEGER (Read)
   The number of refining iterations performed if METHOD = "MODE".
   [7]
3 OUT
OUT = LITERAL (Read)
   Name of the output image. This has the master bias frame and
   the estimated variances. This name may be specified using
   indirection through a file.
3 PRESERVE
PRESERVE = _LOGICAL (Read)
   If TRUE then this indicates that the input data type is to be
   used for processing. If not then the output type will either
   be _REAL or _DOUBLE, the precision at which the combinations
   are performed.

   If a global value has been set using CCDSETUP then this will
   be used.
   [TRUE]
3 RNOISE
RNOISE = _DOUBLE (Read)
   The readout-noise standard deviation. This should be in the
   input data units (ADUs). A value for this will be worked out
   for each frame and reported at the end of the task. The
   average of these values is reported immediately before this
   parameter is accessed and can be used if a better estimate is
   not known. Note that the supplied estimate has some resilience
   to large-scale structure in the input frames, but will be
   incorrect if the input-frame backgrounds are severely sloped.
   If variances are not generated then this value will not be
   accessed.

   The value of this parameter may not be used if the USEEXT
   parameter is TRUE and will not be used if GENVAR is FALSE
   (i.e. no variances are being generated). If USEEXT is TRUE
   then readout noise values will be extracted from the images
   CCDPACK extensions. Only if a suitable value is not present
   will the value associated with this parameter be used.

   If a global value has been set up using CCDSETUP this value
   will be used, and will be shown as the default.
   [Dynamically derived value]
3 SIGMAS
SIGMAS = _REAL (Read)
   Number of standard deviations to reject data at. Used for
   "MODE", "SIGMA" and "CLIPMED" methods. For METHOD = "MODE" the
   standard deviation is estimated from the population of values.
   For METHOD = "SIGMA" this value is the readout noise.
   [4]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output image
   [Output from MAKEBIAS].
3 USEEXT
USEEXT = _LOGICAL (Read)
   If TRUE then the parameter RNOISE of this program will not
   be used and the required values will be obtained from the
   CCDPACK extensions of the input images instead. This method can
   only be used if the images have been "imported" using the
   programs PRESENT or IMPORT. Typically it is used when
   processing using CCDPACK's "automated" methods.

   Values obtained from the CCDPACK extension are identified in
   the output log by the presence of a trailing asterisk (*).
   [FALSE]
3 ZERO
ZERO = _LOGICAL (Read)
   Flag indicating whether the output master bias is to have a
   mean value of zero or not. If TRUE the input data components
   are ZERO-ed before combination, of the data. Note that if
   this option is chosen then it will be necessary to offset the
   master bias to the data before subtraction. This option is
   not allowed for unsigned input data type (unless PRESERVE is
   FALSE) as zeroing will make around half the data values
   invalid.
   [TRUE]
2 Examples
makebias in='"b1,b2,b3,b4,b5"' method=median out=mbias rnoise=10
   This forms a master bias from the data components of the images
   b1-b5. The combination mode chosen is the median. The output
   image is mbias whose variance has values based on a readout
   noise of 10 data units. Note the quotes when entering a comma
   separated list on the command line.

makebias in=^bias_frames.lis out=master_bias
   In this example the list of images is read from the file
   bias_frames.lis. This file may contain indirection to other files
   up to a depth of 7.

makebias in='*' out=master_bias
   In this example all the images in the directory are used.
2 Notes
- If a variance component is present it will not be propagated.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - RNOISE  -- dynamic value (but see below)

      - TITLE   -- always "Output from MAKEBIAS"

      - KEEPIN  -- always TRUE

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets/different devices, or after a break of sometime.
   The intrinsic default behaviour of the application may be
   restored by using the RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE, RNOISE, GENVAR, PRESERVE)
   have global values. These global values will always take
   precedence, except when an assignment is made on the command line.
   Global values may be set and reset using the CCDSETUP and
   CCDCLEAR commands.

   The parameter RNOISE will not be used if the USEEXT parameter is
   set TRUE. In this case values will be obtained from the input images
   CCDPACK extensions.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 19-MAR-1991 (PDRAPER):
    Original version.

 21-JUN-1991 (PDRAPER):
    Added log system calls.

 23-JUL-1991 (PDRAPER):
    Added IRG system and comments.

 19-AUG-1991 (PDRAPER):
    Changed to suppress generation of variances - considerable
    modifications.

 5-AUG-1993 (PDRAPER):
    Change to dynamically allocate certain workspace.

 29-SEP-1993 (PDRAPER):
    Added input NDF type checking and use of extension items
    for getting readout noise.

 15-JAN-1994 (PDRAPER):
    Now uses CCDPACK extension information.

 2-FEB-1994 (PDRAPER):
    Added option to delete input NDFs.

 12-SEP-1995 (PDRAPER):
    Added prologue information on KEEPIN and USEEXT.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK 2.0.
2 Implementation_Status
   - The routine supports BAD pixels and all numeric data types
     except COMPLEX.  All combinational arithmetic is performed using
     floating values.  The UNITS, AXIS and TITLE components
     are correctly propagated. Any input variances are ignored.
1 MAKECAL
Produces a dark or pre-flash calibration image.

Usage:

   makecal in expose out method { alpha=?
                                { sigmas=? niter=?
                                { niter=?
                                { min=? max=?

Description:

   This routine performs the combination of a series of dark count
   or pre-flash exposure frames. The input images should have been
   bias subtracted. The input data are divided by the exposure
   factors before combination into a calibration "master", giving an
   output image whose data represent one unit of the given exposure
   time per pixel. Thus the calibration frame should be multiplied
   by the appropriate factor before subtracting from other frames
   (i.e. by the dark time or the flash-exposure time). This can be
   performed by CALCOR and should be done prior to the production of
   a flatfield and flatfield correction. The data combination methods
   give a mixture of very robust (median) to very efficient (mean)
   methods to suit the data.
2 Parameters
For information on individual parameters, select from the list below:
3 ALPHA
ALPHA = _REAL (Read)
   The fraction of extreme values to remove before combining
   the data at any pixel. This fraction is removed from each
   extreme so can only take a value in the range 0 to 0.5.
   Only used if METHOD="TRIMMED"
   [0.2]
3 EXPOSE
EXPOSE = LITERAL (Read)
   Either:
   An exact number of exposure factors for the input images. The
   values must be in the same order as the input images.

   Or:
   A single value which applies to all the input images.

   Indirection through an ASCII file may be used to specify these
   values. If more than one line is required at prompt time then
   a continuation line may be requested by adding "-" to the end
   of the line.

   This parameter will not be used if USEEXT is set TRUE.
3 IN
IN = LITERAL (Read)
   A list of image names which contain the calibration data. The
   image names should be separated by commas and may include
   wildcards.

   NOTE the use of wildcards with this program is not recommended
   unless the input images all have the same calibration exposure
   factors. The order of processing of any wildcarded images cannot
   be guaranteed.
3 KEEPIN
KEEPIN = _LOGICAL (Read)
   Whether to keep (i.e. not delete) the input images or
   not. Deleting the input images has the advantage of saving disk
   space, but should probably only be used if this program is part
   of a sequence of commands and the intermediary data used by
   it are not important.

   The default for this parameter is TRUE and this cannot be
   overridden except by assignment on the command line or in
   response to a forced prompt.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MAX
MAX = _REAL (Read)
   If METHOD = "THRESH" then this value defines the upper limit
   for values which can be used when combining the data. This
   limit applies to the range of the output data (i.e. the values
   after the exposure factors have been divided into the input
   data).
3 METHOD
METHOD = LITERAL (Read)
   The method to be used to combine the data components of
   the input images. This may be set to any unique abbreviation of
   the following:

      -  MEAN      -- Mean of the input data values

      -  MEDIAN    -- Weighted median of the input data values

      -  TRIMMED   -- An "alpha trimmed mean" in which a fraction
                      alpha/2 of the values are removed from
                      each extreme

      -  MODE      -- An iteratively "sigma clipped" mean which
                      approximates to the modal value

      -  SIGMA     -- A sigma clipped mean

      -  THRESHOLD -- Mean with values above and below given
                      limits removed

      -  MINMAX    -- Mean with the highest and lowest values
                      removed

      -  BROADENED -- A broadened median (the mean of a small
                      number of central values)

      -  CLIPMED   -- A sigma clipped median (like SIGMA except
                      that the median of the clipped values is used)

      -  FASTMED    -- Unweighted median of the input data values
   [MEDIAN]
3 MIN
MIN = _REAL (Read)
   If METHOD = "THRESH" then this value defines the lower limit
   for values which can be used when combining the data. This
   limit applies to the range of the output data (i.e. the values
   after the exposure factors have been divided into the input
   data).
3 MINPIX
MINPIX = _INTEGER (Read)
   The minimum number of good (ie. not BAD) pixels required
   to contribute to the value of an output pixel. Output pixels
   not meeting this requirement are set BAD.
   [1]
3 NITER
NITER = _INTEGER (Read)
   The number of refining iterations performed if METHOD = "MODE".
   [7]
3 OUT
OUT = LITERAL (Write)
   Name of the output image to contain the calibration data.
   Note this image will have a type of at least _REAL.
3 SIGMAS
SIGMAS = _REAL (Read)
   Number of standard deviations to reject data at. Used for
   "MODE", "SIGMA" and "CLIPMED" methods. For METHOD = "MODE" the
   standard deviation is estimated from the population of values, for
   METHOD = "SIGMA" and "CLIPMED" the variances are used. If no
   variances exist then one is estimated from the population of
   values.
   [4.0]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output image.
   [Output from MAKECAL]
3 TYPE
TYPE = LITERAL (Read)
   The frame types of the input data. This should be a recognised
   name "FLASH", "DARK" or "NONE". The value of this parameter
   affects the output image frame type which will be set to
   "MASTER_FLASH" or "MASTER_DARK" or "MASTER_?".
   [NONE]
3 USEEXT
USEEXT = _LOGICAL (Read)
   If TRUE then the EXPOSE parameter of this program will not
   be used and the required values will be obtained from the
   CCDPACK extensions of the input images instead. This method can
   only be used if the images have been "imported" using the
   programs PRESENT or IMPORT. Typically it is used when
   processing using CCDPACK's "automated" methods.

   Values obtained from the CCDPACK extension are identified in
   the output log by the presence of a trailing asterisk (*).
   [FALSE]
2 Examples
makecal in='"f1,f2,f3,f4"' expose='"100,200,300,400"' method=median
        out=master_flash
   This example forms a flash calibration image from the data in
   images f1,f2,f3 and f4. The data are divided by the relative
   exposure factors before combination. The combination method
   used is the (weighted) median, the resultant data are written
   to the image master_flash.

makecal '"d1,d2,d3,d4"' 1 master_dark trimmed alpha=0.2
   This example produces a dark-count-calibration frame from the
   data in images d1,d2,d3 and d4. The exposure factors are given
   as 1 which probably indicates that the dark-exposure times in
   these datasets are exactly right to correct any subsequent
   data frames. The combination mode used is the trimmed mean with
   trimming fraction 0.2 and the output data are written to image
   master_dark.

makecal ^flash_frames ^flash_exposures flash_master
   In this example a list of frames to be processed is passed to
   the program by indirection through an ASCII file
   flash_frames.dat, the corresponding exposure times are passed
   from the file flash_exposures.dat. This is probably the only
   safe method for entering images to this routine other than as in
   the above examples. Using wildcards for the file
   specifications will mean that the exposures cannot be
   associated correctly. Thus wildcards should not be used except
   when the input images have the same exposure times.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - TITLE  -- always "Output from MAKECAL"

      - KEEPIN -- always TRUE

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets/different devices, or after a break of sometime.
   The intrinsic default behaviour of the application may be
   restored by using the RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.

   The parameter EXPOSE will not be used if the USEEXT parameter is
   set TRUE. In this case the necessary values will be extracted from
   the CCDPACK extensions of the input images.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 28-MAY-1991 (PDRAPER):
    Original Version.

 5-JUL-1993 (PDRAPER):
    Made some workspace dynamic.

 29-SEP-1993 (PDRAPER):
    Added the TYPE parameter. Incorporated input frame type
    checking etc.

 2-FEB-1994 (PDRAPER):
    Added deletion of input NDFs.

 19-JUL-1995 (PDRAPER):
    Removed AIF_ calls and replace with PAR_.

 12-SEP-1995 (PDRAPER):
    Added prologue descriptions of KEEPIN and USEEXT.

 6-OCT-1995 (PDRAPER):
    Updated to CCDPACK 2.0.
2 Implementation_Status
   - The routine supports BAD pixels and all data types except
     COMPLEX. All combinational arithmetic is performed in floating
     point. The AXIS and TITLE components are correctly propagated.
     The variances are propagated through the combination processing,
     assuming that the input data have a normal distribution.
1 MAKEFLAT
Produces a flatfield calibration image.

Usage:

   makeflat in out method { alpha=?
                          { sigmas=?
                          { sigmas=? niter=?
                          { min=? max=?

Description:

   This routine combines a set of frames into a flatfield. The
   input data should be of a photometrically flat source, and
   should be corrected for any instrumental effects. The output
   calibration frame is normalised to have an average value of one.

   The input data are filtered in an attempt to remove any small
   blemishes etc. before combination.  This is achieved by smoothing
   using a boxfilter and then comparing with the original data. An
   estimate of the standard deviation of each pixel from its
   surroundings is made. Pixels deviating by more than GAMMA
   standard deviations are rejected. This procedure is then
   iterated ITER times. In this way, all image features with a
   scale size comparable with, or smaller than, the smoothing area
   size are rejected.
2 Parameters
For information on individual parameters, select from the list below:
3 ALPHA
ALPHA = _REAL (Read)
   The fraction of extreme values to remove before combining
   the data at any pixel. This fraction is removed from each
   extreme so can only take a value in the range 0 to 0.5.
   Only used if METHOD="TRIMMED"
   [0.2]
3 BOXSIZE
BOXSIZE(2) = _INTEGER (Read)
   The X and Y sizes (in pixels) of the rectangular box to be
   applied to smooth the input images. If only a single value is
   given, then it will be duplicated so that a square filter is
   used. The values given will be rounded up to positive odd
   integers if necessary. The values should be adjusted to be
   larger than the size of any expected defects.
   [15,15]
3 CLEAN
CLEAN = _LOGICAL (Read)
   Whether or not to attempt to clean the input images of any
   defects. For some data types (i.e. spectra) small scale
   strutures and sharp edges may be real and can be protected
   against removal by setting this parameter FALSE.
   [TRUE]
3 GENVAR
GENVAR = _LOGICAL (Read)
   If TRUE and USEVAR is also FALSE, then "variances" for the
   output image will be generated using the natural variation in
   the input images. These values can be used to estimate the
   quality of the output flatfield.

   Note that for this option to work well you should have many
   images and that any output pixels that only have one input
   image contributing to their value will have their variances
   set bad.
   [FALSE]
3 GAMMA
GAMMA = _REAL (Read)
   The number of standard deviations by which a value has to
   deviate from the local mean (defined by the mean within a box
   of BOXSIZE(1) by BOXSIZE(2) pixels) before it is considered to
   be in error. Aberrant pixels are removed from the data before
   the next "cleaning" iteration is performed.
   [3.0]
3 IN
IN = LITERAL (Read)
   A list image names. These contain the flatfield data.  The image
   names should be separated by commas and may include wildcards.
3 ITER
ITER = _INTEGER (Read)
   The number of defect rejecting iterations.
   [3]
3 KEEPIN
KEEPIN = _LOGICAL (Read)
   Whether to keep (i.e. not delete) the input images or
   not. Deleting the input images has the advantage of saving disk
   space, but should probably only be used if this program is part
   of a sequence of commands and the intermediary data used by
   it are not important.

   The default for this parameter is TRUE and this cannot be
   overridden except by assignment on the command line or in
   response to a forced prompt.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MAX
MAX = _REAL (Read)
   If METHOD = "THRESH" then this value defines the upper limit
   for values which can be used when combining the data. This
   limit applies to the output data range.
3 METHOD
METHOD = LITERAL (Read)
   The method to be used to combine the data components of
   the input images. This may be set to any unique abbreviation of
   the following:

      -  MEAN      -- Mean of the input data values

      -  MEDIAN    -- Weighted median of the input data values

      -  TRIMMED   -- An "alpha trimmed mean" in which a fraction
                      alpha of the values are removed from
                      each extreme

      -  MODE      -- An iteratively "sigma clipped" mean which
                      approximates to the modal value

      -  SIGMA     -- A sigma clipped mean

      -  THRESHOLD -- Mean with values above and below given
                      limits removed

      -  MINMAX    -- Mean with the highest and lowest values
                      removed

      -  BROADENED -- A broadened median (the mean of a small
                      number of central values)

      -  CLIPMED   -- A sigma clipped median (like SIGMA except
                      that the median of the clipped values is used)

      -  FASTMED    -- Unweighted median of the input data values
   [MEDIAN]
3 MIN
MIN = _REAL (Read)
   If METHOD = "THRESH" then this value defines the lower limit
   for values which can be used when combining the data. This
   limit applies to the output data range.
3 MINPIX
MINPIX = _INTEGER (Read)
   The minimum number of good (ie. not BAD) pixels required which
   are required to contribute to the value of an output pixel.
   Output pixels not meeting this requirement are set BAD.
   [1]
3 NITER
NITER = _INTEGER (Read)
   The number of refining iterations performed if METHOD = "MODE".
   [7]
3 OUT
OUT = LITERAL (Write)
   Name of an image to contain the output flatfield data. Note this
   image will have a precision of at least _REAL. This name may be
   specified using indirection through a file.
3 SIGMAS
SIGMAS = _REAL (Read)
   Number of standard deviations to reject data at. Used for
   "MODE", "SIGMA" and "CLIPMED" methods. For METHOD = "MODE" the
   standard deviation is estimated from the population of values, for
   METHOD = "SIGMA" and "CLIPMED" the variances are used. If no
   variances exist then one is estimated from the population of
   values.
   [4.0]
3 USEVAR
USEVAR = _LOGICAL (Read)
   If TRUE and all the input images contain error information
   (variances), then these will be used as weights during image
   combination and will be propagated to the output image.
   [TRUE]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output image.
   [Output from MAKEFLAT]
2 Examples
makeflat in='"f1,f2,f3,f4,f5"' method=median out=mflat
   This forms a master flat field from images f1 to f5. The input
   data are first cleaned using the default values for the GAMMA
   and ITER parameters. The combination mode chosen is the
   median.  The output image is mflat. Note the quotes when
   entering a comma separated list on the command line.

makeflat in=^flat_frames.lis out=master_flat
   In this example the list of images is read from the file
   flat_frames.lis. This file may contain indirection to other files
   up to a depth of 7.

makeflat in='flatr/*' out='flatr/master_flat' gamma=2.5 iter=5
   In this example all the images in the subdirectory bias/ are
   used. The input data are severely cleaned using a noise cut
   of 2.5 standard deviations (current) and 5 iterations. Such
   severe cleaning is only recommended when many input frames
   are given, if this is not the case then BAD areas may be seen
   in the output image.
makeflat in='ff*' out=master_flat gamma=10 iter=1
   In this example all the frames "ff*" are combined into a master
   flatfield. Defect rejection is still performed but with
   gamma set so high and by performing only one iteration
   almost no bad data will be detected.

2 Notes
- The data input into this routine should have bias strip
  regions and any badly vignetted parts removed.
- The input images are normalised to have a mean of one
  before being combined. This makes sure that all input images
  contribute to the final result (even though, for instance,
  they were taken on a source of varying brightness, e.g. the
  twilight sky).

2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - TITLE   -- always "Output from MAKEFLAT"

      - KEEPIN  -- always TRUE

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets/different devices, or after a break of sometime.
   The intrinsic default behaviour of the application may be
   restored by using the RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 7-MAY-1991 (PDRAPER):
    Original version.

 5-JUL-1993 (PDRAPER):
    Made some workspace dynamic.

 2-FEB-1994 (PDRAPER):
    Added ability to delete input files.

 12-SEP-1995 (PDRAPER):
    Added KEEPIN.

 6-OCT-1995 (PDRAPER):
    Updated to CCDPACK 2.0.
2 Implementation_Status
   - The routine supports BAD pixels and all data types except
     COMPLEX.  All combinational arithmetic is performed using
     floating point.  The AXIS and TITLE components are correctly
     propagated. The output is a ratio so the units are set to blank.
     The variances are propagated through the combination
     processing, assuming that the input data have a normal
     distribution.
1 MAKEMOS
Make a mosaic by combining and (optionally) normalising a set of
images.

Usage:

   makemos in out

Description:

   This is a comprehensive application for combining a set of images
   (normally representing overlapping coverage of an object) into a
   single mosaic. It addresses the problems of (a) combining a
   sequence of separate data sets into a single image and (b)
   optionally normalising each image so that they match each other in
   regions where they overlap. Mutual alignment of the separate images
   is not performed by this application and must be addressed
   beforehand (although images may be aligned to the nearest pixel
   simply by shifting their pixel origin).

   MAKEMOS registers the set of images supplied by matching their
   pixel indices and then forms a mosaic by combining the separate
   input pixel values at each location using a nominated
   data-combination method (by default, it takes the median).  The
   resulting mosaic is of sufficient extent to accommodate all the
   input data, with any output data pixels which do not receive
   values from the input being set to the "bad" pixel value.
   Account is taken of variance information associated with the
   input images, and all calculations are optimally weighted to
   minimise the output noise. Output variance estimates for the
   final mosaic may also be produced.

   Forming a mosaic in this way will normally be successful only so
   long as the input data are mutually consistent. Unfortunately,
   this is often not the case, since data frequently have differing
   effective exposure times and background levels which give
   discontinuities in the final mosaic. Thus, MAKEMOS also addresses
   the problem of normalising the input images to make them mutually
   consistent. It does this by optionally applying optimised
   multiplicative and/or additive corrections (termed scale-factor
   and zero-point corrections) to each image before forming the
   mosaic.  These optimised corrections are determined by
   inter-comparing the input images in pairs, using the regions where
   they overlap to determine the relative scale-factor and/or
   zero-point difference between each pair.  A self-consistent set
   of corrections is then found which, when applied to each input
   image, will best eliminate these observed differences and give a
   smooth mosaic.
2 Parameters
For information on individual parameters, select from the list below:
3 ALPHA
ALPHA = _REAL (Read)
   The fraction of extreme values to remove before combining
   input data if the "trimmed mean" data combination method is
   selected for producing the output mosaic (see the METHOD
   parameter). A fraction alpha (approximately) of the available
   values is removed from each extreme. This may take values in
   the range 0 to 0.5.
   [0.2]
3 CMPVAR
CMPVAR = _LOGICAL (Read)
   This parameter controls the use of statistical error
   (variance) information contained in the input images when they
   are inter-compared in pairs to derive scale-factor or
   zero-point corrections. It is only used if either SCALE or
   ZERO is set to TRUE and if two or more of the input images
   contain variance information (a "reference image" also counts,
   if supplied). In this case, if CMPVAR is set to TRUE, then
   variance information is used to correctly weight the input
   data whenever a pair of input images are inter-compared and both
   have variance information available.

   The default behaviour is to use variance information during
   inter-comparisons. This may be suppressed by setting CMPVAR to
   FALSE, which sometimes gives faster execution without greatly
   affecting the result (also see the "Algorithms Used" section).
   However, if input data with similar values have widely
   differing variance values within the same input image, then use
   of input variance information is recommended (this could
   happen, for instance, if an input image is the result of a
   previous mosaic-ing process).
   [TRUE]
3 GENVAR
GENVAR = _LOGICAL (Read)
   If GENVAR is set to TRUE and all the input NDFs supplied
   contain statistical error (variance) information, then
   variance information will also be calculated for the output
   mosaic NDF, provided that USEVAR is also TRUE.

   Otherwise if GENVAR is TRUE and either USEVAR is FALSE or
   some of the input NDFs do not contain error information, then
   output variances will be generated using the natural
   variations in the input data. Obviously this method should
   only be used if there are many input datasets, which also
   provide good coverage of the output area. If this option is
   chosen any regions of the output image that have only one
   input value will have their associated variances set bad.

   The default for this parameter depends on the presence of error
   information in the input NDFs. If all have error information
   then the default is TRUE, otherwise it is FALSE.

   [DYNAMIC]
3 IN
IN = LITERAL (Read and [optionally] Write)
   A list of the names of the input images which are to be combined
   into a mosaic. The image names should be separated by commas
   and may include wildcards.

   The input images are normally accessed only for reading.
   However, if the MODIFY parameter is set to TRUE (and
   scale-factor or zero-point corrections are being calculated)
   then each of the "input" images will be modified by applying the
   calculated corrections.
3 LISTIN
LISTIN = _LOGICAL (Read)
   If a TRUE value is given for this parameter (the default),
   then the names of all the images supplied as input will be
   listed (and will be recorded in the logfile if this is
   enabled).  Otherwise, this listing will be omitted.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter, then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MAX
MAX = _REAL (Read)
   Upper limit for input data values which may contribute to the
   output mosaic if the "threshold" data combination method is
   selected (see the METHOD parameter). [Maximum real value]
3 MAXIT
MAXIT = _INTEGER (Read)
   This parameter specifies the maximum number of iterations to
   be used when inter-comparing pairs of input image data arrays to
   determine their relative scale-factor and/or zero-point. It is
   only used if (a) both the SCALE and ZERO parameters have been
   set to TRUE, or (b) SCALE has been set to TRUE and statistical
   error (variance) information obtained from the input images is
   being used to weight the data during the inter-comparison. In
   other cases the inter-comparison operation is not iterative.

   If the specified number of iterations is exceeded without
   achieving the accuracy required by the settings of the TOLS
   and TOLZ parameters, then a warning message will be issued,
   but the results will still be used. The value given for MAXIT
   must be at least one.
   [20]
3 METHOD
METHOD = LITERAL (Read)
   The method to be used to combine the input images' data values
   to form the output mosaic. This may be set to any unique
   abbreviation of the following:

      -  MEAN      -- Mean of the input data values

      -  MEDIAN    -- Weighted median of the input data values

      -  TRIMMED   -- An "alpha trimmed mean" in which a fraction
                      alpha of the values are removed from
                      each extreme

      -  MODE      -- An iteratively "sigma clipped" mean which
                      approximates to the modal value

      -  SIGMA     -- A sigma clipped mean

      -  THRESHOLD -- Mean with values above and below given
                      limits removed

      -  MINMAX    -- Mean with the highest and lowest values
                      removed

      -  BROADENED -- A broadened median (the mean of a small
                      number of central values)

      -  CLIPMED   -- A sigma clipped median (like SIGMA except
                      that the median of the clipped values is used)

      -  FASTMED    -- Unweighted median of the input data values
   [MEDIAN]
3 MIN
MIN = _REAL (Read)
   Lower limit for input data values which may contribute to the
   output mosaic if the "threshold" data combination method is
   selected (see the METHOD parameter).
   [Minimum real value]
3 MODIFY
MODIFY = _LOGICAL (Read)
   By default, the images supplied via the IN parameter are
   regarded as "input" images and will not be modified. However, if
   scale-factor or zero-point corrections are being calculated
   (see the SCALE and ZERO parameters), then giving a TRUE value
   for MODIFY indicates that these images are themselves to be
   modified by applying the calculated corrections before the
   output mosaic is formed.

   This facility provides a means of applying corrections to
   individual images (e.g. to mutually normalise them) without
   necessarily also combining them into a mosaic. It may also be
   useful if several invocations of MAKEMOS are to be made with
   different parameter settings; by specifying MODIFY=TRUE for
   the first invocation, scale-factor or zero-point corrections
   may be applied to normalise the input data so that this need
   not be repeated on each invocation.

   WARNING: Caution should be exercised if setting MODIFY to
   TRUE, as information about the uncorrected data values of the
   "input" images will not be retained.
   [FALSE]
3 NITER
NITER = _REAL (Read)
   Maximum number of refining iterations used if the "mode" data
   combination method is selected (see the METHOD parameter).
   [7]
3 OPTOV
OPTOV = _INTEGER (Read)
   This parameter specifies the "optimum number of overlaps"
   which an image should have with its neighbours and controls the
   number of inter-comparisons made between pairs of overlapping
   images when determining scale-factor or zero-point corrections
   (see the SCALE and ZERO parameters).

   The need for this parameter arises because when multiple input
   images are supplied there may be a large number of potential
   pair-wise overlaps between them.  To prevent them all being
   used, which may take far longer than is justified, this set of
   potential overlaps is reduced by elimination, starting with
   the smallest ones (as measured by the number of overlapping
   pixels) and continuing until no more overlaps can be removed
   without reducing the number of overlaps of any image below the
   value given for OPTOV.  In practice, this means that each image
   will end up with about (although not exactly) OPTOV overlaps
   with its neighbours, with the largest overlaps being
   preferred.

   Note that although this algorithm is effective in reducing the
   number of overlaps, it is not guaranteed always to result in a
   set of overlaps which allow the optimum set of corrections to
   be calculated. In practice, problems from this cause are
   unlikely unless unusual patterns of image overlap are involved,
   but they may be solved by increasing the value of OVOPT and/or
   constructing the required mosaic in pieces by running MAKEMOS
   several times on different sets of input images.

   In some cases, reducing the value of OVOPT may reduce the
   number of inter-comparisons made, and hence reduce the
   execution time, but if too few inter-comparisons are made,
   there is a risk that the corrections obtained may not be the
   best possible.

   This parameter is only used if SCALE or ZERO is set to TRUE.
   [3]
3 OUT
OUT = image (Write)
   Name of the image to contain the output mosaic. This is normally
   mandatory. However, if the "input" images are being modified (by
   setting the MODIFY parameter to TRUE), then it may optionally
   be omitted by supplying a null value (!). In this case, no
   output mosaic will be formed.
3 PRESERVE
PRESERVE = _LOGICAL (Read)
   If a TRUE value is given for this parameter (the default),
   then the data type of the output mosaic image will be derived
   from that of the input image with the highest precision, so that
   the input data type will be "preserved" in the output image.
   Alternatively, if a FALSE value is given, then the output image
   will be given an appropriate floating point data type.

   When using integer input data, the former option is useful for
   minimising the storage space required for large mosaics, while
   the latter typically permits a wider output dynamic range when
   necessary. A wide dynamic range is particularly important if a
   large range of scale factor corrections are being applied (as
   when combining images with a wide range of exposure times).

   If a global value has been set up for this parameter using
   CCDSETUP, then that value will be used.
   [TRUE]
3 REF
REF = image (Read)
   If scale-factor and/or zero-point corrections are being
   applied (see the SCALE and ZERO parameters) then, by default,
   these are normalised so that the median corrections are unity
   and zero respectively. However, if an image is given via the REF
   parameter (so as to over-ride its default null value), then
   scale-factor and zero-point corrections will instead be
   adjusted so that the corrected data are normalised to the
   "reference image" supplied.

   This provides a means of retaining the calibration of a set of
   data, even when corrections are being applied, by nominating a
   reference image which is to remain unchanged. It also allows the
   output mosaic to be normalised to any externally-calibrated
   image with which it overlaps, and hence allows a calibration to
   be transferred from one set of data to another.

   If the image supplied via the REF parameter is one of those
   supplied as input via the IN parameter, then this serves to
   identify which of the input images should be used as a
   reference, to which the others will be adjusted. In this case,
   the scale-factor and/or zero-point corrections applied to the
   nominated input image will be set to one and zero, and the
   corrections for the others will be adjusted accordingly.

   Alternatively, if the reference image does not appear as one of
   the input images, then it will be included as an additional set
   of data in the inter-comparisons made between overlapping images
   and will be used to normalise the corrections obtained (so
   that the output mosaic is normalised to it). However, it will
   not itself contribute to the output mosaic in this case.
   [!]
3 SCALE
SCALE = _LOGICAL (Read)
   This parameter specifies whether MAKEMOS should attempt to
   adjust the input data values by applying scale-factor (i.e.
   multiplicative) corrections before combining them into a
   mosaic. This would be appropriate, for instance, if a series
   of images had been obtained with differing exposure times; to
   combine them without correction would yield a mosaic with
   discontinuities at the image edges where the data values
   differ.

   If SCALE is set to TRUE, then MAKEMOS will inter-compare the
   images supplied as input and will estimate the relative
   scale-factor between selected pairs of input data arrays where
   they overlap.  From this information, a global set of
   multiplicative corrections will be derived which make the
   input data as mutually consistent as possible. These
   corrections will be applied to the input data before combining
   them into a mosaic.

   Calculation of scale-factor corrections may also be combined
   with the use of zero-point corrections (see the ZERO
   parameter). By default, no scale-factor corrections are
   applied.
   [FALSE]
3 SIGMAS
SIGMAS = _REAL (Read)
   Number of standard deviations at which to reject values if the
   "mode", "sigma" or "clipmed" data combination methods are selected
   (see the METHOD parameter). This value must be positive. [4.0]
3 SKYSUP
SKYSUP = _REAL (Read)
   A positive "sky noise suppression factor" used to control the
   effects of sky noise when pairs of input images are
   inter-compared to determine their relative scale-factor. It is
   intended to prevent the resulting scale-factor estimate being
   biased by the many similar values present in the "sky
   background" of typical astronomical data.  SKYSUP controls an
   algorithm which reduces the weight given to data where there
   is a high density of points with the same value, in order to
   suppress this effect. It is only used if a scale factor is
   being estimated (i.e. if SCALE is TRUE).

   A SKYSUP value of unity can often be effective, but a value
   set by the approximate ratio of sky pixels to useful object
   pixels (i.e. those containing non-sky signal) in a "typical"
   image overlap region will usually be better. The precise value
   is not critical. A value of zero disables the sky noise
   suppression algorithm completely. The default value for SKYSUP
   is 10**(n/2.0), where n is the number of significant
   dimensions in the output mosaic. Hence, for a 2-dimensional
   image, it will default to 10 which is normally reasonable for
   CCD frames of extended objects such as galaxies (a larger
   value, say 100, may give slightly better results for star
   fields).
   [10**(n/2.0)]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output mosaic image. [Output from MAKEMOS]
3 TOLS
TOLS = _REAL (Read)
   This parameter defines the accuracy tolerance to be achieved
   when inter-comparing pairs of input image data arrays to
   determine their relative scale-factor. It is only used if the
   inter-comparison is to be performed iteratively, which will be
   the case if (a) both the SCALE and ZERO parameters have been
   set to TRUE, or (b) SCALE has been set to TRUE and statistical
   error (variance) information obtained from the input images is
   being used to weight the data during the inter-comparison.

   The value given for TOLS specifies the tolerable fractional
   error in the estimation of the relative scale-factor between
   any pair of input images. This value must be positive.
   [0.001]
3 TOLZ
TOLZ = _REAL (Read)
   This parameter defines the accuracy tolerance to be achieved
   when inter-comparing pairs of input image data arrays to
   determine their relative zero-points. It is only used if the
   inter-comparison is to be performed iteratively, which will be
   the case if both the SCALE and ZERO parameters have been set
   to TRUE.

   The value given for TOLZ specifies the tolerable absolute
   error in the estimation of the relative zero-point between any
   pair of input images whose relative scale-factor is unity. If
   the relative scale-factor is also being estimated, then the
   value used is multiplied by this relative scale-factor
   estimate (which reflects the fact that an image with a larger
   data range can tolerate a larger error in estimating its
   zero-point). The TOLS value supplied must be positive.
   [0.05]
3 USEVAR
USEVAR = _LOGICAL (Read)
   The value of this parameter specifies whether statistical
   error (variance) information contained in the input images
   should be used to weight the input data when they are combined
   to produce the output mosaic. This parameter is only used if
   all the input images contain variance information, in which case
   the default behaviour is to use this information to correctly
   weight the data values being combined. If output variances are
   to be generated (specified by the GENVAR parameter) then this
   parameter (and GENVAR) should be set TRUE.

   If insufficient input variance information is available, or if
   USEVAR is set to FALSE, then weights are instead derived from
   the scale-factor corrections applied to each image (see the
   WEIGHTS parameter for details); unit weight is used if no
   scale-factor corrections are being applied. Alternatively,
   explicit weights may be given for each input image via the
   WEIGHTS parameter.

   If you want to add estimated variances to the output image
   (based on the natural variations of the input images) and all
   your input images contain variances then you will need to set
   this parameter FALSE (see GENVAR).
   [TRUE]
3 WEIGHTS
WEIGHTS( ) = _REAL (Read)
   A set of positive weighting factors to be used to weight the
   input images when they are combined. If this parameter is used,
   then one value should be given for each input image and the
   values should be supplied in the same order as the input images.
   If a null (!) value is given (the default) then a set of
   weights will be generated internally - these will normally all
   be unity unless scale-factor corrections are being applied
   (see the SCALE parameter), in which case the reciprocal of the
   scale factor correction for each input image is used as its
   weight. This corresponds to the assumption that variance is
   proportional to data value in each input image.

   This parameter is only used if the USEVAR parameter is set to
   FALSE or if one or more of the input images does not contain
   variance information. Otherwise, the input variance values are
   used to weight the input data when they are combined.
   [!]
3 ZERO
ZERO = _LOGICAL (Read)
   This parameter specifies whether MAKEMOS should attempt to
   adjust the input data values by applying zero-point (i.e.
   additive) corrections before combining them into a mosaic.
   This would be appropriate, for instance, if a series of images
   had been obtained with differing background (sky) values; to
   combine them without correction would yield a mosaic with
   discontinuities at the image edges where the data values
   differ.

   If ZERO is set to TRUE, then MAKEMOS will inter-compare the
   images supplied as input and will estimate the relative
   zero-point difference between selected pairs of input data
   arrays where they overlap.  From this information, a global
   set of additive corrections will be derived which make the
   input data as mutually consistent as possible. These
   corrections will be applied to the input data before they are
   combined into a mosaic.

   Calculation of zero-point corrections may also be combined
   with the use of scale-factor corrections (see the SCALE
   parameter). By default, no zero-point corrections are applied.
   [FALSE]
2 Examples
makemos '*' mymos
   Combines the set of images matching the wild-card "*" into a
   single mosaic called mymos. By default, no normalisation
   corrections are applied to the input data, which are combined
   by taking the median in regions where several input images
   overlap.

makemos in='"a,b,c,d"' out=combined zero
   Combines the four overlapping input images a, b, c and d into a
   single mosaic called combined. Optimised zero-point
   corrections are derived and applied to the data before
   combining them so as to make them as mutually consistent as
   possible. This helps to eliminate unwanted discontinuities in
   the output mosaic.

makemos '"a,b,c,d"' out=combined scale
   Combines the four images a, b, c and d as above, but makes
   optimised corrections to the scale factor of each (i.e.
   multiplies each by an appropriate constant) before they are
   combined. This would be appropriate if, for instance, the
   input data were CCD frames acquired using different exposure
   times and had subsequently had their sky background removed.

makemos in='frame*' out=result scale zero
   Combines the set of input images matching the wild-card "frame*"
   into a single mosaic called result. Optimised scale factor and
   zero point corrections are applied before combining the data.
   This would be appropriate if, for instance, the input data had
   been acquired using different exposure times and also had
   different levels of sky background.

makemos in='frame*' out=result scale zero modify
   This is identical to the previous example, except that in
   addition to forming the output result, the MODIFY parameter
   causes all the input images to be modified using the same
   optimised corrections as are applied when forming the mosaic,
   thus mutually normalising all the separate images.  Note that
   this feature should be used with care, as information about
   the original normalisation of the input data will be lost.
   When MODIFY is specified, a null value "!" may be given for
   the OUT parameter if an output mosaic is not actually
   required.

makemos '"a,b,c,d"' result scale zero ref=b
   This example merges the four input images a, b, c and d into a
   mosaic called result. In calculating the optimised scale
   factor and zero point corrections to apply, b is regarded as a
   "reference image" and the other images are normalised to it. This
   means that if b has previously been calibrated, then the
   output mosaic will inherit this calibration.

makemos '"a,b,c,d"' result scale zero ref=e
   This example is identical to that above, except that the
   "reference image" e is not one of the input images and will not
   form part of the output mosaic. Nevertheless, the scale factor
   and zero point corrections applied will be such that all the
   input images are normalised to it (the reference image must
   overlap with at least one of the input images). Thus, if e has
   been calibrated, this calibration will be transferred to the
   output mosaic (note that if MODIFY is specified, then the
   calibration could also be transferred to each of the input
   images).

makemos 'frame*' mosaic nopreserve nogenvar method=minmax skysup=0
   This example illustrates some of the less commonly used
   MAKEMOS options. nopreserve causes the output data type to be
   a floating point type rather than preserving the input data
   type, nogenvar prevents generation of an output variance array
   (possibly to save space with a large mosaic), method=minmax
   indicates that output pixels are to be calculated by taking
   the mean of input pixels after discarding the lowest and
   highest values, and skysup=0 is used to disable the sky noise
   suppression algorithm (perhaps for data which contain few sky
   pixels).
2 Algorithms_Used
   Some of the algorithms used by MAKEMOS require a little
   explanation.  The first of these is used to inter-compare
   overlapping regions of the input images to determine their relative
   scale-factor and zero-point difference (in the most general
   case). In effect, this algorithm has to fit a straight line to a
   scatter plot representing the pixel values in the two overlapping
   images.

   Rather than use a conventional least-squares fit for this
   purpose, which would be sensitive to spurious data, a fit based
   on minimisation of the sum of the absolute values of the
   residuals is used instead. This is considerably more robust. It
   also allows the residuals to be defined by the perpendicular
   distance of each point from the fitted line, rather than the
   vertical distance used in conventional least squares. In turn,
   this removes the distinction between dependent and independent
   variables and allows the statistical uncertainty on both axes
   (described by an error ellipse) to be properly taken into account
   along with other weighting factors used to implement sky noise
   suppression.

   In general, this fitting algorithm is iterative and is controlled
   via the MAXIT, TOLS and TOLZ parameters which specify the
   convergence criteria. However, in some important cases the fit
   can be obtained in a single pass, with consequent savings in
   execution time. This occurs if:

      -  Only zero-point corrections are being determined, or

      -  Only scale-factor corrections are being determined and no
         input variance information is being used to weight the
         inter-comparison process (see the CMPVAR parameter).

   The second stage of normalisation involves a global optimisation
   process which seeks to determine the best corrections to be
   applied to each input image. The algorithm which performs this task
   makes a guess at the best corrections to apply and then
   calculates the scale-factor and/or zero-point differences which
   would remain between each pair of overlapping images if they were
   corrected in this way. These corrections are then adjusted until
   the weighted sum of squares of the remaining differences is
   minimised. The weights used in this process are derived from
   error estimates produced by the earlier (inter-comparison)
   algorithm. This allows information about the required corrections
   to be optimally combined from many overlaps, even in cases where
   individual overlaps may be small and contain inadequate
   information on their own.

   The algorithm used for combining the separate input images into a
   mosaic requires no special explanation, except to note that it is
   designed to operate on large mosaics without making excessive
   demands on system resources such as memory. It does this by
   partitioning the mosaic into small regions for processing.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - SKYSUP  -- dynamically defaulted

      - GENVAR  -- dynamically defaulted

      - SCALE   -- always FALSE

      - ZERO    -- always FALSE

      - MODIFY  -- always FALSE

      - TITLE   -- always "Output from MAKEMOS"

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets/different devices, or after a break of sometime.
   The intrinsic default behaviour of the application may be
   restored by using the RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE and PRESERVE) have global
   values. These global values will always take precedence, except
   when an assignment is made on the command line. Global values may
   be set and reset using the CCDSETUP and CCDCLEAR commands.
2 Copyright
   Copyright (C) 1992 Science & Engineering Research Council
   Copyright (C) 1998-1999 Central Laboratory of the Research Councils

2 Authors
RFWS: R.F. Warren-Smith (STARLINK, RAL)
PDRAPER: Peter Draper (STARLINK)
2 History
 5-AUG-1992 (RFWS):
    Original version.

 20-OCT-1992 (PDRAPER):
    Changed to CCDPACK version 0.1 standards. Modified prologue
    to explicitly state that output variance generation (from the
    combination stage) requires that the input variances be used
    as (scaled) weights.

 20-JAN-1993 (RFWS):
    Added further workspace allocation for CCD1_DOMOS (new BADIN
    argument).

 13-APR-1993 (RFWS):
    Added new NNDF argument in call to CCD1_PRUNE.

 6-OCT-1995 (PDRAPER):
    Removed VMS references and changed examples to show C-shell
    usage.
2 Implementation_Status
   - MAKEMOS supports "bad" pixel values and all non-complex data
     types, with arithmetic being performed using the appropriate
     floating point type. It can process images with any number of
     dimensions. The DATA, TITLE and VARIANCE components of an NDF
     are directly supported, with the AXIS, HISTORY, LABEL
     and UNITS components and all extensions being propagated from
     the first input NDF supplied (note that AXIS values, if
     present, will normally be extrapolated as a result of
     propagation to the output mosaic, which will typically have a
     larger extent than any of the input NDFs).
1 PAIRNDF
Displays and manipulates image pairs to allow easy registration.

Usage:

   pairndf in outlist device percentiles

Description:

   This routine accepts a list of images which may be aligned using
   simple offsets. In a first interactive section pairs of images
   may be selected from a palette of images (which are drawn down
   the side of the display). Passing on to a second section the
   chosen pair of images may then be manipulated by selecting a
   reference position on one and then indicating where the
   corresponding position on the second is. The reference image is
   then moved and overlaid on the second. In any overlap regions the
   image display values are averaged. If the pair of images are
   overlaid (registering them) then a third section may be entered
   in which the cursor can be used to pick out the positions of
   image features in the overlap region. The image features are then
   centroided to get accurate positions.

   You are required to choose all the pairings required to
   completely register all frames (the routine will not exit
   until enough images have been paired to allow this, and a policy
   to ensure completeness is enforced by insisting that each pair,
   except for the first, contains one previously paired image).
   When this is complete a global merger of the all the positions
   for each image takes place. This results in the output of one list
   of uniquely labelled positions for each image. These position lists
   can then be used in a routine such as REGISTER to produce the
   actual transformation between the images.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the image display device.
   [Current image display device]
3 FILLFRAC
FILLFRAC = _DOUBLE (Read)
   The largest fraction of the display area which the images
   displayed in the scratch region (the part where they can be
   manipulated) may take. A value will always be in the
   range 0.05 to 0.95.
   [0.55]
3 IN
IN = LITERAL (Read)
   A list of image names whose data are to be transformed. The image
   names should be separated by commas and may include wildcards.
3 KEEPLUT
KEEPLUT = _LOGICAL (Read)
   Whether to retain the current device look-up-table. If FALSE
   then a greyscale look-up-table is loaded. PAIRNDF loads the
   primary colours into the first few pens regardless of the
   value of this parameter.
   [TRUE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MAKEBIG
MAKEBIG = _LOGICAL (Read)
   If TRUE then images will be scaled to fit into the whole of
   the FILLFRAC area. If FALSE then scaling will never exceed
   one device pixel per image pixel. This latter option decreases
   the time needed to process images from the display palette
   into the scratch region.
   [TRUE]
3 MEMORY
MEMORY = _INTEGER (Read)
   The memory of the device which is to be used. This can take
   the values 0 and 1. 0 means the base memory and 1 the overlay.
   [0]
3 MSIZE
MSIZE = _REAL (Read)
   Determines the size of the position marker. This is set as a
   fraction of the X dimension of the display.
   [0.03]
3 NAMELIST
NAMELIST = LITERAL (Read)
   The name of a file to contain the names of the output
   position lists. The names written to this file are those
   generated using the expression given to the OUTLIST parameter.
   This file may be used in an indirection expression to input
   all the position lists output from this routine into another
   routine, if the associating position lists with images option is
   not being used.
   [PAIRNDF.LIS]
3 OUTLIST
OUTLIST = LITERAL (Read)
   An expression which is either a list of names or expands to a
   list of names for the output position lists.

   These may be specified as list of comma separated names,
   using indirection if required, OR, as a single modification
   element (of the input names). The simplest modification
   element is the asterisk "*" which means call each of the
   output lists the same name as the corresponding input images.
   So,
      IN > *
      OUTLIST > *
   signifies that all the images in the current directory should be
   used and the output lists should have the same names.

   Other types of modification can also occur, such as,
      OUTLIST > *_objs.dat
   which means call the position lists the same as the input images
   but put "_objs.dat" after the names. Replacement of a specified
   string with another in the output file names can also be used,
      outlist > *|_debias|_images.dat|
   this replaces the string "_debias" with "_images.dat" in any
   of the output names.

   If wildcarded names for the input images are used then is it
   recommended that wildcards are also used for the position list
   names as the correspondence between these may be confusing.
   [*.DAT]
3 PALFRAC
PALFRAC = _DOUBLE (Read)
   The fraction of display X-dimension which is reserved for the
   image palette. A value will always be in the range
   0.05 to 0.95.
   [0.25]
3 PERCENTILES
PERCENTILES( 2 ) = _DOUBLE (Read)
   The percentile data range to use as limits when displaying the
   images. Must be in the range 0 to 100. Using percentiles as
   display limits automatically adjusts the data ranges of the
   images to show similar information levels. This helps when
   combining the data using a mean as a crude normalisation has
   been performed.
   [2,98]
3 THICK
THICK = _INTEGER (Read)
   The thickness of the position marker in device pixels.
   [3]
2 Examples
pairndf '*'  '*.dat' xw '[1,99]'
  In this routine the positional nature of the parameters is
  shown. All the images in the current directory are displayed.
  Their output positions lists have the same name as the images
  except that they have a file type of .dat. The images are
  displayed using the percentile limits 1,99 which shows bright
  detail well.

pairndf msize=0.1 thick=7
   In this example the cross which is used to identify the
   image features is made very large and thick.

pairndf fillfrac=0.75 keeplut palfrac=0.15
   The parameters used in this example will make the images
   displayed in the scratch region larger than the default. This
   can be useful when the images have a long and a short side as
   a scale factor is chosen which maps one of the image sides to
   the scratch side exactly so images can be scaled and still be
   all visible. KEEPLUT keeps the look-up-table loaded in the
   current device (say a colour one). Reducing PALFRAC to 0.15
   makes the scratch display surface larger but has the
   disadvantage that the images in the palette are small (perhaps
   too small to identify image features, but this needn't be a
   problem as images may be drawn into the scratch region - for
   inspection side-by-side - during the pair selection phase).
2 Notes
- Interactive sections.

  There are three distinct sections in PAIRNDF. In the first
  section a pair of images should be chosen from the palette.
  Choosing an image is performed by simply placing the cursor on
  the image and pressing the left-hand button. to select an image
  for display on the left and the right button to display an
  image on the right. Two images must be chosen before a
  progression to the next section is allowed.  When an image is
  chosen it is rescaled and displayed in the scratch region.
  During the first pass any two images may be chosen,
  subsequently at least one image which has already been chosen
  (and successfully processed) must be used (you may of course
  select two processed images if you like). This ensures that
  the final registration is complete. Images which have been
  processed are probably outlined in green. You are not
  restricted to the first pair of images chosen - just keep
  pointing at images you want to expand into the scratch region
  until you have a pair with image features in common.

  After selecting the pair of images you want to register you must
  pass on to a second stage, this is entered by pressing the
  right-hand button, the title "Align the images" will then
  appear. These two images may now be moved. This is achieved by
  first selecting a reference point on one of the images (say a
  star which is clearly visible on both images) then moving the
  cursor onto it and pressing the left-hand button (accuracy is
  not critical as positions will be centroided later, but you can
  zoom in on a feature). Next move the cursor to the corresponding
  image feature on the second image and press the centre
  button. The routine will now move the reference image onto the
  new position. In areas where the images overlap a mean is taken.

  The final interactive section is used to select the positions of
  image features in the overlap regions. These are selected by
  moving the cursor onto them and pressing the left-hand button.
  When you have selected as many image features as you require
  pressing the right-hand button exits this section. The features
  (on both images) are then centroided. If enough information has
  now been given to register all the frames then the routine
  passes out of the interaction session and determines the
  registration.

- X windows display.

  Using keyboard I and O keys it is possible to zoom-in and
  zoom-out. The arrow keys allow the memory to be scrolled,
  pressing the shift key at the same time increases the rate of
  scroll. The C key performs a quick re-centre, cancelling any
  zoom and scroll. The Q key aborts the routine.

- NDF extension items.

  On exit the CURRENT_LIST items in the CCDPACK extensions
  (.MORE.CCDPACK) of the input images are set to the names of the
  appropriate output lists. These items will be used by other
  CCDPACK position list processing routines to automatically
  access the lists.

- Output position list format.

  CCDPACK format - Position lists in CCDPACK are formatted files
  whose first three columns are interpreted as the following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which may have different locations but are to be
  considered as the same point. Comments may be included in the
  file using the characters # and !. Columns may be separated by
  the use of commas or spaces.
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.

   The DEVICE parameter also has a global association. This is not
   controlled by the usual CCDPACK mechanisms, instead it works in
   co-operation with KAPPA (SUN/95) image display/control routines.
2 Authors
PDRAPER: Peter Draper (STARLINK - Durham University)
2 History
 5-FEB-1993 (PDRAPER):
    Original version.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK version 2.0.
2 Implementation_Status
   - Supports Bad pixel values and all non-complex data types.
1 PLOTLIST
Draws position markers on a graphics display.

Usage:

   plotlist inlist [device]

Description:

   This routine draws a variety of markers (crosses, circles,
   squares etc.) at positions specified in series of position lists.
   Before this application can be run an image (or other graphical
   output such as a contour image) must have been displayed using a
   suitable routine such as KAPPA DISPLAY (SUN/95).
2 Parameters
For information on individual parameters, select from the list below:
3 CLEAR
CLEAR = _LOGICAL (Read)
   This parameter controls whether or not the display device
   is cleared before plotting the markers. Setting this TRUE could
   be useful if plotting in a device overlay.
   [FALSE]
3 DEVICE
DEVICE = DEVICE (Write)
   The name of the device on which to plot the markers.
   [Current display device]
3 INLIST
INLIST = LITERAL (Read)
   This parameter is used to access the names of the lists which
   contain the positions and, if NDFNAMES is TRUE, the names of
   the associated images. If NDFNAMES is TRUE the names of the
   position lists are assumed to be stored in the extension of
   the images (in the CCDPACK extension item CURRENT_LIST) and the
   names of the images themselves should be given (and may include
   wildcards).

   If NDFNAMES is FALSE then the actual names of the position
   lists should be given. These may not use wildcards but may be
   specified using indirection (other CCDPACK position list
   processing routines will write the names of their results
   files into files suitable for use in this manner) the
   indirection character is "^".
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MSIZE
MSIZE = _REAL (Read)
   The size of the marker which will be drawn as a multiple of
   the default value. So for instance doubling the value of this
   parameter will increase the size of the markers by a factor of
   two. The default marker size is around 1/40 of the lesser of
   the width or height of the plot.
   [2.5]
3 MTYPE
MTYPE = _INTEGER (Read)
   The type of marker to plot at the positions given in the input
   files. PGPLOT Graph Markers are drawn if the value lies in the
   range 0-31 (a value of 2 gives a cross, 7 a triangle, 24-27
   various circles etc. see the PGPLOT manual). If the value of
   this parameter is less than zero then the identifier values,
   which are in column one of the input file, will be written over
   the objects.
   [2]
3 NDFNAMES
NDFNAMES = _LOGICAL (Read)
   If TRUE then the routine will assume that the names of the
   position lists are stored in the image CCDPACK extensions under
   the item "CURRENT_LIST".

   If a global value for this parameter has been set using
   CCDSETUP then that value will be used.
   [TRUE]
3 PALNUM
PALNUM = _INTEGER (Read)
   The pen number to use when drawing the markers.  The colours
   associated with these pens are the default PGPLOT pens (see
   the PGPLOT manual for a complete description). These are:

      - 0 -- background colour

      - 1 -- foreground colour

      - 2 -- red

      - 3 -- green

      - 4 -- blue

      - 5 -- cyan

      - 6 -- magenta

      - 7 -- yellow

      - 8 -- orange

   and so on up to pen 16 (or up to the number available on the
   current graphics device). After PLOTLIST has been run these
   colours can be superseded by using the KAPPA palette
   facilities PALDEF and PALENTRY, but note that any subsequent
   runs of PLOTLIST will reinstate the PGPLOT default colours.
   The KAPPA palette pen numbers correspond to PALNUM values
   (hence the parameter name).
   [3]
3 THICK
THICK = _INTEGER (Read)
   The thickness of the lines used to draw the markers. This may
   take any value in the range 1-21.
   [1]
2 Examples
plotlist inlist='*'
   In this example all the images in the current directory are
   accessed and their associated lists of positions are plotted
   onto the current display device.

plotlist ndfnames=false inlist=one_list.dat
   In this example the position list one_list.dat is opened and
   its position are plotted on the current display device.

plotlist in='aligned_*' mtype=-1 palnum=4 msize=1 thick=3
   In this example the images aligned_* have their associated
   position lists accessed and the positions are plotted on the
   current display device. The pen colour used is blue. The
   text is drawn at a relative size of 1 (the normal default  is
   2.5) with a line thickness of 3.
2 Notes
- Position list formats.

  CCDPACK supports data in two formats.

  CCDPACK format - the first three columns are interpreted as the
  following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which are the same but which have different locations
  on different images. Values in any other (trailing) columns are
  usually ignored.

  EXTERNAL format - positions are specified using just an X and
  a Y entry and no other entries.

     - Column 1: the X position

     - Column 2: the Y position

  This format is used by KAPPA applications such as CURSOR.

  Comments may be included in a file using the characters "#" and
  "!". Columns may be separated by the use of commas or spaces.

- NDF extension items.

  If NDFNAMES is TRUE then the item "CURRENT_LIST" of the
  .MORE.CCDPACK structure of the input images will be located
  and assumed to contain the names of the lists whose positions
  are to be plotted.
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application. The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE and NDFNAMES) have global
   values. These global values will always take precedence, except
   when an assignment is made on the command line. Global values may
   be set and reset using the CCDSETUP and CCDCLEAR commands.

   The DEVICE parameter also has a global association. This is not
   controlled by the usual CCDPACK mechanisms, instead it works in
   co-operation with KAPPA (SUN/95) image display/control routines.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 24-SEP-1992 (PDRAPER):
    Original version.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK version 2.0.
1 PRESENT
Presents a list of images to CCDPACK.

Usage:

   present modify=? simple=? in=? bias=? target=? dark=? flash=?
           flat=? ftype=? filter=? darktime=? flashtime=?

Description:

   This routine enters reduction information into the CCDPACK
   extensions of a list of images. This information is required if an
   automated reduction schedule is to be produced using SCHEDULE.
   Before using this routine you should set up the CCDPACK global
   parameters, describing the CCD characteristics, using the CCDSETUP
   application.

   If the input images have not already been categorised then this
   routine performs this task for the "frame types" BIAS, TARGET,
   DARK, FLASH, FLAT, MASTER_BIAS, MASTER_FLAT, MASTER_DARK and
   MASTER_FLASH (these are input as different groups of images).


   Missing exposure times for DARK and FLASH counts can be entered
   as can filter types.

   This routine can also be used to check that a list of images have
   the minimum amount of information in their CCDPACK extensions to
   allow an automated scheduling.
2 Parameters
For information on individual parameters, select from the list below:
3 ADC
ADC = _DOUBLE (Read)
   The Analogue-to-Digital conversion factor. CCD readout values
   are usually given in Analogue-to-Digital Units (ADUs). The ADC
   factor is the value which converts ADUs back to the number of
   electrons which were present in each pixel in the CCD after
   the integration had finished. This value is required to allow
   proper estimates of the inherent noise associated with each
   readout value. CCDPACK makes these estimates and stores them
   in the variance component of the final images. Not supplying a
   value for this parameter (if prompted) may be a valid response
   if variances are not to be generated.

   This parameter normally accesses the value of the related
   CCDPACK global association. This behaviour can only be
   superceded if ADC=value is used on the command-line
   or if a prompt is forced (using the PROMPT keyword). The
   value of this parameter will be entered into the extension of
   the input images only if MODIFY is TRUE or the related extension
   item does not exist.
   [!]
3 ADDDARK
ADDDARK = _LOGICAL (Read)
   Whether or not to prompt for a dark exposure time for the input
   images which require one.
   [Dynamic default, TRUE if dark count frames are given, FALSE
   otherwise]
3 ADDFLASH
ADDFLASH = _LOGICAL (Read)
   Whether or not to prompt for a pre-flash exposure time for the
   input images which require one.
   [Dynamic default, TRUE if pre-flash frames are given, FALSE
   otherwise]
3 BIAS
BIAS = LITERAL (Read)
   A list of the names of the images which contain the raw bias
   data. These are the images which are to used to produce a
   "master" bias image. On exit these images will have their FTYPE
   extension item set to the value "BIAS".
   [!]
3 BIASVALUE
BIASVALUE = _DOUBLE (Read)
   If no raw bias frames exist and the data does not have any bias
   strips, then the only way to remove the bias contribution is
   to subtract a constant. If your data has already had its bias
   contribution subtracted and you want to process it using
   CCDPACK (so that you can generate variances for instance) then
   set this value to zero. This parameter defaults to ! and is not
   prompted for so the only way that a value can be supplied is on
   the command-line or by using the PROMPT keyword.
   [!]
3 BOUNDS
BOUNDS( 2 or 4 ) = _INTEGER (Read)
   The bounds of the detector bias strips (if any exist). The
   bounds (if given) should be in pixel indices and be given in
   pairs up to a limit of 2. The sense of the bounds is along the
   readout direction.  For example, 2,16,400,416 means that the
   bias strips are located between pixels 2 to 16 and 400 to 416
   inclusive along the readout direction. The bias strips are
   used to either offset the master bias image or as an estimate of
   the bias which is to be interpolated across the image in some
   way (see DEBIAS). Not supplying values for this parameter may
   be a valid response if the bias frame is to be directly
   subtracted from the data without offsetting or if a single
   constant is to be used as the bias value for the whole image.

   This parameter normally accesses the value of the related
   CCDPACK global association. This behaviour can only be
   superceded if BOUNDS=[value,...] is used on the command-line
   or if a prompt is forced (using the PROMPT keyword). The
   value of this parameter will be entered into the extension of
   the input images only if MODIFY is TRUE or the related extension
   item does not exist.
   [!]
3 DARK
DARK = LITERAL (Read)
   A list of the names of the images which contain the raw dark
   count data. These are the images which are to used to produce a
   "master" dark counts image. On exit these images will have their
   FTYPE extension item set to the value "DARK".
   [!]
3 DARKTIME
DARKTIME = _DOUBLE (Read)
   The time for which the data in the current image collected dark
   count electrons. The dark count is basically charge which
   accumulates in the detector pixels due to thermal noise. The
   effect of dark current is to produce an additive quantity to
   the electron count in each pixel. Most modern devices only
   produce a few ADU (or less) counts per pixel per hour and so
   this effect can generally be ignored. This, however, is not
   the case for Infra-Red detectors.

   The value given does not need to be a number of seconds or
   minutes and can be ratio of some kind, as long as it is
   consistently used for all images (so if all your images have the
   same darktime then the value 1 could be used). images which have
   no dark count should be given a DARKTIME of 0. This parameter
   is only used if ADDDARK is TRUE.
   [!]
3 DEFERRED
DEFERRED = _DOUBLE (Read)
   The deferred charge value. Often known as the "fat" or "skinny"
   zero (just for confusion). This is actually the charge which is
   not transferred from a CCD pixel when the device is read out.
   Usually this is zero or negligible and is only included for
   completeness and for processing very old data.

   This parameter normally accesses the value of the related
   CCDPACK global association. This behaviour can only be
   superceded if DEFERRED=value is used on the command-line
   or if a prompt is forced (using the PROMPT keyword). The
   value of this parameter will be entered into the extension of
   the input images only if MODIFY is TRUE or the related extension
   item does not exist.
   [!]
3 DIRECTION
DIRECTION = LITERAL (Read)
   The readout direction of the detector. This may take the values
   X or Y.  A value of X indicates that the readout direction is
   along the first (horizontal) direction, an Y indicates that
   the readout direction is along the direction perpendicular to
   the X axis.

   This parameter normally accesses the value of the related
   CCDPACK global association. This behaviour can only be
   superceded if DIRECTION=value is used on the command-line
   or if a prompt is forced (using the PROMPT keyword). The
   value of this parameter will be entered into the extension of
   the input images only if MODIFY is TRUE or the related extension
   item does not exist.
   [!]
3 EXTENT
EXTENT( 4 ) = _INTEGER (Read)
   The extent of the useful detector area in pixel indices.  The
   extent is defined as a range in X values and a range in Y
   values (XMIN,XMAX,YMIN,YMAX). These define a section of an image
   (see SUN/33). Any parts of the detector surface area outside
   of this region will not be present in the final output. This is
   useful for excluding bias strips, badly vignetted parts etc.

   This parameter normally accesses the value of the related
   CCDPACK global association. This behaviour can only be
   superceded if EXTENT=[XMIN,XMAX,YMIN,YMAX] is used on the
   command-line or if a prompt is forced (using the PROMPT
   keyword). The value of this parameter will be entered into the
   extension of the input images only if MODIFY is TRUE or the
   related extension item does not exist.
   [!]
3 FILTER
FILTER = LITERAL (Read)
   The filter name associated with the current image. The filter
   name is stored in the extension item FILTER and is used when
   determining which flatfields should be used for which data.
   images with a frame type which is independent of the filter will
   not use this parameter. The filter type is a case sensitive
   string.
   [Current value]
3 FLASH
FLASH = LITERAL (Read)
   A list of the names of the images which contain the raw
   pre-flash correction data. These are the images which are to
   used to produce a "master" pre-flash correction image. On exit
   these images will have their FTYPE extension item set to the
   value "FLASH".
   [!]
3 FLASHTIME
FLASHTIME  = _DOUBLE (Read)
   The time for which the data in the current image was exposed to
   pre-flash.

   The value given does not need to be a number of seconds or
   minutes and can be ratio of some kind, as long as it is
   consistently used for all images (so if all your images have the
   same darktime then the value 1 could be used). images which have
   no pre-flash should be given a FLASHTIME of 0. This parameter
   is only used if ADDFLASH is TRUE.
   [!]
3 FLAT
FLAT = LITERAL (Read)
   A list of the names of the images which contain the raw
   flatfield data. These are the images which are to used to
   produce "master" flatfields (one for each filter type). On
   exit these images will have their FTYPE extension item set to
   the value "FLAT".
   [!]
3 FTYPE
FTYPE = LITERAL (Read)
   The "frame" type of the current image. Each image is processed in
   turn and if SIMPLE is TRUE and a frame type extension item does
   not exist then this parameter will be used to prompt for a
   value. A prompt will also be made if SIMPLE is TRUE and MODIFY
   is TRUE regardless of whether the item already exists or not.
   If SIMPLE is FALSE then this parameter will not be used.
   [Current value]
3 IN
IN = LITERAL (Read)
   A list of the names of the images which contain the raw CCD
   data. images entered using this parameter must already have the
   correct "frame type" information (extension item FTYPE)
   entered into their CCDPACK extensions. This parameter is only
   used if SIMPLE is TRUE.

   The image names should be separated by commas and may include
   wildcards.
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MASTERBIAS
MASTERBIAS = LITERAL (Read)
   The name of a master bias frame. If this has been created by
   CCDPACK then there is no need to present it.  This parameter is
   designed for the import of frames created by other packages.
   [!]
3 MASTERDARK
MASTERDARK = LITERAL (Read)
   The name of a master dark counts frame. If this has been
   created by CCDPACK then there is no need to present it (unless
   for some reason it has been assigned the wrong frame type).
   This parameter is designed for the import of frames created
   by other packages.
3 MASTERFLASH
MASTERFLASH = LITERAL (Read)
   The name of a master pre-flash frame. If this has been
   created by CCDPACK then there is no need to present it (unless
   for some reason it has been assigned the wrong frame type).
   This parameter is designed for the import of frames created
   by other packages.
   [!]
3 MASTERFLAT
MASTERFLAT = LITERAL (Read)
   The names of a set of master flatfield frames (one for each
   filter type used). If these have been created by CCDPACK then
   there is no need to present them (unless for some reason they
   have been assigned the wrong frame type or filter).  This
   parameter is designed for the import of frames created by other
   packages (such as those that specifically process spectral
   data).
   [!]
3 MASTERS
MASTERS = _LOGICAL (Read)
   If this parameter is TRUE then prompts will be made for all the
   master calibration types (MASTERBIAS, MASTERDARK, MASTERFLAT
   and MASTERFLASH).
   [FALSE]
3 MODIFY
MODIFY = _LOGICAL (Read)
   If the input images already contain information in their CCDPACK
   extensions, then this parameter controls whether this
   information will be overwritten (if a new value exists) or
   not.
   [TRUE]
3 MULTIENTRY
MULTIENTRY = _LOGICAL (Read)
   Whether or not the names of the input images, their frame types,
   filters and related exposure factors are all given in response
   to the IN parameter (SIMPLE must be TRUE). If this option is
   selected then the parameters FTYPE, FILTER, DARKTIME and
   FLASHTIME will be set up with these values as defaults. If
   MODIFY is TRUE then you will be given an opportunity to modify
   them, otherwise these values will be entered into the image
   CCDPACK extensions.

   The input record format is five fields separated by commas. These
   are:

       - 1 Image name

       - 2 Frame type

       - 3 Filter name

       - 4 Dark exposure time

       - 5 Flash exposure time

   The latter three fields can be specified as "!" in which case
   they are not set (they may not be relevant). Multiple records
   can be entered and can be read in from a text file. So for
   instance if the file "XREDUCE.NDFS" had the following as its
   contents:

      DATA1,target,!,!,!
      DATA2,target,!,!,!
      DATA3,target,!,!,!
      FF1,flat,!,!,!
      FF2,flat,!,!,!
      FF3,flat,!,!,!
      BIAS1,bias,!,!,!
      BIAS2,bias,!,!,!
      BIAS3,bias,!,!,!

   Then it would be invoked using parameters

      - SIMPLE MULTIENTRY IN=^XREDUCE.NDFS

   This parameter is intended as an aid when using this program
   non-interactively (i.e. from scripts) and shouldn't normally be
   used, hence its default is FALSE and this can only be
   overridden by assignment on the command line or in response to
   a forced prompt.
   [FALSE]
3 NAMELIST
NAMELIST = LITERAL (Read)
   The name of a file to contain a listing of the name of the
   input images. This is intended to be of use when using these
   same names with other applications (such as SCHEDULE).
   [!]
3 ONEDARKTIME
ONEDARKTIME = _LOGICAL (Read)
   If the input data have the same dark count exposure time then
   this parameter may be set to inhibit repeated prompting for an
   exposure for every frame. This parameter is of particular use
   when running from scripts.
   [FALSE]
3 ONEFILTER
ONEFILTER = _LOGICAL (Read)
   If the input data have only one filter type then this parameter
   may be set to inhibit repeated prompting for a filter name
   for every frame (that is filter dependent). This parameter
   is of particular use when running from scripts.
   [FALSE]
3 ONEFLASHTIME
ONEFLASHTIME = _LOGICAL (Read)
   If the input data have the same pre-flash exposure time then
   this parameter may be set to inhibit repeated prompting for an
   exposure for every frame. This parameter is of particular use
   when running from scripts.
   [FALSE]
3 RNOISE
RNOISE = _DOUBLE (Read)
   The readout noise of the detector (in ADUs). Usually the
   readout noise of a detector is estimated by the observatory at
   which the data was taken and this is the value which should be
   supplied. Not supplying a value for this parameter may be a
   valid response if variances are not to be generated.

   This parameter normally accesses the value of the related
   CCDPACK global association (which is the readout noise value).
   This behaviour can only be superceded if RNOISE=value is used
   on the command-line or if a prompt is forced (using the
   PROMPT keyword). The value of this parameter will be entered
   into the extension of the input images only if MODIFY is TRUE or
   the related extension item does not exist.
   [!]
3 SATURATION
SATURATION = _DOUBLE (Read)
   The saturation value of the detector pixels (in ADUs).

   This parameter normally accesses the value of the related
   CCDPACK global association. This behaviour can only be
   superceded if SATURATION=value is used on the command-line
   or if a prompt is forced (using the PROMPT keyword). The
   value of this parameter will be entered into the extension of
   the input images only if MODIFY is TRUE or the related extension
   item does not exist.
   [!]
3 SIMPLE
SIMPLE = _LOGICAL (Read)
   Whether or not the input images already contain "frame type"
   (extension item FTYPE) information in their CCDPACK extensions
   or not. Usually images to be presented to CCDPACK do not contain
   this information, unless it has been imported from FITS
   information using IMPORT, or the images have already been
   presented and this pass is to modify existing extension items.
   [FALSE]
3 TARGET
TARGET = LITERAL (Read)
   A list of the names of the images which contain the "target"
   data. These are the images which contain the images or spectra
   etc.  On exit these images will have their FTYPE extension item
   set to the value "TARGET".
   [!]
3 ZEROED
ZEROED = _LOGICAL (Read)
   If a master bias frame is given, then this parameter indicates
   whether or not it has a mean value of zero. If SIMPLE and
   MULTIENTRY are TRUE then this value (TRUE or FALSE) can be entered
   as the fourth field to the IN parameter.
   [FALSE]
2 Examples
present simple in='*' modify
   In this example PRESENT processes all the images in the current
   directory. The images should already have a valid frame type
   (such as TARGET, FLAT etc.). The any existing global variables
   describing the detector are accessed and written into the image
   extension overwriting any values which already exist.

present simple=false bias='bias*' target='data*' dark=! flash=!
        flat='ff*'
   In this example the input images are organised into their
   respective frame types using the specially designed input
   parameters. On exit the output images will have the correct frame
   types entered into their CCDPACK extensions (provided MODIFY
   is TRUE).

present modify=false simple=true in='*'
   In this example all the images in the current directory are
   accessed. If any required extension or global associated items
   are missing then they will be entered into the image extension.
   If all extension items are present then a listing of their
   values will be made.

present masters simple=false masterflat="2dspectraff"
   In this example a master flatfield is imported to be used
   in an automated reduction of spectral data.

2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 11-FEB-1992 (PDRAPER):
    Original version.

 11-FEB-1994 (PDRAPER):
    Now named PRESENT.

 13-SEP-1995 (PDRAPER):
    Added description of MULTIENTRY (was tempted to keep this a
    secret as only used by xreduce).
1 REDUCE
Automatic CCD data reduction facility (command-line version).

Usage:

   reduce

Description:

   This routine provides a command-line interface to the automated
   reduction facilities of CCDPACK.

   The script guides you though the selection of the appropriate
   route for performing a reduction. Possible routes are using an
   import control table to interpret FITS headers, choosing from a
   list of known detector setups or just supplying all the
   necessary information.

   Using FITS headers is only possible if your data contains the
   correct information. If a table is not listed for your
   telescope/detector combination then you will need to create one.
   The contents of import tables are described in the help for the
   program IMPORT. Unless you (and perhaps your colleagues) are
   going to reduce large amounts of data from an unknown telescope
   then you should use the normal setup and data organization
   techniques.

   If you choose a detector setup file or have none you will need
   to organize your data into different frame types (bias, flat,
   target etc.), so either use a naming scheme that allows you to
   distinguish between them using wildcard patterns or create lists
   of the names in files.

   If you cannot select from any of the known detectors then the
   most crucial information that you require is a knowledge of
   where the bias strips are and the useful CCD area (if these are
   appropriate for the type of data you're reducing). If you are
   sitting at an X display then the CCD geometry can be determined
   from within reduce. Otherwise you will need to determine these
   before running reduce.
2 Notes
Unknown detectors.
   If you do develop an import table or restoration (setup) file
   for a telescope/detector pass these on to the maintainer of
   this package, together with a description. They will be
   distributed in future releases for the benefit of others.
2 Authors
PDRAPER: P.W. Draper (STARLINK, Durham University)
2 History
 21-SEP-1995 (PDRAPER):
    Original version.
1 REGISTER
Determines transformations between lists of positions.

Usage:

   register inlist fittype refpos

Description:

   This routine determines the transformations between (labelled)
   position lists. Six different types of transformation are
   available. The first 5 are based on the linear transformation,
   the sixth being a function defined by you. The linear
   transformations are based on the mappings

      X' = A + B*X + C*Y
      Y' = D + E*X + F*Y

   and allow:

     - shift of origin

     - shift of origin and rotation

     - shift of origin and magnification

     - shift of origin, rotation and magnification (solid body)

     - or a full six parameter fit

   The self defined transform can be any mapping given as an
   algebraic expression (including functions) using the methods
   allowed by TRANSFORM (SUN/61).

   When determining linear transformations REGISTER allows many
   lists to be processed at once performing a simultaneous
   registration of all the lists. When using a self defined
   transform only two lists may be registered at any time.

   The results from REGISTER are reported via the logging system
   and then coded either as new frames with a domain name given
   by the OUTDOMAIN parameter in the WCS component of the NDFs,
   or as TRANSFORM structures, containing the final algebraic
   solutions for each input list.  Transform structures may be
   stored in the CCDPACK exensions of the associated NDFs or within
   a named HDS container file if no associated NDFs exist.  Whether
   TRANSFORM structures or frames within the WCS components are
   chosen, they can be used by the applications TRANLIST and
   TRANNDF to transform position lists and resample the actual
   datasets respectively.
2 Parameters
For information on individual parameters, select from the list below:
3 CLASS
CLASS( ) = LITERAL (Read)
   If CLASSIFY is TRUE then a list of classifications that
   describe the properties of the transformation (parameters
   XFOR, YFOR, XINV and YINV) should be given. This is
   optional, but the information can be used to make other
   applications run more efficiently.  Valid values are:

      - LINEAR        -- Linear and preserves straight lines.

      - INDEPENDENT   -- Preserves the independence of the axes.

      - DIAGONAL      -- Preserves the axes themselves.

      - ISOTROPIC     -- Preserves angles and shapes.

      - POSITIVE_DET  -- A component of reflection is absent.

      - NEGATIVE_DET  -- A component of reflection is present.

      - CONSTANT_DET  -- The scale factor is constant.

      - UNIT_DET      -- Areas (or volumes etc.) are preserved.

   See SUN/61 Appendix B for details of transformation
   classification and a table of classifications of common
   mappings.
3 CLASSIFY
CLASSIFY = _LOGICAL (Read)
   If TRUE then this indicates that you want to classify the
   transform. Classifying a transformation can help in later
   processing and allows applications to reject transformations
   that they cannot use. The topic of classification is discussed
   in SUN/61 which should be consulted before using this option.
   Linear transformations are classified by this routine directly
   and do not use this parameter.
   [FALSE]
3 FA-FZ
FA-FZ = LITERAL (Read)
   These parameters supply the values of "sub-expressions" used in
   the expressions XFOR, YFOR, XINV and YINV. These parameters
   should be used when repeated expressions are present in complex
   transformations. Sub-expressions may contain references to
   other sub-expressions and the variables (PA-PZ).
   An example of using sub-expressions is:
      XFOR > PA*ASIND(FA/PA)*X/FA
      YFOR > PA*ASIND(FA/PA)*Y/FA
      XINV > PA*SIND(FB/PA)*XX/FB
      YINV > PA*SIND(FB/PA)*YY/FB
      FA > SQRT(X*X+Y*Y)
      FB > SQRT(XX*XX+YY*YY)
3 FITTYPE
FITTYPE = _INTEGER (Read)
   The type of fit which should be used when determining the
   transformation between the input positions lists. This may take
   the values

      - 1 -- shift of origin

      - 2 -- shift of origin and rotation

      - 3 -- shift of origin and magnification

      - 4 -- shift of origin, rotation and magnification (solid
             body)

      - 5 -- a full six parameter fit

      - 6 -- self defined function

   [5]
3 FULL
FULL = _LOGICAL (Read)
   If FITTYPE=6 is chosen then this parameter value determines
   if a full transformation is to be performed or not. If FALSE
   then you will only be prompted for expressions for XFOR and
   YFOR and the inverse transformation will remain undefined.

   If TRUE then you will also be prompted for XINV and YINV in
   response to which the inverse mappings for X' and Y' are
   required. Not performing a full fit will affect the later
   uses of the transformation. At present not providing an inverse
   mapping means that image resampling (TRANNDF) may not be
   performed.
   [FALSE]
3 IN
IN = LITERAL (Read)
   If NDFNAMES is FALSE and PLACEIN is "NDF" then a list of NDF
   names in which to store the WCS frames or transformation
   structures is required. This list of names must correspond
   exactly to the order of the associated input lists. A listing
   of the order of inputs is shown before this parameter is
   accessed.

   The NDF names may (although this is probably not advisable)
   be specified using wildcards, or may be specified using an
   indirection file (the indirection character is "^").
3 INLIST
INLIST = LITERAL (Read)
   This parameter is used to access the names of the lists
   which contain the positions and, if NDFNAMES is TRUE, the names
   of the associated NDFs. If NDFNAMES is TRUE the names of the
   position lists are assumed to be stored in the extension of the
   NDFs (in the CCDPACK extension item CURRENT_LIST) and the names
   of the NDFs themselves should be given (and may include
   wildcards).

   If NDFNAMES is FALSE then the actual names of the position
   lists should be given. These may not use wildcards but may be
   specified using indirection (other CCDPACK position list
   processing routines will write the names of their results
   files into files suitable for use in this manner) the
   indirection character is "^".
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 NDFNAMES
NDFNAMES = _LOGICAL (Read)
   This parameter specifies whether the names of the input
   positions lists are stored in the CCDPACK extensions of NDFs.
   If TRUE then the INLIST parameter accesses a list of NDFs
   which are used to get the associated positions lists. If FALSE
   then INLIST just accesses the position list names directly.

   If the names of the lists are stored in the CCDPACK NDF
   extension then the final WCS frame information or
   transformation structure is also written to the NDF
   extension.

   If a global value for this parameter has been set using
   CCDSETUP then that value will be used.
   [TRUE]
3 OUTDOMAIN
OUTDOMAIN = LITERAL (Read)
   If OUTFORMAT is 'WCS', the transformation information is
   written as a new frame to the WCS component of the NDF.
   The frame normally has a Domain name of 'CCD_REG', but
   that can be overridden with this parameter.  When this
   frame is added, any previously existing frame which has
   the same Domain is removed.

   The name is converted to upper case, and whitespace is removed.
   [CCD_REG]
3 OUTFORMAT
OUTFORMAT = LITERAL (Read)
   If NDFNAMES is TRUE, or PLACEIN is 'NDF', then this parameter
   specifies how the transformation is to be written into the
   NDFs.  There are two possible values:

      - WCS       -- written into WCS component of the NDF

      - TRANSFORM -- written as a TRANSFORM structure into the
                     .MORE.CCDPACK extension of the NDF

   If WCS is chosen, then a new frame, with a Domain value given
   by OUTDOMAIN, is inserted into the WCS extension of the NDF
   (a new WCS extension is created if none previously existed).
   A mapping between this and the 'PIXEL' domain is defined,
   which is the unit mapping in the case that the NDF in question
   is the reference set.  If any frame in the domain OUTDOMAIN
   already exists in the WCS component, it will be erased, so
   that after successful processing by REGISTER it will contain
   only one such frame.

   WCS is currently only possible for linear transformations
   (FITTYPE values between 1 and 5).
   [WCS]
3 PA-PZ
PA-PZ = LITERAL (Read)
   When FITTYPE=6 these parameters are used for supplying initial
   guesses at the values of the fit parameters. Normally the
   values of these parameters are not critical, but occasionally
   the minimization routine fails due to numeric problems (these
   are usually caused by trig functions etc. which are given
   invalid values (outside +/-1 etc.)).
   [1.0D0]
3 PLACEIN
PLACEIN = LITERAL (Read)
   If NDFNAMES is FALSE then this parameter specifies where
   you would like to store the final transformation structures.
   The options are:

      - NDF  -- store them in NDF extensions

      - FILE -- store them in a container file.

   If the NDF option is chosen then you will have the option of
   supplying the NDF names via the parameter IN. If the FILE
   option is chosen then the name of an HDS container file should
   be given in response to the TRFILE parameter.
   [NDF]
3 REFPOS
REFPOS = _INTEGER (Read)
   The position within the list of inputs which corresponds to
   the list to be used as the reference set.
   [1]
3 TOLER
TOLER = _DOUBLE (Read)
   The RMS tolerance in positions which is used to determine the
   best fit. Adjust this value only if the input positions are
   specified in coordinates with a higher accuracy or smaller
   units.
   [0.001]
3 TRFILE
TRFILE = TRFILE (Read)
   If PLACEIN is given as "FILE" then the value of this parameter
   specifies the name of the container file to be used to store
   the resultant transformation structures.
3 XFOR
XFOR = LITERAL (Read)
   If FITTYPE=6 then this parameter specifies the parameterised
   algebraic expression to be used as the forward X
   transformation. The expression may use all the functions
   specified in SUN/61 (TRANSFORM) as well as the usual
   mathematical operators (+,-,*,/,**). Functions are
   parameterised by the strings PA,PB,PC...PZ which are the
   values which will be determined. The string must contain at
   least one reference to either X or Y.  So a possible return is
       PA+PB*X

   which is the same as the linear X transformation which just
   applies an offset and a scale factor.
3 XINV
XINV = LITERAL (Read)
   If FITTYPE=6 and FULL=TRUE then this parameter specifies
   the inverse X transformation. The expression may use all the
   functions specified in SUN/61 (TRANSFORM) as well as the usual
   mathematical operations (+,-,*,/,**). Functions are
   parameterised by the strings PA,PB,PC...PZ which are the
   values which will be determined.  This expression must contain
   a reference to either XX or YY. So a possible return is
       (XX-PA)/PB

   which is the same as the inverse linear X transformation for an
   offset and scale.
3 YFOR
YFOR = LITERAL (Read)
   If FITTYPE=6 then this parameter specifies the parameterised
   algebraic expression to be used as the forward Y
   transformation. The expression may use all the functions
   specified in SUN/61 (TRANSFORM) as well as the usual
   mathematical operators (+,-,*,/,**). Functions are
   parameterised by the strings PA,PB,PC...PZ which are the
   values which will be determined.  The string must contain at
   least one reference to either X or Y.  So a possible return is
       PC+PD*Y

   which is the same as the linear Y transformation which just
   applies an offset and a scale factor.
3 YINV
YINV = LITERAL (Read)
   If FITTYPE=6 and FULL=TRUE then this parameter specifies
   the inverse Y transformation. The expression may use all the
   functions specified in SUN/61 (TRANSFORM) as well as the usual
   mathematical operations (+,-,*,/,**). Functions are
   parameterised by the strings PA,PB,PC...PZ which are the
   values which will be determined.  This expression must contain
   a reference to either XX or YY. So a possible return is
       (YY-PC)/PD

   which is the same as the inverse linear Y transformation for an
   offset and scale.
2 Examples
register inlist='*' fittype=1
   In this example all the NDFs in the current directory are
   accessed and their associated position lists are opened.
   A global fit between all the datasets is then performed
   which results in estimates for the offsets from the first input
   NDF's position.  The results are then coded as new frames,
   given the domain name 'CCD_REG' in the WCS component of the
   NDFs.  Actual registration of the images can then be achieved
   by aligning all the NDFs in the CCD_REG domain.

register inlist='*' trtype=5 outdomain=result-set1
   This example works as above but this time the global
   transformations are derived for a full 6-parameter linear fit
   (which allows offset, rotation, magnification and shear).
   The results are coded as frames in the Domain 'RESULT-SET1'.

register inlist='"myndf1,myndf2"' fittype=4 refpos=2
   In this example a solid body fit is performed between the
   position lists associated with the NDFs myndf1 and myndf2.
   The reference positions are chosen to be those associated with
   myndf2.

register inlist='"one,two"' fittype=6 xfor='pa+pb*x' yfor='pa+pb*y'
   In this example the position lists associated with the NDFs
   one and two are said to be related by the algebraic
   expressions "pa+pb*x" and "pa+pb*y", which indicates that a
   single offset applies in both directions and a single scale
   factor. A solution for the values PA and PB is found using a
   general least-squares minimization technique. Starting values
   for PA and PB can be given using the parameters PA and PB.
   Since the fittype is 6, outformat must be 'transform', so
   the results are coded as transform structures in the CCDPACK
   extensions of the NDFs (under the item TRANSFORM).  The
   transform structures are arranged so that the forward
   transformation maps current positions into the reference
   coordinate system.

register inlist='"ndf1,ndf2"' fittype=6 xfor='pa+pb*x+pc*y+pd*x*y'
         yfor='pe+pf*x+pg*y+ph*x*y'
   In this example an non-linear transformation is fit between the
   positions associated with the NDFs ndf1 and ndf2. This analysis
   may help in determining whether a 6-parameter fit is good
   enough, or if you just want to transform positions. A problem
   with proceeding with this transformation in a general fashion
   is deriving the inverse as this is required if you want to
   perform image resampling.

register ndfnames=false inlist='"list1.acc,list2.acc,list3.acc"'
         fittype=3 placein=ndf outformat=transform
         in='"ndf1,ndf2,ndf3"'
   In this example the input position lists are not associated
   with NDFs (ndfnames=false) and have to be specified by name
   (no wildcards allowed). Since the position lists are not
   associated with NDFs there is no natural home for the
   transform structures. In this example it has been decided to
   place the transforms in NDFs anyway. PLACEIN could also be
   given as "file" in which case the transform structures are
   written to a container file, under the items TRN_1, TRN_2 ...
2 Notes
- Position list formats.

  CCDPACK supports data in two formats.

  CCDPACK format - the first three columns are interpreted as the
  following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which are the same but which have different locations
  on different images. Values in any other (trailing) columns are
  usually ignored.

  EXTERNAL format - positions are specified using just an X and
  a Y entry and no other entries.

     - Column 1: the X position

     - Column 2: the Y position

  This format is used by KAPPA applications such as CURSOR.

  Comments may be included in a file using the characters "#" and
  "!". Columns may be separated by the use of commas or spaces.

  Files with EXTERNAL format may be used with this application but
  all positions have to be present in all lists, no missing
  positions are allowed.

- NDF extension items.

  If NDFNAMES is TRUE then the item "CURRENT_LIST" of the
  .MORE.CCDPACK structure of the input NDFs will be located
  and assumed to contain the names of the lists whose positions
  are to be used for registration.

  On exit, if OUTFORMAT is "WCS" then a new frame with domain
  name given by the OUTDOMAIN parameter will be added to the
  .WCS component of input NDFs.  Taken together these contain the
  registration information and can be inspected using NDFTRACE
  or WCSSHOW (SUN/95).

  If OUTFORMAT is "TRANSFORM" then an item "TRANSFORM" will be
  added to the .MORE.CCDPACK structure of the input NDFs.
  This contains the registration information as a TRANSFORM
  structure and may be inspected using the utility HDSTRACE
  (SUN/102).
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets or after a break of sometime.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE and NDFNAMES) have global
   values. These global values will always take precedence, except
   when an assignment is made on the command line.  Global values may
   be set and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
PDRAPER: Peter Draper (STARLINK)

MBT: Mark Taylor (STARLINK)
2 History
 28-JUL-1992 (PDRAPER):
    Original version.

 5-OCT-1992 (PDRAPER):
    Made into CCDPACK task.

 19-JUL-1995 (PDRAPER):
    Removed AIF_ calls.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK version 2.0.

 18-SEP-1996 (PDRAPER):
    Removed dependency on NAG calls. This affects fittypes 3,4,5,6.

 3-MAR-1997 (PDRAPER):
    Removed top-level locator control (foreign data access upgrade).

 23-MAR-1998 (PDRAPER):
    Changed to only open input lists when required. This works
    around the FIO limit of 40 open file.

 11-MAR-1999 (MBT):
    Changed to use WCS components as well as TRANSFORM structures.
1 SCHEDULE
Schedules an automated CCDPACK reduction.

Usage:

   schedule in script stype debias=? execute=? interp=? spacesave=?

Description:

   This routine accepts a list of input images and uses the information
   in their CCDPACK extensions to schedule a reduction. The schedule
   is produced as a command script which may be executed immediately
   or retained for execution using the standard CCDPACK facilities
   (CCDFORK).

   The reduction schedule produced covers the following stages of
   data reduction (in this order):

      1) production of a master bias
      2) removal of the bias contribution
      3) production of a master dark
      4) removal of dark count contribution
      5) production of a master pre-flash
      6) removal of pre-flash contribution
      5) production of master flatfields (one for each filter type)
      6) correction of data for flatfield response

   The stages which are preformed for each image depend on the type of
   image (TARGET, FLAT, BIAS, DARK etc.) and any processing which has
   already taken place. For instance if calibration masters of any
   type already exist then they will be used in preference to the
   production of any new masters. If all the TARGET frames have
   already been flatfielded then no further processing will be
   performed, if no BIAS frames of any type exist then debiassing
   will be performed using bias strip interpolation or by
   subtracting a single constant etc. Reductions which have failed
   (due to a lack of resources) can be "picked up" and restarted
   from the position at which they failed (by a re-invocation of
   this routine). Facilities for controlling the use of disk space
   are also available.

   Before you can use this routine you must make sure that all the
   necessary information is entered into the image extensions. You can
   do this using the routines IMPORT or CCDSETUP and PRESENT or any
   combination of these which give the desired effect.
2 Parameters
For information on individual parameters, select from the list below:
3 DARKEXT
DARKEXT = LITERAL (Read)
   The extension which added to the names of any images processed by
   CALCOR when performing dark count correction. This makes the
   parameter

      OUT=*"darkext"

   form the names of the images output from CALCOR.
   [-dk]
3 DEBIAS
DEBIAS = _INTEGER (Read)
   The form of debiassing that should be used. This is an integer
   which represents one of the following:
      1 = produce a master and offset to bias strips (master bias
          is zeroed)
      2 = produce a master and do not offset to strips (in this
          case the master bias is not zeroed)
      3 = use interpolation between bias strip(s)
      4 = subtract a constant as bias.

   Using the information about the frame types which are available
   and the presence or not of bias strips etc. a list of the
   possible debiassing options is shown, before this parameter is
   accessed. Any of the above methods can be selected regardless
   of this advice, but the reduction may then fail unless action is
   taken (such as adapting the output script).

   If the interpolation option is selected then the method is
   determined by the INTERP parameter.
3 DEBIASEXT
DEBIASEXT = LITERAL (Read)
   The extension which added to the names of any images processed by
   DEBIAS. This makes the parameter

      OUT=*"debiasext"

   form the names of the images output from DEBIAS.
   [-db]
3 EXECUTE
EXECUTE = _LOGICAL (Read)
   Whether to execute the output command script immediately or not.
   If the option to execute is chosen then a background
   process is started which performs the actual execution.
   Do not execute the procedure using this method if your system
   supports a queuing system which should be used instead (if you
   expect the reduction to take some time). This option does not
   work for ICL scripts at this time.
   [FALSE]
3 EXELOGFILE
EXELOGFILE = LITERAL (Read)
   If the reduction is started immediately then the output will be
   redirected to this file.
   [SCHEDULE.LOG]
3 FLASHEXT
FLASHEXT = LITERAL (Read)
   The extension which added to the names of any images processed by
   CALCOR when performing pre-flash correction. This makes the
   parameter

      OUT=*"flashext"

   form the names of the images output from CALCOR.
   [-dk]
3 FLATEXT
FLATEXT = LITERAL (Read)
   The extension which added to the names of any images processed by
   FLATCOR. This makes the parameter

      OUT=*"flatext"

   form the names of the images output from FLATCOR.
   [-flt]
3 IN
IN = LITERAL (Given)
   A list of the names of the images which contain the data to be
   reduced. All images must already have the correct "frame type"
   information (extension item FTYPE) entered into their CCDPACK
   extensions. Together with any other relevant information (such
   as filter type, position of the bias strips, useful area etc.,
   see IMPORT and/or PRESENT).

   The image names should be separated by commas and may include
   wildcards.
3 INTERP
INTERP = _INTEGER (Read)
   If the interpolation method is chosen using the DEBIAS parameter
   then this parameter controls how the interpolation should be
   performed. The possible returns are:

      1 = fit a constant for each row/column
      2 = fit a single value for whole image
      3 = fit a line to each row/column
      4 = fit a plane to whole image

   The possible options given the input information about the
   presence of bias strips are shown before the value of this
   parameter is accessed.
3 IRFLATS
IRFLATS = _LOGICAL (Read)
   This parameter allows input frames of type TARGET to be also
   used as flatfields. This is designed for use when no real
   flatfields exist. IR data is often calibrated in this way, and
   less commonly optical data. In both these cases it is asummed
   that the objects are moved on the sky sufficiently, between
   exposures, so that taking the median of a stack of frames
   results in the rejection of any object data (leaving the
   equivalent of a map of a blank piece of sky).

   TARGET frames will only be used to create flatfields, if no
   flatfields (of the correct colour) are present in the input list.
   [FALSE]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP,
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all
   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MASTERBIAS
MASTERBIAS = LITERAL (Read)
   The name which will be given to a master bias image if one is
   created.
   [MASTER_BIAS]
3 MASTERDARK
MASTERDARK = LITERAL (Read)
   The name which will be given to a master dark image if one is
   created.
   [MASTER_DARK]
3 MASTERFLASH
MASTERFLASH = LITERAL (Read)
   The name which will be given to a master flash image if one is
   created.
   [MASTER_FLASH]
3 MASTERFLAT
MASTERFLAT = LITERAL (Read)
   The prefix of the name which will be given to any master flat
   images which are created. The filter name will be appended to
   this.
   [MASTER_FLAT]
3 SCRIPT
SCRIPT = LITERAL (Read)
   The name of the output file which will contain the CCDPACK
   commands which need to be executed to perform the reduction. The
   nature of this script is controlled by the STYPE parameter. The
   default name is dynamically set to be SCHEDULE with a type set
   by the choice of STYPE. The extension of the script name should
   always be the same as STYPE.
   [schedule."stype"]
3 SPACESAVE
SPACESAVE = LITERAL (Read)
   This parameter controls if any disk space management should be
   used or not. It can take one of the values, "NONE", "SOME" or
   "LOTS".

      "NONE" indicates that no images should be deleted.
      "SOME" indicates that all intermediate images should be
             deleted. This occurs after they are processed.
      "LOTS" indicates that all processed images should be deleted.
             In this case all intermediary images and the original
             images are deleted when processed.

   Intermediary images are deleted by the CCDPACK applications when
   they are finished processing then. So for instance in the case
   of FLATCOR each image is deleted in turn, so the additional disk
   space required is one image. Using "SOME" preserves the original
   images. Calibration masters are never deleted.
   [NONE]
3 STYPE
STYPE = LITERAL (Read)
   The type of CCDPACK command procedure to be produced. This
   should be one of "CSH" or "ICL". Once a type has been
   chosen the output script (parameter SCRIPT) can only be
   executed using the selected interpreter. Note that if you
   choose ICL then the resultant script cannot be executed
   immediately, you must activate this yourself.
   [CSH]
2 Examples
schedule '*' ccdreduce csh debias=1
   This example processes all the images in the current directory
   producing a script file called ccdreduce.csh which is suitable
   for executing from the C-shell. The debiassing method chosen is
   to use a zeroed master bias which is offset to the bias strip
   data level.

schedule '*' ccdreduce csh debias=1 execute=true
   As above except that the script ccdreduce.csh is forked into a
   background process and executed. The output from this job will
   be found in the file schedule.log.

schedule '*' tryinterp debias=3 interp=3
   In this example the debiassing is performed using interpolation
   between the bias strips.

schedule spacesave=lots
   In this example the command script will be written so that all
   intermediary images (those produced by the various applications)
   and the original raw images, will be deleted as and when they are
   processed.
schedule 'data*' irflats debias=4
   In this example the frames 'data*' are scheduled for reduction.
   The debiassing method is subtraction of a constant (this should
   be set by PRESENT) and a flatfield is produced by median stacking
   all the data frames.
2 Authors
PDRAPER: Peter Draper (STARLINK)
2 History
 31-NOV-1993 (PDRAPER):
    Original version.

 1-FEB-1994 (PDRAPER):
    Added debiassing methods.

 19-JUL-1995 (PDRAPER):
    Removed AIF_ calls.

 1-SEP-1995 (PDRAPER):
    Now closes script before attempting to execute it.

 4-SEP-1995 (PDRAPER):
    Removed DCL compatibility and introduced ICL.

 6-OCT-1995 (PDRAPER):
    Updated fof CCDPACK version 2.0.
1 TRANLIST
Transform lists of positions.

Usage:

   tranlist inlist outlist trtype

Description:

   This routine transforms positions stored in position lists.
   Transformations are defined either by a set of 6 coefficients
   for the linear transform, by an algebraic expression given by
   you, by using a forward or inverse mapping from a TRANSFORM
   structure, or by a mapping between two frames stored in a
   WCS component.
2 Parameters
For information on individual parameters, select from the list below:
3 EPOCHIN
EPOCHIN = _DOUBLE (Read)
   If a "Sky Co-ordinate System" specification is supplied (using
   parameter FRAMEIN) for a celestial co-ordinate system, then
   an epoch value is needed to qualify it. This is the epoch at
   which the supplied sky positions were determined. It should be
   given as a decimal years value, with or without decimal places
   ("1996.8" for example). Such values are interpreted as a
   Besselian epoch if less than 1984.0 and as a Julian epoch
   otherwise.
   [Dynamic]
3 EPOCHOUT
EPOCHOUT = _DOUBLE (Read)
   If a "Sky Co-ordinate System" specification is supplied (using
   parameter FRAMEOUT) for a celestial co-ordinate system, then
   an epoch value is needed to qualify it. This is the epoch at
   which the supplied sky positions were determined. It should be
   given as a decimal years value, with or without decimal places
   ("1996.8" for example). Such values are interpreted as a
   Besselian epoch if less than 1984.0 and as a Julian epoch
   otherwise.
   [Dynamic]
3 FA-FZ
FA-FZ = LITERAL (Read)
   These parameters supply the values of "sub-expressions" used in
   the expressions XFOR and YFOR. These parameters
   should be used when repeated expressions are present in complex
   transformations. Sub-expressions may contain references to
   other sub-expressions and constants (PA-PZ).
   An example of using sub-expressions is:
      XFOR > PA*ASIND(FA/PA)*X/FA
      YFOR > PA*ASIND(FA/PA)*Y/FA
      FA > SQRT(X*X+Y*Y)
      PA > 100D0
3 FORWARD
FORWARD = _LOGICAL (Read)
   If TRTYPE="STRUCT" then this parameter's value controls whether
   the forward or inverse mapping in the transform structure is
   used.
   [TRUE]
3 FRAMEIN
FRAMEIN = LITERAL (Read)
   If TRTYPE="WCS" then the transformation is a mapping from the
   frame specified by this parameter to that specified by the
   FRAMEOUT parameter.  The value of this parameter can be one of
   the following:

   - A domain name such as SKY, AXIS, PIXEL, etc.

   - An integer value giving the index of the required Frame
     within the WCS component.

   - A "Sky Co-ordinate System" (SCS) value such as EQUAT(J2000)
     (see section "Sky Co-ordinate Systems" in SUN/95).
   [PIXEL]
3 FRAMEOUT
FRAMEOUT = LITERAL (Read)
   If TRTYPE="WCS" then the transformation is a mapping from the
   frame specified by the FRAMEIN parameter to that specified
   by this parameter.  The value of this parameter can be one of
   the following:

   - A domain name such as SKY, AXIS, PIXEL, etc.

   - An integer value giving the index of the required Frame
     within the WCS component.

   - A "Sky Co-ordinate System" (SCS) value such as EQUAT(J2000)
     (see section "Sky Co-ordinate Systems" in SUN/95).
3 INEXT
INEXT = _LOGICAL (Read)
   If NDFNAMES is TRUE and the transformation is to be specified
   using a WCS component (TRTYPE="WCS"), then this parameter
   controls whether or not the WCS component should be located
   in each of the NDFs.  If set FALSE, the WCSFILE parameter will
   be used.

   If NDFNAMES is TRUE and the transformation is to be specified
   using a TRANSFORM structure (TRTYPE="STRUCT") then this
   parameter controls whether or not the structure should be
   located in the CCDPACK extension of each of the NDFs.  If
   set FALSE, the TRANSFORM parameter will be used.

   If this option is chosen then the WCS component or transform
   structure in EACH NDF will be applied to the associated
   position list. So for instance if you have a set of registered
   NDFs and positions these may be transformed all at once to and
   from the reference coordinate system.
   [TRUE]
3 INLIST
INLIST = LITERAL (Read)
   This parameter is used to access the names of the lists which
   contain the positions and, if NDFNAMES is TRUE, the names of
   the associated NDFs. If NDFNAMES is TRUE the names of the
   position lists are assumed to be stored in the extension of
   the NDFs (in the CCDPACK extension item CURRENT_LIST) and the
   names of the NDFs themselves should be given in response (and
   may include wildcards).

   If NDFNAMES is FALSE then the actual names of the position
   lists should be given. These may not use wildcards but may be
   specified using indirection (other CCDPACK position list
   processing routines will write the names of their results
   files into a file suitable for use in this manner) the
   indirection character is "^".
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 NAMELIST
NAMELIST = _FILENAME
   Only used if NDFNAMES is FALSE. This specifies the name of a
   file to contain a listing of the names of the output lists.
   This file may then be used to pass the names onto another
   CCDPACK application using indirection.
   [TRANLIST.LIS]
3 NDFNAMES
NDFNAMES = _LOGICAL (Read)
   If TRUE then the routine will assume that the names of the
   position lists are stored in the NDF CCDPACK extensions under
   the item "CURRENT_LIST". The names will be present in the
   extension if the positions were located using a CCDPACK
   application (such as FINDOBJ). Using this facility allows the
   transparent propagation of position lists through processing
   chains.

   If a global value for this parameter has been set using
   CCDSETUP then that value will be used.
   [TRUE]
3 OUTLIST
OUTLIST = FILENAME (Write)
   A list of names specifying the result files. The names of the
   lists may use modifications of the input names (NDF names if
   available otherwise the names of the position lists). So if
   you want to call the output lists the same name as the input
   NDFs except to add a type use.

      OUTLIST > *.FIND

   If no NDF names are given (NDFNAMES is FALSE) then if you want
   to change the extension of the files (from ".CENT" to ".TRAN"
   in this case) use

      OUTLIST > *|CENT|TRAN|

   Or alternatively you can use an explicit list of names.
   These may use indirection elements as well as names separated
   by commas.
3 PA-PZ
PA-PZ = _DOUBLE (Read)
   These parameters supply the values of constants used in the
   expressions XFOR and YFOR. Using parameters allows
   the substitution of repeated constants (with extended
   precisions?) using one reference. It allows easy modification
   of parameterised expressions (expressions say with an
   adjustable centre) provided the application has not been used
   to apply a new transform using expressions. The parameter PI
   has a default value of 3.14159265359D0. An example of using
   parameters is:
      XFOR > SQRT(FX*FX+FY*FY)
      YFOR > ATAN2D(-FY,FX)
      FX > X-PA
      FY > Y-PB
      PA > X-centre-value
      PB > Y-centre-value
   This maps (X,Y) to (R,THETA) about a specified centre.
3 TRTYPE
TRTYPE = LITERAL (Read)
   The form of the transformation which is to be applied to the
   positions in the input lists. This can take the values

      - COEFF

      - EXPRES

      - WCS

      - STRUCT

   or unique abbreviations of.

   COEFF means that a linear transformation of the form
         X' = A + B*X + C*Y
         Y' = D + E*X + F*Y
   is to be applied to the data. In this case a prompt for the
   values of the coefficients A-F is made.

   EXPRES indicates that you want to supply algebraic-like
   expressions to transform the data. In this case the parameters
   XFOR and YFOR are used to obtain the expressions. Things like
       XFOR > 2.5*COS(X)+LOG10(Y)
       YFOR > 2.5*SIN(X)+EXP(Y)
   are allowed. The expression functions must be in terms of X
   and Y. For a full set of possible functions see SUN/61
   (TRANSFORM).

   WCS means that the transformation will be taken from the WCS
   component of an NDF.  In this case the name of the NDF
   containing the WCS component should be supplied (this will be
   picked up automatically through the association of an NDF
   and a position list if NDFNAMES and INEXT are both TRUE).
   The transformation will be that between the frames defined by
   the FRAMEIN and FRAMEOUT parameters.

   STRUCT signifies that a transform structure (probably created
   by REGISTER or CCDEDIT) is to be applied to the data. In this
   case the name of the object containing the structure should
   be supplied (this will be picked up automatically through the
   association of an NDF and a position list if NDFNAMES and
   INEXT are both TRUE) and whether to use the forward or inverse
   mappings (the FORWARD parameter).
   [COEFF]
3 TR
TR( 6 ) = _DOUBLE (Read)
   If TRTYPE="COEFF" is chosen then the values of this parameter
   are the 6 coefficients of a linear transformation of the type.
         X' = PA + PB*X + PC*Y
         Y' = PD + PE*X + PF*Y
   The default is the identity transformation.
   [0,1,0,0,0,1] [PA,PB,PC,PD,PE,PF]
3 TRANSFORM
TRANSFORM = TRN (Read)
   If TYPE="STRUCT" and INEXT=FALSE then this parameter is used to
   access the HDS object which contains the transform structure.
   The standard place to store a transform structure (in CCDPACK)
   is

       - NDF_NAME.MORE.CCDPACK.TRANSFORM

   Only one structure can be used at a time.
3 WCSFILE
WCSFILE = NDF (Read)
   If TRTYPE="WCS" and INEXT is false, then this parameter gives
   the name of the NDF containing the WCS component which is to
   be used for the transformation.
3 XFOR
XFOR = LITERAL (Read)
   If TRTYPE="EXPRES" is chosen then this parameter specifies the
   transformation that maps to the new X coordinate. The
   expression can contain constants, arithmetic operators
   (+,-,/,*,**) and the functions described in SUN/61
   (SIN,COS,TAN, etc.).

   As an inverse mapping is not required in this application
   there is no need to use the X'=func(X,Y) form only func(X,Y)
   is required, however, the variables must be given as
   "X" and "Y".
3 YFOR
YFOR = LITERAL (Read)
   If TRTYPE="EXPRES" is chosen then this parameter specifies the
   transformation that maps to the new Y coordinate. The
   expression can contain constants, arithmetic operators
   (+,-,/,*,**) and the functions described in SUN/61
   (SIN,COS,TAN, etc.).

   As an inverse mapping is not required in this application
   there is no need to use the Y'=func(X,Y) form only func(X,Y)
   is required, however, the variables must be given as
   "X" and "Y".
2 Examples
tranlist inlist='*' outlist='*.reg' trtype=wcs framein=pixel
         frameout=ccd_reg
   In this example all the NDFs in the current directory are
   accessed and their associated position lists are opened.
   The WCS component of each NDF is used to transform the
   coordinates in the position lists from pixel coordinates to
   coordinates in the frame with a domain 'CCD_REG' (the
   domain written by default by the REGISTER program).  The
   output lists are called ndf-name.reg and are associated
   with the NDFs.

tranlist inlist='*' outlist='*.tran' trtype=struct forward=false
   In this example transform structures in each of the NDFs in
   the current directory are used to transform their associated
   position lists.  The inverse mappings are used.

tranlist inlist='*_reduced' outlist='*.off' trtype=coeff
         tr='[10,1,0,20,0,1]'
   In this example the position lists associated with the NDFs
   *_reduced are transformed using the linear fit coefficients
   [10,1,0,20,0,1] resulting in a shift of all the positions in
   these lists of +10 in X and +20 in Y. The output lists are
   called ndf_name.off and are now associated with the NDFs.

tranlist inlist='*_resam' outlist='*.rot' trtype=coeff
         tr='[0,0.707,-0.707,0,0.707,0.707]'
   In this example a linear transformation is used to rotate the
   positions by 45 degrees about [0,0]. The linear coefficients
   for a rotation are specified as [0, cos, -sin, 0, sin, cos].

tranlist inlist=here outlist=reflected.dat trtype=express
         xfor=-x yfor=-y
   In this example a transformation expression is used to reflect
   the positions stored in the list associated with NDF here
   about the X and Y axes. A similar effect could be achieved
   with trtype=coeff and tr=[0,-1,0,0,0,-1].

tranlist inlist=ndf_with_list outlist='*.tran' trtype=express
         xfor='(fx*(1d0+pa*(fx*fx+fy*fy)))*ps+px'
         yfor='(fy*(1d0+pa*(fx*fx+fy*fy)))*ps+py'
         fx='(x-px)/ps' fy='(y-py)/ps'
         pa=pincushion_distortion_factor px=X-centre-value
         py=Y-centre-value ps=scale_factor
   In this example a general transformation (which is of the type
   used when applying pin cushion distortions) is applied to the
   position list associated with the NDF ndf_with_list. The
   transformation is parameterised with an offset and scale
   (converts pixel coordinates to one projection radius units)
   applied to the input coordinates and a pincushion distortion
   parameter pa.

tranlist ndfnames=false inlist='"list1,list2,list3"'
         outlist='"outlist1,outlist2,outlist3"' namelist=newfiles
   In this example the input position lists are not associated
   with NDFs (ndfnames=false) And have to be specified by name
   (no wildcards allowed). The output lists are also specified in
   this fashion, but, the same effect could have been achieved
   with outlist=out* as the input list names are now used as as
   modifiers for the output list names (the NDF names are always
   used when they are available -- see previous examples). The
   names of the output lists are written to the file newfiles,
   this could be used to specify the names of these files to
   another application using indirection (e.g inlist=^newfiles,
   with ndfnames=false again).  The transformation type is not
   specified in this example and will be obtained by prompting.
2 Notes
- Position list formats.

  CCDPACK supports data in two formats.

  CCDPACK format - the first three columns are interpreted as the
  following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which are the same but which have different locations
  on different images. Values in any other (trailing) columns are
  usually ignored.

  EXTERNAL format - positions are specified using just an X and
  a Y entry and no other entries.

    - Column 1: the X position

    - Column 2: the Y position

  This format is used by KAPPA applications such as CURSOR.

  Comments may be included in a file using the characters "#" and
  "!". Columns may be separated by the use of commas or spaces.

- NDF extension items.

  If NDFNAMES is TRUE then the item "CURRENT_LIST" of the
  .MORE.CCDPACK structure of the input NDFs will be located
  and assumed to contain the names of the lists whose positions
  are to be transformed. On exit this item will be updated to
  reference the name of the transformed list of positions.

  This application may also access the item "TRANSFORM" from
  the NDF extensions if NDFNAMES and INEXT are TRUE and
  TRTYPE="STRUCT".

- In this application data following the third column are copied
  without modification into the results files.
2 Behaviour_of_parameters
   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets or after a break of sometime.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE and NDFNAMES) have global
   values. These global values will always take precedence, except
   when an assignment is made on the command line.  Global values may
   be set and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
PDRAPER: Peter Draper (STARLINK)

MBT: Mark Taylor (STARLINK)
2 History
 22-JUL-1992 (PDRAPER):
    Original version.

 19-JUL-1995 (PDRAPER):
    Removed AIF_ calls.

 2-AUG-1995 (PDRAPER):
    Fixed so that correct transformation is compiled when getting
    transform information from an external file (worked ok for NDFs).

 3-MAR-1997 (PDRAPER):
    Removed control of top-level locators (foreign data access
    upgrade) and added DAT_ANNULs for LOCTR.

 1-APR-1999 (MBT):
    Added new TRTYPE of WCS.
1 TRANNDF
Transforms a list of images by resampling.

Usage:

   tranndf in out [method]

Description:

   This application performs the arbitrary transformation of a list
   of images using transform structures created by routines such as
   REGISTER and CCDEDIT. The output images are calculated by resampling
   the data of the input images. Output array elements are set to the
   bad value if their inverse-transformed coordinates lie outside the
   corresponding input image's coordinate limits.

   Images processed within CCDPACK may be resampled using the
   appropriate transformation structures located within the image's
   extensions. Using these facilities allows many images to be aligned
   with one invocation.
2 Parameters
For information on individual parameters, select from the list below:
3 CONSERVE
CONSERVE = _LOGICAL (Read)
   If CONSERVE is TRUE, the output values are normalised by the
   ratio of the output-to-input pixel areas.  In other words this
   conserves flux.  If CONSERVE is FALSE, there is no
   normalisation.  [TRUE]
3 IN
IN = image (Read)
   A list of image names whose data are to be transformed. The image
   names should be separated by commas and may include wildcards.
3 INEXT
INEXT = _LOGICAL (Read)
   If TRUE then the transformation which is to be applied to the
   image is stored in the image's CCDPACK extension
   (.MORE.CCDPACK.TRANSFORM). If FALSE then a transformation
   structure must be supplied via the parameter TRANSFORM. This
   transformation is then applied to the list of images.  [TRUE]
3 LBOUND
LBOUND() = _INTEGER (Read)
   If SHAPE is "SPECIFY" then this parameter specifies the lower
   pixel-index bounds of all the output images. The number of
   values should equal the maximum number of dimensions of the
   input images. The suggested defaults are the lower bounds
   generated by the SHAPE="AUTO" option for the first image. These
   bounds are probably small enough to ensure that all the
   transformed data (of the first image) will appear in the output
   image.
   [Dynamic default]
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 METHOD
METHOD = LITERAL (Read)
   The interpolation method used to resample the input image data
   arrays. Permitted values are "NEAREST" for nearest-neighbour,
   and "LININT" for linear interpolation.
   [NEAREST]
3 OUT
OUT = LITERAL (Write)
   Names of the output -- transformed -- images. These may be
   specified as list of comma separated names, using indirection
   if required, or, as a single modification element (of the
   input names). The simplest modification element is the
   asterisk "*" which means call each of the output images the same
   name as the corresponding input images. So,
      IN > *
      OUT > *
   signifies that all the images in the current directory should be
   used and the output images should have the same names. Other
   types of modification can also be used, such as,
      OUT > *-TRN
   which means call the output images the same as the input images
   but add -TRN to the end of the names. Replacement of a
   specified string with another in the output file names can
   also be used,
      OUT > *|RAW|RES|
   this replaces the string RAW with RES in any of the output
   names.
3 SHAPE
SHAPE = LITERAL (Read)
   The method to be used to determine the SHAPE of the output
   images. Can take one of the values "AUTO", "SAME", "SPECIFY".
   With the meanings.

      - AUTO    -- automatically determine the bounds of the
                   output images such that all of the input data
                   appears. This is achieved by transforming test
                   points along the current bounds so assumes
                   that the transformation will behave reasonably.

      - SAME    -- set the output image bounds to those of the
                   corresponding input images.

      - SPECIFY -- you will specify a single set of bounds for
                   all the output images. (See the LBOUND and UBOUND
                   parameters.)
   [AUTO]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output images.
   [Output from TRANNDF]
3 TRANSFORM
TRANSFORM = TRN (Read)
   If INEXT is FALSE then this parameter specifies the
   transformation structure.  This includes the file name and the
   HDS object.  For example, DISTORT.MAPPING would use the
   TRANSFORM structure called MAPPING in the HDS file DISTORT.
   Normally the object name is TRANSFORM.  The structure must
   contain both the forward and inverse mappings. This transform
   if supplied acts on all the input images.
3 UBOUND
UBOUND() = _INTEGER (Read)
   If SHAPE is "SPECIFY" then this parameter specifies the upper
   pixel-index bounds of all the output images. The number of
   values should equal the maximum number of dimensions of the
   input images. The suggested defaults are the upper bounds
   generated by the SHAPE="AUTO" option for the first image. These
   bounds are probably large enough to ensure that all the
   transformed data (of the first image) will appear in the output
   image.
   [Dynamic default]
2 Examples
tranndf * *-trn reset
   This transforms all the images in the current directory if
   they contain suitable transformation structures in their
   extensions. It uses nearest-neighbour resampling and conserves
   the flux levels. The output images are of a size such that all
   the input pixels have contributed.

tranndf curved straight linint shape=same
   As above, except linear interpolation is used, and the straight
   array uses the bounds of curved.

tranndf a119* *s inext=false transform=proj.merc shape=bounds
        lbound=[1,-20] ubound=[256,172]
   This transforms the images called a119*, using the transformation
   merc in the HDS file called proj, into images called a119*s.
   It uses nearest-neighbour resampling.  All the output images
   have size 256 x 192 pixels and origin (1,-20).
2 Notes
- This application is a restricted form of the KAPPA routine
  TRANSFORMER. If additional functionality is required then
  look at TRANSFORMER.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.
   The exceptions to this rule are:

      - LBOUND  -- always uses a dynamic default

      - UBOUND  -- always uses a dynamic default

      - TITLE   -- always "Output from TRANNDF"

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   after a break of sometime. The intrinsic default behaviour of
   the application may be restored by using the RESET keyword on
   the command line.

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.
2 Authors
MJC: Malcolm J. Currie (STARLINK)

PDRAPER: Peter Draper (STARLINK)
2 History
 1993 March 16 (MJC):
    Original version.

 18-JUN-1993 (PDRAPER):
    Changed for use in CCDPACK pipe-line - Lists of images,
    information logging etc. Restricted functionality to that which
    is used by CCDPACK (no axes information).

 19-JUL-1995 (PDRAPER):
    Removed AIF_ calls.

 6-SEP-1995 (PDRAPER):
    Updated for CCDPACK version 2.0.
2 Implementation_Status
   - Flux conservation can only be applied to constant-determinant
     or linear transformations.

   - The NDF components are processed by this application as
     follows:

      -  AXES, LABEL, UNITS, HISTORY, and extensions are merely
         propagated.

      -  QUALITY is not derived from the input image for a linearly
         interpolated image. The DATA and VARIANCE arrays are
         resampled.

   -  Bad pixels, including automatic quality masking, are supported.

   -  All non-complex numeric data types are supported.

   -  There can be an arbitrary number of image dimensions.
1 WCSEDIT
Modifies WCS components of a set of NDFs.

Usage:

   WCSEDIT in mode frame

Description:

   This task performs a set of miscellaneous modifications to the
   WCS (World Coordinate System) components of a list of NDFs.
   According to the MODE parameter it can:

      -  Set the Current frame

      -  Add a new frame

      -  Remove a frame

   The routine does not fail if some of the requested edits cannot
   be performed, but an output parameter MODIFIED records which
   NDFs were successfully modified.

   If a new frame is added it becomes the Current frame.  If a frame
   is removed, the Current frame is not changed (unless the Current
   frame itself is removed).
2 Parameters
For information on individual parameters, select from the list below:
3 COEFFS
COEFFS( * ) = _DOUBLE (Read)
   If MODE is ADD, this parameter is a list of the coefficients
   used for the mapping from the basis frame to the new frame.
   Its meaning and the number of values required depend on the
   value of MAPTYPE:

      -  UNIT       -- No values are required

      -  LINEAR     -- Six values C1-C6 are required:
           X' = C1 + C2 * X + C3 * Y
           Y' = C4 + C5 * X + C6 * Y

      -  PINCUSHION -- Three values C1-C3 are required:
           X' = X * ( 1 + C1 * ( (X - C2)**2 + (Y - C3)**2 ) )
           Y' = Y * ( 1 + C1 * ( (X - C2)**2 + (Y - C3)**2 ) )
3 DOMAIN
DOMAIN = LITERAL (Read)
   If MODE is ADD this gives the domain name to be used for the
   new frame.  Spaces in the name are ignored and letters are
   folded to upper case.  If the new frame is successfully added
   and any frame with the same domain name already exists, it
   will be removed, and a message will be printed to that effect.
3 EPOCH
EPOCH = _DOUBLE (Read)
   If a "Sky Co-ordinate System" specification is supplied (using
   parameter BASEFRAME) for a celestial co-ordinate system, then
   an epoch value is needed to qualify it. This is the epoch at
   which the supplied sky positions were determined. It should be
   given as a decimal years value, with or without decimal places
   ("1996.8" for example). Such values are interpreted as a
   Besselian epoch if less than 1984.0 and as a Julian epoch
   otherwise.
3 FRAME
FRAME = LITERAL (Read)
   This parameter specifies the 'basis frame', which has the
   following meaning according to the value of the MODE parameter:

      -  MODE = CURRENT -- The frame to be made Current

      -  MODE = REMOVE  -- The frame to remove; if it is a domain
                           name (see below) then all frames with
                           that domain will be removed.

      -  MODE = ADD     -- The new frame will be a copy of the
                           basis frame, and will be mapped from it
                           using the mapping given.

   The value of this parameter can be one of the following:

      -  A domain name such as SKY, AXIS, PIXEL, etc.

      -  An integer value giving the index of the required Frame
         within the WCS component.

      -  A "Sky Co-ordinate System" (SCS) value such as EQUAT(J2000)
         (see section "Sky Co-ordinate Systems" in SUN/95).
   A domain name is usually the most suitable choice.
3 IN
IN = LITERAL (Read)
   A list specifying the names of the NDFs whose WCS components
   are to be modified.  The NDF names should be separated by
   commas and may include wildcards.
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 MAPTYPE
MAPTYPE = LITERAL (Read)
   This parameter is required when MODE is ADD, and specifies the
   type of mapping which connects the basis frame to the new frame.
   It may take one of the following values:

      -  UNIT

      -  LINEAR

      -  PINCUSHION
   [UNIT]
3 MODE
MODE = LITERAL (Read)
   The action to be performed.  It may take one of the following
   values:

      -  ADD      -- Add a new frame (which becomes Current)

      -  CURRENT  -- Set the Current frame

      -  REMOVE   -- Remove a frame
   [CURRENT]
3 MODIFIED
MODIFIED = LITERAL (Write)
   On exit, this parameter gives a comma-separated list of all the
   NDFs which were successfully modified.  In particular, if MODE
   is CURRENT, this list will include all the NDFs which contained
   the specified frame, but exclude any which did not.
2 Examples
wcsedit * current ccd_reg
   This sets the current frame of all the NDFs in the current
   directory to the 'CCD_REG' domain.  The MODIFY parameter is
   set on output to contain the names of all those NDFs which
   had such a frame.

wcsedit data* remove frame=4
   The fourth frame in the WCS component of each NDF 'data*.sdf'
   is removed.

wcsedit "first,second" mode=add frame=GRID maptype=pcd
        coeffs=[-6.8e-10,0,0] domain=NEW
   A new frame, in the domain 'NEW', is added to the NDFs first
   and second.  It is connected to the previously existing GRID
   domain by a pincushion distortion mapping centred at the
   origin with a distortion coefficient of -6.8e-10.  If any
   frames with domain NEW already exist in those NDFs they are
   removed.
2 Notes
This routine provides similar functionality to that provided by
KAPPA applications WCSADD, WCSREMOVE and WCSFRAME, but allows
use of CCDPACK-style NDF lists.
2 Copyright
   Copyright (C) 1999 Central Laboratory of the Research Councils
2 Authors
MBT: Mark Taylor  (STARLINK)
2 History
 18-MAY-1999 (MBT):
    Original version.
1 WCSREG
Aligns NDFs using multiple frames from their WCS components.

Usage:

   WCSREG in domainlist

Description:

   This application takes a set of NDFs which have World Coordinate
   System (WCS) components, and tries to align them all according
   to an ordered list of frame domains.  If successful, it adds a
   new frame to the WCS component of each within which they are
   all aligned.  The TRANLIST or TRANNDF applications can then be
   used on the resulting NDFs.

   This can be of use when different kinds of alignment information
   are available between different members of a set of NDFs.  By
   supplying an ordered list of domains within which to align,
   the best alignment available can be made between different
   members of the set, falling back on second or third choices
   of alignment types where first choices are not available.

   The application operates on a set of NDFs, IN.  A list of
   domains DOMAINLIST within which to align, in order of preference,
   is specified, and a reference NDF is denoted by REFPOS.  On
   successful completion, a new frame (which becomes Current), with
   a domain given by OUTDOMAIN (default CCD_WCSREG) is added to
   each of the NDFs in the input set.  Any previously existing
   frames with this domain will be removed.

   For the reference NDF, there is a unit mapping between the new
   frame and its initial Current frame.  For each other NDF, the
   program attempts to find a mapping from the reference NDF to it.
   If it and the reference NDF do not share frames in any of the
   domains given by the DOMAINS parameter, it will try to use the
   WCS components of intermediate NDFs to find a path between them,
   using only the domains given.  The shortest available path which
   provides a link is chosen, and if there is more than one which
   meets this criterion, one which uses domains nearest the head of
   the list is preferred.

   If there is no path from the reference NDF to one of the other
   NDFs using the domains given, then no new frame will be written
   to that NDF (and a message indicating failure will be output),
   but any previously existing frames in the output domain will
   be removed.
2 Parameters
For information on individual parameters, select from the list below:
3 DOMAINS
DOMAINS( * ) = LITERAL (Read)
   This parameter should be a list of frame domains, in order
   of preference for achieving alignment.  Alignment paths
   between NDFs are selected by shortness of path, but in case
   of a tie, those using domains nearest the start of this list
   are used by preference.
3 IN
IN = LITERAL (Read)
   A list of the names of the NDFs which are to be aligned.  The
   names should be separated by commas and may include wildcards.
   They may alternatively be specified using an indirection file
   (the indirection character is "^").

   If the application is successful, a new frame with a domain
   determined by the OUTDOMAIN parameter will be added containing
   the alignment information.  This frame will be made the new
   Current domain.
3 LOGFILE
LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]
3 LOGTO
LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]
3 OUTDOMAIN
OUTDOMAIN = LITERAL (Read)
   This gives the name of the domain for the new frame which is
   added to the WCS components of the NDFs on successful
   completion.  If any frames in the same domain previously exist
   in the WCS component, they are removed.  The name is converted
   to upper case, and whitespace is removed.
   [CCD_WCSREG]
3 OVERRIDE
OVERRIDE = _LOGICAL (Read)
   If not all the NDFs can be aligned using the domains given in
   DOMAINS then the application will report on which sets of NDFs
   form connectable subsets of the IN list.  In this case, if this
   parameter is set FALSE, then the application will exit with an
   error message.  If it is set TRUE however, it will continue and
   insert new frames in those NDFs which can be reached from the
   one indicated by REFPOS, making no change to the others, except
   to remove any frames in the domain OUTDOMAIN which already exist.
   [FALSE]
3 REFPOS
REFPOS = _INTEGER (Read)
   The position within the IN list which corresponds to the
   reference NDF.  For each domain in DOMAINLIST, alignment will
   be attempted with the reference NDF first, and the mapping
   between the output frame and the first matching name in
   DOMAINLIST is a unit mapping.
   [1]
2 Examples
wcsreg * "ccd_reg,sky"
   In this example all the NDFs in the current directory are
   being aligned.  All contain a frame in their WCS components
   in the SKY domain with approximate information about the
   pointing, added by the telescope system at observation time.
   Some of the NDFs however overlap, and have been run through
   the REGISTER program which has added a frame in the CCD_REG
   domain containing more accurate alignment information derived
   from matching objects between different images.  Where two
   of the images have frames in the CCD_REG domain, this will
   be used to align them, but where they do not, the program
   will fall back on the less accurate SKY domain for alignment.
   The new frame added will be given the default domain name
   CCD_WCSREG.

   After this process, the NDFs can be presented to TRANNDF for
   resampling prior to making a mosaic.

wcsreg "obs1_*,obs2_*" outdomain=final
       domainlist="ccd_reg,inst_obs1,inst_obs2"
   NDFs with names starting 'obs1_' and 'obs2_' are aligned.
   Where they share the CCD_REG domain this will be used for
   alignment, but otherwise the domains INST_OBS1 and INST_OBS2
   will be used.  These domains perhaps contain information about
   the relative alignment of CCDs on the focal plane of the
   instrument, and may have been added to the WCS component
   using the ASTIMP application.  The name FINAL is used for the
   new domain added to the WCS component.
2 Behaviour_of_parameters
   Most parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets or after a break of sometime.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values.
   These global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.
2 Copyright
   Copyright (C) 1999 Particle Physics & Astronomy Research Council
2 Authors
MBT: Mark Taylor (STARLINK)
2 History
 13-APR-1999 (MBT):
    Original version.
1 XREDUCE
Starts the automated CCD data reduction GUI.

Usage:

   xreduce

Description:

   This command starts the CCDPACK reduction GUI.

   The GUI is specifically designed to help the inexperienced or
   occasional reducer of CCD data (although others will also find
   it of use). These aims are meet by providing an easy to use, X
   based, graphical interface that features contextual help and
   that limits options to those of immediate relevance. It
   concentrates on data organization and the definition of any CCD
   characteristics rather than on the nature and control of the
   core CCDPACK reduction programs.

   The reduction of the actual data is separate to the GUI and uses
   the automated scheduling facilities of CCDPACK.
2 Notes
Unknown detectors.
   If you do develop an import table or restoration (setup) file
   for a telescope/detector pass these on to the maintainer of
   this package, together with a description. They will be
   distributed in future releases for the benefit of others.
2 Configuration
   The interface can be configured by controlling the values of
   various CCDxxxxx global variables. These can be set in either a
   global configuration file called ".ccdpack" which should be
   placed in the $HOME directory, or by loading as part of a state
   from a local ".ccdpack" file. The names and functions of the
   more significant configurations follows.

      - CCDbrowser, the name of the WWW browser used to show
        hypertext help. This may only be Mosaic or netscape (or
        whatever the names of these browsers are on your system)
        and should be the full path names if they are not located
        on your PATH.

        This option can also be set using the environment variable
        HTX_BROWSER.

        The default is [Mm]osiac followed by [Nn]etscape.

      - CCDstarhtml, the top directories that contains the
        Starlink HTML documents (in particular sun139 and ccdpack
        hypertext help). This defaults to
        $CCDPACK_DIR/../../docs:$CCDPACK_DIR/../../help.

      - CCDprefs, this is an array of values that define widget
        preferences such as the colour scheme and the reliefs etc.
        The more interesting elements are:

           - (priority), this defines the priority of the preferences.
             If you want to override colours and fonts etc. from
             your .Xdefaults then set this value to widgetDefault.
             The normal value is userDefault as I think it looks nice
             the way it is.

           - (font_size), this is set to 12 or 14. Normally this is
             set to 14 if your display has more than 800 pixels in
             both dimensions.

           - (scheme_colour), this controls the scheme of colours
             used by the interface. XREDUCE has its own scheme but
             you override this by setting this to a new colour for
             the background, the other colours will be derived from
             this. For finer control see the palette.tcl script in
             the Tcl distribution.

           - (click_for_focus), this controls how the focus moves
             between the various widgets. If you set this to 0
             (false), then the focus follows the cursor position.

      - CCDdetectorcache, the directory that contains the known
        detector setups and import tables. Defaults to CCDPACK_DIR.
        If the variable CCDPACK_CONFIG is set this directory is also
        used.

   An example configuration file follows.

      file: ~/.ccdpack

      set CCDbrowser netscape
      set CCDprefs(priority) widgetDefault
      set CCDprefs(scheme_colour) bisque
      set CCDprefs(click_for_focus) 1
      set CCDdetectorcache /home/user/ccsetups

   This sets the default browser to netscape, allows any .Xdefaults
   to override any internal preferences, makes the focus follow the
   mouse and defines a local directory that contains setups and
   import tables.


2 Authors
PDRAPER: P.W. Draper (STARLINK, Durham University)
2 History
 14-SEP-1995 (PDRAPER):
    Original version.




1 Position_lists

 The positions of objects are stored in ordinary text files which are
 referred to as position lists. The format of these lists is flexible.
 Usually position lists have three columns:

     Identifier    X-position    Y-position

 these may be separated by commas or white space. The identifier is
 an integer value which is used to identify positions which are the
 related (i.e. of the same object on different frames) in different
 lists.

 If more than three columns exist then only the first three are used.

 If only two columns exist it is assumed that they are

     X-position   Y-position

 such lists may be produced by KAPPA applications. In applications
 which rely on a knowledge of the identifiers these are assumed to be
 monotonically increasing from one in the first row.

 Comments are allowed in position lists using the character "#".
 In-line and whole-line comments are allowed.

 Usually position lists are "associated" with images. What is means is
 that when a position list is created a record of its name is kept
 in the extension of the image. It is then usual to refer to the image
 instead of the position list when the position list is to be
 accessed. Applications which create new position lists (from old
 ones) associate the new position lists with the appropriate image.
 Using this method avoids any confusion about the relationship of
 position lists and images, which is vital when determining the
 registration of many images at one go. It also allows the use of
 the wildcarding properties of image names when accessing position
 lists.

 Position lists may be associated with images using the CCDEDIT
 routine. It is also possible to disable associations using the
 NDFNAMES global parameter (CCDSETUP).

1 Processing_lists_of_data

 Perhaps the most noticeable `feature' of CCDPACK programs is their
 ability to accept, and process, lists of data files and other
 associated parameters, such as exposure times and position list
 names.

 A list of `names' can be supplied in response to one prompt, or can
 be supplied on successive lines using the continuation character `-'
 to force a reprompt for more specifications. A list of names consists
 of a series of character strings separated by commas. Note that the
 list itself is really a string not a vector and should be enclosed in
 quotes "".  The quotes are not necessary if the list consists of only
 one name, or if given in response to a prompt. When using the C-shell
 it is necessary to protect the "" so that the final string passed to
 the application still contains these (so a suitable response would be
 '"image1,image2"').

2 Input wildcards
 The names of images given to CCDPACK routines may include wildcard
 specifications such as:

      *,?,[a-z]

 all of which have usual meanings, i.e. any number of characters and a
 single character, a range of characters etc.
 The simplest return would then be:

      IN > *

 and all the images in the current directory would be accessed. Other
 possibilities include specifications such as:

      IN > bias/*            (all images in the bias/ subdirectory)

      IN > rdata/*,bdata/*   (all images in the rdata/ and bdata/
                              subdirectories)
      IN > ffr*              (all images whose names begin with ffr)

      IN > NGC2261_?         (all images whose names begin with NGC2261_
                              followed by one extra character)

 If you are processing foreign data formats (i.e. non-NDF ones) then
 you can also wildcard these files, which may or may not include the
 file extension.

2 Indirection
 Names can also be stored in ordinary text files. Indirection through a
 text file is indicated by the character.

      ^

 The names may include wildcards (for images) and other indirections (up to
 7 deep). A typical response might be:

      IN > ^rflatfields.lis

 the rflatfields.lis file would contain something like:

      ffr1
      ffr4
      ffr10
      rflats/*

 Indirection can be mixed with other specifications in response to a
 prompt (or on the command line) i.e.:

      IN > *,^otherframes,elsewhere/r*

 etc.

2 Output_names

 All output names may be created from wildcards and/or formed through
 indirection. However, this is not as flexible as the input scheme,
 and wildcards and indirection cannot be mixed. An example of an
 output specification is:

      OUT > *

 This means call all the output images the same as the input images and put
 them in the same directory. Not necessarily what you want to do.

      OUT > *_debias

 This means call all the output images the same name as the associated
 input images, but append the string `_debias' to the names. A
 third option using wildcard methods is to replace the occurrences of a
 particular string within the input names with a new string, e.g.:

      OUT > *|debias|flattened|

 This will end with the image names having the string `debias'
 replaced with `flattened'. Indirection files follow the usual
 rules --- but if a wildcard is used in the file this must be the only
 entry --- and of course explicit names can be always be given for the
 output images in response to a prompt or on the command line.

 When image names include the directories too, only the image name
 itself may be modified. Image names always exclude the `.sdf' file type
 extension (or whatever your foreign data format extension is). Changing
 the directory of the output images (which otherwise will always be the
 same as the input images) is achieved by commands like:

      IN > /temp/auser/raw/*_ccd
      OUT > /home/auser/pro/*|_ccd|-pr|

 Which in this case will take all the images `*\_ccd' from one directory
 and create new images in the second directory replacing any occurrences
 of the string `_ccd' with `-pr'. (Remember the `*' in image output
 expressions represents only the names of the input images not the
 directory or any other information, these are only used if no
 `preferences' are shown in the output expression. To keep images from
 other directories in the current directory use commands like:

      IN > elsewhere/*
      OUT > ./*

 In general the same rules apply for non-image output names (such as
 when position list access routines are not using images to supply the
 name of the appropriate file), the only real difference is that when
 dealing with file names the complete name will be used (including the
 file type and directory information) and any substitutions must take
 this into account.

1 Typical_Initial_Reduction

 The following text displays the input to a typical reduction
 sequence, performed using CCDPACK. Note the sequence of operations
 and the use of single quotes to protect symbols with special meaning
 to the shell (these are only necessary when entering values on the
 command line). Only the lines starting a % line are meant to be typed!

     Initialise package.
     ---

 % ccdpack

     Clear any previous global parameters.
     ---

 % ccdclear

     Now set up the new global parameters. Set the bounds of the bias
     strip, the nominal readout noise value (in ADUs), the nominal
     Analogue to Digital Conversion (ADC) factor, the readout
     direction (along the X dimension). Set the useful extent of the
     CCD area, initialise the logfile system to write to the terminal
     and to echo to the logfile. Set PRESERVE to keep the input data
     type.
     ---

 % ccdsetup bounds=[323,349] rnoise=10 adc=1 direction=x \
            extent=[4,318,3,510] logto=both logfile=ccdpack.log \
            preserve=true reset accept

     Add some notes about this run.  --- The commands after this
     point could be entered into file and used as the input to
     ccdfork, whose output could then be forked into a background
     process.
     ---

 % ccdnote '"Example of typical CCDPACK reduction sequence"'

     Make the calibration bias image. RESET any previous parameter
     values back to their defaults (important in case of any
     previously latched parameters).
     ---

 % makebias in='bias/*' out=bias/master_bias method=median reset accept

     DEBIAS all the images. Note using a calibration bias image and
     normalising to the bias strip.
     ---

 % debias in='"flatr/*,flatb/*,bdata/*,rdata/*"' out='*_debias' \
          mask=mask/mask bias=bias/master_bias reset accept

     Create the calibration flat fields.
     ---

 % makeflat in='flatr/*_debias' out=flatr/master_flat reset accept
 % makeflat in='flatb/*_debias' out=flatb/master_flat reset accept

     Flat field the appropriate frames.
     ---

 % flatcor in='rdata/*_debias' out='rdata/*|debias|flattened|' \
           flat=flatr/master_flat reset accept
 % flatcor in='bdata/*_debias' out='bdata/*|debias|flattened|' \
           flat=flatb/master_flat reset accept


 If dark counts or pre-flash frames need processing, then they should
 be debiassed and made into calibration masters using MAKECAL. The
 calibration frame should then be (appropriately) subtracted from all
 frames before producing the flatfields and performing flatfield
 correction.

! $Id$
