      SUBROUTINE CCG1_CLIP<T>( <T>ARR, NENT, <T>MIN, <T>MAX , NGOOD,
     :                         STATUS )
*+
*  Name:
*     CCG1_CLIP<T>

*  Purpose:
*     To set any data outside a given range BAD.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_CLIP<T>( <T>ARR, NENT, <T>MIN, <T>MAX , STATUS )

*  Description:
*     This generic routine loops over all entries in <T>A. If any values
*     are outside the range <T>MIN to <T>MAX then they are set BAD.

*  Arguments:
*     <T>ARR = <COMM> (Given and Returned)
*        The list of values to be clipped within the given range. On
*        output this contains the clipped list.
*     NENT = INTEGER (Given)
*        The number of entries in <T>ARR.
*     <T>MIN = <COMM> (Given)
*        The minimum allowed value. All values below this are set BAD.
*     <T>MAX = <COMM> (Given)
*        The maximum allowed value. All values above this are set BAD.
*     NGOOD = INTEGER (Returned)
*        The number of values left after rejection.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council.
*     Copyright (C) 1999 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     MBT: Mark Taylor (STARLINK)
*     {enter_new_authors_here}

*  History:
*     4-APR-1991 (PDRAPER):
*        Original version.
*     15-MAR-1999 (MBT):
*        Modified to use PRIMDAT properly.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! BAD values

*  Arguments Given:
      INTEGER NENT
      <TYPE> <T>MIN
      <TYPE> <T>MAX

*  Arguments Given and Returned:
      <TYPE> <T>ARR( NENT )

*  Arguments Returned:
      INTEGER NGOOD

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER I                  ! Loop variable

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! PRIMDAT generic declarations
      INCLUDE 'NUM_DEC_<T>'      ! PRIMDAT declarations for type <COMM>
      INCLUDE 'NUM_DEF_CVT'      ! PRIMDAT generic definitions
      INCLUDE 'NUM_DEF_<T>'      ! PRIMDAT definitions for type <COMM>

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Loop for all input values
      NGOOD = NENT
      DO 1 I = 1, NENT

*  If this value is not BAD then test it.
         IF ( <T>ARR( I ) .NE. VAL__BAD<T> ) THEN
            IF ( NUM_LT<T>( <T>ARR( I ), <T>MIN ) .OR.
     :           NUM_GT<T>( <T>ARR( I ), <T>MAX ) ) THEN

*  Set it BAD.
               <T>ARR( I ) = VAL__BAD<T>

*  Decrement the valid values counter
               NGOOD = NGOOD - 1
            END IF
         END IF
 1    CONTINUE

      END
* $Id$
