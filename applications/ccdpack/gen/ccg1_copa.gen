      SUBROUTINE CCG1_COPA<T>( DIM, ARRIN, ARROUT, STATUS )
*+
*  Name:
*     CCG1_COPA<T>

*  Purpose:
*     To copy one vectorised array to another.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_COPA<T>( DIM, ARRIN, ARROUT, STATUS )

*  Description:
*     The input array, ARRIN, of dimension DIM, is copied into the
*     output array, ARROUT, of the same dimension.

*  Arguments:
*     DIM = INTEGER(Given)
*           Dimension of the input and output arrays.
*     ARRIN( DIM ) = <COMM>(Given)
*           The array to be copied.
*     ARROUT( DIM ) = <COMM>(Returned)
*           Output array containing copy of the input array.
*     STATUS = INTEGER (Given and Returned)
*           Global Status.

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council.
*     Copyright (C) 2005 Particle Physics & Astronomy Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     TIMJ: Tim Jenness (JAC, Hawaii)
*     {enter_new_authors_here}

*  History:
*     28-MAY-1991 (PDRAPER):
*        Original version.
*     17-SEP-2005 (TIMJ):
*        Use optimized VEC_xTOx functions
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants

*  Arguments Given:
      INTEGER DIM
      <TYPE> ARRIN( DIM )

*  Arguments Returned:
      <TYPE> ARROUT( DIM )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER IERR               ! Dummy variable for VEC_xTOx
      INTEGER NERR               ! Dummy variable for VEC_xTOx

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Loop over the whole of the input array copying the values to the
*  output array. Use VEC since this may be optimized better than
*  a hand written loop.
      CALL VEC_<T>TO<T>( .FALSE., DIM, ARRIN, ARROUT, IERR, NERR,
     :     STATUS )

      END
* $Id$
