#!/bin/csh
#+
#  Name:
#     dgeneric

#  Purpose:
#     Generates doubly generic code for CCDPACK

#  Language:
#     C-shell script

#  Invocation:
#     dgeneric filename [generic_types]

#  Arguments:
#     $1 = FILENAME 
#        The name of the doubly generic code file. This must contain
#        the tokens T1,T2 etc. instead of T.
#     $2 = GENERIC TYPES
#        The generic types to be doubly processed (defaults to numeric).
#     $3 = split
#        If set to any value then the final output file is split using
#        during the last generic pass. This results in files
#           $1b $1B $1w $W $1i $1r $1d 
#        if all the generic types are selected ($2=n).

#  Notes:
#     The split option may be used to reduce compilation resources.

#  Authors:
#     PDRAPER: Peter Draper (STARLINK)
#     {enter_new_authors_here}

#  History:
#     12-MAY-1993 (PDRAPER):
#        Original version.
#     28-JUN-1993 (PDRAPER):
#        Added split option to cope with DECstation inability to 
#        compile large doubly generic files.
#     30-JAN-1998 (PDRAPER):
#        Added check for generic script location.
#     {enter_changes_here}

#-
#
#  Check for input file.
     if ( $1 == "" ) then
        echo "Usage: dgeneric filename"
        exit
     else
        if ( ! ( -e $1 ) ) then
           set file = ${1}.gen
           if ( ! ( -e $file ) ) then 
              echo "$1 does not exist"
              exit
           endif
        else
           set file = $1
        endif
        echo "Processing $file"
     endif

#  Locate a copy of the generic script, or just guess.
     if ( -e /star/bin/generic ) then
        set GENERIC=/star/bin/generic
     else if ( $?STARLINK ) then 
        if ( -e ${STARLINK}/bin/generic ) then
           set GENERIC=${STARLINK}/bin/generic
        else 
           set GENERIC generic 
        endif
     endif


#  Replace the T1's etc. with the normal flags.
     onintr EXIT
     if ( -e dgeneric.gen ) then
        'rm' dgeneric.gen
     endif
     sed <$file  >dgeneric.gen   \
        -e s/T1/T/g          \
        -e s/TYPE1/TYPE/g    \
        -e s/LTYPE1/LTYPE1/g \
        -e s/CONST1/CONST/g  \
        -e s/HTYPE1/HTYPE/g  \
        -e s/COMM1/COMM/g

#  Generic this.
     if ( $2 == "" ) then 
        $GENERIC -t n dgeneric.gen
     else
        $GENERIC -t $2 dgeneric.gen
     endif

#  Second tokens. 
     if ( -e dgeneric2.gen ) then
        'rm' dgeneric2.gen
     endif
     sed <dgeneric.f  >dgeneric2.gen   \
       -e s/T2/T/g          \
       -e s/TYPE2/TYPE/g    \
       -e s/LTYPE2/LTYPE1/g \
       -e s/CONST2/CONST/g  \
       -e s/HTYPE2/HTYPE/g  \
       -e s/COMM2/COMM/g

#  Final generic process. If split is set then give generic the
#  -s flag
     if ( $3 == "" ) then
        if ( $2 == "" ) then 
           $GENERIC -t n dgeneric2.gen
        else
           $GENERIC -t $2 dgeneric2.gen
        endif

#  Set the output file name.
        set fname = $file:r
        'mv' dgeneric2.f ${fname}.f
     else

#  Splitting output into separate files. Need to rename the resultant files
#  to the correct names.
        foreach part ( dgeneric2b.f dgeneric2B.f dgeneric2w.f dgeneric2W.f \
                       dgeneric2i.f dgeneric2r.f dgeneric2d.f ) 
           if ( -e $part ) then 
              'rm' $part
           endif
        end
        if ( $2 == "" ) then 
           $GENERIC -t n  -s dgeneric2.gen
        else
           $GENERIC -t $2 -s dgeneric2.gen
        endif

#  Now look for all dgeneric2* files. Get the * value and rename.
        set fname = $file:r
        foreach part ( dgeneric2*.f )
           set this_part = $part:r
           set exten = `echo $this_part | sed "s:dgeneric2::" `
           'mv' $part ${fname}${exten}.f
        end
     endif

# Finished. Get rid of intermediary files.
EXIT:
    'rm' dgeneric.gen dgeneric.f dgeneric2.gen
     exit
# $Id$
