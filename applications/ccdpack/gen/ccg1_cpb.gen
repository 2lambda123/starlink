      SUBROUTINE CCG1_CPB<T>( BADVEC, VEC, EL, STATUS )
*+
*  Name:
*     CCG1_CPB<T>

*  Purpose:
*     To CoPy the BAD values from BADVEC into VEC.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_CPB<T>( BADVEC, VEC, EL, STATUS )

*  Description:
*     The routine loops all the values in BADVEC. If it encounters a BAD
*     value then in the corresponding element of the VEC array is set
*     BAD.

*  Arguments:
*     BADVEC ( EL ) = <COMM> (Given)
*        Vectorised array from which the BAD values are to be copied
*     VEC ( EL ) = <COMM> (Given and Returned)
*        Vectorised array into which the BAD values are to be copied
*     EL = INTEGER (Given)
*        Number of array elements to process.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council. All
*     Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     {enter_new_authors_here}

*  History:
*     11-APR-1991 (PDRAPER):
*        Orginal Version
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*.

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! BAD value codes

*  Arguments Given:
      INTEGER EL
      <TYPE> BADVEC( EL )

*  Arguments Given and Returned:
      <TYPE> VEC( EL )

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER I                  ! Loop counter for array elements

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

      DO 1 I = 1, EL
         IF ( BADVEC( I ) .EQ. VAL__BAD<T> ) THEN
            VEC( I ) = VAL__BAD<T>
         END IF
 1    CONTINUE

      END
* $Id$
