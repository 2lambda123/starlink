      SUBROUTINE CCG1_FRAC<T>( EL, ARRAY, NFRAC, FRAC, BAD, CLFRAC,
     :                         VALUES, STATUS )
*+
*  Name:
*     CCG1_FRAC<T>

*  Purpose:
*     Finds values corresponding to specified fractions of an array's
*     ordered distribution.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_FRAC<T>( EL, ARRAY, NFRAC, FRAC, BAD, CLFRAC, VALUES,
*                        STATUS )

*  Description:
*     This routine finds the values at defined fractions of an array's
*     ordered distribution, such as percentiles.  Thus to find the
*     upper-quartile value, the fraction would be 0.75.  Since it uses
*     an histogram technique rather than sorting the whole array, for
*     efficiency, the result may not be exactly correct.  However, 
*     the histogram has a large number of bins (10000), combined with
*     linear interpolation between bins in the routine reduce the error.
*     The histogram extends between the minimum and maximum data values.
*
*     The routine also has an iterative method, whereby outliers, which
*     compress the vast majority of data values into a few bins, are
*     excluded from the histogram.  Clipping occurs from both ends.
*     A contiguous series of bins are removed until the largest
*     or smallest fraction is encountered.  Where the rejection of bins
*     end, defines new limits, encompassing the vast majority of values.
*     A new histogram is calculated using these revised limits.  The
*     excluded outliers are still counted in the evaluation of the
*     fractions.  The criterion for iteration may need tuning in the
*     light of experience.  At present it is when there are fewer than
*     4% non-zero bins.
*
*     The iteration can still fail to find accurate fractional values if
*     smallest and largest fractions are close to 0 or 1 and correspond
*     to extreme outliers.  The routine recognises this state and
*     determines the values for each outlier fraction separately, and
*     then uses the next interior fraction as the limit.  Then the
*     routine proceeds with the clipping described above.

*  Arguments:
*     EL = INTEGER (Given)
*        The number of elements of the array to be analysed.
*     ARRAY( EL ) = <TYPE> (Given)
*        The array for which the chosen statistics are required.
*     NFRAC = INTEGER (Given)
*        Number of fractional positions.
*     FRAC( NFRAC ) = DOUBLE PRECISION (Given and Returned)
*        Fractional positions in the histogram in the range 0.0--1.0.
*        They must be given in ascending order.
*     BAD = LOGICAL (Given and Returned)
*        True when bad pixels may be present.
*     CLFRAC( NFRAC ) = DOUBLE PRECISION (Returned)
*        The clipped fractional positions in the histogram in the range
*        0.0--1.0 after iterative clipping of the histogram.
*     VALUES( NFRAC ) = DOUBLE PRECISION (Returned)
*        Values corresponding to the ordered fractional positions in
*        the histogram.
*     STATUS = INTEGER (Given & Returned)
*        Global status.

*  Notes:
*     -  For integer types the number of bins does not exceed the
*     data range.  The number of bins is reduced as clipping occurs.

*  Deficiencies:
*     -  The iterative algorithm is not especially efficient; for data 
*     with a very wide range the iterations can be numerous.  A
*     sigma-clipping approach to remove the outliers might be better.
*     -  The adjustment of the limiting fractions is done for each
*     limit separately, thus involving a further pass through the
*     array.  At present it finds the more extreme outlier first by
*     comparing the bin number of the limits with respect to the mean
*     bin number.

*  Authors:
*     MJC: Malcolm J. Currie (JAC)
*     MBT: Mark Taylor (STARLINK)
*     {enter_new_authors_here}

*  History:
*     31-MAY-2000 (MJC):
*        Original version.
*     11-JUN-2000 (MJC)
*        Improved the algorithm for efficiency and scope.  Fixed bugs
*        involving clipping fractions and made returned values double
*        precision.
*     4-JUL-2000 (MBT):
*        Adapted for use with CCDPACK.
*     20-OCT-2000 (MJC):
*        Adjust the minimum binsize to be resolvable at the data type's
*        precision.  This includes testing for floating-point integers
*        which could lead to an artifically sparse histogram.  Use
*        previous cycle's histogram for the case where the histogram is
*        naturally sparse and the increased resolution made no
*        difference to the clipping limits.
*     24-OCT-2000 (MJC):
*        Tested for extreme fractions and assign to the limiting values.
*        Fixed comparison bug finding clipped limits.
*        Remove initial experimental code introduced for previous fix.
*        Some corrections to NUM_<func> and intrinisc-function usage.
*        thus curing a potential divide-by-zero error if maximum were
*        -1 times the minimum.
*     15-NOV-2000 (MBT):
*        Fixed overflow bug possible when using signed integer types.
*     21-NOV-2000 (MBT):
*        Fixed overflow bug possibly when using DOUBLE type.
*     24-NOV-2000 (MBT):
*        Fixed another type-dependent bug.
*     16-JUL-2001 (MBT):
*        Added a new STATUS check to prevent errors when dealing with
*        data arrays containing all the same values.
*     3-SEP-2001 (MBT):
*        More bug fixes - prevented errors when there are many identical
*        values in the array, and replaced some ordinary arithmetic by
*        generic-type-safe equivalents.
*     {enter_further_changes_here}

*-

*  Type Definitions:
      IMPLICIT NONE

*  Global Constants:
      INCLUDE 'SAE_PAR'        ! Global SSE definitions
      INCLUDE 'PRM_PAR'        ! VAL__ constants

*  Arguments Given:
      INTEGER EL
      <TYPE> ARRAY( EL )
      INTEGER NFRAC

*  Arguments Given and Returned:
      DOUBLE PRECISION FRAC( NFRAC )
      LOGICAL BAD

*  Arguments Returned:
      DOUBLE PRECISION CLFRAC( NFRAC )
      DOUBLE PRECISION VALUES( NFRAC )

*  Status:
      INTEGER STATUS

*  Local Constants:
      DOUBLE PRECISION FILLIM  ! Minimum fraction of fill histogram
      PARAMETER( FILLIM = 0.04D0 ) ! bins to avoid iteration

      INTEGER NUMBIN           ! Number of bins in histogram
      PARAMETER( NUMBIN = 10000 ) ! should be enough

      INTEGER NLIMIT           ! Number of limits
      PARAMETER( NLIMIT = 2 )

      REAL STATIC              ! Minimum change allowed in cliiping
      PARAMETER( STATIC = 4.0 * VAL__EPSR ) ! fraction (twice precision
                               ! for the difference of a pair and twice
                               ! because average value is 0.5, not 1)

*  Local Variables:
      <LTYPE> AVELIM           ! Half the average of data limits
      DOUBLE PRECISION BINSIZ  ! Bin width of histogram
      DOUBLE PRECISION CLIPFR( NLIMIT ) ! Bin contents clipped as fraction
      INTEGER CLIPSU( NLIMIT ) ! Count of bin contents clipped
      INTEGER CLNBIN           ! Number of histogram bins actually used
      <LTYPE> DATLIM( NLIMIT ) ! Data limits for histogram
      DOUBLE PRECISION DMAX    ! Maximum value
      DOUBLE PRECISION DMIN    ! Minimum value
      DOUBLE PRECISION DNBIN   ! Number of histogram bins
      DOUBLE PRECISION DNVAL   ! Number of valid data values
      LOGICAL FINDHI           ! Form a histogram?
      DOUBLE PRECISION FRALIM( NLIMIT ) ! Smallest and largest fractions
      DOUBLE PRECISION FRATOT( NLIMIT ) ! Counts corresponding to clipped frac
      DOUBLE PRECISION HALFIL  ! Minimum number of bins
      DOUBLE PRECISION HISLIM( NLIMIT ) ! Limits for fraction finding
      INTEGER HIST( NUMBIN )   ! Histogram for finding fractional values
      LOGICAL INTVAL           ! Data are integers?
      INTEGER I                ! Loop counter
      INTEGER J                ! Loop counter for lower histogram bins
      INTEGER K                ! Loop counter for upper histogram bins
      DOUBLE PRECISION LIMITS( NLIMIT ) ! Limits beyond which
                               ! percentiles are not computed only
                               ! assigned the extreme values
      LOGICAL LOOP             ! Iterate to find limits for histogram
      INTEGER LOWER            ! Index of lower limiting fraction
      INTEGER MAXBIN           ! Maximum number of histogram bins
      <LTYPE> MAXV             ! Minimum value in the array
      DOUBLE PRECISION MEAN    ! Bin index of mean
      <LTYPE> MINV             ! Maximum value in the array
      INTEGER NBIN             ! Maximum number of histogram bins used
      INTEGER NUMBER           ! Number of non-zero histogram bins
      INTEGER NUMOUT           ! Number of outliers computed separately?
      INTEGER NUMVAL           ! Number of good values in input array
      <LTYPE> RANGE            ! Half the data range
      DOUBLE PRECISION SCALE   ! Fractional range after clipping
      INTEGER SUM              ! Sum of histogram count
      LOGICAL TRIMED( NLIMIT ) ! Trimmed the histogram at either end?
      INTEGER UPPER            ! Index of upper limiting fraction

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'    ! NUM declarations for conversions
      INCLUDE 'NUM_DEC_<T>'    ! NUM declarations for functions
      INCLUDE 'NUM_DEF_CVT'    ! NUM definitions for conversions
      INCLUDE 'NUM_DEF_<T>'    ! NUM definitions for functions

*.

*  Check the inherited status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Check that the requested values are in the required form.
      DO I = 1, NFRAC
         IF ( FRAC( I ) .LT. 0D0 .OR. FRAC( I ) .GT. 1D0 ) THEN
            STATUS = SAI__ERROR
            CALL ERR_REP( 'CCG1_FRAC_BADDAT', 
     :'  CCG1_FRAC: FRAC values out of range (programming error)',
     :   STATUS )
            GO TO 999
         ELSE IF ( I .GT. 1 .AND. FRAC( I ) .LT. FRAC( I - 1 ) ) THEN
            STATUS = SAI__ERROR
            CALL ERR_REP( 'CCG1_FRAC_BADDAT',
     :'  CCG1_FRAC: FRAC values out of order (programming error)',
     :   STATUS )
            GO TO 999
         END IF
      END DO

*  Obtain the initial limiting values.
*  ===================================

*  Obtain the maximum and minimum values to define the bounds of the
*  histogram, and set the number of valid pixels in the array.
      CALL CCG1_MNMX<T>( ARRAY, EL, BAD, MINV, MAXV, NUMVAL, STATUS )
      DNVAL = DBLE( NUMVAL )

*  Make double-precision extreme values.
      DMIN = NUM_<T>TOD( MINV )
      DMAX = NUM_<T>TOD( MAXV )

*  Set initial histogram limits.
      HISLIM( 1 ) = DMIN
      HISLIM( 2 ) = DMAX
      DATLIM( 1 ) = MINV
      DATLIM( 2 ) = MAXV

*  Determine if data are integer (although perhaps stored as floating
*  point).  First the trivial case for integer data types.
      IF ( VAL__EPS<T> .EQ. 1 ) THEN
         INTVAL = .TRUE.
      ELSE

*  The extreme values must not exceed the integer dynamic range.
         IF ( NUM_<T>TOI( MAXV ) .GT. VAL__MAXI .OR. 
     :        NUM_<T>TOI( MINV ) .LT. VAL__MINI ) THEN
            INTVAL = .FALSE.
         ELSE

*  Test the pixel values until any is not an integer.  The test in fact
*  has a wide margin of tolerance.  We are just trying to ensure that
*  the histogram is not artificially sparse.  Therefore the limiting
*  sparseness fraction is adequate.  This does break down for real
*  values greater than about +/-8dex6 to the integer-value limits.
            INTVAL = .TRUE.
            I = 0
            IF ( BAD ) THEN
               DO WHILE ( INTVAL .AND. I .LT. EL )
                  I = I + 1
                  IF ( ARRAY( I ) .NE. VAL__BAD<T> ) THEN
                     INTVAL = NUM_<T>TOD( NUM_ABS<T>( ARRAY( I ) -
     :                        NUM_NINT<T>( ARRAY( I ) ) ) ) .LT. FILLIM 
                  END IF
               END DO

*  Make more efficient if there are no bad pixels present.
            ELSE
               DO WHILE ( INTVAL .AND. I .LT. EL )
                  I = I + 1
                  INTVAL = NUM_<T>TOD( NUM_ABS<T>( ARRAY( I ) -
     :                     NUM_NINT<T>( ARRAY( I ) ) ) ) .LT. FILLIM 
               END DO
            END IF
         END IF
      END IF

*  Set the number of histogram bins.
*  =================================

*  For integer types with a narrow range of values we don't want lots of
*  empty fractional bins.  Use the floating-point values to avoid
*  signing of UW and UB in integer form.
      IF ( '<T>' .EQ. 'B' .OR. '<T>' .EQ. 'UB' .OR.
     :     '<T>' .EQ. 'W' .OR. '<T>' .EQ. 'UW' .OR.
     :     '<T>' .EQ. 'I' ) THEN
         NBIN = MIN( NINT( DMAX ) - NINT( DMIN ) + 1, NUMBIN )
      ELSE
         NBIN = NUMBIN
      END IF

*  Avoid artificially sparse histogram for small array dimension.
      NBIN = MIN( NBIN, NUMVAL / 2 )
      HALFIL = 0.5D0 / FILLIM

*  Obtain the extreme fractions.
*  =============================

*  Specify the fractions to be used as limits.
      LOWER = 1
      UPPER = NFRAC

*  Percentiles close to 0 or 100 can be assigned the extreme values
*  and this also avoids problems trying to compute histogram fractions
*  with fewer than two values.  
      LIMITS( 1 ) = 1.0D0 / DNVAL
      LIMITS( 2 ) = 1.0D0 - LIMITS( 1 )
      DO I = 1, NFRAC
         IF ( FRAC( I ) .LE. LIMITS( 1 ) ) THEN
            VALUES( I ) = NUM_<T>TOD( MINV )
            CLFRAC( I ) = FRAC( I )
            LOWER = LOWER + 1

         ELSE IF ( FRAC( I ) .GE. LIMITS( 2 ) ) THEN
            VALUES( I ) = NUM_<T>TOD( MAXV )
            CLFRAC( I ) = FRAC( I )
            UPPER = UPPER - 1
         END IF
      END DO

*  Exit if all the required fractions' values are known.
      IF ( UPPER .LT. LOWER ) GO TO 999

*  Obtain the extreme fractions.  If only one supplied, make both
*  limits the same.  Constrain to be in the range 0 to 1.
      FRALIM( 1 ) = MAX( FRAC( LOWER ), 0D0 )
      IF ( NFRAC .EQ. 1 ) THEN
         FRALIM( 2 ) = FRALIM( 1 )
      ELSE
         FRALIM( 2 ) = MIN( FRAC( UPPER ), 1D0 )
      END IF

*  Find number of elements corresponding to the initial limiting
*  fractions.
      FRATOT( 1 ) = DNVAL * FRALIM( 1 )
      FRATOT( 2 ) = DNVAL * ( 1D0 - FRALIM( 2 ) )

*  Initialise clipping sums and fractions modified in the iteration.
      CLIPSU( 1 ) = 0
      CLIPSU( 2 ) = 0
      CLIPFR( 1 ) = 0D0
      CLIPFR( 2 ) = 0D0

*  Iteration loop testing the histogram for sparseness
*  ===================================================

*  Loop until accurate values are obtained.
      LOOP = .TRUE.
      FINDHI = .TRUE.
      NUMOUT = 0
      SCALE = 1D0
      DO WHILE ( LOOP )

         IF ( FINDHI ) THEN

*  Set the minimum width of a bin so that each of the histogram bins
*  is resolvable.  The halving of the data limits in the below code
*  prevents arithmetic overflow for data with a very large dynamic
*  range.
            RANGE = ABS( DATLIM( 2 ) / 2<CONST> -
     :                   DATLIM( 1 ) / 2<CONST> )

*  For the case of integers the maximum number of bins is data range 
*  plus one.
            IF ( INTVAL ) THEN
               IF ( NUM_<T>TOI( RANGE ) .LE. ( VAL__MAXI - 1 ) / 2 )
     :         THEN
                  MAXBIN = NUM_<T>TOI( RANGE ) * 2 + 1
               ELSE
                  MAXBIN = VAL__MAXI
               END IF

*  For floating point we have at least two bins.
            ELSE
               AVELIM = ( ABS( DATLIM( 2 ) / 2<CONST> ) +
     :                    ABS( DATLIM( 1 ) / 2<CONST> ) )
               MAXBIN = MIN( NUMBIN, NUM_<T>TOI( NUM_INT<T>( 
     :                  MIN( NUM_ITO<T>( VAL__MAXI ),
     :                  RANGE / AVELIM / VAL__EPS<T> / 2<CONST> ) ) ) )
            END IF

*  Set the number of bins.  This is adjusted because the clipping itself
*  may make the histogram sparse artificially.  Set a reasonable
*  minimum number of bins subject to the MAXBIN limit.
            CLNBIN = MIN( MAXBIN, 
     :                    INT( MAX( HALFIL, DBLE( NBIN ) * SCALE ) ) )
            DNBIN = DBLE( CLNBIN )

*  Generate the histogram between the current data bounds.  Do not
*  recompute if already known.
            CALL CCG1_GHST<T>( BAD, EL, ARRAY, CLNBIN, DATLIM( 2 ), 
     :                         DATLIM( 1 ), HIST, STATUS )
         ELSE
            FINDHI = .TRUE.
         END IF
         IF ( STATUS .NE. SAI__OK ) GO TO 999

*  Count the number of non-empty bins in the histogram.
         NUMBER = 0
         DO I = 1, CLNBIN
            IF ( HIST( I ) .GT. 0 ) NUMBER = NUMBER + 1
         END DO

*  Is the histogram too sparse, suggesting outliers.
         IF ( DBLE( NUMBER ) / DNBIN .LT. FILLIM ) THEN

*  Obtain the bin width for this iteration.
            BINSIZ = ( NUM_<T>TOD( DATLIM( 2 ) ) - 
     :                 NUM_<T>TOD( DATLIM( 1 ) ) ) / DNBIN

*  Remove lower outliers.
*  ======================

*  Can only trim the lower data limit if the smaller fraction limit
*  has not been reached.
            IF ( FRALIM( 1 ) .GT. CLIPFR( 1 ) ) THEN

*  Try to eliminate the outliers.  Sum the histogram bins skipped over
*  until the lower fraction limit is reached.
               J = 1
               DO WHILE ( CLIPSU( 1 ) .LT. FRATOT( 1 ) .AND.
     :                    J .LE. CLNBIN )
                  CLIPSU( 1 ) = CLIPSU( 1 ) + HIST( J )
                  J = J + 1
               END DO

*  If we've overshot the lower fraction limit skip back one.
               IF ( CLIPSU( 1 ) .GT. FRATOT( 1 ) ) THEN
                  J = J - 1
                  CLIPSU( 1 ) = CLIPSU( 1 ) - HIST( J )
               END IF

*  Find the new limiting value for the finer-resolution histogram.
               DATLIM( 1 ) = NUM_ADD<T>( DATLIM( 1 ),
     :                       NUM_DTO<T>( DBLE( J - 1 ) * BINSIZ ) )
               HISLIM( 1 ) = NUM_<T>TOD( DATLIM( 1 ) )

*  Set new data limits.
               CLIPFR( 1 ) = DBLE( CLIPSU( 1 ) ) / DNVAL

*  Determine if any thinning was made.
               TRIMED( 1 ) = J .GT. 1
            END IF

*  Remove upper outliers.
*  ======================

*  Can only trim the upper data limit if the larger fraction limit
*  has not been reached.
            IF ( ( 1D0 - FRALIM( 2 ) ) .GT. CLIPFR( 2 ) ) THEN

*  Try to eliminate the outliers.  Sum the histogram bins skipped over
*  until the upper fraction limit is reached.
               K = CLNBIN
               DO WHILE ( CLIPSU( 2 ) .LT. FRATOT( 2 ) .AND. K .GE. 1 )
                  CLIPSU( 2 ) = CLIPSU( 2 ) + HIST( K )
                  K = K - 1
               END DO

*  If we've overshot the upper fraction limit skip forward one.
               IF ( CLIPSU( 2 ) .GT. FRATOT( 2 ) ) THEN
                  K = K + 1
                  CLIPSU( 2 ) = CLIPSU( 2 ) - HIST( K )
               END IF

*  Find the new limiting value for the finer-resolution histogram.
               DATLIM( 2 ) = NUM_SUB<T>( DATLIM( 2 ), 
     :                       NUM_DTO<T>( DBLE( CLNBIN - K ) * BINSIZ ) )
               IF ( NUM_LT<T>( DATLIM( 2 ), DATLIM( 1 ) ) )
     :            DATLIM( 2 ) = DATLIM( 1 )
               HISLIM( 2 ) = NUM_<T>TOD( DATLIM( 2 ) )

*  Set new data limits.
               CLIPFR( 2 ) = DBLE( CLIPSU( 2 ) ) / DNVAL

*  Determine if any thinning was made.
               TRIMED( 2 ) = K .LT. CLNBIN
            END IF

*  Find the range scaling after clipping.
            SCALE = 1D0 - CLIPFR( 1 ) - CLIPFR( 2 )

*  Time to exit the loop?
*  ======================

*  Need to exit the loop when further thinning of the histogram is not
*  possible.
            LOOP = TRIMED( 1 ) .OR. TRIMED( 2 )

*  Under some circumstances (many elements have identical values), 
*  the binsize can decay to zero because the algorithm keeps thinking 
*  there are outliers, which leads to an infinite loop.  The following 
*  test breaks out in this case.
            LOOP = LOOP .AND. NUM_GT<T>( DATLIM( 2 ), DATLIM( 1 ) )

*  The histogram may still be sparse but no trimming is possible.
*  This could happen with a fraction close to 0.0 or 1.0 which locates
*  an extreme outlier, leaving the vast majority of values in one to a
*  few bins.  There the outlier has to be found and its value found,
*  and the next interior value used, to narrow the dynamic range.
*  In fact both limits could be at extreme outliers, but for now deal
*  with one at a time.
            IF ( .NOT. LOOP ) THEN

*  Determine which is the outlier.
*  ===============================

*  Find the mean bin.
               SUM = 0
               DO I = 1, CLNBIN
                  SUM = SUM + HIST( I )
               END DO
               MEAN = DBLE( SUM ) / DNBIN

*  The outlier is the one further from the mean.
               IF ( ABS( MEAN - DBLE( J ) ) .GT.
     :              ABS( DBLE( K ) - MEAN ) ) THEN

*  Lower outlier to be computed separately.
*  ========================================

*  Allow for the clipping of the fractions, which has an offset and
*  scaling.
                  CLFRAC( LOWER ) = ( FRAC( LOWER ) - CLIPFR( 1 ) ) /
     :                              SCALE

*  Estimate the value at the outlier fraction of the distribution.
*  For best results we should compute a new histogram around the
*  outlier bin to get a precise value, but in fractional terms, this
*  should be adequate.  Protect against the bin limits being the
*  same, although this should not occur.
                  IF ( HISLIM( 1 ) .NE. HISLIM( 2 ) ) THEN
                     CALL CCD1_HISP( HIST, CLNBIN, HISLIM( 1 ),
     :                               ( HISLIM( 2 ) - HISLIM( 1 ) ) /
     :                               DBLE( CLNBIN ), CLFRAC( LOWER ),
     :                               VALUES( LOWER ), STATUS )
                  ELSE
                     VALUES( LOWER ) = HISLIM( 1 )
                  END IF

*  Increment the counter to exclude the computed value.
                  LOWER = LOWER + 1

*  Set new lower limits.
                  FRALIM( 1 ) = MAX( FRAC( LOWER ), 0D0 )
                  FRATOT( 1 ) = DNVAL * FRALIM( 1 )

               ELSE

*  Upper outlier to be computed separately.
*  ========================================

*  Allow for the clipping of the fractions, which has an offset and
*  scaling.
                  CLFRAC( UPPER ) = ( FRAC( UPPER ) - CLIPFR( 1 ) ) /
     :                              SCALE

*  Estimate the value at the outlier fraction of the distribution.
*  For best results we should compute a new histogram around the
*  outlier bin to get a precise value, but in fractional terms, this
*  should be adequate.
                  IF ( HISLIM( 1 ) .NE. HISLIM( 2 ) ) THEN
                     CALL CCD1_HISP( HIST, CLNBIN, HISLIM( 1 ), 
     :                               ( HISLIM( 2 ) - HISLIM( 1 ) ) /
     :                               DBLE( CLNBIN ), CLFRAC( UPPER ), 
     :                               VALUES( UPPER ), STATUS )
                  ELSE
                     VALUES( UPPER ) = HISLIM( 1 )
                  END IF

*  Decrement the counter to exclude the computed value.
                  UPPER = UPPER - 1

*  Set new upper limits.
                  FRALIM( 2 ) = MIN( FRAC( UPPER ), 1D0 )
                  FRATOT( 2 ) = DNVAL * ( 1D0 - FRALIM( 2 ) )

*  Find number of elements corresponding to the initial limiting
*  fractions.
               END IF

*  Continue the loop unless we're getting nowhere.
               NUMOUT = NUMOUT + 1
               LOOP = NUMOUT .LT. 5

*  Note that the histogram for these limits is known.
               FINDHI = .FALSE.
            END IF

*  Histogram is not too sparse so the histogram limits are satisfactory
*  to compute the values corresponding to the clipped fractions.
         ELSE
            LOOP = .FALSE.
         END IF
      END DO

*  Compute remaining fractions.
*  ============================

*  Loop over those fractions which we have not already derived.  Protect
*  against the bin limits being the same, although this should not occur.
      IF ( HISLIM( 1 ) .NE. HISLIM( 2 ) ) THEN
         DO I = LOWER, UPPER

*  Modify the original fractions to allow for the clipped histogram.
*  Allow for the clipping of the fractions, which has an offset and
*  scaling.
            CLFRAC( I ) = ( FRAC( I ) - CLIPFR( 1 ) ) / SCALE
 
*  Estimate the values at the fractions of the distribution.
            CALL CCD1_HISP( HIST, CLNBIN, HISLIM( 1 ),
     :                      ( HISLIM( 2 ) - HISLIM( 1 ) ) 
     :                      / DBLE( CLNBIN ), CLFRAC( I ), VALUES( I ), 
     :                      STATUS )
         END DO
      ELSE
         DO I = LOWER, UPPER
            VALUES( I ) = HISLIM( 1 )
         END DO
      END IF

 999  CONTINUE

      END
* $Id$
