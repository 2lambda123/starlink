#!/bin/sh
#+
#  Name:
#     dgeneric

#  Purpose:
#     Generates doubly generic code for CCDPACK

#  Language:
#     Bourne Shell

#  Invocation:
#     dgeneric filename [generic_types]

#  Arguments:
#     $1 = FILENAME
#        The name of the doubly generic code file. This must contain
#        the tokens T1,T2 etc. instead of T.
#     $2 = GENERIC TYPES
#        The generic types to be doubly processed (defaults to numeric).
#     $3 = split
#        If set to any value then the final output file is split using
#        during the last generic pass. This results in files
#           $1b $1B $1w $W $1i $1r $1d
#        if all the generic types are selected ($2=n).

#  Notes:
#     The split option may be used to reduce compilation resources.

#  Authors:
#     PDRAPER: Peter Draper (STARLINK)
#     MBT: Mark Taylor (Starlink)
#     AA: Alasdair Allan (Starlink)
#     {enter_new_authors_here}

#  History:
#     12-MAY-1993 (PDRAPER):
#        Original version.
#     28-JUN-1993 (PDRAPER):
#        Added split option to cope with DECstation inability to
#        compile large doubly generic files.
#     30-JAN-1998 (PDRAPER):
#        Added check for generic script location.
#     6-JUL-2004 (MBT):
#        Modified for use with configure.
#     10-OCT-2004 (AA):
#        Updated to use FGENERIC token
#     7-MAY-2022 (GSB):
#        Convert to sh.
#     {enter_changes_here}

#-
#
#  Check for input file.
     if [ -z "$1" ]; then
        echo "Usage: dgeneric filename"
        exit
     else
        if [ ! -e "$1" ]; then
           file="${1}.gen"
           if [ ! -e "$file" ]; then
              echo "$1 does not exist"
              exit
           fi
        else
           file="$1"
        fi
        echo "Processing $file"
     fi

#  Replace the T1's etc. with the normal flags.
     if [ -e dgeneric.gen ]; then
        rm dgeneric.gen
     fi
     sed <$file  >dgeneric.gen   \
        -e s/T1/T/g          \
        -e s/TYPE1/TYPE/g    \
        -e s/LTYPE1/LTYPE1/g \
        -e s/CONST1/CONST/g  \
        -e s/HTYPE1/HTYPE/g  \
        -e s/COMM1/COMM/g

#  Generic this.
     if [ -z "$2" ]; then
        @FGENERIC@ -t n dgeneric.gen
     else
        @FGENERIC@ -t "$2" dgeneric.gen
     fi

#  Second tokens.
     if [ -e dgeneric2.gen ]; then
        rm dgeneric2.gen
     fi
     sed <dgeneric.f  >dgeneric2.gen   \
       -e s/T2/T/g          \
       -e s/TYPE2/TYPE/g    \
       -e s/LTYPE2/LTYPE1/g \
       -e s/CONST2/CONST/g  \
       -e s/HTYPE2/HTYPE/g  \
       -e s/COMM2/COMM/g

#  Final generic process. If split is set then give generic the
#  -s flag
     if [ -z "$3" ]; then
        if [ -z "$2" ]; then
           @FGENERIC@ -t n dgeneric2.gen
        else
           @FGENERIC@ -t "$2" dgeneric2.gen
        fi

#  Set the output file name.
        fname="${file%.*}"
        mv dgeneric2.f "${fname}.f"
     else

#  Splitting output into separate files. Need to rename the resultant files
#  to the correct names.
        for part in dgeneric2b.f dgeneric2B.f dgeneric2w.f dgeneric2W.f \
                    dgeneric2i.f dgeneric2r.f dgeneric2d.f; do
           if [ -e "$part" ]; then
              rm $part
           fi
        done
        if [ -z "$2" ]; then
           @FGENERIC@ -t n  -s dgeneric2.gen
        else
           @FGENERIC@ -t "$2" -s dgeneric2.gen
        fi

#  Now look for all dgeneric2* files. Get the * value and rename.
        fname="${file%.*}"
        for part in dgeneric2*.f; do
           this_part="${part%.*}"
           exten=`echo "$this_part" | sed 's/dgeneric2//'`
           mv "$part" "${fname}${exten}.f"
        done
     fi

# Finished. Get rid of intermediary files.
     rm dgeneric.gen dgeneric.f dgeneric2.gen
     exit
# $Id$
