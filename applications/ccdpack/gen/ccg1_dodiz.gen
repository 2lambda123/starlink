      SUBROUTINE CCG1_DODIZ<T>( NDFIN, WEIGHT, NPXIN, ITYPE, ODAT, 
     :                          OWHT, OCNT, OVAR, CMAP, IX, IY,
     :                          NDIMI, OX, OY, NDIMO, ILBND, OLBND, 
     :                          PIXFRAC, GETV, GETS, GETZ, GETM, 
     :                          SCALE, ZERO, VARFAC, VAR, VWHT,
     :                          STATUS )
     
*+
*  Name:
*     CCG1_DODIZ<T>

*  Purpose:
*     Drizzle from one NDF to another.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_DODIZ<T>( NDFIN, WEIGHT, NPXIN, ITYPE, 
*    :                    ODAT, OWHT, OCNT, OVAR, CMAP, 
*    :                    IX, IY, NDIMI, OX, OY, NDIMO, ILBND, 
*    :                    OLBND, PIXFRAC, GETV, GETS, GETZ, GETM,
*    :                    SCALE, ZERO, VARFAC, VAR, VWHT, 
*    :                    STATUS )

*  Description:
*     This routine does some basic setup preparatory to drizzling:
*     it maps the relevant components of the input and output NDFs,
*     allocates some necessary workspace, and calls the routine 
*     which does the actual drizzling, taking account of the data
*     type to be used.

*  Arguments:
*     NDFIN = DOUBLE PRECISION (Given)
*        Pointer to the current input NDF
*     WEIGHT = DOUBLE PRECISION (Given)
*        Weight for the current image
*     NPXIN = INTEGER (Given)
*        Number of pixels in the input NDF
*     ITYPE = CHAR * ( DAT__SZTYP ) (Given)
*        Data type of the input NDF's
*     ODAT( OX, OY ) = REAL (Given)
*        Data component of the output NDF
*     OWHT( OX, OY ) = DOUBLE PRECISION (Given)
*        Weight component of the output NDF
*     OCNT( OX, OY ) = INTEGER (Given)
*        Count component of the output NDF
*     OVAR( OX, OY ) = <TYPE> (Given)
*        Variance component of the output NDF
*     CMAP = INTEGER (Given)
*        Pointer to the Current AST mapping
*     IX = INTEGER (Given)
*        Size of the input NDF X-dimension
*     IY = INTEGER (Given)
*        Size of the intput NDF Y-dimension
*     NDIMI = INTEGER (Given)
*        Number of dimensions in the input NDF
*     OX = INTEGER (Given)
*        Size of the output NDF X-dimension
*     OY = INTEGER (Given)
*        Size of the output NDF Y-dimension
*     NDIMO = INTEGER (Given)
*        Number of dimensions in the output NDF
*     ILBND( NDF__MXDIM ) = INTEGER (Given)
*        Lower bounds for input NDF
*     OLBND( NDF__MXDIM ) = INTEGER (Given)
*        Lower bounds for output NDF
*     PIXFRAC = DOUBLE PRECISION (Given)
*        Fractional size of pixel "drop"
*     GETV = LOGICAL (Given)
*        Are we using image variances as weights?
*     GETS = LOGICAL (Given)
*        Are we scaling the images?
*     GETZ = LOGICAL (Given)
*        Do we have a zero point for the images?
*     GETM = LOGICAL (Given)
*        Are we using variance maps?
*     SCALE = DOUBLE PRECISION (Given)
*        Scale corrections factors
*     ZERO  = DOUBLE PRECISION (Given)
*        Zero point corrections (will be ADDED to images)
*     VARFAC = DOUBLE PRECISION (Given)
*        Variance scaling factor (used when GETM is TRUE)
*     VAR = LOGICAL (Given)
*        Do we need to propogate the variances for this input image?
*     VWHT( OX, OY ) = DOUBLE PRECISION (Given)
*        Weight component of the output NDF variance component
*     STATUS = INTEGER (Given and Returned)
*        Global status value

*  Copyright:
*     Copyright (C) 1999-2000 Central Laboratory of the Research
*     Councils. All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     AA: Alasdair Allan (STARLINK, Keele University)
*     MBT: Mark Taylor (STARLINK)
*     {enter_new_authors_here}

*  History:
*     10-APR-1999 (AA):
*        Original version
*     07-SEP-1999 (AA):
*        Shipping version
*     14-JUN-2000 (MBT):
*        Substantial rewrite to improve efficiency and remove bugs.
*     {enter_changes_here}

*  Bugs:
*     {note_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'DAT_PAR'          ! HDS constants
      INCLUDE 'SAE_PAR'          ! SAE global definitions
      INCLUDE 'PRM_PAR'          ! Magic-value and extreme constants
      INCLUDE 'NDF_PAR'          ! NDF constants
      INCLUDE 'AST_PAR'          ! AST system constants
      INCLUDE 'CNF_PAR'          ! For CNF_PVAL function

*  Arguments Given:
      CHARACTER * ( DAT__SZTYP ) ITYPE ! NDF array implementation type
      DOUBLE PRECISION PIXFRAC   ! Fractional size of pixel "drop"
      INTEGER CMAP               ! Pointer to the current AST mapping
      INTEGER NPXIN              ! Number of pixels in input NDF
      INTEGER NDFIN              ! Pointer to the current input NDF
      INTEGER NDIMI              ! Number of dimensions in input NDF
      INTEGER NDIMO              ! Number of dimensions in output NDF
      INTEGER IX, IY             ! Size of each input NDF dimension
      INTEGER OX, OY             ! Size of each output NDF dimension
      INTEGER ILBND( NDF__MXDIM ) ! Lower bounds of input NDF
      INTEGER OLBND( NDF__MXDIM ) ! Lower bounds of output NDF

      INTEGER OCNT( OX, OY )     ! Output NDF Counter
     
      <TYPE> ODAT( OX, OY )      ! Output NDF Data 
      <TYPE> OVAR( OX, OY )      ! Output NDF Variance
      DOUBLE PRECISION OWHT( OX, OY ) ! Output NDF Weights
      DOUBLE PRECISION VWHT( OX, OY ) ! Output NDF Variance Weights

      INTEGER IPDAT              ! Pointer to input NDF data
      INTEGER IPVAR              ! Pointer to input NDF variances
      
      DOUBLE PRECISION WEIGHT    ! Weight for current input NDF
      DOUBLE PRECISION SCALE     ! Scale factor correction
      DOUBLE PRECISION ZERO      ! zero point correction
      DOUBLE PRECISION VARFAC    ! Variance scaling factor
      
      LOGICAL GETV               ! Are we using variances as weights?
      LOGICAL GETS               ! Are we using scaling?
      LOGICAL GETZ               ! Do we have a zero point correction?
      LOGICAL GETM               ! Using variance maps
      LOGICAL VAR                ! Need to propogate the variance array
      
*  Arguments Returned:

*  Local Variables:
      CHARACTER * ( AST__SZCHR ) DMN ! Domain of frame
      INTEGER IPWK1              ! Pointer to workspace
      INTEGER IPWK2              ! Pointer to workspace
      INTEGER IPWK3              ! Pointer to workspace
      INTEGER IPWK4              ! Pointer to workspace
      INTEGER FRM                ! AST pointer to frame
      INTEGER IWCS               ! Pointer to the WCS in input NDF
      
*  Status:
      INTEGER STATUS             ! Global status

*.
       
*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN
           
*  Get pointers to the WCS component, do it here instead of passing it down
*  from above, we're using enough memory as it it... 
      CALL CCD1_GTWCS( NDFIN, IWCS, STATUS )         

*  Tell the user which co-ordinate frame we'll be resampling into.
      FRM = AST_GETFRAME( IWCS, AST__CURRENT, STATUS )
      DMN = AST_GETC( FRM, 'Domain', STATUS )
      CALL MSG_SETC( 'DMN', DMN )
      CALL CCD1_MSG( ' ', '    Resampling into the ^DMN '
     :                  //'coordinate system', STATUS )

*  If it's neither CCD_REG nor CCD_WCSREG then issue a mild warning.
      IF ( DMN .NE. 'CCD_REG ' .AND. DMN .NE. 'CCD_WCSREG ' ) THEN
         CALL CCD1_MSG( ' ', '      (Warning: this is not a default'//
     :   ' CCDPACK registration coordinate system)', STATUS )
      END IF

*  Check that the image is 2 dimensional, if not we're in real trouble
*  since the pixel mapping alogrithims (ie the bit that does the actual
*  drizzling) only works for 2 (not N) dimensions. This shouldn't be
*  a problem right? An N-dimensional mosaic is a pretty wierd thing to
*  do, or am I just being provincial here...?
      IF ( NDIMI .NE. 2 ) THEN
      
         CALL MSG_SETI( 'IN_DIM', NDIMI )
         CALL CCD1_MSG( ' ', '    Input Dimensions: '
     :                  //' ^IN_DIM (ERROR)', STATUS )
     
         STATUS = SAI__ERROR
         CALL ERR_REP( 'DRIZZLE_ERR',
     :                 'DRIZZLE: Not a two-dimensional input'
     :                 //' image? Can not proceed with drizzling.',
     :                 STATUS )
         GOTO 999
         
      ELSE IF ( NDIMO .NE. 2 ) THEN
      
         CALL MSG_SETI( 'OUT_DIM', NDIMO )
         CALL CCD1_MSG( ' ', '    Output Dimensions: '
     :                  //' ^OUT_DIM (ERROR)', STATUS )  
         
         STATUS = SAI__ERROR
         CALL ERR_REP( 'DRIZZLE_ERR',
     :                 'DRIZZLE: Not a two-dimensional output'
     :                 //' image? Can not proceed with drizzling.',
     :                 STATUS )
         GOTO 999   

      ENDIF

*  Report the weights for each image
      IF ( GETM ) THEN
         CALL CCD1_MSG( ' ', '    Weighting with inverse variance map: '
     :                     //' TRUE', STATUS )
      ELSE IF ( GETV .AND. ( .NOT. GETM ) )  THEN
         CALL MSG_SETD( 'IN_WHT', WEIGHT )
         CALL CCD1_MSG( ' ', '    Image weighting: '
     :                     //' ^IN_WHT', STATUS )
      ENDIF   

*  Report Scaling factor for each image
      IF ( GETS )  THEN
         CALL MSG_SETD( 'IN_SCALE', SCALE )
         CALL CCD1_MSG( ' ', '    Image scaling factor: '
     :                     //' ^IN_SCALE', STATUS )
      ENDIF 
        
*  Report zero point for each image               
      IF ( GETZ )  THEN
         CALL MSG_SETD( 'IN_ZERO', ZERO )
         CALL CCD1_MSG( ' ', '    Zero point correction: '
     :                     //' ^IN_ZERO', STATUS )
      ENDIF  
      

*  Assign the input NDF Data array to IPDAT
*  ---------------------------------------
*
*  Moved here from the main DRIZZLE.F code so I can be a bit more
*  stringent on how the input data type is converted by calling the
*  main alogrithim in a subroutine.
      CALL NDF_MAP( NDFIN, 'Data', ITYPE, 'READ', IPDAT, NPXIN,
     :              STATUS ) 
     
*  Assign the input NDF Variance array to IPVAR
*  ------------------------------------------- 
*
*  If we're using inverse variance maps to weight the data then
*  map it here to pass down to the subroutine
      IF( GETM .OR. VAR ) THEN
         CALL NDF_MAP( NDFIN, 'Variance', ITYPE, 'READ', IPVAR, NPXIN,
     :                 STATUS )       
      ENDIF

*  Allocate some temporary workspace.
      CALL CCD1_MALL( 4 * IX, '_DOUBLE', IPWK1, STATUS )
      CALL CCD1_MALL( 4 * IX, '_DOUBLE', IPWK2, STATUS )
      CALL CCD1_MALL( 4 * IX, '_DOUBLE', IPWK3, STATUS )
      CALL CCD1_MALL( 4 * IX, '_DOUBLE', IPWK4, STATUS )

*  Do the resampling according to the correct data type.
      IF ( ITYPE .EQ. '_BYTE' ) THEN
         CALL CCG1_ODB<T>( IX, IY, OX, OY, %VAL( CNF_PVAL( IPDAT ) ),
     :                     %VAL( CNF_PVAL( IPVAR ) ), 
     :                     PIXFRAC, SCALE, ZERO, WEIGHT,
     :                     GETS, GETZ, GETM, VARFAC, VAR, ILBND, OLBND,
     :                     CMAP, %VAL( CNF_PVAL( IPWK1 ) ), 
     :                     %VAL( CNF_PVAL( IPWK2 ) ),
     :                     %VAL( CNF_PVAL( IPWK3 ) ), 
     :                     %VAL( CNF_PVAL( IPWK4 ) ),
     :                     ODAT, OVAR, OWHT, VWHT, OCNT, STATUS )
      ELSE IF ( ITYPE .EQ. '_DOUBLE' ) THEN
         CALL CCG1_ODD<T>( IX, IY, OX, OY, %VAL( CNF_PVAL( IPDAT ) ),
     :                     %VAL( CNF_PVAL( IPVAR ) ), 
     :                     PIXFRAC, SCALE, ZERO, WEIGHT,
     :                     GETS, GETZ, GETM, VARFAC, VAR, ILBND, OLBND,
     :                     CMAP, %VAL( CNF_PVAL( IPWK1 ) ), 
     :                     %VAL( CNF_PVAL( IPWK2 ) ),
     :                     %VAL( CNF_PVAL( IPWK3 ) ), 
     :                     %VAL( CNF_PVAL( IPWK4 ) ),
     :                     ODAT, OVAR, OWHT, VWHT, OCNT, STATUS )
      ELSE IF ( ITYPE .EQ. '_INTEGER' ) THEN
         CALL CCG1_ODI<T>( IX, IY, OX, OY, %VAL( CNF_PVAL( IPDAT ) ),
     :                     %VAL( CNF_PVAL( IPVAR ) ), 
     :                     PIXFRAC, SCALE, ZERO, WEIGHT,
     :                     GETS, GETZ, GETM, VARFAC, VAR, ILBND, OLBND,
     :                     CMAP, %VAL( CNF_PVAL( IPWK1 ) ), 
     :                     %VAL( CNF_PVAL( IPWK2 ) ),
     :                     %VAL( CNF_PVAL( IPWK3 ) ), 
     :                     %VAL( CNF_PVAL( IPWK4 ) ),
     :                     ODAT, OVAR, OWHT, VWHT, OCNT, STATUS )
      ELSE IF ( ITYPE .EQ. '_REAL' ) THEN
         CALL CCG1_ODR<T>( IX, IY, OX, OY, %VAL( CNF_PVAL( IPDAT ) ),
     :                     %VAL( CNF_PVAL( IPVAR ) ), 
     :                     PIXFRAC, SCALE, ZERO, WEIGHT,
     :                     GETS, GETZ, GETM, VARFAC, VAR, ILBND, OLBND,
     :                     CMAP, %VAL( CNF_PVAL( IPWK1 ) ), 
     :                     %VAL( CNF_PVAL( IPWK2 ) ),
     :                     %VAL( CNF_PVAL( IPWK3 ) ), 
     :                     %VAL( CNF_PVAL( IPWK4 ) ),
     :                     ODAT, OVAR, OWHT, VWHT, OCNT, STATUS )
      ELSE IF ( ITYPE .EQ. '_UBYTE' ) THEN
         CALL CCG1_ODUB<T>( IX, IY, OX, OY, %VAL( CNF_PVAL( IPDAT ) ),
     :                      %VAL( CNF_PVAL( IPVAR ) ), 
     :                      PIXFRAC, SCALE, ZERO, WEIGHT,
     :                      GETS, GETZ, GETM, VARFAC, VAR, ILBND, OLBND,
     :                      CMAP, %VAL( CNF_PVAL( IPWK1 ) ), 
     :                      %VAL( CNF_PVAL( IPWK2 ) ),
     :                      %VAL( CNF_PVAL( IPWK3 ) ), 
     :                      %VAL( CNF_PVAL( IPWK4 ) ),
     :                      ODAT, OVAR, OWHT, VWHT, OCNT, STATUS )
      ELSE IF ( ITYPE .EQ. '_UWORD' ) THEN
         CALL CCG1_ODUW<T>( IX, IY, OX, OY, %VAL( CNF_PVAL( IPDAT ) ),
     :                      %VAL( CNF_PVAL( IPVAR ) ), 
     :                      PIXFRAC, SCALE, ZERO, WEIGHT,
     :                      GETS, GETZ, GETM, VARFAC, VAR, ILBND, OLBND,
     :                      CMAP, %VAL( CNF_PVAL( IPWK1 ) ), 
     :                      %VAL( CNF_PVAL( IPWK2 ) ),
     :                      %VAL( CNF_PVAL( IPWK3 ) ), 
     :                      %VAL( CNF_PVAL( IPWK4 ) ),
     :                      ODAT, OVAR, OWHT, VWHT, OCNT, STATUS )
      ELSE IF ( ITYPE .EQ. '_WORD' ) THEN
         CALL CCG1_ODW<T>( IX, IY, OX, OY, %VAL( CNF_PVAL( IPDAT ) ),
     :                     %VAL( CNF_PVAL( IPVAR ) ), 
     :                     PIXFRAC, SCALE, ZERO, WEIGHT,
     :                     GETS, GETZ, GETM, VARFAC, VAR, ILBND, OLBND,
     :                     CMAP, %VAL( CNF_PVAL( IPWK1 ) ), 
     :                     %VAL( CNF_PVAL( IPWK2 ) ),
     :                     %VAL( CNF_PVAL( IPWK3 ) ), 
     :                     %VAL( CNF_PVAL( IPWK4 ) ),
     :                     ODAT, OVAR, OWHT, VWHT, OCNT, STATUS )
      END IF

*  Free memory.
      CALL CCD1_MFREE( IPWK1, STATUS )
      CALL CCD1_MFREE( IPWK2, STATUS )
      CALL CCD1_MFREE( IPWK3, STATUS )
      CALL CCD1_MFREE( IPWK4, STATUS )

*  Clean up - Arrive here if an error occurs
*  ========================================= 
999   CONTINUE
       
      END
* $Id$
