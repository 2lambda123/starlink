      SUBROUTINE CCG1_EVAR<T>( LINE, STACK, NEL, NLINES, VAR, STATUS )
*+
*  Name:
*     CCG1_EVAR<T>

*  Purpose:
*     To estimate data variances for a line of data.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_EVAR<T>( LINE, STACK, NEL, NLINES, VAR, STATUS )

*  Description:
*     This routine estimates the data variances of a line of data
*     generated from a given stack of data. It uses the variations of
*     the stack values from the line (which is a mean or median etc.) to
*     generate the estimate.
*
*     The resultant variances are returned in the single line VAR. Using
*     the population to estimate the variances should only be used when
*     the number of images is large.

*  Arguments:
*     LINE( NEL ) = <COMM> (Given)
*        The mean/median etc. of the data in the stack.
*     STACK( NEL, NLINES ) = <COMM> (Given)
*        Stack of input data lines used to generate LINE.
*     NEL = INTEGER (Given)
*        The number of values per data-line in the input array.
*     NLINES = INTEGER (Given)
*        The number of data lines (i.e. vectorised images) in the
*        input array. Should be greater 2 and probably much larger.
*     VAR( NEL ) = <COMM> (Given and Returned)
*        The estimated variance array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     This routine is only designed for use with REAL and DOUBLE
*     PRECISION generic types. Do not use it for INTEGER types.

*  Copyright:
*     Copyright (C) 1999 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     {enter_new_authors_here}

*  History:
*     14-JAN-1999 (PDRAPER):
*        Original version.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! BAD value constants

*  Arguments Given:
      INTEGER NLINES
      INTEGER NEL
      <TYPE> LINE( NEL )
      <TYPE> STACK( NEL, NLINES )

*  Arguments Returned:
      <TYPE> VAR( NEL )

*  Status:
      INTEGER STATUS            ! Global status

*  Local Variables:
      DOUBLE PRECISION SUMSQ    ! Sum of data values squared
      DOUBLE PRECISION VAL      ! Data value as DBLE
      DOUBLE PRECISION DIF      ! Data value as DBLE
      INTEGER NGOOD             ! Number of non-BAD data values.
      INTEGER I, J              ! Loop variables

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Loop over lines estimating the variance for each set of elements.
      DO 1 J = 1, NEL
         IF ( LINE( J ) .NE. VAL__BAD<T> ) THEN 
            VAL = DBLE( LINE( J ) )
            SUMSQ = 0.0D0
            NGOOD = 0
            DO 2 I = 1, NLINES
               IF ( STACK( J, I ) .NE. VAL__BAD<T> ) THEN
                  NGOOD = NGOOD + 1
                  DIF = DBLE( STACK( J, I ) ) - VAL
                  SUMSQ = SUMSQ + ( DIF * DIF )
               END IF
 2          CONTINUE
            IF ( NGOOD .GT. 1 ) THEN

*  Calculate variance of mean of values each of which has this variance,
*  not the population variance (divide by extra NGOOD).
               VAR( J ) = SUMSQ / ( DBLE( NGOOD - 1 ) * DBLE( NGOOD ) )
            ELSE
               VAR( J ) = VAL__BAD<T>
            END IF
         ELSE
            VAR( J ) = VAL__BAD<T>
         END IF
 1    CONTINUE
      END
* $Id$
