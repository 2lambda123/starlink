      SUBROUTINE CCG1_<T1>FS<T2>( BAD, EL, DARRI, VARRI, DFLTI, VFLTI,
     :                            HAVDV, HAVFV, SATVAL, DARRO, VARRO,
     :                            NERR, STATUS )
*+
*  Name:
*     CCG1_XFSY

*  Purpose:
*     To divide a data component by another component, which represents
*     a flatfield response. This is a special case of division because
*     saturated values are also incorporated and the noise less
*     flatfield case.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_<T1>FS<T2>( BAD, EL, DARRI, VARRI, DFLTI, VFLTI,
*                           HAVDV, HAVFV, SETSAT, SATVAL, DARRO,
*                           NERR, VARRO, STATUS )

*  Description:
*     The routine divides the input arrays and suitably modifies the
*     variances. If BAD pixels are present they are suitably processed.
*     If numeric errors occur, and it is possible, then they are trapped
*     and the output values are set BAD. Values which are equal to the
*     saturation value are ignored if SATVAL is true.The special case of
*     divide by zero is trapped explicitly, this provides security for all
*     platforms, regardless of their ability to trap general errors.
*     The routine deals with different input data types <COMM1> and
*     <COMM2>.

*  Arguments:
*     BAD = LOGICAL (Given and Returned)
*        Set to true if BAD pixels are present or generated.
*     EL = INTEGER (Given)
*        Number of pixels in input arrays.
*     DARRI( EL ) = <TYPE2> (Given)
*        The input Data component.
*     VARRI( EL ) = <TYPE2> (Given)
*        The input Variance component.
*     DFLTI( EL ) = <TYPE1> (Given)
*        The flatfield Data component.
*     VFLTI( EL ) = <TYPE1> (Given)
*        The flatfield Variance component.
*     HAVDV = LOGICAL (Given)
*        Set to true if the input Data component has an associated
*        variance.
*     HAVFV = LOGICAL (Given)
*        Set to true if the input flatfield Data component has an
*        associated variance.
*     SATVAL = DOUBLE PRECISION (Given)
*        The saturation value if used.
*     DARRO( EL ) = <TYPE2> (Returned)
*        The output Data component.
*     VARRO( EL ) = <TYPE2> (Returned)
*        The output Variance component.
*     NERR = INTEGER (Returned)
*        The number of numeric errors.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     {enter_new_authors_here}

*  History:
*     14-MAY-1991 (PDRAPER):
*        Original version based on KAPPA KPG1_DIVX routine.
*     13-JAN-1992 (PDRAPER):
*        Changed to doubly generic version.
*     4-OCT-1996 (PDRAPER):
*        Changed LIB$ calls to NUM_.
*     25-OCT-1998 (PDRAPER):
*        Changed to trap /0 explicity. Not many platforms offer proper
*        error trapping now (only Solaris).
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT primitive data constants

*  Global Variables:


*  Arguments Given:
      LOGICAL BAD
      LOGICAL HAVDV
      LOGICAL HAVFV
      INTEGER EL
      <TYPE2> DARRI( EL )
      <TYPE2> VARRI( EL )
      <TYPE1> DFLTI( EL )
      <TYPE1> VFLTI( EL )
      DOUBLE PRECISION SATVAL

*  Arguments Returned:
      <TYPE2> DARRO( EL )
      <TYPE2> VARRO( EL )
      INTEGER NERR

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler
      EXTERNAL VAL_DTO<T2>
      <TYPE2> VAL_DTO<T2>        ! Numeric conversion routine

*  Local Variables:
      INTEGER I                  ! Loop counter for array elements
      <TYPE2> SVAL               ! Saturation value in storage type
      DOUBLE PRECISION DUM1      ! Dummy DBLE variable.
      DOUBLE PRECISION DUM2      ! Dummy DBLE variable.
      DOUBLE PRECISION DUM3      ! Dummy DBLE variable.
      DOUBLE PRECISION DUM4      ! Dummy DBLE variable.

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! PRIMDAT numeric conversion
      INCLUDE 'NUM_DEF_CVT'      ! declarations

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Convert the input Saturation value into the data data type.
      SVAL = VAL_DTO<T2>( BAD, SATVAL, STATUS )
      IF ( STATUS .NE. SAI__OK ) GO TO 99

*  No variance components to process:
*  ================================
*  Simply divide the two data arrays.
      IF ( .NOT. HAVDV .AND. .NOT. HAVFV ) THEN

*  Saturation values included.
*  Establish a numerical error handler and initialise the numerical
*  error status and error count.
         CALL NUM_HANDL( NUM_TRAP )
         CALL NUM_CLEARERR()
         NERR = 0

*  Branch on the presence of BAD values.
         IF ( .NOT. BAD ) THEN

*  Divide the data arrays, checking for numerical errors after each
*  calculation.
            DO 1 I = 1, EL
               IF ( DARRI( I ) .LT. SVAL ) THEN

*  Perform the division in double precision.
                  DUM1 = NUM_<T2>TOD( DARRI( I ) )
                  DUM2 = NUM_<T1>TOD( DFLTI( I ) )
                  IF ( DUM2 .NE. 0.0D0 ) THEN
                     DARRO( I ) = NUM_DTO<T2>( DUM1 / DUM2 )
                     IF ( .NOT. NUM_WASOK() ) THEN
                        DARRO( I ) = VAL__BAD<T2>
                        NERR = NERR + 1
                        CALL NUM_CLEARERR()
                     END IF
                  ELSE
                     DARRO( I ) = VAL__BAD<T2>
                     NERR = NERR + 1
                  END IF
               END IF
 1          CONTINUE
         ELSE

*  BAD values to process.
*  =====================
            DO 6 I = 1, EL

*  See if either input data value is bad. If so, then set bad output
*  values.
               IF ( ( DARRI( I ) .EQ. VAL__BAD<T2> ) .OR.
     :              ( DFLTI( I ) .EQ. VAL__BAD<T1> ) ) THEN
                  DARRO( I ) = VAL__BAD<T2>

*  Divide the data values, checking for numerical errors..
               ELSE
                  IF ( DARRI( I ) .LT. SVAL ) THEN
                     DUM1 = NUM_<T2>TOD( DARRI( I ) )
                     DUM2 = NUM_<T1>TOD( DFLTI( I ) )
                     IF ( DUM2 .NE. 0.0D0 ) THEN
                        DARRO( I ) = NUM_DTO<T2>( DUM1 / DUM2 )
                        IF ( .NOT. NUM_WASOK() ) THEN
                           DARRO( I ) = VAL__BAD<T2>
                           NERR = NERR + 1
                           CALL NUM_CLEARERR()
                        END IF
                     ELSE
                        DARRO( I ) = VAL__BAD<T2>
                        NERR = NERR + 1
                     END IF
                  END IF
               END IF
6           CONTINUE
         END IF

*  Remove the numerical error handler.
         CALL NUM_REVRT

*  At least one Variance component present:
*  ========================================
*  If have input Variance pretend that the flatfield is noiseless
*  and process this.

      ELSE IF ( HAVDV .AND. .NOT. HAVFV ) THEN
*  Establish a numerical error handler and initialise the numerical
*  error status and error count.
         CALL NUM_HANDL( NUM_TRAP )
         CALL NUM_CLEARERR()
         NERR = 0

*  No bad values present:
*  =====================
         IF ( .NOT. BAD ) THEN

*  Divide the data arrays, checking for numerical errors after each
*  calculation.
            DO 2 I = 1, EL
               IF ( DARRI( I ) .LT. SVAL ) THEN
                  DUM1 = NUM_<T2>TOD( DARRI( I ) )
                  DUM2 = NUM_<T1>TOD( DFLTI( I ) )
                  IF ( DUM2 .NE. 0.0D0 ) THEN
                     DARRO( I ) = NUM_DTO<T2>( DUM1 / DUM2 )
                     IF ( .NOT. NUM_WASOK() ) THEN
                        DARRO( I ) = VAL__BAD<T2>
                        NERR = NERR + 1
                        CALL NUM_CLEARERR()
                     END IF
                  ELSE
                     DARRO( I ) = VAL__BAD<T2>
                     NERR = NERR + 1
                  END IF

*  Derive the variance value, again checking for numerical errors.
                  DUM1 = NUM_<T1>TOD( DFLTI( I ) )
                  DUM2 = NUM_<T2>TOD( VARRI( I ) )
                  IF ( DUM1 .NE. 0.0D0 ) THEN
                     VARRO( I ) = NUM_DTO<T2>( DUM2 / ( DUM1 * DUM1 ) )
                     IF ( .NOT. NUM_WASOK() ) THEN
                        VARRO( I ) = VAL__BAD<T2>
                        NERR = NERR + 1
                        CALL NUM_CLEARERR()
                     END IF
                  ELSE
                     VARRO( I ) = VAL__BAD<T2>
                     NERR = NERR + 1
                  END IF
               END IF
 2          CONTINUE

*  Bad values present:
*  ==================
         ELSE
            DO 3 I = 1, EL

*  See if either input data value is bad. If so, then set bad output
*  values.
               IF ( ( DARRI( I ) .EQ. VAL__BAD<T2> ) .OR.
     :              ( DFLTI( I ) .EQ. VAL__BAD<T1> ) ) THEN
                  DARRO( I ) = VAL__BAD<T2>
                  VARRO( I ) = VAL__BAD<T2>

*  Divide the data values, checking for numerical errors..
               ELSE
                  IF ( DARRI( I ) .LT. SVAL ) THEN
                     DUM1 = NUM_<T2>TOD( DARRI( I ) )
                     DUM2 = NUM_<T1>TOD( DFLTI( I ) )
                     IF ( DUM2 .NE. 0.0D0 ) THEN 
                        DARRO( I ) = NUM_DTO<T2>( DUM1 / DUM2 )
                        IF ( .NOT. NUM_WASOK() ) THEN
                           DARRO( I ) = VAL__BAD<T2>
                           NERR = NERR + 1
                           CALL NUM_CLEARERR()
                        END IF
                     ELSE
                        DARRO( I ) = VAL__BAD<T2>
                        NERR = NERR + 1
                     END IF

*  See if input variance value is bad. If so, then set a bad
*  output variance value.
                     IF ( VARRI( I ) .EQ. VAL__BAD<T2> )THEN
                        VARRO( I ) = VAL__BAD<T2>

*  Calculate the output variance value, again checking for numerical
*  errors.
                     ELSE
                        DUM1 = NUM_<T1>TOD( DFLTI( I ) )
                        DUM2 = NUM_<T2>TOD( VARRI( I ) )
                        IF ( DUM1 .NE. 0.0D0 ) THEN 
                           VARRO( I ) = NUM_DTO<T2>( DUM2 /
     :                                          ( DUM1 * DUM1 ) )
                           IF ( .NOT. NUM_WASOK() ) THEN
                              VARRO( I ) = VAL__BAD<T2>
                              NERR = NERR + 1
                              CALL NUM_CLEARERR()
                           END IF
                        ELSE
                           VARRO( I ) = VAL__BAD<T2>
                           NERR = NERR + 1
                        END IF
                     END IF
                  END IF
               END IF
  3         CONTINUE
         END IF

*  Remove the numerical error handler.
         CALL NUM_REVRT

*  Have both variance components to process
*  ========================================
      ELSE

*  Establish a numerical error handler and initialise the numerical
*  error status and error count.
         CALL NUM_HANDL( NUM_TRAP )
         CALL NUM_CLEARERR()
         NERR = 0

*  No bad values present:
*  =====================
         IF ( .NOT. BAD ) THEN

*  Divide the data arrays, checking for numerical errors after each
*  calculation.
            DO 4 I = 1, EL
               IF ( DARRI( I ) .LT. SVAL ) THEN
                  DUM1 = NUM_<T2>TOD( DARRI( I ) )
                  DUM2 = NUM_<T1>TOD( DFLTI( I ) )
                  IF ( DUM2 .NE. 0.0D0 ) THEN 
                     DARRO( I ) = NUM_DTO<T2>( DUM1 / DUM2 )
                     IF ( .NOT. NUM_WASOK() ) THEN
                        DARRO( I ) = VAL__BAD<T2>
                        NERR = NERR + 1
                        CALL NUM_CLEARERR()
                     END IF
                  ELSE
                     DARRO( I ) = VAL__BAD<T2>
                     NERR = NERR + 1
                  END IF

*  Derive the variance value by the same values, again checking for
*  numerical errors.
                  DUM1 = NUM_<T1>TOD( DFLTI( I ) )
                  DUM1 = DUM1 * DUM1
                  DUM2 = NUM_<T2>TOD( VARRI( I ) )
                  DUM3 = NUM_<T2>TOD( DARRI( I ) )
                  DUM3 = DUM3 * DUM3
                  DUM4 = NUM_<T1>TOD( VFLTI( I ) )
                  IF ( DUM1 .NE. 0.0D0 ) THEN
                     VARRO( I ) = ( DUM2 + DUM4 * DUM3 / DUM1 ) / DUM1
                     IF ( .NOT. NUM_WASOK() ) THEN
                        VARRO( I ) = VAL__BAD<T2>
                        NERR = NERR + 1
                        CALL NUM_CLEARERR()
                     END IF
                  ELSE
                     VARRO( I ) = VAL__BAD<T2>
                     NERR = NERR + 1
                  END IF
               END IF
 4          CONTINUE

*  Bad values present:
*  ==================
         ELSE
            DO 5 I = 1, EL

*  See if either input data value is bad. If so, then set bad output
*  values.
               IF ( ( DARRI( I ) .EQ. VAL__BAD<T2> ) .OR.
     :              ( DFLTI( I ) .EQ. VAL__BAD<T1> ) ) THEN
                  DARRO( I ) = VAL__BAD<T2>
                  VARRO( I ) = VAL__BAD<T2>

*  Divide the data values, checking for numerical errors..
               ELSE
                  IF ( DARRI( I ) .LT. SVAL ) THEN
                     DUM1 = NUM_<T2>TOD( DARRI( I ) )
                     DUM2 = NUM_<T1>TOD( DFLTI( I ) )
                     IF ( DUM2 .NE. 0.0D0 ) THEN 
                        DARRO( I ) = NUM_DTO<T2>( DUM1 / DUM2 )
                        IF ( .NOT. NUM_WASOK() ) THEN
                           DARRO( I ) = VAL__BAD<T2>
                           NERR = NERR + 1
                           CALL NUM_CLEARERR()
                        END IF
                     ELSE
                        DARRO( I ) = VAL__BAD<T2>
                        NERR = NERR + 1
                     END IF

*  See if either input variance value is bad. If so, then set a bad
*  output variance value.
                     IF ( ( VARRI( I ) .EQ. VAL__BAD<T2> ) .OR.
     :                    ( VFLTI( I ) .EQ. VAL__BAD<T1> ) ) THEN
                        VARRO( I ) = VAL__BAD<T2>

*  Calculate the output variance value, again checking for numerical
*  errors.
                     ELSE
                        DUM1 = NUM_<T1>TOD( DFLTI( I ) )
                        DUM1 = DUM1 * DUM1
                        DUM2 = NUM_<T2>TOD( VARRI( I ) )
                        DUM3 = NUM_<T2>TOD( DARRI( I ) )
                        DUM3 = DUM3 * DUM3
                        DUM4 = NUM_<T1>TOD( VFLTI( I ) )
                        IF ( DUM1 .NE. 0.0D0 ) THEN
                           VARRO( I ) =
     :                          ( DUM2 + DUM4 * DUM3 / DUM1 ) / DUM1
                           IF ( .NOT. NUM_WASOK() ) THEN
                              VARRO( I ) = VAL__BAD<T2>
                              NERR = NERR + 1
                              CALL NUM_CLEARERR()
                           END IF
                        ELSE
                           VARRO( I ) = VAL__BAD<T2>
                           NERR = NERR + 1
                        END IF
                     END IF
                  END IF
               END IF
 5          CONTINUE
         END IF

*  Remove the numerical error handler.
         CALL NUM_REVRT
      END IF

*  Update BAD flag.
      BAD = BAD .OR. ( NERR .NE. 0 )

99    CONTINUE
      END
* $Id$
