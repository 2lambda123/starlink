      SUBROUTINE CCG1_BL<T>( BAD, SAMBAD, VAR, NX, NY, A, IBOXX, IBOXY,
     :                       NLIM, B, BADOUT, ASUM, NSUM, STATUS )
*+
*  Name:
*     CCG1_BL<T>

*  Purpose:
*     Smooth a 2-dimensional image using a rectangular box filter.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_BL<T>( BAD, SAMBAD, VAR, NX, NY, A, IBOXX,
*                     IBOXY, NLIM, B, BADOUT, ASUM, NSUM, STATUS )

*  Description:
*     The routine smooths a 2-dimensional image using a rectangular box
*     filter; each pixel is replaced by the mean of those good
*     neighbours which lie within a box of specified size.

*  Arguments:
*     BAD = LOGICAL (Given)
*        Whether it is necessary to check for bad pixels in the input
*        image.
*     SAMBAD = LOGICAL (Given)
*        If a .TRUE. value is given for this argument, then bad input
*        pixels will be propagated to the output image unchanged (a
*        smoothed output value will be calculated for all other
*        pixels). If a .FALSE. value is given, then the NLIM argument
*        determines whether an output pixel is good or bad.  The value
*        of SAMBAD is not relevant if BAD is .FALSE..
*     VAR = LOGICAL (Given)
*        If a .FALSE. value is given for this argument, then the
*        smoothing applied will be appropriate to a data image. If a
*        .TRUE. value is given, then the smoothing will be appropriate
*        to an image containing variance values. In the latter case the
*        output values will be (on average) smaller than the input
*        values to take account of the variance-reducing effect which
*        smoothing produces.
*     NX = INTEGER (Given)
*        First dimension of the image to be smoothed.
*     NY = INTEGER (Given)
*        Second dimension of the image to be smoothed.
*     A( NX, NY ) = ? (Given)
*        Input image to be smoothed.
*     IBOXX = INTEGER (Given)
*        Half-size of the smoothing box in pixels in the X direction
*        (the actual size of the box used will be 2*IBOXX+1 pixels).
*     IBOXY = INTEGER (Given)
*        Half-size of the smoothing box in pixels in the Y direction
*        (the actual size of the box used will be 2*IBOXY+1 pixels).
*     NLIM = INTEGER (Given)
*        Minimum number of good pixels which must be present in the
*        smoothing box in order to calculate a smoothed output pixel.
*        If this minimum number is not satisfied, then a bad output
*        pixel will result. A value between 1 and the total number of
*        pixels in the smoothing box should be supplied.
*     B( NX, NY ) = ? (Returned)
*        The smoothed output image.
*     BADOUT = LOGICAL (Returned)
*        Whether bad pixels are present in the output image.
*     ASUM( NX ) = DOUBLE PRECSION (Returned)
*        Workspace for the pixel sums.
*     NSUM( NX ) = INTEGER (Returned)
*        Workspace for counting good pixels.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK)
*     PDRAPER: Peter Draper (STARLINK)
*     BRADC: Brad Cavanagh (JAC)
*     {enter_new_authors_here}

*  History:
*     18-SEP-1990 (RFWS):
*        Original version.
*     24-SEP-1990 (RFWS):
*        Added the VAR argument to allow smoothing of variance images.
*     9-DEC-1991 (PDRAPER):
*        Attempt to make truly generic.
*     04-OCT-2004: BRADC):
*        No longer use NUM_ERROR
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT primitive data constants

*  Global Variables:


*  Arguments Given:
      LOGICAL BAD
      LOGICAL SAMBAD
      LOGICAL VAR
      INTEGER NX
      INTEGER NY
      <TYPE> A( NX, NY )
      INTEGER IBOXX
      INTEGER IBOXY
      INTEGER NLIM

*  Arguments Returned:
      <TYPE> B( NX, NY )
      LOGICAL BADOUT
      DOUBLE PRECISION ASUM( NX )
      INTEGER NSUM( NX )

*  Status:
      INTEGER STATUS             ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      DOUBLE PRECISION ASUM0     ! Good pixel sum
      DOUBLE PRECISION DENOM     ! Denominator for smoothed output value
      DOUBLE PRECISION NPIX      ! Number of pixels in smoothing box
      INTEGER IIX                ! Loop counter for summing over pixels
      INTEGER IIY                ! Loop counter for summing over lines
      INTEGER ILINE              ! Contributing line number
      INTEGER IPIX               ! Contributing pixel number
      INTEGER IX                 ! First array index
      INTEGER IY                 ! Second array index
      INTEGER NEWX               ! X position of new pixel
      INTEGER NEWY               ! Y position of new pixel
      INTEGER NSUM0              ! Good pixel count
      INTEGER OLDX               ! X position of old pixel
      INTEGER OLDY               ! Y position of old line
      INTEGER LSTAT              ! Local status value reset on
                                 ! conversion error.
      INTEGER NBAD               ! Number of output BAD pixels.

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! Num data type conversion declarations
      INCLUDE 'NUM_DEF_CVT'

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Initialise the bad output pixel flag and the workspace arrays.
      BADOUT = .FALSE.
      DO 1 IX = 1, NX
         ASUM( IX ) = 0.0D0
         NSUM( IX ) = 0
 1    CONTINUE

*  Calculate the number of pixels in the smoothing box.
      NPIX = DBLE( ( 2 * IBOXX + 1 ) * ( 2 * IBOXY + 1 ) )

*  Establish a numerical error handler and initialise the numerical
*  error status and error count.
      CALL NUM_HANDL( NUM_TRAP )
      CALL NUM_CLEARERR()
      NBAD = 0

*  Loop to initialise elements of the two workspace arrays so that they
*  contain sum for the good pixels in a box of size 1x(2*IBOXY+1)
*  centred on pixel location (IX,0). First loop over all the possible
*  contributing lines.
      DO 4 IIY = -IBOXY, IBOXY

*  If a line lies outside the input image, then use the boundary line
*  instead.
         IF ( IIY .LT. 1 ) THEN
            ILINE = 1
         ELSE IF ( IIY .GT. NY ) THEN
            ILINE = NY
         ELSE
            ILINE = IIY
         END IF

*  Accumulate sums for each box in the workspace arrays. If bad pixels
*  are present, then test for them.
         IF ( BAD ) THEN
            DO 2 IX = 1, NX
               IF ( A( IX, ILINE ) .NE. VAL__BAD<T> ) THEN
                  ASUM( IX ) = ASUM( IX ) + NUM_<T>TOD( A( IX, ILINE ) )
                  NSUM( IX ) = NSUM( IX ) + 1
               END IF
 2          CONTINUE

*  If no bad pixels are present, then omit the test for them.
         ELSE
            DO 3 IX = 1, NX
               ASUM( IX ) = ASUM( IX ) + NUM_<T>TOD( A( IX, ILINE ) )
 3          CONTINUE
         END IF
 4    CONTINUE

*  Smooth down the image.
*  =====================
*  Loop to form smoothed output values for each image line by moving the
*  accumulated sums for each initial box down the image.
      DO 9 IY = 1, NY

*  Find the position of the old input line which is lost from the boxes
*  as they are moved down the image and the position of the new line
*  which enters the boxes. Allow for the image boundaries.
         OLDY = IY - IBOXY - 1
         IF ( OLDY .LT. 1 ) OLDY = 1
         NEWY = IY + IBOXY
         IF ( NEWY .GT. NY ) NEWY = NY

*  Remove the pixels in the old line from the accumulated sums and add
*  the pixels in the new line.  If bad pixels are present, then test
*  for them.
         IF ( BAD ) THEN
            DO 5 IX = 1, NX
               IF ( A( IX, OLDY ) .NE. VAL__BAD<T> ) THEN
                  ASUM( IX ) = ASUM( IX ) - NUM_<T>TOD( A( IX, OLDY ) )
                  NSUM( IX ) = NSUM( IX ) - 1
               END IF
               IF ( A( IX, NEWY ) .NE. VAL__BAD<T> ) THEN
                  ASUM( IX ) = ASUM( IX ) + NUM_<T>TOD( A( IX, NEWY ) )
                  NSUM( IX ) = NSUM( IX ) + 1
               END IF
 5          CONTINUE

*  If bad pixels are absent, then there is no need to test for them.
*  There is also no need to keep track of the number of good pixels in
*  the box, as this will always be equal to the total number of pixels
*  in the smoothing box.
         ELSE
            DO 6 IX = 1, NX
               ASUM( IX ) = ASUM( IX ) +
     :                  NUM_<T>TOD ( A( IX, NEWY ) - A( IX, OLDY ) )
 6          CONTINUE
         END IF

*  Smooth along each image line.
*  ============================
*  Form initial sums for a box of size (2*IBOXX+1)x1 centred on pixel
*  (0,IY).
         ASUM0 = 0.0D0
         NSUM0 = 0
         DO 7 IIX = -IBOXX, IBOXX

*  Allow for the image boundaries.
            IF ( IIX .LT. 1 ) THEN
               IPIX = 1
            ELSE IF ( IIX .GT. NX ) THEN
               IPIX = NX
            ELSE
               IPIX = IIX
            END IF

*  Use the current values stored in the workspace arrays to form these
*  initial sums.
            ASUM0 = ASUM0 + ASUM( IPIX )
            IF ( BAD ) NSUM0 = NSUM0 + NSUM( IPIX )
 7       CONTINUE

*  Loop to move these sums along the current image line.
         DO 8 IX = 1, NX

*  Find the position of the old pixel which is lost from the box as it
*  moves along the line and the position of the new one which enters
*  it. Allow for the image boundaries.
            OLDX = IX - IBOXX - 1
            IF ( OLDX .LT. 1 ) OLDX = 1
            NEWX = IX + IBOXX
            IF ( NEWX .GT. NX ) NEWX = NX

*  Update the sums by subtracting the old pixel and adding the new one.
            ASUM0 = ASUM0 + ( ASUM( NEWX ) - ASUM( OLDX ) )
            IF ( BAD ) NSUM0 = NSUM0 - NSUM( OLDX ) + NSUM( NEWX )

*  Form the denominator for calculating the smoothed output value. If
*  there are no bad pixels present, then this is equal to the number of
*  pixels in the smoothing box. Otherwise, use the accumulated sum of
*  good pixels.
            IF ( .NOT. BAD ) THEN
               DENOM = NPIX
            ELSE
               DENOM = DBLE( NSUM0 )
            END IF

*  If smoothing a variance image, then use the square of the number of
*  good pixels (this takes account of the variance-reducing effect that
*  smoothing introduces).
            IF ( VAR ) DENOM = DENOM * DENOM

*  Set local status value - no error trapping for integer over or under
*  flow outpix values are set BAD.
            LSTAT = SAI__OK

*  Calculate the smoothed output value.
*  ===================================
*  Use error trap and count invalid operations.
*  This is valid if there are no bad pixels present.
            IF ( .NOT. BAD ) THEN
               DENOM = ASUM0 / DENOM
               B( IX, IY ) = NUM_DTO<T>( DENOM )
               IF ( .NOT. NUM_WASOK() ) THEN
                  B( IX, IY ) = VAL__BAD<T>
                  NBAD = NBAD + 1
                  CALL NUM_CLEARERR()
               END IF

*  It is also valid if SAMBAD is .TRUE. and the corresponding input
*  pixel is not bad.
            ELSE IF ( SAMBAD ) THEN
               IF ( A( IX, IY ) .NE. VAL__BAD<T> ) THEN
                  DENOM = ASUM0 / DENOM
                  B( IX, IY ) = NUM_DTO<T>( DENOM )
                  IF ( .NOT. NUM_WASOK() ) THEN
                     B( IX, IY ) = VAL__BAD<T>
                     NBAD = NBAD + 1
                     CALL NUM_CLEARERR()
                  END IF

*  It is bad if SAMBAD is .TRUE. and the corresponding input pixel is
*  bad.  Note that bad pixels are present in the output image.
               ELSE
                  B( IX, IY ) = VAL__BAD<T>
                  BADOUT = .TRUE.
                  NBAD = NBAD + 1
               END IF

*  It is valid if SAMBAD is .FALSE. and the NLIM criterion is met.
            ELSE
               IF ( NSUM0 .GE. NLIM ) THEN
                  DENOM = ASUM0 / DENOM
                  B( IX, IY ) = NUM_DTO<T>( DENOM )
                  IF ( .NOT. NUM_WASOK() ) THEN
                     B( IX, IY ) = VAL__BAD<T>
                     NBAD = NBAD + 1
                     CALL NUM_CLEARERR()
                  END IF

*  It is bad if the NLIM criterion is not met. Note that bad pixels are
*  present in the output image.
               ELSE
                  B( IX, IY ) = VAL__BAD<T>
                  BADOUT = .TRUE.
                  NBAD = NBAD + 1
               END IF
            END IF
 8       CONTINUE
 9    CONTINUE

*  If BAD pixel count equals the number of pixels, set and report error.
      IF ( NBAD .EQ. NX * NY ) THEN
         STATUS = SAI__ERROR
         CALL ERR_REP( 'CCG1_BL<T>1',
     :   '  CCG1_BL<T>: All output pixels BAD', STATUS )
      END IF

*  Release the numeric error handler.
      CALL NUM_REVRT

      END
* $Id$
