      SUBROUTINE CCG1_CMLT<T>( BAD, EL, A, CONST, B, NERR, STATUS )
*+
*  Name:
*     CCG1_CMLT<T>

*  Purpose:
*     To multiply each element of a vectorised array by a constant.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_CMLT<T>( BAD, EL, A, CONST, B, NERR, STATUS )

*  Description:
*     The routine multiplies each element of a vectorised array by a
*     consta to produce a new array. Bad value checking is performed if
*     required.

*  Arguments:
*     BAD = LOGICAL (Given)
*        Whether to check for bad values in the input array.
*     EL = INTEGER (Given)
*        Number of array elements to process.
*     A( EL ) = <COMM> (Given)
*        Input array.
*     CONST = DOUBLE PRECISION (Given)
*        Constant to multiply each array element by.
*     B( EL ) = <COMM> (Returned)
*        Output array.
*     NERR = INTEGER (Returned)
*        Number of numerical errors which occurred while processing the
*        array.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  This routine will handle numerical errors (i.e. overflow) by
*     assigning the appropriate "bad" value to affected output array
*     elements. If the constant supplied cannot be converted to the
*     data type of the arrays without overflow, then all elements of
*     the output array will be assigned this bad value and NERR will
*     return the value of EL.

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council.
*     Copyright (C) 1998, 2004 Central Laboratory of the Research
*     Councils. All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place,Suite 330, Boston, MA
*     02111-1307, USA

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     BRADC: Brad Cavanagh (JAC)
*     {enter_new_authors_here}

*  History:
*     30-APR-1991 (PDRAPER):
*        Based on RFWSs KPG1_ routines.
*     03-FEB-1998  (PDRAPER):
*        Modified to do multiplication in floating point. Previously
*        this was done in the precision of the input/output data and
*        rounding could give unwanted side-effects like multiplying 
*        by zero when a number less than 1 is given.
*     04-OCT-2004: BRADC):
*        No longer use NUM_ERROR
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! BAD data constants

*  Global Variables:


*  Arguments Given:
      LOGICAL BAD
      INTEGER EL
      <TYPE> A( EL )
      DOUBLE PRECISION CONST

*  Arguments Returned:
      <TYPE> B( EL )
      INTEGER NERR

*  Status:
      INTEGER STATUS            ! Global status

*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP          ! Numerical error handler

*  Local Variables:
      INTEGER I                 ! Loop counter for array elements

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'     ! NUM_ type conversion functions
      INCLUDE 'NUM_DEC_<T>'     ! NUM_ arithmetic/maths functions
      INCLUDE 'NUM_DEF_CVT'     ! Define functions...
      INCLUDE 'NUM_DEF_<T>'

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Establish the numerical error handler and initialise the error flag
*  and error count. 
      CALL NUM_HANDL( NUM_TRAP )
      CALL NUM_CLEARERR()
      NERR = 0

*  No bad values present:
*  =====================
      IF ( .NOT. BAD ) THEN

*  Multiply the array value by the constant.
         DO 2 I = 1, EL
            B( I ) = NUM_DTO<T>( NUM_<T>TOD( A( I ) ) * CONST )

*  Check for numerical errors (i.e. overflow). If present, then assign
*  a bad value to the output array element and count the error. Reset
*  the numerical error flag.
            IF ( .NOT. NUM_WASOK() ) THEN
               B( I ) = VAL__BAD<T>
               NERR = NERR + 1
               CALL NUM_CLEARERR()
            END IF
 2       CONTINUE

*  Bad values present:
*  ==================
      ELSE

*  If the input array element is bad, then so is the output element.
         DO 3 I = 1, EL
            IF ( A( I ) .EQ. VAL__BAD<T> ) THEN
               B( I ) = VAL__BAD<T>
               
*  Otherwise, multiply by the constant, again checking for numerical
*  errors.
            ELSE
               B( I ) = NUM_DTO<T>( NUM_<T>TOD( A( I ) ) * CONST )
               IF ( .NOT. NUM_WASOK() ) THEN
                  B( I ) = VAL__BAD<T>
                  NERR = NERR + 1
                  CALL NUM_CLEARERR()
               END IF
            END IF
 3       CONTINUE
      END IF

*  Remove the numerical error handler.
      CALL NUM_REVRT
      END
* $Id$
