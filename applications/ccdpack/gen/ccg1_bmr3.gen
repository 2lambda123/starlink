      SUBROUTINE CCG1_BMR3<T>( STACK, NPIX, NLINES, MINPIX,
     :                         RESULT, WRK1, NCON, POINT, USED, STATUS )
*+
*  Name:
*     CCG1_BMR3

*  Purpose:
*     Combines data lines using a broadened median.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CCG1_BMR3( STACK, NPIX, NLINES, MINPIX, RESULT,
*                     WRK1, NCON, POINT, USED, STATUS )

*  Description:
*     This routine accepts an array consisting a series of (vectorised)
*     lines of data. The data values in the lines are then combined to
*     form an broadened medium line. The broadened median is similar to
*     a trimmed mean, except that the trimming fraction changes with
*     the number of values (and is equivalent to a median for less then
*     5 values). The output means are returned in the array RESULT.

*  Arguments:
*     STACK( NPIX, NLINES ) = <COMM> (Given)
*        The array of lines which are to be combined into a single line.
*     NPIX = INTEGER (Given)
*        The number of pixels in a line of data.
*     NLINES = INTEGER (Given)
*        The number of lines of data in the stack.
*     MINPIX = INTEGER (Given)
*        The minimum number of pixels required to contribute to an
*        output pixel.
*     RESULT( NPIX ) = REAL (Returned)
*        The output line of data.
*     WRK1( NLINES ) = REAL (Given and Returned)
*        Workspace for calculations.
*     NCON( NLINES ) = DOUBLE PRECISION (Given and Returned)
*        The actual number of contributing pixels.
*     POINT( NLINES ) = INTEGER (Given and Returned)
*        Workspace to hold pointers to the original positions of the
*        data before extraction and conversion in to the WRK1 array.
*     USED( NLINES ) = LOGICAL (Given and Returned)
*        Workspace used to indicate which values have been used in
*        estimating a resultant value.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Authors:
*     PDRAPER: Peter Draper (STARLINK)
*     {enter_new_authors_here}

*  History:
*     19-MAY-1992 (PDRAPER):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! PRIMDAT constants

*  Arguments Given:
      INTEGER NPIX
      INTEGER NLINES
      INTEGER MINPIX
      <TYPE> STACK( NPIX, NLINES )

*  Arguments Given and Returned:
      DOUBLE PRECISION NCON( NLINES )
      REAL WRK1( NLINES )

*  Arguments Returned:
      REAL RESULT( NPIX )
      LOGICAL USED( NLINES )
      INTEGER POINT( NLINES )

*  Status:
      INTEGER STATUS             ! Global status

*  Global Variables:


*  External References:
      EXTERNAL NUM_WASOK
      LOGICAL NUM_WASOK          ! Was numeric operation ok?

      EXTERNAL NUM_TRAP
      INTEGER NUM_TRAP           ! Numerical error handler

*  Local Variables:
      REAL ALPHA                 ! Trimming fraction
      INTEGER I                  ! Loop variable
      INTEGER J                  ! Loop variable
      DOUBLE PRECISION VAL       ! Weighted median
      INTEGER NGOOD              ! Number of good pixels

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM_ type conversion functions
      INCLUDE 'NUM_DEF_CVT'      ! Define functions...

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Establish the numeric error.
      CALL NUM_HANDL( NUM_TRAP )

*  Loop over for all possible output pixels.
      DO 1 I = 1, NPIX

*  Reset good pixel count and numeric error flag on each pass.
         CALL NUM_CLEARERR()
         NGOOD = 0

*  Loop over all possible contributing pixels.
         DO 2 J = 1, NLINES
            IF( STACK( I, J ) .NE. VAL__BAD<T> ) THEN

*  Increment good value counter.
               NGOOD = NGOOD + 1

*  Update the pointers to the positions of the unextracted data.
               POINT( NGOOD ) = J

*  Convert input type floating point value.
               WRK1( NGOOD ) = NUM_<T>TOR( STACK( I, J ) )

*  Trap conversion failures.
               IF ( .NOT. NUM_WASOK() ) THEN

*  Decrement NGOOD, do not let it go below zero.
                  NGOOD = MAX( 0, NGOOD - 1 )
                  CALL NUM_CLEARERR()
               END IF
            END IF
 2       CONTINUE

*  Continue if more than one good value.
         IF ( NGOOD .GT. 1 ) THEN

*  Sort these values into increasing order.
            CALL CCG1_IS2R( WRK1, POINT, NGOOD, STATUS )

*  Determine the trimming fraction.
            IF ( NGOOD .GT. 12 ) THEN
               ALPHA = 0.5 - 2.5 / REAL( NGOOD )
            ELSE IF ( NGOOD .LE. 12 .AND. NGOOD .GE. 5) THEN
               ALPHA = 0.5 - 1.5 / REAL( NGOOD )
            ELSE
               ALPHA = 0.5 - 0.5 / REAL( NGOOD )
            END IF

*  Find the trimmed mean.
            CALL CCG1_TRM3R( ALPHA, WRK1, NGOOD, USED, VAL, STATUS )

*  Update the used line counters.
            DO 3 J = 1, NGOOD
               IF ( USED ( J ) ) THEN
                  NCON( POINT( J ) ) = NCON( POINT( J ) ) + 1.0D0
               END IF
 3          CONTINUE
         ELSE IF ( NGOOD .EQ. 1 ) THEN

*  Population of one value - just use it.
            VAL = WRK1( NGOOD )
         END IF

*  If there are sufficient good pixels output the result.
         IF ( NGOOD .GE. MINPIX ) THEN
            RESULT( I ) = REAL( VAL )

*  Trap numeric errors from any source above (if minpix criterion is not
*  meet then results is set BAD anyway.)
            IF ( .NOT. NUM_WASOK() ) THEN
               RESULT( I ) = VAL__BADR
            END IF
         ELSE

*  Not enough contributing pixels.
            RESULT( I ) = VAL__BADR
         END IF
 1    CONTINUE

*  Remove the numerical error handler.
      CALL NUM_REVRT

      END
* $Id$
