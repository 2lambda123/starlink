#!/bin/csh
#+
#  Name:
#     SETEXERCISE

#  Purpose:
#     Tests Set-specific aspects of CCDPACK functionality.

#  Language:
#     C shell

#  Description:
#     The script creates a series of test frames using CCDGENERATE. It
#     then executes various of the CCDPACK Atasks simulating a
#     reduction sequence. Intermediary results are displayed (if requested)

#  Authors:
#     MBT: Mark Taylor (STARLINK)
#     {enter_new_authors_here}

#  History:
#     21-FEB-2001 (MBT):
#        Original version (based on ccdexercise and wcsexercise).
#-
#
      onintr EXIT
      set null = "\!"
      set abort = "\!\!"

#  Initialise CCDPACK within this shell.
      if ( $?CCDPACK_DIR ) then 
         if ( -e $CCDPACK_DIR/ccdpack.csh ) then 
            source $CCDPACK_DIR/ccdpack.csh
         else 
            exit 1
         endif
      endif

#  Establish the current directory as ADAM_USER and clear 
#  any global values already existing 
      setenv ADAM_USER $cwd
      if ( -e ${ADAM_USER}/GLOBAL.sdf ) then
	 ccdclear accept 
      endif

#  Does the user want to see image display activity?
      echo -n "DISPLAY - Display device (xw for xwindows; ! for none) > "
      set device = $<
      if ( "$device" == "$abort" || "$device" == "" ) then
         goto EXIT
      else
         if ( "$device" == "$null" ) then
            set device = "NONE"
         endif
      endif

#  Set a file extension for generating data.
      if ( $?CCDPACK_EXT ) then 
         set exten =  $CCDPACK_EXT
      else 
         set exten = ".sdf"
      endif

#  If we're going to use a device we need KAPPA.
      if ( "$device" != "NONE" ) then
         kappa
         idset $device \\
         gdset $device \\
         gdclear \\
         paldef \\
      endif

#  Do the "device" setup without an ARD file.
      ccdsetup \
         bounds='[1,2,56,64]' \
         extent='[3,55,1,128]' \
	 adc=2 \
	 rnoise=10.0 \
         logto=both \
	 logfile=ccdtest.log \
	 preserve=true \
	 direction=x \
         reset accept
#     end ccdsetup

#  Try to locate the object specification file. If this does not exist
#  then exit.
      set objfile = ccdtest2_obj.dat
      set astfile = ccdtest.ast
      foreach file ( $objfile $astfile )
         if ( -e $file ) then
            'rm' $file
         endif
         if ( -e $CCDPACK_DIR/$file ) then
            cp $CCDPACK_DIR/$file ./
         else
            echo "Cannot locate file $CCDPACK_DIR/$file"
            echo "- test terminated."
            exit
         endif
      end

#  Create the test frames:
      ccdgenerate \
         nseq=3 \
         file=$objfile \
         type=$exten \
         pixels='[64,128]' \
         origins='[-1,-101,-69,-101,297,-1]' \
         angles='[0,0,270]' \
         reduced=false \
         container=true \
         dataname=data-a \
         biasname=bias-a \
         ffname=ff-a \
         reset accept
#     end ccdgenerate
      ccdgenerate \
         nseq=3 \
         file=$objfile \
         type=$exten \
         pixels='[64,128]' \
         origins='[163,210,95,210,-15,163]' \
         angles='[180,180,90]' \
         reduced=false \
         container=true \
         dataname=data-b \
         biasname=bias-b \
         ffname=ff-b \
         reset accept
#     end ccdgenerate
      ccdgenerate \
         nseq=3 \
         file=$objfile \
         type=$exten \
         pixels='[64,128]' \
         origins='[-21,-151,-89,-151,247,-21]' \
         angles='[0,0,270]' \
         reduced=false \
         container=true \
         dataname=data-c \
         biasname=bias-c \
         ffname=ff-c \
         reset accept
#     end ccdgenerate

#  Construct Sets.
      makeset \
         in='"data-?,ff-?,bias-?"' \
         setsize=3 \
         addwcs=true \
         reset accept
#     end makeset

#  Show the Set groupings.
      showset \
         in='"data-?,ff-?,bias-?"' \
         setless=false \
         sortby=name \
         reset \
         accept
#     end showset

#  If display capability is enabled then display the data frames.
      if ( "$device" != "NONE" ) then
         echo " "
         echo "  Displaying raw target frames."
         echo " "
         picdef mode=array xpic=3 ypic=3 prefix=a accept
         lutheat accept
         picsel label=a1 accept
         display data-a.i1 percentiles='[2,98]' accept
         picsel label=a2 accept; display data-a.i2 accept
         picsel label=a3 accept; display data-a.i3 accept
         picsel label=a4 accept; display data-b.i1 accept
         picsel label=a5 accept; display data-b.i2 accept
         picsel label=a6 accept; display data-b.i3 accept
         picsel label=a7 accept; display data-c.i1 accept
         picsel label=a8 accept; display data-c.i2 accept
         picsel label=a9 accept; display data-c.i3 accept
      endif
	 
#  Make a bias frame.
      makebias \
         in='bias-?' \
	 out=master_bias \
         useset \
         reset \
	 accept
#     end makebias

#  Debias all frames (including flatfields)
      debias \
         in='"data-?,ff-?"' \
	 out='debias_*' \
         useset \
         reset accept
#     end debias

#  Display all the debiassed frames.
      if ( "$device" != "NONE" ) then
         gdclear accept
         picdef mode=array xpic=3 ypic=3 prefix=a accept
         lutheat accept
         picsel label=a1 accept; display debias_data-a.i1 accept
         picsel label=a2 accept; display debias_data-a.i2 accept
         picsel label=a3 accept; display debias_data-a.i3 accept
         picsel label=a4 accept; display debias_data-b.i1 accept
         picsel label=a5 accept; display debias_data-b.i2 accept
         picsel label=a6 accept; display debias_data-b.i3 accept
         picsel label=a7 accept; display debias_data-c.i1 accept
         picsel label=a8 accept; display debias_data-c.i2 accept
         picsel label=a9 accept; display debias_data-c.i3 accept
      endif

#  Create a flat field master
      makeflat \
         in='debias_ff-?' \
	 out=master_flat \
         useset \
         reset \
	 accept
#     end makeflat

#  Display the master flatfield.
      if ( "$device" != "NONE" ) then 
         gdclear accept
         picdef mode=array xpic=3 ypic=1 prefix=a accept
         lutheat accept
         picsel label=a1 accept; display master_flat.i1 accept
         picsel label=a2 accept; display master_flat.i2 accept
         picsel label=a3 accept; display master_flat.i3 accept
      endif

#  Flatfield all the data frames
      flatcor \
         in='debias_data-?' \
	 out='*|debias|reduced|' \
         useset \
         reset \
	 accept
#     end flatcor

      if ( "$device" != "NONE" ) then
         gdclear accept
         picdef mode=array xpic=3 ypic=3 prefix=a accept
         lutheat accept
         picsel label=a1 accept; display reduced_data-a.i1 accept
         picsel label=a2 accept; display reduced_data-a.i2 accept
         picsel label=a3 accept; display reduced_data-a.i3 accept
         picsel label=a4 accept; display reduced_data-b.i1 accept
         picsel label=a5 accept; display reduced_data-b.i2 accept
         picsel label=a6 accept; display reduced_data-b.i3 accept
         picsel label=a7 accept; display reduced_data-c.i1 accept
         picsel label=a8 accept; display reduced_data-c.i2 accept
         picsel label=a9 accept; display reduced_data-c.i3 accept
      endif

#  Now proceed to test out some alignment functionality.

#  Locate all the objects on the frames
      echo " " 
      echo "  The first stage of the automated registration process is"
      echo "  to detect the positions of objects (stars and galaxies)."
      echo "  "
      findobj \
        in='reduced_data-?' \
	outlist='*.find' \
        percentile=95 \
	accept
#     end findobj
      if ( "$device" != "NONE" ) then

#  Display the objects located.
         picsel label=a1 accept
         plotlist inlist='reduced_data-a.i1' palnum=4 mtype=23 accept
         picsel label=a2 accept; plotlist inlist='reduced_data-a.i2' accept
         picsel label=a3 accept; plotlist inlist='reduced_data-a.i3' accept
         picsel label=a4 accept; plotlist inlist='reduced_data-b.i1' accept
         picsel label=a5 accept; plotlist inlist='reduced_data-b.i2' accept
         picsel label=a6 accept; plotlist inlist='reduced_data-b.i3' accept
         picsel label=a7 accept; plotlist inlist='reduced_data-c.i1' accept
         picsel label=a8 accept; plotlist inlist='reduced_data-c.i2' accept
         picsel label=a9 accept; plotlist inlist='reduced_data-c.i3' accept
      endif
	
#  Determine matches between the positions.
      findoff \
         inlist='reduced_data-?' \
	 ndfnames=true \
         usewcs=true \
         restrict=true \
         useset=true \
	 outlist='*.off' \
	 accept
#     end findoff
      if ( "$device" != "NONE" ) then

#  Display the objects located.
         picsel label=a1 accept
         plotlist inlist='reduced_data-a.i1' \
                  palnum=3 mtype=-1 thick=2 msize=1.5 accept
         picsel label=a2 accept; plotlist inlist='reduced_data-a.i2' accept
         picsel label=a3 accept; plotlist inlist='reduced_data-a.i3' accept
         picsel label=a4 accept; plotlist inlist='reduced_data-b.i1' accept
         picsel label=a5 accept; plotlist inlist='reduced_data-b.i2' accept
         picsel label=a6 accept; plotlist inlist='reduced_data-b.i3' accept
         picsel label=a7 accept; plotlist inlist='reduced_data-c.i1' accept
         picsel label=a8 accept; plotlist inlist='reduced_data-c.i2' accept
         picsel label=a9 accept; plotlist inlist='reduced_data-c.i3' accept
      endif

########################################################################
#  This is as far as I've got.
########################################################################
   exit






#  Set the registration structures.
      echo " "
      echo "  Now that the object-object correspondence is known it is"
      echo "  possible to work out the inter-NDF transformations."
      echo "  The next routine does this for a range of different"
      echo "  transformation types. It also writes the information into the"
      echo "  NDFs so that other routines may use it."
      echo " "
      rm -f ccdexercise.ast
      register \
         inlist='reduced_data?' \
	 fittype=2 \
	 accept
#     end register

#  Export the registration information to an AST file.
      echo " "
      echo "  Write World Coordinate System information about the alignment"
      echo "  of these frames to an external file 'ccdexercise.ast' as a"
      echo "  record of their mutual alignment."
      echo " "
      astexp \
         in='reduced_data?' \
         astfile=ccdexercise.ast \
         idtype=fitsid \
         fitsid=ISEQ \
         outdomain=matched \
         accept
#     end astexp

#  Resample the data.
      echo " "
      echo "  The reduced NDFs will now be resampled to the same coordinate"
      echo "  system. After this is performed they can then be combined"
      echo "  (after determining normalising scale and zero points which "
      echo "  take into account any variations in sky transparency and "
      echo "  exposure time) into a single frame which shows the complete"
      echo "  data coverage for the target area."
      echo " "
      tranndf \
         in='reduced_data?' \
         out='*|reduced|resamp|' \
         accept
#     end tranndf

#  Normalise it.
      echo " "
      echo "  Normalising and combining the aligned datasets."
      echo " "
      makemos \
         in='resamp_data?' \
	 scale=true \
	 zero=true \
	 out=mosaic \
	 accept
#     end makemos

#  Display the final mosaic.
      if ( "$device" != "NONE" ) then 
         echo " "
         echo "  Displaying the final mosaic."
         echo " "
         gdclear \\
         display \
           in=mosaic \
           mode=percentiles \
           percentiles='[2,98]' \
           accept
#        end display
      endif

#  Exercise is completed.
      ccdnote \
         '"Exercise completed"' \
	 accept
#     end ccdnote

#  Exit label
EXIT:
      exit
# $Id$
