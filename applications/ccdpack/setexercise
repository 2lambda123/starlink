#!/bin/csh
#+
#  Name:
#     SETEXERCISE

#  Purpose:
#     Tests Set-specific aspects of CCDPACK functionality.

#  Language:
#     C shell

#  Description:
#     The script creates a series of test frames using CCDGENERATE. It
#     then executes various of the CCDPACK Atasks simulating a
#     reduction and registration sequence. Intermediary results are 
#     displayed on a graphics device (if requested).

#  Notes:
#     Various attempts are made to mess up the images in gratuitous ways
#     to test the CCDPACK commands as hard as possible.  Do not try
#     to look for a sensible astronomical/data reduction motive in
#     all the commands here, or use it indiscriminately as a template
#     for reduction scripts.  However, the data reduction and
#     registration steps themselves are illustrative of sensible
#     techniques.

#  Authors:
#     MBT: Mark Taylor (STARLINK)
#     {enter_new_authors_here}

#  History:
#     21-FEB-2001 (MBT):
#        Original version (based on ccdexercise and wcsexercise).
#-
#
      onintr EXIT
      set null = "\!"
      set abort = "\!\!"

#  Initialise CCDPACK within this shell.
      if ( $?CCDPACK_DIR ) then 
         if ( -e $CCDPACK_DIR/ccdpack.csh ) then 
            source $CCDPACK_DIR/ccdpack.csh
         else 
            exit 1
         endif
      endif

#  Initialise KAPPA within this shell.
      if ( $?KAPPA_DIR ) then
         if ( -e $KAPPA_DIR/kappa.csh ) then
            source $KAPPA_DIR/kappa.csh
         else
            exit 1
         endif
      endif

#  Establish the current directory as ADAM_USER and clear 
#  any global values already existing 
      setenv ADAM_USER $cwd
      if ( -e ${ADAM_USER}/GLOBAL.sdf ) then
	 ccdclear accept 
      endif

#  Does the user want to see image display activity?
      echo -n "DISPLAY - Display device (xw for xwindows; ! for none) > "
      set device = $<
      if ( "$device" == "$abort" || "$device" == "" ) then
         goto EXIT
      else
         if ( "$device" == "$null" ) then
            set device = "NONE"
         endif
      endif

#  Set a file extension for generating data.
      if ( $?CCDPACK_EXT ) then 
         set exten =  $CCDPACK_EXT
      else 
         set exten = ".sdf"
      endif

#  Do graphics device initialisation if necessary.
      if ( "$device" != "NONE" ) then
         idset $device \\
         gdset $device \\
         gdclear \\
         paldef \\
      endif

#  Do the "device" setup without an ARD file.
      ccdsetup \
         bounds='[1,2,56,64]' \
         extent='[3,55,1,128]' \
	 adc=2 \
	 rnoise=10.0 \
         logto=both \
	 logfile=ccdtest.log \
	 preserve=true \
	 direction=x \
         reset accept

#  Try to locate the object specification file. If this does not exist
#  then exit.
      set objfile = ccdtest2_obj.dat
      set astfile = ccdtest.ast
      foreach file ( $objfile $astfile )
         if ( -e $file ) then
            'rm' $file
         endif
         if ( -e $CCDPACK_DIR/$file ) then
            cp $CCDPACK_DIR/$file ./
         else
            echo "Cannot locate file $CCDPACK_DIR/$file"
            echo "- test terminated."
            exit
         endif
      end

#  Create the test data: three Sets of three NDFs each.
      ccdgenerate \
         nseq=3 \
         file=$objfile \
         type=$exten \
         pixels='[64,128]' \
         origins='[19,-101,-49,-101,297,19]' \
         angles='[0,0,270]' \
         reduced=false \
         container=true \
         dataname=data-a \
         biasname=bias-a \
         ffname=ff-a \
         seed=32767 \
         reset accept
      ccdgenerate \
         nseq=3 \
         file=$objfile \
         type=$exten \
         pixels='[64,128]' \
         origins='[163,210,95,210,-15,163]' \
         angles='[180,180,90]' \
         reduced=false \
         container=true \
         dataname=data-b \
         biasname=bias-b \
         ffname=ff-b \
         seed=90909 \
         reset accept
      ccdgenerate \
         nseq=3 \
         file=$objfile \
         type=$exten \
         pixels='[64,128]' \
         origins='[20,-51,-49,-51,247,20]' \
         angles='[0,0,270]' \
         reduced=false \
         container=true \
         dataname=data-c \
         biasname=bias-c \
         ffname=ff-c \
         seed=2112123 \
         reset accept

#  Give the various NDFs different data types.  This is just to try to
#  confuse subsequent tasks.
         settype \
            ndf='"data-{a,b,c}"' \
            type=_double \
            reset accept
         settype \
            ndf='"ff-{a,b,c}"' \
            type=_uword \
            reset accept
         settype \
            ndf='"bias-{a,b,c}"' \
            type=_integer \
            reset accept

#  Construct Sets.
      makeset \
         in='"data-?,ff-?,bias-?"' \
         mode=container \
         addwcs=true \
         reset accept

#  Show the Set groupings.
      showset \
         in='"data-?,ff-?,bias-?"' \
         setless=false \
         listby=name \
         reset \
         accept

#  If display capability is enabled then display the data frames.
      if ( "$device" != "NONE" ) then
         picgrid xpic=3 ypic=1 accept
         lutheat accept
         picsel 1 
         bounds data-a image nolabnum nolabname noorigin \
                style='"title=Raw data"' reset accept
         picsel 2; bounds data-b
         picsel 3; bounds data-c
      endif
	 
#  Make a bias frame.
      makebias \
         in='bias-?' \
	 out=master_bias \
         useset \
         reset \
	 accept

#  Display the master bias frames.
      if ( "$device" != "NONE" ) then
         gdclear
         lutheat
         bounds master_bias image nolabnum nolabname noorigin \
                style='"title=Master bias frames"' reset accept
      endif

#  Debias all frames (including flatfields)
      debias \
         in='"data-?,ff-?"' \
	 out='debias_*' \
         useset \
         reset accept

#  Display all the debiassed frames.
      if ( "$device" != "NONE" ) then
         gdclear
         picgrid xpic=3 ypic=1
         lutheat
         picsel 1; 
         bounds debias_data-a image nolabnum nolabname noorigin \
                style='"title=Debiassed data"' reset accept
         picsel 2; bounds debias_data-b
         picsel 3; bounds debias_data-c
      endif

#  Create a flat field master
      makeflat \
         in='debias_ff-?' \
	 out=master_flat \
         useset \
         reset \
	 accept

#  Display the master flatfields.
      if ( "$device" != "NONE" ) then 
         gdclear accept
         lutheat accept
         bounds master_flat image nolabnum nolabname noorigin \
                style='"title=Master flat fields"' reset accept
      endif

#  Flatfield all the data frames
      flatcor \
         in='debias_data-?' \
	 out='*|debias|reduced|' \
         useset \
         reset accept

      if ( "$device" != "NONE" ) then
         gdclear accept
         picgrid xpic=3 ypic=1
         picsel 1
         bounds reduced_data-a nolabnum nolabname noorigin image \
                style='"title=Reduced data"' reset accept
         picsel 2; bounds reduced_data-b
         picsel 3; bounds reduced_data-c
      endif

#  Now proceed to test out some alignment functionality.

#  First we will resample the reduced frames into different coordinate
#  systems - the a-set is left alone, the b-set is shifted so that
#  its pixel coordinates are entirely outside the range of its grid
#  coordinates and the c-set is magnified.  The purpose of this is
#  solely to provide the subsequent tasks with more opportunities to fail.
      ndfcopy \
         in='reduced_data-a' \
         out='*|reduced_data|xdata|' \
         reset accept
      wcsedit \
         in='"reduced_data-b.i1,reduced_data-b.i2"' \
         mode=add \
         frame=pixel \
         maptype=linear \
         coeffs='[500,1,0,1000,0,1]' \
         domain=shifted \
         reset accept
      wcsedit \
         in='"reduced_data-b.i3"' \
         mode=add \
         frame=pixel \
         maptype=linear \
         coeffs='[500,1,0,-1000,0,1]' \
         domain=shifted \
         reset accept
      tranndf \
         in='reduced_data-b' \
         out='*|reduced_data|xdata|' \
         conserve=false \
         method=nearest \
         reset accept
      wcsedit \
         in=xdata-b \
         mode=current \
         frame=ccd_gen \
         reset accept
      pixdupe \
         in='reduced_data-c' \
         out='*|reduced_data|xdata|' \
         expand=2 \
         reset accept

#  Give them different data types as well for the same reason.
      settype \
         ndf=xdata-a \
         type=_uword \
         reset accept
      settype \
         ndf=xdata-b \
         type=_integer \
         reset accept
      settype \
         ndf=xdata-c \
         type=_double \
         reset accept

#  Locate all the objects on the frames
      findobj \
        in='"xdata-[abc]"' \
	outlist='*.find' \
        percentile=95 \
	accept

#  Display the objects located.
      if ( "$device" != "NONE" ) then
         picsel 1; plotlist inlist=xdata-a palnum=4 mtype=23 reset accept
         picsel 2; plotlist inlist=xdata-b
         picsel 3; plotlist inlist=xdata-c
      endif

#  Determine matches between the positions.
      findoff \
         inlist='"xdata-[abc]"' \
	 ndfnames=true \
         usewcs=true \
         restrict=false \
         useset=true \
	 outlist='*.off' \
	 accept

#  Display the objects located.
      if ( "$device" != "NONE" ) then
         picsel 1; plotlist inlist=xdata-a palnum=3 mtype=-1 thick=2 msize=1.5
         picsel 2; plotlist inlist=xdata-b
         picsel 3; plotlist inlist=xdata-c
      endif

#  Add some linearly transformed coordinate frames in which to do the
#  registration to give REGISTER a harder time.
      wcsedit \
         in=xdata-a \
         mode=add \
         frame=ccd_set \
         domain=moved \
         maptype=linear \
         coeffs='[200,1,0,400,0,1]' \
         reset accept
      wcsedit \
         in=xdata-b.i1 \
         mode=add \
         frame=ccd_set \
         domain=moved \
         maptype=unit \
         reset accept
      wcsedit \
         in=xdata-b.i2 \
         mode=add \
         frame=ccd_set \
         domain=moved \
         maptype=linear \
         coeffs='[0,0.2,0,0,0,0.2]' \
         reset accept
      wcsedit \
         in=xdata-b.i3 \
         mode=add \
         frame=ccd_set \
         domain=moved \
         maptype=linear \
         coeffs='[0,4,0,0,0,4]' \
         reset accept
      wcsedit \
         in=xdata-c \
         mode=add \
         frame=ccd_set \
         domain=moved \
         maptype=linear \
         coeffs='[-100,1,-1,-100,1,1]' \
         reset accept

#  Create registration frames.
      register \
         inlist='"xdata-[abc]"' \
         fittype=4 \
         useset=true \
         usewcs=true \
         accept reset

#  Take a look at the alignment.
      if ( "$device" != "NONE" ) then
         gdclear
         picgrid xpic=2 ypic=1
         picsel 1
         bounds \
            in='"xdata-[abc]"' \
            labnum=true \
            labname=false \
            origin=true \
            penrot=true \
            useset=true \
            image=false \
            clear=true \
            style='"colour(curves)=6"' \
            reset accept
         plotlist inlist=xdata-a palnum=7 mtype=2 reset accept
         plotlist inlist=xdata-b palnum=8 mtype=4 reset accept
         plotlist inlist=xdata-c palnum=9 mtype=5 reset accept
      endif

#  Resample the data.
      tranndf \
         in='"xdata-[abc]"' \
         out='*|xdata|rxdata|' \
         conserve=false \
         accept

#  Normalise it.
      makemos \
         in='"rxdata-[abc]"' \
	 scale=false \
	 zero=false \
	 out=mosaic \
	 accept

#  Display the final mosaic.
      if ( "$device" != "NONE" ) then 
         echo " "
         echo "  Displaying the final mosaic."
         echo " "
         picsel 2
         display \
           in=mosaic \
           mode=percentiles \
           percentiles='[2,98]' \
           style='"textlab=0"' \
           margin=0.05 \
           reset accept
      endif

#  Exercise is completed.
      ccdnote \
         '"Exercise completed"' \
	 accept

#  Exit label
EXIT:
      exit
# $Id$
