0 Help

 CCDPACK is a package for performing the preparative stages of
 CCD reduction.

1 CCDPACK
 The functionality of CCDPACK relates to two main areas. The first
 covers the reduction of data to remove the instrumented signature
 (debiassing, flatfielding etc.). The second is concerned with
 registration and mosaicing. A full listing of CCDPACK tasks with
 a brief description of their purpose is found under the help topic
 "Classified_Commands".
 
 A major aim of CCDPACK is to help in the processing of large amounts
 of data. Consequently all CCDPACK routines process lists of data and
 log useful information using an integral logging system.

 CCDPACK is available on all Starlink supported platforms.

 The package is initialised using the CCDPACK (ccdpack on UNIX) 
 command. Help can be obtained by typing

    $ HELP CCDPACK, or
    $ CCDHELP, or
    $ HELP "taskname"

 from DCL.

    % ccdhelp

 from the C-shell.

 From ICL help can be obtained by typing

    ICL > HELP CCDPACK, or
    ICL > HELP "taskname"

 Help can also be accessed at any prompt by returning a "?".

 Full details of how to use on VMS and UNIX are given in SUN/139.

1 Classified_Commands

 The main CCDPACK routines are.

    MAKEBIAS - produces a bias calibration image

    DEBIAS   - debiases images either by bias calibration image
               subtraction or by interpolation, applies bad data 
               masks, extracts a subset of the data area, produces 
               variances applies saturation values

    MAKECAL  - produces calibration images for flash or dark counts

    CALCOR   - performs dark or flash count corrections

    MAKEFLAT - produces a calibration flatfield image

    FLATCOR  - performs the flatfield correction

    FINDCENT - centroids image features

    FINDOBJ  - locates and centroids image features

    FINDOFF  - matches unlabelled position lists which are related 
               by a simple offset.

    IDICURS  - reads co-ordinates from a graphics device (allows
               zooming and panning)

    MAKEMOS  - makes image mosaics by combining and (optionally) 
               normalising

    PAIRNDF  - displays and manipulates image pairs to allow easy
               registration (offsets only)

    PLOTLIST - draws position markers on graphics displays

    REGISTER - determines transformation between lists of positions

    TRANLIST - transforms lists of positions

    TRANNDF  - transforms (resamples) images

    CCDALIGN - determines general inter-image transformations

 Routines which support the function of the main tasks are.

    CCDSETUP - sets up a series of (CCD device) related global
               parameters; should be used first

    CCDCLEAR - clears the current globals parameters

    CCDNOTE  - adds a note to the log file

    CCDSHOW  - displays the current values of any CCDPACK global
               parameters

    CCDBATCH - saves the current ADAM environment and writes
               initialising batch commands (VMS specific)

    ccdfork  - saves the current ADAM environment and writes
               a script for forking into a background process
               (Unix specific)

    LISTLOG  - lists the contents of a logfile. The output may be
               written to a printable file (VMS only)

    CCDEDIT  - edits the CCDPACK extensions of images

    CCDNDFAC - accesses a list of images, writing their names to a file
    

1 Unix_Typical_Initial_Reduction

 The following text displays the input to a typical reduction 
 sequence, performed using CCDPACK from the C shell. Note the 
 sequence of operations and the use of single quotes to protect 
 symbols with special meaning to the shell (these are only necessary 
 when entering values on the command line).

 # Set up atask symbols etc.
 #
 % ccdpack
 #
 # Clear any previous global parameters.
 #
 % ccdclear
 #
 # Now set up the new global parameters. Set the bounds of the bias 
 # strip, the nominal readout noise value (in ADUs), the nominal 
 # Analogue to Digital Conversion (ADC) factor, the readout 
 # direction (along the X dimension). Set the useful extent of the 
 # CCD area, initialise the logfile system to write to the terminal 
 # and to echo to the logfile. Set PRESERVE to keep the input data 
 # type.
 #
 % ccdsetup bounds=[323,349] rnoise=10 adc=1 direction=x \
            extent=[4,318,3,510] logto=both logfile=ccdpack.log \
            preserve=true reset accept
 #
 # Add some notes about this run.  --- The commands after this point
 # could be entered into file and used as the input to ccdfork, whose
 # output could then be forked into a background process
 #
 % ccdnote '"Example of typical CCDPACK reduction sequence"'
 #
 # Make the calibration bias image. RESET any previous parameter values
 # back to their defaults (important in case of any previously latched
 # parameters).
 #
 % makebias in='bias/*' out=bias/master_bias method=median reset accept
 #
 # DEBIAS all the images. Note using a calibration bias image and 
 # normalising to the bias strip.
 #
 % debias in='"flatr/*,flatb/*,bdata/*,rdata/*"' out='*_debias' \
          mask=mask/mask bias=bias/master_bias reset accept
 #
 # Create the calibration flat fields.
 #
 % makeflat in='flatr/*_debias' out=flatr/master_flat reset accept
 % makeflat in='flatb/*_debias' out=flatb/master_flat reset accept
 #
 # Flat field the appropriate frames.
 #
 % flatcor in='rdata/*_debias' out='rdata/*/debias/flattened/' \
           flat=flatr/master_flat reset accept
 % flatcor in='bdata/*_debias' out='bdata/*/debias/flattened/' \
           flat=flatb/master_flat reset accept
 #
  
 If dark counts or pre-flash frames need processing, then they should
 be debiassed and made into calibration masters using MAKECAL. The
 calibration frame should then be (appropriately) subtracted from all 
 frames before producing the flatfields and performing flatfield
 correction.

 -  Highlights.
 Using a combination of these routines (FINDOBJ, FINDOFF, REGISTER,
 TRANNDF and MAKEMOS) it is possible to register, align, normalise
 and combine many datasets which are offset with respect to each
 without any graphical interaction -- i.e. automatically.

 Two interactive applications are provided for user controlled
 registration, CCDALIGN and PAIRNDF. PAIRNDF is a specialist application
 which eases the selection of objects in (many) images which are simply
 translated from each other (this removes the requirement to
 pre-select the labelling of the objects on every frame). CCDALIGN is
 a general purpose procedure for aligning single or multiple groups of
 images.

 TRANNDF resamples images. The transformations may be arbitrary if
 entered using the CCDEDIT facility. General transformations using
 algebraic expressions are supported by REGISTER, TRANLIST, CCDEDIT
 and TRANNDF.

 MAKEMOS is a comprehensive application for producing a mosaic from a
 list of aligned images. It also provides very robust normalisation
 methods for data with varying exposures and/or sky transparencies.

1 Position_lists

 The positions of objects are stored in ordinary text files which are
 referred to as position lists. The format of these lists is flexible.
 Usually position lists have three columns:

     Identifier    X-position    Y-position

 these may be separated by commas or white space. The identifier is
 an integer value which is used to identify positions which are the
 related (i.e. of the same object on different frames) in different
 lists.

 If more than three columns exist then only the first three are used.

 If only two columns exist it is assumed that they are

     X-position   Y-position

 such lists may be produced by KAPPA applications. In applications
 which rely on a knowledge of the identifiers these are assumed to be
 monotonically increasing from one in the first row.

 Comments are allowed in position lists using the character "#".
 In-line and whole-line comments are allowed.

 Usually position lists are "associated" with images. What is means is
 that when a position list is created a record of its name is kept
 in the extension of the image. It is then usual to refer to the image
 instead of the position list when the position list is to be
 accessed. Applications which create new position lists (from old
 ones) associate the new position lists with the appropriate image.
 Using this method avoids any confusion about the relationship of
 position lists and images, which is vital when determining the
 registration of many images at one go. It also allows the use of
 the wildcarding properties of image names when accessing position
 lists.

 Position lists may be associated with images using the CCDEDIT
 routine. It is also possible to disable associations using the
 NDFNAMES global parameter (CCDSETUP).

! $Id$
