.help register Starlink ccdpack
.nf
Determines transformations between lists of positions.

Usage:

   register inlist fittype refpos

Description:

   This routine determines the transformations between (labelled)
   position lists. Six different types of transformation are
   available. The first 5 are based on the linear transformation,
   the sixth being a function defined by you. The linear
   transformations are based on the mappings

      X' = A + B*X + C*Y
      Y' = D + E*X + F*Y

   and allow:

     - shift of origin

     - shift of origin and rotation

     - shift of origin and magnification

     - shift of origin, rotation and magnification (solid body)

     - or a full six parameter fit

   The self defined transform can be any mapping given as an
   algebraic expression (including functions) using the methods
   allowed by TRANSFORM (SUN/61).

   When determining linear transformations REGISTER allows many
   lists to be processed at once performing a simultaneous
   registration of all the lists. When using a self defined
   transform only two lists may be registered at any time.

   The results from REGISTER are reported via the logging system
   and then coded either as new frames with a domain name given
   by the OUTDOMAIN parameter in the WCS component of the NDFs,
   or as TRANSFORM structures, containing the final algebraic
   solutions for each input list.  Transform structures may be
   stored in the CCDPACK exensions of the associated NDFs or within
   a named HDS container file if no associated NDFs exist.  Whether
   TRANSFORM structures or frames within the WCS components are
   chosen, they can be used by the applications TRANLIST and
   TRANNDF to transform position lists and resample the actual
   datasets respectively.

Parameters

For information on individual parameters, select from the list below:

CLASS

CLASS( ) = LITERAL (Read)
   If CLASSIFY is TRUE then a list of classifications that
   describe the properties of the transformation (parameters
   XFOR, YFOR, XINV and YINV) should be given. This is
   optional, but the information can be used to make other
   applications run more efficiently.  Valid values are:

      - LINEAR        -- Linear and preserves straight lines.

      - INDEPENDENT   -- Preserves the independence of the axes.

      - DIAGONAL      -- Preserves the axes themselves.

      - ISOTROPIC     -- Preserves angles and shapes.

      - POSITIVE_DET  -- A component of reflection is absent.

      - NEGATIVE_DET  -- A component of reflection is present.

      - CONSTANT_DET  -- The scale factor is constant.

      - UNIT_DET      -- Areas (or volumes etc.) are preserved.

   See SUN/61 Appendix B for details of transformation
   classification and a table of classifications of common
   mappings.

   This parameter is ignored unless OUTFORMAT=TRANSFORM.

CLASSIFY

CLASSIFY = _LOGICAL (Read)
   If TRUE then this indicates that you want to classify the
   transform. Classifying a transformation can help in later
   processing and allows applications to reject transformations
   that they cannot use. The topic of classification is discussed
   in SUN/61 which should be consulted before using this option.
   Linear transformations are classified by this routine directly
   and do not use this parameter.

   This parameter is ignored unless OUTFORMAT=TRANSFORM.
   [FALSE]

FA-FZ

FA-FZ = LITERAL (Read)
   These parameters supply the values of "sub-expressions" used in
   the expressions XFOR, YFOR, XINV and YINV. These parameters
   should be used when repeated expressions are present in complex
   transformations. Sub-expressions may contain references to
   other sub-expressions and the variables (PA-PZ).
   An example of using sub-expressions is:
      XFOR > PA*ASIND(FA/PA)*X/FA
      YFOR > PA*ASIND(FA/PA)*Y/FA
      XINV > PA*SIND(FB/PA)*XX/FB
      YINV > PA*SIND(FB/PA)*YY/FB
      FA > SQRT(X*X+Y*Y)
      FB > SQRT(XX*XX+YY*YY)

   This parameter is ignored unless OUTFORMAT=TRANSFORM.

FITTYPE

FITTYPE = _INTEGER (Read)
   The type of fit which should be used when determining the
   transformation between the input positions lists. This may take
   the values

      - 1 -- shift of origin

      - 2 -- shift of origin and rotation

      - 3 -- shift of origin and magnification

      - 4 -- shift of origin, rotation and magnification (solid
             body)

      - 5 -- a full six parameter fit

      - 6 -- self defined function

   [5]

FULL

FULL = _LOGICAL (Read)
   If FITTYPE=6 is chosen then this parameter value determines
   if a full transformation is to be performed or not. If FALSE
   then you will only be prompted for expressions for XFOR and
   YFOR and the inverse transformation will remain undefined.

   If TRUE then you will also be prompted for XINV and YINV in
   response to which the inverse mappings for X' and Y' are
   required. Not performing a full fit will affect the later
   uses of the transformation. At present not providing an inverse
   mapping means that image resampling (TRANNDF) may not be
   performed.
   [FALSE]

IN

IN = LITERAL (Read)
   If NDFNAMES is FALSE and PLACEIN is "NDF" then a list of NDF
   names in which to store the WCS frames or transformation
   structures is required. This list of names must correspond
   exactly to the order of the associated input lists. A listing
   of the order of inputs is shown before this parameter is
   accessed.

   The NDF names may (although this is probably not advisable)
   be specified using wildcards, or may be specified using an
   indirection file (the indirection character is "^").

INLIST

INLIST = LITERAL (Read)
   This parameter is used to access the names of the lists
   which contain the positions and, if NDFNAMES is TRUE, the names
   of the associated NDFs. If NDFNAMES is TRUE the names of the
   position lists are assumed to be stored in the extension of the
   NDFs (in the CCDPACK extension item CURRENT_LIST) and the names
   of the NDFs themselves should be given (and may include
   wildcards).

   If NDFNAMES is FALSE then the actual names of the position
   lists should be given. These may not use wildcards but may be
   specified using indirection (other CCDPACK position list
   processing routines will write the names of their results
   files into files suitable for use in this manner) the
   indirection character is "^".

LOGFILE

LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]

LOGTO

LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]

NDFNAMES

NDFNAMES = _LOGICAL (Read)
   This parameter specifies whether the names of the input
   positions lists are stored in the CCDPACK extensions of NDFs.
   If TRUE then the INLIST parameter accesses a list of NDFs
   which are used to get the associated positions lists. If FALSE
   then INLIST just accesses the position list names directly.

   If the names of the lists are stored in the CCDPACK NDF
   extension then the final WCS frame information or
   transformation structure is also written to the NDF
   extension.

   If a global value for this parameter has been set using
   CCDSETUP then that value will be used.
   [TRUE]

OUTDOMAIN

OUTDOMAIN = LITERAL (Read)
   If OUTFORMAT is 'WCS', the transformation information is
   written as a new frame to the WCS component of the NDF.
   The frame normally has a Domain name of 'CCD_REG', but
   that can be overridden with this parameter.  When this
   frame is added, any previously existing frame which has
   the same Domain is removed.

   The name is converted to upper case, and whitespace is removed.
   [CCD_REG]

OUTFORMAT

OUTFORMAT = LITERAL (Read)
   If NDFNAMES is TRUE, or PLACEIN is 'NDF', then this parameter
   specifies how the transformation is to be written into the
   NDFs.  There are two possible values:

      - WCS       -- written into WCS component of the NDF

      - TRANSFORM -- written as a TRANSFORM structure into the
                     .MORE.CCDPACK extension of the NDF

   If WCS is chosen, then a new frame, with a Domain value given
   by OUTDOMAIN, is inserted into the WCS component of the NDF
   (a new WCS component is created if none previously existed).
   A mapping between this and the 'PIXEL' domain is defined,
   which is the unit mapping in the case that the NDF in question
   is the reference set.  If any frame in the domain OUTDOMAIN
   already exists in the WCS component, it will be erased, so
   that after successful processing by REGISTER it will contain
   only one such frame.

   WCS is currently only possible for linear transformations
   (FITTYPE values between 1 and 5).
   [WCS]

PA-PZ

PA-PZ = LITERAL (Read)
   When FITTYPE=6 these parameters are used for supplying initial
   guesses at the values of the fit parameters. Normally the
   values of these parameters are not critical, but occasionally
   the minimization routine fails due to numeric problems (these
   are usually caused by trig functions etc. which are given
   invalid values (outside +/-1 etc.)).
   [1.0D0]

PLACEIN

PLACEIN = LITERAL (Read)
   If NDFNAMES is FALSE then this parameter specifies where
   you would like to store the final transformation structures.
   The options are:

      - NDF  -- store them in NDF extensions

      - FILE -- store them in a container file.

   If the NDF option is chosen then you will have the option of
   supplying the NDF names via the parameter IN. If the FILE
   option is chosen then the name of an HDS container file should
   be given in response to the TRFILE parameter.
   [NDF]

REFPOS

REFPOS = _INTEGER (Read)
   The position within the list of inputs which corresponds to
   the list to be used as the reference set.
   [1]

TOLER

TOLER = _DOUBLE (Read)
   The RMS tolerance in positions which is used to determine the
   best fit. Adjust this value only if the input positions are
   specified in coordinates with a higher accuracy or smaller
   units.
   [0.001]

TRFILE

TRFILE = TRFILE (Read)
   If PLACEIN is given as "FILE" then the value of this parameter
   specifies the name of the container file to be used to store
   the resultant transformation structures.

USEWCS

USEWCS = _LOGICAL (Read)
   This parameter specifies whether the coordinates in the
   position lists should be transformed from Pixel coordinates
   into the coordinates of the Current frame of the WCS
   component of the associated NDF before use.  It should
   normally be set TRUE, in which case the transformation type
   set by the FITTYPE parameter is the type which will be fit
   between the Current coordinate frames of the NDFs.
   Otherwise the fit will be between the Pixel coordinate
   frames.

   This parameter is ignored if NDFNAMES is not TRUE.
   [TRUE]

XFOR

XFOR = LITERAL (Read)
   If FITTYPE=6 then this parameter specifies the parameterised
   algebraic expression to be used as the forward X
   transformation. The expression may use all the functions
   specified in SUN/61 (TRANSFORM) as well as the usual
   mathematical operators (+,-,*,/,**). Functions are
   parameterised by the strings PA,PB,PC...PZ which are the
   values which will be determined. The string must contain at
   least one reference to either X or Y.  So a possible return is
       PA+PB*X

   which is the same as the linear X transformation which just
   applies an offset and a scale factor.

XINV

XINV = LITERAL (Read)
   If FITTYPE=6 and FULL=TRUE then this parameter specifies
   the inverse X transformation. The expression may use all the
   functions specified in SUN/61 (TRANSFORM) as well as the usual
   mathematical operations (+,-,*,/,**). Functions are
   parameterised by the strings PA,PB,PC...PZ which are the
   values which will be determined.  This expression must contain
   a reference to either XX or YY. So a possible return is
       (XX-PA)/PB

   which is the same as the inverse linear X transformation for an
   offset and scale.

YFOR

YFOR = LITERAL (Read)
   If FITTYPE=6 then this parameter specifies the parameterised
   algebraic expression to be used as the forward Y
   transformation. The expression may use all the functions
   specified in SUN/61 (TRANSFORM) as well as the usual
   mathematical operators (+,-,*,/,**). Functions are
   parameterised by the strings PA,PB,PC...PZ which are the
   values which will be determined.  The string must contain at
   least one reference to either X or Y.  So a possible return is
       PC+PD*Y

   which is the same as the linear Y transformation which just
   applies an offset and a scale factor.

YINV

YINV = LITERAL (Read)
   If FITTYPE=6 and FULL=TRUE then this parameter specifies
   the inverse Y transformation. The expression may use all the
   functions specified in SUN/61 (TRANSFORM) as well as the usual
   mathematical operations (+,-,*,/,**). Functions are
   parameterised by the strings PA,PB,PC...PZ which are the
   values which will be determined.  This expression must contain
   a reference to either XX or YY. So a possible return is
       (YY-PC)/PD

   which is the same as the inverse linear Y transformation for an
   offset and scale.

Examples

register inlist='*' fittype=1
   In this example all the NDFs in the current directory are
   accessed and their associated position lists are opened.
   A global fit between all the datasets is then performed
   which results in estimates for the offsets from the first
   input NDF's position.  These offsets are between the Current
   coordinate frames of the NDFs.  The results are then coded
   as new frames, with the domain name 'CCD_REG', in the WCS
   component of the NDFs.  Actual registration of the images
   can then be achieved by aligning all the NDFs in the CCD_REG
   domain.

register inlist='*' trtype=5 outdomain=result-set1
   This example works as above but this time the global
   transformations are derived for a full 6-parameter linear fit
   (which allows offset, rotation, magnification and shear).
   The results are coded as frames in the Domain 'RESULT-SET1'.

register inlist='"myndf1,myndf2"' fittype=4 refpos=2
   In this example a solid body fit is performed between the
   position lists associated with the NDFs myndf1 and myndf2.
   The reference positions are chosen to be those associated with
   myndf2, so that the CCD_REG frame coordinates will be the
   same as the Current frame in NDF myndf2.

register inlist='"one,two"' fittype=6 xfor='pa+pb*x' yfor='pa+pb*y'
   In this example the position lists associated with the NDFs
   one and two are said to be related by the algebraic
   expressions "pa+pb*x" and "pa+pb*y", which indicates that a
   single offset applies in both directions and a single scale
   factor. A solution for the values PA and PB is found using a
   general least-squares minimization technique. Starting values
   for PA and PB can be given using the parameters PA and PB.
   Since the fittype is 6, outformat must be 'transform', so
   the results are coded as transform structures in the CCDPACK
   extensions of the NDFs (under the item TRANSFORM).  The
   transform structures are arranged so that the forward
   transformation maps current positions into the reference
   coordinate system.

register inlist='"ndf1,ndf2"' fittype=6 xfor='pa+pb*x+pc*y+pd*x*y'
         yfor='pe+pf*x+pg*y+ph*x*y'
   In this example a non-linear transformation is fit between the
   positions associated with the NDFs ndf1 and ndf2. This analysis
   may help in determining whether a 6-parameter fit is good
   enough, or if you just want to transform positions. A problem
   with proceeding with this transformation in a general fashion
   is deriving the inverse as this is required if you want to
   perform image resampling.

register ndfnames=false inlist='"list1.acc,list2.acc,list3.acc"'
         fittype=3 placein=ndf outformat=transform
         in='"ndf1,ndf2,ndf3"'
   In this example the input position lists are not associated
   with NDFs (ndfnames=false) and have to be specified by name
   (no wildcards allowed). Since the position lists are not
   associated with NDFs there is no natural home for the
   transform structures. In this example it has been decided to
   place the transforms in NDFs anyway. PLACEIN could also be
   given as "file" in which case the transform structures are
   written to a container file, under the items TRN_1, TRN_2 ...

Notes

- Position list formats.

  CCDPACK supports data in two formats.

  CCDPACK format - the first three columns are interpreted as the
  following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which are the same but which have different locations
  on different images. Values in any other (trailing) columns are
  usually ignored.

  EXTERNAL format - positions are specified using just an X and
  a Y entry and no other entries.

     - Column 1: the X position

     - Column 2: the Y position

  This format is used by KAPPA applications such as CURSOR.

  Comments may be included in a file using the characters "#" and
  "!". Columns may be separated by the use of commas or spaces.

  Files with EXTERNAL format may be used with this application but
  all positions have to be present in all lists, no missing
  positions are allowed.

  In all cases, the coordinates in position lists are pixel
  coordinates.

- NDF extension items.

  If NDFNAMES is TRUE then the item "CURRENT_LIST" of the
  .MORE.CCDPACK structure of the input NDFs will be located
  and assumed to contain the names of the lists whose positions
  are to be used for registration.

  On exit, if OUTFORMAT is "WCS" then a new frame with domain
  name given by the OUTDOMAIN parameter will be added to the
  .WCS component of input NDFs.  Taken together these contain the
  registration information and can be inspected using NDFTRACE
  or WCSSHOW (SUN/95).

  If OUTFORMAT is "TRANSFORM" then an item "TRANSFORM" will be
  added to the .MORE.CCDPACK structure of the input NDFs.
  This contains the registration information as a TRANSFORM
  structure and may be inspected using the utility HDSTRACE
  (SUN/102).

Behaviour_of_parameters

   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application but does mean
   that additional care needs to be taken when using the application
   on new datasets or after a break of sometime.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO, LOGFILE and NDFNAMES) have global
   values. These global values will always take precedence, except
   when an assignment is made on the command line.  Global values may
   be set and reset using the CCDSETUP and CCDCLEAR commands.

Authors

PDRAPER: Peter Draper (STARLINK)

MBT: Mark Taylor (STARLINK)

History

 28-JUL-1992 (PDRAPER):
    Original version.

 5-OCT-1992 (PDRAPER):
    Made into CCDPACK task.

 19-JUL-1995 (PDRAPER):
    Removed AIF_ calls.

 6-OCT-1995 (PDRAPER):
    Updated for CCDPACK version 2.0.

 18-SEP-1996 (PDRAPER):
    Removed dependency on NAG calls. This affects fittypes 3,4,5,6.

 3-MAR-1997 (PDRAPER):
    Removed top-level locator control (foreign data access upgrade).

 23-MAR-1998 (PDRAPER):
    Changed to only open input lists when required. This works
    around the FIO limit of 40 open file.

 11-MAR-1999 (MBT):
    Changed to use WCS components as well as TRANSFORM structures.

 21-MAY-1999 (MBT):
    Added USEWCS parameter.
.endhelp
