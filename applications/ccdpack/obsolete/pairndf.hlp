.help pairndf Starlink ccdpack
.nf
Aligns images graphically by drag and drop.

Usage:

   pairndf in outlist percentiles

Description:

   This routine accepts a list of images which may be aligned using
   simple offsets in their Current coordinate frames.
   By making use of a graphical user interface you
   can indicate how pairs of image are aligned with respect
   to each other, and mark image features to allow accurate
   alignments.  Once enough pairings have been specified to register
   all frames completely a global merger of all the positions
   for each image takes place. This results in the output of one list
   of uniquely labelled positions for each image. These position lists
   can then be used in a routine such as REGISTER to produce the
   actual transformation between the image.

   The graphical interface consists of two parts: a chooser which
   allows you to inspect pairs of image to see whether they are 
   able to be paired, and an aligner which allows you to move 
   a pair of images around so that they are registered, and to
   mark points in the overlapping region where the same centroidable 
   features exist in both images.

   Operation is as follows.  You must first use the chooser window
   to select a pair of images which have a region in common.
   Use the tabs at either side of the screen to pick the image to
   appear on that side.  You can use the "Show FITS" button to
   select one or more FITS headers to be displayed alongside
   each image if this will make it easier to identify which is which.
   You can use the "Display cutoff" menu to select the percentiles
   controlling the brightness of each pixel; alignment is easier if
   the same features are of a similar brightness in different images.
   The images are displayed resampled into their Current attached 
   coordinate system; you can only align them using this program if 
   a simple offset (translation) maps one onto another in these 
   coordinates (or very nearly does so).  If that is not the case,
   you will have to set their Current coordinate system 
   to a different value (see WCSEDIT) or align them using a 
   different method.  The whole of each image will be displayed in
   the chooser window, and you can resize it in the usual way to 
   make the images appear bigger or smaller.  Select a pair with 
   an overlapping region which you wish to align, and click the 
   "Use this pair" button.  The aligner window will then appear, 
   displaying the two images which you have selected.

   In the aligner window you can drag either of these images around
   the display region by holding down mouse button 1 (usually the 
   left one) as you move the mouse; the easiest way to align the pair 
   is to "pick up" one image by an identifiable feature and "drop" it
   on the same feature in the other image.  Where the images overlap
   their pixels will be averaged.  If they are not correctly 
   positioned, you can move them again.  Once you are happy that
   they are aligned about right, then click in the overlap region
   to mark features which appear in both images - these will be
   centroided to get an accurate alignment.  During this
   part you mark points by clicking with mouse button 1 (usually
   the left one) and you can remove them by clicking with button 3
   (usually the right one).  The window can be resized, the 
   magnification can be changed using the "Zoom" control, and the 
   display region scrolled using the scrollbars.  When you have aligned 
   the images and marked shared features, or if you decide that
   the pair cannot be satisfactorily registered, click the "Done" 
   button.  

   You will then be returned to the chooser window to select another
   pair and repeat the process.  After the first time however, 
   you will only be allowed to select a pair of images to align
   if at least one of them has already been aligned already.  Those
   which have already been done are marked with a `+' sign on their
   selection tabs.

   Once you have made enough pairings to register the whole set, the
   graphical windows will disappear and the program will complete
   the global matching up of positions without any further user 
   interaction.

Parameters

For information on individual parameters, select from the list below:

IN

IN = LITERAL (Read)
   A list of image names whose data are to be transformed. The image
   names should be separated by commas and may include wildcards.

LOGFILE

LOGFILE = FILENAME (Read)
   Name of the CCDPACK logfile.  If a null (!) value is given for
   this parameter then no logfile will be written, regardless of
   the value of the LOGTO parameter.

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "CCDPACK.LOG".
   [CCDPACK.LOG]

LOGTO

LOGTO = LITERAL (Read)
   Every CCDPACK application has the ability to log its output
   for future reference as well as for display on the terminal.
   This parameter controls this process, and may be set to any
   unique abbreviation of the following:

      -  TERMINAL  -- Send output to the terminal only

      -  LOGFILE   -- Send output to the logfile only (see the
                      LOGFILE parameter)

      -  BOTH      -- Send output to both the terminal and the
                      logfile

      -  NEITHER   -- Produce no output at all

   If the logging system has been initialised using CCDSETUP
   then the value specified there will be used. Otherwise, the
   default is "BOTH".
   [BOTH]

MARKSTYLE

MARKSTYLE = LITERAL (Read and Write)

    A string indicating how markers are initially to be plotted in
    the aligner widget.  It consists of a comma-separated list of
    "attribute=value" type strings.  The available attributes are:
       - colour     -- Colour of the marker in Xwindows format.
       - size       -- Approximate height of the marker in pixels.
       - thickness  -- Approximate thickness of lines in pixels.
       - shape      -- One of Plus, Cross, Circle, Square, Diamond.
       - showindex  -- 1 to show index numbers, 0 not to do so.

    This parameter only gives the initial marker type; it can be
    changed interactively while the program is running.
    If specifying this value on the command line, it is not
    necessary to give values for all the attributes; missing ones
    will be given sensible defaults.
    [""]

MAXCANV

MAXCANV = INTEGER (Read and Write)
   A value in pixels for the maximum initial X or Y dimension of 
   the region in which the image is displayed.  Note this is the      
   scrolled region, and may be much bigger than the sizes given
   by WINX and WINY, which limit the size of the window on the
   X display.  It can be overridden during operation by zooming
   in and out using the GUI controls, but it is intended to
   limit the size for the case when ZOOM is large (perhaps
   because the last image was quite small) and a large image
   is going to be displayed, which otherwise might lead to
   the program attempting to display an enormous viewing region.
   If set to zero, then no limit is in effect.
   [1280]

NAMELIST

NAMELIST = LITERAL (Read)
   The name of a file to contain the names of the output
   position lists. The names written to this file are those
   generated using the expression given to the OUTLIST parameter.
   This file may be used in an indirection expression to input
   all the position lists output from this routine into another
   routine, if the associating position lists with images option is
   not being used.
   [PAIRNDF.LIS]

OUTLIST

OUTLIST = LITERAL (Read)
   An expression which is either a list of names or expands to a
   list of names for the output position lists.

   These may be specified as list of comma separated names,
   using indirection if required, OR, as a single modification
   element (of the input names). The simplest modification
   element is the asterisk "*" which means call each of the
   output lists the same name as the corresponding input images.
   So,
      IN > *
      OUTLIST > *
   signifies that all the images in the current directory should be
   used and the output lists should have the same names.

   Other types of modification can also occur, such as,
      OUTLIST > *_objs.dat
   which means call the position lists the same as the input images
   but put "_objs.dat" after the names. Replacement of a specified
   string with another in the output file names can also be used,
      outlist > *|_debias|_images.dat|
   this replaces the string "_debias" with "_images.dat" in any
   of the output names.

   If wildcarded names for the input images are used then is it
   recommended that wildcards are also used for the position list
   names as the correspondence between these may be confusing.
   [*.DAT]

PERCENTILES

PERCENTILES( 2 ) = _DOUBLE (Read and Write)
   The default low and high percentiles of the data range to use
   when displaying the images; any pixels with a value lower than 
   the first value will have the same colour, and any with a
   value higher than the second will have the same colour.  This
   parameter gives the default value - the percentile settings
   can be set for each image individually from within the GUI
   to accomodate the situation where images have different 
   brightnesses.  Must be in the range 0 <= PERCENTILES( 1 ) 
   <= PERCENTILES( 2 ) <= 100.
   [2,98]

PREVX

PREVX = INTEGER (Read and Write)
   The initial width in pixels of the preview display for each image;
   two images will be displayed side by side at any one time at
   this size in the chooser window.  This can be effectively changed
   by resizing the entire chooser window in the normal way using
   the window manager while the program is running.
   [350]

PREVY

PREVY = INTEGER (Read and Write)
   The initial height in pixels of the preview display for each image;
   two images will be displayed side by side at any one time at
   this size in the chooser window.  This can be effectively changed
   by resizing the entire chooser window in the normal way using
   the window manager while the program is running.
   [350]

WINX

WINX = INTEGER (Read and Write)
   The initial width in pixels of the aligner window, which contains
   a space for dragging around a pair of images and associated
   controls.  If the region required for the images is larger 
   than the area allocated for display, it can be scrolled 
   around within the window.  The window can be resized in the 
   normal way using the window manager while the program is running.
   [800]

WINY

WINY = INTEGER (Read and Write)
   The initial height in pixels of the aligner window, which contains
   space for dragging around a pair of images and associated
   controls.  If the region required for the images is larger 
   than the area allocated for display, it can be scrolled 
   around within the window.  The window can be resized in the 
   normal way using the window manager while the program is running.
   [400]

ZOOM

ZOOM = DOUBLE (Read and Write)
   A factor giving the initial level to zoom in to the images
   displayed in the aligner window, that is the number of screen 
   pixels to use for one image pixel.  It will be rounded to one of 
   the values ... 3, 2, 1, 1/2, 1/3 ....  The zoom can be changed
   interactively from within the program.  The initial value
   may be limited by MAXCANV.
   [1]


Examples

pairndf * *.dat [1,99]
   This example shows the positional nature of the parameters.
   All the image in the current directory are presented for 
   alignment.  Their output position lists have the same name 
   as the image except that they have a file extension of .dat.
   The default image display cutoff is between the 1st and 99th
   percentile, which shows bright detail well.

pairndf in="data1,data2" outlist="d1-pos,d2-pos" zoom=2 maxcanv=0
        markstyle="shape=circle,size=8,thickness=1,colour=HotPink"
   Only the two images data1 and data2 will be aligned, and the 
   corresponding sets of positions will be written to the
   files d1-pos and d2-pos.  The images will initially be 
   displayed for alignment at a magnification of two screen 
   pixels to each data pixel, even if that results in a very 
   large display area.  During alignment, marked points will be
   shown as little pink circles.


Notes

- NDF extension items.

  On exit the CURRENT_LIST items in the CCDPACK extensions
  (.MORE.CCDPACK) of the input images are set to the names of the
  appropriate output lists. These items will be used by other
  CCDPACK position list processing routines to automatically
  access the lists.

- Output position list format.

  CCDPACK format - Position lists in CCDPACK are formatted files
  whose first three columns are interpreted as the following.

     - Column 1: an integer identifier

     - Column 2: the X position

     - Column 3: the Y position

  The column one value must be an integer and is used to identify
  positions which may have different locations but are to be
  considered as the same point. Comments may be included in the
  file using the characters # and !. Columns may be separated by
  the use of commas or spaces.

  In all cases, the coordinates in position lists are pixel coordinates.

Behaviour_of_parameters

   All parameters retain their current value as default. The
   "current" value is the value assigned on the last run of the
   application. If the application has not been run then the
   "intrinsic" defaults, as shown in the parameter help, apply.

   Retaining parameter values has the advantage of allowing you to
   define the default behaviour of the application.  The intrinsic
   default behaviour of the application may be restored by using the
   RESET keyword on the command line.

   Certain parameters (LOGTO and LOGFILE) have global values. These
   global values will always take precedence, except when an
   assignment is made on the command line.  Global values may be set
   and reset using the CCDSETUP and CCDCLEAR commands.

   Some of the parameters (MARKSTYLE, MAXCANV, PERCENTILES, PREVX, PREVY,
   WINX, WINY)  give initial values for quantities which can be modified 
   while the program is running.  Although these may be specified on
   the command line, it is normally easier to start the program up and
   modify them using the graphical user interface.  If the program
   exits normally, their values at the end of the run will be used
   as defaults next time the program starts up.

Authors

PDRAPER: Peter Draper (STARLINK - Durham University)
MBT: Mark Taylor (STARLINK)

Implementation_Status

   - Supports Bad pixel values and all non-complex data types.
.endhelp
