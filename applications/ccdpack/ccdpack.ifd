package ccdpack {
#+
#  Name:
#     ccdpack.ifd
#
#  Purpose:
#     Specify interface files and package structure for CCDPACK.
#
#  Type of module:
#     Full IFD file.
#
#  Invocation:
#     ifd2star ccdpack
#     ifd2iraf ccdpack
#
#  Description:
#     This file controls the generation of all the interface files for
#     the CCDPACK package (.ifl files for the ADAM environment and .par 
#     files for interoperability with IRAF).  By processing it using
#     IFD commands (see SSN/68) all of the following files are produced
#     without further intervention:
#
#        ifd2star:
#           task.ifl (for each task)
#           monolith.ifl (for each monolith)
#           ccdpack.csh
#           ccdpack.icl
#
#        ifd2iraf:
#           task.par (for each task)
#           monolith.tcl (for each monolith)
#           ccdpack.par
#           ccdpack.cl
#
#     The task and monolith files are generated by including individual
#     .ifd files (using the tcl core command 'source') to make source 
#     control easier.  The ccdpack.{csh,icl,cl} files are generated to
#     some extent automatically, but additional sections are included
#     using the csh, icl and cl commands in this file.
#
#  Notes:
#     The files generated by processing this file (as listed above) are 
#     to be included without modification in the built CCDPACK package
#     with the following exceptions:
#
#        ccdpack.par:
#           is not required in the built CCDPACK package.
#
#        monolith.tcl:
#           The DynParList associative array elements created by these
#           files should be overridden (the elements should be deleted)
#           if the environment variable CCDPACK_GLOBALS does not equal
#           "yes" at run time.  This can be achieved by appending the
#           following to each monolith.tcl file:
#              global env
#              if { ! info exists $env(CCDPACK_GLOBALS) \
#                 || $env(CCDPACK_GLOBALS) != yes } { unset DynParList }
#
#  This file is tcl source code.
#
#  Authors:
#     MBT: Mark Taylor (STARLINK)
#     {enter_new_authors_here}
#
#  History:
#     7-MAY-1999 (MBT):
#        Original version.  Includes pieces of code from the previously
#        existing files ccdpack.csh, ccdpack.icl, ccdpack.cl.
#     {enter_changes_here}
#-

   version PKG_VERS
   prefix ccd

   executable ccdpack_red {
      source makebias.ifd
      source debias.ifd
      source makecal.ifd
      source calcor.ifd
      source makeflat.ifd
      source flatcor.ifd
   }

   executable ccdpack_reg {
      source findcent.ifd
      source idicurs.ifd
      source findobj.ifd
      source register.ifd
      source tranlist.ifd
      source plotlist.ifd
      source findoff.ifd
      source pairndf.ifd
      source ccdedit.ifd
      source makemos.ifd
      source tranndf.ifd
      source astimp.ifd
      source astexp.ifd
      source wcsreg.ifd
   }

   executable ccdpack_res {
      source ccdsetup.ifd
      source ccdclear.ifd
      source ccdnote.ifd
      source ccdshow.ifd
      source ccdndfac.ifd
      source ccdgenerate.ifd
      source picinfo.ifd
      source import.ifd
      source present.ifd
      source schedule.ifd
      source ccdimp.ifd
      source ccdexp.ifd
   }

   executable ccdpack_nag {
      source nagmakemos.ifd
   }

   executable ccdpack_scr {
      source reduce.ifd
      source ccdalign.ifd
      source xreduce.ifd
   }

   adam: { 
      executable ccdhelp {
         source ccdhelp.ifd
      }
   }

#  Display informational message.
  display { 
  CCDPACK commands are now available -- (Version PKG_VERS)
  }

#  Specific additions for the package.csh file.
   csh {
#  Set up aliases for scripts.
      alias ccdexercise $CCDPACK_DIR/ccdexercise
      alias ccd_ccdexercise $CCDPACK_DIR/ccdexercise

      alias ccdfork $CCDPACK_DIR/ccdfork
      alias ccd_ccdfork $CCDPACK_DIR/ccdfork

      alias wcsexercise $CCDPACK_DIR/wcsexercise
      alias ccd_wcsexercise $CCDPACK_DIR/wcsexercise

      alias ccdwww $CCDPACK_DIR/ccdwww
      alias ccd_ccdwww $CCDPACK_DIR/ccdwww

#  Setup conversion of header information for when using foreign data
#  access.
      if ( $?NDF_XTN ) then
         switch ($NDF_XTN)
            case *CCDPACK*:
               breaksw
            default:
               setenv NDF_XTN ${NDF_XTN},CCDPACK
         endsw
      else
         setenv NDF_XTN CCDPACK
      endif
      setenv NDF_IMP_CCDPACK '$CCDPACK_DIR/ccdimp.csh ^ndf'
      setenv NDF_EXP_CCDPACK '$CCDPACK_DIR/ccdexp.csh ^ndf'

#  For IRAF data we really do need to keep hold of the bad pixels
#  so make sure of this, unless the NDF_TO_IRAF_PARS variable
#  is already set. In this case we assume that the user knows what
#  they are doing.
      if ( ! $?NDF_TO_IRAF_PARS ) then
         setenv NDF_TO_IRAF_PARS 'FILLBAD=\!'
      endif

#  Explain how to get help.
      echo "  For help use the commands ccdhelp or ccdwww"
      echo " "
   }

#  Specific additions for the package.icl file.
   icl {

\{  Add definitions for scripts.
      defproc   ccdexercise $CCDPACK_DIR/ccdexercise
      defproc   wcsexercise $CCDPACK_DIR/wcsexercise
      defproc   ccdfork     $CCDPACK_DIR/ccdfork
      defhelp   ccdpack     $CCDPACK_HELP 0
      defstring ccdhelp     help ccdpack
      defstring ccdwww      !$CCDPACK_DIR/ccdwww

\{  Setup conversion of header information for when using foreign data
\{  access.
      hidden proc ccdpack_xtn_set
         ndf_xtn = getenv("NDF_XTN")
         xtn_index = index( ndf_xtn, "CCDPACK" )
         if xtn_index=0
            if ndf_xtn = ""
               setenv NDF_XTN "CCDPACK"
            else
               setenv NDF_XTN (ndf_xtn)",CCDPACK"
            end if
         end if
         setenv NDF_IMP_CCDPACK "$CCDPACK_DIR/ccdimp ^ndf"
         setenv NDF_EXP_CCDPACK "$CCDPACK_DIR/ccdexp ^ndf"
      end proc
      ccdpack_xtn_set

\{  For IRAF data we really do need to keep hold of the bad pixels
\{  so make sure of this, unless the NDF_TO_IRAF_PARS variable
\{  is already set. In this case we assume that the user knows what
\{  they are doing.
      hidden proc ccdpack_iraf_pars_set
         pars = getenv("NDF_TO_IRAF_PARS")
         if pars = ""
            setenv NDF_TO_IRAF_PARS "FILLBAD=!"
         end if
      end proc
      ccdpack_iraf_pars_set

\{  Explain how to get help.
      print "   For help use the commands help ccdpack or ccdwww"
      print " "
   }

#  Specific additions for the IRAF .cl file.
   cl {
#  IRAF specific tasks
      task use_globals = "ccdpack$use_globals.cl"

#  IRAF environment variables
      set CCDPACK_GLOBALS="yes"

#  Exercise script.
      task ccdexercise = ccdpack$ccdexercise.cl
   }

}
# $Id$
