# Perl script to test Moggy.pm

test -n "$PERLBIN" || exit 1

# This Perl script writes its output to a temporary file,
# which we cat to stdout at the end.  A more obvious thing to do is to 
# simply have the script writing to stdout, but this fails in a
# bizarre fashion: the script below works OK when stdout is a
# terminal, but stdout is redirected, the output from the first query
# (down to the definition of $puss) is _duplicated_ on stdout. 
# I don't understand this one tiny bit.

AUTOASTROM_DIR=`cd ../..; pwd`;	export AUTOASTROM_DIR
TESTDIR=`pwd`;				export TESTDIR
# Name the report file t<number>*.tmp, so it's deleted by the driver at the end
REPORTFILE=t6.report.tmp;		export REPORTFILE


$PERLBIN -w <<'EOD'
use lib '..';
use Moggy;

$TestDir = $ENV{TESTDIR};
$ReportFile = $ENV{REPORTFILE};
print STDERR "TestDir=$TestDir  ReportFile=$ReportFile\n";

# Find the moggy program.  Searching for it like this gives us a
# little more flexibility in installation locations (and means that
# the system will work for testing in its build directory).
my $moggylocation = undef;
foreach $loc ("$ENV{AUTOASTROM_DIR}/moggy", 
	      "$ENV{AUTOASTROM_DIR}/moggy/moggy") {
    print STDERR "Searching for moggy in $loc\n";
    if (-f $loc && -x $loc) {
	$moggylocation = $loc;
	last;
    }
}
defined ($moggylocation) || die "t6: Can't locate moggy program\n";
print STDERR "moggylocation=$moggylocation\n";


open (REPORT, ">$ReportFile") || die "Can't open file $ReportFile to write";


print REPORT "Test 1: cat\n";
$cat = Moggy->new('dummy@home',
		  "file://$TestDir/local.config",
		  $moggylocation);
$cat->radius("10");
$cat->maxrow('10');
$cat->point(261.789584, '74:20:8');
# $cat->point('17:27:9.5',     ' 74 : 20 : 8');

unless ($cat->status_ok()) {
    print STDERR "(cat) Calling new and setting parameters failed\n";
    print STDERR "    Failed command: " . $cat->failed_command() . "\n";
    print STDERR "    Message: " . $cat->current_statusmessage() . "\n";
    exit 1;
}

print REPORT "Moggy catname: ", $cat->catname(), "\n";
print REPORT "  Point      : ";
foreach $num (@{$cat->point()}) {
    print REPORT " <$num> ";
}
print REPORT "\n";
print REPORT "  Searchtype : ", $cat->searchtype(), "\n";
print REPORT "  Radius     : ", $cat->radius(), "\n";
print REPORT "  MaxRows    : ", $cat->maxrow(), "\n";
print REPORT "  Status     : ", ($cat->status_ok() ? "OK" : "BAD"), "\n";

$cat->query() || die "Query to dummy\@home failed";

$colref = $cat->resultcolumns();
$resref = $cat->result();

$ncols = $cat->resultncols();
$nrows = $cat->resultnrows();
print REPORT "  $nrows x $ncols:";
for ($i = 0; $i<=$#{$colref}; $i++) {
    print REPORT " <${$colref}[$i]>";
}
print REPORT "   column ra:", $cat->resulthascolumn('ra');
print REPORT "   Id:", $cat->resulthascolumn('id');
print REPORT "  /d/:", $cat->resulthascolumn('/d/');
print REPORT "  /D./:", $cat->resulthascolumn('/d./');
print REPORT "  xxx:", $cat->resulthascolumn('xxx');
print REPORT "\n";
for ($i = 0; $i<$nrows; $i++) {
    for ($j=0; $j<$ncols; $j++) {
	print REPORT "    ", $resref->[$i]->[$j];
    }
    print REPORT "\n";
}


print REPORT "\n\n\nTest 2: puss\n";
$puss = $cat->new('usno@eso', undef, $moggylocation);
#$puss = Moggy->new('usno@eso');
#$puss = Moggy->new('dummy@home',
#  'file:///home/norman/s/src/astrom/w/autoastrom/moggy/test/local.config');
$puss->point(' 17 : 27:9.5 ','     74:20:8');
$puss->otherpoint('17:37:9.5', "74: 20 : 8");
$puss->searchtype('box');
$puss->maxrow('20');
$puss->columns('ALL');

unless ($puss->status_ok()) {
    print STDERR "(puss) Calling new and setting parameters failed\n";
    print STDERR "    Failed command: " . $puss->failed_command() . "\n";
    print STDERR "    Message: " . $puss->current_statusmessage() . "\n";
    exit 1;
}

print REPORT "Moggy catname: ", $puss->catname(), "\n";
print REPORT "  Point      : ";
foreach $num (@{$puss->point()}) {
    print REPORT " <$num> ";
}
print REPORT "\n";
print REPORT "  OtherPoint : ";
foreach $num (@{$puss->otherpoint()}) {
    print REPORT " <$num> ";
}
print REPORT "\n";
print REPORT "  Searchtype : ", $puss->searchtype(), "\n";
print REPORT "  MaxRows    : ", $puss->maxrow(), "\n";
print REPORT "  Status     : ", ($puss->status_ok() ? "OK" : "BAD"), "\n";

$puss->query() || die "Query to usno\@eso failed";

$colref = $puss->resultcolumns();
$resref = $puss->result();

$ncols = $puss->resultncols();
$nrows = $puss->resultnrows();
print REPORT "  $nrows x $ncols:";
for ($i = 0; $i<=$#{$colref}; $i++) {
    print REPORT " <${$colref}[$i]>";
}
print REPORT "\n";
for ($i = 0; $i<$nrows; $i++) {
    for ($j=0; $j<$ncols; $j++) {
	print REPORT "    ", $resref->[$i]->[$j];
    }
    print REPORT "\n";
}



#  The AST and FITS-WCS information in the two following tests was extracted
#  from the same NDF file (locally /scratch/goedel/norman/playpen/r106280).

print REPORT "\n\n\nTest 3: felix\n";
$felix = Moggy->new ('dummy@home',
		     "file://$TestDir/local.config",
		     $moggylocation);
#$felix->debug("asthandler moggy");
@felixframeset = (
    "Begin FrameSet",
    "Nframe = 4",
    "Currnt = 4",
    "Nnode = 5",
    "Nod1 = 3",
    "Nod2 = 4",
    "Nod3 = 5",
    "Nod4 = 2",
    "Lnk2 = 1",
    "Lnk3 = 1",
    "Lnk4 = 1",
    "Lnk5 = 1",
    "Frm1 =",
    "Begin Frame",
    "Title = \"Data grid indices; first pixel at (1,1)\"",
    "Naxes = 2",
    "Domain = \"GRID\"",
    "Ax1 =",
    "Begin Axis",
    "Label = \"Data grid index 1\"",
    "Symbol = \"g1\"",
    "Unit = \"pixel\"",
    "Format = \"%3.1f\"",
    "End Axis",
    "Ax2 =",
    "Begin Axis",
    "Label = \"Data grid index 2\"",
    "Symbol = \"g2\"",
    "Unit = \"pixel\"",
    "Format = \"%3.1f\"",
    "End Axis",
    "End Frame",
    "Frm2 =",
    "Begin Frame",
    "Title = \"Pixel coordinates; first pixel at (0.5,0.5)\"",
    "Naxes = 2",
    "Domain = \"PIXEL\"",
    "Ax1 =",
    "Begin Axis",
    "Label = \"Pixel coordinate 1\"",
    "Symbol = \"p1\"",
    "Unit = \"pixel\"",
    "Format = \"%3.1f\"",
    "End Axis",
    "Ax2 =",
    "Begin Axis",
    "Label = \"Pixel coordinate 2\"",
    "Symbol = \"p2\"",
    "Unit = \"pixel\"",
    "Format = \"%3.1f\"",
    "End Axis",
    "End Frame",
    "Frm3 =",
    "Begin Frame",
    "Title = \"Axis coordinates; first pixel at (0.5,0.5)\"",
    "Naxes = 2",
    "Domain = \"AXIS\"",
    "Ax1 =",
    "Begin Axis",
    "Label = \"Axis 1\"",
    "Symbol = \"a1\"",
    "End Axis",
    "Ax2 =",
    "Begin Axis",
    "Label = \"Axis 2\"",
    "Symbol = \"a2\"",
    "End Axis",
    "End Frame",
    "Frm4 =",
    "Begin SkyFrame",
    "Naxes = 2",
    "Ax1 =",
    "Begin SkyAxis",
    "End SkyAxis",
    "Ax2 =",
    "Begin SkyAxis",
    "End SkyAxis",
    "IsA Frame",
    "System = \"FK5\"",
    "Proj = \"gnomonic\"",
    "Epoch = 1998.4684933755",
    "Eqnox = 2000",
    "End SkyFrame",
    "Map2 =",
    "Begin CmpMap",
    "Nin = 2",
    "IsA Mapping",
    "MapA =",
    "Begin WinMap",
    "Nin = 2",
    "Invert = 0",
    "IsA Mapping",
    "Sft1 = -1024.22102864457",
    "Sft2 = -2047.18474689165",
    "End WinMap",
    "MapB =",
    "Begin CmpMap",
    "Nin = 2",
    "IsA Mapping",
    "MapA =",
    "Begin MatrixMap",
    "Nin = 2",
    "Invert = 0",
    "IsA Mapping",
    "M0 = -2.13692146915945e-08",
    "M1 = -1.61602841387441e-06",
    "M2 = -1.62596215645097e-06",
    "M3 = 3.90485948055518e-08",
    "Form = \"Full\"",
    "End MatrixMap",
    "MapB =",
    "Begin CmpMap",
    "Nin = 2",
    "IsA Mapping",
    "InvA = 1",
    "MapA =",
    "Begin WcsMap",
    "Nin = 2",
    "Invert = 1",
    "IsA Mapping",
    "Type = \"TAN\"",
    "End WcsMap",
    "MapB =",
    "Begin CmpMap",
    "Nin = 2",
    "IsA Mapping",
    "InvA = 1",
    "MapA =",
    "Begin SphMap",
    "Nin = 3",
    "Nout = 2",
    "Invert = 0",
    "IsA Mapping",
    "UntRd = 1",
    "End SphMap",
    "MapB =",
    "Begin CmpMap",
    "Nin = 3",
    "Nout = 2",
    "IsA Mapping",
    "MapA =",
    "Begin MatrixMap",
    "Nin = 3",
    "Invert = 0",
    "IsA Mapping",
    "M0 = -0.137497914785465",
    "M1 = 0.989751322387744",
    "M2 = -0.0385570131281203",
    "M3 = -0.952991189702839",
    "M4 = -0.142801680073145",
    "M5 = -0.267236734969305",
    "M6 = -0.270003918079751",
    "M7 = 0",
    "M8 = 0.962859223470172",
    "Form = \"Full\"",
    "End MatrixMap",
    "MapB =",
    "Begin SphMap",
    "Nin = 3",
    "Nout = 2",
    "Invert = 0",
    "IsA Mapping",
    "UntRd = 1",
    "End SphMap",
    "End CmpMap",
    "End CmpMap",
    "End CmpMap",
    "End CmpMap",
    "End CmpMap",
    "Map3 =",
    "Begin UnitMap",
    "Nin = 2",
    "IsA Mapping",
    "End UnitMap",
    "Map4 =",
    "Begin WinMap",
    "Nin = 2",
    "IsA Mapping",
    "Sft1 = -0.5",
    "Sft2 = -0.5",
    "End WinMap",
    "Map5 =",
    "Begin WinMap",
    "Nin = 2",
    "IsA Mapping",
    "Sft1 = -0.5",
    "Sft2 = -0.5",
    "End WinMap",
    "End FrameSet"
);
#$felix->astinformation ('pixel', @felixframeset);
$felix->astinformation ('grid', @felixframeset);
print STDERR "astinformation: ", $felix->status_ok(), "\n";
$felix->searchtype('box');
$felix->maxrow(10);
$felix->point(1,1);
$felix->otherpoint(2048,4097);

unless ($felix->status_ok()) {
    print STDERR "(felix) Calling new and setting parameters failed\n";
    print STDERR "    Failed command: " . $felix->failed_command() . "\n";
    print STDERR "    Message: " . $felix->current_statusmessage() . "\n";
    exit 1;
}

print REPORT "Moggy catname: ", $felix->catname(), "\n";
print REPORT "  Point      : ";
foreach $num (@{$felix->point()}) {
    print REPORT " <$num> ";
}
print REPORT "\n";
print REPORT "  Otherpoint : ";
foreach $num (@{$felix->otherpoint()}) {
    print REPORT " <$num> ";
}
print REPORT "\n";
print REPORT "  AST domain : ", $felix->astdomain(), "\n";
print REPORT "  Searchtype : ", $felix->searchtype(), "\n";
print REPORT "  MaxRows    : ", $felix->maxrow(), "\n";
print REPORT "  Status     : ", ($felix->status_ok() ? "OK" : "BAD"), "\n";

print REPORT "  Conversions:\n";
$convref = $felix->astconvert(1274.51, 2129.66, 1);
printf REPORT "    (%s, %s) --> (%f, %f)sky\n",
	1274.51, 2129.66, $convref->[0], $convref->[1];
$convref = $felix->astconvert(261.713, 74.4153, 0);
printf REPORT "    (%s, %s)sky --> (%f, %f)\n",
	261.713, 74.4153, $convref->[0], $convref->[1];
$convref = $felix->astconvert(261.712, 74.4152, 0);
printf REPORT "    (%s, %s)sky --> (%f, %f)\n",
	261.712, 74.4152, $convref->[0], $convref->[1];

$felix->query() || die "Query to dummy\@home failed";

$colref = $felix->resultcolumns();
$resref = $felix->result();

$ncols = $felix->resultncols();
$nrows = $felix->resultnrows();
print REPORT "  $nrows x $ncols:";
for ($i = 0; $i<=$#{$colref}; $i++) {
    print REPORT " <${$colref}[$i]>";
}
print REPORT "\n";
for ($i = 0; $i<$nrows; $i++) {
    for ($j=0; $j<$ncols; $j++) {
	print REPORT "    ", $resref->[$i]->[$j];
    }
    print REPORT "\n";
}




print REPORT "\n\n\nTest 4: tiddles\n";
$tiddles = Moggy->new ('dummy@home',
		     "file://$TestDir/local.config",
		     $moggylocation);
$tiddles->debug("asthandler");
@tiddlesframeset = (
  "SIMPLE  =                    T",
  "BITPIX  =                  -32",
  "NAXIS   =                    2",
  "NAXIS1  =                 2048",
  "NAXIS2  =                 4097",
  "BLANK   = '-0.34028234663852886E+39'",
  "CRVAL1  =               261.79 / Value at ref. pixel on axis 1",
  "CDELT1  =                    1 / Co-ordinate increment along axis 1",
  "CRPIX1  =     1024.22102864457 / Reference pixel on axis 1",
  "CRVAL2  =              74.3355 / Value at ref. pixel on axis 2",
  "CDELT2  =                    1 / Co-ordinate increment along axis 2",
  "CRPIX2  =     2047.18474689165 / Reference pixel on axis 2",
  "OBJECT  = 'r220a V 900s      ' / Title of the dataset",
  "BUNIT   = 'ADU               ' / Units of the primary array",
  "ORIGIN  = 'Starlink Project, U.K.'/ Origin of this FITS file",
  "BSCALE  =                    1 / True_value = BSCALE * FITS_value + BZERO",
  "BZERO   =                    0 / True_value = BSCALE * FITS_value + BZERO",
  "HDUCLAS1= 'NDF               ' / Starlink NDF (hierarchical n-dim format)",
  "HDUCLAS2= 'DATA              ' / Array component subclass",
  "RUN     =               106280 / Run number",
  "SYSVER  = 's6-1              ' / Version of observing system",
  "OBSERVAT= 'LAPALMA           ' / Name of observatory (IRAF style)",
  "OBSTYPE = 'TARGET            ' / Type of observation, eg. ARC",
  "IMAGETYP= 'TARGET            ' / Type of observation, eg. ARC",
  "CTYPE1  = 'RA---TAN'           / Quantity represented by axis 1",
  "CTYPE2  = 'DEC--TAN'           / Quantity represented by axis 2",
  "CD1_1   =  -1.22436581333732E-6/ Transformation matrix element",
  "CD2_2   =  2.23731967827459E-6 / Transformation matrix element",
  "LATITUDE=               28.762 / Telescope latitude  (degrees), +28:45:43.2",
  "LONGITUD=            17.877639 / Telescope longitude (degrees), +17:52:39.5",
  "HEIGHT  =                 2348 / [m] Height above sea level.",
  "SLATEL  = 'LPO2.5  '           / Telescope name known to SLALIB",
  "TELESCOP= 'INT     '           / 2.5m Isaac Newton Telescope",
  "TELSTAT = 'GUIDING '           / Telescope status: TRACKING or GUIDING",
  "normally.",
  "RA      = '17:27:10.94'        / RA  (261.7955934398498200 degrees)",
  "DEC     = '74:31:58.00'        / DEC ( 74.5327767760827700 degrees)",
  "EQUINOX =               2000.0 / Epoch of reference equinox",
  "RADECSYS= 'FK5     '           / Reference frame for RA/DEC values",
  "XAPNOM  =        -0.0697222242 / nominal aperture in x (-251.00 arcsec)",
  "YAPNOM  =         0.0905555552 / nominal aperture in y (326.00 arcsec)",
  "XAPOFF  =        -0.0697222242 / total aperture offset in x (-251.00 arcsec)",
  "YAPOFF  =         0.0905555552 / total aperture offset in y (326.00 arcsec)",
  "MJD-OBS =        50985.1172054 / Modified Julian Date of midtime of observation",
  "JD      =      2450985.6172054 / Julian Date of midtime of observation",
  "STSTART = ' 19:26:08.7'        / Local sidereal time at start of observation",
  "ST      = '19:26:08.70'        / Local sidereal time at start of observation",
  "AZIMUTH =           349.123111 / Mean azimuth of observation (degrees)",
  "ZD      =            48.512724 / Mean zenith-distance of observation (degrees)",
  "FSTATION= 'PRIME   '           / Focal station of observation",
  "PLATESCA=             6.856013 / [d/m] Platescale ( 24.68arcsec/mm)",
  "TELFOCUS=             0.045998 / Telescope focus (metres)",
  "ROTTRACK=                    T / Rotator always tracks sky on equatorial mount",
  "ROTSKYPA=           180.000005 / Turntable position angle (degrees)",
  "PARANGLE=           142.136558 / Parallactic angle at observation midpoint",
  "VIGNETTE=                    F / Can we see out?",
  "DOMEAZ  =           352.927786 / Mean dome azimuth during observation",
  "AIRMASS =             1.506845 / Effective mean airmass",
  "TEMPTUBE=            10.551544 / Truss Temperature (degrees Celsius)",
  "CAT-NAME= 'R220A   '           / Target input-catalogue name",
  "CAT-RA  = ' 17:27:10.940'      / Target Right Ascension",
  "CAT-DEC = '+74:31:58.00'       / Target Declination",
  "CAT-EQUI= 'J2000.00'           / Equinox of target coordinates",
  "CAT-EPOC=               2000.0 / Target epoch of proper motions",
  "PM-RA   =                  0.0 / Target proper-motion RA (sec time/year)",
  "PM-DEC  =                  0.0 / Target proper-motion (sec arc/year)",
  "PARALLAX=                  0.0 / Target Parallax (arcsec)",
  "RADVEL  =                  0.0 / Target radial velocity (km/s)",
  "RATRACK =                  0.0 / Differential-tracking rate RA (arcsec/sec)",
  "DECTRACK=                  0.0 / Differential-tracking rate Dec (arcsec/sec)",
  "INSTRUME= 'WFC               ' / INT wide-field camera is in use.",
  "WFFPOS  =                    2 / Position-number of deployed filter",
  "WFFBAND = 'V       '           / Waveband of filter",
  "WFFPSYS = 'Unknown           ' / Photometric system of filter",
  "WFFID   = 'Unknown           ' / Unique identifier of filter",
  "SECPPIX =                0.333 / Arcseconds per pixel",
  "UTSTART = '02:41:16.7        ' / UTC of start of observation",
  "ELAPSED =               899.02 / Length of observation including pauses",
  "DARKTIME=               899.02 / Length of observation including pauses",
  "EXPOSED =               899.02 / Length of observation excluding pauses",
  "EXPTIME =               899.02 / Length of observation excluding pauses",
  "DATE-OBS= '1998-06-21        ' / UTC date start of observation",
  "CD1_2   =  -9.25916076882243E-5/ Transformation matrix element",
  "CD2_1   =  -9.31607692126308E-5/ Transformation matrix element",
  "RADESYS = 'FK5     '           / Reference frame for RA/DEC values",
  "DETECTOR= 'MOS1              ' / Name of the detector",
  "PREFLASH=                  0.0 / Length of Preflash in seconds",
  "GAIN    =                  2.9 / Electrons per ADU",
  "READNOIS=                 12.0 / Readout noise in electrons per pix",
  "CCDSPEED= 'NONASTRO          ' / Readout speed of the CCD",
  "CCDNCHIP=                    1 / Number of CCDs in this head",
  "CCDCHIP =                    1 / Head number of this CCD",
  "CCDTYPE = 'EEV42             ' / Type of CCD used in this detector",
  "CCDXSIZE=                 2148 / X Size in pixels of digitised frame",
  "CCDYSIZE=                 4128 / Y Size in pixels of digitised frame",
  "CCDXIMSI=                 2048 / X Size of useful imaging area",
  "CCDYIMSI=                 4100 / Y Size of useful imaging area",
  "CCDXIMST=                   50 / X Start pixel of useful imaging area",
  "CCDYIMST=                    0 / Y Start pixel of useful imaging area",
  "CCDWMODE=                    F / True is windows are enabled",
  "CCDWXO1 =                    0 / Offset of window 1 in X",
  "CCDWYO1 =                    0 / Offset of window 1 in Y",
  "CCDWXS1 =                    0 / Size of window 1 in X",
  "CCDWYS1 =                    0 / Size of window 1 in Y",
  "CCDWXO2 =                    0 / Offset of window 2 in X",
  "CCDWYO2 =                    0 / Offset of window 2 in Y",
  "CCDWXS2 =                    0 / Size of window 2 in X",
  "CCDWYS2 =                    0 / Size of window 2 in Y",
  "CCDWXO3 =                    0 / Offset of window 3 in X",
  "CCDWYO3 =                    0 / Offset of window 3 in Y",
  "CCDWXS3 =                    0 / Size of window 3 in X",
  "CCDWYS3 =                    0 / Size of window 3 in Y",
  "CCDWXO4 =                    0 / Offset of window 4 in X",
  "CCDWYO4 =                    0 / Offset of window 4 in Y",
  "CCDWXS4 =                    0 / Size of window 4 in X",
  "CCDWYS4 =                    0 / Size of window 4 in Y",
  "CCDXPIXE=              1.35E-5 / Size in meters of the pixels, in X",
  "CCDYPIXE=              1.35E-5 / Size in meters of the pixels, in Y",
  "CCDXBIN =                    1 / Binning factor, in X",
  "CCDYBIN =                    1 / Binning factor, in Y",
  "CCDSTEMP=                  153 / Required temperature of CCD, in Kevlin",
  "CCDATEMP=                  154 / Actual temperature of CCD, in Kevlin",
  "CHIPNAME= 'A5506-4           ' / Name of CCD chip",
  "DASCHAN =                    1 / DAS channel",
  "WINSEC1 = '[0:0,0:0]         ' / Readout window 1",
  "WINSEC2 = '[0:0,0:0]         ' / Readout window 2",
  "WINSEC3 = '[0:0,0:0]         ' / Readout window 3",
  "WINSEC4 = '[0:0,0:0]         ' / Readout window 4",
  "HISTORY This is the end of the header written by the ING observing-system.",
  "LTM1_1  =                  1.0",
  "LTM2_2  =                  1.0",
  "TRIM    = 'Dec  7 16:29 Trim data section is [51:2098,2:4098]'",
  "OVERSCAN= 'Dec  7 16:29 Overscan section is [5:45,20:4090] with mean=1095.219'",
  "ZEROCOR = 'Dec  7 16:29 Zero level correction image is ../bias.1.imh'",
  "CCDSEC  = '[51:2098,2:4098]'",
  "LTV1    =                -50.0",
  "LTV2    =                 -1.0",
  "CCDMEAN =             1470.956",
  "CCDMEANT=            629054950",
  "CCDPROC = 'Dec  7 17:29 CCD processing done'",
  "FLATCOR = 'Dec  7 17:28 Flat field image is flat.v1.imh with scale=1635.817'",
  "HISTORY '1999-09-07T17:29:57' / Date FITS file was generated",
  "HISTORY '17:05:06 (06/09/1999)' / Time of last modification",
  "HISTORY 'ING La Palma      ' / Name of observatory",
  "HISTORY New copy of r106280",
  "HISTORY New copy of r106280",
  "HISTORY Image converted using STARLINK utility IRAF2NDF from the IRAF image",
  "HISTORY r106280.imh on Mon Feb  7 15:05:59 2000",
  "END",
);
$tiddles->astinformation ('grid', @tiddlesframeset);
print STDERR "astinformation: ", $tiddles->status_ok(), "\n";
$tiddles->searchtype('box');
$tiddles->maxrow(10);
$tiddles->point(1,1);
$tiddles->otherpoint(2048,4097);

unless ($tiddles->status_ok()) {
    print STDERR "(tiddles) Calling new and setting parameters failed\n";
    print STDERR "    Failed command: " . $tiddles->failed_command() . "\n";
    print STDERR "    Message: " . $tiddles->current_statusmessage() . "\n";
    exit 1;
}

print REPORT "Moggy catname: ", $tiddles->catname(), "\n";
print REPORT "  Point      : ";
foreach $num (@{$tiddles->point()}) {
    print REPORT " <$num> ";
}
print REPORT "\n";
print REPORT "  Otherpoint : ";
foreach $num (@{$tiddles->otherpoint()}) {
    print REPORT " <$num> ";
}
print REPORT "\n";
print REPORT "  AST domain : ", $tiddles->astdomain(), "\n";
print REPORT "  Searchtype : ", $tiddles->searchtype(), "\n";
print REPORT "  MaxRows    : ", $tiddles->maxrow(), "\n";
print REPORT "  Status     : ", ($tiddles->status_ok() ? "OK" : "BAD"), "\n";

print REPORT "  Conversions:\n";
$convref = $tiddles->astconvert(1274.51, 2129.66, 1);
printf REPORT "    (%s, %s) --> (%f, %f)sky\n",
	1274.51, 2129.66, $convref->[0], $convref->[1];
$convref = $tiddles->astconvert(261.713, 74.4153, 0);
printf REPORT "    (%s, %s)sky --> (%f, %f)\n",
	261.713, 74.4153, $convref->[0], $convref->[1];
$convref = $tiddles->astconvert(261.712, 74.4152, 0);
printf REPORT "    (%s, %s)sky --> (%f, %f)\n",
	261.712, 74.4152, $convref->[0], $convref->[1];

$tiddles->query() || die "Query to dummy\@home failed";

$colref = $tiddles->resultcolumns();
$resref = $tiddles->result();

$ncols = $tiddles->resultncols();
$nrows = $tiddles->resultnrows();
print REPORT "  $nrows x $ncols:";
for ($i = 0; $i<=$#{$colref}; $i++) {
    print REPORT " <${$colref}[$i]>";
}
print REPORT "\n";
for ($i = 0; $i<$nrows; $i++) {
    for ($j=0; $j<$ncols; $j++) {
	print REPORT "    ", $resref->[$i]->[$j];
    }
    print REPORT "\n";
}


exit 0;
EOD

perlrval=$?

test -f $REPORTFILE && cat $REPORTFILE

exit $perlrval;
