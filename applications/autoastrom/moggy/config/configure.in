dnl   Configure script for moggy
dnl   Copyright 2001 Council for the Central Laboratory of
dnl                  the Research Councils. 
dnl   See file LICENCE for conditions.
dnl
dnl   $Id$


AC_REVISION($Revision$)dnl


AC_INIT(moggy.C)

dnl   Use a config file (the list of settings is getting too long)
AC_CONFIG_HEADER(config.h)

dnl   Say where the install-sh, config.guess and config.sub scripts are
AC_CONFIG_AUX_DIR(config)

dnl   Checks for programs.
AC_PROG_CXX

dnl   use C++ to compile test programs
AC_LANG_CPLUSPLUS

dnl   Check for a Perl binary, looking in the likely Starlink area first
AC_PATH_PROG(PERL, perl, perl, /star/bin:$PATH)

dnl   Similarly, check for uncompress and gzip programs
AC_PATH_PROG(PROGUNCOMPRESS, uncompress)
AC_PATH_PROG(PROGGZIP, gzip)

dnl   Check for other tools
AC_PROG_RANLIB

dnl   Check if we've got sstream.  If not, we'll assume we have the older
dnl   strstream
AC_CHECK_HEADERS(sstream)

dnl   Do we have a map implementation?
AC_CHECK_HEADERS(map)

dnl   Check other functions
AC_CHECK_FUNCS(setenv)

dnl   Check whether we need to include `-lnsl -lsocket' to use the
dnl   socket() call and friends (catlib needs these functions, and you
dnl   do need these on Solaris)
AC_CHECK_FUNC(gethostbyname,,
  AC_CHECK_LIB(nsl, gethostbyname))
AC_CHECK_FUNC(socket,,
  AC_CHECK_LIB(socket, socket,,,-lnsl))

dnl   What type of system are we on?
dnl   The alpha cxx compiler currently (v6.0) needs to be invoked with 
dnl   __USE_STD_IOSTREAM defined, so that it uses a standards-conforming 
dnl   streams library.  See Digital C++ v6.0 manual, section 7.1.2.
dnl   This is defined by default when the compiler is invoked with
dnl   `-std strict_ansi', but that's a little harder to arrange in here.
AC_CANONICAL_HOST
case "$host" in
  alpha*) test "$CXX" = "cxx" && AC_DEFINE(__USE_STD_IOSTREAM) ;;
esac

dnl   Do we have (standard) <cname> for C libraries, or just <name.h>?
AC_MSG_CHECKING(whether compiler has <cname> instead of just <name.h>)
AC_TRY_COMPILE([#include <cstdio>],,
  AC_DEFINE(HAVE_CSTD_INCLUDE) AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no))

dnl   Are the standard functions in the std namespace?
AC_MSG_CHECKING(whether standard functions are in namespace std)
AC_TRY_COMPILE([#include <string>], [string t;],
  AC_MSG_RESULT(no),
  AC_TRY_COMPILE([#include <string>], [using namespace std;string t;],
    AC_DEFINE(HAVE_STD_NAMESPACE)
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(ARGHH -- error compiling)))

dnl   Add the Starlink include and library paths.  The following
dnl   components are standard Starlink components (or semi-standard,
dnl   in the case of cat), so should be in standard places.  Don't add 
dnl   in much configuration flexibility here -- it's probably won't be 
dnl   necessary.  Use the STARLINK environment variable.
AC_SUBST(SLASHSTAR)
AC_MSG_CHECKING(whether we can find a Starlink installation)
SLASHSTAR=`(test -n "$STARLINK" && echo $STARLINK) || (test -d /star && echo /star) || (test -d /stardev && echo /stardev)`
if test -z "$SLASHSTAR"; then
    AC_MSG_ERROR(No!  Eeek! Giving up.)
    exit 1
fi
AC_MSG_RESULT($SLASHSTAR)
dnl CPPFLAGS="$CPPFLAGS -I$STARLINK/include"
dnl LIBS="$LIBS -L$STARLINK/lib"
dnl AC_CHECK_HEADER(ast.h)
dnl AC_CHECK_LIB(ast, astIsAFrameSet)

AC_SUBST(CATLIBDIR)
dnl   Find where the SkyCat cat library has been installed.
AC_ARG_WITH(catlib,
[  --with-catlib[=path]    Give non-default location of SkyCat installation],
  if test "$withval" = "yes"; then
    # Default place
    CATLIBDIR=../catlib
  elif test "$withval" = "no"; then
    CATLIBDIR=NOTHING
  else
    CATLIBDIR=$withval
  fi,
  CATLIBDIR=../catlib)



dnl dnl   AC_CHECK_HEADER(cat/AstroCatalog.h,AC_DEFINE(ENABLE_CAT))
dnl dnl   Specify (or at least check) the location of the cat library.
dnl dnl
dnl dnl   This had better work, since the program depends absolutely on
dnl dnl   the presence of this library.  The option --without-cat works,
dnl dnl   in the sense that support for the library is not compiled in,
dnl dnl   but the program as a whole doesn't work in that case, so it's
dnl dnl   pretty pointless.
dnl dnl
dnl dnl AC_SUBST(CATOBJ)
dnl AC_ARG_WITH(cat,
dnl [  --with-cat[=path]       Use skycat, giving optional path to library],
dnl   if test "$withval" = "yes"
dnl   then
dnl     AC_CHECK_HEADER(cat/AstroCatalog.h,
dnl     AC_CHECK_LIB(cat, main,
dnl       AC_DEFINE(ENABLE_CAT) 
dnl       LIBS="$LIBS -lcat"))
dnl   elif test "$withval" != "no"
dnl   then
dnl     safe_CPPFLAGS="$CPPFLAGS"
dnl     CPPFLAGS="$CPPFLAGS -I$withval/include"
dnl     safe_LIBS="$LIBS"
dnl     LIBS="$LIBS -L$withval/lib -lcat"
dnl     AC_CHECK_HEADER(cat/AstroCatalog.h,
dnl       AC_CHECK_LIB(cat, main,
dnl         AC_DEFINE(ENABLE_CAT) 
dnl         safe_CPPFLAGS="$safe_CPPFLAGS -I$withval/include"
dnl         safe_LIBS="$safe_LIBS -L$withval/lib -lcat"))
dnl     CPPFLAGS="$safe_CPPFLAGS"
dnl     LIBS="$safe_LIBS"
dnl   fi,
dnl   AC_CHECK_HEADER(cat/AstroCatalog.h,
dnl     AC_CHECK_LIB(cat, main,
dnl       AC_DEFINE(ENABLE_CAT) 
dnl       LIBS="$LIBS -lcat")))


AC_OUTPUT(Makefile t/Makefile)
