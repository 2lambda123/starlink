dnl   Configure script for moggy
dnl   Copyright 2001 Council for the Central Laboratory of
dnl                  the Research Councils. 
dnl   See file LICENCE for conditions.
dnl
dnl   $Id$


AC_REVISION($Revision$)dnl


AC_INIT(moggy.C)

dnl   Use a config file (the list of settings is getting too long)
AC_CONFIG_HEADER(config.h)

dnl   Say where the install-sh, config.guess and config.sub scripts are
AC_CONFIG_AUX_DIR(config)

dnl   Checks for programs.
AC_PROG_CXX

dnl   use C++ to compile test programs
AC_LANG_CPLUSPLUS

dnl   Check for a Perl binary, looking in the likely Starlink area first
AC_PATH_PROG(PERLPATH, perl, noperl, /star/Perl/bin:/stardev/Perl/bin:$PATH)
dnl   In fact, Moggy.pm currently _requires_ StarPerl, since it uses
dnl   autoastrom.pm, which loads the NDF library; it only uses deg2sex 
dnl   from autoastrom.pm, however, so that if it were desirable to
dnl   make Moggy independent of autoastrom, this function would have
dnl   to be copied over.
AC_MSG_CHECKING(whether we can invoke the autoastrom Perl library)
if $PERLPATH -e 'use lib ".."; use autoastrom; exit 0;'; then
  AC_MSG_RESULT(ok)
else
  AC_MSG_ERROR(no -- you need to adjust the PATH to include StarPerl)
fi

dnl   Similarly, check for uncompress and gzip programs
AC_PATH_PROG(PROGUNCOMPRESS, uncompress)
AC_PATH_PROG(PROGGZIP, gzip)

dnl   Check for other tools
AC_PROG_RANLIB

dnl   Check if we've got sstream.  If not, we'll assume we have the older
dnl   strstream
AC_CHECK_HEADERS(sstream)

dnl   Do we have a map implementation?
AC_CHECK_HEADERS(map)

dnl   Check whether setenv is present.  On Tru64, even though setenv
dnl   is present in the library, it appears not to be properly
dnl   declared in stdlib.h (it's bracketed off by an `#ifdef
dnl   AES_SOURCE', which isn't documented anywhere obvious): check for
dnl   this situation, and define DECLARE_SETENV if we're going to have
dnl   to include our own setenv definition.
AC_CHECK_FUNC(setenv,
  AC_DEFINE(HAVE_SETENV,1)
  AC_MSG_CHECKING(whether setenv is properly declared)
  AC_EGREP_HEADER(setenv,stdlib.h,
    AC_DEFINE(DECLARE_SETENV,0)
    AC_MSG_RESULT(yes),
    AC_DEFINE(DECLARE_SETENV,1)
    AC_MSG_RESULT(no)),
  AC_DEFINE(HAVE_SETENV,0))

dnl   Take a `copy' of the means autoconf uses to echo a string
dnl   without a newline.  This will be a Makefile variable, so double
dnl   the dollar sign to escape it.
AC_SUBST(ECHONONL)
ECHONONL='echononl () { echo '$ac_n' $$* '$ac_c'; }'
dnl (you'd think we could just write
dnl   'echo $ac_n $$* $ac_c' and escape it automagically, but that's
dnl   unexpectedly hard).
dnl if test -n "$ac_n"; then
dnl    ECHONONL='echononl () { echo -n $$*; }'
dnl elif test -n "$ac_c"; then
dnl     ECHONONL='echononl () { echo "$$*\c"; }'
dnl else
dnl     # eh?
dnl     ECHONONL='echononl () { echo $$*; }'
dnl fi



dnl   Check whether we need to include `-lnsl -lsocket' to use the
dnl   socket() call and friends (catlib needs these functions, and you
dnl   do need these on Solaris)
AC_CHECK_FUNC(gethostbyname,,
  AC_CHECK_LIB(nsl, gethostbyname))
AC_CHECK_FUNC(socket,,
  AC_CHECK_LIB(socket, socket,,,-lnsl))

dnl   What type of system are we on?
dnl   The alpha cxx compiler currently (v6.0) needs to be invoked with 
dnl   __USE_STD_IOSTREAM defined, so that it uses a standards-conforming 
dnl   streams library.  See Digital C++ v6.0 manual, section 7.1.2.
dnl   This is defined by default when the compiler is invoked with
dnl   `-std strict_ansi', but that's a little harder to arrange in here.
AC_CANONICAL_HOST
case "$host" in
  alpha*) test "$CXX" = "cxx" && AC_DEFINE(__USE_STD_IOSTREAM) ;;
esac

dnl   Do we have (standard) <cname> for C libraries, or just <name.h>?
AC_MSG_CHECKING(whether compiler has <cname> instead of just <name.h>)
AC_TRY_COMPILE([#include <cstdio>],,
  AC_DEFINE(HAVE_CSTD_INCLUDE) AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no))

dnl   Are the standard functions in the std namespace?
AC_MSG_CHECKING(whether standard functions are in namespace std)
AC_TRY_COMPILE([#include <string>], [string t;],
  AC_MSG_RESULT(no),
  AC_TRY_COMPILE([#include <string>], [using namespace std;string t;],
    AC_DEFINE(HAVE_STD_NAMESPACE)
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(ARGHH -- error compiling)))

dnl   Add the Starlink include and library paths, taking the location
dnl   of the /star directory from, in order, the argument to --with-starlink, 
dnl   the $STARLINKS variable, the $STARLINK variable, and finally just /star.
dnl   The --with-starlink and $STARLINKS can be a colon-separated list
dnl   of directories.
AC_ARG_WITH(starlink,
[  --with-starlink=path    Give non-default /star (can be colon-sep'd list)],
  if test "$withval" = "yes"; then
    # equivalent to default
    stardirs=
  elif test "$withval" = "no"; then
    AC_MSG_ERROR(You can't build moggy without Starlink)
  else
    stardirs=$withval
  fi,
  stardirs=)
test -n "$stardirs" || stardirs=$STARLINKS
test -n "$stardirs" || stardirs=$STARLINK
test -n "$stardirs" || stardirs=/star
set `echo $stardirs | sed 's/:/ /g'`
while test $# -gt 0; do
  AC_MSG_CHECKING(Starlink directory $1)
  if test -d "$1" -a -d "$1/include" -a -d "$1/lib"; then
    AC_MSG_RESULT(ok)
    CPPFLAGS="$CPPFLAGS -I$1/include"
    LIBS="$LIBS -L$1/lib"
  else
    AC_MSG_RESULT(not found)
    AC_MSG_ERROR(STARLINK directory $1 not found)
  fi
  shift
done



dnl   Now that we've found the /star directories, check that ast.h is
dnl   there.  There was a problem with ast.h which meant it caused the
dnl   Tru64 C++ compiler to object.  This is certainly fixed by AST
dnl   1.8-1.  This is more direct than the obvious alternative of
dnl   testing for the preprocessor constants AST_{MAJOR,MINOR}_VERS.
AC_CHECK_HEADER(ast.h)
AC_MSG_CHECKING(whether your AST headers are usable)
AC_TRY_COMPILE([extern "C" {
#include <ast.h>
}],,
  AC_MSG_RESULT(ok),
  AC_MSG_RESULT(not on this platform)
  AC_MSG_ERROR(consider defining STARLINK to point to a newer distribution))



dnl   We don't at present need to link against wcslib (though I
dnl   thought we did, at one point).  Should we need to again, this is
dnl   how:
dnl
dnl wcs_libdir=../wcslib/C
dnl AC_ARG_WITH(wcslib,
dnl [  --with-wcslib=path      Path to dir containing libwcs.a (used only if needed)],
dnl   if test "$withval" = yes; then
dnl     : # do nothing
dnl   elif test -z "$withval" -o "$withval" = no; then
dnl     wcs_libdir=X
dnl   else
dnl     wcs_libdir=$withval
dnl   fi)
dnl 
dnl AC_SUBST(WCSLIB)
dnl AC_CHECK_LIB(ast_wcslib, glsfwd, , 
dnl   AC_DEFINE(NEEDGLSFUNCS)
dnl   if test $wcs_libdir = "X"; then
dnl     AC_MSG_ERROR([--without-wcslib specified but need wcslib])
dnl   else
dnl     AC_DEFINE(WCSLIB,-L$wcs_libdir -lwcs)
dnl   fi)
AC_CHECK_LIB(ast_wcslib, glsfwd, , 
  AC_DEFINE(NEEDGLSFUNCS))


dnl   Check whether the version of AST which we'll be linking against
dnl   still has the proj.o module within it (from wcslib).  Newer
dnl   versions don't (or rather do, but modified and renamed).
AC_SUBST(ASTHASOLDPROJ)
AC_CHECK_LIB(ast_wcslib, airfwd, ASTHASOLDPROJ=yes, ASTHASOLDPROJ=no)



dnl   Find where the SkyCat cat library has been installed.
AC_SUBST(CATLIBDIR)
AC_ARG_WITH(catlib,
[  --with-catlib[=path]    Give non-default location of SkyCat installation dir],
  if test "$withval" = "yes"; then
    # Default place
    CATLIBDIR=../catlib
  elif test "$withval" = "no"; then
    CATLIBDIR=NOTHING
  else
    CATLIBDIR=$withval
  fi,
  CATLIBDIR=../catlib)




AC_OUTPUT(Makefile t/Makefile)
