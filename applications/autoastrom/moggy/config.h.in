/*
 *  This file is part of moggy.
 *  
 *  Copyright 2001, 2003, Council for the Central Laboratory of the Research Councils
 *  
 *  This program is part of the Starlink Software Distribution: see
 *  http://www.starlink.ac.uk 
 *  
 *  moggy is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *  
 *  moggy is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with moggy; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *  
 *  The General Public License is distributed along with this
 *  program in the file LICENCE.
 *  
 *  Author: Norman Gray <norman@astro.gla.ac.uk>
 *  $Id$
 */

#ifndef CONFIG_H_LOADED
#define CONFIG_H_LOADED 1

/* Do we have the <cstd...> include files? */
/* Define as 1 if you DO have the (standard) <cstdio> headers.  If
   not, we use <stdio.h> instead. */
#define HAVE_CSTD_INCLUDE 0

/* Related: define as 1 if you have standard functions in the std
   namespace; that is, if you need `using namespace std' in order to
   get to them.  The Solaris compilers need this, GCC doesn't (and I
   think that's a deficiency in GCC rather than Solaris).  At present,
   we use this flag to decide if we need to dump everything into the
   global namespace; this is not as elegant as I'd like, but it'll do
   for now. */
#define HAVE_STD_NAMESPACE 0

/* The alpha cxx compiler currently (v6.0) needs to be invoked with 
   __USE_STD_IOSTREAM defined, so that it uses a standards-conforming 
   streams library.  See Digital C++ v6.0 manual, section 7.1.2.
   This is defined by default when the compiler is invoked with
   `-std strict_ansi', but that's a little harder to arrange in
   here. */
#undef __USE_STD_IOSTREAM

/* Define as 1 if you have <sstream> (as opposed to older
   <strstream>).  Define as 0 otherwise. */
#define HAVE_SSTREAM 0

/* Define as 1 if we have <map>.  Define as 0 otherwise. */
#define HAVE_MAP 0

/* Define as 1 if we have function setenv() (and if we have, we assume
   we have function unsetenv(), too)... On Tru64, even though setenv
   is present in the library, it appears not to be properly
   declared in stdlib.h (it's bracketed off by an `#ifdef
   AES_SOURCE', which isn't documented anywhere obvious): check for
   this situation, and define DECLARE_SETENV if we're going to have
   to include our own setenv definition. */
#define HAVE_SETENV 0
#define DECLARE_SETENV 0

/* Define this if we have _not_ found the glsfwd and glsrev functions
   somewhere.  If they are in AST, this means (a) our copy of AST is
   old-ish (before 1.8), so (b) it has all of the wcslib functions
   that are in Calabretta's wcslib distribution.  If it does _not_
   have this function, then this means that out copy of AST is new
   (1.8 or later), so we have to supply the wcslib functions
   otherwise.  See SkyCatHoles.c, configure.in, and the Makefile, plus
   ../makefile, which may have removed proj.o from libcat.a. */
#undef HAVE_GLSFWD

#endif /* CONFIG_H_LOADED */
