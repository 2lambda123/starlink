<!DOCTYPE sun PUBLIC "-//Starlink//DTD Starlink SUN 0.7 (XML)//EN"
	"/home/norman/Data/w/starlink/sgml/dtd/sun-xml-0.7.dtd"
[
	<!ENTITY releasenotes SYSTEM "ReleaseNotes">
	<!ENTITY version SYSTEM "../VERSION">
	<!ENTITY astrom "<code>ASTROM</code>">
	<!ENTITY autoastrom "<code>autoastrom</code>">
	<!ENTITY findoff "<code>findoff</code>">
	<!ENTITY ddash '--'>
		<!-- so I can use this in CODE els without it
		     being recognised as a shortref -->

	<!ENTITY sun5
		PUBLIC	"-//Starlink//DOCUMENT Summary SUN/5//EN"
			""
			NDATA XML>
		<!-- ASTROM documentation -->
	<!ENTITY sun55
		PUBLIC	"-//Starlink//DOCUMENT Summary SUN/55//EN"
			""
			NDATA XML>
		<!-- CONVERT documentation -->
	<!ENTITY sun95
		PUBLIC	"-//Starlink//DOCUMENT Summary SUN/95//EN"
			""
			NDATA XML>
		<!-- KAPPA -->
	<!ENTITY sun139
		PUBLIC	"-//Starlink//DOCUMENT Summary SUN/139//EN"
			""
			NDATA XML>
		<!-- CCDPACK -->
	<!ENTITY sun211
		PUBLIC	"-//Starlink//DOCUMENT Summary SUN/211//EN"
			""
			NDATA XML>
		<!-- AST -->
	<!ENTITY sun214
		PUBLIC	"-//Starlink//DOCUMENT Summary SUN/214//EN"
			""
			NDATA XML>
		<!-- GAIA -->
	<!ENTITY sun226
		PUBLIC	"-//Starlink//DOCUMENT Summary SUN/226//EN"
			""
			NDATA XML>
		<!-- SExtractor -->
	<!ENTITY sun228
		PUBLIC	"-//Starlink//DOCUMENT Summary SUN/228//EN"
			""
			NDATA XML>
		<!-- StarPerl -->
	<!ENTITY mud165
		PUBLIC	"-//Starlink//DOCUMENT Summary MUD/165//EN"
			"file:/star/docs/mud165.ps"
			NDATA XML>
		<!-- Extractor documentation -->
]>

<!-- $Id$ -->

<sun>
  <docinfo>
    <title>Autoastrometry for Mosaics</title>
    <authorlist>
      <author id="ng">Norman Gray</author>
    </authorlist>

    <softwareversion>&version;</softwareversion>

    <docnumber>242</docnumber>

    <history>
      <version number="0" date="24-Aug-2001" author="ng">
	<px>Initial release</px>
      </version>
      <distribution string="v0-4" date="5-Nov-2001" author="ng">
	<px>Release of v0.4, tagged autoastrom-0-4.</px>
      </distribution>
      <distribution string="v0-5-1" date="20-Feb-2003" author="ng">
        <px>Release of v0.5-1</px>
      </distribution>
      <distribution string="v0-5-2" date="08-Apr-2003" author="ng">
        <px>Bugfix release</px>
      </distribution>
      <distribution string="v0-5-8" date="25-aug-2003" author="ng">
        <px>Stability improvements; extra options; enhanced documentation.</px>
      </distribution>
    </history>
  </docinfo>

  <docbody>
    <abstract>
      <px>We describe the &autoastrom; package, which
	provides an interface to the &astrom; application.
	This creates a semi-automatic route to doing astrometry on CCD
	images.</px>
    </abstract>

    <sect id="intro" export="export">
      <subhead>
	<title>Introduction</title>
      </subhead>

      <p><strong>THIS IS BETA SOFTWARE.  Some features work only partially or
	  unreliably.  It does not have all the functionality of a
	  production release.  The interface may well
	  change.</strong></p>

      <p>Starlink's &astrom; application provides powerful astrometry
	facilities, for analysing astronomical images; it is, however, 
	rather cumbersome to use.  As described in SUN/5, &astrom;
	can:
	<ul>
	  <li>
	    <p>obtain the plate centre and plate scale of a CCD image, 
	      by comparing plate positions of objects with those in a
	      reference catalogue, and fitting with both four- and
	      six-component distortion models;</p>
	  </li>
	  <li>
	    <p>with enough data, obtain cubic distortion and plate
	      tilt, using seven- to nine-component models;</p>
	  </li>
	  <li>
	    <p>if enough information is available, it will do the
	      reductions in observed place, correcting for atmospheric 
	      refraction.</p>
	  </li>
	</ul>
	&autoastrom; provides a shell
	around &astrom; so that, as well as the core astrometric
	facilities of &astrom;, &autoastrom; will:
	<ul>
	  <li>
	    <p>work on a CCD image provided as an NDF, as long as it
	      has at least rough astrometry (plate centre and scale);</p>
	  </li>
	  <li>
	    <p>automatically download appropriate reference catalogue
	      information from catalogue servers supported by the
	      SkyCat library;</p>
	  </li>
	  <li>
	    <p>insert the astrometric results into the original NDF,
	      as a WCS component;</p>
	  </li>
	  <li>
	    <p>alternatively or additionally make the astrometry
	      available as a set of FITS-WCS header cards.</p>
	  </li>
	</ul>
      </p>

    </sect>

    <sect id="usage" export="export">
      <subhead>
	<title>Usage</title>
      </subhead>

      <p>Summary:
	<verbatim>autoastrom [options...] &lt;NDF&gt;</verbatim></p>
      
      <p>The options available are described in <ref id="tab.opts"/>.
        String or integer values are given in the form
        <code>&ddash;catalogue=usno@eso</code>; those marked
        <code>switch</code>, such as <code>&ddash;insert</code>, can be
        specified as either <code>&ddash;insert</code> (meaning true) or
        <code>&ddash;noinsert</code> (false).</p>

      <p>Those options which take values can have those
        values specified as either <code>--option=value</code> or
        <code>--option value</code>.  The latter form is rather
        unfortunate (but currently unavoidable), since it means that if
        you <em>forget</em> to give a value, it gobbles the next
        option on the line as its value.  The options of type
        <code>switch</code> below take no value; <em>all</em> of the
        others do.</p>

      <table id="tab.opts">
	<caption>
	  <px>&autoastrom; options.  Further details are in <ref
	      id="usage.opts"/></px>
	</caption>
	<tabular>
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>Option</entry>
		<entry>Type</entry>
		<entry>Description</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry><ref id="opt.catalogue"><code>&ddash;catalogue</code></ref></entry>
		<entry>string</entry>
		<entry>SkyCat name of online catalogue to use</entry>
	      </row>
	      <row>
		<entry><ref id="opt.ccdcatalogue"><code>&ddash;ccdcatalogue</code></ref></entry>
		<entry>string</entry>
		<entry>CCD catalogue</entry>
	      </row>
	      <row>
		<entry><ref id="opt.defects"><code>&ddash;defects</code></ref></entry>
		<entry>string</entry>
		<entry>Remove CCD defects</entry>
	      </row>
	      <row>
		<entry><ref id="opt.help"><code>&ddash;help</code></ref></entry>
		<entry>switch</entry>
		<entry>Print usage information and exit</entry>
	      </row>
	      <row>
		<entry><ref id="opt.insert"><code>&ddash;insert</code></ref></entry>
		<entry>switch</entry>
		<entry>insert WCS info into NDF at end?</entry>
	      </row>
	      <row>
		<entry><ref id="opt.keepfits"><code>&ddash;keepfits</code></ref></entry>
		<entry>string</entry>
		<entry>retain WCS in this file (default if empty)</entry>
	      </row>
	      <row>
		<entry><ref id="opt.keeptemps"><code>&ddash;keeptemps</code></ref></entry>
		<entry>switch</entry>
		<entry>keep temporary files?</entry>
	      </row>
	      <row>
		<entry><ref id="opt.match"><code>&ddash;match</code></ref></entry>
		<entry>string</entry>
		<entry>choose matching algorithm</entry>
	      </row>
              <row>
                <entry><ref
                    id="opt.matchcatalogue"><code>&ddash;matchcatalogue</code></ref></entry>
                <entry>string</entry>
                <entry>dump catalogue of matches to this file</entry>
              </row>
	      <row>
		<entry><ref id="opt.maxobj"><code>&ddash;maxobj</code></ref></entry>
		<entry>integer</entry>
		<entry>maximum number of objects to process</entry>
	      </row>
	      <row>
		<entry><ref id="opt.messages"><code>&ddash;messages</code></ref></entry>
		<entry>switch</entry>
		<entry>show messages from monoliths?</entry>
	      </row>
	      <row>
		<entry><ref id="opt.obsdata"><code>&ddash;obsdata</code></ref></entry>
		<entry>string</entry>
		<entry>provide observation information, including WCS
		  information</entry>
	      </row>
	      <row>
		<entry><ref id="opt.skycatconfig"><code>&ddash;skycatconfig</code></ref></entry>
		<entry>string</entry>
		<entry>SkyCat configuration file</entry>
	      </row>
	      <row>
		<entry><ref id="opt.temp"><code>&ddash;temp</code></ref></entry>
		<entry>string</entry>
		<entry>name of temporary directory</entry>
	      </row>
	      <row>
		<entry><ref id="opt.timeout"><code>&ddash;timeout</code></ref></entry>
		<entry>integer</entry>
		<entry>monolith timeout</entry>
	      </row>
	      <row>
		<entry><ref id="opt.verbose"><code>&ddash;verbose</code></ref></entry>
		<entry>switch</entry>
		<entry>verbosity</entry>
	      </row>
	      <row>
		<entry><ref id="opt.version"><code>&ddash;version</code></ref></entry>
		<entry>switch</entry>
		<entry>print version number and exit</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</tabular>
      </table>

      <subsect id="usage.position" export="export">
	<subhead>
	  <title>Specifying positions</title>
	</subhead>

	<p>To work, &autoastrom; requires some initial estimate of the 
	  centre of the CCD frame.  You can provide this with a WCS
	  component in the NDF, or with a FITS (NDF-) extension, or with
	  approximate astrometry given on the command line.  By
	  default, &autoastrom; searches for a WCS component, then a
	  FITS extension, and fails if it finds neither.  Because
          &autoastrom; ultimately sits on top of the AST library, it
          is able to make sense of a large variety of embedded FITS
          information, and get its initial astrometry from such
          pointing information.</p>

	<p>You control this process using the <ref
            id="opt.obsdata"><code>&ddash;obsdata</code> option</ref>.</p>

	<p>If you wish to insert an initial approximate WCS component
	  in the NDF, you can best do this using GAIA.</p>

        <p>The initial calibration does not have to be particularly
          accurate; it need only be accurate enough that &autoastrom; is
          able to make a query to a catalogue server that will return a
          set of catalogue objects that has a substantial overlap with
          the imaged area of sky.  The query covers the region of sky
          which maps to the four corners of the image, based on the
          initial astrometry, plus a small extra margin.</p>

        <p>The default image scale is 1 arcsec per pixel.  You will
          need to specify the scale if the actual scale is significantly
          different from this, as errors in this scale result in
          substantial errors in the patch of sky requested from the
          server.  It is better to choose too small a scale than too
          large -- that way, the area which &autoastrom; searches for
          will tend to lie within the observed area, rather than
          greatly overlap it.</p>

        <p>&autoastrom; assumes that north is along
          the <m>y</m>-axis.  The matching algorithms are generally
          insensitive to this angle.  However, the only case where you need
          to specify this is if the CCD is significantly longer than
          it is wide, since in this case a wrong orientation would
          cause &autoastrom; to search for a patch of sky which was a
          different shape from the patch covered by the CCD.
          Similarly, you should specify any image inversion if you
          know it, but it is not always necessary.</p>
      </subsect>

      <subsect id="usage.results" export="export">
	<subhead>
	  <title>Results</title>
	</subhead>

	<p>Results can be inserted into the input NDF (see <ref
	    id="opt.insert"/>), or else retained as a standalone
	  FITS-WCS file (see <ref id="opt.keepfits"/>).  You can choose
	  both, either, or even choose neither and throw the results
	  away (strange person!).</p>

        <p>The FITS files which &autoastrom; produces are in fact
          generated by &astrom;.  As discussed in <docxref doc="sun5"
            loc="output_wcs"/>, these employ a slight extension to the
          FITS-WCS standards, since they necessarily include distortion
          information which has been deferred until paper~III, which is
          still at present (August 2003) in draft.  Nonetheless, they
          are perfectly conformant.  If, however, &autoastrom; had to be
          configured with support for an <em>old</em> version of
          <docxref doc="sun211">AST</docxref>, then it might have had to
          generate FITS headers which conformed to the drafts of
          paper~II, and thus do not conform to the final version --
          such FITS files should not be used outside of this
          application, and it would be best to update your version of
          AST to a current one, and reinstall &autoastrom;.</p>

        <p>The calculated astrometry is inserted into the input NDF
          unless you suppress it with the <code>&ddash;noinsert</code>
          option.  If you need to insert this by hand, into this or
          another NDF, you can do so with KAPPA's <docxref doc="sun95"
            loc="WCSCOPY">wcscopy</docxref> command (you may need to
          initialise the <docxref doc="sun55">CONVERT</docxref>
          package, so that the conversions between FITS and NDF will happen
          automatically).</p>

	<p>For further details, see the FITS standard
          <citation>nost-100-2</citation>, and the two published
          FITS-WCS papers, <citation>fitswcs1</citation> and
          <citation>fitswcs2</citation>; the web pages which cover the
          FITS-WCS process are at
          <url>http://www.cv.nrao.edu/fits/documents/wcs/wcs.html</url>.</p>
      </subsect>

      <subsect id="usage.proxy" export="export">
	<subhead>
	  <title>Web proxies</title>
	</subhead>

	<p>In order to perform catalogue lookups, &autoastrom; needs
	  to make HTTP (Web) queries.  If your site enforces the use
	  of proxies to get access to the web, these lookups will
	  fail, and &autoastrom; will simply wait uselessly until its
	  queries time out.</p>

	<p>You can tell &autoastrom; how to use the proxies by using the
	  standard <code>http_proxy</code> environment variable, which 
	  you set through something like
	  <verbatim>csh% setenv http_proxy http://wwwcache.example.ac.uk:8080/</verbatim>
	  or
	  <verbatim>sh% http_proxy=http://www.example.ac.uk:8080/; export http_proxy</verbatim>
	  depending on whether you use a csh-like (tcsh) or sh-like
	  (bash, zsh) shell.</p>

	<p>Your local computing service can advise you on the
	  appropriate value for this environment variable, or you can
	  examine the appropriate part of the configuration of your
	  web browser.</p>
      </subsect>

      <subsect id="usage.opts" export="export">
	<subhead>
	  <title>Options</title>
	</subhead>

        <p>The options are either switches, or have a string or
          integer argument.</p>

        <p>The verbosity option is an example of a
          switch: it can be given as <code>&ddash;verbose</code> to make
          the program verbose, or <code>&ddash;noverbose</code> to make
          it quiet.</p>

        <p>Some options take suboptions.  For example, the
          <code>&ddash;obsdata</code> option might be given as
          <verbatim>&ddash;obsdata=ra=12:34:56,dec=-10:0:0</verbatim>
          where the
          comma-separated list of suboptions is given as the
          <code>&ddash;obsdata</code> option argument.</p>

        <p>There are no
          optional arguments: if an option is documented as having an
          argument (that is, if it is not a switch), an argument must be
          provided.  The defaults documented below apply only if the
          option is <em>not</em> supplied.</p>

	<subsubsect id="opt.catalogue">
	  <subhead>
	    <title>--catalogue</title>
	  </subhead>
	  <p>This is the name of the online catalogue to use to find
	  reference stars.  The argument should be one of the
	  catalogue names recognised by <webref
	  url="http://archive.eso.org/skycat/" >SkyCat</webref>.  The
	  list of available catalogues depends on the configuration
	  file used (see <ref id="opt.skycatconfig"/>); the
	  `<code>short_name</code>' entries in the file are the
	  allowable values of this option.</p>

	  <p>Type: string; default (presently): `usno@eso'</p>
	</subsubsect>

	<subsubsect id="opt.ccdcatalogue">
	  <subhead>
	    <title>--ccdcatalogue</title>
	  </subhead>

	  <p>Specifies a pre-existing catalogue of objects in the CCD
	  frame.  The format is that produced as output by SExtractor
	  when <code>CATALOG_TYPE</code> is set to
	  <code>ASCII_HEAD</code>.  The file starts with a sequence of
	  lines of the form
            <verbatim>
              # &lt;colnum> &lt;colname> &lt;optional comment>
            </verbatim>
            The <em>colnum</em> numbers run from 1 to the number of
            columns; the <em>colname</em> is one of a set of column
            named defined in the <code>sextractor</code>
            documentation; and <em>optional comment</em> is some
            (ignored) annotation.  The data immediately follows, in
            rows with the given number of columns in them.  In each of
            these rows, any text following a <code>#</code> is
            ignored, and may be used for other annotation.</p>

          <p>You control which columns SExtractor
            generates by specifying them in the SExtractor
            <code>.param</code> file.  The catalogue must have all of
            the fields
<code>NUMBER</code>,
<code>FLUX_ISO</code>,
<code>X_IMAGE</code>,
<code>Y_IMAGE</code>,
<code>A_IMAGE</code>,
<code>B_IMAGE</code>,
<code>X2_IMAGE</code>,
<code>Y2_IMAGE</code>,
<code>ERRX2_IMAGE</code>,
<code>ERRY2_IMAGE</code>,
<code>ISOAREA_IMAGE</code>,
of which
<code>X2_IMAGE</code>, 
<code>Y2_IMAGE</code>,
<code>A_IMAGE</code>,
<code>B_IMAGE</code>,
<code>ERRX2_IMAGE</code>,
<code>ERRY2_IMAGE</code>
            are not generated by default.</p>

          <p>For further details about SExtractor, and details of
            these required columns, see <ref
              id="helpers"/></p>

          <p>If you include the option <code>&ddash;keeptemps</code>
            to avoid deleting the temporary work directory, you will
            be able to scavenge the extractor output from there if
            this is useful to you.</p>

	  <p>Type: string; default: none</p>
	</subsubsect>

	<subsubsect id="opt.defects">
	  <subhead>
	    <title>--defects</title>
	  </subhead>

	  <p>If this option is present, then when the application
	    extracts the list of objects from the CCD, it will try to
	    remove CCD blemishes.  The algorithm is currently rather
            crude, and will likely change in future.</p>

	  <p>Some of the `objects' detected by
	    EXTRACTOR are in fact CCD defects, or readout errors, or the
	    like.  These are very bright, so they can confuse a matching
	    program which examines only or preferentially the brightest
	    objects.</p>

          <p>By default, &autoastrom; will warn of the existence of
            anything it thinks is a defect, based on a plausible
            heuristic, and you can control this using this option.
            The options takes a list of keywords, which it processes
            as shown in <ref id="tab.defects"/>.</p>

          <table id="tab.defects">
            <caption>
              <px>Keywords for <code>--defects</code> option</px>
            </caption>
            <tabular>
              <tgroup cols="2">
                <colspec colnum="2" colwidth="1.5*"/>
                <thead>
                  <row>
                    <entry>Keyword</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>ignore</entry>
                    <entry>Completely ignore defects.</entry>
                  </row>
                  <row>
                    <entry>warn</entry>
                    <entry>Warn about possible defects, but do nothing
                    further.  This is the default.</entry>
                  </row>
                  <row>
                    <entry>remove</entry>
                    <entry>Remove any suspected defects from the
                      catalogue of CCD objects.</entry>
                  </row>
                  <row>
                    <entry>badness</entry>
                    <entry>Provide the
                      threshold for defect removal and warnings.  Any
                      objects with a badness greater than the value
                      specified here are noted or removed.  The
                      default threshold is 1.</entry>
                  </row>
                </tbody>
              </tgroup>
            </tabular>
          </table>

          <p>The heuristic works by assigning a `badness' to each
            object on the CCD.  Objects with a position variance,
            <m>\langle x^2 \rangle</m>
            or
            <m>\langle y^2 \rangle</m>,
            smaller than one pixel, and objects whose flux density
            (counts/pixel) is significantly higher than the average,
            are given high scores.  One can observe that line and
            point defects score high with this, with a badness greater
            than 1, but this is not completely reliable.</p>

          <p>We can afford a few uncaught defects, and we can afford
            to discard a few real, but very small, sources, since the match
            algorithms will generally simply ignore these.  What we need
            to avoid is a CCD catalogue which is dominated by bright
            sources which have no counterpart on the sky.</p>

	  <p>We emphasise that this defect-removal algorithm is not
            particularly sophisticated -- if the object-extraction is
            producing spurious objects, you may need to mask the defects
            out by hand, using GAIA or similar.</p>

          <p>If you have any observations on the reliability, or
            indeed usefulness, of this option, the author would be
            interested to receive them.</p>

	  <p>This option is not always necessary when used with the
	    default FINDOFF matching algorithm, but it is vital when
	    used with the `match' matching algorithm
	    (see <ref id="opt.match"/>), since that algorithm uses only the
	      brightest objects detected.</p>

          <p>Type: string; default: <code>&ddash;defects=warn</code></p>

	</subsubsect>

	<subsubsect id="opt.help">
	  <subhead>
	    <title>--help</title>
	  </subhead>

	  <p>Print usage information, and defaults, and exit.</p>

          <p>Type: switch; default: false.</p>
	</subsubsect>

	<subsubsect id="opt.insert">
	  <subhead>
	    <title>--insert</title>
	  </subhead>

	  <p>If true, the final fit to the astrometry is inserted into
            the input NDF as an AST WCS component.  If false
            (<code>--noinsert</code>), the insertion is not done, so
            presumably you have decided to handle the WCS information in
            a different way, and have set the <code><ref
                id="opt.keepfits">--keepfits</ref></code> option to retain
            the WCS information.</p>

	  <p>Type: switch; default: true.</p>
	</subsubsect>

	<subsubsect id="opt.keepfits">
	  <subhead>
	    <title>--keepfits</title>
	  </subhead>

	  <p>The normal mode of operation is for the script to insert
	    the final astrometry into the input NDF, as an AST WCS
	    component (see <ref id="opt.insert"/>).  Instead, or
	    additionally, you can save this 
	    information as a FITS-WCS file, named by this option.</p>

	  <p>Type: switch; default: false.</p>
	</subsubsect>

	<subsubsect id="opt.keeptemps">
	  <subhead>
	    <title>--keeptemps</title>
	  </subhead>

	  <p>If true, temporary files will not be deleted at the end
	    of processing.  This is useful for debugging, both at the
	    low level when there is something wrong with the script
	    itself, but also when you wish to examine the sequence of
	    calls to &findoff; and &astrom;, or examine the &astrom; input and
	    output files.</p>

	  <p>All the temporary files are created in a temporary
	    directory which is reported during the script's
	    execution.</p>

	  <p>Type: switch; default: true (but this <em>will</em> change)</p>
	</subsubsect>

	<subsubsect id="opt.match">
	  <subhead>
	    <title>--match</title>
	  </subhead>

	  <p>Specifies an alternative matching algorithm.  The default
            algorithm is `match', which is an implementation of the
            FOCAS matching algorithm <citation>valdes95</citation> by
            Michael W Richmond <citation>match-home</citation>.  A
            version of this is distributed with &autoastrom;, but it
            should be compatible with any later version.</p>

          <p>Alternatively, you can use the `findoff' application,
            which is part of CCDPACK.  This does
	    work, but is rather slow, and is completely thrown by a CCD
	    image with unequal X and Y scales, making it essentially
	    unusable if the image NDF does not have some astrometry
	    already, or if you try to specify a position with
	    <code>--obsdata</code> (see <ref id="opt.obsdata"/>).
            Since it has different characteristics, though, it may
            work in some circumstances where `match' does not.  Again,
            the author of &autoastrom; would welcome feedback on this
            point.</p>

	  <p>&autoastrom; supports `match' through the more general
            plugin mechanism described in <ref id="plugins"/>.</p>

          <p>Type: string; default: `match'.</p>
	</subsubsect>

        <subsubsect id="opt.matchcatalogue">
          <subhead>
            <title>--matchcatalogue</title>
          </subhead>

          <p>Specifies a file which receives a dump of the set of
            positions matched by the matching process.  The file is
            formatted like a <code>sextractor</code> output file, with
            five columns, containing (1) running object number, (2 and
            3) RA and Dec of the source on the sky, and (4 and 5)
            <em>x</em> and <em>y</em> positions of the source on the
            CCD.</p>

          <p>Type: string; default: absent -- no file written by default</p>
        </subsubsect>

	<subsubsect id="opt.maxobj">
	  <subhead>
	    <title>--maxobj</title>
	  </subhead>

	  <p>The maximum number of objects to fetch from the catalogue 
	    server.  The default is generous, and it's unlikely you'd
	    need to change this.</p>

	  <p>Type: integer; default: 500</p>
	</subsubsect>

	<subsubsect id="opt.messages">
	  <subhead>
	    <title>--messages</title>
	  </subhead>

	  <p>If true, the script will pass on messages from the
	    Starlink applications which the script uses.  These might
	    be reassuring, but if you don't like the chatter, they can 
	    be suppressed with <code>--nomessages</code>.</p>

	  <p>Type: switch; default: true</p>
	</subsubsect>

	<subsubsect id="opt.obsdata">
	  <subhead>
	    <title>--obsdata</title>
	  </subhead>

	  <p>Specifies a source for the observation data, including
	    WCS information.  The keyword has the multiple role of
	    specifying the source of WCS information, supplying
	    approximate WCS information directly, and supplying the
	    observation data (time, observatory, temperature and
	    pressure, and colour) which &astrom; needs if it is to
	    attempt one of its higher-order fits.  This information is
	    only needed if it is missing from the NDF or any FITS
	    extension it incorporates, and if you wish to attempt the
	    slight increase in accuracy of the more elaborate fits.
	  </p>

	  <p>Do not specify a keyword more than once with distinct
	    values.</p>

	  <p>The value of the <code>--obsdata</code> option can specify
	    approximate astrometry through a comma-separated list of
	    <code>key=value</code> pairs.  For example, to supply a
            value for the centre of a CCD, overriding any astrometry
            in the file, you might write 
	    <verbatim>
	      --obsdata=ra=14:24:00,dec=-12.34
	    </verbatim>
            This value indicates the centre of the CCD even when this
            is not the centre of distortion, which would be the case
            when, for example, the CCD represents an off-centre
            section of a Schmidt plate.
          </p>

          <p>The program will take its astrometry from only one of the
            possible sources (see <code>source</code> below) -- so that
            it will not, for example, take a position from the
            <code>obsdata</code> option and a plate scale from the
            file's own astrometry.  By default, a position given here
            overrides any other WCS information; thus to supply a
            position as a backup, in case there is <em>no</em>
            astrometry elsewhere, you could write
	    <verbatim>
	      --obsdata=source=AST:FITS:USER,ra=14:24:00,dec=-12.34
	    </verbatim>
	    The available astrometry keywords are in <ref
              id="tab.obsdata"/>.</p>

          <table id="tab.obsdata">
            <caption>
              <px>Keywords for the <code>--obsdata</code> option.</px>
            </caption>
	    <tabular>
	      <tgroup cols="2">
                <colspec colnum="2" colwidth="1.5*"/>
                <thead>
                  <row>
                    <entry>Keyword</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
		<tbody>
		  <row>
		    <entry>source</entry>
                    <entry>This is a
                      colon-separated list of sources of WCS
                      information.  The values may be `AST', indicating
                      that the information should come from the AST WCS
                      component of the NDF, or `FITS', indicating that
                      it should come from any FITS extension there, or
                      `USER', indicating that the following
                      <code>obsdata</code> keywords should be used.  The
                      default is <code>source=USER:AST:FITS</code>, so
                      that any WCS information given in the
                      <code>obsdata</code> keyword has precedence.  The
                      keywords are not case-sensitive.  If the program
                      gets through this list without finding any WCS
                      information, it exits with an error.</entry>
		  </row>
		  <row>
		    <entry>ra</entry>
		    <entry>Right ascension of the centre of the pixel
		      grid, in colon-separated HMS or decimal
		      degrees.  Required.</entry>
		  </row>
		  <row>
		    <entry>dec</entry>
		    <entry>Declination of the centre of the pixel
		      grid, in colon-separated DMS or decimal
		      degrees.  Required.</entry>
		  </row>
		  <row>
		    <entry>angle</entry>
		    <entry>Position angle of the pixel grid.  This is
		      the rotation, in
		      degrees anti-clockwise, of the declination or
		      latitude axis with respect to the 2-axis of the
		      data array.  Default: 0.
		    </entry>
		  </row>
		  <row>
		    <entry>scale</entry>
		    <entry>The plate scale, in units of arcsec/pixel.
		    Default: 1.</entry>
		  </row>
		  <row>
		    <entry>invert</entry>
		    <entry>If true (that is, specified as
                      <code>invert=1</code> or just
                      <code>invert</code>), the axes are inverted;
                      otherwise (<code>invert=0</code> or
                      <code>noinvert</code>) the axes are unflipped.
                      Default: 0.</entry>
		  </row>
		</tbody>
	      </tgroup>
	    </tabular>
          </table>

          <p>The position angle is the same as the AIPS
	    <code>CROTA2</code> convention.  Specifically (and by
	    definition), these definitions map to 
	    the <code>CDn_n</code> conventions of
	    <citation>fitswcs2</citation> through
	    <meqnarray>
	      <mline>\mbox{\texttt{CD1\_1}} &=& \pm s\cos(\phi)</mline>
	      <mline>\mbox{\texttt{CD1\_2}} &=& \pm s\sin(\phi)</mline>
	      <mline>\mbox{\texttt{CD2\_1}} &=& - s\sin(\phi)</mline>
	      <mline>\mbox{\texttt{CD2\_2}} &=& s\cos(\phi),</mline>
	    </meqnarray>
	    where <m>s</m> is <code>scale</code>/3600 (ie, the scale
	    in units of degrees/pixel), <m>\phi</m> is the position
	    angle <code>pa</code>, and <m>\pm</m> is <m>+</m> when
	    <code>invert</code> is false, and <m>-</m> when
	    <code>invert</code> is true.
	  </p>

	  <p>Additionally, there are keywords which specify observation 
	    data: time, station coordinates, meteorological data and
	    colour.  These are described in <ref id="tab.datetime"/>.
            For fuller details on these, see the &astrom;
	    documentation, SUN/5.  Note that the <code>source</code> keyword
	    discussed above
	    does not affect the priority of these keywords: if they
	    are specified, they override any values obtained from the
	    NDF or its FITS extensions.</p>

          <table id="tab.datetime">
            <caption><px>Observation data keywords.  In these specifications,
                <code>i</code> represents an integer, <code>r</code> a
                real, optional entries are in <code>[...]</code>, and the
                separator <code>:</code> may be either a colon or
                whitespace.  </px>
            </caption>
            <tabular>
	      <tgroup cols="2">
                <colspec colnum="2" colwidth="1.5*"/>
                <thead>
                  <row>
                    <entry>Keyword</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
		<tbody>
		  <row>
		    <entry>time</entry>
		    <entry>An observation time, given as a Julian
		      epoch (format <code>r</code>), or a local sidereal
		      time (format <code>i:i</code>) or UT
		      (<code>i:i:i:i:r</code> specifying four-digit
		      year, month, day, hours and minutes).</entry>
		  </row>
		  <row>
		    <entry>obs</entry>
		    <entry>An observation station, given either as one 
		      of the SLALIB observatory codes; or else in the format
		      <code>i:r:i:r[:r]</code>, giving longitude,
		      latitude and optional height.
		      Longitudes are east longitudes -- west
		      longitudes may be given either as minus degrees or
		      longitudes greater than 180.</entry>
		  </row>
		  <row>
		    <entry>met</entry>
		    <entry>Temperature and pressure at the telescope,
		      in degrees Kelvin and millibars.  The defaults are
		      278K and a pressure computed from the
		      observatory height.
		      Format <code>r[:r]</code>.</entry>
		  </row>
		  <row>
		    <entry>col</entry>
		    <entry>The effective colour of the observations,
		      as a wavelength in nanometres.  The default is
		      500nm.</entry> 
		  </row>
		</tbody>
	      </tgroup>
	    </tabular>
          </table>

          <p>Type: string; defaults: see above.</p>

	</subsubsect>

	<subsubsect id="opt.skycatconfig">
	  <subhead>
	    <title>--skycatconfig</title>
	  </subhead>

	  <p>The SkyCat library has a default configuration file,
	    which you can examine at
	    <url>http://archive.eso.org/skycat/skycat2.0.cfg</url>.  For
	    some applications, it may be appropriate to use an
	    alternative configuration file.  If so, you can point to it
	    using this option.  For more information on SkyCat,
	    catalogues, and the configuration file, see the <webref
	      url="http://archive.eso.org/skycat/skycat-faq.html"
	      >SkyCat FAQ</webref>.</p>

	  <p>Type: string; default: built-in defaults</p>
	</subsubsect>

	<subsubsect id="opt.temp">
	  <subhead>
	    <title>--temp</title>
	  </subhead>

	  <p>This option, if present, specifies the directory to be
	    used for temporary files.</p>

	  <p>This has a double function:
	    firstly and most straightforwardly, it indicates where
	    temporary files should be created if, for some reason, the 
	    default location is unsuitable; secondly, if the script
	    finds there a file (from a previous run) which it was
	    about to generate, it does not regenerate it, but
	    instead simply reuses it.  The first function may be
	    useful in some circumstances; the second is
	    primarily a debugging facility, is subtle, and its use is
	    discouraged.</p>

	  <p>Type: string; default: generated</p>
	</subsubsect>

	<subsubsect id="opt.timeout">
	  <subhead>
	    <title>--timeout</title>
	  </subhead>

	  <p>If present, this specifies how long, in seconds, the
	    script should wait for its slave applications to
	    complete.  The default is three minutes.  In some
	    circumstances -- such as if you have a huge number of
	    stars to match up -- this might be too short, so that the
	    script loses patience before the slave application has
	    finished, and produces a rather messy error message.  In
	    this circumstance, you can increase the timeout here.</p>

	  <p>Type: integer; default: 180</p>
	</subsubsect>

	<subsubsect id="opt.verbose">
	  <subhead>
	    <title>--verbose</title>
	  </subhead>

	  <p>If present, the
            script produces a good deal of chatter to the standard
            error; if false (<code>&ddash;noverbose</code>), this is
            suppressed.</p>

	  <p>Type: switch; default: false</p>
	</subsubsect>

	<subsubsect id="opt.version">
	  <subhead>
	    <title>--version</title>
	  </subhead>

	  <p>If present, write the version number to the standard
            output and exit.</p>

	  <p>Type: switch; default: false.</p>
	</subsubsect>

      </subsect>

    </sect>

    <sect id="build" export="export">
      <subhead>
	<title>Building the software</title>
      </subhead>

      <p>Build the software by unpacking the distribution tar archive, 
	and using the standard <code>./mk build</code> to build it,
	then <code>./mk install</code> to install it.</p>

      <p>If you wish to use a non-default Starlink tree to build the
	software (that is, not the standard <code>/star</code>), then
	you can specify this by setting the environment variable
	<code>STARLINK</code>: for example <code>setenv STARLINK
	  /stardev</code>.  If you need to use more than one Starlink
	tree (perhaps because you have installed updated versions of 
	some software outside the main tree; specifically, note that
	&autoastrom; requires AST version 1.8-1 or better), then use the
	<code>STARLINKS</code> variable, setting it to a
	colon-separated list of directories: for example <code>setenv
	  STARLINKS /path/to/my/star:/star</code> (this facility is
	intended primarily for developers, and you really shouldn't
	need to use it in `normal' building of the software).</p>
    </sect>

    <sect id="helpers" export="export">
      <subhead>
	<title>Auxiliary software</title>
      </subhead>

      <p>The script uses other Starlink software tools.  Although the
	use of these tools should be transparent, it might be of use
	to have some indication of sources of further detail.  All of
        these tools should be up-to-date if you are using a Starlink
        Summer 2003 distribution or later.</p>

      <p>The script is largely a wrapper for &astrom;.  This is
	documented fully in <docxref doc="sun5"/>.</p>

      <p>The pattern matching facilities which the script depends on
	come from the &findoff; application within CCDPACK.  There are
	further details in <docxref doc="sun139"/>.  You need version
        4.0-1 at least, and the program does, of course, respect any
        setting of the environment variable
	<code>CCDPACK_DIR</code>).</p>

      <p>The WCS information is largely handled by ATOOLS.  This does
	not have a SUN yet.   You need ATOOLS 1.3 or better
	(<code>ATOOLS_DIR</code>).</p>

      <p>&autoastrom; requires AST 1.8-1 or better to build.  Depending
	on precisely which earlier version of AST you have, the moggy
	tool will fail to compile, or if it compiles, fail to link.
	If you have AST installed in a non-standard place, you should
	use the <code>STARLINKS</code> environment variable at build
	time (see <ref id="build"/>), to tell the build script where
	to find it.</p>

      <p>It also needs StarPerl (see <docxref doc="sun228"/>).</p>

      <!--
      <p>NDFPACK and KAPPA: Ref to KAPPA docs.</p>
      -->

      <p>The concepts underlying WCS, and its interaction with
	FITS-WCS, are described in the AST documentation.  See
        <docxref doc="sun211"/>.</p>

      <p>Extraction of the object catalogues from the CCD is done by
	Extractor, which is the Starlink version of Emmanuel Bertin's
	SExtractor.  Extractor is documented in <docxref
          doc="sun226"/>.  See also the
        SExtractor manual <docxref doc="mud165"/>, the home of
        SExtractor on the web <citation>sextractor-web</citation>, the
        distribution location <citation>sextractor-ftp</citation> and the
        original SExtractor article
        <citation>sextractor-article</citation>.</p>

      <p>If you need to supply the initial astrometry which this
      script requires, you can do that using GAIA.  This is documented
      in <docxref doc="sun214"/>, but it's very easy to use, and you
      might be best to simply start it up (give the command <code>gaia
      image_name</code>, presuming you have already done the
      initialisation to use Starlink software) and experiment.
        <!-- Is it necessary to give some help with this? --></p>

      <subsect id="environment" export="export">
	<subhead>
	  <title>Environment</title>
	</subhead>

	<p>The environment variable <code>AUTOASTROM_DIR</code> points
	  to the installed location of the software and its auxiliary
	  programs. </p>

	<p>If you need to use a proxy to get to the web, then you
	  should define the environment variable
	  <code>http_proxy</code> to the appropriate value for your
	  site.</p>

	<p>The program moggy uses the ESO SkyCat library for its
	  catalogue access.  However, note that, for the sake of
	  consistency, it does <em>not</em> honour the SkyCat
	  <code>CATCONFIG</code> variable directly.  If you need to
	  specify an alternative SkyCat configuration file, you should 
	  do that with the <code>--skycatconfig</code> option instead
	  (see <ref id="opt.skycatconfig"/>).</p>
      </subsect>

      <subsect id="plugins" export="export">
	<subhead>
	  <title>Plugins</title>
	</subhead>

	<p>&autoastrom; has a flexible extension mechanism,
	  implemented through plugins.  At present, the only area of
	  the code which takes advantage of this is the part which
	  finds matches between the objects found on the CCD and those
	  in the downloaded object catalogue.</p>

	<p>The program searches the directory pointed to by the
	  environment variable <code>AUTOASTROM_DIR</code> (see <ref
	    id="environment"/>) for files which match the pattern
	  <code>plugin-*.pl</code>, and reads in all it finds.  Each
	  such file must define a single subroutine, and assign a
	  reference to that subroutine to the
	  appropriate member of the hash <code>%helpers</code>.</p>

	<p>&autoastrom; comes with a single plugin, to use Michael W
          Richmond's <code>match</code> application for object matching.
          To use this, specify `match' as the argument to the `match'
          option, as <code>--match=match</code> (see <ref
            id="opt.match"/>).  The plugin checks at runtime to see if the
          <code>match</code> application is present in the directory
          pointed to by <code>AUTOASTROM_DIR</code>, and the plugin will
          not be installed if the application is not found.
          &autoastrom; has been tested with match versions 0.3, 0.4 and
          0.7.</p>

	<p>If you wish to add further plugins, see the documentation
	  for the function <code>match_positions</code>.  That is
	  given a plugin name, say `mymatch', and
	  searches for the entry
	  <code>$helpers{plugin-match-mymatch}</code>.</p>

      </subsect>
      
    </sect>

    <sect id="future" export="export">
      <subhead>
	<title>Future developments</title>
      </subhead>

      <p>As a longer-term goal, it <em>might</em> be possible to
        automate even the discovery of the initial pointing, if there
        is some reasonable way of estimating 
	plate-centre and plate-scale information <foreign>ex
	  nihil</foreign>, from the pattern of objects in the plate.</p>

      <p>At present, only one CCD can be processed at a time.  It
	would be useful if the application could process images from
	multiple CCDs, arranged in a mosaic.</p>

      <subsect id="restrictions" export="export">
	<subhead>
	  <title>Restrictions and limitations</title>
	</subhead>

	<p>The script inherits some limitations from &astrom;, and some
	  from CCDPACK's &findoff;.</p>

	<p>The limitations due to &astrom; are as follows (quoted from
	  SUN/5, sect.&nbsp;5):</p>

	<p>&astrom; aims to deliver results better than 1&nbsp;arcsec
	  from typical Schmidt plate measurements, and better than
	  0.1&nbsp;arcsec from carefully measured JKT and AAT plates
	  <foreign>etc</foreign>.  Astrometric specialists will,
	  nonetheless, be aware of a number of shortcomings, including
	  the following:
	  <ul>
	    <li><p>The fit is limited to a 6-coefficient linear model
	    plus cubic distortion and plate tilt.  Colour effects --
	    arising for example from chromatic aberrations in the
	    camera optics -- are not allowed for, no magnitude or
	    image shape terms are included in the model, and the
	    refraction cannot be adjusted automatically.</p>
	    </li>

	    <li><p>The zonal distortions of the reference catalogues are
		neglected.</p></li>

	    <li><p>There is no provision for the simultaneous fitting
	    of more than one plate.  This prevents an extended area
	    being modelled via overlapping plates, and the
	    determination of proper motion and parallax from plates
	    taken at different epochs.</p>
	    </li>

	    <li><p>Only rudimentary error information is produced.</p>
	    </li>
	  </ul>
	  Despite these limitations, which stem mainly from the need
	  for simplicity of use, the accuracy of the result tends in
	  practice to be dominated by the quality of the input data
	  rather than by &astrom; itself.</p>

	<p>Further, &astrom; requires that at least 10 reference stars
	  are available.  Since &autoastrom; obtains its reference stars 
	  from well-stocked catalogues, this is not a problem in
	  practice.</p>

	<p>The restrictions arising from &findoff; are similarly slight, 
	  and should not be a problem if the initial astrometry is
	  good enough.  It's not at present <em>completely</em> clear
	  exactly what `good enough' means.</p>

      </subsect>

    </sect>

    <sect id="releasenotes" export="export">
      <subhead>
	<title>Release Notes</title>
      </subhead>

      &releasenotes;
    </sect>

    <backmatter bibliography="sun242"/>

  </docbody>
</sun>

<!-- Local Variables: -->
<!-- mode: xml -->
<!-- sgml-indent-data: t -->
<!-- sgml-indent-step: 2 -->
<!-- End: -->
