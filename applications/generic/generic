#!/bin/sh
#+
#  Name:
#     generic

#  Purpose:
#     Create multiple instances of a generic FORTRAN or C subprogram

#  Language:
#     Bourne shell

#  Invocation:
#     generic [-t types] [-a] [-c charsize] [-s] [-sc sepchar] [-u] [-x] \
#             file1.(g|c)<types> [file2.(g|c)<types>...]

#  Description:
#     The generic script takes FORTRAN or C source files that contain tokens
#     and replaces these tokens with the appropriate words for the data type
#     being processed.  The data types allowed are byte, unsigned byte,
#     character, double precision, integer, logical, real, word and unsigned
#     word.
#
#     When processing a Fortran source, the output is piped through a filter
#     to ensure that the token replacement has not made any FORTRAN statement
#     longer than 72 characters.  By default, all the output routines for a
#     single input file are written to a single file.  However, optionally, they
#     can be written to separate files.
#
#     The ability to process C source is mainly intended for situations where
#     there is a need to write generic C that is to be called directly from
#     Fortran, and thus needs to use the macros defined in the "f77.h" header
#     provided by the CNF package. For generic C code that is not to be
#     called directly from Fortran, it is better to use the facilities of
#     the "cgeneric" utility included in this package.

#  Arguments:
#     -t
#        The next argument is a list of data types that should be used in
#        the token replacement.  Each data type is represented by a single
#        letter and valid letters are:
#           b = byte
#           B = unsigned byte
#           c = character
#           d= double precision
#           i = integer
#           k = 64-bit integer
#           l = logical
#           r = real
#           w = word
#           W = unsigned word
#        Other recognised types are
#           n = numeric types (b, B, d, i, k, r, w and W)
#           a = all types
#        The list of types to be processed can be specified by the
#        environment variable GENERIC_TYPES.  If GENERIC_TYPES is defined
#        and the -t argument is present, the -t argument takes precedence.
#        Note that the token substituted for B and W may be ub and uw
#        respectively if the -u option is selected.
#     -a
#        Replace ASTERIX tokens as well as the standard ones.
#     -c
#        The next argument is the size to be used for local character
#        variables. This value can be specified by the environment
#        variable GENERIC_CHASIZ. If GENERIC_CHASIZ is defined
#        and the -c argument is present, the -c argument takes precedence.
#     -s
#        Write the output to separate files for each data type given by
#        the -t argument. The output file names are the same as the input file
#        name with the trailing .gen removed and a <T>.f or <T>.c appended,
#        where <T> is the character in the -t list that is being processed,
#        except with the -u option where B and W become ub and uw respectively.
#     -sc
#        The next argument is a used to separate the base output file name
#        from the appended <T>.f or <T>.c. If the -sc argumnt is given, the
#        -s argument is superfluous.
#     -u
#        The B and W types substitute ub and uw tokens respectively in the
#        code and in generated filename.  This for compability with the VMS
#        version as used by most generic routines.  However, note that
#        the -t values of BW should still be used to obtain unsigned
#        byte and unsigned word instantiations.
#     -x
#        Removes the last x from the file name before generating the names of
#        the output files.
#     file1.(g|c)<types> ...
#        A list of input files containing generic FORTRAN or C source code.
#        If a file suffix starts with ".g..." it is assumed to be a Fortran
#        source file. If it starts with ".c..." it is assumed to be a C
#        source file. For Fortran, they should normally have a .gen suffix.
#        If the suffix is not .gen, but begins with .g the remaining
#        characters of the file extension are treated as the list of data
#        types to be instantiated. For C, they should normally have a
#        .cgen suffix. If the suffix is not .cgen, but begins with .c the
#        remaining characters of the file extension are treated as the list
#        of data types to be instantiated. However, for both C and Fotran,
#        the presence of a -t option or a defined environment variable
#        GENERIC_TYPES takes precedence over the types specified in the file
#        extension. The list of data types may be formed using the values
#        listed in the -t option. This option allows filenames to be used to
#        specify the intended data types for the Fortran code, and hence make
#        building easier.

#  Examples:
#     -  generic -t cdilr sub1.gen
#        If sub1.gen contains a subroutine called SUB<T>, then this will
#        create a file called sub1.f containing subroutines SUBC, SUBD, SUBI,
#        SUBL and SUBR.
#     -  generic -t bBwW -a -sc _ sub2.gen
#        This will take the subroutine in the input file sub2.gen and create
#        output files called sub2_b.f, sub2_B.f, sub2_w.f and sub2_W.f.
#        The -a flag means that any ASTERIX tokens will be processed.
#     -  generic -t n -s -x subx.gen
#        This takes the subroutine in the input file subx.gen and creates
#        output files subB.f, subW.f, subb.f, subd.f, subi.f, subr.f, and
#        subw.f.
#     -  generic -t n -s -u -x subx.gen
#        This takes the subroutine in the input file subx.gen and creates
#        output files subb.f, subd.f, subi.f, subr.f, subub.f, subuw.f, and
#        subw.f.
#     -  generic -s -u sub.gn
#        This takes the subroutine in the input file sub.gn and creates
#        output files subb.f, subd.f, subi.f, subr.f, subub.f, subuw.f, and
#        subw.f.
#     -  generic sub.gldr
#        This takes the subroutine in the input file sub.gldr and creates
#        output files sub.f containing the double-precision, logical,
#        and real instantiations.

#  Notes:
#     -  It is always true that generic output files will overwrite any
#        existing output files of the same name.  However, any files with
#        similar names will not be touched.  For example, the command
#           generic -t il -s sub3.gen
#        will create files called sub3i.f and sub3l.f.  If there are files
#        called sub3.f, sub3b.f, sub3B.f, sub3c.f, sub3d.f, sub3r, sub3w.f
#        or sub3W.f already in existence, then these are not affected by
#        the above operation.

#  Prior Requirements:
#     The environment variable GENERIC_DIR must point to a directory
#     containing the sed files and the wrap72 script.  The value of the
#     environment variable is is set within this script to a value
#     determined when the package is installed.  If the environment variable
#     is set externally, that value is used in preference to the internal
#     one.

#  Copyright:
#     Copyright (C) 2020 East Asian Observatory
#     Copyright (C) 2012 Science & Technology Facilities Council.
#     Copyright (C) 1992-1994 Science & Engineering Research Council.
#     Copyright (C) 2000, 2004 Central Laboratory of the Research
#     Councils. All Rights Reserved.

#  Licence:
#     This program is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as
#     published by the Free Software Foundation; either version 2 of
#     the License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be
#     useful, but WITHOUT ANY WARRANTY; without even the implied
#     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#     PURPOSE. See the GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program; if not, write to the Free Software
#     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
#     02110-1301, USA

#  Authors:
#     PMA: Peter Allan (Starlink, RAL)
#     MJC: Malcolm J. Currie (Starlink, RAL)
#     TIMJ: Tim Jenness (JAC, Hawaii)
#     DSB: David S Berry (EAO)
#     {enter_new_authors_here}

#  History:
#     4-JAN-1992 (PMA):
#        Original version.
#     18-JAN-1993 (PMA):
#        Add the option such that if no types are defined, then all types
#        will be generated.
#        Allow types to be n (for all numeric types) or a (for all types).
#     29-JAN-1993 (PMA):
#        Define the environment variable GENERIC_DIR within this script if it
#        is not defined already.
#     30-MAR-1993 (PMA):
#        Add -f to the first line of this script so that any "set noclobber"
#        commands in a user's .cshrc file have no effect.
#     26-AUG-1993 (PMA):
#        Fix bug whereby local character variables were declared as
#        CHARACTER*<CHASIZ> rather than having a real size such as
#        CHARACTER*200.
#     1994 December 19 (MJC):
#        Add -x option to give behaviour like the VMS version.
#     2000 May 31 (MJC):
#        Outputs unsigned byte and word using VMS suffices of ub and uw
#        respectively.
#     2004 March 15 (MJC):
#        Add -u option to permit both UNIX and VMS style usage.
#        Change -x to remove only a trailing x.
#     2004 July 13 (MJC):
#        Allow file extensions .g<types> where <types> is the
#        equivalent of the -t option.  Fix bugs when -s option not
#        enabled: the composite file was not being created and the
#        temporary file not being removed after each type was
#        instantiated.  Add some warning and information messages.
#        Augment examples.
#     2004 October 5 (TIMJ):
#        File suffices were overriding an explicit -t
#     2012-04-23 (TIMJ):
#        Add 64-bit integer support (K)
#     11-FEB-2020 (DSB):
#        Support C input files.
#     6-MAY-2022 (GSB):
#        Convert to sh.
#     {enter_further_changes_here}

#-

# Set up the environment variable GENERIC_DIR.

if [ -z "$GENERIC_DIR" ]; then
   GENERIC_DIR=`dirname $0`/../etc
fi

# Set up default values of parameters.

chasiz_default=200

# Initialize some shell variables.
astflag=
badarg=
chasiz=''
gfiles=''
sepchar=''
sepflag=
uflag=
xflag=
types=''
settypes=

# Check that there are some arguments present.

if [ $# -eq 0 ]; then
   echo "Usage: generic [-t types] [-a] [-c charsize] [-s] [-sc sepchar] [-u] [-x] file1.g<types> [file2.(g|c)<types>...]"
   exit
fi

# Process each of the arguments to the script.

while [ ! -z "$1" ]; do
   case "$1" in
   -t)        #  Type of data flag.
      shift
      types="$1"
      settypes=1
      shift
      ;;
   -a)        #  Convert Asterix tokens.
      astflag=1
      shift
      ;;
   -c)        # Character size for local variables.
      shift
      chasiz="$1"
      shift
      ;;
   -s)        #  Create separate output files for each input data type.
      sepflag=1
      shift
      ;;
   -sc)       # The separator in output file names.
      shift
      sepchar="$1"
      shift
      sepflag=1
      ;;
   -u)        # Use ub and uw tokens for types B and W.
      uflag=1
      shift
      ;;
   -x)        # Remove the last x of the filename.
      xflag=1
      shift
      ;;
   *.g*)     # The names of the Fortran generic files.
      gfiles="$gfiles $1"
      shift
      ;;
   *.c*)     # The names of the C generic files.
      gfiles="$gfiles $1"
      shift
      ;;
   *)
      echo "Unrecognised option: $1"
      shift
      badarg=1
      ;;
   esac
done

# Check that all arguments were valid.

if [ -n "$badarg" ]; then
   echo "Usage: generic [-t types] [-a] [-c charsize] [-s] [-sc sepchar] [-u] [-x] file1.g<types> [file2.(g|c)<types>...]"
   exit
fi

# Check the value of the variable types.

if [ -z "$types" ]; then
   if [ -n "$GENERIC_TYPES" ]; then
      types="$GENERIC_TYPES"
      settypes=1
   else
      types="bBcdikrlwW"
   fi
fi

# Check the value of the variable chasiz.

if [ -z "$chasiz" ]; then
   if [ -n "$GENERIC_CHASIZ" ]; then
      chasiz="$GENERIC_CHASIZ"
   else
      chasiz="$chasiz_default"
   fi
fi

# Select the unsigned integer tokens.

if [ -n "$uflag" ]; then
   ubtoken="ub"
   uwtoken="uw"
else
   ubtoken="B"
   uwtoken="W"
fi

# Create a temporary file name.

tempfile=temp$$

#  For each of the .gen files, create the set of output files, one for each
#  data type.

for fname in $gfiles; do
   if [ ! -e $fname ]; then
      echo "$fname does not exist."
   else

# Obtain the file prefix and extension.
      fprefix="${fname%.*}"
      fsuffix="${fname##*.}"

# If a C file has been supplied, set "cflag" and change the file suffix
# to the equivalent Fortran suffix.
      case "$fsuffix" in
      c*)
         cflag=1
         if [ "$fsuffix" = "cgen" ]; then
            fsuffix="gen"
         else
            fsuffix=`echo $fsuffix | sed -e 's/^c/g/'`
         fi
         ;;
      *)
         cflag=
         ;;
      esac

# If the types have not been specified, they may be defined in the file
# extension of the form g<types>, where <types> follows the -t values.

      if [ -z "$settypes" -a $fsuffix != "gen" ]; then
         types=`echo $fsuffix | awk '{print substr($0,2)}'`
         echo "Setting types to $types"
      fi

# See if all numeric types should be generated.

      case "$types" in
      *n*)
         types="${types}bBdikrwW"
         ;;

# See if all types should be generated.

      *a*)
         types="bBcdikrlwW"
         ;;
      esac

# Remove the trailing x character of the file name, when the -x option
# has been selected.

      if [ -n "$xflag" ]; then
         case "$prefix" in
         *x)
            fprefix="${fprefix:0:-1}"
            $fprefix = `echo $fprefix | sed -e 's/x$//'`
            ;;
         esac
      fi

# If all the output routines for one input file are going to a single file,
# make sure that the output file is empty. Create composite file.

      if [ -n "$cflag" ]; then
         if [ -z "$sepflag" ]; then
            if [ -f ${fprefix}.c ]; then
               rm ${fprefix}.c
            fi
            touch ${fprefix}.c
        fi
      else
         if [ -z "$sepflag" ]; then
            if [ -f ${fprefix}.f ]; then
               rm ${fprefix}.f
            fi
            touch ${fprefix}.f
        fi
      fi

# Process each data type.

      case "$types" in
      *b*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/byte $fname \
            | sed -f $GENERIC_DIR/byte_asterix \
            >$tempfile
         else
            sed -f $GENERIC_DIR/byte $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}b.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}b.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *B*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/ubyte $fname \
            | sed -f $GENERIC_DIR/ubyte_asterix \
            >$tempfile
         else
            sed -f $GENERIC_DIR/ubyte $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}${ubtoken}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}${ubtoken}.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *c*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/character $fname \
            | sed -f $GENERIC_DIR/character_asterix \
            | sed "s/<CHASIZ>/$chasiz/" \
            >$tempfile
         else
            sed -f $GENERIC_DIR/character $fname \
            | sed "s/<CHASIZ>/$chasiz/" >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}c.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}c.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *d*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/double $fname \
            | sed -f $GENERIC_DIR/double_asterix \
            >$tempfile
         else
            sed -f $GENERIC_DIR/double $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}d.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}d.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *i*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/integer $fname \
            | sed -f $GENERIC_DIR/integer \
            >$tempfile
         else
            sed -f $GENERIC_DIR/integer $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}i.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}i.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *k*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/integer8 $fname \
            | sed -f $GENERIC_DIR/integer8 \
            >$tempfile
         else
            sed -f $GENERIC_DIR/integer8 $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}k.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}k.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *l*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/logical $fname \
            | sed -f $GENERIC_DIR/logical_asterix \
            >$tempfile
         else
            sed -f $GENERIC_DIR/logical $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}l.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}l.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *r*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/real $fname \
            | sed -f $GENERIC_DIR/real_asterix \
            >$tempfile
         else
            sed -f $GENERIC_DIR/real $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}r.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}r.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *w*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/word $fname \
            | sed -f $GENERIC_DIR/word_asterix \
            >$tempfile
         else
            sed -f $GENERIC_DIR/word $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}w.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}w.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
         ;;
      esac

      case "$types" in
      *W*)
         if [ -n "$astflag" ]; then
            sed -f $GENERIC_DIR/uword $fname \
            | sed -f $GENERIC_DIR/uword_asterix \
            >$tempfile
         else
            sed -f $GENERIC_DIR/uword $fname >$tempfile
         fi
         if [ -n "$sepflag" ]; then
            if [ -n "$cflag" ]; then
               cp $tempfile ${fprefix}${sepchar}${uwtoken}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >${fprefix}${sepchar}${uwtoken}.f
            fi
         else
            if [ -n "$cflag" ]; then
               cat $tempfile >>${fprefix}.c
            else
               awk -f $GENERIC_DIR/wrap72 $tempfile >>${fprefix}.f
            fi
         fi
         if [ -f $tempfile ]; then
            \rm $tempfile
         fi
      esac

   fi
done

# Delete the temporary file if it exists.

if [ -f $tempfile ]; then
   \rm $tempfile
fi
