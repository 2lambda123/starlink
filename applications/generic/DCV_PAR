*+
*  Name:
*     DCV_PAR

*  Purpose:
*     Global constants for data conversion

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     INCLUDE 'DCV_PAR'

*  Description:
*     This file contains parameter definitions giving the maximum and
*     minimum allowed values for variables of various types.

*  Copyright:
*     Copyright (C) 1993 Science & Engineering Research Council

*  Authors:
*     SMB: Steven Beard (ROE)
*     PMA: Peter Allan (Starlink, RAL)
*     {enter_new_authors_here}

*  History:
*     08-APR-1987 (SMB):
*        Original version.
*     10-APR-1987 (SMB):
*        Modified to be more consistent with Malcolm Currie's
*        VAL__BAD<T> parameters.
*     12-JAN-1993 (PMA):
*        Converted prologue to ADAM style.
*     28-JAN-1993 (PMA):
*        Change the declaration of DCV_IMIN. Declaring it as
*        -2147483648 does not work on a Sun.
*     28-JAN-1993 (PMA):
*        Declare all of the constants in terms of PRIMDAT constants.
*        This removes the need for machine specific files.
*     29-JAN-1993 (PMA):
*        Declare the unsigned byte and unsigned word values explicitly
*        as defining them in terms of PRIMDAT constants causes error on
*        the Unix machines, viz. DCV__UBMAX gets defined as -1 instead
*        of 255. Similarly for DCV__UWMAX.
*     {enter_further_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:

*  Global Constants:
      INCLUDE 'PRM_PAR'          ! PRIMDAT definitions of constants

*  The allowed range for BYTE :-

      BYTE DCV__BMIN             ! Minimum possible byte value
      BYTE DCV__BMAX             ! Maximum possible byte value
      PARAMETER ( DCV__BMIN = NUM__MINB )
      PARAMETER ( DCV__BMAX = NUM__MAXB )

*  The allowed range for UNSIGNED BYTE. Note that these constants are
*  declared INTEGER to remove any ambiguity. (The compiler cannot
*  distinguish between negative byte values and unsigned byte values
*  greater than 127) :-

      INTEGER DCV__UBMIN         ! Minimum possible unsigned byte value
      INTEGER DCV__UBMAX         ! Maximum possible unsigned byte value
      PARAMETER ( DCV__UBMIN = 0 )
      PARAMETER ( DCV__UBMAX = 255 )

*  The allowed range for DOUBLE PRECISION. (Note that the smallest
*  value defined here is the MOST NEGATIVE value and NOT the nearest
*  value which can be distinguished from zero) :-

      DOUBLE PRECISION DCV__DMIN ! Minimum possible double precision
                                 ! value
      DOUBLE PRECISION DCV__DMAX ! Maximum possible double precision
                                 ! value
      PARAMETER ( DCV__DMIN = NUM__MIND )
      PARAMETER ( DCV__DMAX = NUM__MAXD )

*  The allowed range for INTEGER :-

      INTEGER DCV__IMIN          ! Minimum possible integer value
      INTEGER DCV__IMAX          ! Maximum possible integer value
      PARAMETER ( DCV__IMIN = NUM__MINI )
      PARAMETER ( DCV__IMAX = NUM__MAXI )

*  The allowed range for REAL. (Note that the smallest value
*  defined here is the MOST NEGATIVE value and NOT the nearest
*  value which can be distinguished from zero) :-

      REAL DCV__RMIN             ! Minimum possible real value
      REAL DCV__RMAX             ! Maximum possible real value
      PARAMETER ( DCV__RMIN = NUM__MINR )
      PARAMETER ( DCV__RMAX = NUM__MAXR )

*  The allowed range for WORD :-

      INTEGER*2 DCV__WMIN        ! Minimum possible word value
      INTEGER*2 DCV__WMAX        ! Maximum possible word value
      PARAMETER ( DCV__WMIN = NUM__MINW )
      PARAMETER ( DCV__WMAX = NUM__MAXW )

*  The allowed range for UNSIGNED WORD. Note that these constants
*  are declared INTEGER to remove any ambiguity. (The compiler cannot
*  distinguish between negative word values and unsigned word values
*  greater than 32767) :-

      INTEGER DCV__UWMIN         ! Minimum possible unsigned word value
      INTEGER DCV__UWMAX         ! Maximum possible unsigned word value
      PARAMETER ( DCV__UWMIN = 0 )
      PARAMETER ( DCV__UWMAX = 65535 )
*.
