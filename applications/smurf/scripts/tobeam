#!/bin/csh

#+

#  Name:
#    tobeam

#  Purpose:
#    Re-grids the supplied input NDF to half a pixel size equal to half
#    the Airy disk radius. A Gaussian spreading function is used that
#    produces Gaussian smoothing with an FWHM of 1/sqrt(2) of the full
#    beam width. The EXP_TIME array held in the SMURF extension of the
#    input NDF is regridded in the same way.

#  Invocation:
#    tobeam <in> <out>

#  Parameters:
#    <in> - The input NDF
#    <out> - The output NDF

#  Authors:
#    DSB: David S. Berry (JAC)
#    TIMJ: Tim Jenness (JAC)

#  History:
#    2009-12-04 (DSB):
#       Initial revision
#    2009-12-05 (DSB):
#       Handle 3d "images"
#    2009-12-08 (TIMJ):
#       Integrate into SMURF and add copyright and licence.
#       Use smaller gaussian FWHM.
#    2009-12-21 (DSB):
#       Changed to use re-sampling (without flux conservation) rather than 
#       re-binning.

#  Copyright:
#     Copyright (C) 2009 Science & Technology Facilities Council.
#     All Rights Reserved.

#  Licence:
#     This program is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as
#     published by the Free Software Foundation; either version 3 of
#     the License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be
#     useful, but WITHOUT ANY WARRANTY; without even the implied
#     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#     PURPOSE. See the GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public
#     License along with this program; if not, write to the Free
#     Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#     MA 02111-1307, USA

#-

#  Check the input and output NDFs were specified on the command line.
if( $# < 2 ) then
   echo "Usage: tobeam <in.sdf> <out.sdf>"
   exit
endif

#  Ensure ADAM tasks fail rather than prompt for parameter values
setenv ADAM_NOPROMPT 1

#  The input NDF may or may not have a ".sdf" suffix. Ensure we have the
#  input NDF name without ".sdf".
set dir = `dirname $1`
set base = `basename $1 .sdf`
set in = "$dir/$base"

#  Likewise ensure we have the output NDF name without a ".sdf" suffix.
set dir = `dirname $2`
set base = `basename $2 .sdf`
set out = "$dir/$base"

#  Check it exists.
if( ! -e "$in.sdf" ) then
   echo "Cannot find $in.sdf"
   exit
endif

#  Check it is from JCMT.
set telescope = `$KAPPA_DIR/fitsmod $in edit=print keyword=TELESCOP`
if( $telescope != "JCMT" ) then
   echo "Data is not from JCMT"
   exit
endif

#  Get the wavelength (in metres).
set wavelen = `$KAPPA_DIR/fitsmod $in edit=print keyword=WAVELEN`

#  Calculate the radius of the Airy disk radius in arc-sec, assuming a
#  mirror diameter of 15.0 metres.
set airy = `$KAPPA_DIR/calc exp="'(1.22*pa/15.0)*3600.0*180.0/3.1415927'" \
                        pa=$wavelen`

#  Output pixel size is equal to half the Airy disk radius.
set outsize = `$KAPPA_DIR/calc exp="0.5*pa" pa=$airy`

#  Get the input pixel size, in arc-second. Note, cannot use QUIET=YES here,
#  as it seems to stop the output parameter values being written to the
#  ndftrace parameter file in ~/adam. We assume the first pixel axis is a
#  spatial axis, and that pixels are square.
$KAPPA_DIR/ndftrace $in fullframe > /dev/null
set insize = `$KAPPA_DIR/parget fpixscale\(1\) ndftrace`

#  Get the number of pixel axes in the input NDF.
set ndim = `$KAPPA_DIR/parget ndim ndftrace`

#  Calculate the zoom factor needed to get output pixels equal to $outsize
set zoom = `$KAPPA_DIR/calc exp="pa/pb" pa=$insize pb=$outsize`

#  Create a MatrixMap that produces the required zoom on the first two
#  (spatial) axes, and leaves any third axis unchanged.
if( $ndim == 2 ) then
   set matrix = \[$zoom,$zoom\]
else if( $ndim == 3 ) then
   set matrix = \[$zoom,$zoom,1\]
else
   echo "Can only handle 2 or 3 dimensional input NDFs"
   exit
endif
$ATOOLS_DIR/astmatrixmap nin=$ndim nout=$ndim form=1 matrix="$matrix" \
                         options=! result=map.ast

#  Get the FWHM for the gaussian kernel, 1/sqrt(2) of the full beam
#  width (i.e. twice the Airy radius), and convert to input pixels.
set fwhm = `$KAPPA_DIR/calc exp="(pa)/(sqrt(2.0)*pb)" pa=$airy \
                                                      pb=$insize`

#  Report:
echo
echo "   Input pixel size: $insize (arc-sec)"
echo "   Output pixel size: $outsize (arc-sec)"
echo "   FWHM: $fwhm (input pixels)"
echo

#  Use the matrixmap to re-sample the input image, smoothing it with a gaussian
#  at the same time.
$KAPPA_DIR/regrid $in $out rebin=no method=gauss params=\[0,$fwhm\] \
                  conserve=no mapping=map.ast quiet

#  Do the same to the EXP_TIME NDF stored in the SMURF extension (except
#  the EXP_TIME array is always 2D).
if( $ndim == 3 ) then
   $ATOOLS_DIR/astmatrixmap nin=2 nout=2 form=1 matrix=\[$zoom,$zoom\] \
                            options=! result=map.ast
endif

$KAPPA_DIR/regrid $in.more.smurf.exp_time $out.more.smurf.exp_time rebin=no \
                  conserve=no method=gauss params=\[0,$fwhm\] mapping=map.ast quiet

#  Clean up
rm -f map.ast
