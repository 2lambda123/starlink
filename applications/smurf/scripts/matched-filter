#!/bin/tcsh
#+
#  Name:
#    matched-filter

#  Purpose:
#    Applies a matched filter to the supplied input NDF by smoothing it
#    using either a supplied PSF image or an automatically generated
#    Gaussian PSF. Each output pixel value is given by:
#
#                      sum( (psf_i/input_variance_i)*input_data_i )
#      output_data  =  --------------------------------------------
#                           sum( psf_i**2/input_variance_i )
#
#    where the sum is over all input pixels that contribute to the output
#    pixel. The variances stored with the resulting image are given by:
#
#                                      1.0
#      output_variance = --------------------------------
#                        sum( psf_i**2/input_variance_i )

#  Invocation:
#    matched-filter [-np] [-s fwhm] <in> <out>  [<psf>]

#  Options:
#    -np - If the script creates a new PSF (i.e. if the <psf> parameter is
#          not supplied on the command line), then normalise the new PSF to
#          a peak value of unity. Without this option, the new PSF is
#          normalised to a total data sum of unity.
#    -s  - If the script creates a new PSF (i.e. if the <psf> parameter is
#          not supplied on the command line), then a slowly varying background
#          is estimated and removed from the supplied image before the filter
#          is applied. The background to remove is created by smoothing the
#          image with a wide Gaussian. The FWHM of this Gaussian should be
#          specified (in arc-seconds) on the command line after the "-s"
#          option. In order to compensate for this, the PSF is also
#          processed in the same way (i.e. it is smoothed using the wide
#          Gaussian and the smoothed PSF is then removed from the original
#          PSF).

#  Parameters:
#    <in> - The input image.
#    <out> - The output image.
#    <psf> - An optional PSF image.

#  Notes:
#    - If no PSF is supplied, a Gaussian PSF is used with FWHM
#      equal to the Airy disk radius.
#    - The centre of the supplied PSF is assumed to be at pixel (0,0).
#    - The PSF must not contain any bad values.
#    - The input must contain a variance component.
#    - The input and PSF must contain floating point values.

#  Authors:
#    DSB: David S. Berry (JAC)

#  History:
#    2010-1-05 (DSB):
#       Initial revision
#    2010-4-13 (DSB):
#       - Correct the expression used for calculating the output variances.
#       - By default, normalise the PSF to a total data sum of unity, and
#         provide the "-np" option to retain the old behaviour (normalising
#         to a peak value of unity).
#       - Added the "-s" option.
#    2010-4-14 (DSB):
#       - Changed to use Ed's way of removing background variations.
#    2010-5-26 (DSB):
#       - Avoid truncating the smoothed PSF when using the "-s" option.
#       - Improve trapping of errors due to missing FITS headers
#       - Account for bad pixels when correcting for the total data sum
#         in the psf (by setting the new CONVOLVE parameter "NORM" to FALSE).
#    2010-5-27 (DSB):
#       - When creating a PSF that will later be smoothed to remove backgrounds,
#         create the PSF with the required final size, rather than creating it
#         small and then padding it with zeros.
#    2010-6-7 (DSB):
#       - Copy the input NDF data units to the output NDF.

#  Copyright:
#     Copyright (C) 2010 Science & Technology Facilities Council.
#     All Rights Reserved.

#  Licence:
#     This program is free software; you can redistribute it and/or
#     modify it under the terms of the GNU General Public License as
#     published by the Free Software Foundation; either version 3 of
#     the License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be
#     useful, but WITHOUT ANY WARRANTY; without even the implied
#     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#     PURPOSE. See the GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public
#     License along with this program; if not, write to the Free
#     Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#     MA 02111-1307, USA

#-

#  Search the command line for options starting with a minus sign, and set
#  shell variables to the corresponding values. Also copy non-option arguments
#  (e.g. NDF names) to a separate list held in "arg_list".
   set norm = sum
   set arg_list = ""
   set fwhm_bg = ""

   while( $# > 0 )
      set arg = $1
      shift

      if( "$arg" == "-np" ) then
         set norm = peak

      else if( "$arg" == "-ns" ) then
         set norm = sum

      else if( "$arg" == "-s" ) then
         set fwhm_bg = $1
         shift

      else
         set arg_list = ($arg_list $arg)
      endif

   end

#  Check the input and output NDFs and the PSF were specified on the
#  command line.
if( $#arg_list < 2 ) then
   echo "Usage: matched-filter [-np] [-s fwhm] <in.sdf> <out.sdf> [<psf.sdf>]"
   exit
endif

#  Ensure ADAM tasks fail rather than prompt for parameter values
setenv ADAM_NOPROMPT 1

#  The supplied NDFs may or may not have a ".sdf" suffix. Ensure we have the
#  NDF names without ".sdf".
set dir = `dirname $arg_list[1]`
set base = `basename $arg_list[1] .sdf`
set in = "$dir/$base"
if( ! -e "$in.sdf" ) then
   echo "Cannot find $in.sdf"
   exit
endif

set dir = `dirname $arg_list[2]`
set base = `basename $arg_list[2] .sdf`
set out = "$dir/$base"

# Get the input pixel size, in arc-second. We assume the first pixel axis
# is a spatial axis, and that pixels are square.
$KAPPA_DIR/ndftrace $in fullframe quiet
set insize = `$KAPPA_DIR/parget fpixscale\(1\) ndftrace`

# Get the input data units.
set units = `$KAPPA_DIR/parget units ndftrace`

# If a background fwhm was given on the command line, convert it
# from arc-sec to input pixels, and double it (we will use 2*FWHM as the
# half size of the PSF image.
if( "$fwhm_bg" != "" ) then
   set fwhm_pix = `$KAPPA_DIR/calc exp="'pa/pb'" pa=$fwhm_bg pb=$insize`
   set dim = `$KAPPA_DIR/calc exp="nint(2*pa)" pa=$fwhm_pix`
else
   set fwhm_pix = 0
   set dim = 0
endif

# If a PSF was given, check it exists.
if( $#arg_list > 2 ) then
   set dir = `dirname $arg_list[3]`
   set base = `basename $arg_list[3] .sdf`
   set psf = "$dir/$base"
   if( ! -e "$psf.sdf" ) then
      echo "Cannot find $psf.sdf"
      exit
   endif

# If no PSF was supplied, create a Gaussian PSF with FWHM equal to the
# Airy disk radius.
else

# Check the data is from JCMT.
   set telescope = `$KAPPA_DIR/fitsmod $in edit=print keyword=TELESCOP`

   echo $telescope | grep '\!\!\|TELESCOP' >& /dev/null
   if( $status == 0 ) then
      echo "Error determining telescope name"
      echo $telescope
      exit
   endif

   if( $telescope != "JCMT" ) then
      echo "Data is not from JCMT"
      exit
   endif

# Get the wavelength (in metres).
   set wavelen = `$KAPPA_DIR/fitsmod $in edit=print keyword=WAVELEN`

   echo $wavelen | grep '\!\!\|WAVELEN' >& /dev/null
   if( $status == 0 ) then
      echo "Error determining wavelength"
      echo $wavelen
      exit
   endif

# Calculate the radius of the Airy disk in arc-sec, assuming a
# mirror diameter of 15.0 metres.
   set airy = `$KAPPA_DIR/calc exp="'(1.22*pa/15.0)*3600.0*180.0/3.1415927'" \
                           pa=$wavelen`

# Convert Airy radius from arc-sec to input pixels.
   set airy_pix = `$KAPPA_DIR/calc exp="'pa/pb'" pa=$airy pb=$insize`

# Get the half-size for the PSF image. This is the larger of the number
# of input pixels in 2 Airy radii, and the twice the background smoothing
# FWHM (if supplied)
   set npix = `$KAPPA_DIR/calc exp="'2*pa'" pa=$airy_pix`
   if( $npix < $dim ) then
      set npix = $dim
   endif

# Create a flat image with value zero with bounds (-npix:npix,-npix:npix)
   $KAPPA_DIR/creframe lbound=\[-$npix,-$npix\] ubound=\[$npix,$npix\] \
                       mode=fl mean=0 out=mf_temp1

# Set the central pixel to a value of 1.0
   $KAPPA_DIR/chpix in=mf_temp1 out=mf_temp2 section=\"0,0\" newval=1

# Smooth this spike using a Gaussian kernel of FWHM equal to the Airy radius.
# This produces a Gaussian PSF image. NOTE, the FWHM is the Airy radius, not
# the diameter as might be expected. In practice it seems like the FWHM of
# the point sources in a SCUBA-2 map is much closer to the Airy radius than
# the Airy diameter. GAUSMOOTH preserves total data sum, so the output PSF
# image will have a total data sum of unity.
   $KAPPA_DIR/gausmooth in=mf_temp2 fwhm=$airy_pix out=mf_psf

# If required, normalise the PSF to a peak value of 1.0 instead of a total
# value of 1.0
   if( $norm == peak ) then
      $KAPPA_DIR/stats mf_psf quiet
      set peak = `$KAPPA_DIR/parget maximum stats`
      $KAPPA_DIR/cdiv in=mf_psf scalar=$peak out=mf_temp3
      mv mf_temp3.sdf mf_psf.sdf
   endif

# Use the new PSF.
   set psf = mf_psf

endif

# If a background fwhm was given on the command line, remove a background
# from the supplied image and from the PSF.
if( "$fwhm_bg" != "" ) then

#  Smooth the input image with a Gaussian of this FWHM to get an estimate
#  of the background in the image.
   $KAPPA_DIR/gausmooth in=$in fwhm=$fwhm_pix out=mf_temp1

#  Remove this background from the supplied image.
   $KAPPA_DIR/sub in1=$in in2=mf_temp1 out=mf_in

#  Use this instead of the supplied input image in future.
   set in = mf_in

#  Expand the PSF to cover +/- 2*FWHM of the Gaussian, filling the
#  padded areas with zeros.
   $KAPPA_DIR/nomagic in=$psf\(-$dim\:$dim,-$dim\:$dim\) out=mf_temp0 repval=0 quiet

#  Smooth the enlarged PSF with a Gaussian of this FWHM to get an estimate
#  of the "background" (sort of) in the PSF.
   $KAPPA_DIR/gausmooth in=mf_temp0 fwhm=$fwhm_pix out=mf_temp1

#  Remove this background from the PSF.
   $KAPPA_DIR/sub in1=mf_temp0 in2=mf_temp1 out=mf_psf2

#  Use this instead of the original PSF in future.
   set psf = mf_psf2

endif

# From Per's document the value of each output pixel is as follows:
#
#                   sum( (psf_i/input_var_i)*input_data_i )
#   output_data  =  ---------------------------------------
#                   sum( psf_i**2/input_var_i )
#
# where the sums are over "i" - all the pixels that have non-zero value
# in the PSF. Thus the output is the ratio of two images:
#
#   output_data = A/B
#
#   A = sum( (psf_i/input_var_i)*input_data_i )
#     = sum( psf_i*( input_data_i/input_var_i ) )
#
#   B = sum( psf_i**2/input_var_i )
#     = sum( psf_i**2*( 1.0/input_var_i) )
#
# In words, A is formed by dividing the data array by the variance array
# and then smoothing the result using the supplied PSF (without normalising
# by the sum of the PSF values as is often done). B is formed by taking the
# reciprocal of the variances and smoothing then with the square of the
# PSF, again without any normalisation.
#
# First get the ratio of the data to the variance in the input image.
$KAPPA_DIR/maths exp="IA/VA" ia=$in out=mf_temp1

# Smooth this using the supplied psf, without normalising the output. This
# command occasionally (but not always) issues the following error. It is not
# fatal, but should be investiagted ASAP...
#
# !! The ancestor NDF '/data/scuba2/work/matched-filter/mf_temp1' was included
# !     twice within the provenance structure, but each occurrence specifies a
# !     different set of parents.
# !  Application exit status SAI__ERROR, Error
# !  in=mf_temp1 out=mf_a psf=mf_psf2 xcentre=0 ycentre=0
#
$KAPPA_DIR/convolve in=mf_temp1 out=mf_a psf=$psf xcentre=0 ycentre=0 \
                    norm=no

# Now go on to create image B. Get the reciprocal of the variances from
# the input image.
$KAPPA_DIR/maths exp="1/VA" va=$in out=mf_temp6

# Get the square of the PSF.
$KAPPA_DIR/mult in1=$psf in2=$psf out=mf_temp3

# Smooth the reciprocal of the variances using the squared PSF.
$KAPPA_DIR/convolve in=mf_temp6 out=mf_b psf=mf_temp3 xcentre=0 ycentre=0 \
                    norm=no

# The output image is the ratio of A and B.
$KAPPA_DIR/div in1=mf_a in2=mf_b out=$out

# The variance in the output image is the reciprocal of B.
$KAPPA_DIR/maths exp="1/IA" ia=mf_b out=mf_temp5
$KAPPA_DIR/setvar ndf=$out from=mf_temp5 comp=data

# Copy the input NDF units to the output NDF.
$KAPPA_DIR/setunits $out \'$units\'

#  Clean up.
rm -f mf_in.sdf mf_psf2.sdf mf_temp1.sdf mf_temp2.sdf mf_temp3.sdf \
      mf_psf.sdf mf_a.sdf mf_b.sdf mf_temp0.sdf mf_temp5.sdf \
      mf_temp6.sdf

