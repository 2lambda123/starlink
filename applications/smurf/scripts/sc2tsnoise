#!/bin/tcsh

source $SMURF_DIR/smurf.csh > /dev/null
source $CONVERT_DIR/convert.csh > /dev/null
source $KAPPA_DIR/kappa.csh > /dev/null

if ( ($#argv < 3) || ($#argv > 6) ) then
    echo "sc2tsnoise: calculate SCUBA-2 time-series noise (effective NEPs)"
    echo " "
    echo "usage:"
    echo "    sc2tsnoise <obsdir.txt> <nepfile.txt> <outdir> [-tseries] [-pspec] [-clean]"
    echo " "
    echo "parameters:"
    echo "    obsdir.txt  a text file with path to SCUBA-2 obs dirs each line"
    echo "    nepfile.txt output text file containing effective NEPs etc."
    echo "    outdir      directory to store intermediate files (NEP maps etc.)"
    echo "    -tseries    if set write cleaned time-series to <outdir>"
    echo "    -pspec      if set write noise power spectra to <outdir>"
    echo "    -clean      if set clean <outdir> before starting"
    echo " "
    echo "notes:"
    echo " o <nepfile.txt> is rewritten each time the script is executed, so"
    echo "   be sure to make a copy if you care about the results of a long"
    echo "   run before re-starting!"
    echo " o a single flatfield may be used for multiple noise observations,"
    echo "   so if you run the script multiple times you can save some"
    echo "   execution time if you _don't_ set -clean, since the old flatfield"
    echo "   will be cached in <outdir>"
    echo " o the script just checks the first 4 files (subscans) for"
    echo "   shutter-closed and shutter-open files suitable for noise"
    echo "   measurements. It will only reduce one shutter-open file, but"
    echo "   it will reduce multiple shutter-closed files."
    echo " o to improve execution time only the first 2000 samples (10s)"
    echo "   of each subscan are analyzed. This should be fine since we"
    echo "   are only measuring the 2--20 Hz noise level."
    echo " "
    echo "example:"
    echo "    ls -d /jcmtdata/raw/scuba2/s4?/2011????/0???? > obsdir.txt"
    echo "    sc2tsnoise obsdir.txt effnep_450_2011.txt out"
    echo " "

    goto done
endif

# parse the command line
set filenames = $1   # file with path names to observations
set nepfile = $2     # name of text file to store NEPs
set outdir = $3      # name of subdir to but output files

shift
shift
shift

set writetseries = 0 # write out cleaned time-series?
set writepspec = 0   # write out power spectra?
set cleanout = 0     # clean outdir before starting?

while ( $# > 0 )
    set arg = $1
    shift

    if ( "$arg" =~ "-tseries" ) then
        set writetseries = 1
    else if ( "$arg" =~ "-pspec" ) then
        set writepspec = 1
    else if ( "$arg" =~ "-clean" ) then
        set cleanout = 1
    endif
end

# ensure ADAM tasks fail rather than prompting
setenv ADAM_NOPROMPT 1

# ensure that failed ADAM task returns a status of 1
setenv ADAM_EXIT 1

# intialize output file/directories
if ( ! -e $outdir ) then
    mkdir $outdir > /dev/null
else if ( $cleanout == 1 ) then
    rm $outdir/*
endif

if ( -e "$nepfile" ) rm "$nepfile" > /dev/null
echo SUBARR OBSDATE OBSNUM SUBSCAN TIMEDATE EFFNEP NBOLO MEANTRANS OBJECT SEQTYPE SHUTTER DARKHEAT PIXHEAT ELSTART TAU_ST TAU_EN AIRMASS WEIGHTRESP WEIGHTNEP > $nepfile
echo ------ ------- ------ ------- -------- ------ ----- --------- ------ ------- ------- -------- ------- ------- ------ ------ ------- ---------- --------- >> $nepfile

# loop over all of the observation directories that were specified
foreach obsdir ( `cat $filenames` )

    echo === Processing $obsdir ===

    # remove temp files from last time
    if (-e noise.sdf) rm noise.sdf > /dev/null
    if (-e noise_nep.sdf) rm noise_nep.sdf > /dev/null
    if (-e noise_flat.sdf) rm noise_flat.sdf > /dev/null
    if (-e noise_flat_ext.sdf) rm noise_flat_ext.sdf > /dev/null
    if (-e trans.sdf) rm trans.sdf > /dev/null
    if (-e invvar.sdf) rm invvar.sdf > /dev/null
    if (-e respweight.sdf) rm respweight.sdf > /dev/null
    if (-e nepweight.sdf) rm nepweight.sdf > /dev/null

    # obtain the obs num, date and subarray from obsdir
    set obsnum = `basename $obsdir`
    set temp = `dirname $obsdir`
    set obsdate = `basename $temp`
    set temp = `dirname $temp`
    set subarr = `basename $temp`

    # this is the root of the data tree
    set basedir = `dirname $temp`

    # set this flag once we have done an open-shutter sky measurement
    set havesky = 0

    # set this flag to ndf name if we encounter a skyflat or darkflat
    # when looking at the first few sequences
    set haveskyflat = 0
    set havedarkflat = 0

    # Loop over the first few files. For normal science observations we
    # will have a dark noise, followed by a skyflat, and then shutter-open
    # science. We will try up to file 4 to get the dark and shutter-open
    # noise measurements

    foreach filenum (1 2 3 4)

        # do several checks before trying to do measurement
        set ok = 1
        set meantrans = "-1"

        set thisndf = $obsdir/$subarr$obsdate\_$obsnum\_000$filenum

        # does this file exist? If so, see if it is accessible, and
        # figure out what type of file it is, and what the flatfield is

        if ( -e $thisndf.sdf ) then
            # if these failed the data are probably messed up
            set shutter = `fitsval $thisndf SHUTTER`
            if ( $? != 0 ) then
                echo Could not read SHUTTER in FITS header of $thisndf
                set ok = 0
            endif

            set seqtype = `fitsval $thisndf SEQ_TYPE`
            if ( $? != 0 ) then
                echo Could not read SEQ_TYPE in FITS header of $thisndf
                set ok = 0
            endif

            # if this is a shutter-open fastflat then simply remember
            # it for future use. Likewise for dark fastflat. If
            # seqtype is flatfield or # FASTFLAT skip processing for
            # noise.

            if ( $ok == 1 ) then

                if ( "$seqtype" =~ "FASTFLAT") then
                    if ("$shutter" =~ "0") set havedarkflat = $thisndf
                    if ("$shutter" =~ "1") set haveskyflat = $thisndf
                endif

                if ( ("$seqtype" =~ "flatfield") || \
                    ("$seqtype" =~ "FASTFLAT") ) then
                    set ok = 0
                endif
            endif

            # If we're still OK we don't have a FASTFLAT. Try to identify
            # an appropriate flatfield
            if ( $ok == 1 ) then

                # this is the flatfield referred to in the header. We pick
                # off the subarray, date and obs number so that we can
                # re-process the raw data if needed. Assume it lives in
                # the same tree as the main observation
                set flatfile = `fitsval $thisndf FLAT`
                set flatsub  = `echo $flatfile | cut -b 1-3`
                set flatdate = `echo $flatfile | cut -b 4-11`
                set flatobs  = `echo $flatfile | cut -b 13-17`

                # set flatfile to the first raw data file from the flat obs
                set flatfile = $basedir/$flatsub/$flatdate/$flatobs
                set flatfile = $flatfile/$flatsub$flatdate\_$flatobs\_0001.sdf

                # dark observation. Make sure that flatfile exists and
                # is also shutter-closed
                if ( "$shutter" =~ "0" ) then

                    if ( "$havedarkflat" !~ "0" ) then
                        # override flatfile with darkflat if we have it
                        set flatfile = $havedarkflat

                        set temp = `basename $flatfile`
                        set flatsub  = `echo $temp | cut -b 1-3`
                        set flatdate = `echo $temp | cut -b 4-11`
                        set flatobs  = `echo $temp | cut -b 13-17`
                    else
                        # otherwise look for flatfield in header

                        if ( -e $flatfile ) then

                            echo flat is $flatfile

                            set flatshutter = `fitsval $flatfile SHUTTER`

                            if ( $? == 0 ) then
                                if ( "$flatshutter" !~ "0" ) then
                                    echo Flatfield $flatfile for dark $thisndf \
                                        has shutter open!
                                    set ok = 0
                                else
                                    # if we get here the data look good. Set
                                    # flatfile to a wildcard because we need to
                                    # process several header steps in different
                                    # files

                                    set flatfile = "$basedir/$flatsub/$flatdate/$flatobs/$flatsub$flatdate\_$flatobs\_????.sdf"
                                endif
                            else
                                # problem reading fits header
                                echo Could not read dark flat $flatfile FITS header
                                set ok = 0
                            endif
                        else
                            echo Dark flat $flatfile does not exist
                            set ok = 0
                        endif
                    endif
                endif

                # shutter open. If we don't have a skyflat then check to see
                # if flat is a stepped shutter-open flatfield
                if ( "$shutter" =~ "1" ) then

                    # if havesky was set we don't need to continue
                    if ( $havesky == 1 ) set ok = 0

                    if ( "$haveskyflat" !~ "0" ) then
                        # override flatfile with skyflat if we have it
                        set flatfile = $haveskyflat

                        set temp = `basename $flatfile`
                        set flatsub  = `echo $temp | cut -b 1-3`
                        set flatdate = `echo $temp | cut -b 4-11`
                        set flatobs  = `echo $temp | cut -b 13-17`
                    else
                        # otherwise look for flatfield in header
                        if ( -e $flatfile ) then

                            set flatshutter = `fitsval $flatfile SHUTTER`

                            if ( $? == 0 ) then
                                if ( "$flatshutter" !~ "0" ) then
                                    echo Flatfield $flatfile for sky \
                                        $thisndf has shutter closed!
                                    set ok = 0

                                else
                                    # looks good, processing multi heater-steps
                                    set flatfile = "$basedir/$flatsub/$flatdate/$flatobs/$flatsub$flatdate\_$flatobs\_????.sdf"
                                endif

                            else
                                # problem reading fits header
                                echo Could not read sky flat $flatfile FITS header
                                set ok = 0
                            endif
                        else
                            echo Stepped sky flat $flatfile does not exist
                            set ok = 0
                        endif
                    endif

                endif
            endif

            # if we get here OK, then we have established that we have both
            # useful shutter open or closed data and a flatfield.
            if ( $ok == 1 ) then
                set utdate = `fitsval $thisndf UTDATE`
                if ( ($? != 0) || ("$utdate" =~ "") ) set utdate = -1

                set timedate = `fitsval $thisndf DATE-OBS`
                if ( ($? != 0) || ("$timedate" =~ "") ) set timedate = -1

                set object = `fitsval $thisndf OBJECT | sed 's/ /_/g'`
                if ( ($? != 0) || ("$object" =~ "") ) set object = -1

                set darkheat = `fitsval $thisndf DARKHEAT`
                if ( ($? != 0) || ("$darkheat" =~ "") ) set darkheat = -1

                set pixheat = `fitsval $thisndf PIXHEAT`
                if ( ($? != 0) || ("$pixheat" =~ "") ) set pixheat = -1

                set elstart = `fitsval $thisndf ELSTART`
                if ( ($? != 0) || ("$elstart" =~ "") ) set elstart = -1

                set tau_st = `fitsval $thisndf WVMTAUST`
                if ( ($? != 0) || ("$tau_st" =~ "") ) set tau_st = -1

                set tau_en = `fitsval $thisndf WVMTAUEN`
                if ( ($? != 0) || ("$tau_en" =~ "") ) set tau_en = -1

                set airmass = `fitsval $thisndf AMSTART`
                if ( ($? != 0) || ("$airmass" =~ "") ) set airmass = -1

                echo "$object : file $filenum"
                echo "    shutter is $shutter"
                echo "    seq_type is $seqtype"
                echo "    noise is $thisndf"
                echo "    flat is $flatfile"

                # make a local copy of the noise, using only first
                # 2000 samples (or full length if shorter) which
                # should be plenty to just measure a white-noise level

                ndftrace $thisndf > /dev/null
                set len = 2000
                set maxlen = `parget dims ndftrace | awk '{split($0,a," "); print a[3]}'`
                if ( $maxlen < $len ) set len = $maxlen

                ndfcopy "$thisndf(,,1:$len)" noise.sdf > /dev/null
                chmod u+w noise.sdf

                # calculate flatfield if needed
                set flatout = $outdir/$flatsub$flatdate\_$flatobs\_flat.sdf
                set respndf = $outdir/$flatsub$flatdate\_$flatobs\_resp

                if ( ! -e $flatout ) then
                    calcflat "$flatfile" out=$flatout method=polynomial \
                    resp=$respndf respmask > /dev/null

                    if ( $? != 0 ) then
                        echo Could not calculate flatfield from "$flatfile"
                        set ok = 0
                    endif
                endif

                # try to copy the new flatfield to the noise observation
                if ( $ok == 1 ) then
                    copyflat $flatout noise accept > /dev/null

                    if ( $? != 0 ) then
                        echo Could not copy flatfield $flatout
                        set ok = 0
                    endif
                endif

                # calculate the NEP
                if ( $ok == 1 ) then

                    if ( $writetseries == 1 ) then
                        set tfile = \
                        $outdir/$subarr$obsdate\_$obsnum\_000$filenum\_tseries
                    else
                        set tfile = "!"
                    endif

                    if ( $writepspec == 1 ) then
                        set pfile = \
                        $outdir/$subarr$obsdate\_$obsnum\_000$filenum\_pspec
                    else
                        set pfile = "!"
                    endif

                    calcnoise noise noise_nep power="$pfile" tseries="$tfile" \
                        noicliplog noicliplow=3 noicliphigh=! \
                        nepcliplog nepcliplow=3 nepcliphigh=! \
                        accept > /dev/null

                    set effnep = `parget effnep calcnoise`
                    if ( $? != 0 ) set effnep = -1

                    set nbolo = `parget nepgoodbol calcnoise`
                    if ( $? != 0 ) set nbolo = -1

                    if ( $? != 0 ) then
                        echo Could not calculate noise
                        set ok = 0
                    else
                        set nepndf = `basename $thisndf`
                        set nepndf = $outdir/$nepndf\_nep
                        ndfcopy noise_nep.more.smurf.nep $nepndf

                        # now we can calculate inverse-noise^2 weighted
                        # responsivity
                        pow $nepndf -2 invvar > /dev/null
                        mult $respndf invvar respweight > /dev/null

                        stats respweight > /dev/null
                        set sumrespweight = `parget total stats`
                        if ( $? != 0 ) set sumrespweight = -1

                        stats invvar > /dev/null
                        set suminvvar = `parget total stats`
                        if ( $? != 0 ) set suminvvar = 1

                        set weightresp = \
                        `calc "pa/pb" pa=$sumrespweight pb=$suminvvar prec=_d`
                        if ( $? != 0 ) set weightresp = -1

                        # similarly calculate inverse-noise^2 weighted NEP
                        mult $nepndf invvar nepweight > /dev/null
                        stats nepweight > /dev/null
                        set sumnepweight = `parget total stats`
                        if ( $? != 0 ) set sumnepweight = -1

                        set weightnep = \
                        `calc "pa/pb" pa=$sumnepweight pb=$suminvvar prec=_d`
                        if ( $? != 0 ) set weightnep = -1

                    endif
                endif

                # calculate extinction from flatfielded data (to pick
                # up masked bolometers), and then calculate a mean
                # value for the transmission from the ratio of the two

                if ( ($ok == 1) && ("$shutter" =~ "1") ) then

                    flatfield noise noise_flat > /dev/null

                    extinction noise_flat noise_flat_ext hasskyrem tausrc=auto \
                        method=adaptive accept > /dev/null

                    div noise_flat noise_flat_ext trans > /dev/null

                    if ( -e trans.sdf ) then
                        stats trans > /dev/null

                        if ( $? == 0 ) then
                            set meantrans = `parget mean stats`
                            if ( $? != 0 ) set meantrans = -1
                        else
                            echo Error running "KAPPA:STATS"
                            set ok = 0
                        endif

                    else
                        echo Error calculating transmission
                        set ok = 0
                    endif
                endif

            endif


            # if OK is set, we got useful results to report
            if ( $ok == 1 ) then
                if ( ("$shutter" =~ "1") && ( $havesky != 1 ) ) set havesky = 1

                echo "    trans=$meantrans effNEP=$effnep"

                echo $subarr $obsdate $obsnum 000$filenum $timedate $effnep $nbolo $meantrans $object $seqtype $shutter $darkheat $pixheat $elstart $tau_st $tau_en $airmass $weightresp $weightnep >> $nepfile
            endif

        endif
    end

end

done:
exit 0
