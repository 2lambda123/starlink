#!/bin/tcsh

#  Set defaults
set sum_method = PSF
set amp_method = PSF
set amp_only = 0
set diam = " "
set perc = 95
set error = " "
set inlist = " "
set outtable = " "
set outimage = " "
set help = 0
set narg = 0

#  Classify the first word left on the command line, and then shift all
#  words one to the left so that the second word becomes the first word.
while( $# > 0 )

#  Does the first word look like an option?
   echo "$argv[1]" | grep -q "^-"
   if( $status == 0 ) then
      set option = 1
   else
      set option = 0
   endif

#  If the first word is a known option, set the default value for the option
#  and then look at the second word to see if it looks like a value for the
#  option. If it does, use it in place of the default value and shift the
#  argument list so that it is not re-used.
   if( "$argv[1]" == "-a" ) then
      set sum_method = APERADD

      if( $# > 1 ) then
         echo "$argv[2]" | grep -q '[a-zA-Z]'
         if( $status == 1 ) then
            set diam = "$argv[2]"
            shift
         endif
      endif

   else if( "$argv[1]" == "-e" ) then
      set error = "1.0"

      if( $# > 1 ) then
         echo "$argv[2]" | grep -q '[a-zA-Z]'
         if( $status == 1 ) then
            set error = "$argv[2]"
            shift
         endif
      endif

   else if( "$argv[1]" == "-r" ) then
      if( $# > 1 ) then
         echo "$argv[2]" | grep -q '[a-zA-Z]'
         if( $status == 1 ) then
            set perc = "$argv[2]"
            shift
         endif
      endif

   else if( "$argv[1]" == "-p" ) then
      set amp_method = STATS

   else if( "$argv[1]" == "-b" ) then
      set amp_only = 1

   else if( "$argv[1]" == "-h" || "$argv[1]" == "--help" ) then
      set help = 1

#  Report an error if it looks like an unknown option.
   else if( $option == 1 ) then
      echo "Unknown option: $argv[1]"
      set help = 1

#  If the current word is not an option, use it as the next positional
#  argument.
   else
      if( $narg == 0 ) then
         set inlist = "$argv[1]"
      else if( $narg == 1 ) then
         set outtable = "$argv[1]"
      else if( $narg == 2 ) then
         set outimage = "$argv[1]"
      else
         echo "Too many arguments"
         set help = 1
      endif
      @ narg = $narg + 1
   endif

#  Shift the command line words so that the second word becomes the first
#  word (and the first word is lost)
   shift
end

#  Check enough arguments were supplied.
if( $narg < 2 ) then
   set help = 1
endif

#  Issue help and exit if required.
if( $help == 1 ) then
   cat << FOO

Short Map Analysis Script

Usage: smas [-a diam] [-b] [-e error] [-r perc] [-p] <in-list> <out-table> [<out-image>]

   option:
      -a: Specifies that the catalogue SUM column values (the total
          data sum) should be the integrated data value within a
	  circular aperture centred on the source peak position,
	  with radius specified by "diam" (a numerical value in
	  arc-seconds). This is calculated using KAPPA:APERADD.
	  If this option is not supplied, the SUM value is the
	  integrated value under the model source calculated by
	  KAPPA:PSF. If "diam" is not supplied, defaults of 30 and
	  15 are used for 850 and 450 um data respectively.

      -b: Specifies that the catalogue should contain only ROW, COL and
          AMP only. Using this option also implies the "-p" option.
          This reduces the run-time for script significantly.

      -e: Specifies the maximum allowed error (in arc-seconds) between the
          source position as determined by KAPPA:BEAMFIT and KAPPA:PSF.
          If the discrepancy in X or Y is greater than this value, then
          the shortmap or bolomap is not included in the returned catalogue
          or image. If the -e option is unspecified, then no sources are
          rejected. If no "error" value is supplied, a default of 1
          arc-second is used.

      -p: Specifies that the catalogue AMP column values (the peak
          value in the source) should be the maximum data value within
	  a box of size 20 pixels centred on the expected source position.
          If this option is not supplied, the AMP value is the peak value
          of the model source calculated by KAPPA:PSF.

      -r: The following number ("perc") specifies the minimum percentage of
          good pixel values in a small box around the expected source position.
          Sources that have insufficient good pixels in the box are reported
          and then ignored. If the "-r" option is not supplied (or is supplied
          without a "perc" value), a default of 95 is used.

   arguments:
      <in-list>: The path to an NDF holding a SCUBA-2 map of a point
          source (or moon). Alternativelty, a text file containing the
	  paths to one or more such NDFs can be supplied. If an NDF
	  contains a MORE.SMURF.SHORTMAPS or MORE.SMURF.BOLOMAPS
	  extension item, then the NDFs in the SHORTMAPS or BOLOMAPS
	  array are used in place of the supplied NDF (SHORTMAPS is used
	  in preference to BOLOMAPS if both are present). NOTE, all the
	  data must be for the same subarray.

      <out-table>: the name of a text file in which to store a
          catalogue containing details of the source in each
	  supplied map, as described below. This catalogue can
	  be displayed and analysed using 'topcat -f ascii
	  <out-table>'.

      <out-image>: if supplied, and if the input data contains bolomaps,
          a 2D NDF containing the SUM (or AMP if the "-b" option is used)
          values for each bolometer is created with the name given by
          <out-image>. The FITS headers from the first input NDF are
          copied to the output NDF.

   Description:

      With the exception of moon maps, each NDF is processed in the
      same way. The KAPPA:PSF command is used to locate the accurate
      source centre and fit it using an elliptical Gaussian-like
      model. The details of the model are then appended to an output
      text file as a new row.

      The resulting output catalogue has a row for every input NDF,
      and contains the following columns:

      - TAI: The MJD (in the TAI timescale) associated with the NDF
      - UTC: The UTC date and time string associated with the NDF
      - SEQSTART - RTS index number of first frame
      - SEQEND - RTS index number of last frame
      - DLON: The longitude offset at the centre of the source, in arc-seconds
      - DLAT: The latitude offset at the centre of the source, in arc-seconds
      - AMP: The peak value in the source
      - SUM: The total data sum in the source. This is the integral
        of the Gaussian-like model calculated by KAPPA:PSF
      - FWHM: The seeing-disc size: the full width at half maximum
        across the minor axis of the source (arc-seconds)
      - AXISR: The axis ratio of the source: the ratio of the major
        axis length to that of the minor axis.
      - GAMMA: The radial fall-off parameter of the source. A gamma
        of two would be a Gaussian.
      - ORIENT: The position angle (measured from north through east)
        of the major axis of the source, in degrees.
      - NDF: The path to the NDF
      - ROW: The row number for the bolometer (if known)
      - COL: The column number for the bolometer (if known)

      For comparison, a set of extra columns is appended to these
      that give the source properties as calculated by KAPPA:BEAMFIT
      rather than KAPPA:PSF. These columns have the same names, but
      are prefixed by the letter B. Note, BEAMFIT assumes a gamma
      value of 2.0  (i.e. a pure Gaussian) and so there is no BGAMMA
      column in the output catalogue.

      The SEQSTART and SEQEND columns will be set to 'null' if the
      supplied map does not contain these FITS headers.

      If the supplied data is for the moon, then all the above is
      ignored and the output contains the following columns:

      - SUM: The integrated value within a 35 arc-minute aperture
        centred on (0,0)
      - ROW: The row number for the bolometer (if known)
      - COL: The column number for the bolometer (if known)

FOO

   exit
endif

# Ensure we can redirect output safely
unset noclobber

#  Ensure ADAM tasks fail rather than prompt for parameter values
setenv ADAM_NOPROMPT 1

#  Ensure ADAM sets the shell status variable when each command exits
setenv ADAM_EXIT 1

#  See if the first positional argument is an NDF or a text file. Attempt
#  to open it as an NDF. If succesful, write a temporary text file containing
#  the path to the NDF.
$KAPPA_DIR/ndftrace $inlist quiet >& /dev/null
if( $status == 0 ) then
   echo $inlist >! smas-inlist.tmp
   set inlist = "smas-inlist.tmp"
endif

# Check the input file exists
if( ! -e "$inlist" ) then
   echo "Input file not found: $inlist"
   exit
endif

# Delete any existing output catalogue.
if( -e "$outtable" ) then
   rm -f $outtable
   if( -e "$outtable" ) then
      exit
   endif
endif

# Check no files are left over from previous runs
rm -f files.smas >& /dev/null

#  Create a temporary ADAM directory within this directory.
rm -rf smas-adam >& /dev/null
mkdir smas-adam
setenv ADAM_USER $PWD/smas-adam

# First task is get a complete list of all the NDFs to be processed,
# substituting shortmap/bolomap names for their parent NDF name. Loop round
# each NDF in the input text file
set moon = 0
set sar = -1
set negative = -1
set bolomaps = 0
foreach n (`cat $inlist`)

# Ensure there is no ".sdf" on the end of the NDF name.
   set dir = `dirname $n`
   set base = `basename $n .sdf`
   set in = "$dir/$base"
   if( ! -e "$in.sdf" ) then
      echo "Cannot find $in.sdf"
      exit
   endif
   echo "Processing $in.sdf"

#  See this is a map of the moon.
   set object = `$KAPPA_DIR/fitsmod $in edit=print keyword=OBJECT`
   if( $object == MOON ) then
      set moon = 1
      if( $sum_method == PSF ) then
         echo
         echo "Cannot use KAPPA:PSF to determine total flux for moon data."
         echo "Will use KAPPA:APERADD instead."
         echo
         set sum_method = APERADD
      endif
   endif

#  Get the subarray name, and its corresponding integer index.
   set subarray = `$KAPPA_DIR/fitsmod $in edit=print keyword=SUBARRAY`
   echo $subarray | grep "does not exist" >& /dev/null
   if( $status == 0 ) then
      echo "Cannot determine subarray"
      echo "Does $in.sdf contain data from more than one subarray?"
      exit

   else if( $subarray == "s8a" ) then
      set array = 0
   else if( $subarray == "s8b" ) then
      set array = 1
   else if( $subarray == "s8c" ) then
      set array = 2
   else if( $subarray == "s8d" ) then
      set array = 3
   else if( $subarray == "s4a" ) then
      set array = 4
   else if( $subarray == "s4b" ) then
      set array = 5
   else if( $subarray == "s4c" ) then
      set array = 6
   else if( $subarray == "s4d" ) then
      set array = 7
   else
      echo "Unknown subarray - $subarray"
      exit
   endif

#  Get the coordinate system used by MAKEMAP
   $KAPPA_DIR/hislist $in | grep -qi SYSTEM=\'TRACKING\'
   if( $status == 0 ) then
      set system = "TRACKING"
   else
      $KAPPA_DIR/hislist $in | grep -qi SYSTEM=\'AZEL\'
      if( $status == 0 ) then
         set system = "AZEL"
      else
         echo "Cannot determine value used for MAKEMAP parameter 'SYSTEM' in $in"
         exit
      endif
   endif

#  Check all the data is for the same wavelength, and in the same SYSTEM. Also copy
#  the FITS headers from the first input file to a text file (they will later be
#  stored in the output image).
   if( $sar == -1 ) then
      set sar = $array
      rm -f smas-fits.log >& /dev/null
      $KAPPA_DIR/fitslist $in smas-fits.log
      set system0 = $system
   else
      if( $array != $sar ) then
         echo "$n is for subarray $subarray, which is not the same as the first NDF"
         exit
      endif
      if( $system != $system0 ) then
         echo "$n uses SYSTEM=$system, which is not the same as the first NDF"
         exit
      endif
   endif

#  See if the data has been flat-fielded (as implied by the map units being "pW"). If not,
#  the source features will be negative in the bolomaps.
   $KAPPA_DIR/ndftrace $in quiet
   set units = `$KAPPA_DIR/parget UNITS ndftrace`
   if( $negative == -1 ) then
      set units_old = $units
      if( "$units" == "pW" ) then
         set negative = 0;
      else
         set negative = 1;
      endif

   else if( "$units" != "$units_old" ) then
      echo "$n has units $units, which is not the same as the first NDF ($units_old)"
      exit

   endif

# See if the current NDF contains a list of shortmaps, and if so, how many.
   $HDSTRACE_DIR/hdstrace $in.more.smurf.shortmaps | grep "<NDF>" >& log.smas
   set text = `wc log.smas`
   set nmap = $text[1]

# First deal with NDFs containing shortmaps....
   if( $nmap > 0 ) then

# Write the full paths of the shortmaps (contained in column 1 of log.smas)
# out to a temp file
      foreach name (`cat log.smas | awk '{print $1}'`)
         echo "$in.more.smurf.shortmaps.$name" >> files.smas
      end

#  No output image can be created.
      set outimage = " "

# Now deal with NDF that do not contain shortmaps....
   else

# See if the current NDF contains a list of bolomaps, and if so, how many.
      $HDSTRACE_DIR/hdstrace $in.more.smurf.bolomaps | grep "<NDF>" >& log.smas
      set text = `wc log.smas`
      set nmap = $text[1]

# Now deal with NDFs containing bolomaps....
      if( $nmap > 0 ) then
         set bolomaps = 1

# Write the full paths of the bolomaps (contained in column 1 of log.smas)
# out to a temp file
         foreach name (`cat log.smas | awk '{print $1}'`)
            echo "$in.more.smurf.bolomaps.$name" >> files.smas
         end

# Now deal with NDF that do not contain shortmaps....
      else

# Just append the NDF path to the temp file.
         echo "$in" >> files.smas

#  No output image can be created.
         set outimage = " "
      endif
   endif
end


#  Create the line holding the system name and the line holding the column
#  names in the output catalogue.
echo "# SYSTEM = $system" > $outtable
if( $moon == 1 ) then
   echo "# SUM ROW COL" >> $outtable
else if( $amp_only == 1 ) then
   echo "# AMP ROW COL" >> $outtable
else
   echo "# TAI UTC SEQSTART SEQEND DLON DLAT AMP SUM FWHM AXISR GAMMA ORIENT NDF BXCEN BYCEN BAMP BSUM BFWHM BAXISR BORIENT ROW COL" >> $outtable
endif

# Get he number of good pixels required for each source.
set box = 20
set mingood = `$KAPPA_DIR/calc "nint(pa*pa*pb/100.0)" pa=$box pb=$perc`

# Next loop round all the NDFs to be processed.
set first = 1
foreach n (`cat files.smas`)
   echo "Doing $n"

#  For bolomaps, get the row and column name from the NDF name. Record the max and min row and
#  column index.
   if( $bolomaps == 1 ) then
      set rc = `echo $n | sed -e 's/.*C\([0-9]\{2\}\)R\([0-9]\{2\}\)/\1 \2/'`
      set row = `echo $rc[1] | sed -e 's/0\([0-9]\)/\1/'`
      set col = `echo $rc[2] | sed -e 's/0\([0-9]\)/\1/'`
   else
      set row = null
      set col = null
   endif

# First handle all maps except those of the Moon.
   if( $moon == 0 ) then

#  If source features are negative in the shortmap/bolomap, negate the map
#  so that they become positive.
      if( $negative == 1 ) then
         $KAPPA_DIR/cmult $n'(0~30,0~30)' -1 temp-smas
         set ndf = "temp-smas"

#  Otherwise, and if required, create a copy of the central section of the
#  NDF so that we can change it.
      else if( $amp_only == 0 ) then
         $KAPPA_DIR/ndfcopy $n'(0~30,0~30)'  temp-smas
         set ndf = temp-smas

#  For AMP only catalogues, use the unmodified NDF.
      else
         set ndf = $n
      endif

#  From here on, if beamfit and psf will be used, use offset sky coords to
#  refer to positions within the map.
      if( $amp_only == 0 ) then
         $KAPPA_DIR/wcsframe $ndf sky
         $KAPPA_DIR/wcsattrib $ndf set skyrefis origin

#  Ensure formatted axis values are decimal arc-seconds.
         $KAPPA_DIR/wcsattrib $ndf set 'format(1)' s.2
         $KAPPA_DIR/wcsattrib $ndf set 'format(2)' s.2
      endif

#  Find the offset sky coords at the centre of the feature. The feature is
#  nominally at the reference point and so should, in the absence of errors,
#  have coords (0.0,0.0). PSF fails unless a good central position is
#  supplied, so first find the peak value in a box centred on (0,0)
      $KAPPA_DIR/stats $ndf\(0~$box,0~$box\) quiet
      set maxco = `$KAPPA_DIR/parget maxwcs stats`
      rm -f coin.smas > /dev/null
      echo $maxco > coin.smas

#  Get the maximum value in the box.
      set maxv = `$KAPPA_DIR/parget maximum stats`

#  Check that the box contains at least 95% good pixels.
      set numgood = `$KAPPA_DIR/parget numgood stats`
      if( $numgood < $mingood ) then
         set pc = `$KAPPA_DIR/calc "nint(100*pa/(pb*pb))" pa=$numgood pb=$box`
         echo "  Insufficient good data ($pc %) found around expected source position"
         continue
      endif

#  If required, determine the source parameters using kappa:beamfit
      if( $amp_only == 0 ) then
         $KAPPA_DIR/beamfit $ndf mode=file coin=coin.smas quiet
         if( $status == 0 ) then
            set centre = `$KAPPA_DIR/parget centre beamfit`
            set bxcen = $centre[1]
            set bycen = $centre[2]
            set bamp = `$KAPPA_DIR/parget amp beamfit`
            set bamp = $bamp[1]
            set bsum = `$KAPPA_DIR/parget sum beamfit`
            set bfwhm = `$KAPPA_DIR/parget minfwhm beamfit`
            set bfwhm = $bfwhm[1]
            set majfwhm = `$KAPPA_DIR/parget majfwhm beamfit`
            set majfwhm = $majfwhm[1]
            set baxisr = `$KAPPA_DIR/calc exp="pa/pb" pa=$majfwhm pb=$bfwhm`
            set borient = `$KAPPA_DIR/parget orient beamfit`
            set borient = $borient[1]

#  Scale beamfit FWHM from radians to arc-seconds (we can't just change the
#  Format attribue since beamfit writes the fwhm out as a double rather than
#  as a string)
            set bfwhm = `$KAPPA_DIR/calc exp="3600*180*pa/3.1415926536" pa=$bfwhm`

         else
            echo "  beamfit failure"
            set bxcen = null
            set bycen = null
            set bamp = null
            set bsum = null
            set bfwhm = null
            set baxisr = null
            set borient = null
         endif

# PSF is also sensitive to low-level background structure, so threshold
# the data at 5% of the peak value to exclude background regions.
         set cut = `$KAPPA_DIR/calc exp="pa*0.05" pa=$maxv`
         $KAPPA_DIR/thresh in=$ndf out=cut-smas thrlo=$cut newlo=bad thrhi=1.0E10 \
                           newhi=bad quiet
         set ndf = cut-smas

#  Find the size of the region containing the remaining good values.
         $KAPPA_DIR/ndfcopy $ndf temp-smas trimbad
         $KAPPA_DIR/ndftrace temp-smas quiet
         set dim1 = `$KAPPA_DIR/parget dims\(1\) ndftrace`
         set dim2 = `$KAPPA_DIR/parget dims\(2\) ndftrace`
         if( $dim1 > $dim2 ) then
            set isize = $dim1
         else
            set isize = $dim2
         endif

#  Ensure the size is odd since PSF reports an error is supplied an even
#  ISIZE value.
         set isize = `$KAPPA_DIR/calc exp="1+2*nint(pa/2-0.1)" pa=$isize`

#  Determine the source parameters using kappa:psf
         $KAPPA_DIR/psf $ndf incat=! cofile=coin.smas isize=$isize norm=f device=! quiet

#  Check a psf was found succesfully.
         if( $status == 0 ) then

#  Get the parameters of the psf.
            if( $amp_method == PSF ) then
               set amp = `$KAPPA_DIR/parget amp1 psf`
            else
               set amp = $maxv
            endif
            set posxy = `$KAPPA_DIR/parget centre psf`
            set axisr = `$KAPPA_DIR/parget axisr psf`
            set fwhm = `$KAPPA_DIR/parget fwhm psf`
            set orient = `$KAPPA_DIR/parget orient psf`
            set gamma = `$KAPPA_DIR/parget gamma psf`

#  See if the beamfit and psf source positions are sufficiently similar.
            if( "$error" != " " ) then
               if( $bxcen != "null" && $bycen != "null" ) then
                  set ok = `$KAPPA_DIR/calc exp="abs(pa-pb)<=pc" pa=$bxcen pb=$posxy[1] pc=$error`
                  if( $ok == 1 ) then
                     set ok = `$KAPPA_DIR/calc exp="abs(pa-pb)<=pc" pa=$bycen pb=$posxy[2] pc=$error`
                  endif
               else
                  set ok = 0
               endif
            else
               set ok = 1
            endif

#  Skip this map if the beamfit and psf positions disagree.
            if( $ok == 1 ) then

#  Get the total data sum. Two methods - 1) aperture photometry...
               if( $sum_method == APERADD ) then

#  Choose the aperture size in pixels (60 arc-secs assuming default makemap
#  pixel sizes of 2 and 4 arc-seconds)..
                  if( "$diam" == " " ) then
                     if( $sar > 3 ) then
                        set diam = 30
                     else
                        set diam = 15
                     endif
                  endif

                  if( $first == 1  ) then
                     echo
                     echo "Using KAPPA:APERADD to determine total flux (aperture $diam arcsec)"
                     echo
                  endif

#  Replace any bad pixels within a box centred on the max pixel with sides twice
#  the above diameter.
                  @ size = $diam + $diam
                  $KAPPA_DIR/fillbad in=$ndf\($maxco[1]~$size,$maxco[2]~$size\) size=2 out=filled-smas quiet

#  Do the aperture photometry within the filled image. Check some bad pixels
#  were filled. If not, use $ndf instead of "filled-smas".
                  if( $status == 0 ) then
                     $KAPPA_DIR/aperadd filled-smas centre="'$posxy'" diam=$diam quiet
                  else
                     $KAPPA_DIR/aperadd $ndf centre="'$posxy'" diam=$diam quiet
                  endif
                  set fsum = `$KAPPA_DIR/parget total aperadd`

#  Alternatively - 2) use the integral of the model PSF as the souce total data sum.
               else
                  if( $first == 1  ) then
                     echo
                     echo "Using KAPPA:PSF to determine total flux"
                     echo
                  endif
                  set fsum = `$KAPPA_DIR/parget total psf`
               endif

#  Get the sequence number at start and end, if possible
               set seqstart = `$KAPPA_DIR/fitsmod $ndf edit=print keyword=SEQSTART`
               echo $seqstart | grep "does not exist" >& /dev/null
               if( $status != 1 ) then
                  set seqstart = null
               endif

               set seqend = `$KAPPA_DIR/fitsmod $ndf edit=print keyword=SEQEND`
               echo $seqend | grep "does not exist" >& /dev/null
               if( $status != 1 ) then
                  set seqend = null
               endif

#  If possible get the MJD-AVG and TIMESYS FITS headers (shortmaps should
#  have both of these).
               set mjdavg = `$KAPPA_DIR/fitsmod $ndf edit=print keyword=MJD-AVG`
               echo $mjdavg | grep "does not exist" >& /dev/null
               if( $status != 1 ) then
                  set mjdavg = null
                  set timesys = null
               else
                  set timesys = `$KAPPA_DIR/fitsmod $ndf edit=print keyword=TIMESYS`
                  echo $timesys | grep "does not exist" >& /dev/null
                  if( $status != 1 ) then
                     set mjdavg = null
                     set timesys = null
                  endif
               endif

#  If we have an MJD-AVG, store it as the TimeOrigin value in a TimeFrame.
               $ATOOLS_DIR/asttimeframe options='system=mjd' result=tf
               if( $mjdavg != null ) then
                  $ATOOLS_DIR/astset tf timescale $timesys result=tf
                  $ATOOLS_DIR/astset tf timeorigin $mjdavg result=tf

# If we do not have an MJD-AVG value, get the epoch from the WCS FrameSet, and
# store it as the TimeOrigin value in a TimeFrame.
               else
                  $ATOOLS_DIR/astset tf system JEPOCH result=tf
                  $ATOOLS_DIR/astset tf timescale TDB result=tf
                  set tdb = `$ATOOLS_DIR/astget $ndf epoch`
                  $ATOOLS_DIR/astset tf timeorigin $tdb result=tf
                  $ATOOLS_DIR/astset tf system MJD result=tf
               endif

#  Convert the TimeFrame to TAI timescale and get the converted TimeOrigin value.
               $ATOOLS_DIR/astset tf timescale TAI result=tf
               set tai = `$ATOOLS_DIR/astget tf timeorigin`

#  Covert the TimeFrame to UTC timescale and get the converted TimeOrigin value.
               $ATOOLS_DIR/astset tf timescale UTC result=tf
               set utc = `$ATOOLS_DIR/astget tf timeorigin`

#  Set the TimeFrame Format to ISO and get the UTC date-time string.
               $ATOOLS_DIR/astset tf format iso.2T result=tf
               set date = `$ATOOLS_DIR/astformat tf axis=1 value=0.0`

#  Write a row to the output catalogue, so long as it contains no INF, NAN
#  or BAD values
               set text = "$tai $date $seqstart $seqend $posxy[1] $posxy[2] $amp $fsum $fwhm $axisr $gamma $orient $n $bxcen $bycen $bamp $bsum $bfwhm $baxisr $borient $row $col"
               echo "$text" | grep -iq 'INF\|NAN\|BAD'
               if( $status == 1 ) then
                  echo "$text" >> $outtable
               endif
            endif

#  Tell the user if PSF failed.
         else
            echo "  psf failure"
         endif

#  If only the AMP, COL and ROW columsn are needed, write them to the catalogue.
      else
         set text = "$maxv $row $col"
         echo "$text" | grep -iq 'INF\|NAN\|BAD'
         if( $status == 1 ) then
            echo "$text" >> $outtable
         endif
      endif

#  Now handle maps of the Moon.
   else

# Create a temp copy of the whole NDF so we can change it.
      $KAPPA_DIR/ndfcopy $n  temp-smas
      set ndf = temp-smas

#  From here on, use offset sky coords to refer to positions within the map.
      $KAPPA_DIR/wcsframe $ndf sky
      $KAPPA_DIR/wcsattrib $ndf set skyrefis origin

#  Ensure formatted axis values are decimal arc-seconds.
      $KAPPA_DIR/wcsattrib $ndf set 'format(1)' s.2
      $KAPPA_DIR/wcsattrib $ndf set 'format(2)' s.2

#  If source features are negative in the shortmap/bolomap, negate the map
#  so that they become positive.
      if( $negative == 1 ) then
         $KAPPA_DIR/cmult $ndf -1 pos-smas
         set ndf = "pos-smas"
      endif

#  If no aperture diameter was supplied on the command line, use 35 arcmins,
#  a little bigger than needed in order to allow for small variations in the
#  size of the moon.
      if( "$diam" == " " ) then
         set diam = 2100
      endif

      if( $first == 1  ) then
         echo
         echo "Using KAPPA:APERADD to determine total flux (aperture $diam arcsec)"
         echo
      endif

# Find the integrated value in a circular aperture centred on the nominal
# target position (0,0).
      $KAPPA_DIR/aperadd $ndf centre="'0,0'" diam=$diam quiet
      set fsum = `$KAPPA_DIR/parget total aperadd`

#  Write a row to the output catalogue.
      set text = "$fsum $row $col"
      echo "$text" | grep -iq 'INF\|NAN\|BAD'
      if( $status == 1 ) then
         echo "$text" >> $outtable
      endif

   endif

   set first = 0
end

#  If an output image is required, create it from the output catalogue.
#  TRANDAT fails if the file contains any non-numeric column values, so first
#  copy the required columns from the returned catalogue into a separate file.
if( "$outimage" != " " ) then
   if( $moon == 1 || $amp_only == 1 ) then
      cat $outtable | grep -v \# | awk '{print $2, $3, $1}' > cat.smas
   else
      cat $outtable | grep -v \# | awk '{print $21, $22, $8}' > cat.smas
   endif

   $KAPPA_DIR/trandat freename=cat.smas poscols="[1,2]" valcol=3 auto=no \
                      ndf=$outimage poffset=\[1.5,1.5\]

#  Ensure the image is has the expected pixel bounds
   $KAPPA_DIR/setbound $outimage\(0:31,0:39\)

#  Copy FITS headers from the first input NDF to the output NDF.
   $KAPPA_DIR/fitstext $outimage file=smas-fits.log
endif

# Clean up.
rm -f cat.smas back.sdf files.smas log.smas cut-smas.sdf coin.smas temp-smas.sdf pos-smas.sdf filled-smas.sdf smas-fits.log smas-inlist.tmp >& /dev/null
rm -rf smas-adam

