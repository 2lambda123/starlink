#!/star/Perl/bin/perl

=head1 NAME

jcmtstate2cat - convert JCMT state structure into TST format

=head1 SYNOPSIS

  jcmtstate2cat *.sdf
  jcmtstate2cat *.sdf > state.tst

=head1 DESCRIPTION

Reads a set of SCUBA-2 or ACSIS files and writes a catalogue of the state information
to standard out. The output file is in TST format and can be read into the
TOPCAT application (but may require that TOPCAT is told explicitly that
the catalogue is in TST format, e.g. with the "-f tst" command line option).

This information includes the telescope pointing position (Actual, Demand and Base)
in both the tracking system and AZEL coordinate frames, jiggle patterns, telescope
row/offset index amongst others.

=head1 OPTIONS

The following options are supported:

=over 4

=item B<-help>

Print help information.

=item B<-version>

Print version information.

=item B<-man>

Print the full documentation to STDOUT.

=back

=head1 NOTES

Eight columns are generated in addition to writing the simple contents
of the JCMT state structure. All are a combination of the telescope
position and secondary mirror. "ra" and "dec" contain the tracking
coordinates (noting that if the tracking system is GALACTIC the columns
will still be called "ra" and "dec"). "dra" and "ddec" are the tracking
offsets from the base position in arcseconds. "az" and "el" contain the
(moving) azimuth and elevation. "daz" and "del" are the azimuth and
elevation offsets from the base position in arcseconds. AZEL coordinates
are calculated directly from the state information without converting
first to RA/Dec.

Note that information from the ACSIS extension is not included at this
time. This is partly because this extension can change in shape
between observations.

=cut

use strict;
use warnings;
use NDF;
use Astro::Coords::Angle::Hour;
use Astro::SLA;

use Getopt::Long;
use Pod::Usage;
use JSA::Headers ();

my ($help, $man, $version);
my $ostatus = GetOptions( "help" => \$help,
                          "man" => \$man,
                          "version" => \$version
                        );
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose =>2) if $man;
if ($version) {
  my $id = '$Id$';
  print "jcmtstate2cat - convert JCMT State information to catalog\n";
  exit;
}


my @files = @ARGV;

my %DATA;
my $isfirst = 1;
my $isfirst_file = 1;
my @columns;
my %cols;

for my $f (@files) {

  # Read JCMTSTATE information
  my %local = JSA::Headers::read_jcmtstate( $f );

  if ($isfirst) {
    # Lose ordering associated with the file but since
    # all sections share subsystem prefix then we will
    # not be grossly out of order
    @columns = sort keys %local;
    %cols = map { $_, undef } @columns;
    $isfirst = 1;
  }

  # now dump the contents
  if ($isfirst_file) {
    print "# This is a TST formatted file\n";
    print join("\t", "Id", "RA", "DEC", "DRA", "DDEC", "AZ","EL", "DAZ", "DEL", @columns) ,"\n";
    print join("\t", map { "--" } (0..($#columns+3))),"\n";
    $isfirst_file = 0;
  }

  for my $i ( 0 .. $#{$local{RTS_NUM}} ) {
    my @slice;

    # Use the RTS sequence number as the ID
    push(@slice, $local{RTS_NUM}->[$i]);

    push(@slice, calc_pos( "TR", $i, \%local) );
    push(@slice, calc_pos( "AZ", $i, \%local) );

    # And append the remaining columns
    for my $col (@columns) {
      push(@slice, $local{$col}->[$i]);
    }
    print join("\t",@slice)."\n";
  }
}

exit;

# Calculate a sky position in either "AZ" or "TR" system
# along with a "delta" offset from base.
#
# ($x, $y, $dx, $dy) = calc_pos( "AZ", $i, \%state );
#
# Where $i is the index into the arrays associoted with %state

sub calc_pos {
  my ($typ, $i, $sref) = @_;

  my $bad = &NDF::VAL__BADD();
  my ($x, $y, $dx, $dy) = ($bad, $bad, $bad, $bad);

  # See if the values are good and copy them to local hash
  my %local;
  my $isokay = 1;
  for my $tmpl (qw/ TCS_XX_AC1 TCS_XX_AC2 TCS_XX_BC1 TCS_XX_BC2
		    SMU_XX_JIG_X SMU_XX_JIG_Y
		    SMU_XX_CHOP_X SMU_XX_CHOP_Y / ) {
    my $key = $tmpl;
    $key =~ s/XX/$typ/;
    if ( $sref->{$key}->[$i] == $bad) {
      $isokay = 0;
      last;
    }
    $local{$tmpl} = $sref->{$key}->[$i];
  }

  return ($x, $y, $dx, $dy) unless $isokay;

  # Now calculate the two sets of positions

  # Calculate the tangent plane offset of Actual from Base
  # and convert to arcsec
  Astro::SLA::slaDs2tp( $local{TCS_XX_AC1}, $local{TCS_XX_AC2},
			$local{TCS_XX_BC1}, $local{TCS_XX_BC2},
			my $xoffset, my $yoffset, my $j );
  $xoffset *= Astro::SLA::DR2AS;
  $yoffset *= Astro::SLA::DR2AS;

  # These are natively in arcsec in the state structure
  my $xoffset_jc = $local{SMU_XX_JIG_X} + $local{SMU_XX_CHOP_X};
  my $yoffset_jc = $local{SMU_XX_JIG_Y} + $local{SMU_XX_CHOP_Y};

  # get the arcsec total offset
  $dx = $xoffset + $xoffset_jc;
  $dy = $yoffset + $yoffset_jc;

  # Convert jiggle/chop offset to radians
  $xoffset_jc *= Astro::SLA::DAS2R;
  $yoffset_jc *= Astro::SLA::DAS2R;

  # Calculate spherical coordinate including jiggle/chop offset
  Astro::SLA::slaDtp2s( $xoffset_jc, $yoffset_jc,
			$local{TCS_XX_AC1}, $local{TCS_XX_AC2}, $x, $y );
  $x = Astro::Coords::Angle->new( $x )->degrees;
  $y = Astro::Coords::Angle->new( $y )->degrees;

  return ($x, $y, $dx, $dy);
}


=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

Copyright (C) 2007 Particle Physics and Astronomy Research Council.
Copyright (C) 2007-2009 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut
