#!/star/Perl/bin/perl

=head1 NAME

jcmtstate2cat - convert JCMT state structure into TST format

=head1 SYNOPSIS

  jcmtstate2cat *.sdf
  jcmtstate2cat *.sdf > state.tst

=head1 DESCRIPTION

Reads a set of SCUBA-2 or ACSIS files and writes a catalogue of the state information
to standard out. The output file is in TST format and can be read into the
TOPCAT application (but may require that TOPCAT is told explicitly that
the catalogue is in TST format, e.g. with the "-f tst" command line option).

This information includes the telescope pointing position (Actual, Demand and Base)
in both the tracking system and AZEL coordinate frames, jiggle patterns, telescope
row/offset index amongst others.

=head1 OPTIONS

The following options are supported:

=over 4

=item B<-help>

Print help information.

=item B<-version>

Print version information.

=item B<-man>

Print the full documentation to STDOUT.

=item B<--with-mce>

Include SCUBA-2 MCE information in output table. This adds a lot of data to
the output files and much of it is constant for the observation. Default
is not to add this option.

=back

=head1 NOTES

Eight columns are generated in addition to writing the simple contents
of the JCMT state structure. All are a combination of the telescope
position and secondary mirror. "ra" and "dec" contain the tracking
coordinates (noting that if the tracking system is GALACTIC the columns
will still be called "ra" and "dec"). "dra" and "ddec" are the tracking
offsets from the base position in arcseconds. "az" and "el" contain the
(moving) azimuth and elevation. "daz" and "del" are the azimuth and
elevation offsets from the base position in arcseconds. AZEL coordinates
are calculated directly from the state information without converting
first to RA/Dec.

Note that information from the ACSIS extension is not included at this
time. This is partly because this extension can change in shape
between observations.

MCE header information is included for SCUBA-2 data files taken before
summer 2010. After December 2010 MCE data is stored in a different
way in the files and is not currently supported by this command.

=cut

use strict;
use warnings;
use NDF;
use Astro::Coords::Angle::Hour;
use Astro::SLA;

use Getopt::Long;
use Pod::Usage;
use JSA::Headers ();
use JCMT::Tau::WVM::WVMLib 1.10;
use Astro::FITS::Header::NDF;
use NDF; # For VAL__BADD
use Scalar::Util qw/ looks_like_number /;

my ($help, $man, $version, $with_mce);
my $ostatus = GetOptions( "help" => \$help,
                          "man" => \$man,
                          "version" => \$version,
                          "with-mce" => \$with_mce,
                        );
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose =>2) if $man;
if ($version) {
  my $id = '$Id$';
  print "jcmtstate2cat - convert JCMT State information to catalog\n";
  exit;
}


my @files = @ARGV;

my %DATA;
my $isfirst = 1;
my $isfirst_file = 1;
my @columns;
my %cols;
my @wvmcol;

for my $f (@files) {

  # Read JCMTSTATE information
  my %local = JSA::Headers::read_jcmtstate( $f );

  if ($isfirst) {
    # Lose ordering associated with the file but since
    # all sections share subsystem prefix then we will
    # not be grossly out of order
    @columns = sort keys %local;
    %cols = map { $_, undef } @columns;
    $isfirst = 1;

    # See if we have WVM columns
    if (exists $local{WVM_T12} && exists $local{WVM_T42} && exists $local{WVM_T78}) {
      push(@wvmcol, "WVMTAU", "PWVZEN", "PWVLOS");
    }

  }

  # See if we have an MCEHEAD from a SCUBA-2 file
  if ($with_mce) {
    my ($cols, $mcedata) = read_mce( $f );
    if (defined $cols) {
      push(@columns, @$cols);
      %local = (%local, %$mcedata);
    }
  }

  # now dump the contents
  if ($isfirst_file) {
    print "# This is a TST formatted file\n";
    print join("\t", "Id", "RA", "DEC", "DRA", "DDEC", "AZ","EL", "DAZ", "DEL", "TELSPEED", @wvmcol, @columns) ,"\n";
    print join("\t", map { "--" } (0..($#columns+3))),"\n";
    $isfirst_file = 0;
  }

  # Find ambient temperature if we are handling WVM data
  my $tamb;
  if (@wvmcol) {
    if (!exists $local{ENVIRO_AIR_TEMP}) {
      my $hdr = Astro::FITS::Header::NDF->new( File => $f );
      my $atstart = $hdr->value( "ATSTART" );
      my $atend = $hdr->value( "ATEND" );
      $tamb = (($atstart + $atend) / 2.0) + 273.15; # To Kelvin
    }
  }

  my %wvmcache;

  for my $i ( 0 .. $#{$local{RTS_NUM}} ) {
    my @slice;

    # Use the RTS sequence number as the ID
    push(@slice, $local{RTS_NUM}->[$i]);

    push(@slice, calc_pos( "TR", $i, \%local) );
    push(@slice, calc_pos( "AZ", $i, \%local) );

    # Calculate telescope speed
    my $telspeed = &NDF::VAL__BADD();
    my @speedkeys = (qw/ TCS_TAI TCS_TR_AC1 TCS_TR_AC2 /);
    my $isokay = 1;
    if ($i > 0) {
      for my $islice ( $i-1, $i ) {
        for my $key (@speedkeys) {
          if ($local{$key}->[$islice] == &NDF::VAL__BADD()) {
            # invalid non-bad position or time
            $isokay = 0;
            last;
          }
        }
      }
      if ($isokay) {
        # Calculate the tangent plane distance travelled between
        # this and previous position
        Astro::SLA::slaDs2tp( $local{TCS_TR_AC1}->[$i], $local{TCS_TR_AC2}->[$i],
                             $local{TCS_TR_AC1}->[$i-1], $local{TCS_TR_AC2}->[$i-1],
                             my $xoffset, my $yoffset, my $j );
        if ($j == 0) {
          my $distsq = $xoffset**2 + $yoffset**2;
          my $dist = sqrt($distsq) * Astro::SLA::DR2AS;
          my $deltat = ( $local{TCS_TAI}->[$i] - $local{TCS_TAI}->[$i-1]) * 86400;
          $telspeed = $dist / $deltat if $deltat > 0.0;
        }
      }
    }
    push(@slice, $telspeed);

    # Calculate the WVM tau
    if ( @wvmcol ) {
      # we need a good airmass and an ambient temperature
      my $isokay = 1;
      for my $k (qw/ TCS_AIRMASS WVM_T12 WVM_T42 WVM_T78 / ) {
        if ($local{$k}->[$i] < 0) {
          $isokay = 0;
          last;
        }
      }

      # Cache the WVM calculation
      # use a single airmass for the whole file (which is a reasonable
      # idea for SCUBA-2 unless we are doing elevation scans)

      my $wvmtau = &NDF::VAL__BADD();
      my $pwvlos = &NDF::VAL__BADD();
      my $pwvzen = &NDF::VAL__BADD();
      if ($isokay) {
        # Need the ambient temperature from ATSTART and ATEND
        # SCUBA-2 does not store temperature in state
        if (!defined $tamb) {
          $tamb = $local{ENVIRO_AIR_TEMP}->[$i];
        }

        # Use WVM_TIME as the primary key
        my $key = $local{WVM_TIME}->[$i];
        if (exists $wvmcache{$key}) {
          $wvmtau = $wvmcache{$key}[0];
          $pwvzen = $wvmcache{$key}[1];
          $pwvlos = $wvmcache{$key}[2];
        } else {
          $wvmtau = JCMT::Tau::WVM::WVMLib::tsky2tau( $local{TCS_AIRMASS}->[$i],
                                                      $tamb,
                                                      $local{WVM_T12}->[$i],
                                                      $local{WVM_T42}->[$i],
                                                      $local{WVM_T78}->[$i]);

          # Now calculate the PWV
          $pwvlos = JCMT::Tau::WVM::WVMLib::tsky2pwv( $local{TCS_AIRMASS}->[$i],
                                                      $tamb,
                                                      $local{WVM_T12}->[$i],
                                                      $local{WVM_T42}->[$i],
                                                      $local{WVM_T78}->[$i]);
          $pwvzen = JCMT::Tau::WVM::WVMLib::pwv2zen( $local{TCS_AIRMASS}->[$i],
                                                     $pwvlos );

          $wvmcache{$key} = [$wvmtau, $pwvzen, $pwvlos];
        }
      }
      push(@slice, $wvmtau, $pwvzen, $pwvlos );
    }

    # And append the remaining columns
    for my $col (@columns) {
      my $value = $local{$col}->[$i];
      $value = &NDF::VAL__BADD() if (looks_like_number($value) &&
                                     ( $value == &NDF::VAL__BADI() || $value == &NDF::VAL__BADR() ));
      push(@slice, $value);
    }
    # Replace bad values with NaN
    for my $i (0..$#slice) {
      $slice[$i] = "NaN" if (looks_like_number($slice[$i]) &&
                             ($slice[$i] == &NDF::VAL__BADR() || $slice[$i] == &NDF::VAL__BADD()));
    }

    print join("\t",@slice)."\n";
  }
}

exit;

# Calculate a sky position in either "AZ" or "TR" system
# along with a "delta" offset from base.
#
# ($x, $y, $dx, $dy) = calc_pos( "AZ", $i, \%state );
#
# Where $i is the index into the arrays associoted with %state

sub calc_pos {
  my ($typ, $i, $sref) = @_;

  my $bad = &NDF::VAL__BADD();
  my ($x, $y, $dx, $dy) = ($bad, $bad, $bad, $bad);

  # See if the values are good and copy them to local hash
  my %local;
  my $isokay = 1;
  for my $tmpl (qw/ TCS_XX_AC1 TCS_XX_AC2 TCS_XX_BC1 TCS_XX_BC2
		    SMU_XX_JIG_X SMU_XX_JIG_Y
		    SMU_XX_CHOP_X SMU_XX_CHOP_Y / ) {
    my $key = $tmpl;
    $key =~ s/XX/$typ/;
    if ( $sref->{$key}->[$i] == $bad) {
      $isokay = 0;
      last;
    }
    $local{$tmpl} = $sref->{$key}->[$i];
  }

  return ($x, $y, $dx, $dy) unless $isokay;

  # Now calculate the two sets of positions

  # Calculate the tangent plane offset of Actual from Base
  # and convert to arcsec
  Astro::SLA::slaDs2tp( $local{TCS_XX_AC1}, $local{TCS_XX_AC2},
			$local{TCS_XX_BC1}, $local{TCS_XX_BC2},
			my $xoffset, my $yoffset, my $j );
  $xoffset *= Astro::SLA::DR2AS;
  $yoffset *= Astro::SLA::DR2AS;

  # These are natively in arcsec in the state structure
  my $xoffset_jc = $local{SMU_XX_JIG_X} + $local{SMU_XX_CHOP_X};
  my $yoffset_jc = $local{SMU_XX_JIG_Y} + $local{SMU_XX_CHOP_Y};

  # get the arcsec total offset
  $dx = $xoffset + $xoffset_jc;
  $dy = $yoffset + $yoffset_jc;

  # Convert jiggle/chop offset to radians
  $xoffset_jc *= Astro::SLA::DAS2R;
  $yoffset_jc *= Astro::SLA::DAS2R;

  # Calculate spherical coordinate including jiggle/chop offset
  Astro::SLA::slaDtp2s( $xoffset_jc, $yoffset_jc,
			$local{TCS_XX_AC1}, $local{TCS_XX_AC2}, $x, $y );
  $x = Astro::Coords::Angle->new( $x )->degrees;
  $y = Astro::Coords::Angle->new( $y )->degrees;

  return ($x, $y, $dx, $dy);
}

# Arg: Filename
# Return reference to array of columns and reference to hash of data
# values indexed by column names.

sub read_mce {
  my $f = shift;
  my $status = &NDF::SAI__OK;
  err_begin($status );

  my ($col, $mcedata);

  # Use HDS directly
  hds_open( $f, "READ", my $loc, $status);
  dat_find( $loc, "MORE", my $mloc, $status);
  dat_there( $mloc, "MCEHEADS", my $there, $status );
  if ($there) {
    dat_find( $mloc, "MCEHEADS", my $mceloc, $status );
    dat_find( $mceloc, "MCEHEAD", my $mcloc, $status );
    dat_annul( $mceloc, $status );

    # Now we have the .MORE.MCEHEADS.MCEHEAD structure locator
    # Move the whole thing into memory. May have to watch
    # memory usage.
    my @dims;
    dat_shape( $mcloc, 2, @dims, my $ndim, $status );
    my @mce;
    dat_getvi( $mcloc, $dims[0]*$dims[1], @mce, my $size, $status);
    dat_annul($mcloc, $status);

    if ($status == &NDF::SAI__OK) {
      $mcedata = {};
      for my $i (1..$dims[1]) {
	# pull $dims[0] elements of the array
	my @slice = splice( @mce, 0, $dims[0] );
	my ($c, $mceslice) = unpack_mce( @slice );
	# Store the column information
	$col = $c unless defined $col;
	# copy data to array format
	for my $k (@$col) {
	  $mcedata->{$k} = [] unless exists $mcedata->{$k};
	  push(@{$mcedata->{$k}}, $mceslice->{$k});
	}
      }
    }

  }
  dat_annul( $mloc, $status);
  dat_annul( $loc, $status );

  # Does not matter if this all failed
  if ($status != &NDF::SAI__OK) {
    #err_annul( $status );
    err_flush($status);
  }
  err_end($status);
  return ($col, $mcedata);
}

# Unpack a single MCE data packet header
#  ($col, $mcedata) = unpack_mce( @header );
#

sub unpack_mce {
  my @data = @_;

# Look up table indexed by version number, pointing
# to reference to array of column names corresponding
# to input array. If an entry is a code ref it should
# be executed and will return a hash of columns and values.
# undef means that the entry should be skipped

  my %headers = ( 6 => [
			\&ver6slot0,             # 0
			"ClockCardCounter",      # 1
			"row_len",               # 2
			"num_rows-reported",     # 3
			"data_rate",             # 4
			"ReturnToZeroCounter",   # 5
			"HeaderVersion",         # 6
			"RampValue",
			\&ver6slot8,
			"num_rows_servoed",
			"SyncBoxNumber",
			"run_id",
			"user_word",
			"Errno13",
			"FPGATempAC",
			"FPGATempBC1",
			"FPGATempBC2",
			"FPGATempBC3",
			"FPGATempRC1",
			"FPGATempRC2",
			"FPGATempRC3",
			"FPGATempRC4",
			"FPGATempCC",
			"Errno23",
			"CardTempAC",
			"CardTempBC1",
			"CardTempBC2",
			"CardTempBC3",
			"CardTempRC1",
			"CardTempRC2",
			"CardTempRC3",
			"CardTempRC4",
			"CardTempCC",
			"Errno33",
			\&ver6slot34,
			\&ver6slot35,
			\&ver6slot36,
			\&ver6slot37,
			\&ver6slot38,
			\&ver6slot39,
			\&ver6slot40,
			"Errno41",
			"BoxTemp",
		       ],
		);

  # We have to know the version number.
  # We have been told it is always in this location
  my $vers = $data[6];
  die "Can not understand MCE version $vers data headers"
    unless exists $headers{$vers};

  my @definitions = @{$headers{$vers}};

  my $szhead = scalar(@data);
  my $szdef  = scalar(@definitions);
  die "Size of header ($szhead) differs from number expected for version $vers header ($szdef)"
    if $szhead != $szdef;

  my %mce;
  my @col;
  for my $i (0..$szhead-1) {
    if (not ref($definitions[$i])) {
      my $c = $definitions[$i];
      push(@col, $c);
      $mce{$c} = $data[$i];
    } else {
      my %extra = $definitions[$i]->( $data[$i] );
      push(@col, sort keys %extra);
      %mce = (%mce, %extra);
    }
  }

  return (\@col, \%mce);
}

# These routines unpack data structures
# Can be version specific.
# Take the single integer to unpack
# Return hash

# Seems to be little endian but there is bound to
# be an issue there

sub ver6slot0 {
  # This is a array of bits
  my @bits = split( //, unpack("b32",pack("j",$_[0])));

  return (
	  mce_last_frame => $bits[0],
	  mce_stop => $bits[1],
	  mce_syncbox_freerun => $bits[2],
	  mce_syncbox_error => $bits[3],
	  mce_active_clock => $bits[4],
	  mce_tes_bias_sqwav => $bits[5],
	  mce_readout_card1ok => $bits[10],
	  mce_readout_card2ok => $bits[11],
	  mce_readout_card3ok => $bits[12],
	  mce_readout_card4ok => $bits[13],
	 );
}

sub ver6slot8 {
  my @unpack = unpack( "vv", pack( "j", $_[0]));
  return ( ramp_card_addr => $unpack[1],
	   ramp_param_id => $unpack[0]);
}

sub ver6slot34 {
  my @unpack = unpack( "cccc", pack( "j", $_[0]));
  return ( PSUCSWver => $unpack[3],
	   PSUCFan1Tach => $unpack[2],
	   PSUCFan2Tach => $unpack[1],
	   PSUCTemp1 => $unpack[0]);
}

sub ver6slot35 {
  my @unpack = unpack( "ccv", pack("j", $_[0]));
  return ( PSUCTemp2 => $unpack[0],
	   PSUCTemp3 => $unpack[1],
	   PSUCADCOffset => $unpack[2]);
}

sub ver6slot36 {
  my @unpack = unpack( "vv", pack("j", $_[0]));
  return (PSUCVolt1 => $unpack[0],
	  PSUCVolt2 => $unpack[1]);
}
sub ver6slot37 {
  my @unpack = unpack( "vv", pack("j", $_[0]));
  return (PSUCVolt3 => $unpack[0],
	  PSUCVolt4 => $unpack[1]);
}
sub ver6slot38 {
  my @unpack = unpack( "vv", pack("j", $_[0]));
  return (PSUCVolt5 => $unpack[0],
	  PSUCCurr1 => $unpack[1]);
}
sub ver6slot39 {
  my @unpack = unpack( "vv", pack("j", $_[0]));
  return (PSUCCurr2 => $unpack[0],
	  PSUCCurr3 => $unpack[1]);
}
sub ver6slot40 {
  my @unpack = unpack( "vv", pack("j", $_[0]));
  return (PSUCCurr4 => $unpack[0],
	  PSUCCurr5 => $unpack[1]);
}

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research Council.
Copyright (C) 2007-2009 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut
