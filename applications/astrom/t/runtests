#! /bin/sh -
#
# $Id$
#
# Run a series of tests on moggy.  The directory contains a collection
# of scripts named `t<number>', and these are executed in turn and their
# output diffed against `t<number>.correct'.  Exit status is the
# number of failures.
#
# The tests should consist of scripts (or programs) which write their
# results to stdout, write any debugging information to stderr, and
# put any temporary files in filenames matching the pattern
# `t<number>*.tmp' but not delete them (for debugging).  All these
# files are deleted on successful completion, unless the --keep flag
# is present.
#
# Run without an argument, and if there is no file runtests.filelist,
# this runs all the tests in the directory; run with an argument, it
# runs only the specified tests.
#
# If there is no argument, but a file runtests.filelist exists, use
# that file's contents as the list of tests to run.  This means that
# we can make it easy to do a subset of the tests repeatedly while
# testing.
#
# If the option --keep is present, then it doesn't delete temporary files.

UsageString="$0 [--keep] [filename...]"
deletetemp=true
LS=/bin/ls
# If the environment variable ECHONONL is defined, then eval it to
# define a function echononl which echoes its argument without a
# newline.  Otherwise define a default
if test -n "$ECHONONL"; then
    eval ${ECHONONL}
else
    echononl () { echo -n $*; }
fi

filelist=""

while [ $# -gt 0 ]; do
    case $1 in
    --keep) deletetemp=false ;;
    --*) echo "Usage: $UsageString"
	 exit 1
	 ;;
    *) filelist="$filelist $1"
	 ;;
    esac
    shift
done

# If filelist is null, and a file runtests.filelist exists, use that
# file's contents as the value of filelist.
if [ -z "$filelist" -a -f runtests.filelist ]; then
    echo "Reading filelist from runtests.filelist"
    filelist=`cat runtests.filelist`
fi

# Check filelist is non-null, and make it t* if it is.
if [ -z "$filelist" ]; then
    filelist=`$LS | grep '^t[0-9]*\.\(sh\|run\)$'`
fi



nfailures=0

for testprog in $filelist
do
        name=`expr $testprog : '\(t[0-9]*\)'`
        ext=`expr $testprog : '.*\(\.[a-z]*\)$'`
	echononl "$name... "
        if test -z "$ext"; then
            echo "No extension!"
            false
        elif test $ext = .sh; then
	    sh $testprog >$name.stdout 2>$name.stderr
        elif test $ext = .run; then
            ./$testprog >$name.stdout 2>$name.stderr
        else
            echo "Unrecognised extension $ext"
            false
        fi
	testval=$?

	if [ $testval != 0 ]; then
	    echo "failed (exited with error status $testval)"
	    nfailures=`expr $nfailures + 1`
	    # Don't delete temporary files on failure
	elif [ -r "$name.correct" ]; then
	    diff $name.correct $name.stdout >$name.diff
	    rval=$?
	    if [ $rval != 0 ]; then
		echo "failed (results in $name.diff)"
		nfailures=`expr $nfailures + 1`
	    else
		echo "ok"
		$deletetemp && rm -f $name.diff $name.stdout $name.stderr $name*.tmp
	    fi
	else
		echo "apparently OK, but no correct results to compare"
		mv $name.stdout $name.correct
		echo "    (now in $name.correct)"
		$deletetemp && rm -f $name.stderr $name*.tmp
	fi
done

echo "$nfailures failed tests"

exit $nfailures
