#!/usr/local/bin/perl -w

#+
#  Name:
#     scb.pl

#  Purpose:
#     Generate HTML listing of a Starlink source code file.

#  Language:
#     Perl

#  Description:
#     This script extracts the source code for a routine in the USSC.  
#     The only input value it takes is the name of the routine, which
#     must be the key of an entry in the index dbm file generated by
#     scbindex.
#
#     It operates in two modes:
#        text:  prints the source file raw.
#        HTML:  prints the source code using CGI format with HTML markup.
#
#     It chooses between the two modes according to whether it appears to
#     have been called as a CGI program or not.

#  Authors:
#     MBT: Mark Taylor (IoA, Starlink)
#     {enter_new_authors_here}

#  History:
#     25-AUG-1998 (MBT):
#       Initial revision.
#     {enter_further_changes_here}

#  Bugs:
#     {note_any_bugs_here}

#-

#  Required libraries.

use Fcntl;
use SDBM_File;
use libscb.pl;

#  Directory locations.

$tmpdir = "/local/junk/scb";         # scratch directory

#  Name of source module to locate.

$module = $ARGV[0];

#  Open index file, tied to index hash %locate.

tie %locate, SDBM_File, $indexfile, O_RDONLY, 0644;

#  Set locations of logical names appearing in logical paths.
#  It may be desirable to override these if the database has been moved.

$basedir{'SOURCE'}  = $location{'#SOURCE'};
$basedir{'INCLUDE'} = $location{'#INCLUDE'};

#  Set up scratch directory.

system "mkdir -p $tmpdir" and die "Failed to mkdir $tmpdir: $?\n";
chdir $tmpdir             or  die "Failed to enter $tmpdir\n";

#  Get logical path name from database.

$location = $locate{$module};

#  Substitute in base directory name.

$location =~ s%(^[^/]*)(.*)$%$basedir{$1}/$2%;

#  Extract file from logical path.

extract_file $location;

#  End

exit;


########################################################################
# Subroutines.

sub extract_file {

#  Arguments.

   my $location = shift;

   $location =~ /^([^>]+)>?([^>]*)(>?.*)$/;
   ($file, $tarcontents, $tail) = ($1, $2, $3);
   if ($tarfile) {
      tarxf $file, $tarcontents;
      extract_file "$tarcontents$tail";
   }
   else {
      output $file;
   }
}

