
#  This is a Bourne shell script.  In order to be POSIX-compliant, the
#  first line must be blank.

#+
#  Name:
#     mk
#
#  Purpose:
#     Invoke make to build and install the STARTCL package.
#
#  Type of Module:
#     Shell script.
#
#  Description:
#     This script should normally be used to invoke the make utility
#     to build and install the STARTCL package and to perform other 
#     housekeeping tasks.  It invokes the make utility after first 
#     defining appropriate environment variables and macros for the
#     computer system in use.  This file also serves to document the
#     systems on which STARTCL is implemented.
#
#  Invocation:
#     The user of this script should normally first define the SYSTEM
#     environment variable to identify the host computer system (see
#     the "Supported Systems" section).  This script should then be used
#     in the same way as the make utility would be used.  For instance,
#     to build, install and test the startcl, you might use the following 
#     commands:
#
#        ./mk build
#        ./mk install
#        ./mk test
#        ./mk clean
#
#  Supported Systems:
#     The following systems are currently supported and may be
#     identified by defining the SYSTEM environment variable
#     appropriately before invoking this script:
#
#        alpha_OSF1
#           DEC Alpha machines running OSF1
#
#        ix86_Linux
#           Intel PC running Linux
#
#        sun4_Solaris
#           SUN Sparcstations running SunOS 5.x (Solaris)
#
#     This script will exit without action if the SYSTEM environment
#     variable is not defined.  A warning will be issued if it is
#     defined but is not set to one of the values above.  In this case,
#     no additional environment variables will be defined by this
#     script (any that are pre-defined will be passed on to make
#     unaltered).
#
#  Targets:
#     For details of what targets are provided, see the associated
#     makefile.  The latter will normally provide a default target
#     called "help", which outputs a message describing this script
#     and lists the targets provided.
#
#  Notes on Porting:
#     If your machine or system setup does not appear in this script,
#     then it should be possible to build and install the startcl
#     by adding a new case to this script with appropriate definitions 
#     (probably based on one of the existing implementations).
#
#  make Macros:
#     The following "global" make macros are used in the associated
#     makefile and may be changed by means of appropriate environment
#     variable definitions (in each case the default is shown in
#     parentheses).  Note that these macros are provided to allow
#     external control over the directories in which software is
#     installed, etc., so they should not normally be re-defined within
#     this script.
#
#        STARLINK (/star)
#           Pathname of the root directory beneath which Starlink
#           software is currently installed.  This indicates to
#           startcl where to find other Starlink software (include
#           files, libraries, etc.) which it uses.
#
#        INSTALL ($HOME)
#           Pathname of the root directory beneath which startcl will
#           be installed for use.  Your home directory will be used by
#           default.  This macro is provided to allow startcl to be
#           installed locally for personal use (e.g. during development
#           or testing).  It should be set to the $STARLINK directory if
#           you want to add startcl into an already installed set of
#           Starlink software.  You should ensure that the appropriate
#           sub-directories appear on any relevant search paths which
#           your system uses for locating software (e.g. binaries and
#           libraries).
#
#        EXPORT (.)
#           Pathname of the directory into which compressed tar files
#           will be written if the "export" or "export_source" make
#           targets are used to produce an exportable copy of startcl
#           or its source files.  The current working directory (i.e.
#           the startcl source directory) will be used by default.
#
#     The following "local" make macros are used in the associated
#     makefile and should normally be overridden by environment variable
#     definitions within this script.  All the local macros that are
#     used in building a package should overridden even when the value
#     is the same as the default.  This documents which macros are used
#     and ensures that the package will continue to build correctly even
#     if the default values are changed.  Macros that are not used on a
#     particular machine (e.g. BLD_SHR on DECstations) should not be
#     overridden.  In each case the default is shown in parentheses.
#
#        TCL_INSTALL_DIR (STARLINK)
#           The location of the existing Tcl/Tk installation
#           or the location of the one you want to use.
#
#        CC (c89)
#           The C compiler command to use.
#
#        CFLAGS (-O)
#           The C compiler options to use.
#
#        FC (fort77)
#           The Fortran compiler command to use.  startcl requires a Fortran
#           77 compiler that supports the common "permitted" Starlink
#           extensions, as documented in Starlink General Paper SGP/16.
#           (These include only the most common extensions, such as
#           long names, end of line comments, include files, etc.)
#
#        FFLAGS (-O)
#           The Fortran compiler options to be used.
#
#        LINK (ln)
#           The command required to establish a link to a file.  The
#           default assumes POSIX.2 behavior, which only provides a
#           "hard" link operating within a single file system.  If the
#           host operating system allows "symbolic" links, then this
#           macro might be re-defined as 'ln -s'.  Alternatively, if the
#           use of multiple file systems is essential but not supported
#           by any form of link, then a copy command could be
#           substituted (e.g. 'cp -p'), at some cost in file space.
#
#        SOURCE_VARIANT ($SYSTEM)
#           The name used to distinguish between platform-specific
#           files.  Using the default ($SYSTEM) implies that multiple
#           copies of the same source may exist under different names.
#           For example, the files sub1.f_sun4 and sun1.f_sun4_Solaris
#           may contain identical source code.  If this is to be
#           avoided (to save space), edit this script to set
#           SOURCE_VARIANT to a suitable string - for example setting it
#           to "sun" would allow one copy of the source called
#           sub1.f_sun to be used. To do this, add to each of the
#           per-system sections a statement of the form:
#
#              SOURCE_VARIANT='string'
#
#        TAR_IN (tar cvhf)
#           Command to use to insert a file into a .tar archive file.
#           If symbolic links are supported, then an option to follow
#           these must be included in this command).
#
#        TAR_OUT (tar xf)
#           Command to use to extract a file from a .tar archive file.
#
#        FLIBS
#           Libraries needed to link a C program which calls Fortran
#           subroutines.
#
#  Copyright:
#     Copyright (C) 1995-2000 Central Laboratories for Research Councils
#
#  Authors:
#     DLT: D.L.Terrett (Starlink, RAL)
#     BLY: M.J.Bly (Starlink, RAL)
#     {enter_new_authors_here}
#
#  History:
#     22-MAR-1195 (DLT):
#        Created from lib_mk template.
#     21-SEP-1995 (DLT):
#        Changed package name to startcl.
#     09-OCT-1996 (BLY):
#        Added Linux support.
#     21-MAY-1997 (BLY):
#        Minor cosmetic mods.
#      3-MAR-1999 (DLT):
#        Enabled building of loadable extensions on Linux.
#     11-SEP-2000 (BLY):
#        Changed TAR_IN/TAR_OUT macro defaults.
#        Modified logic for finding Tcl/Tk configure scripts.
#        Modified CFLAGS to include locations of Tcl and Tk include files.
#     11-OCT-2000 (BLY):
#        Modified logic for finding Tcl/Tk configure scripts.
#     {enter_further_changes_here}
#
#  Bugs:
#     {note_any_bugs_here}
#
#-

#  Export "local" definitions to the environment for use by make.
      export CC
      export CFLAGS
      export FC
      export FFLAGS
      export FLIBS
      export LDFLAGS
      export LD_SHARE
      export LINK
      export SHARE
      export SOURCE_VARIANT
      export TAR_IN
      export TAR_OUT
      export TCL_VERSION
      export TCL_PREFIX
      export TCL_EXEC_PREFIX
      export TCL_LIB_SPEC
      export TCL_STUB_LIB_SPEC
      export TK_VERSION
      export TK_PREFIX
      export TK_EXEC_PREFIX
      export TK_LIB_SPEC
      export TK_STUB_LIB_SPEC

#  Find and execute TCL and TK configuration scripts.

      for arg in $* " " ; do 
         if [ X"${arg}" = "Xbuild" ] || \
            [ X"${arg}" = "Xinstall" ] || \
            [ X"${arg}" = "Xtest" ] ; then
            echo "Searching for Tcl/Tk config scripts to execute..."
            failed='n'
            for file in lib/tclConfig.sh lib/tkConfig.sh ; do
               conf='n'
               for dir in "${TCL_INSTALL_DIR}" "${STARLINK}" "/star" ; do
                   if [ ${conf} = 'n' ] ; then 
                      if [ -f $dir/$file ] ; then
                         . $dir/$file
                         conf='y' 
                         echo "Found and executed $dir/$file"
                      fi
                   fi
               done
               if [ ${conf} = 'n' ] ; then
                  echo "Failed to find $file"
                  failed='y'
               fi
            done
            if [ ${failed} = 'y' ] ; then
   echo "mk: Unable to determine which Tcl/Tk config scripts to use!"
   echo "    Please use either TCL_INSTALL_DIR or STARLINK environment"
   echo "    variables to locate lib/tclConfig.sh and lib/tkConfig.sh."
               exit 1
            fi
         fi
      done

#  Check that the SYSTEM environment variable is defined.
      if test "$SYSTEM" = ""; then
         echo "mk: Please define the environment variable SYSTEM to identify"
         echo "    your computer system (the prologue in the mk script file"
         echo "    contains more information if you require it)."

#  If OK, test for each recognised system.
      else
         case "$SYSTEM" in

#  DEC Alpha:
#  =========
#  DEC Alpha machines running OSF1.
#  -------------------------------
            alpha_OSF1)
               CC='cc'
               CFLAGS='-I$(TCL_PREFIX)/include -I$(TK_PREFIX)/include -I$(STAR_INC) -O -std1 -DHAVE_UNISTD_H=1 -DUSE_OLD_CANVAS'
               FC='f77'
               FFLAGS='-O -nofor_main -oldstyle_liblookup'
               FLIBS='-lfor -lots'
               LD_SHARE='ld -shared -expect_unresolved "*" -oldstyle_liblookup'
               LINK='ln -s'
               SHARE='.so'
               echo "mk: Environment variables defined for $SYSTEM system"
               ;;

#  SUN Sparcstations running SunOS 5.x (Solaris).
#  ---------------------------------------------
            sun4_Solaris)
               CC='cc'
               CFLAGS='-I$(TCL_PREFIX)/include -I$(TK_PREFIX)/include -I/usr/openwin/include -I$(STAR_INC) -O -DHAVE_UNISTD_H=1 -K pic -DUSE_OLD_CANVAS'
               FC='f77'
               FFLAGS='-O -lsocket'
               FLIBS=''
               LDFLAGS=' -lnsl -lsocket -ldl'
               LD_SHARE='/usr/ccs/bin/ld -G -z text'
               LINK='ln -s'
               SHARE='.so'
               echo "mk: Environment variables defined for $SYSTEM system"
               ;;

#  PC systems:
#  ==========
#  Intel PC running Linux.
#  ----------------------
            ix86_Linux)
               CC='gcc'
               CFLAGS='-I$(TCL_PREFIX)/include -I$(TK_PREFIX)/include -I/usr/X11R6/include -I$(STAR_INC) -O -DHAVE_UNISTD_H=1 -fPIC -DUSE_OLD_CANVAS'
               FC='g77'
               FFLAGS='-fno-second-underscore -O '
               LDFLAGS=' -ldl'
               LD_SHARE='cc -shared'
               LINK='ln -s'
               SHARE='.so'
               echo "mk: Environment variables defined for $SYSTEM system"
               ;;

#  Issue a warning if SYSTEM is not recognised.
            *)
               SOURCE_VARIANT='unknown'
               echo "mk: WARNING: value of SYSTEM = $SYSTEM not recognised..."
               echo "             ...assuming default system characteristics"
               echo '             ...setting SOURCE_VARIANT to "unknown"'
               ;;
         esac

#  Invoke make with the appropriate environment variables set to override
#  default macros defined in the makefile.
         echo make -e $*
         make -e $*
      fi

#  End of script.
