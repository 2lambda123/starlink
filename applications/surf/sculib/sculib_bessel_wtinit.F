      SUBROUTINE SCULIB_BESSEL_WTINIT (WTFN, RADIUS, RES, STATUS)
*+
*  Name:
*     SCULIB_BESSEL_WTINIT
*
*  Purpose:
*     Generate a weighting function for rebinning

*  Language:
*     Starlink FORTRAN 77

*  Invocation:
*     CALL SCULIB_BESSEL_WTINIT( WTFN, RADIUES, RES, STATUS)

*  Description:
*     This is a FORTRAN version of the C code written for the transputer
*     rebinning. Here is the C description:
*     Initialise the BESSEL weighting function for Bessel interpolation.
*     The 1-D function 2.0*J1(x)/x is initialised in the declaration, and the
*     weighting function lookup table is calculated from this. The
*     tabulation is at intervals of pi/RES for the range 0.0 to RADIUS*pi,
*     resulting in (RES*RADIUS)**2 values. The weight function is also 
*     multiplied by a cosine over the oute third to reduce edge effects.
* 
*     The look up table is initialised such that one can access the
*     weight directly given the square of the distance between the input
*     and output pixel. We use a fixed resolution out to 10PI.

*  Arguments:
*     WTFN ( RADIUS * RADIUS * RES * RES + 1) = REAL (Returned)
*       The weighting function generated by this routine.
*       The index corresponds to the square of the distance from the
*       centre in scale units.
*     RADIUS = INTEGER (Given)
*        Size of the weighting function in scale units.
*     RES = INTEGER (Given)
*        Number of points per scale lenghth.
*     STATUS = INTEGER (Given & Returned)
*        Global status     

*  Authors:
*     T. Jenness (timj@jach.hawaii.edu) - FORTRAN version
*     Yan Lucas                         - Transputer version


*  Copyright:
*     Copyright (C) 1995,1996,1997,1998,1999 Particle Physics and Astronomy
*     Research Council. All Rights Reserved.

*  History:
*     $Log$
*     Revision 1.1  2004/07/14 02:04:36  timj
*     autoconfed
*
*     Revision 1.9  1999/08/06 02:24:38  timj
*     Tweak headers for use with PROLAT.
*
*     Revision 1.8  1999/08/03 19:34:44  timj
*     Add copyright message to header.
*     Convert old header style to new.
*
*     Revision 1.7  1999/07/29 21:51:06  timj
*     Add History: tag to header.
*

*-


*  Type definitions
      IMPLICIT NONE

*  External constants:
      INCLUDE 'SAE_PAR'
*  External functions:

#if HAVE_INTRINSIC_IEEE_FLAGS
      INTEGER IEEE_FLAGS
      CHARACTER *18 OUT                  ! IEEE return constant
#endif

*  Local constants
      REAL PI
      PARAMETER (PI = 3.14159265359)

*  Arguments Given:
      INTEGER RES                    ! Number of resolution elements
      INTEGER RADIUS                 ! Radius (in scale lengths)
      INTEGER STATUS

*  Arguments Given & Returned:
      REAL WTFN(RES * RES * RADIUS * RADIUS + 1)

*  Local variables:
      INTEGER I                          ! Counter
      REAL BUFFBESS                      ! Index of bessel function
      INTEGER SIZE                       ! Number of points in WTFN
      INTEGER FILTER_SQ                  ! RES squared
      INTEGER FILTRAD_SQ                 ! RADIUS squared
      REAL SCULIB_BESSJ1                 ! J1(X)
      REAL ISTOP                         ! End of cosine
      REAL ISTART                        ! Start of cosine

*-

      IF (STATUS .NE. SAI__OK) RETURN

* One scale length is PI

      FILTER_SQ = RES * RES
      FILTRAD_SQ = RADIUS * RADIUS

      SIZE = FILTER_SQ * FILTRAD_SQ

      WTFN(1) = 1.0
      WTFN(SIZE + 1) = 0.0
      DO I = 2, SIZE
     
         BUFFBESS = SQRT(REAL(I)) * PI / REAL(RES)

         WTFN(I) = 2.0 * SCULIB_BESSJ1(BUFFBESS, STATUS) / BUFFBESS

      END DO

      ISTART = NINT(0.66 * 0.66 * REAL(SIZE))
      ISTOP = PI * 0.5 / SQRT(REAL(SIZE - ISTART)) 


*    WTFN(ISTART) = WTFN(ISTART) since COS(0) = 1.0

      DO I = ISTART + 1, SIZE

         BUFFBESS = SQRT(REAL(I-ISTART))
         WTFN(I) = WTFN(I) * COS(BUFFBESS * ISTOP)

      END DO

* Clear the IEEE inexact flag

#if HAVE_INTRINSIC_IEEE_FLAGS
      I = IEEE_FLAGS('clear', 'exception', 'inexact', out)
#endif

      END



