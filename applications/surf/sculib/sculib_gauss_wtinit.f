      SUBROUTINE SCULIB_GAUSS_WTINIT (WTFN, RADIUS, RES, STATUS)
*+
*  Name:
*     SCULIB_GAUSS_WTINIT
*
*  Purpose:
*     Generate a weighting function for rebinning
*
*  Language:
*     Starlink FORTRAN 77
*
*  Invocation:
*     CALL SCULIB_GAUSS_WTINIT (WTFN, RADIUS, RES, STATUS)
*
*  Description:
*     A Gaussian weighting function
*     The look up table is initialised such that one can access the
*     weight directly given the square of the distance between the input
*     and output pixel. 
*     The scale length is taken to be radius at half-width-half-max
*     The gaussian should go out to a radius of at least 3 scale 
*     lengths (<0.2% of peak). Governed by the RADIUS argument
*     The function is simply taken as
*       F(x) = exp(-X**2)
*     where the scale size (FWHM) is at X = SQRT(loge(2))

*
*  Arguments:
*     WTFN ( RADIUS * RADIUS * RES * RES + 1) = REAL (Returned)
*       The weighting function generated by this routine.
*       The index corresponds to the square of the distance from the
*       centre in scale units.
*     RADIUS = INTEGER (Given)
*        Size of the weighting function in scale units.
*     RES = INTEGER (Given)
*        Number of points per scale lenghth.
*     STATUS = INTEGER (Given & Returned)
*        Global status

*  Authors:
*     T. Jenness (timj@jach.hawaii.edu)

*  History:
*     $Log$
*     Revision 1.2  1999/07/29 21:51:06  timj
*     Add History: tag to header.
*

*-

*  Type definitions
      IMPLICIT NONE

*  External constants:
      INCLUDE 'SAE_PAR'

*  Arguments Given:
      INTEGER RES                    ! Number of resolution elements
      INTEGER RADIUS                 ! Radius (in scale lengths)
      INTEGER STATUS

*  Arguments Given & Returned:
      REAL WTFN(RES * RES * RADIUS * RADIUS + 1)

*  Local variables:
      INTEGER I                          ! Counter
      INTEGER SIZE                       ! Number of points in WTFN
      INTEGER FILTER_SQ                  ! RES squared
      INTEGER FILTRAD_SQ                 ! RADIUS squared
      REAL    POS                        ! Distance from centre **2
      REAL    SCAL_LENGTH_SQ             ! Scale length
*.


      IF (STATUS .NE. SAI__OK) RETURN

*     One scale length is one half width half maximum
*     For parametrized Gaussian we can set HWHM = 1.0
*     and then scale it by using the pixel to res element conversion

      SCAL_LENGTH_SQ = LOG(2.0)


*     Calculate the size of the weighting function
      FILTER_SQ = RES * RES
      FILTRAD_SQ = RADIUS * RADIUS
      SIZE = FILTER_SQ * FILTRAD_SQ

      WTFN(1) = 1.0
      WTFN(SIZE + 1) = 0.0
      DO I = 2, SIZE
     
*     Distance as a fraction of the scale length all squared
         POS = REAL(I) *  SCAL_LENGTH_SQ  / REAL(FILTER_SQ)

*     Weighting function is then simply the exponential of minus the
*     distance squared. Normalisation comes out when we divide by
*     the total weight.
         WTFN(I) = EXP ( -POS )

      END DO

      END



