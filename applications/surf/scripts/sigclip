#!/star/bin/ndfperl -s
#
#  This program requires the NDF module and ndfperl.
#  This program will run as long as ndfperl exists in /star/bin
#  Note that this ndfperl can be a soft link to your normal
#  perl so long as the NDF module is installed as a shareable module.

# SIGCLIP
#    - Program to clip a dataset at a given sigma level

# Load the NDF module
use NDF;

my ($par, $pkg);

# Get the location of KAPPA
 
if (defined $ENV{"KAPPA_DIR"}) {
  $kappa = $ENV{"KAPPA_DIR"};
} else {
  die "Can not start - The KAPPA_DIR environment variable is not set\n";
}

die "Usage: sigclip NDF NSIGMA\n" if $#ARGV != 1;

# Where to look for the adam directory
($ndf, $nsigma) = @ARGV;

$status = &NDF::SAI__OK;
$good = $status;

# Check for file

# Remove trailing sdf
$ndf =~ s/\.sdf$//;

# Start ndf
ndf_begin;

# Check that files exists simply by doing an ndf_find
# and checking for good status.

ndf_find(&NDF::DAT__ROOT, $ndf, $indf, $status);

if ($status == $good) {
  print "Using the NDF $ndf...\n";
  $usethis = $ndf;
  ndf_annul($indf, $status);
  ndf_end($status);
} else {
  err_rep(' ',"SIGCLIP: $ndf does not appear to be an NDF", $status);
  err_flush($status);
  ndf_end($status);
  exit;
}

# Get the root name for later on (in case a section was specified)
($ndfroot, $junk) = split(/\.|\(/,$ndf);


# Run stats

$exstat = system("$kappa/stats $ndf > /dev/null");
die "STATS finished abnormally...stopping (status = $exstat)\n"
  if ($exstat != 0);

($mean) =  par_get("mean", "stats", \$status);
($sigma) = par_get("sigma", "stats", \$status);

$max = $mean + ($nsigma * $sigma);
$min = $mean - ($nsigma * $sigma);

die "Bad status returning from par_get - Status = $status)\n"
  if ($status != $good);

# Run thresh

$out = $ndfroot."_clip";
$exstat = 
  system("$kappa/thresh $ndf OUT=$out THRLO=$min NEWLO=bad THRHI=$max newhi=bad");

die "THRESH finished abnormally...stopping (status = $exstat)\n" 
  if ($exstat != 0);

if (-e "$out.sdf") {
  print "Clipped data written to $out.sdf\n";
} else {
  print "Warning - failed to write $out.sdf\n";
}


__END__
*+
*  Name:
*    SIGCLIP

*  Purpose:
*    Clip a dataset at n-sigma

*  Type of module:
*    Perl 5 script

*  Description:
*    This program uses kappa STATS to calculate mean and standard 
*    deviation of an NDF. It then uses kappa THRESH to set the values at +/-
*    n-sigma to BAD. The clipped data are written to NDF_clip.sdf.

*  Usage:
*    sigclip NDF SIGMA

*  ADAM Parameters:
*    NDF (Given)
*      The required dataset
*    SIGMA = REAL (Given)
*      The clipping level

*  Examples:
*     sigclip test 3.0
*        Clips test.sdf at +/-3.0 sigma and writes the data to
*        test_clip.sdf.

*  Notes:
*     The $KAPPA_DIR environment variable must point to the location
*     of the KAPPA binaries (this is usually done during a Starlink login).

*  Related Applications:
*     SURF: SCUCAT, SCUPHOT;
*     KAPPA: STATS, THRESH

*  Implementation Status:
*     - The program must have two arguments. Parameters are not requested
*       if an argument is omitted from the command line.

*-
*.


