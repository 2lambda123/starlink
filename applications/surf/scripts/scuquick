#!/star/bin/ndfperl 
#
#  This program requires the NDF module and ndfperl.
#  This program will run as long as ndfperl exists in /star/bin
#  Note that this ndfperl can be a soft link to your normal
#  perl so long as the NDF module is installed as a shareable module.


# See end for Starlink header (Since PROHLP wants * and not # comments)

# The NDF library
use NDF;

# Command line options
use Getopt::Long;

my ($par, $pkg);

# Get the location of SURF

if (defined $ENV{"SURF_DIR"}) {
  $root = $ENV{"SURF_DIR"};
} else {
  die "Can not run - The SURF_DIR environment variable is not set\n";
}

# Read the standard options from the command line
$result = GetOptions("help"    => \$h,
		     "quick"   => \$quick,
		     "quiet"   => \$quiet,
		     "remsky"  => \$remsky,
		     "rebin"   => \$rebin,
		     "change_flat" => \$modify,
		     "notau"   => \$notau,
		     "tau=f"   => \$tauz,
		     "sub=s"   => \$subinst,
		     "clip"    => \$clip,
                     "noflat"  => \$noflat
);

$h = 1 unless $result == 1;  # Print help info if unknown option

#######################################################################

# Print a help message


($h) && do {
    print qq/
Usage:
   scuquick [-h] [-change_flat] [-remsky] [-rebin] [-notau|tau f] [-sub s]
Options:
   -h[elp]\t This message
   -quick \t Run all tasks with the 'accept' flag (ie take defaults)
   -quiet \t Hide all messages generated by the script (note this is 
          \t not the same as using MSG_FILTER=quiet which hides messages
          \t from the tasks)
   -change_flat\t Run the change_flatfield task
   -noflat\t Do not run FLATFIELD
   -remsky\t Run remsky
   -rebin\t Regrid the data
   -sub s\t Select a specific sub-instrument (else selects all)
   -notau\t Use a tau value of 0 in extinction
   -tau f\t Use a constant value (f) for the tau. This is dangerous
         \t when reducing data containing multiple sub-instruments
         \t unless the -sub flag is used.
   --sub=s\t Same as -sub s
   --tau=f\t Same as -tau f

Notes:
   Parameters for any task can be specified on the command line
   as param=value. All other command line arguments are assumed to be
   input NDFs.
/;
    exit;
  };

########################################################################
# Read the command line parameters

@ndfs = ();
%params = ();

foreach $arg (@ARGV) {

  $arg =~ /=/ && do {
    ($param, $value) = split(/=/, $arg);
    $param = uc($param);
    $params{$param} = $value;
  } || push(@ndfs, $arg);

}

# Modify the input parameters if we have used a command line switch
$params{'SUB_INSTRUMENT'} = $subinst if ($subinst =~ /./);
if ($notau || $tauz =~ /./) {
  $params{'FIRST_LST'} = 0.0;
  $params{'SECOND_LST'} = 0.0;
  $params{'FIRST_TAU'} = $tauz + 0;
  $params{'SECOND_TAU'} = $tauz + 0;
}

# Set the GLOBAL status
$status = &NDF::SAI__OK;

########################################################################
# Check for file

if ($#ndfs > -1) {

# If there are more than one possible files given, loop through and
# take the first one that exists.
# Eventually should loop through a file list

  undef $usethis;
  foreach $ndf (@ndfs) {
    ($ndf, $junk) = split('\.',$ndf) if $ndf =~ /\.sdf$/;

    if ($ndf =~ /./) {
      (-e "$ndf.sdf" | -e $ENV{'DATADIR'}."/$ndf.sdf") &&
	do {      
	  push(@NDFs, $ndf);
	} ||
	  do {
	# It might have been given as just a number and expect to use
	# SCUBA_PREFIX
	    if ($ndf + 0 > 0) {  # Check that we have just a number
	      $scanno = sprintf("%04d", $ndf);  # add the leading zeroes
	      $ndftemp = $ENV{'SCUBA_PREFIX'}.'_dem_'.$scanno;
	      push (@NDFs, $ndftemp) 
		if (-e "$ndftemp.sdf" | -e $ENV{'DATADIR'}."/$ndftemp.sdf");
	    }

	  };

      }
    }


  undef $ndf;
  if ($#NDFs == -1) {
    print "No files were found named ",join(" ",@ndfs),"\n";
  } else {
    $ndf = $NDFs[0];
    print "Processing $ndf\n" unless ($quiet);
  }
}


########################################################################
# reduce_switch

$parin = "IN=$ndf" if ($ndf =~ /./);

undef $modpars;
foreach $par ('USE_CALIBRATOR','SPIKE_LEVEL','OUT', 'SWITCH', 'MSG_FILTER') {
  $modpars = $modpars." $par=".$params{$par}
  if ($params{$par} =~ /./);
}

$modpars .= " accept" if $quick;

$exstat = system("$root/reduce_switch $parin $modpars");

die "REDUCE_SWITCH finished abnormally...stopping (status = $exstat)\n"
  if ($exstat != 0);


#Get OUT from GLOBAL.sdf

$status = &NDF::SAI__OK;
($in) = par_get("data_array","GLOBAL", \$status);

(-e "$in.sdf") || die "REDUCE_SWITCH finished abnormally...stopping ($in.sdf was not created)\n";

########################################################################
# Before going further I need to find out some stuff about the 
# observation.
#   - Is this a SKYDIP?
#   - Later on we need to know the number of subinstruments


ndf_begin;
ndf_find(&NDF::DAT__ROOT, $in, $indf, $status);
ndf_xloc($indf, 'FITS', 'READ', $xloc, $status);
@fits = ();
dat_get1c($xloc, 200, @fits, $nfits, $status);
dat_annul($xloc, $status);
ndf_annul($indf, $status);
ndf_end($status);

$mode = fits_get_item(@fits, "MODE");

# This is a kludge for now until a real pipeline appears
if ($mode eq "SKYDIP") {
  undef $modify;
  $noflat = 1;
}



########################################################################
#Modify

if ($modify) {

  undef $modpars;

  # If NEW_FLAT parameter is set then I can pass that in
  undef $modpars;
  foreach $par ('NEW_FLAT','MSG_FILTER') {
    $modpars = $modpars." $par=".$params{$par}
    if ($params{$par} =~ /./);
  }

  $modpars .= " accept" if $quick;

  $exstat = system("$root/change_flat $in $modpars");
  die "CHANGE_FLAT finished abnormally...stopping (status = $exstat)\n"
    if ($exstat != 0);
} 

########################################################################
# Flatfield

unless ($noflat) {

  $outflat = $in."_flat";

  undef $modpars;
  foreach $par ('MSG_FILTER') {
    $modpars = $modpars." $par=".$params{$par}
    if ($params{$par} =~ /./);
  }

  # Note I use IN= so that $in is allowed to be just a number

  $exstat = system("$root/flatfield IN=$in $modpars OUT=$outflat");
  die "FLATFIELD finished abnormally...stopping (status = $exstat)\n"
    if ($exstat != 0);

  (-e "$outflat.sdf") || 
    die "FLATFIELD finished abnormally...stopping ($outflat.sdf was not created)\n";

} else {
  $outflat = $in;
}


$n_subs = fits_get_item(@fits, "N_SUBS");

for ($i=1; $i <= $n_subs; $i++) {
  push(@subs, fits_get_item(@fits, "SUB_$i"))
}

# From here on in I need to work on multiple subinstruments UNLESS
# either $subinst is set or the parameter SUB_INSTRUMENT was specified

if ($subinst =~ /./) { 
  undef @subs;
  $subs[0] = $subinst;

} elsif ($params{'SUB_INSTRUMENT'} =~ /./) {

  undef @subs;
  $subs[0] = $params{'SUB_INSTRUMENT'};
}


# Now begin the loop over subinstrument.
# Note that SUB_INSTRUMENT is no longer in @parlist.

foreach $onesub (@subs) {

  print "\nProcessing the $onesub sub instrument\n\n" unless ($quiet);

  $subname = lc($onesub);
  $subname = substr($subname, 0, 3);
  $outext = $in."_${subname}_ext";

  # A nasty kludge for skydip data
  if ($mode eq "SKYDIP") {
    
    @parlist = ('MSG_FILTER');
    undef $modpars;
    foreach $par (@parlist) {
      $modpars = $modpars." $par=\\\"".$params{$par} . "\\\"" 
	if ($params{$par} =~ /./);
    }
    $modpars .= " SUB_INSTRUMENT=$onesub";

    $exstat = system("$root/skydip IN=$outflat $modpars");
    die "SKYDIP finished abnormally...stopping (status = $exstat)\n"
      if ($exstat != 0);

    # Loop round
    next;

  }



  ########################################################################
  # Extinction

  @parlist = ('FIRST_TAU','FIRST_LST', 'SECOND_TAU',
	      'SECOND_LST', 'MSG_FILTER');

  # Need to use quotes as FIRST_LST can contain spaces if passed in as
  # an arguement.
  undef $modpars;
  foreach $par (@parlist) {
    $modpars = $modpars." $par=\\\"".$params{$par} . "\\\"" 
    if ($params{$par} =~ /./);
  }

  $modpars .= " SUB_INSTRUMENT=$onesub";

  $modpars .= " accept" if $quick;

  $exstat = system("$root/extinction IN=$outflat $modpars OUT=$outext");
  die "EXTINCTION finished abnormally...stopping (status = $exstat)\n"
    if ($exstat != 0);
  
  (-e "$outext.sdf") || die "EXTINCTION finished abnormally...stopping ($outext.sdf was not created)\n";

  print "Extinction corrected data has been written to file $outext.sdf\n"
    unless $quiet;

  ########################################################################
  # SCUCLIP

  if ($clip) {

    $outclip = $in . "_" . $subname . "_clip";
  
    @parlist = ('MSG_FILTER', 'NSIGMA');

    undef $modpars;
    foreach $par (@parlist) {
      $modpars = $modpars." $par=".$params{$par} 
      if ($params{$par} =~ /./);
    }
    
    $modpars .= " accept" if $quick;

    $exstat = system("$root/scuclip IN=$outext $modpars OUT=$outclip");
    die "SCUCLIP finished abnormally...stopping (status = $exstat)\n"
      if ($exstat != 0);
    
    (-e "$outclip.sdf") || 
      die "REMSKY finished abnormally...stopping ($outclip.sdf was not created)\n";


    print "Sky corrected data has been written to file $outclip.sdf\n"
      unless $quiet;

    $outext = $outclip;

  }

  ########################################################################
  # REMSKY

  if ($remsky) {

    $outsky = $in."_".$subname."_sky";

    @parlist = ('BOLOMETERS','MODE', 'MSG_FILTER','ITER_SIGMA','ADD');
    
    undef $modpars;
    foreach $par (@parlist) {
      $modpars = $modpars." $par=".$params{$par} 
      if ($params{$par} =~ /./);
    }
    
    $modpars .= " accept" if $quick;
    
    $exstat = system("$root/remsky IN=$outext $modpars OUT=$outsky");
    die "REMSKY finished abnormally...stopping (status = $exstat)\n"
      if ($exstat != 0);
    
    (-e "$outsky.sdf") || 
      die "REMSKY finished abnormally...stopping ($outsky.sdf was not created)\n";


    print "Sky corrected data has been written to file $outsky.sdf\n"
      unless $quiet;
    
    $outext = $outsky;
  }
  

  ########################################################################
  # Now, if this is a photometry observation I need to run
  # SCUPHOT as well.

  # Note that if the -rebin flag is used then photometry data will be 
  # rebinned

if ($mode eq 'PHOTOM') {

  @parlist = ('ANALYSIS','ALLBOLS','MSG_FILTER');
  undef $modpars;
  foreach $par (@parlist) {
    $modpars = $modpars." $par=".$params{$par} 
    if ($params{$par} =~ /./);
  }

  $modpars .= " accept" if $quick;

  $outphot = $in."_".$subname . "_pht";

 $file = "$outphot.dat";
  if (-e $file) {
    unlink $file;
    print "Removing old version of $outphot.dat\n" unless $quiet;
  } 

  $exstat = system("$root/scuphot IN=$outext OUT=$outphot FILE=$outphot.dat $modpars");
  die "SCUPHOT finished abnormally...stopping (status = $exstat)\n"
    if ($exstat != 0);

#  ($file) = par_get("file", "scuphot", \$status);

  (-e $file) || die "SCUPHOT did not write a log file\n";

  (-e "$outphot.sdf") || 
    die "SCUPHOT finished abnormally...stopping ($outphot.sdf was not created)\n";


  print "Processed photometry data written to $outphot.sdf and $file\n"
    unless $quiet;

}

if (($mode eq 'MAP' | $mode eq 'POINTING' | $mode eq 'PHOTOM') && $rebin){

########################################################################
  # I can give the option of rebinning
  # I will try to rebin everything - PHOTOM as well as MAP

  @parlist = ('REBIN_METHOD','IN','MSG_FILTER',
	     'WEIGHT','SHIFT_DX','SHIFT_DY','OUT_OBJECT','OUT_COORDS',
	     'LAT_OUT','LONG_OUT','PIXSIZE_OUT');
  undef $modpars;
  foreach $par (@parlist) {
    $modpars = $modpars." $par=".$params{$par} 
    if ($params{$par} =~ /./);
  }

  $modpars .= " accept" if $quick;
  $modpars .= " NOLOOP";

  $outreb = $in."_".$subname."_reb";
  $exstat = system("$root/rebin REF=$outext $modpars OUT=$outreb");
  die "REBIN finished abnormally...stopping (status = $exstat)\n"
    if ($exstat != 0);

  (-e "$outreb.sdf") || 
    die "REBIN finished abnormally...stopping ($outreb.sdf was not created)\n";

  print "Regridded data has been written to file $outreb.sdf\n"
    unless $quiet;

}
}
########################################################################
__END__


*+
*  Name:
*    SCUQUICK

*  Purpose:
*    automate the basic SCUBA data reduction

*  Type of module:
*    Perl 5 script

*  Description:
*    This script attempts to automate the first 3 steps of scuba data
*    reduction. This script runs REDUCE_SWITCH, CHANGE_FLAT (if 
*    requested), FLATFIELD on the data. Then for each sub-instrument
*    EXTINCTION, SCUPHOT (if a photometry observation), REMSKY
*    (if requested) and REBIN (if requested) are used.
*    The output name for each task is related to the task and 
*    current sub-instrument (see Notes).

*  Usage:
*    scuquick [-quick] [-tau|notau] NDF [PARAM=value]

*  ADAM Parameters:
*    -clip
*	 Invoke the SCUCLIP task after EXTINCTION and before REMSKY.
*    -help
*        Print the help message.
*    -quick
*        This flag makes all of the SURF tasks run with the `accept'
*        flag (see SUN/95) so that default values are accepted for all
*        parameters unless specified on the command line.
*    -quiet
*        Hide all messages generated by the script (note this is 
*        not the same as using MSG_FILTER=quiet which hides messages
*        from the tasks)
*    -tau value
*        Run extinction with a tau of `value'. (the LST range is set
*        automatically since we are using a constant tau) Note that this 
*        is dangerous when processing multiple sub-instruments. (Same 
*        as --tau=value).
*    -notau
*        Run extinction with a zero value of tau (the LST range is set
*        for you). This is equivalent to using the --tau=0.0 option.
*    -sub sub_instrument
*        Only process the specified sub instrument. This is equivalent
*        to setting the SUB_INSTRUMENT parameter explicitly. (same
*        as --sub=sub_instrument)
*    -change_flat
*        Invoke the CHANGE_FLATFIELD task after REDUCE_SWITCH
*    -remsky
*        Invoke the REMSKY task after EXTINCTION (or SCUCLIP)
*    -rebin
*        Invoke the REBIN package after EXTINCTION (or REMSKY)
*    NDF
*      The required dataset. This parameter is optional - REDUCE_SWITCH
*      will ask for an input file if no value is given.
*    ADAM parameters = Any
*      Any parameters accepted by the individual routines as long as they
*      use PARAM=VALUE format.

*  Examples:
*    scuquick
*      When run this way, REDUCE_SWITCH will ask for the input file name
*      and for the output root name. FLATFIELD will then run followed
*      by EXTINCTION on each sub-instrument. Each task will ask questions
*      as needed.
*    scuquick -quick
*      Same as scuquick except that defaults will be assumed for all
*      parameters that have defaults.
*    scuquick -rebin
*      Process as for scuquick except that REBIN is run on each
*      sub-instrument.
*    scuquick -quick jun02_dem_0002
*      Process the input file jun02_dem_0002.sdf, accepting all defaults.
*    scuquick -quick jun02_dem_0003 MSG_FILTER=QUIET
*      Process jun02_dem_0003.sdf, accepting all defaults and turning off
*      all but the most important messages from the SURF tasks.
*    scuquick -quick -notau -rebin temp OUT=root 
*      Process temp.sdf with zero extinction correction, accept all
*      defaults, use 'root' as the default filename and regrid.
*    scuquick -remsky -change_flat --sub=long
*      Run the REMSKY and CHANGE_FLAT tasks in addition to the standard
*      tasks but only process the LONG sub-instrument.
*    scuquick -rebin -quick MSG_FILTER=QUIET PIXSIZE_OUT=1 test OUT=temp
*      Process test.sdf. Accept all defaults. Use `temp' as the filename
*      root. Regrid all data onto a 1 arcsecond grid. Hide all messages 
*      from the SURF tasks.

*  Notes:
*    Given a rootname (specified with OUT=root)
*    SCUQUICK produces the following files:
*    - root.sdf  from REDUCE_SWITCH
*    - root_flat.sdf from FLATFIELD
*    - root_ext_<sub>.sdf from EXTINCTION (one for each sub)
*    - root_sky_<sub>.sdf from REMSKY (with the -remsky switch)
*    - root_reb_<sub>.sdf from REBIN (with the -rebin switch)
*    - root_pht_<sub>.sdf from SCUPHOT (if processing a PHOTOM observation)
*    - root_pht_<sub>.dat from SCUPHOT (if processing a PHOTOM observation)
*
*    Where <sub> is the first three letters of the sub-instrument name.
*    Using the -tau switch is dangerous when processing multiple 
*    sub-instruments since the extinction changes with wavelength.
*    - Command line options can be abbreviated.
*    - Options that take values can be used either as `-flag option' or
*      as `--flag=option'
*    - Supports SKYDIP files.

*  Prior requirements:
*    - The NDF perl module must exist (this should be installed by
*      your system administrator if it is missing).

*  Related Applications:
*    SURF: REDUCE_SWITCH, CHANGE_FLAT, FLATFIELD, EXTINCTION, REBIN, REMSKY,
*          SCUPHOT, SCUCLIP

*-


