#!/star/bin/ndfperl -s
#
#  This program requires the NDF module and ndfperl.
#  This program will run as long as ndfperl exists in /star/bin
#  Note that this ndfperl can be a soft link to your normal
#  perl so long as the NDF module is installed as a shareable module.

# QDRAW - Draws a data set with +/- 5 sigma range

# Load the NDF module
use NDF;

my ($par, $pkg);

# Get the location of KAPPA
 
if (defined $ENV{"KAPPA_DIR"}) {
  $kappa = $ENV{"KAPPA_DIR"};
} else {
  die "Can not start - The KAPPA_DIR environment variable is not set\n";
}


# Global status
$status = &NDF::SAI__OK;
$good = &NDF::SAI__OK;


########################################################################
# Read the command line parameters
 
@ndfs = ();
%params = ();
 
foreach $arg (@ARGV) {
 
  $arg =~ /=/ && do {
    ($param, $value) = split(/=/, $arg);
    $param = uc($param);
    $params{$param} = $value;
  } || push(@ndfs, $arg);
 
}

########################################################################
# Check for file

if ($#ndfs > -1) {

# Setup ndf environment
  ndf_begin;
 
# If there are more than one possible files given, loop through and
# take the first one that exists.
 
  undef $usethis;
  foreach $ndf (@ndfs) {
    # Remove trailing sdf
    $ndf =~ s/\.sdf$//;

    # Check that files exists simply by doing an ndf_find
    # and checking for good status.

    err_begin($status);
    ndf_find(&NDF::DAT__ROOT, $ndf, $indf, $status);

    if ($status == $good) {
      print "Using the NDF $ndf...\n";
      $usethis = $ndf;
      ndf_annul($indf, $status);
      last;
    } else {
      err_annul($status);
    }
    err_end($status);
  }
 
  undef $ndf;
  if (defined $usethis) {
    $ndf = $usethis;
  } else {
    print "No NDFs were found named: ",join(" ",@ndfs),"\n";
    exit;
  }

  # Close ndf
  ndf_end($status);

} else {
  print "\tUsage: qdraw [par=] file\n";
  exit;
}


# Exit is status if bad
&bad_status if ($status != $good);

##########################################################################

# Run stats (this should be done in perl)

undef $modpars;

@parlist = ('CLIP');

foreach $par (@parlist) {
  $modpars = $modpars." $par=".$params{$par} 
  if ($params{$par} =~ /./);
}

$exstat = system("$kappa/stats '$ndf' $modpars > /dev/null");
die "STATS finished abnormally...stopping (status = $exstat)\n"
  if ($exstat != 0);

($mean) =  par_get("mean", "stats", \$status);
($sigma) = par_get("sigma", "stats", \$status);

# Range (in sigma) of plot
$nsig = 5.0; # Default
$nsig = $params{NSIGMA} if (defined $params{NSIGMA});



$max = $mean + ($nsig * $sigma);
$min = $mean - ($nsig * $sigma);

# Exit is status if bad
&bad_status if ($status != $good);

# Run linplot

@parlist = ('DEVICE','MODE','ERRBAR','PLTTITL','COMP','LINCOL','SYMCOL',
	   'COSYS','THICK','FONT','ABSLAB','ORDLAB');

undef $modpars;
foreach $par (@parlist) {
  $modpars = $modpars." $par=".$params{$par} 
  if ($params{$par} =~ /./);
}


$exstat =
  system("$kappa/linplot '$ndf' axlim=true ordlim='[$min,$max]' abslim=! $modpars");
die "LINPLOT finished abnormally...stopping (status = $exstat)\n"
  if ($exstat != 0);

# Find out the device name (in case GDSET has not been run)
($device) = par_get("device", "linplot", \$status);

# Exit is status if bad

&bad_status if ($status != $good);

# Run drawsig and draw line at 3 sigma

@parlist = ('SIGCOL','LINESTYLE','AXIS','COMP');

undef $modpars;
foreach $par (@parlist) {
  $modpars = $modpars." $par=".$params{$par} 
  if ($params{$par} =~ /./);
}

$exstat = 
  system("$kappa/drawsig linestyle=2 sigcol=red nsigma='[0,3]' device=$device")
  unless ($noline);
die "DRAWSIG finished abnormally...stopping (status = $exstat)\n"
  if ($exstat != 0 && $noline);

exit;

# This is what happens if status is bad and I want to die

sub bad_status {
  err_flush($status);
  die "Exiting with bad status\n";
}


__END__
*+
*  Name:
*    qdraw

*  Purpose:
*    Draw a data set with plus or minus 5 sigma range

*  Type of module:
*    Perl 5 script

*  Description:
*    This program uses kappa routines to calculate mean and standard 
*    deviation of an NDF. It then uses linplot to display the data with
*    a range of plus or minus 5 sigma. Optionally, DRAWSIG can be used
*    to overlay 3 sigma lines.

*  Usage:
*     qdraw [-noline] NDF [Linplot/Stats/Drawsig parameters]

*  ADAM Parameters:
*    -noline
*      A Unix-type switch which controls whether the 3 sigma lines are 
*      displayed or not.
*    NDF (Given)
*      The required dataset
*    ADAM parameters = Any
*      Any parameters accepted by the individual routines as long as they
*      use PARAM=VALUE format.

*  Examples:
*     qdraw test
*        Draws test.sdf  with a scale of +/- 5 sigma and draws lines at +/- 3 
*        sigma.
*     qdraw -noline test 
*        Same as above but without the 3 sigma lines
*     qdraw mode=2 test
*        Plot the data using `+' symbols (LINPLOT mode 2)
*     qdraw mode=2 sigcol=red test
*        Plot with `+' symbols and use red lines to show the +/- 3 sigma lines.

*  Related Applications:
*    SURF: SCUCAT, SCUPHOT;
*    KAPPA: STATS, LINPLOT, DRAWSIG

*-




