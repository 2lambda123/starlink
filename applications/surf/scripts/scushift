#!/star/bin/ndfperl -s

# Script to shift ADC cards along by a specified amount. A big kludge.
# Since all channels are read from a particular ADC card but only some
# of them are actually stored in the demodulated data file, the shift
# may result in fewer bolometers being stored for a given sub-instrument.
#
# Here is an example:
#
#     The system stores channels 1,2,3,6,7,8,10 but we know that we
#  have a shift of -1 in the system (ie an extra byte is present).
#  This implies that we have actually stored channels 16,1,2,5,6,7,9
#  but only bolometers 1,2,6,7 are from the required sub-instrument.
#  In this example we have to throw away data from channels 15,5 and 9.
#
#  Algorithm:
#    0. Make sure that extinction has not been run (otherwise we are 
#       in trouble since extinction selects the relevant bolometers)
#    1. Add on the shift to each channel (taking care of wrap-around).
#    2. BOL_TYPES will take care of everything else automatically when
#       extinction is run.


# NDF access
use NDF;

# Readline
use Term::ReadLine;

# Deal with the simple command line arguments:

($h) && do {
  print qq/
  Usage: scushift [-h] ndf card shift
  Arguments:
    -h  \t Help
    ndf \t The NDF to be modified
    card\t The letter identifying the A to D card (A..I)
    shift\t Size of shift

  A negative shift moves d2->d1 and a positive shift moves d16->d1.

/;
  exit;
};


# Read the command line.
# Arguments should be:    NDF  Card  Shift

($ndf, $card, $shift) = @ARGV;

# Setup a readline object thingy
$term = new Term::ReadLine 'scushift';


# Ask for missing parameters

# Input NDF. Dont do any special checking for the NDF to see if it
# is allowed. Will find that out soon enough
# Simply make sure that a file exists
until (-e "$ndf.sdf") {
  $prompt = "Input NDF (no .sdf): ";

  $ndf = $term->readline($prompt);

};

# Card - must be a single letter A to I
until ($card =~ /^[A-Ia-i]$/) {

   $prompt = "Which A to D card (a single letter): ";
   
   $card = $term->readline($prompt);
}



######## Now read in the NDF and find the SCUBA extension

# Constants

# Number of channels on an A-D
$numchan = 16;


# Set initial status
$status = &NDF::SAI__OK;
$good   = &NDF::SAI__OK;

err_begin($status);
ndf_begin();


# Open the NDF for write access
ndf_open(&NDF::DAT__ROOT, $ndf, 'UPDATE', 'OLD', $indf, $place, $status);

if ($status == $good) {
  print "Using the NDF $ndf...\n";
} else {
  err_flush($status);
  die "Error reading $ndf\n";
}

# Now read the HISTORY and make sure that EXTINCTION is not present
ndf_hnrec($indf,$nrec,$status);
 
# if there is history...
if ($status == &NDF::SAI__OK) {
  
  # Loop through the history components and find last "APPLICATION"
  for ($i=$nrec; $i > 0; $i--) {
    ndf_hinfo($indf, 'APPLICATION', $i, $value, $status);
    die "Sorry - scushift must be run before EXTINCTION\n" 
      if $value =~ /extinction/i;
  }
}



# Now find the SCUBA extension

$xloc = &NDF::DAT__NOLOC;
ndf_xloc($indf, 'SCUBA', 'UPDATE', $xloc, $status);


# We now have to read in the BOL_CHAN and BOL_ADC arrays.
# We shift BOL_CHAN at the location of the A to D card
# by adding the shift (taking care of 16 and negatives)

# Read in BOL_CHAN

cmp_getvi($xloc, 'BOL_CHAN', 150, @bolchan, $el, $status);

# Read in BOL_ADC
cmp_getvi($xloc, 'BOL_ADC', 150, @boladc, $el, $status);

# First find the position of the card in these arrays

# No point if status is bad

if ($status == $good) {

  $adc = &atoi($card);

  # Need to go through BOL_ADC until we find the area corresponding to this
  # card

  $startpos = -1;  # Protext against not finding card
  $endpos   = -1;      
  $notyet = 1;
  for ($count=0; $count <= $#boladc; $count++) {
    
    if ($notyet & $boladc[$count] == $adc) {
      $startpos = $count;
      $notyet = 0;
    } elsif ($boladc[$count+1] == $adc+1 | $count == $#boladc) {
      $endpos = $count;
      last;
    }
  }

  die "The $card card is not available\n" if ($startpos == -1 | $endpos == -1);
  
  print "Card $adc starts and ends at positions $startpos and $endpos\n";
  
  # It is only at this point that we know the maximum allowed shift
  # How big a shift is required != 0 and size < end - start
  
  $maxshift = $endpos - $startpos - 1;
  
  until (abs($shift) < $maxshift & $shift != 0) {
    
    $prompt = "Enter required shift (<$maxshift): ";
    
    $shift = $term->readline($prompt);
  }

  
  # Now we need to implement the fix
  # Do this by adding $shift to each channel on the given ADC card.  
 
  print "Before: @bolchan\n";
  
  # Simply have to add the shift to each bolometer between 
  # startpos and endpos making sure that they do not go negative 
  # or greater than 16
  
  @bolchan[$startpos..$endpos] = map {&roll($_,$shift)} 
                                      @bolchan[$startpos..$endpos];

  print "Bolchan: @bolchan\n";

}

# Now we have to write the data out again

cmp_putvi($xloc, 'BOL_CHAN', $#bolchan+1, @bolchan, $status);



# Annul everything
dat_annul($xloc, $status) if $xloc ne &NDF::DAT__NOLOC;
ndf_annul($indf, $status);

ndf_end($status);

err_flush($status) if $status != $good;
err_end($status);

exit;


# This routine converts the A-to-D number to a letter

sub atoi {
  my ($card, $adc);
  $card = shift;

  ($card =~ /^[aA]$/) && ($adc = 1);
  ($card =~ /^[bB]$/) && ($adc = 2);
  ($card =~ /^[cC]$/) && ($adc = 3);
  ($card =~ /^[dD]$/) && ($adc = 4);
  ($card =~ /^[eE]$/) && ($adc = 5);
  ($card =~ /^[fF]$/) && ($adc = 6);
  ($card =~ /^[gG]$/) && ($adc = 7);
  ($card =~ /^[hH]$/) && ($adc = 8);
  ($card =~ /^[iI]$/) && ($adc = 9);

  return $adc;
}

# This routine adds one to a number
# If result is greater than $numchan we return modulo chan
# If result is less than 0 we add $numchan

sub roll {
  my ($number, $shift) = @_;

  # Work out modulo numchan
  my $dummy = $number + $shift;
  my $mod   = $dummy - $numchan * int($dummy/$numchan);  

  # Check for special cases
  $mod += $numchan if $mod  < 0;
  $mod  = $numchan if $mod == 0;
  
  # Return the result
  return $mod;

}

# Put the Starlink documentation here
__END__

*+
*  Name:
*    SCUSHIFT
 
*  Purpose:
*    Correct for data shift error in demodulated data files
 
*  Type of module:
*    Perl 5

*  Description:
*    This script corrects for the ADC communications error and shifts
*    the data from ADC cards along by a specified amount.
*    Since all channels are read from a particular ADC card but only some
*    of them are actually stored in the demodulated data file, the shift
*    may result in fewer bolometers being stored for a given sub-instrument.

*  Usage:
*     scushift [-h] NDF card shift
 
*  ADAM Parameters:
*     -h
*        Help information
*     NDF (Given)
*        The input files to be modified.
*     card
*        The letter identifying the A-to-D card (allowed values are A to I)
*     shift
*        The number of bolometers to shift by. A negative shift moves
*        D1 to D16 (for example) and a positive shift D1 to D2. In most
*        cases a negative shift is required (usually -1).
*
*  Examples:
*     scushift test i -2
*       Move the I card data of test.sdf by minus 2 bolometers
*     scushift test2 h 1
*       Move the H-card data by plus 1 bolometer.
*
*  Algorithm:
*     - Make sure EXTINCTION has not been run on the data.
*     - Use the BOL_ADC array to determine which entries in the BOL_CHAN
*       array need to be modified.
*     - Add on the shift to each channel for the specified card
*       taking care of wrap-around and negatives.
*     - Write the new BOL_CHAN array back to the file.
*
*
*  Author:
*     Tim Jenness (JACH)
*
*  History:
*     $Log$
*     Revision 1.2  1997/08/25 20:23:09  timj
*     Fix to use the correct shift algorithm (so now works on Long wave array
*     and F card)
*
*
*  Notes:
*     - EXTINCTION must not have been run on the input NDF.
*     - Arguments are requested if they are missing from the command line
*     - If the system stores channels 1,2,3,6,7,8,10 but we know that we
*       have a shift of -1 in the system (ie an extra byte is present).
*       This implies that we have actually stored channels 16,1,2,5,6,7,9
*       but only bolometers 1,2,6,7 are from the required sub-instrument.
*       In this example we have to throw away data from channels 15,5 and 9.
