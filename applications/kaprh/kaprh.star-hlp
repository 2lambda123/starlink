0 Help
 Welcome to the KAPRH online help system.  Here you can display
 details about a specific KAPRH command. For more-general information,
 see the KAPRH and KAPPA documentation (SUN/239 and SUN/95).

1 CONTOVER
Contours a 2-d NDF overlaid on an image displayed previously.

Usage:

   contover ndf [comp] offset mode ncont [device]
      { firstcnt=? stepcnt=?
      { heights=?
      { percentiles=?
      mode

Description:

   This application draws a contour plot of a 2-dimensional NDF
   using an efficient algorithm.  The array may be part or whole of
   the data array, but also the variance or quality can be shown.

   The contour plot is drawn over an existing image that is
   displayed on the chosen graphics workstation or its overlay,
   provided the displayed image has been recorded in the graphics
   database.  (This will be the case for display routines in
   KAPPA.)  The contour plotting occurs within the current picture
   only if it is a DATA picture, otherwise contours are overlaid in
   the last DATA picture within the current picture.  This
   application assumes that the world co-ordinate systems of the data
   array and the displayed image are both in pixel units, but not to
   the same origins.  Pixel x-y offsets may be given to match the
   contour plot with the image, provided some contouring will be
   visible.  These displacements are in the sense image co-ordinate
   minus the data-array co-ordinate for an arbitrary fiducial point.

   The contouring algorithm has only pixel resolution, and
   so the contours are not smooth, but this makes the processing
   much faster.  There are seven methods for selecting contours.

   The best way to use this application is to first display an image
   on the base plane of an image display, make this the current
   picture, and then plot contours on the overlay plane, clearing
   the overlay picture each time. This enables more than one attempt
   at getting the correct contour heights.  The underlying image will
   not be erased. (Note that if you do not make the underlying image
   the current picture, the contour plot becomes the last DATA
   picture, and so any subsequent x-y offsets should be set to 0,0 to
   prevent successive contour plots being incorrectly located.)
2 Parameters
For information on individual parameters, select from the list below:
3 CLEAR
CLEAR = _LOGICAL (Read)
   True if the graphics device is to be cleared before display
   of the array.  It should only be true for an overlay device.
   [TRUE]
3 COMP
COMP = LITERAL (Read)
   The NDF component to be contoured.  It may be "Data",
   "Quality", "Variance", or "Error" (where "Error" is the
   alternative to "Variance" and causes the square root of the
   variance values to be taken before plotting contours).  If
   "Quality" is specified, then the quality values are treated as
   numerical values (in the range 0 to 255). ["Data"]
3 CONCOL
CONCOL = LITERAL (Read)
   The colour of the contour lines on devices that support colour.
   The options are described below.

     "MAX"          - The maximum colour index in the image
                      display colour lookup table.
     "MIN"          - The minimum (non-reserved) colour index in
                      the image-display colour lookup table.
     An integer     - The actual colour index.  It is constrained
                      between 0 and the maximum colour index
                      available on the device.
     A named colour - Uses the named colour from the palette, and
                      if it is not present, the nearest colour
                      from the palette is selected.

   If the colour is to remain unaltered as the lookup table is
   manipulated choose an integer between 0 and 15, or a named
   colour.  This parameter will be ignored if PENROT = TRUE.
   [The current value, but equals "1" (the foreground colour) if
   there is no current value.]
3 DASHED
DASHED = _REAL (Read)
   The height below which the contours will be drawn with dashed
   lines.  A null value (!) means all contours are drawn with
   solid lines.  This facility is only available when ANNOTA =
   FALSE. [!]
3 DEVICE
DEVICE = DEVICE (Read)
   The plotting device.  The device must be in one of the
   following GNS categories: IMAGE_DISPLAY, IMAGE_OVERLAY,
   WINDOW, WINDOW_OVERLAY, or MATRIX_PRINTER.
   [Current image-display-overlay device]
3 FIRSTCNT
FIRSTCNT = _REAL (Read)
   Height of the first contour (Linear and Magnitude modes).
3 HEIGHTS
HEIGHTS() = _REAL (Read)
   Contour levels (Free mode).  The suggested default is the
   current value.
3 MODE
MODE = LITERAL (Read)
     "Area"        - The contours enclose areas of the array for
                     which the equivalent radius increases by
                     equal increments.  You specify the number of
                     levels.
     "Automatic"   - The contour levels are equally spaced between
                     the maximum and minimum pixel values in the
                     array.  You supply the number of contour
                     levels.
     "Equalised"   - You define the number of equally spaced
                     percentiles.
     "Free"        - You specify a series of contour values
                     explicitly.
     "Linear"      - You define the number of contours, the start
                     contour level and linear step between
                     contours.
     "Magnitude"   - You define the number of contours, the start
                     contour level and step between contours.  The
                     step size is in magnitudes so the nth contour
                     is dex(-0.4*(n-1)*step) times the start
                     contour level.
     "Percentiles" - You specify a series of percentiles.

   The suggested default is the current value, which is initially
   "Free".
3 NCONT
NCONT = _INTEGER (Read)
   The number of contours required (all modes except Free and
   Percentiles).  It must be between 1 and 50.  If the number is
   large, the plot may be cluttered and take longer to produce.
   6, the initial suggested default, gives reasonable results.
   The current value becomes the suggested default.
3 NDF
NDF = NDF (Read)
   NDF structure containing the 2-dimensional image to be
   contoured.
3 OFFSET
OFFSET( 2 ) = _INTEGER (Read)
   X-y offsets of the input data-array with respect to the
   displayed image (i.e. x_data - x_image followed by
   y_data - y_image for any fiducial point).   These are
   constrained so that some part of the contour plot will be
   overlaid on the displayed image.  The suggested default is
   [0,0], i.e. no shift.
3 PENROT
PENROT = _LOGICAL (Read)
   If TRUE, the plotting pens are cycled through the contours to
   aid identification of the contour heights.  It is ignored
   when annotation is selected. [FALSE]
3 PERCENTILES
PERCENTILES() = _REAL (Read)
   Contour levels given as percentiles.  The values must lie
   between 0.0 and 100.0. (Percentiles mode).  The suggested
   default is the current value.
3 STEPCNT
STEPCNT = _REAL (Read)
   Separation between contour levels, linear for Linear mode
   and in magnitudes for Magnitude mode.
3 THICK
THICK = _REAL (Read)
   The thickness of the contours in the plot, where 1.0 is the
   normal thickness.  Currently, this is only available on a few
   devices.  It must take a value in the range 0.5--10.0.  [1.0]
2 Examples
contover myfile d [-20,7] \
   Contours the data array in the NDF called myfile on the current
   image-display overlay device; the overlay is displaced such
   that pixel (i,j) in myfile corresponds to pixel (i-20,j+7) in
   the displayed image.  All other settings are defaulted, so for
   example the current method for determining heights is used,
   and as much of myfile will be contoured that fits into the
   current picture.

contover ndf=ngc6872 mode=au ncont=5 offset=[0,0]
   Contours the data array in the NDF called ngc6872 on the
   current image-display overlay device.  Five equally spaced
   contours between the maximum and minimum data values are
   drawn.  There is no offset between the contour plot and the
   displayed image; this can be useful for comparing an NDF
   before and after some processing, e.g. smoothing.

contover iras60(200:300,100:350) comp=d offset=[3,5] \
   Contours the portion of the data array in the NDF called iras60
   on the current image-display overlay using the current method
   for height selection.  The maximum portion of the data array
   that can be contoured goes from pixel (200,100) to (300,350).
   The overlay is displaced such that pixel (i,j) in the data
   array corresponds to pixel (i+3,j+5) in the displayed image.

contover comp=v mode=fr heights=[10,20,40,80] device=xov \
   Contours the variance array in the current NDF on the xov
   device.  Contours at 10, 20, 40 and 80 are drawn.  There is no
   displacement between the variance contour plot and the
   displayed image.

contover mode=eq ncont=5 dashed=15 pencol=blue ndf=skyflux
   Contours the data array in the NDF called skyflux on the
   current image-overlay device.  Contours at heights
   corresponding to the 10, 30, 50, 70 and 90 percentiles are
   drawn in blue (if available).  Those contours whose values
   less than 15 will appear as dashed lines.  There is no
   displacement between the contour plot and the displayed image.

contover xx1 mode=pe percentiles=[90,95,98,99] pencol=white

noclear device=epsf_l
   Contours the data array in the NDF called xx1 on the epsf_l
   device.  White contours at heights corresponding to the 90, 95,
   98, and 99 percentiles are drawn.  The display is not cleared.
   There is no displacement.  The output file could be combined
   with a DISPLAY plot (using PSMERGE) to make a hardcopy of a
   contour plot on a dark image.
2 Notes
-  The application records the contour plot as a DATA picture
with world co-ordinates in units of data pixels in the graphics
database.  The DATA picture may also may have double-precision
data co-ordinates derived from the NDF axis components provided
these are linear and different from pixel co-ordinates; the data
co-ordinates are stored via a linear transformation.  The NDF
associated with the plot is stored by reference with the DATA
picture.  On exit the current database picture for the chosen
device reverts to the input picture.

-  There are some options for setting the characteristics of the
contour lines.  By default, solid lines are drawn with the same
colour as the axes and key, namely the foreground colour.  The
colour will depend on the graphics device chosen, but it is often
black for printers or white for terminals.  The alternatives to
override this default behaviour are listed below.

   1. Set a colour for all contours using parameter CONCOL.
      The choices may be quite restrictive on certain devices,
      for example a window overlay only has one colour.  Use
      the PALENTRY command to change this colour.
   2. Request dashed contours below some threshold given by
      parameter DASHED and solid lines for other heights.  All
      contours have either the foreground colour or that
      prescribed by parameter CONCOL.
   3. Cycle the pens modulo 3 for each contour height actually
      plotted by setting PENROT = TRUE.  The characteristics of
      the second and third line styles will depend on the chosen
      graphics device.  An image display or pen plotter will draw
      coloured lines using palette entries 1 to 3; whereas a
      window overlay, monochrome laser printer or terminal will
      draw a variety of dashed or thicker lines.
   4. Combine options 2 and 3.  However, palette colours 1 to 3
      will always be used and CONCOL ignored.  The contours below
      the threshold continue the cycle through the three colours.
      There may be some confusion on devices that already use
      dashed lines, so this is only suitable for devices
      supporting at least three colours simultaneously.

Pen rotation takes precedence over colour control through CONCOL.
2 Related_Applications
   KAPPA: CONTOUR; Figaro: ICONT, SPECCONT.
2 Authors
MJC: Malcolm J. Currie  (STARLINK)
2 History
 1989 Jun 21 (MJC):
    Original version.

 1989 Aug  8 (MJC):
    Passed array dimensions as separate variables
    to CNTDRW and CNTSEL.

 1989 Sep  1 (MJC):
    Converted to use turbo-contouring.

 1989 Dec 21 (MJC):
    Workspace managed by AIF_TEMP.

 1990 Jan 9 (MJC):
    Corrected SGS status.

 1990 Mar 30:
    Reports the chosen contour heights to the user.

 1991 April 13 (MJC):
    First NDF version supporting variance and quality.  Added data
    co-ordinate transformation, NDF reference into the database,
    and AGI context control.  Re-organised world co-ordinates so
    that CNTTUR no longer handles the full array, merely the
    section.

 1991 May 1 (MJC):
    Renamed IN parameter to NDF for consistency.

 1991 July 31 (MJC):
    No longer redefines colours of SGS pens to predefined state if
    workstation has dynamic colour representation, now there is
    palette control.

 1991 October 17 (MJC):
    Fixed typo' in calculation of allowed shifts.

 1992 March 3 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 April 4 (MJC):
    Made to handle significant dimensions for user-defined
    sections.  Bounds parameters removed.

 1992 June 16 (MJC):
    Made to work with WINDOW_OVERLAY class.  The restriction on the
    number of colour indices has therefore been been relaxed.

 1992 November 30 (MJC):
    Does not use non-monotonic axis centres.

 1995 October 19 (MJC):
    Supports Error component.

 1997 May 21 (MJC):
    Added percentiles and equalised options for the MODE.  New
    parameter PERCENTILES.  Increased tessellation cell to 512
    pixels square.  Added CONCOL, DASHED, and THICK parameters,
    and further examples.  Improved efficiency by using PSX to
    obtain workspace.  Rewrote the Notes on contour colour and line
    style.
2 Implementation_Status
   -  Only real data can be processed directly.  Other data types
   will undergo a type conversion before the contour plot is drawn.

   -  Processing of bad pixels and automatic quality masking are
   supported.

1 CRELUT
Creates or manipulates an image-display lookup table using a
palette.

Usage:

   crelut inlut outlut ndf [comp] low high [inpal] [outpal] [device]

Description:

   This application allows a lookup table to be created or modified
   interactively on a chosen image display from a palette of
   colours.  All plotting is performed within the current
   graphics-database picture for that device.  The phases in the
   creation or manipulation of the lookup table are enumerated below.
   1. The initial colour table is read from an NDF lookup-table file
      or a greyscale used if there is no input lookup table.
   2. The name of an NDF containing a 2-dimensional array is obtained
      and the array is scaled and displayed in the top half of the
      picture at the largest magnification without distortion.  Below
      this an histogram of the values between the scaling limits is
      drawn with the colour index of each bin corresponding to the
      bin's scaled value.  Thus colours in the image and the
      histogram match.   Axes of number versus data value are plotted
      about the histogram.  If a null character, !, is given then no NDF
      array is read and a ramp is produced instead of the histogram.
      An axis of pen numbers in the lookup table is drawn around the
      ramp.
   3. A numbered palette is drawn below the histogram.  A palette
      created in an earlier run of CRELUT may be restored from an
      NDF.  Otherwise the palette comprises eight coloured blocks
      (black, white, red, green, blue, yellow, magenta and cyan)
      with palette numbers 0--7, an eight-level greyscale (8--15)
      and a sixteen-level greyscale (16--31).  Palette numbers
      16--31 may be replaced randomly by colours you define.  The
      colours are specified by either the giving the red, green, blue
      intensities; or by name.  The loop is terminated by a null.
   4. Inside a loop you select the palette colour(s) to be assigned
      to the first and last pen numbers of a band within the lookup
      table.  For convenience, where there is an image and histogram
      the equivalent data values are entered rather than pen numbers
      directly, though they are converted to the nearest pens in the
      lookup table.  Linear interpolation between the two palette
      colours yields the lookup-table colours inside the band.
      Should only one colour be given then all the pens in the
      requested range are set to that colour.  Pen numbers may be
      re-used indefinitely and assigned new colours if the desired
      effect is not obtained.  (The histogram of the array is
      produced to assist in a sensible choice).  The loop is
      terminated by a null in response to either of the prompts.
   5. The lookup table may be saved in an NDF.  A null response, !,
      to the request for the name of the file in which the table is
      to be stored will result in the table not being saved.
      Likewise the palette may be saved in an NDF.
2 Parameters
For information on individual parameters, select from the list below:
3 COLOUR
COLOUR() = LITERAL (Read)
   A colour to be added to the palette at the entry given by
   parameter PALNUM.  It is specified in one of two ways.

     o  A named colour from the standard colour set, which may
     be abbreviated.  If the abbreviated name is ambiguous the
     first match is selected.  The case of the name is ignored.
     Some examples are "Seagreen", "Violet", and "Orchid".

     o  Normalised red, green, and blue intensities separated by
     commas or spaces.  Each value must lie in the range 0.0--1.0.
     For example, "1.0,1.0,0.5" would give a pale yellow.

   To exit the loop that obtains new palette colours enter a null
   character (!) in response to the prompt.
3 COLRANGE
COLRANGE() = _INTEGER (Read)
   The numbers of the palette colours to be allocated to a range
   of pens within the lookup table.  One or two palette colours
   may be entered.  If only one is given all the range of pens
   are assigned that colour.  If two palette colours are given
   the colour of a pen is obtained by linear interpolation
   between the two colours at the fractional position of the pen
   in the range of colour indices.  Allowed values are 0--31.
3 COMP
COMP = LITERAL (Read)
   The NDF component to be displayed.  It may be "Data",
   "Quality", "Variance", or "Error" (where "Error" is the
   alternative to "Variance" and causes the square root of the
   variance values to be displayed).  If "Quality" is specified,
   then the quality values are treated as numerical values (in
   the range 0 to 255). ["Data"]
3 DEVICE
DEVICE = DEVICE (Read)
   Name of the image display to be used.  The device must be in
   one of the following GNS categories: IMAGE_DISPLAY,
   IMAGE_OVERLAY, or WINDOW, and have at least 48 colour indices.
   At least 120 colour indices is recommended.  The device must
   also not reset when the device is opened (since the new colour
   table would be lost).  [Current image-display device]
3 HIGH
HIGH = _DOUBLE (Read)
   This is the highest value in the 2-dimensional data array used
   for scaling and computing the histogram.  All larger array
   values are set to the highest colour index when HIGH is
   greater than LOW, otherwise all array values greater than HIGH
   are set to the lowest colour index.  The dynamic default is
   the maximum data value.
3 INLUT
INLUT = NDF (Read)
   Name of the NDF containing the initial lookup table as its data
   array.  The LUT must be 2-dimensional, the first dimension
   being 3, and the second being arbitrary.  The method used to
   compress or expand the colour table if the second dimension is
   different from the number of unreserved colour indices is
   controlled by parameter NN.  Also the LUT's values must lie in
   the range 0.0--1.0.  If INLUT is null (!) a greyscale is used.
3 INPAL
INPAL = NDF (Read)
   Name of the NDF containing the initial palette as its data
   array.  The palette must be 2-dimensional, the first dimension
   being 3, and the second 32.  If the second dimension is
   greater than 32 only the first 32 colours are used; if it has
   less than 32 just fill as much of the palette as is possible
   starting from the first colour.  The palette's values must lie
   in the range 0.0--1.0.  If INPAL is null (!) the default
   palette is loaded.
3 LOW
LOW = _DOUBLE (Read)
   The array value that scales to the lowest pen in the colour
   table, and the minimum value to be included in the histogram.
   All smaller array values are set to the lowest colour
   index when LOW is less than HIGH, otherwise all array values
   smaller than LOW are set to the highest colour index.   The
   dynamic default is the minimum data value.
3 NDF
NDF = NDF (Read)
   Input NDF data structure containing the image to be displayed
   to show the effect of the created colour table.
3 NN
NN = _LOGICAL (Read)
   If TRUE, the input lookup table is mapped to the colour table by
   using the nearest-neighbour method.  This preserves sharp
   edges and is better for lookup tables with blocks of colour.
   If NN is FALSE, linear interpolation is used, and this is
   suitable for smoothly varying colour tables. [FALSE]
3 OK
OK = _LOGICAL (Read)
   TRUE when the palette colour just produced is acceptable.
3 OUTLUT
OUTLUT = NDF (Write)
   The output lookup table.
3 OUTPAL
OUTPAL = NDF (Write)
   The palette used to create the lookup table.
3 PALNUM
PALNUM = _INTEGER (Read)
   The number of the palette entry whose colour is to be
   modified.  (The numbers are plotted on the palette.) It is
   used within a loop to modify up to sixteen entries in the
   palette.  Entering a null, !, will end that loop.  The
   suggested default is the next palette number.  PALNUM must lie
   in the range 16--31.
3 PENRANGE
PENRANGE() = _INTEGER (Read)
   The range of pen numbers in the lookup table which is about to
   be allocated a set of colours from the palette.  PENRANGE is
   only used when there is no image and histogram plotted.  The
   pen number can be read from the axis below the ramp.  If one
   pen number is given, only this pen is altered, and it is given
   the first palette colour of COLRANGE.  If two are supplied,
   the first pen number entered will take the first palette
   colour entered, and the second pen is assigned the second
   palette colour.  The pens must lie in the range zero to the
   maximum number of available pens.
3 PTITLE
PTITLE = LITERAL (Read)
   Title for the output palette NDF. ["KAPRH - Crelut"]
3 TITLE
TITLE = LITERAL (Read)
   Title for the output lookup table NDF. ["KAPRH - Crelut"]
3 VALRANGE
VALRANGE() = _DOUBLE (Read)
   The range of data values in the histogram/image which is to
   be allocated a set of colours from the palette, and hence be
   assigned to a part of the lookup table.  VALRANGE is only used
   when there is an image and histogram plotted.  The data value
   may be read from the axis below the histogram.  If one data
   value is given, only the single pen in the lookup table
   corresponding to the value is altered, and it is given the
   first palette colour of COLRANGE.  If two values are supplied,
   the first data value entered will take the first palette
   colour entered, and the second data value is assigned the
   second palette colour.  The data values must lie in the range
   PVLO--PVHI.
2 Examples
Note:
   Since the application is highly interactive and contains loops
   it is not possible to give one-line commands to perform a
   complete operation.  Therefore the examples show how to
   control the input and output data and not the interactive
   manipulation of the colour table.

crelut heat bizarre hh12 \
   Reads a lookup table in an NDF called heat.  If resampling of
   the lookup table is required it achieved via linear
   interpolation. The lookup table after the manipulation is
   stored in NDF bizarre.  The data array in NDF hh12 is scaled
   between its minimum and maximum values and displayed in the
   top half of the current picture on the current image-display
   device.  Also drawn is an histogram of the intensities.

crelut heat bizarre hh12 inpal=mypal \
   As above except a palette created previously via the OUTPAL
   parameter.  This palette is in an NDF called mypal.

crelut inlut=! deluxe hh12 v low=100 high=400 \
   A greyscale lookup table is manipulated and the result
   is stored in NDF deluxe.  The variance array in NDF hh12 is
   scaled between 100 and 400, and displayed in the top half of
   the current picture on the current image-display device.  Also
   drawn is an histogram of the intensities between those limits.

crelut heat bizarre ndf=! device=xwindows \
   Reads a lookup table in an NDF called heat.  If resampling of
   the lookup table is required it achieved via the
   nearest-neighbour method.  The lookup table after the
   manipulation is stored in NDF bizarre.  A linear ramp is
   displayed in the lower half of the current picture on the
   xwindows device.
2 Notes
-  The application stores, in the order given, the following
pictures in the graphics database: a frame comprising the data
picture, the histogram or ramp and the palette; the data-array
picture with world co-ordinates in units of data pixels; the
histogram/ramp frame picture including the histogram/ramp plus
the annotated axes; and the histogram with world co-ordinates in
units of data values and number, or the ramp with units of pen
numbers and normalised frequency.   The NDF associated with the
image/histogram plots is stored by reference with the DATA
picture.  On exit the current database picture for the chosen
device reverts to the input picture.

-  Bad pixels will appear with the lowest colour index in the
plot.
2 Related_Applications
   KAPPA: LUTABLE, LUTFLIP, LUTREAD, LUTROT, LUTSAVE, LUTTWEAK,
   LUTVIEW, PALREAD, PALSAVE; Figaro: COLOUR.
2 Authors
MJC: Malcolm J. Currie  (STARLINK)
2 History
 1991 May 10 (MJC):
    Original NDF version based on the pre-0.8 version.

 1991 June 27 (MJC):
    Improved the clarity of the documentation and instructions,
    especially concerning the meaning of "pen".  Improved the user
    interface by permitting nominated palette entries to be
    revised, and showing the value of the existing entry.  Added
    facilities to save and restore the palette.  Used full axes
    including a correctly scaled ordinate, and data values on the
    abscissa of the histogram.  LUT pens can be specified via data
    values.  Stored data co-ordinates with the DATA picture
    associated with the image.

 1991 July 22 (MJC):
    Replaced the RGB parameter by the more-powerful COLOUR.

 1992 March 3 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 April 23 (MJC):
    Made to handle significant dimensions for user-defined
    sections of the image.

 1992 November 30 (MJC):
    Does not use non-monotonic axis centres.

 1995 October 19 (MJC):
    Supports Error component.
2 Implementation_Status
   -  The magic-value method is used for processing bad data.

   -  This application will handle data in all numeric types, though
   type conversion to integer will occur for unsigned byte and word
   images.

1 GREYPLOT
Produces a greyscale plot of a 1-d or 2-d NDF.

Usage:

   greyplot in [comp] key [device] mode [pxsize] [pysize] [out]
      { white=? black=?
      { percentiles=?
      { sigmas=?
      mode

Description:

   This application produce a greyscale plot of a 1- or
   2-dimensional NDF, especially for a hardcopy device.  The image
   is usually the data array, but may also be the variance or
   quality.  The plot appears in the current graphics-database
   picture.

   The greyscale plot resides within optional, annotated and
   enumerated axes. An optional key may be drawn to the right of the
   greyscale plot comprising a title and grey blocks annotated with
   the corresponding array value.  There are a number of scaling
   methods to map array values to grey levels in the plot.

   The time to output to hardcopy devices can be quite lengthy
   and generally depends on the size of the greyscale plot.
   Therefore, there are parameters for controlling the size of
   the plot.
2 Parameters
For information on individual parameters, select from the list below:
3 ABSLAB
ABSLAB  =  LITERAL (Read)
   Label for the plot abscissa, in which NCAR fancy founts
   may be embedded when FONT = "NCAR".  This parameter is only
   used when the axes option is selected.  If axis information is
   present the suggested default is the NDF's axis label followed
   by the units, in parentheses.  If an error occurs obtaining
   the label the suggested default is "X". []
3 AXES
AXES = _LOGICAL (Read)
   TRUE if annotated axes are to be drawn around the displayed
   image.  The annotations are either the data co-ordinates from
   the NDF axis components, provided these are present and linear
   and COSYS = "Data"; otherwise pixel co-ordinates are used.
   [FALSE]
3 BADCOL
BADCOL = LITERAL (Read)
   The grey level to give a bad pixel in the display.  There are
   a number of options described below.

     "MAX"       - Black
     "MIN"       - White
     An integer  - The actual 'colour' index.  It is constrained
                   to be between 0 and the maximum colour index
                   available on the device, and so gives a shade
                   of grey.  0 gives the background colour.
     A named     - Uses the named `colour' from the palette, and
     `colour'      if it is not present, the nearest colour from
                   the palette is selected.  The palette contains
                   grey levels at percentages from black to white,
                   e.g. GREY50 is midway between black and white.

   If this application is run on a device that supports colour
   it is possible to mark the bad pixels in colour on the
   greyscale provided BADCOL is an integer between 0 and 15, or
   a named colour.  The bad pixels will remain unaltered if the
   lookup table is manipulated.  The suggested default is the
   current value. [The current value, but equals "MIN" if there
   is no current value.]
3 BLACK
BLACK = _DOUBLE (Read)
   The array value that scales to the black in the greyscale
   colour table.  All smaller array values appear black when
   BLACK is less than WHITE, otherwise all array values
   smaller than BLACK appear white.  The dynamic default is the
   minimum data value.   There is an efficiency gain when both
   BLACK and WHITE are given on the command line, because the
   extreme values need not be computed.  (Scale mode)
3 COMP
COMP = LITERAL (Read)
   The NDF component to be displayed.  It may be "Data",
   "Quality", "Variance", or "Error" (where "Error" is the
   alternative to "Variance" and causes the square root of the
   variance values to be displayed).  If "Quality" is specified,
   then the quality values are treated as numerical values (in
   the range 0 to 255). ["Data"]
3 COSYS
COSYS = LITERAL (Read)
   The co-ordinate system to be used.  This can be either "World"
   or "Data".  "World" makes pixel co-ordinates to appear on axes.
   If COSYS = "Data" the NDF's axis information is used to
   annotate axes.  [Current co-ordinate system]
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the graphics device used to display the image.
   The device must be in one of the following GNS categories:
   IMAGE_DISPLAY, IMAGE_OVERLAY, MATRIX_PRINTER, or WINDOW, and
   have at least 24 greyscale intensities.
   [Current image-display device]
3 FILL
FILL = _LOGICAL (Read)
   The greyscale plot normally has square pixels, in other words
   a length along each axis corresponds to the same number of
   pixels.  However, for images with markedly different
   dimensions, such as two-dimensional spectra, this default
   behaviour may not be suitable or give the clearest plot.  When
   FILL is TRUE, the square-pixel constraint is relaxed and the
   greyscale plot is the largest possible within the current
   picture.  When FILL is FALSE, the pixels are square.  The
   suggested default is the current value.  [FALSE]
3 FONT
FONT = LITERAL (Read)
   The fount to be used for the line graphics.  It can be either
   "NCAR" for the NCAR fancy characters and "GKS" for the standard
   GKS san-serif fount.   The former is intended for hardcopy
   publication-quality plots, since it is relatively slow; the
   latter is intended for normal interactive graphics requiring
   rapid plotting, and it is clearer on small plots. The
   suggested default is the current value. ["GKS"]
3 FULL
FULL = _LOGICAL (Read)
   If TRUE, the whole greyscale lookup table for the device is
   used including the normally reserved pens.  Thus all but two
   of the available intensities participate in the greyscale,
   which improves the photographic quality of the image.  The
   remaining pens are for the background, and for the key and
   axes.  This option is only available for devices that reset
   their `colour' tables when the device is opened, such as
   Laserprinters. (This restriction prevents problems on devices
   that retain their "colour tables", where using the normally
   reserved pens would mean that either part of the greyscale
   would be emphemeral---departing when the application
   completes if the reserved pens are stored and reinstated on
   completion, or earlier plots drawn by other applications would
   be altered.)

   If FULL = FALSE, only non-reserved intensities will form the
   greyscale.  The default is TRUE when the non-reserved pens
   is less than 32, and FALSE otherwise.  (This figure was chosen
   because it is roughly the number of grey levels at which the
   eye will clearly detect the quantisation in a complex scene.)
   []
3 IN
IN = NDF (Read)
   Input NDF data structure containing the image to be displayed.
3 KEY
KEY = _LOGICAL (Read)
   A key of the greyscale versus pixel value and title is to be
   produced when this is TRUE. [TRUE]
3 MAJTIC
MAJTIC( 2 ) = _REAL (Read)
   The parameter controlling the numbers of major tick marks
   for the x and y axes.  (Number used is between MAJTIC+2 and
   5*MAJTIC/2+4.)   A negative value for an axis makes the
   graphics package decide an appropriate value.  This parameter
   is only used when the axes option is selected. [3.,3.]
3 MINTIC
MINTIC( 2 ) = _REAL (Read)
   The number of minor tick marks between each major tick mark
   for the x and y axes.  A negative value forces the graphics
   package to compute appropriate values.   This parameter is
   only used when the axes option is selected. [-1.,-1.]
3 MODE
MODE = LITERAL (Read)
   The type of scaling to be applied to the array.  There are a
   number of options described below.
     "Faint"       - The image is scaled from the mean minus one
                     standard deviation to the mean plus seven
                     standard deviations.  The scaling values are
                     reported so that the faster Scale mode may be
                     utilised later.
     "Flash"       - The image is flashed onto the screen without
                     any scaling at all.  This is the fastest
                     option.  Since there is no longer a
                     one-to-one mapping between data values and
                     grey levels this scaling mode is not
                     available with a key.
     "Percentiles" - The image is scaled between the values
                     corresponding to two percentiles.  The
                     scaling values are reported so that the
                     faster Scale mode may be utilised later.
     "Range"       - The image is scaled between the minimum and
                     maximum data values.
     "Scale"       - You define the upper and lower limits
                     between which the image is to be scaled.  The
                     application reports the maximum and the
                     minimum values for reference and makes these
                     defaults respectively.
     "Sigmas"      - The image is scaled between two standard-
                     deviation limits.  The scaling values used
                     are reported so that the faster Scale mode
                     may be utilised later.
3 NUMBIN
NUMBIN  =  _INTEGER (Read)
   The number of histogram bins used to compute percentiles for
   scaling. (Percentiles mode) [2048]
3 ORDLAB
ORDLAB  =  LITERAL (Read)
   Label for the plot ordinate, in which NCAR fancy founts
   may be embedded when FONT = "NCAR".   This parameter is only
   used when the axes option is selected.  If axis information is
   present the suggested default is the NDF's axis label followed
   by the units, in parentheses.  If an error occurs obtaining
   the label the suggested default is "Y". []
3 OUT
OUT = NDF (Write)
   The scaled NDF that is displayed; it also does not have
   values that equal the reserved portion of the colour table.
   The output NDF is intended to be used as the input data in
   conjunction with SCALE=FALSE.  It will be vertically
   inverted with respect to the input array because of GKS
   convention.  If it has a null value (!) no output NDF will be
   created.  This parameter is ignored when SCALE=FALSE. [!]
3 OUTTIC
OUTTIC = _LOGICAL (Read)
   True if the axis tick marks are to appear on the outside of
   the axes instead of inside.   This parameter is only used
   when the axes option is selected. [TRUE]
3 PERCENTILES
PERCENTILES( 2 ) = _REAL (Read)
   The percentiles that define the scaling limits. For example,
   [75,25] would scale between the quartile values. (Percentile
   mode)
3 PLTITL
PLTITL = LITERAL (Read)
   The title of the plot.  Up to about 25 characters can be
   accommodated when there are no axes, and about 40 otherwise.
   NCAR fancy founts may be embedded (cf. SUN/90) when FONT =
   "NCAR".  This parameter is only used when either the axes or
   key option is selected. [The NDF title]
3 PXSIZE
PXSIZE = _REAL (Read)
   The length (x axis) of the plot in metres.  [Maximum that can
   fit in the current picture whilst preserving square pixels.]
3 PYSIZE
PYSIZE = _REAL (Read)
   The length (y axis) of the plot in metres.  [Maximum that can
   fit in the current picture whilst preserving square pixels.]
3 REDUCT
REDUCT = _REAL (Read)
   The reduction factor of the array, and must be in the range
   1/MAX(NX,NY)--1.0, where NX and NY are the number of pixels
   in the image along the x and y directions.  Since the output
   to the hardcopy device may be long, the size of the image
   with respect to the key can be reduced by lowering REDUCT.
   The spooling time goes approximately proportional to the
   square of REDUCT.  1.0 means the array fills the plotting zone.
   [1.0]
3 SCAHIGH
SCAHIGH = _DOUBLE (Write)
   The array value scaled to white in the greyscale display.
   In Flash mode or when there is no scaling the colour index of
   white is used.  The current display linear-scaling maximum is
   set to this value.
3 SCALE
SCALE = _LOGICAL (Read)
   If TRUE the input array is scaled according to the value of
   parameter MODE.  If it is FALSE, MODE is ignored, and the input
   array is displayed as is.  There is no scaling, inversion
   or avoidance of annotation pens.  SCALE=FALSE is intended to
   be used with arrays previously scaled by this or similar
   applications which have already performed the scaling,
   inversion and exclusion.  It provides the quickest method of
   image display within this application. [TRUE]
3 SCALOW
SCALOW = _DOUBLE (Write)
   The array value scaled to black in the greyscale display.
   In Flash mode or when there is no scaling the colour index of
   black is used.  The current display linear-scaling minimum is
   set to this value.
3 SIGMAS
SIGMAS( 2 ) = _REAL (Read)
   The standard-deviation bounds that define the scaling limits.
   To obtain values either side of the mean both a negative and
   a positive value are required.  Thus [-2,3] would scale
   between the mean minus two and the mean plus three standard
   deviations.  [3,-2] would give the negative of that. (Sigmas
   mode).
3 THICK
THICK = _REAL (Read)
   The thickness of the axes and annotations in the plot, where
   1.0 is the normal thickness.  It should be between 0.5 and 5.
   This feature is only available on some devices.   This
   parameter is only used when the axes option is selected. [1.0]
3 WHITE
WHITE = _DOUBLE (Read)
   The array value that scales to white in the greyscale
   colour table.  All larger array values appear white when
   WHITE is greater than BLACK, otherwise all array values
   larger than WHITE appear black.  The dynamic default is the
   maximum data value.   There is an efficiency gain when both
   BLACK and WHITE are given on the command line, because the
   extreme values need not be computed.  (Scale mode)
2 Examples
greyplot sdor key mode=sc black=1 white=5.2
   Makes a greyscale display of the data component of the NDF
   called sdor on the current image-display device, scaling
   between 1 and 5.2.  Values up to 1.0 in the data array will
   appear black in the plot, and values larger than 5.2 will be
   white.  Intermediate values will a grey level determined by
   linear interpolation.  A key is drawn to the right of the
   greyscale.

greyplot in=sdor nokey mode=p percentiles=[10,90] badcol="Black"
   This makes a greyscale plot of the NDF called sdor on the
   current image-display device. The scaling is between the 10 and
   90 per cent percentiles of the image.  No key is drawn.  Bad
   data appear black in the plot.

greyplot mode=fa axes out=video cosys=d \
   Displays a greyscale of the current NDF data component with
   annotated axes on the current image-display device.  The axes
   take the axis labels and title from the NDF, and are annotated
   in data co-ordinates.  The scaling is between the -1 and +7
   standard deviations of the image around its mean.  A key is
   drawn.  The scaled data are stored in an NDF called video.

greyplot video noscale \
   Displays the data component of the NDF called video (created
   in the previous example) without scaling within the current
   picture on the current image-display device.

greyplot cgs4k v key mode=ra device=canon_l
   Makes a greyscale display of the variance component of NDF
   cgs4k on the Canon_l device, scaling between the minimum and
   maximum variance values.
2 Notes
-  The application stores a number of pictures in the graphics
database in the following order: a FRAME of the specified size
containing the title, annotated axes, and the image area
(provided AXES is TRUE), whose world co-ordinates are in pixels;
a DATA picture with world co-ordinates in units of data pixels;
and a KEY.  The DATA picture also may have double-precision data
co-ordinates derived from the NDF axis component provided these
are linear and different from pixel co-ordinates; the data
co-ordinates are stored via a linear transformation.  The NDF
associated with the plot is stored by reference with the DATA
picture.  On exit the current database picture for the chosen
device reverts to the input picture.

-  When axes are requested the axis annotations are defined by
their lower and upper bounds, i.e. a regular array is assumed.
The bounds are in pixel or data co-ordinates.

-  The data type of the output NDF depends on the number of colour
indices: _UBYTE for no more than 256, _UWORD for 257 to 65535,
and _INTEGER otherwise.   The output NDF will not contain any
extensions, UNITS, QUALITY, and VARIANCE; but LABEL, TITLE, and
AXIS information are propagated from the input NDF.  The output
NDF does not become the new current data array.  It is a Simple
NDF (because the bad-pixel flag is set to false in order to
access the maximum grey level), therefore only NDF-compliant
applications can process it.
2 Related_Applications
   KAPPA: DISPLAY; Figaro: IGREY, IMAGE, MOVIE.
2 Authors
MJC: Malcolm J. Currie (STARLINK)

DSB: David S. Berry (STARLINK)
2 History
 1991 February 7 (MJC):
    NDF version based on the pre-0.8 version.

 1991 March 19 (MJC):
    Added output parameters for the scaling limits.

 1991 April 5 (MJC):
    Added data co-ordinate transformation and optional axes.

 1991 May 7 (MJC):
    Added the input and output of NDFs containing scaled data.

 1991 May 14 (MJC):
    Added direct processing of _BYTE and _WORD data.

 1991 July 22 (MJC):
    Added user-controlled appearance of bad pixels.

 1991 August 20 (MJC):
    Added FONT parameter.

 1992 January 29 (MJC):
    Removed line that resets the background to black.

 1992 March 3 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 March 30 (MJC):
    Revised defaulting behaviour of BADCOL and corrected the notes.
    Included BADCOL in one of the examples.

 1992 April 13 (MJC):
    Made to handle significant dimensions for user-defined
    sections.

 1992 November 28 (MJC):
    Does not use non-monotonic axis centres.

 1992 December 17 (MJC):
    Added the FILL option.

 1995 October 19 (MJC):
    Supports Error component.

 1997 May 28 (MJC):
    QUALITY and HISTORY no longer propagated to the OUT NDF.

 5-JUN-1998 (DSB):
    Added propagation of the WCS component.
2 Implementation_Status
   -  This routine correctly processes the AXIS, DATA, QUALITY,
   VARIANCE, LABEL, TITLE, WCS and UNITS components of the input NDF.

   -  Processing of bad pixels and automatic quality masking are
   supported.

   -  This application will handle data in all numeric types, though
   type conversion to integer will occur for unsigned byte and word
   images.  However, when there is no scaling only integer data will
   not be type converted, but this is not expensive for the expected
   byte-type data.

1 IDINVISIBLE
Makes memory planes of an image-display device invisible.

Usage:

   idinvisible [planes] [device]

Description:

   This routine makes invisible nominated planes of an IDI-supported
   image display, such as X-windows.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the image-display device whose memory plane is to
   be made invisible.  The name of the base plane should be given
   even if an overlay plane is to be made invisible.
   [Current image display]
3 PLANES
PLANES() = _INTEGER (Read)
   The numbers of the memory planes to be made invisible.  All
   unspecified planes become visible.  If it is null the base
   (image) memory is made invisible.  The base memory is 0 and
   overlays are numbered consecutively from 1.  For an Ikon the
   only overlay plane is 1.
   [0]
2 Examples
idinvisible [0,1]
   Makes only planes 0 and 1 invisible on the current image
   display device.

idinvisible device=xwindows
   Makes the base plane invisible on the xwindows device.

idinvisible 1 ikon
   Makes the first overlay plane invisible on the Ikon device.
2 Notes
-  On some devices making a memory invisible may have the effect
of making other memories visible.

-  On the Ikon the visibilities are set to visible on start up,
so that any set up change introduced by an application calling
GKS are not lost, therefore all planes to be made invisible must
be given in one invocation.
2 Related_Applications
   KAPPA: IDCLEAR, IDSTATE.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1990 July 23 (MJC):
    Original version.

 1992 February 21 (MJC):
    Made all the memories visible first to cope with the changed
    behaviour of the IDI implementation.

 1992 March 26 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.
1 IDCLEAR
Clears an image display and purges its database entries.

Usage:

   idclear [device] [current]

Description:

   This application software resets an image-display device. In effect
   the device is cleared.  It purges the graphics-database entries
   for the device.  Optionally, only the current picture is cleared
   and the database unchanged.  (Note that the clearing of the current
   picture may not work on some image-display devices.)
2 Parameters
For information on individual parameters, select from the list below:
3 CURRENT
CURRENT = _LOGICAL (Read)
   If true then only the current picture is cleared. [FALSE]
3 DEVICE
DEVICE = DEVICE (Read)
   The graphics device to be cleared. [Current image-display
   device]
2 Examples
idclear
   Clears the current image display and purges its graphics
   database entries.

idclear current
   Clears the current picture on the current image display.

idclear xwindows
   Clears the xwindows device and purges its graphics-database
   entries.
2 Related_Applications
   KAPPA: GDCLEAR, IDSTATE, OVCLEAR.
2 Authors
MJC: Malcolm J. Currie  (STARLINK)
2 History
 1991 Apr 30 (MJC):
    Original version.

 1992 March 3 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.
1 IDSET
Selects a current image-display device.

Usage:

   idset device

Description:

   This application selects a current image-display device. This
   device will be used for all applications requiring an
   image-display until changed explicitly.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   The image-display device to become the current image-display
   device.  The device must be in one of the following GNS
   categories: IMAGE_DISPLAY, IMAGE_OVERLAY, MATRIX_PRINTER, or
   WINDOW, and have at least 24 colour indices or greyscale
   intensities.
2 Examples
idset xwindows
   Makes the xwindows device the current image-display device.
2 Related_Applications
   KAPPA: GDSET, IDSTATE, OVSET; Figaro: SOFT.
2 Authors
MJC: Malcolm J. Currie  (STARLINK)
2 History
 1991 June 27 (MJC):
    Original version.
1 IDSTATE
Shows the current status of a graphics device.

Usage:

   idstate [device] [frame]

Description:

   This application displays information about the current graphics
   database picture on a graphics device, including the extreme axis
   values in any requested co-ordinate Frame (see parameter FRAME).
   Information is written to various output parameters for use by
   other applications, and is also written to the screen by default
   (see parameter REPORT). An outline may be drawn around the current
   picture if required (see parameter OUTLINE).
2 Parameters
For information on individual parameters, select from the list below:
3 COMMENT
COMMENT = LITERAL (Write)
   The comment of the current picture.  Up to 132 characters
   will be written.
3 DESCRIBE
DESCRIBE = _LOGICAL (Read)
   If TRUE, a detailed description is displayed of the co-ordinate
   Frame in which the picture bounds are reported (see parameter
   FRAME). [current value]
3 DEVICE
DEVICE = DEVICE (Read)
   Name of the graphics device about which information is
   required. [Current graphics device]
3 DOMAIN
DOMAIN = LITERAL (Write)
   The Domain name of the current co-ordinate Frame for the current
   picture.
3 EPOCH
EPOCH = _DOUBLE (Read)
   If a "Sky Co-ordinate System" specification is supplied (using
   parameter FRAME) for a celestial co-ordinate system, then an
   epoch value is needed to qualify it. This is the epoch at
   which the displayed sky co-ordinates were determined. It should
   be given as a decimal years value, with or without decimal places
   ("1996.8" for example). Such values are interpreted as a Besselian
   epoch if less than 1984.0 and as a Julian epoch otherwise.
3 FRAME
FRAME = LITERAL (Read)
   A string determining the co-ordinate Frame in which the bounds
   of the current picture are to be reported. When a picture is
   created by an application such as PICDEF, DISPLAY, etc, WCS
   information describing the available co-ordinate systems are stored
   with the picture in the graphics database. This application can
   report bounds in any of the co-ordinate Frames stored with the
   current picture. The string supplied for FRAME can be one of the
   following:

   - A domain name such as SKY, AXIS, PIXEL, BASEPIC, CURPIC, etc. The
   special domain AGI_WORLD is used to refer to the world co-ordinate
   system stored in the AGI graphics database. This can be useful if
   no WCS information was store with the picture when it was created.

   - An integer value giving the index of the required Frame.

   - A "Sky Co-ordinate System" (SCS) value such as EQUAT(J2000) (see
   section "Sky Co-ordinate Systems" in SUN/95).

   If a null value (!) is supplied, bounds are reported in the
   co-ordinate Frame which was current when the picture was created.
   [!]
3 LABEL
LABEL = LITERAL (Write)
   The label of the current picture.  It is blank if there is no
   label.
3 NAME
NAME = LITERAL (Write)
   The name of the current picture.
3 OUTLINE
OUTLINE = _LOGICAL (Read)
   If OUTLINE is TRUE, then an outline will be drawn around the
   current picture to indicate its position. [FALSE]
3 REFNAM
REFNAM = LITERAL (Write)
   The reference object associated with the current picture.  It
   is blank if there is no reference object.  Up to 132 characters
   will be written.
3 REPORT
REPORT = _LOGICAL (Read)
   If this is FALSE the state of the graphics device is not
   reported, merely the results are written to the output
   parameters.  It is intended for use within procedures. [TRUE]
3 STYLE
STYLE = LITERAL (Read)
   A group of attribute settings describing the plotting style to use
   when drawing the outline (see parameter OUTLINE). The format
   of the axis values reported on the screen may also be controlled.

   A comma-separated list of strings should be given in which each
   string is either an attribute setting, or the name of a text file
   preceded by an up-arrow character "^". Such text files should
   contain further comma-separated lists which will be read and
   interpreted in the same manner. Attribute settings are applied in
   the order in which they occur within the list, with later settings
   over-riding any earlier settings given for the same attribute.

   Each individual attribute setting should be of the form:

      <name>=<value>

   where <name> is the name of a plotting attribute, and <value> is
   the value to assign to the attribute. Default values will be
   used for any unspecified attributes. All attributes will be
   defaulted if a null value (!) is supplied. See section "Plotting
   Attributes" in SUN/95 for a description of the available
   attributes. Any unrecognised attributes are ignored (no error is
   reported).

   The appearance of the outline is controlled by the attributes
   Colour(Border), Width(Border), etc (the synonym "Outline" may be
   used in place of "Border"). In addition, the following attributes
   may be set in order to control the appearance of the formatted axis
   values reported on the screen: Format, Digits, Symbol, Unit. These
   may be suffixed with an axis number (e.g. "Digits(2)") to refer to
   the values displayed for a specific axis. [current value]
3 X1
X1 = LITERAL (Write)
   The lowest value found within the current picture for axis 1 of the
   requested co-ordinate Frame (see parameter FRAME).
3 X2
X2 = LITERAL (Write)
   The highest value found within the current picture for axis 1 of the
   requested co-ordinate Frame (see parameter FRAME).
3 Y1
Y1 = LITERAL (Write)
   The lowest value found within the current picture for axis 2 of the
   requested co-ordinate Frame (see parameter FRAME).
3 Y2
Y2 = LITERAL (Write)
   The highest value found within the current picture for axis 2 of the
   requested co-ordinate Frame (see parameter FRAME).
2 Examples
idstate
   Shows the status of the current graphics device. The bounds of
   the picture are displayed in the current co-ordinate Frame of
   the picture.

idstate ps_l basepic
   Shows the status of the ps_l device. The bounds of the picture
   are displayed in the BASEPIC Frame (normalised device co-ordinates
   in which the short of the two dimensions of the display surface
   has length 1.0).

idstate outline frame=pixel style="'colour=red,width=3'"
   Shows the status of the current graphics device and draws a
   thick, red outline around the current database picture. The
   bounds of the picture are displayed in the PIXEL co-ordinate
   Frame (if available).

idstate refnam=(ndfname)
   Shows the status of the current graphics device.  If there
   is a reference data object, its name is written to the ICL
   variable NDFNAME.

idstate x1=(x1) x2=(x2) y1=(y1) y2=(y2) frame=basepic
   Shows the status of the current graphics device.  The bounds
   of the current picture in normalised device co-ordinates
   are written to the ICL variables: X1, X2, Y1, Y2.
2 Notes
-  The displayed bounds are the extreme axis values found anywhere
within the current picture. In some situations these extreme
values may not occur on the edges of the picture. For instance, if
the current picture represents a region including the north
celestial pole, then displaying the picture bounds in celestial
co-ordinates will give a declination upper limit of +90 degrees,
whilst the RA limits will be 0 hours and (close to) 24 hours.

-  Previous versions of this application reported bounds in
"Normalised Device Co-ordinates". Similar functionality is now
provided by setting parameter FRAME to "BASEPIC". Be aware though,
that "Normalised Device Co-ordinates" were normalised so that the
longer of the two axes had a length of 1.0, but BASEPIC co-ordinates
are normalised so that the shorter of the two axes has length 1.0.
2 Related_Applications
   KAPPA: IDSTATE.
2 Authors
RFWS: R.F. Warren-Smith (STARLINK)

MJC: Malcolm J. Currie (STARLINK)

DSB: David S. Berry (STARLINK)
2 History
 1-DEC-1989 (RFWS):
    Original version.

 13-DEC-1989 (RFWS):
    Added call to MSG_SYNC to synchonise message system and
    graphical output.

 1990 Jan 16 (MJC):
    Added output of the current picture's label, if it exists.

 1991 February 8 (MJC):
    Added output of the current picture's reference object, if it
    exists.

 1991 March 24 (MJC):
    Converted to SST prologue.

 1991 August 20 (MJC):
    Added output parameters and REPORT parameter.

 7-JAN-2000 (DSB):
    Big changes for the first AST/PGPLOT version.
1 IDPAZO
Pans and zooms an image-display device.

Description:

   This routine pans all planes of an IDI-supported image display,
   such as X-windows.  The zoom factor is controlled by the mouse
   or trackerball buttons.

   For an X-windows device, pressing the left button of the mouse
   increases the zooming, the centre button reduces the zoom factor,
   and the right-hand button ends the pan and zoom operation.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the image-display device to be panned and zoomed.
   The name of the base plane should be given.
   [Current image display]
2 Examples
idpazo xwindows
   Pans and zooms the xwindows device

idpazo
   Pans and zooms the current image-display device.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1990 Apr 11 (MJC):
    Original version.

 1991 October 28 (MJC):
    Made exit trigger number 2.  Inceased maximum number of
    triggers to 64.  Added a memory-visibility call.

 1992 February 19 (MJC):
    Removed the memory-visibility call.
1 INSPECT
Inspects a 2-d NDF in a variety of ways.

Usage:

   inspect in [mode] gdevice option [overlay]
      { numbin=? hirep=? histogram=? hititle=?
      { filename=?
      { peind=?
      { lbound=? ubound=?
      { out=?
      { slstart=? slend=? slice=? sltitle=?
      { vaind=?
      { xycont=? xyfile=? xytitle=?
      option

Description:

   This application provides an interactive facility to inspect the
   details of whole or part of the 2-dimensional data array in an
   input NDF.  Briefly, the inspection options permit: a region to
   be selected for which statistics may be calculated, its values
   written to a text file, or an histogram be plotted and saved in
   an NDF; the region itself may be saved in an NDF; the value of a
   pixel or a region of pixels to be viewed; a slice between two
   pixels may be calculated, plotted and saved in an NDF; text
   files containing x-y-value of selected pixels may be created and
   extended, and chosen pixels marked.

   The application has two modes of interaction: cursor and
   interface.  In cursor mode the selection of pixels, and the
   definition of the region are made by moving a graphics cursor
   over a previously displayed image or contour plot.  Since
   instructional text showing the function of the mouse or
   trackerball buttons is shown, the graphics device providing the
   cursor must be an image-display overlay.  Also the name of the
   NDF used to display the image or contour plot is known and need
   not be entered.  This is the recommended interaction mode.  The
   alternative, interface, means that the pixel indices of pixels
   and regions to be inspected are specified in response to prompts.

   The application is composed of two parts.  First the preliminaries
   obtains the mode, the input NDF and graphics devices.  In cursor
   mode this usually amounts to a single prompt, and but two in
   interface mode.  The second stage is a loop where the inspection
   option is selected and performed.
2 Parameters
For information on individual parameters, select from the list below:
3 ABSLAB
ABSLAB  =  LITERAL (Read)
   Label for the line-plot abscissa, in which NCAR fancy founts
   may be embedded when FONT = "NCAR".  Note Slice and Histogram
   have different defaults and these are stored separately.

   For a slice plot the suggested default is the current value,
   which is initially "Pixels".  If an error occurs obtaining the
   label the default is "Pixels".

   If axis information is present the suggested default for a
   plot of an histogram is the NDF's axis label followed by the
   units, in parentheses.  If an error occurs obtaining the label
   or there is no axis information, the label takes its current
   value, which initially is "Values".

   For the first plot ABSLAB is defaulted to the suggested value
   unless PLOTSTYLE is included on the command line, and
   subsequently will only be obtained whenever PLOTSTYLE is TRUE.
   []
3 FILENAME
FILENAME = FILENAME (Write)
   Name of the text file to contain the Listing of image values.
   The suggested default is inspect_list.lis.  This is only
   required for the "List" option.
3 FONT
FONT = LITERAL (Read)
   The fount to be used for the line graphics.  It can be either
   "NCAR" for the NCAR fancy characters and "GKS" for the standard
   GKS san-serif fount.   The former is intended for hardcopy
   publication-quality plots, since it is relatively slow; the
   latter is intended for normal interactive graphics requiring
   rapid plotting, and it is clearer on small plots. The
   suggested default is the current value. ["GKS"]

   For the first plot FONT is defaulted to "GKS", and
   subsequently will only be obtained whenever PLOTSTYLE is TRUE.
   []
3 GDEVICE
GDEVICE = DEVICE (Read)
   The name of the graphics device for line plots produced by the
   "Histogram" and "Slice" options.  The device should not be the
   image display, but it may be the image-display overlay plane
   used in the cursor-interaction mode, i.e. the same value as
   parameter OVERLAY (though this is not advisable for
   X-windows).  In the latter case plotting occurs in the same
   picture as the overlay annotations, namely the current
   picture.  If the existing plot on the base plane of the image
   display has text, e.g. annotated axes, a mess can of confused
   lines can appear.  To avoid this the current picture should be
   made the DATA picture rather than the FRAME around it.  If
   null, !, is given no line plots will be drawn unless the
   "Device" option is selected.
3 HIREP
HIREP = _LOGICAL (Read)
   TRUE if the full Histogram is to be reported to you.  A large
   number of bins may be required for the plot but need not be
   listed in full.  This parameter provides a way of preventing
   unwanted, tedious and long output.  The suggested default is
   FALSE.  HIREP is only required for the "Histogram" option.
3 HISTOGRAM
HISTOGRAM = NDF (Read)
   Name of the NDF structure to save the Histogram in its data
   array.  If null, !, is entered, the histogram NDF is not
   created.  This parameter is only required for the "Histogram"
   option.  The suggested default is !.
3 HITITLE
HITITLE = LITERAL (Read)
   Title for the output NDF containing the Histogram.  For the
   first histogram saved this defaults to
   "KAPRH - Inspect_Histogram", and subsequently this becomes
   the suggested default.   This parameter is only required for
   the "Histogram" option. []
3 IN
IN = NDF (Read)
   NDF structure containing the 2-dimensional data array to be
   inspected.
3 LBOUND
LBOUND( 2 ) = _INTEGER (Read)
   Lower bounds in pixel indices of the Region.  The chosen pixel
   must be different from that at the lower bound.  It is only
   used in Interface mode with the "Region" option.
3 MAJTIC
MAJTIC( 2 ) = _REAL (Read)
   The parameter controlling the numbers of major tick marks
   for the x and y axes in the slice or histogram plot.
   (The number used is between MAJTIC+2 and 5*MAJTIC/2+4.).

   By default, it is [4.,4.].  For the first plot MAJTIC is
   defaulted, and subsequently will only be obtained whenever
   PLOTSTYLE is TRUE.  []
3 MINTIC
MINTIC( 2 ) = _REAL (Read)
   The number of minor tick marks between each major tick mark
   for linear x and y axes in the slice or histogram plot.  A
   negative value forces the graphics package to compute
   appropriate values.  The number of minor tick marks per major
   tick is fixed (8) for a logarithmic axis.

   By default, it is [-1.,-1.].  For the first plot MINTIC is
   defaulted, and subsequently will only be obtained whenever
   PLOTSTYLE is TRUE.  []
3 MODE
MODE = LITERAL (Read)
   The interaction mode.  The options are "Cursor" to use a
   graphics cursor to select regions and pixels to inspect,
   or "Interface" where prompted ADAM parameters are used to
   define those parts of the image to inspect. [Current
   interaction mode]
3 NUMBIN
NUMBIN = _INTEGER (Read)
   Number of bins needed for the Histogram.  The suggested default
   is the current value, which is 100 initially.  A value is the
   range 2--5000 is required.  This parameter is only required
   for the "Histogram" option.
3 OPTION
OPTION = LITERAL (Read)
   Current inspection mode.  The options are:

    "Device"     - This allows the selection and opening of a new
                   line-plot graphics device, at the same time
                   closing down the old one, whose last plot is
                   stored in the graphics database.
    "Exit"       - Exit the application.
    "Histogram"  - This calculates the histogram of the current
                   region. A summary and plot (if there is a
                   graphics device available) of the histogram
                   is produced.  The style of the plot may be
                   adjusted via several parameters.  The full
                   histogram may also be reported. The histogram
                   data can be stored in a 1-d NDF.
    "List"       - This produces a formatted and headed listing
                   of the chosen region to a text file.
    "Peep"       - Obtain a formatted listing of the 7x7 section
                   of the array data, centred on a pixel
                   specified using the cursor or via prompting.
    "Region"     - To define the region of the array to be used
                   by other options. If the image display
                   is available, then the cursor is used to
                   define the area, otherwise, the pixel bounds
                   of the region come from the environment. Using
                   the cursor, the functions of the choice-device
                   buttons are drawn on the overlay.
    "Save"       - Writes the current region to a new NDF,
                   propagating all the components.
    "Slice"      - Two points are defined via the cursor or from
                   parameter prompting between which a slice (i.e.
                   cross-section) is calculated.  Using the
                   cursor, the functions of the trackerball or
                   mouse buttons are drawn on the overlay. A plot
                   is made to the graphics device if available.
                   The style of the plot may be adjusted via
                   several parameters.  The slice can be stored
                   in a 1-d NDF.  The slice abscissa has units in
                   true pixels (assuming pixels are square), thus
                   a 45-degree slice would have a length root 2
                   times its projected length in x or y.
    "Statistics" - The key statistical parameters of the current
                   region are determined and reported.
    "Value"      - Obtain the value of a pixel at a point selected
                   via the cursor or via prompting.
    "XYcur"      - A list of the co-ordinates and values of pixels
                   selected by the image-display cursor are
                   written to a text file with Fortran carriage
                   control. The functions of the trackerball or
                   mouse buttons are displayed.  Optionally, an
                   existing file in the same format as produced
                   by XYcur can be appended to, for example, when
                   a session has been interrupted.  These stored
                   pixels are displayed on the overlay plane as
                   if there had been no interruption.  XYcur
                   requires cursor mode.

   The suggested default is "Region".

   If the option is specified on the command line a single
   inspection may be undertaken, i.e.  there is no looping.  This
   feature is intended for command procedures.
3 ORDLAB
ORDLAB  =  LITERAL (Read)
   Label for the line-plot ordinate, in which NCAR fancy founts
   may be embedded.  Note Slice and Histogram have different
   defaults and these are stored separately.

   For an histogram plot the suggested default is the current
   value, which is initially "Number".  If an error occurs
   obtaining the label the default is "Number".

   If axis information is present the suggested default for a
   plot of a slice is the NDF's axis label followed by the
   units, in parentheses.  If an error occurs obtaining the label
   or there is no axis information, the label takes its current
   value, which initially is "Data values".

   For the first plot ORDLAB is defaulted to the suggested value
   unless PLOTSTYLE is included on the command line, and
   subsequently will only be obtained whenever PLOTSTYLE is TRUE.
   []
3 OUT
OUT = NDF (Read)
   Name of the NDF structure to contain the Saved Region.  This
   is only used in the "Save" option.
3 OUTTIC
OUTTIC = _LOGICAL (Read)
   TRUE if the axis tick marks are to appear on the outside of
   the axes instead of inside in the slice or histogram plots.
   This eliminates intersections of ticks with the data locus.

   By default, the tick marks are drawn inside the plot region.
   For the first plot OUTTIC is defaulted, and subsequently will
   only be obtained whenever PLOTSTYLE is TRUE.  []
3 OVERLAY
OVERLAY = DEVICE (Read)
   Name of the overlay-plane device used in the cursor interaction
   mode.  It must have class IMAGE_OVERLAY or WINDOW_OVERLAY and
   support colour.  It is ignored when MODE is not "Cursor".
   [Current image-display-overlay device]
3 PEIND
PEIND( 2 ) = _INTEGER (Read)
   x-y pixel index of the pixel about which the Peep is required.
   The values must lie within their respective bounds of the
   input image.  The suggested default is the image centre.  It
   is only used in Interface mode with the "Peep" option.
3 PLOTSTYLE
PLOTSTYLE = _LOGICAL (Read)
   If TRUE, the plotting style of line plots is to be altered from
   the default for the first plot, or the existing values for
   subsequent graphs.  Initially, it is defaulted to FALSE, then
   the suggested value is the current value.  Therefore to
   override the plotting-style parameters on the first plot, new
   values should be given on the command line, and along with the
   PLOTSTYLE keyword for ABSLAB, ORDLAB and PLTITL.
   Subsequently, the plotting style may be retained or modified
   via prompts.  []
3 PLTITL
PLTITL = LITERAL (Read)
   The title of a line plot, in which NCAR fancy founts may be
   embedded.  Note Slice and Histogram have different defaults
   and these are stored separately.  Both attempt to use the NDF's
   title if present and no error occurs, otherwise the current
   value becomes the suggested default.  For the histogram plot
   this is initially "Histogram of current region" and for the
   slice plot it is initially "Slice plot".

   For the first plot PLTITL is defaulted to the suggested value
   unless PLOTSTYLE is included on the command line, and
   subsequently will only be obtained whenever PLOTSTYLE is TRUE.
   []
3 SLEND
SLEND( 2 ) = _INTEGER (Read)
   The x-y pixel index defining the end of the Slice.  It
   must lie within the bounds of the array and be distinct from
   the start of the slice.  The suggested default is the upper
   bound of the input NDF.  It is only used in Interface mode
   with the "Slice" option.
3 SLICE
SLICE = NDF (Read)
   Name of the NDF structure to save the Slice in its data array.
   If null, !, is entered, the slice NDF is not created.  It is
   only required in the "Slice" option.  The suggested default is
   !.
3 SLSTART
SLSTART( 2 ) = _INTEGER (Read)
   The x-y pixel index defining the start of the Slice.  It must
   lie within the bounds of the array.  The suggested default is
   the lower bound of the input NDF.  It is only used in
   Interface mode with the "Slice" option.
3 SLTITLE
SLTITLE = LITERAL (Read)
   Title for the Slice NDF.  Title for the Region NDF.  For the
   first region saved this defaults to "KAPRH - Inspect_Slice",
   and subsequently this becomes the suggested default.  It is
   only required in the "Slice" option. []
3 THICK
THICK = _REAL (Read)
   The thickness of the axes and annotations in the histogram and
   line plots, where 1.0 is the normal thickness.  Currently,
   this is only available on a few devices.  It must take a value
   in the range 0.5--5.0.

   By default the line thickness is 1.0.  For the first plot
   THICK is defaulted to the suggested value, and subsequently
   will only be obtained whenever PLOTSTYLE is TRUE.  []
3 TITLE
TITLE = LITERAL (Read)
   Title for the Region NDF.  For the first region saved this
   defaults to "KAPRH - Inspect", and subsequently this becomes
   the suggested default.  It is only used in the "Save" option.
   []
3 UBOUND
UBOUND( 2 ) = _INTEGER (Read)
   Upper bounds in pixel indices of the Region.  The chosen pixel
   must be different from that at the lower bound.  It is only
   used in Interface mode with the "Region" option.
3 VAIND
VAIND( 2 ) = _INTEGER (Read)
   x-y pixel index of pixel whose Value is required.  The values
   must lie within their respective bounds of the input image.
   The suggested default is the image centre.  It is only used in
   Interface mode with the "Value" option.
3 XLOG
XLOG = _LOGICAL (Read)
   TRUE if the line-plot abscissa is to be logarithmic.  Note, for
   Slice and Histogram options each has its own independent
   switch.  It is unlikely that you would want to do this.  By
   default, the abscissa is linear.  For the first plot XLOG is
   defaulted, and subsequently will only be obtained whenever
   PLOTSTYLE is TRUE.  []
3 YLOG
YLOG = _LOGICAL (Read)
   TRUE if the line-plot ordinate is to be logarithmic. Note, for
   Slice and Histogram options each has its own independent
   switch.  By default, the ordinate is linear.  For the first
   plot YLOG is defaulted, and subsequently will only be obtained
   whenever PLOTSTYLE is TRUE.  []
3 XYCONT
XYCONT = _LOGICAL (Read)
   If TRUE, an existing file is appended to in the XYcur option.
   The suggested default is FALSE.  It is only available in
   cursor mode with the "XYcur" option.
3 XYFILE
XYFILE = FILENAME (Update)
   Name of the text file to which pixel data are written by
   XYcur option.  The suggested default is xylist.lis.  It is
   only available in cursor mode with the "XYcur" option.
3 XYTITLE
XYTITLE = LITERAL (Read)
   Title for the text file in XYcur option.  For the first file
   created this defaults to "# KAPRH - Inspect_XYcur", and
   subsequently this becomes the suggested default. It is not
   accessed if XYCONT is TRUE.   It is only available in cursor
   mode with the "XYcur" option. []
2 Examples
Notes:
   Since INSPECT is an interacting, graphical and self-contained
   monolith of applications it is not straightforward to give
   command-line examples.  Generally, the best way to run INSPECT
   is in cursor mode after having displayed an image.  The
   following examples use the prompting mode.

inspect rulupi i canon_l sl slstart=[3,10] slend=[9,42] slice=!
   Plots a slice from pixel (3,10) to (9,42) of the NDF called
   rulupi to the CANON_L graphics device.

inspect rulupi i gdevice=x2w option=hi numbin=100 histogram=ru_hg
   Calculates the histogram of the NDF called rulupi, reporting
   a summary to you, and plots the histogram to the x2w device.
   The histogram has one hundred bins and is stored in an NDF
   called ru_hg.

inspect rulupi i ! option=hi numbin=100 hirep \
   As above except no plot is made, no NDF is created, and
   the full one hundred histogram values are reported.  In this
   particular example the second parameter could equally well be
   C for cursor mode since no co-ordinate information is
   obtained.
2 Notes
-  In cursor mode there must be an existing DATA picture for the
chosen image display stored in the graphics database.  Valid
cursor positions are bounded by the DATA picture.

-  On exit the input picture, if there was one, is made the
current picture on the overlay; and the last graphics plot is
stored in the database as a FRAME picture.  Also, if the "Device"
option is used a FRAME picture is stored for that device.

-  The Histogram NDF has an AXIS component whose the LABEL and
UNITS are those of the input NDF's data array; its centres are
in data value of the bin centre.  The NDF LABEL is "Number".

-  The Slice NDF has an AXIS component whose LABEL is "Pixel" and
centres are pixel co-ordinates from 0.5; its LABEL and UNITS are
propagated from the input NDF.

-  The current palette entries 1 to 4 associated with the OVERLAY
are used as follows in the cursor mode for IMAGE_OVERLAY devices.
A sample slice or region, and the associated button, are drawn
with palette index 1.  Similarly, index 3 is used to indicate an
accepted slice or region.  The exit button is drawn in the colour
of index 2.  Index 4 is used to draw the boxes representing the
mouse or trackerball buttons.  Use the PAL* commands to select
suitable complementary colours for the image's colour table,
especially for palette indices 1 and 3.

For WINDOW_OVERLAY devices, all the above are drawn with the
colour of palette index 1, but the various colours are replaced
by different dashed-line patterns.  Use PALENTRY to change the
colour of the lines.
2 Authors
MJC: Malcolm Currie  (STARLINK)

DSB: David S. Berry (STARLINK)
2 History
 1991 June 11 (MJC)
    Original NDF version, based on the pre-V0.8 version.

 1991 July 5 (MJC):
    Passed a section to the histogram routine.

 1991 August 20 (MJC):
    Added FONT parameter.

 1992 March 3 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 April 21 (MJC):
    Made to handle significant dimensions for user-defined
    sections.

 1992 June 16 (MJC):
    Cursor mode made to work with WINDOW_OVERLAY class.  Since
    these devices only have one colour, the normal coloured
    lines appear as dashed lines.

 1992 December 4 (MJC):
    Leaves the palette of the overlay device unchanged.  Added
    a note describing the roles of the palette colours used.
    Inserted the "Save" option into the description of OPTION.

 5-JUN-1998 (DSB):
    Added propagation of the WCS component.
2 Implementation_Status
   -  Only real data can be processed directly.  Other data types
   will undergo a type conversion before processing occurs.

   -  The routine correctly processes the AXIS, DATA, QUALITY,
   VARIANCE, LABEL, TITLE, UNITS, WCS and HISTORY components of an NDF,
   and propagates all extensions to the output Region NDF.

   -  Processing of bad pixels and automatic quality masking are
   supported.  Bad pixels are are excluded from statistics and are
   indicated in reports of data values by the word INVALID.  In the
   slice plot they appear as gaps, and they do not affect the limits
   of the ordinate.  The same applies to zero or negative data
   values if the plot is to have a logarithmic ordinate.  Similarly,
   for the histogram abscissa.
1 KRHHELP
Gives help about KAPRH.

Usage:

   krhhelp [topic] [subtopic] [subsubtopic] [subsubsubtopic]

Description:

   Displays help about KAPRH.  The help information describes individual 
   commands in detail.

   Here are some of the main options.
      krhhelp
         No parameter is given so the introduction and the top-level
         help index is displayed.
      krhhelp application/topic
         This gives help about the specified application or topic.
      krhhelp application/topic subtopic
         This lists help about a subtopic of the specified
         application or topic. The hierarchy of topics has a maximum
         of four levels.

   See the Section "Navigating the Help Library" for details how to
   move around the help information, and to select the topics you
   want to view.
2 Parameters
For information on individual parameters, select from the list below:
3 TOPIC
TOPIC = LITERAL (Read)
   Topic for which help is to be given. [" "]
3 SUBTOPIC
SUBTOPIC = LITERAL (Read)
   Subtopic for which help is to be given. [" "]
3 SUBSUBTOPIC
SUBSUBTOPIC = LITERAL (Read)
   Subsubtopic for which help is to be given. [" "]
3 SUBSUBSUBTOPIC
SUBSUBSUBTOPIC = LITERAL (Read)
   Subsubsubtopic for which help is to be given. [" "]
2 Navigating_the_Help_Library
   The help information is arranged hierarchically.  You can move
   around the help information whenever KRHHELP prompts.  This
   occurs when it has either presented a screen's worth of text or
   has completed displaying the previously requested help.  The
   information displayed by KRHHELP on a particular topic includes a
   description of the topic and a list of subtopics that further
   describe the topic.

   At a prompt you may enter:
      o  a topic and/or subtopic name(s) to display the help for that
         topic or subtopic, so for example, "greyplot parameters full"
         gives help on FULL, which is a subtopic of Parameters, which
         in turn is a subtopic of GREYPLOT;

      o  a <CR> to see more text at a "Press RETURN to continue ..."
         request;

      o  a <CR> at topic and subtopic prompts to move up one level
         in the hierarchy, and if you are at the top level it will
         terminate the help session;

      o  a CTRL/D (pressing the CTRL and D keys simultaneously) in
         response to any prompt will terminate the help session;

      o  a question mark "?" to redisplay the text for the current
         topic, including the list of topic or subtopic names; or

      o  an ellipsis "..." to display all the text below the
         current point in the hierarchy.  For example, "GREYPLOT..."
         displays information on the GREYPLOT topic as well as
         information on all the subtopics under GREYPLOT.

   You can abbreviate any topic or subtopic using the following
   rules.

      o  Just give the first few characters, e.g. "PARA" for
         Parameters.

      o  Some topics are composed of several words separated by
         underscores.  Each word of the keyword may be abbreviated,
         e.g. "Colour_Set" can be shortened to "C_S".

      o  The characters "%" and "*" act as wildcards, where the
         percent sign matches any single character, and asterisk
         matches any sequence of characters.  Thus to display
         information on all available topics, type an asterisk in
         reply to a prompt.

      o  If a word contains, but does end with an asterisk wildcard,
         it must not be truncated.

      o  The entered string must not contain leading or embedded
         spaces.

   Ambiguous abbreviations result in all matches being displayed.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1986 November 14 (MJC):
    Original.

 1988 October 11 (MJC):
    Fixed bug to enable subtopics to be accessed from the command
    line.

 1991 September 25 (MJC):
    Corrected the description for the new layout in the new help
    library, KAPPA.

 1992 June 17 (MJC):
    UNIX version using portable HELP.

 1992 August 19 (MJC):
    Rewrote the description, added usage and implementation status.

 1995 November 9 (MJC):
    Modified for UNIX and added the Topic on Navigation.
2 Implementation_Status
   -  Uses the portable help system.

1 LUTFLIP
Flips the colour table of an image-display device.

Usage:

   lutflip [device] [plane]

Description:

   This routine `flips' the colour table of a nominated plane of
   an IDI-supported image display, such as X-windows.  The flip
   reverses the order of the colours, so that the first colour
   becomes the last and vice versa, etc.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the image-display device whose colour table is to
   be flipped.  The name of the base plane should be given even if
   the overlay colour table is to be flipped.
   [Current image display]
3 PLANE
PLANE = _INTEGER (Read)
   The number of the memory plane whose colour table is to be
   flipped.  If it is null the base (image) memory's colour table
   is reversed.  The base memory is 0 and overlays are numbered
   consecutively from 1.  For an Ikon the only overlay plane is 1.
   PLANE is only permitted to have a value in the range 0 to the
   number of planes minus one. [0]
2 Examples
lutflip
   This reverses the colour table on the current image-display
   device.

lutflip xwindows
   This reverses the colour table on the xwindows device.

lutflip ikon 1
   This flips the colour table on the Ikon overlay plane.
2 Notes
-  Only Ikons and X-windows are supported.

-  Reserved pens are not flipped.
2 Related_Applications
   KAPPA: LUTHILITE, LUTROT, LUTTWEAK.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1990 Apr 13 (MJC):
    Original version.

 1991 April 10 (MJC):
    Modified for colour-table management, specifically the reserved
    pens are not flipped.

 1991 June 5 (MJC):
    Altered for new, X-windows, IDI.  Capability 14 is 2**n rather
    than n.

 1992 March 26 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 August 5 (MJC):
    Used new capability 18 to obtain the true number of
    colour-table entries, which may not be a power of 2, as
    returned by capability 14.

1 LUTHILITE
Highlights a colour table of an image-display device.

Usage:

   luthilite colour [device] [plane] [view]

Description:

   This routine adjusts the colour table of a nominated plane of
   an IDI-supported image display, such as X-windows.  The adjustment
   is like a highlight pen, only here it can traverse the colour
   table, widen or thin is under mouse, joystick or trackerball
   button control; and the colour of the highlight is arbitrary.
   Thus particular features in an image may readily become visible.

   For an Ikon or X-windows, moving the mouse left or right shifts
   the highlight in the colour table towards lower and higher colour
   indices respectively.  The highlight does not rotate around the
   colour table.  Pressing the left button of the mouse reduces the
   width of the highlight by one colour index.  Pressing the centre
   button increases the width of the highlight by one colour index.
   Hitting the right-hand button ends the modification of the colour
   table.

   The colour table may be viewed during its manipulation without
   permanently altering the display memory.  The colour-table
   display is situated via the cursor, and will disappear once the
   highlighting is complete.
2 Parameters
For information on individual parameters, select from the list below:
3 COLOUR
COLOUR() = LITERAL (Read)
   The colour to be used as a highlight.  It is either of these
   alternatives.

     o  A named colour from the standard colour set, which may
     be abbreviated.  If the abbreviated name is ambiguous the
     first match is selected.  The case of the name is ignored.
     Some examples are "Seagreen", "Violet", and "Orchid".

     o  Normalised red, green, and blue intensities separated by
     commas or spaces.  Each value must lie in the range 0.0--1.0.
     For example, "1.0,1.0,0.5" would give a pale yellow.
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the image-display device whose lookup table is to
   be adjusted.  The name of the base plane should be given even
   if the overlay lookup table is to be adjusted.
   [Current image display]
3 FULL
FULL = _LOGICAL (Read)
   If FULL is TRUE, the whole colour-table for the device is
   may be highlighted, including the reserved pens.  When FULL
   is FALSE, the reserved pens in the palette are unaltered.
   [FALSE]
3 PLANE
PLANE = _INTEGER (Read)
   The number of the memory plane whose lookup table is to be
   manipulated.  If it is null the base (image) memory's lookup
   table is adjusted.  The base memory is 0 and overlays are
   numbered consecutively from 1.  For an Ikon the only overlay
   plane is 1.  PLANE is only permitted to have a value in the
   range 0 to the number of planes minus one. [0]
3 VIEW
VIEW = _LOGICAL (Read)
   If TRUE the colour table is displayed during its manipulation.
   [FALSE]
2 Examples
luthilite red
   Highlights the colour table on the current image-display
   device with a red marker.

luthilite red full
   Highlights the colour table and palette on the current
   image-display device with a red marker.

luthilite skyblue xwindows
   Highlights the colour table on the xwindows device with a
   sky-blue marker.

luthilite [1.0,1.0,0.3] ikon 1
   Highlights the colour table on the Ikon overlay plane in a
   pale yellow.

luthilite red view
   Highlights the colour table on the current image-display
   device with a red marker.  The colour table is displayed
   during the highlighting.
2 Notes
-  Only Ikons and X-windows are supported.

-  Initially, the highlight has a width of two colour indices,
and it is located at the second lowest colour index.  The maximum
width of the highlight is the larger of six and a quarter of the
colour table, but may be narrower when there are less than 12
colour indices.  Should the highlight prove to be unsuitable, it
may be made invisible by reducing the width to zero.

-  The rate of motion of the highlight is a function of the
speed of cursor movement in addition to the cursor position.
For a given cursor displacement slow motion moves the highlight
more slowly, and faster motion moves it more rapidly.  This
permits both fine control and swift change in the highlight's
location.
2 Related_Applications
   KAPPA: LUTFLIP, LUTROT, LUTTWEAK.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1991 April 30 (MJC):
    Original version.

 1991 June 5 (MJC):
    Altered for new, X-windows, IDI.  Capability 14 is 2**n rather
    than n.

 1991 July 22 (MJC):
    Converted RGB parameter to the more-sophisticated COLOUR.

 1991 November 15 (MJC):
    Made exit trigger number 2.  Inceased maximum number of
    triggers to 64.

 1991 November 21 (MJC):
    Fixed bug so that highlight may appear in but one colour index.

 1992 February 10 (MJC):
    Permit the highlight width to be zero.  Normalised the
    highlight displacement by the effective number of colour
    indices.

 1992 February 29 (MJC):
    Added fine tuning using the cursor speed, and computed the
    displacements in floating point to give a smoother feel.

 1992 March 26 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 August 5 (MJC):
    Used new capability 18 to obtain the true number of
    colour-table entries, which may not be a power of 2, as
    returned by capability 14.

 1992 November 24 (MJC):
    Reinstated the one-to-one correspondence between the lookup
    table and the intensity transformation table, lost by an
    undocumented change to X-windows driver.

 1994 April 29 (MJC):
    Added FULL parameter.

1 LUTROT
Rotates the colour table of an image-display device.

Usage:

   lutrot [device] [plane]

Description:

   This routine rotates the colour table of a nominated plane of
   an IDI-supported image display, such as X-windows.  The rotation
   is under mouse, joystick or trackerball button control.

   For an Ikon or X-windows, moving the mouse left or right
   rotates the colour table towards lower and higher pen numbers
   respectively.  Pressing the left button of the mouse resets the
   colour table to its input state, and hitting the right-hand
   button ends the rotation.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the image-display device whose colour table is to
   be rotated.  The name of the base plane should be given even if
   the overlay colour table is to be rotated.
   [Current image-display device]
3 FULL
FULL = _LOGICAL (Read)
   If FULL is TRUE, the whole colour-table for the device is
   rotated, including the reserved pens.  When FULL is FALSE, the
   reserved pens in the palette are unaltered.  [FALSE]
3 PLANE
PLANE = _INTEGER (Read)
   The number of the memory plane whose colour table is to be
   rotated.  If it is null the base (image) memory's colour table
   is rotated.  The base memory is 0 and overlays are numbered
   consecutively from 1.  For an Ikon the only overlay plane is 1.
   PLANE is only permitted to have a value in the range 0 to the
   number of planes minus one. [0]
2 Examples
lutrot
   This enables rotation of the colour table on the current
   image-display device.

lutrot xwindows
   This enables rotation of the colour table on the xwindows
   device.

lutrot full
   This enables rotation of the colour table and palette on the
   current image-display device.

lutrot ikon 1
   This enables rotation of the colour table on the Ikon overlay
   plane.
2 Notes
-  Only Ikons and X-windows are supported.

-  The rate of motion of the colour table is a function of the
speed of cursor movement in addition to the cursor position.
For a given cursor displacement slow motion rotates the colour
table more slowly, and faster motion moves it more rapidly.  This
permits both fine control and swift rotation.
2 Related_Applications
   KAPPA: LUTFLIP, LUTHILITE, LUTTWEAK.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1990 Apr 15 (MJC):
    Original version.

 1991 April 10 (MJC):
    Modified for colour-table management, specifically the reserved
    pens are not rotated.

 1991 June 5 (MJC):
    Altered for new, X-windows, IDI.  Capability 14 is 2**n rather
    than n.

 1991 November 15 (MJC):
    Made exit trigger number 2.  Inceased maximum number of
    triggers to 64.

 1992 February 10 (MJC):
    Normalised the rotation displacement by the effective number
    of colour indices.

 1992 February 29 (MJC):
    Added fine tuning using the cursor speed, and computed the
    displacements in floating point to give a smoother feel.

 1992 March 26 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 August 5 (MJC):
    Used new capability 18 to obtain the true number of
    colour-table entries, which may not be a power of 2, as
    returned by capability 14.

 1994 April 29 (MJC):
    Added FULL parameter.

1 LUTTWEAK
Tweaks a colour table of an image-display device.

Usage:

   luttweak [device] [plane] [view]

Description:

   This routine adjusts the colour table of a nominated plane of
   an IDI-supported image display, such as X-windows.  The adjustment
   is under mouse, joystick or trackerball button control.

   For an Ikon or X-windows, moving the mouse left or right shifts
   the colour table towards lower and higher colour indices
   respectively.  Moving the mouse up stretches the lookup table,
   and moving it down squashes the lookup table until it disappears,
   then the lookup table is flipped.  If the lookup table is
   reversed, moving down stretches, and moving up squashes.
   Pressing the left button of the mouse resets the colour table to
   its input state.  Pressing the centre button alters the way in
   which a squashed lookup table is padded.  The two states are
   white or to use the first and last colours of the input lookup
   table, the sense depending on whether the lookup table is
   flipped.  Hitting the right-hand button ends the modification of
   the colour table.

   The colour table may be viewed during its manipulation without
   permanently altering the display memory.  The colour-table
   display is situated via the cursor, and will disappear once the
   tweaking is complete.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   The name of the image-display device whose lookup table is to
   be adjusted.  The name of the base plane should be given even
   if the overlay lookup table is to be adjusted.
   [Current image-display device]
3 FULL
FULL = _LOGICAL (Read)
   If FULL is TRUE, the whole colour-table for the device is
   may be modified, including the reserved pens.  When FULL
   is FALSE, the reserved pens in the palette are unaltered.
   [FALSE]
3 PLANE
PLANE = _INTEGER (Read)
   The number of the memory plane whose lookup table is to be
   manipulated.  If it is null the base (image) memory's lookup
   table is adjusted.  The base memory is 0 and overlays are
   numbered consecutively from 1.  For an Ikon the only overlay
   plane is 1.  PLANE is only permitted to have a value in the
   range 0 to the number of planes minus one. [0]
3 VIEW
VIEW = _LOGICAL (Read)
   If TRUE the colour table is displayed during its manipulation.
   [FALSE]
2 Examples
luttweak
   Tweaks the colour table on the current image-display device.

luttweak xwindows
   Tweaks the colour table on the xwindows device.

luttweak xwindows full
   Tweaks the colour table and palette on the xwindows device.

luttweak ikon 1
   Tweaks the colour table on the Ikon overlay plane.

luttweak view
   Tweaks the colour table on the current image-display device.
   The colour table is displayed during the tweaking.
2 Notes
-  Only Ikons and X-windows are supported.

-  The speed of the colour-table rotation is not linearly
proportional to the mouse displacement; the speed of displacement
tunes the effect so that slow motion makes a small change than
a faster motion.  The squashing and stretching factors are also
non-linear.
2 Related_Applications
   KAPPA: LUTFLIP, LUTHILITE, LUTROT.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1991 April 22 (MJC):
    Original version.

 1991 June 5 (MJC):
    Altered for new, X-windows, IDI.  Capability 14 is 2**n rather
    than n.

 1991 November 15 (MJC):
    Made exit trigger number 2.  Inceased maximum number of
    triggers to 64.

 1992 February 10 (MJC):
    Normalised the rotation displacement by the effective number
    of colour indices.

 1992 February 19 (MJC):
    Added fine tuning using the cursor speed, and computed the
    displacements in floating point to give a smoother feel.

 1992 March 26 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 August 5 (MJC):
    Used new capability 18 to obtain the true number of
    colour-table entries, which may not be a power of 2, as
    returned by capability 14.

 1992 November 24 (MJC):
    Reinstated the one-to-one correspondence between the lookup
    table and the intensity transformation table, lost by an
    undocumented change to X-windows driver.

 1994 April 29 (MJC):
    Added FULL parameter.

1 MOSAIC
    Merges several non-congruent 2-d data arrays into one output
    data array
 
   Up to 20 non-congruent 2-d data arrays may be input, along with
   their relative offsets from the first data array, and these are
   then made into a mosaic into one (usually larger) output 2-d data
   array. Where the frames overlap, either the mean value or just the
   sum is inserted into the output data array. Normally averaging is
   performed. All data arrays are stored in IMAGE structures.
   The magic-value method is used for processing bad data.  Bad
   pixels are excluded from the averaging in overlap areas. Output
   pixels that have been mapped or correspond to one or more input
   arrays, yet have no good pixels contributing, are set to bad.
   Pixels in the output data array not mapped by any of the input
   arrays are set to zero.
2 AUTHORS
   Malcolm J. Currie  STARLINK (RAL::CUR)
   Mark McCaughrean UOE (REVA::MJM)
2 BUGS
   None known.
2 HISTORY
   16-09-1985 : First implementation (REVA::MJM)
   1986 Aug 7 : Renamed algorithm subroutines (MOSAIC_ADD to MOSCAD,
                MOSAIC_DIV to MOSCDV). Correctly ordered arguments
                in MOSCAD (7th to 5th). Added invocation to prologue
                (RAL::CUR).
   1986 Aug 29: Completed prologue (method and arguments), added
                status checking, and NUMREA variable so that the
                correct tidying of input structures is done. Nearly
                conformed to Starlink standards (RAL::CUR).
   1987 Oct 16: Reordered tidying and extra status checks
                (RAL::CUR)
   1988 Mar 16: Substituted AIF_ANTMP to annul workspace
                (RAL::CUR).
   1988 Mar 17: Referred to `array' rather than `image'
                (RAL::CUR)
   1988 May 31: Separated normalisation operation, and added
                average option (RAL::CUR).
   1988 Jun 21: More reporting of error context, added good data
                flag and checking (RAL::CUR)
   1988 Oct 20: Bug fix in offsets introduced 1988 May 31
                (RAL::CUR)
   1989 Jun 13: Allow for processing primitive NDFs (RAL::CUR)
   1989 Aug  7: Passed array dimensions as separate variables
                to MOSCAD, MOSCDV and ZERO2D (RAL::CUR).
   1989 Dec 21: Workspace managed by AIF_TEMP (RAL::CUR).
   1990 Jan 13: Input data now unmapped on exit (RAL::CUR).
   1991 Oct 25: Propagates UNITS, LABEL, and HISTORY (RAL::CUR).
   1992 Feb 25: Limited processing of simple NDFs (RAL::CUR).
   1992 Mar  3: Replaced AIF parameter-system calls by the extended
                PAR library (RAL::CUR).
2 PARAMETERS
   NUMBER  =  INTEGER( READ )
       Number of data arrays to be merged
   AVERAGE  = LOGICAL( READ )
       If true overlap regions are averaged, alternatively, they are
         summed
   INPICn  =  IMAGE( READ )
       nth IMAGE structure containing a data array to be a
         constituent of a mosaic
   OUTPIC  =  IMAGE( WRITE )
       Output IMAGE structure containing the merged data array
   OTITLE  =  CHAR( READ )
       Title for the output IMAGE structure
   XOFFSET =  INTEGER( READ )
       x offset of nth data array from the first, in the sense of the
       x origin of the nth data array minus the x origin of the
       first
   YOFFSET =  INTEGER( READ )
       y offset of nth data array from the first, in the sense of the
       y origin of the nth data array minus the y origin of the
       first.
3 NUMBER
  keyword     'NUMBER'
  position    1
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  ppath       'CURRENT,DYNAMIC'
  prompt      'Number of images to be put in a mosaic'
  help        'Give the total number of data arrays be to made into a 
              mosaic data array (max. 20)'
 #range       1, 20
3 INPIC1
  keyword     'INPIC1'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  ppath       'GLOBAL'
  association '<-GLOBAL.DATA_ARRAY'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC2
  keyword     'INPIC2'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC3
  keyword     'INPIC3'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC4
  keyword     'INPIC4'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC5
  keyword     'INPIC5'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC6
  keyword     'INPIC6'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC7
  keyword     'INPIC7'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC8
  keyword     'INPIC8'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC9
  keyword     'INPIC9'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC10
  keyword     'INPIC10'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC11
  keyword     'INPIC11'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC12
  keyword     'INPIC12'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC13
  keyword     'INPIC13'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC14
  keyword     'INPIC14'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC15
  keyword     'INPIC15'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC16
  keyword     'INPIC16'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC17
  keyword     'INPIC17'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC18
  keyword     'INPIC18'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC19
  keyword     'INPIC19'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 INPIC20
  keyword     'INPIC20'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Image to be added'
  help        'Name of the IMAGE structure containing the next 2-d 
              data array to be added'
3 XOFFSET
  keyword     'XOFFSET'
  type        '_INTEGER'
  vpath       'PROMPT'
  ppath       'CURRENT,DYNAMIC'
  prompt      'x offset of the array from the first'
  help        'Give the x offset in pixels of the current data array 
              from the first data array input'
3 YOFFSET
  keyword     'YOFFSET'
  type        '_INTEGER'
  vpath       'PROMPT'
  ppath       'CURRENT,DYNAMIC'
  prompt      'y offset of the array from the first'
  help        'Give the y offset in pixels of the current data array 
              from the first data array input'
3 OUTPIC
  keyword     'OUTPIC'
  type        'IMAGE'
  access      'WRITE'
  vpath       'PROMPT'
  association '->GLOBAL.DATA_ARRAY'
  prompt      'Mosaic image'
  help        'Name given to the IMAGE structure to hold the mosaic 
              data array'
3 OTITLE
  keyword     'OTITLE'
  type        '_CHAR'
  vpath       'DEFAULT'
  prompt      'Title for output image'
  default     'KAPPA - Mosaic'
  help        'Character string used as a title for the output IMAGE 
              structure.'
3 AVERAGE
  keyword     'AVERAGE'
  type        '_LOGICAL'
  access      'READ'
  vpath       'DEFAULT'
  prompt      'Are overlapped input pixels to be averaged in the 
              output array?'
  help        'Input pixels may be occupy the same position in the 
              output array. So output pixels can be averaged or 
              summed'
  default     YES
1 OVCLEAR
Clears an image-display overlay.

Usage:

   ovclear [device] [current]

Description:

   This application clears an overlay device, but without purging
   the graphics-database entries for the device.  Optionally, only
   the current picture is cleared.
2 Parameters
For information on individual parameters, select from the list below:
3 CURRENT
CURRENT = _LOGICAL (Read)
   If TRUE, then only the current picture is cleared. [FALSE]
3 DEVICE
DEVICE = DEVICE (Read)
   The graphics device to be cleared.  It must be in GNS classes
   IMAGE_OVERLAY or WINDOW_OVERLAY. [Current image-display-overlay
   device]
2 Examples
ovclear
   Clears the current image-overlay device.

ovclear current
   Clears the current picture on the current image-overlay device.

ovclear xoverlay
   Clears the xoverlay device.
2 Related_Applications
   KAPPA: GDCLEAR, OVSET.
2 Authors
MJC: Malcolm J. Currie  (STARLINK)
2 History
 1992 November 30 (MJC):
    Original version.
1 OVSET
Selects a current image-display overlay.

Usage:

   ovset device

Description:

   This application selects a current image-display overlay. This
   device will be used for all applications requiring an
   image-display overlay until changed explicitly.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   The image-display overlay to become the current image-display
   overlay device.  The device must be in GNS categories
   IMAGE_OVERLAY or WINDOW_OVERLAY.
2 Examples
ovset xov
   Makes the xov device the current image-display overlay.
2 Authors
MJC: Malcolm J. Currie  (STARLINK)
2 History
 1991 June 27 (MJC):
    Original version.

 1992 June 16 (MJC):
    Made to work with WINDOW_OVERLAY class.  The restriction on the
    number of colour indices has therefore been been relaxed.
1 QUILT
    Generates a mosaic from equally sized 2-d data arrays,
    optionally specified from an ASCII file
 
   This routine provides a more-sophisticated version of the MOSAIC
   application for combining many 2-d data arrays into one large
   output data array. All the data arrays are stored in IMAGE
   structures.  The pixels in overlapping regions may be averaged or
   summed.
 
   The names of IMAGE structures to be concatenated and their
   respective offsets of their data arrays from a central
   data array can be input either one by one from the interface, or
   all at once from a free-format file.  The format of the file is
   as follows:
 
      Mosaic title                        ! header
      central_image                       ! name of central IMAGE
      125                                 ! total no. frames
      345  229                            ! maximum x-y offsets
      -356  -232                          ! minimum x-y offsets
      image_2                             ! subsequent IMAGE and
      35  34                              ! its x-y offsets
      image_3
      36  -33
      .
      .
      .
      .
 
   Only like-sized data arrays may be input. The reason for this is
   that it is difficult to work out how big the output data array
   needs to be until all the input data arrays and their offsets have
   been read in. By confining the data arrays to be the same size,
   only the maximum and minimum x and y offsets from the central data
   array need be input by the user, then the output image size can be
   worked out from these numbers along with the size of the central
   data array.
 
   Bad pixels are processed by the magic-value method.
2 AUTHORS
   Mark McCaughrean UoE ( REVA::MJM )
   Malcolm J. Currie STARLINK (RAL::CUR)
2 BUGS
   None known.
2 DEFICIENCIES
   Works with like-sized images only and uses Fortran i/o for getting
   stuff from a file. Also, SUBPAR_ calls are used in some of the
   subroutines to associate a string from the file with an HDS
   structure.
2 HISTORY
   29-12-1986 : First implementation (from MOSAIC) (REVA::MJM)
   1988 May 29: KAPPA version, using magic-value bad pixels only
                (RAL::CUR).
   1989 Jun 13: Allow for processing primitive NDFs (RAL::CUR)
   1989 Aug  7: Passed array dimensions as separate variables
                to MOSCAD, MOSCDV and ZERO2D (RAL::CUR).
   1989 Dec 21: Workspace managed by AIF_TEMP (RAL::CUR).
   1991 Oct 25: Propagates UNITS, LABEL, and HISTORY (RAL::CUR).
   1992 Feb 26: Limited processing of simple NDFs (RAL::CUR).
   1992 Mar  3: Replaced AIF parameter-system calls by the extended
                PAR library (RAL::CUR).
2 PARAMETERS
   WHERE  =  CHAR( READ )
       Whether input comes from an ASCII 'File' or from the
         'Interface'.
   FNAME  =  CHAR( READ )
       Name of the ASCII file holding the input information to define
         the mosaic.
   NUMBER  =  INTEGER( READ )
       Number of data arrays to form the mosaic.
   INPICI  =  IMAGE( READ )
       IMAGE structure containing the central data array (offset 0,0)
   MAXX  =  INTEGER( READ )
       Maximum x offset of any data array from the central data array
         (must be >= 0) (Interface mode)
   MAXY  =  INTEGER( READ )
       Maximum y offset of any data array from the central data array
         (must be >= 0) (Interface mode)
   MINX  =  INTEGER( READ )
       Minimum x offset of any data array from the central data array
         (must be =< 0) (Interface mode)
   MINY  =  INTEGER( READ )
       Minimum y offset of any data array from the central data array
         (must be =< 0) (Interface mode)
   AVERAGE  = LOGICAL( READ )
       If true overlap regions are averaged, alternatively, they are
         summed.
   OUTPIC  =  IMAGE( WRITE )
       Output IMAGE structure.
   OTITLE  =  CHAR( READ )
       Title string for output IMAGE structure.
   CURPIC  =  IMAGE( READ )
       IMAGE containing the current data array being concatenated to
         the mosaic.
   OFFSETX  =  INTEGER( READ )
       x offset of current data array from the central one (Interface
         mode).
   OFFSETY  =  INTEGER( READ )
       y offset of current data array from the central one (Interface
         mode).
3 WHERE
  keyword     'WHERE'
  type        'LITERAL'
  vpath       'PROMPT'
  ppath       'CURRENT,DEFAULT'
  prompt      'Input source'
  default     'File'
  help        'Choose File (ASCII file) or Interface as the source of
              frames and offsets.'
3 FNAME
  keyword     'FNAME'
  type        'FILENAME'
  access      'READ'
  vpath       'PROMPT'
  ppath       'CURRENT'
  prompt      'Source file name'
  help        'Name of ASCII file holding mosaic information (header, 
              number of arrays, max-min offsets, names and offsets).'
3 NUMBER
  keyword     'NUMBER'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Number of data arrays'
  help        'Give total number of 2-d data arrays to form a mosaic, 
              including the central one.'
3 INPICI
  keyword     'INPICI'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  ppath       'GLOBAL'
  association '<-GLOBAL.DATA_ARRAY'
  prompt      'Central image'
  help        'Name of IMAGE structure containing the central 2-d 
              data array to be added.'
3 MAXX
  keyword     'MAXX'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  ppath       'DYNAMIC'
  prompt      'Maximum x offset'
  help        'Give the maximum x offset of any data array (including 
              the central one).'
3 MAXY
  keyword     'MAXY'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  ppath       'DYNAMIC'
  prompt      'Maximum y offset'
  help        'Give the maximum y offset of any data array (including 
              the central one).'
3 MINX
  keyword     'MINX'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  ppath       'DYNAMIC'
  prompt      'Minimum x offset'
  help        'Give the minimum x offset of any data array (including 
              the central one).'
3 MINY
  keyword     'MINY'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  ppath       'DYNAMIC'
  prompt      'Minimum y offset'
  help        'Give the minimum y offset of any data array (including 
              the central one).'
3 AVERAGE
  keyword     'AVERAGE'
  type        '_LOGICAL'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Are overlapped input pixels to be averaged in the 
              output array?'
  help        'Input pixels may be occupy the same position in the 
              output array. So output pixels can be averaged or 
              summed.'
  default     YES
3 OUTPIC
  keyword     'OUTPIC'
  type        'IMAGE'
  access      'WRITE'
  vpath       'PROMPT'
  association '->GLOBAL.DATA_ARRAY'
  prompt      'Output mosaic image'
  help        'Name given to the IMAGE structure to hold the mosaic 
              data array.'
3 OTITLE
  keyword     'OTITLE'
  type        '_CHAR'
  vpath       'DEFAULT'
  prompt      'Title for output image'
  default     'KAPPA - Quilt'
  help        'Character string used as a title for the output IMAGE 
              structure.'
3 CURPIC
  keyword     'CURPIC'
  type        'IMAGE'
  access      'READ'
  vpath       'PROMPT'
  prompt      'Next Image'
  help        'Give the name of the current IMAGE structure 
              containing the 2-d data array to be part of the
              mosaic.'
3 OFFSETX
  keyword     'OFFSETX'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  prompt      'x offset of the array from the first'
  help        'Give x offset in pixels of the current data array from 
              the central one.'
3 OFFSETY
  keyword     'OFFSETY'
  type        '_INTEGER'
  access      'READ'
  vpath       'PROMPT'
  prompt      'y offset of the array from the first'
  help        'Give y offset in pixels of the current data array from 
              the central one.'

1 SNAPSHOT
Dumps an image-display memory to a graphics hardcopy and
optionally to an NDF.

Usage:

   snapshot odevice [out] [whole] [scale] [negativ] [title] [planes]

Description:

   This routine captures the data in the memory of an image-display
   device, and writes these data to a different GKS device.  For
   example, the contents of an X-windows memory might be captured and
   sent to a PostScript laser printer.

   Various options are available:
      o you may choose to capture a whole or part of what is visible
        on the screen, or the entire contents of the memory.  For the
        former you adjust a rubber-band region until the desired
        area is enclosed. Instructions for controlling the
        rubber-band are given at run time.
      o A title may be included in the output.
      o The array may be output to an NDF.
2 Parameters
For information on individual parameters, select from the list below:
3 DEVICE
DEVICE = DEVICE (Read)
   Input image-display device.  [Current image-display device]
3 NEGATIVE
NEGATIVE = _LOGICAL (Read)
   If TRUE, the output hardcopy is a negative version of what is
   stored in the image display.  On some output devices a
   constant dark background can give a non-uniform result, and
   so a negative representation is the default. [TRUE]
3 ODEVICE
ODEVICE = DEVICE (Read)
   Name of the output device.  The suggested default is the
   graphics device last used in SNAPSHOT, and if there is not one,
   the suggested default is the global current graphics device.
   The device must be in the GNS category MATRIX_PRINTER, and
   have at least 24 greyscale intensities.
3 OUT
OUT = NDF (Write)
   Name given to the output NDF data structure used to store the
   contents of the image-display memory.  If it is null (!) no
   NDF will be created. [!]
3 PLANES
PLANES() = _INTEGER (Read)
   The numbers of the image memory planes not be output.  All
   unspecified planes become visible.  If PLANES is null (!), all
   memory planes will be used to form the snapshot.  The base
   memory is 0 and overlays are numbered consecutively from 1.
   The value must be between 0 and the number of image memories
   minus 1.  For an Ikon the only overlay plane is 1.  [!]
3 SCALE
SCALE = _REAL (Read)
   Scale factor for output.  Unity gives the largest possible
   output, but it takes longest to compute and print (goes as the
   square of the scale factor).  On the other hand unity does
   provide maximum resolution. SCALE must be between 0 and 1.
   [0.707]
3 TITLE
TITLE = LITERAL (Read)
   Title of the plot and the output NDF.  There is only space on
   the plot for about 25 characters in the title.  If it is null
   (!) no title will be plotted, and the title in the output NDF
   becomes "KAPPA - Snapshot". [!]
3 WHOLE
WHOLE = _LOGICAL (Read)
   If TRUE, the whole image-display memory is recorded, otherwise
   a selected region of what is visible on the screen is plotted.
   Dumping the whole memory can require considerable disc space
   for work arrays and the output NDF. [FALSE]
2 Examples
snapshot whole odevice=canon_l
   This will dump the whole of the current image display's
   memories to the canon_l device.  The plot will occupy half
   of the maximum area available on the device, i.e. half of
   root 2 magnification.

snapshot scale=1.0 \
   This will capture a whole or part of what is visible on the
   screen of the current image display, and dump it to the current
   snapshot device at the largest magnification.

snapshot postscript views device=xw whole
   This dumps the whole of the xw device's memories to the
   postscript device, and also to a NDF called views.  The
   magnification is a half of root 2.

snapshot ps_l device=xw whole planes=0 title="Hardcopy Base"
   This dumps the whole of the xw device's base memory to the
   ps_l device.  The plot is entitled "Hardcopy Base".  The
   entire output plot occupies half of the maximum area available
   on the device.
2 Notes
-  The whole of the screen and the whole of the memory may be
different, for example, the image may have been zoomed or panned.

-  Files are not spooled to laserprinters.  They must be printed
outside this application.
2 Related_Applications
   KAPPA: DISPLAY.
2 Authors
JM: Jo Murray (STARLINK)

MJC: Malcolm J. Currie (STARLINK)
2 History
 August 1989 (JM):
    Original version.

 March  1990 (JM):
    Option added to write snapshot array to an NDF.

 1990 May 2 (MJC):
    Fixed bugs in obtaining depth capability, obtaining a null
    title and ordering of closedown operations, corrected and
    expanded the ADAM Parameters section, added a default title
    for the output NDF and tidied.

 1991 March 18 (MJC):
    Region of interest added to obtain subsets.

 1991 July 31 (MJC):
    No longer redefines colours of SGS pens to predefined state if
    workstation has dynamic colour representation, now there is
    palette control.

 1992 March 26 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 October 12 (MJC):
    Added calls to make the memories visible on the Ikon.  To
    enable planes not to be output, a new parameter, PLANES, has
    been added.
2 Implementation_Status
   No origin information is passed to the output NDF.
1 TURBOCONT
Contours a 2-d NDF quickly.

Usage:

   turbocont ndf [comp] mode ncont [key] [device]
      { firstcnt=? stepcnt=?
      { heights=?
      { percentiles=?
      mode

Description:

   This application draws a contour plot of a 2-dimensional NDF on
   the current graphics device via an efficient algorithm.  The
   image may be part or whole of the data array, but also the
   variance or quality can be shown.  The plot is situated within
   the current graphics-database picture.

   The contour plot resides within optional, annotated and enumerated
   axes.  An optional, but recommended, key may be drawn to the
   right of the contour plot.  It reports the NDF's units if there
   are any, and only contour heights actually plotted are included.
   There are seven methods for selecting contours.
2 Parameters
For information on individual parameters, select from the list below:
3 ABSLAB
ABSLAB  =  LITERAL (Read)
   Label for the plot abscissa, in which NCAR fancy founts may be
   embedded when FONT = "NCAR".  If axis information is present
   the suggested default is the NDF's axis label followed by the
   units, in parentheses.  If an error occurs obtaining the label
   the suggested default is "X". []
3 ANNOTA
ANNOTA = _LOGICAL (Read)
   If TRUE the contour lines will be annotated with a contour
   number corresponding to the key entry.  It is ignored and there
   are no annotations when KEY = FALSE.  [FALSE]
3 AXES
AXES = _LOGICAL (Read)
   TRUE if labelled and annotated axes are to be drawn around the
   contour plot.  The annotations are either the data
   co-ordinates from the NDF axis components, provided these are
   present and linear and COSYS = "Data"; otherwise pixel
   co-ordinates are used.  [TRUE]
3 BORDER
BORDER = _LOGICAL (Read)
   BORDER is TRUE if a box is to be drawn about the contour plot.
   This is only accessed when there are no axes required. [TRUE]
3 CLEAR
CLEAR = _LOGICAL (Read)
   TRUE if the graphics device is to be cleared before display
   of the array. [TRUE]
3 COMP
COMP = LITERAL (Read)
   The NDF component to be contoured.  It may be "Data",
   "Quality", "Variance", or "Error" (where "Error" is the
   alternative to "Variance" and causes the square root of the
   variance values to be taken before plotting contours).  If
   "Quality" is specified, then the quality values are treated as
   numerical values (in the range 0 to 255). ["Data"]
3 CONCOL
CONCOL = LITERAL (Read)
   The colour of the contour lines on devices that support colour.
   The options are described below.

     "MAX"          - The maximum colour index in the image
                      display colour lookup table.
     "MIN"          - The minimum (non-reserved) colour index in
                      the image-display colour lookup table.
     An integer     - The actual colour index.  It is constrained
                      between 0 and the maximum colour index
                      available on the device.
     A named colour - Uses the named colour from the palette, and
                      if it is not present, the nearest colour
                      from the palette is selected.

   If the colour is to remain unaltered as the lookup table is
   manipulated choose an integer between 0 and 15, or a named
   colour.  This parameter will be ignored if PENROT = TRUE.
   [The current value, but equals "1" (the foreground colour) if
   there is no current value.]
3 COSYS
COSYS = LITERAL (Read)
   The co-ordinate system to be used.  This can be either "World"
   or "Data".  "World" makes pixel co-ordinates to appear on axes.
   If COSYS = "Data" the NDF's axis information is used to
   annotate axes.  [Current co-ordinate system]
3 DASHED
DASHED = _REAL (Read)
   The height below which the contours will be drawn with dashed
   lines.  A null value (!) means all contours are drawn with
   solid lines.  This facility is only available when ANNOTA =
   FALSE. [!]
3 DEVICE
DEVICE = DEVICE (Read)
   The plotting device. [Current image-display device]
3 FILL
FILL = _LOGICAL (Read)
   The contour plot normally has square pixels, in other words
   a length along each axis corresponds to the same number of
   pixels.  However, for images with markedly different
   dimensions this default behaviour may not be suitable or give
   the clearest plot.  When FILL is TRUE, the square-pixel
   constraint is relaxed and the contour plot is the largest
   possible within the current picture.  When FILL is FALSE, the
   pixels are square.  The suggested default is the current value.
   [FALSE]
3 FIRSTCNT
FIRSTCNT = _REAL (Read)
   Height of the first contour (Linear and Magnitude modes).
   The suggested value is the current value.
3 FONT
FONT = LITERAL (Read)
   The fount to be used for the line graphics.  It can be either
   "NCAR" for the NCAR fancy characters and "GKS" for the standard
   GKS san-serif fount.  The former is intended for hardcopy
   publication-quality plots, since it is relatively slow; the
   latter is intended for normal interactive graphics requiring
   rapid plotting, and it is clearer on small plots.  The
   suggested default is the current value. ["GKS"]
3 HEIGHTS
HEIGHTS() = _REAL (Read)
   Contour levels (Free mode).  The suggested default is the
   current value.
3 KEY
KEY = _LOGICAL (Read)
   When KEY is TRUE, a key of the contour level versus pixel
   value is to be produced. [TRUE]
3 LABELFREQ
LABELFREQ = _INTEGER (Read)
   The frequency with which contour levels are annotated.  1
   means every level will be labelled.  This may be excessive in
   plots where the contours are closely packed.  This parameter
   is ignored unless contour annotation has been selected.  It
   must be between one and the number of contour heights. [1]
3 MAJTIC
MAJTIC( 2 ) = _REAL (Read)
   The parameter controlling the numbers of major tick marks
   for the x and y axes.  (Number used is between MAJTIC+2 and
   5*MAJTIC/2+4.) [3.,3.]
3 MAXRES
MAXRES = _LOGICAL (Read)
   If TRUE the contours are interpolated to the resolution of the
   plotting device, i.e. provides sub-pixel resolution, otherwise
   straight-line segments at pixel resolution are drawn.  The
   latter does not give smooth contours, but this makes the
   processing much faster.  The former draws smoother contours to
   the resolution of the graphics workstation, but they still
   have vertices.  If you require smooth well-rounded contours try
   the slower CONTOUR. [FALSE]
3 MINTIC
MINTIC( 2 ) = _REAL (Read)
   The number of minor tick marks between each major tick mark
   for the x and y axes.  A negative value forces the graphics
   package to compute appropriate values. [-1.,-1.]
3 MODE
MODE = LITERAL (Read)
   The method used to select the contour levels.  The options are
   described below.

     "Area"        - The contours enclose areas of the array for
                     which the equivalent radius increases by
                     equal increments.  You specify the number of
                     levels.
     "Automatic"   - The contour levels are equally spaced between
                     the maximum and minimum pixel values in the
                     array.  You supply the number of contour
                     levels.
     "Equalised"   - You define the number of equally spaced
                     percentiles.
     "Free"        - You specify a series of contour values
                     explicitly.
     "Linear"      - You define the number of contours, the start
                     contour level and linear step between
                     contours.
     "Magnitude"   - You define the number of contours, the start
                     contour level and step between contours.  The
                     step size is in magnitudes so the nth contour
                     is dex(-0.4*(n-1)*step) times the start
                     contour level.
     "Percentiles" - You specify a series of percentiles.

   The suggested default is the current value, which is initially
   "Free".
3 NCONT
NCONT = _INTEGER (Read)
   The number of contours required (all modes except Free and
   Percentiles).  It must be between 1 and 50.  If the number is
   large, the plot may be cluttered and take longer to produce.
   6, the initial suggested default, gives reasonable results.
   The current value becomes the suggested default.
3 NDF
NDF = NDF (Read)
   NDF structure containing the 2-dimensional image to be
   contoured.
3 NOISY
NOISY = _LOGICAL (Read)
   If TRUE the contour lines will alternately be annotated with
   a contour number corresponding to the key entry, but at
   twice the frequency.  It is ignored unless annotated contours
   have been selected. [FALSE]
3 ORDLAB
ORDLAB  =  LITERAL (Read)
   Label for the plot ordinate, in which NCAR fancy founts may be
   embedded when FONT = "NCAR".  If axis information is present
   the suggested default is the NDF's axis label followed by the
   units, in parentheses.  If an error occurs obtaining the label
   the suggested default is "Y". []
3 OUTTIC
OUTTIC = _LOGICAL (Read)
   TRUE if the axis tick marks are to appear on the outside of
   the axes instead of inside.  By default, the tick marks are
   drawn outside the contouring region to eliminate
   intersections of ticks with the contours. [TRUE]
3 PENROT
PENROT = _LOGICAL (Read)
   If TRUE, the plotting pens are cycled through the contours to
   aid identification of the contour heights.  It is ignored
   when annotation is selected. [FALSE]
3 PERCENTILES
PERCENTILES() = _REAL (Read)
   Contour levels given as percentiles.  The values must lie
   between 0.0 and 100.0. (Percentiles mode).  The suggested
   default is the current value.
3 PLTITL
PLTITL = LITERAL (Read)
   The title of the plot.  Up to about 40 characters can be
   accommodated, and NCAR fancy founts may be embedded when FONT =
   "NCAR".  If an error occurs obtaining the title, it is
   defaulted to "Contour plot".  [The NDF title]
3 PXSIZE
PXSIZE = _REAL (Read)
   The length (x axis) of the plot in metres.  There is an upper
   limit given by the x size of the current picture. [Maximum that
   can fit in the current picture whilst preserving square pixels]
3 PYSIZE
PYSIZE = _REAL (Read)
   The length (y axis) of the plot in metres.  There is an upper
   limit given by the y size of the current picture. [Maximum that
   can fit in the current picture whilst preserving square pixels]
3 RESOLUTION
RESOLUTION = _REAL (Read)
   The resolution factor.  The actual plotting resolution is this
   times the x and y theoretical resolutions in world
   co-ordinates.  In GKS, whether or not a given "lamp" is
   illuminated or pen position is marked with ink cannot be
   determined, so a factor of unity is too small for the most
   efficient processing.  It must lie between 2.0 and 10.0. [2.0]
3 STEPCNT
STEPCNT = _REAL (Read)
   Separation between contour levels, linear for Linear mode
   and in magnitudes for Magnitude mode.  The suggested value is
   the current value.
3 THICK
THICK = _REAL (Read)
   The thickness of the lines and NCAR-fount characters in the
   plot, where 1.0 is the normal thickness.  Currently, this is
   only available on a few devices.  It must take a value in the
   range 0.5--10.0.  [1.0]
2 Examples
turbocont myfile d \
   Contours the data array in the NDF called myfile on the current
   graphics device.  All other settings are defaulted, so for
   example the current method for determining heights is used, and
   a key is plotted.

turbocont taurus1(100:199,150:269,4) \
   Contours a 2-dimensional portion of current array component in
   the NDF cube called taurus1 on the current graphics device.
   The portion extends from pixel (100,150,4) to pixel
   (199,269,4).  All other settings are defaulted, so for example
   coarse contours are drawn, using the current mode for
   determining heights, and a key is plotted.

turbocont ndf=ngc6872 mode=au ncont=5 device=ps_l concol=white
   Contours the data array in the NDF called ngc6872 on the
   ps_l graphics device.  Five equally spaced contours between
   the maximum and minimum data values are drawn in white.  The
   NDF's title adorns the plot.  A key is plotted.

turbocont ngc6872 mode=au ncont=5 annota labelfreq=2 cosys=w

device=ps_l concol=white
   As above.  In addition the contours are annotated at
   alternate heights.  The axes are annotated with pixel
   co-ordinates.

turbocont ngc6872 mode=li firstcnt=10 stepcnt=2 ncont=4 noaxes
   Contours the data array in the NDF called ngc6872 on the
   current graphics device.  Four contours at heights 10, 12, 14,
   and 16 are drawn.  A key is plotted, but no axes surround the
   contour plot.

turbocont ss443 mode=pe percentiles=[80,90,95,98,99,99.9] annota
   Contours the data array in the NDF called ss443 on the
   current graphics device.  Annotated contours at heights
   corresponding to the 80, 90, 95, 98, 99, and 99.9 percentiles
   are drawn.  A key is plotted.

turbocont mode=eq ncont=5 dashed=0 pencol=red ndf=skyflux
   Contours the data array in the NDF called skyflux on the
   current graphics device.  Contours at heights corresponding to
   the 10, 30, 50, 70 and 90 percentiles are drawn in red.  Those
   contours whose values are negative will appear as dashed
   lines.  A key is plotted.

turbocont comp=d nokey penrot \
   Contours the portion of the data array in the current NDF on
   the current graphics device using the current method for height
   selection.  The NDF's title adorns the plot.  No key is drawn.
   The appearance of the contours cycles every third contour.

turbocont comp=v mode=fr heights=[10,20,40,80] title=Variance
   Contours the variance array in the current NDF on the
   current graphics device.  Contours at 10, 20, 40 and 80 are
   drawn.  "Variance" is the title of the plot.
2 Notes
-  The application stores a number of pictures in the graphics
database in the following order: a FRAME of the specified size
containing the title, annotated axes, contours and key; a DATA
picture which is stored with world co-ordinates in units of data
pixels; and a KEY picture to store the key if present.  The DATA
picture also may have double-precision data co-ordinates derived
from the NDF axis components provided these are linear and
different from pixel co-ordinates; the data co-ordinates are
stored via a linear transformation.  The NDF associated with the
plot is stored by reference with the DATA picture.  On exit the
current database picture for the chosen device reverts to the
input picture.

-  There are some options for setting the characteristics of the
contour lines.  By default, solid lines are drawn with the same
colour as the axes and key, namely the foreground colour.  The
colour will depend on the graphics device chosen, but it is often
black for printers or white for terminals.  The alternatives to
override this default behaviour are listed below.

   1. Set a colour for all contours using parameter CONCOL.
   2. Request dashed contours below some threshold given by
      parameter DASHED and solid lines for other heights.  All
      contours have either the foreground colour or that
      prescribed by parameter CONCOL.
   3. Cycle the pens modulo 3 for each contour height actually
      plotted by setting PENROT = TRUE.  The characteristics of
      the second and third line styles will depend on the chosen
      graphics device.  An image display or pen plotter will draw
      coloured lines using palette entries 1 to 3; whereas a
      window overlay, or monochrome laser printer or terminal
      will draw a variety of dashed or thicker lines.
   4. Combine options 2 and 3.  However, palette colours 1 to 3
      will always be used and CONCOL ignored.  The contours below
      the threshold continue the cycle through the three colours.
      There may be some confusion on devices that already use
      dashed lines, so this is only suitable for devices
      supporting at least three colours simultaneously.
   5. Annotate the contours using the number of the contour height
      corresponding to the key entries rather than the values
      themselves.  (Set parameter ANNOTA = TRUE.)  The frequency
      of labelling may be defined (LABELFREQ).  The key option
      must be chosen (KEY = TRUE) in conjunction with annotated
      contours.  Annotation is not recommended should the data
      array have a large number of bad pixels, or if the contours
      are closely packed.  There is an additional parameter
      (NOISY) to select double annotations for short or noisy
      contours in option 2.

Annotation takes precedence over pen rotation, which in turn
overrides colour control through CONCOL.
2 Related_Applications
   KAPPA: CONTOUR; Figaro: ICONT, SPECCONT.
2 Authors
MJC: Malcolm J. Currie  STARLINK
2 History
 1989 Aug 25 (MJC):
    Original based on CONTOUR.

 1989 Oct 17 (MJC):
    Revised the world co-ordinates of the contour picture to the
    Starlink standard instead of pixel number, and corrected the
    application name in database pictures and error messages.

 1989 Oct 27 (MJC):
    Improved positioning of the top of the key.

 1989 Dec 21 (MJC):
    Workspace managed by AIF_TEMP.

 1990 Jan 9  (MJC):
    Corrected SGS status.

 1990 Mar 30 (MJC):
    Added axis annotation parameters and reports the chosen
    contour heights to the user.

 1990 May 22 (MJC):
    Corrected aspect ratio of the contour region to give the same
    scale factor in x and y.

 1990 Aug 29 (MJC):
    NDF version supporting variance and quality, bad-pixel checks,
    units and title to annotate the plot.

 1991 February 7 (MJC):
    Added NDF reference into the database, AGI context control and
    removed fuzzy-picture fudge.

 1991 April 9 (MJC):
    Added data co-ordinate transformation and optional axes.
    Re-organised world co-ordinates so that CNTTUR no longer
    handles the full array, merely the section.

 1991 May 1 (MJC):
    Renamed IN parameter to NDF for consistency.

 1991 July 31 (MJC):
    No longer redefines colours of SGS pens to predefined state if
    workstation has dynamic colour representation, now there is
    palette control.

 1991 August 20 (MJC):
    Added FONT parameter.

 1991 October 22 (MJC):
    Fixed a bug so that when annotating and using data co-ordinates
    the contours now appear at the correct locations.

 1992 March 3 (MJC):
    Replaced AIF parameter-system calls by the extended PAR
    library.

 1992 April 4 (MJC):
    Made to handle significant dimensions for user-defined
    sections.

 1992 November 30 (MJC):
    Does not use non-monotonic axis centres.

 1992 December 17 (MJC):
    Added the FILL option.

 1993 January 19 (MJC):
    Added the BORDER option.

 1995 October 19 (MJC):
    Supports Error component.

 1996 August 29 (MJC):
    Increased tessellation cell to 256 pixels square.

 1997 May 12 (MJC):
    Added percentiles and equalised options for the MODE.  New
    parameter PERCENTILES.  Increased tessellation cell to 512
    pixels square.

 1997 May 19 (MJC):
    Added CONCOL and DASHED parameters, and further examples.
    Improved efficiency by using PSX to obtain workspace.
    Increased the maximum thickness from 5 to 10.  Rewrote the
    Notes on contour colour and line style.
2 Implementation_Status
   -  Only real data can be processed directly.  Other non-complex
   numeric data types will undergo a type conversion before the
   contour plot is drawn.

   -  Bad pixels and automatic quality masking are supported.
