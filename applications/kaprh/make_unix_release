#!/bin/tcsh
# Name:
#    make_unix_release
#
# Purpose:
#    Do unix specific bits required to make a release of kaprh.
#
# Type of Module:
#    Shell script
#
# Description:
#    This command creates a compressed tar file containing a release of the 
#    kaprh package. It is called from within the make_release script. 
#    
# Invocation:
#    make_unix_release
#
# Authors:
#    DSB: David S. Berry (STARLINK)
#    {enter_new_authors_here}
#
# History:
#    22-MAY-2001 (DSB):
#       Original version.
#    {enter_changes_here}
#
# Bugs:
#    {note_any_bugs_here}
#-

#  Ensure the sdt grp command is available.
      source $SDT_DIR/startup.csh

#  Store the name of the release directory, and go there.
      set REL_DIR = ${TEMPDIR}/kaprh_${SYSTEM}
      cd ${REL_DIR}
      echo "Moved to $PWD"

#  Expand any generic source files.
      foreach file (`grp generic_sources`)
         echo "Expanding generic source file $file"
         generic -t n -s ${file}
      end

#  Rename unsigned data type files.
      foreach n (*W.f)
         echo "Renaming expanded file file $n"
         mv $n `basename $n W.f`uw.f
      end
      foreach n (*B.f)
         echo "Renaming expanded file file $n"
         mv $n `basename $n B.f`ub.f
      end

#  Check for direct calls to NDF parameter routines. These should usually
#  be replaced by equivalent LPG routines (to allow multiple invocations to 
#  process groups of NDFs).
      set n = `grep -il "PAR_STATE\|NDF_ASSOC\|NDF_PROP\|NDF_CREAT\|NDF_CREP" *.f`
      if( "$n" != "" ) then
         set ans = `confirm "The following files contain references to NDF\nparameter routines or to PAR_STATE. May be these should be\nreplaced by equivalent LPG routines... Continue?\n\n$n"`
         if( "$ans" == "n" || "$ans" == "N" ) then
            exit
         endif
      endif

#  Copy the hypertext docs to the release directory.
      echo "Copying the hypertext docs to the release directory."
      cp ${KAPRH_DEV}/../sun239.htx_tar ${REL_DIR}

#  Ensure all files are accessable.
      echo "Setting protection for all files"
      chmod 777 *

#  Edit in the current package version number into any required source files.
      echo "Editing the current package version number into source files"
      set vers = `grep "PKG_VERS = " makefile`
      if ( "$vers" == "" ) then
         echo "Can't get package version number from makefile."
         exit
      endif

      foreach file (kaprh_mon.f kaprh.ifd)
         sed -e "s#PKG_VERS#$vers[3]#g" $file > temp
         mv -f temp $file
      end

#  Generate the ifl files, and the icl and csh start-up scripts. 
      echo "Generating ifl files, etc form the ifd file"
      ifd2star kaprh

#  Do any necessary post processing of the generated files to overcome 
#  deficiencies in ifd2star
      sed -e 's#prefix=""#prefix=\\"\\"#g' kaprh.csh > temp
      mv temp kaprh.csh

#  Generate the IRAF files.
      echo "Generating iraf files"
      ifd2iraf kaprh

#  Create the on-line help file.
      foreach file (`grp kaprh_ifls`)
         set ffile = `basename $file .ifl`.f
         set hfile = `basename $file .ifl`.help
         prohlp in=$ffile out=$hfile
      end
      cat kaprh.star-hlp *.help > new.hlp
      mv new.hlp kaprh.hlp
      rm *.help kaprh.star-hlp

#  Generate the IRAF documentation.
      ifd_irafhlpgen kaprh

#  Remove entries from kaprh.men and kaprh.hd which do not relate to actions.
      $KAPRH_DEV/bin/mencheck.tcl
      $KAPRH_DEV/bin/hdcheck.tcl

#  Create a CL script which will create the help database on sa1.
      cat > temp.cl << FOO
set kaprh = /sa1/home/dsb/iraf/kaprh/
so
mkhelpdb kaprh\$root.hd helpdb.mip
lo
FOO

#  Create a tcsh script to set things up on sa1 and activate the CL script.
      cat > kapiraf << FOO2
#!/usr/local/bin/tcsh
cd iraf
rm -rf kaprh
mkdir kaprh
cd kaprh
ftp -v sl5 << FOO3
ascii
cd ${REL_DIR}
get root.hd
get _kaprh.hd
get kaprh.hd
get temp.cl
bye
FOO3
mv temp.cl ..
cd ..
cl < temp.cl
FOO2
      chmod u+x kapiraf

#  FTP this file to sa1.
      ftp -v sa1 << FOO4
ascii
put kapiraf
bye
FOO4
      rm kapiraf 

#  Ask the user to execute the script on sa1. Why wont rsh do this?
      alert "\nNow log into sa1 and do 'source kapiraf'\nPress OK when done ..."

#  Now FTP the helpdb.mip file back from sa1.
      ftp -v sa1 << FOO5
binary
cd iraf
get helpdb.mip
bye
FOO5
      rm temp.cl

#  Create each of the tar files. First do the system-independant ones
#  listed in group TAR_FILES_A...
      foreach file (`grp tar_files_a`)
         echo "Creating ${file}.tar"
         chmod 644 `grp ${file}`
         chmod 755 `find . -type d`
         tar -cvh -f ${TEMPDIR}/${file}.tar `grp ${file}`
         rm -f `grp ${file}`
         mv ${TEMPDIR}/${file}.tar ${REL_DIR}
      end

#  Make the ctg and lpg source tar files.
#      ${CTG_SYS}/dev/bin/make_source.csh
#      ${LPG_SYS}/dev/bin/make_source.csh

#  Tar up all the release files and then remove them.
      echo "Creating kaprh.tar"
      chmod 644 `grp unix_total`
      chmod 755 `find . -type d`
      chmod 755 mk
      tar -cvh -f ${TEMPDIR}/kaprh.tar `grp unix_total` 
      rm `grp unix_total` 
      mv ${TEMPDIR}/kaprh.tar ${REL_DIR}
      rm -rf doc kaprh.ifd

#  Compress it.
      echo "Compressing kaprh.tar"
      compress kaprh.tar

# Remove any spare .f files created by the expansion of generic source
# files but not included in the release. Also remove grp.make.
      rm -f *.f grp.make

      exit
