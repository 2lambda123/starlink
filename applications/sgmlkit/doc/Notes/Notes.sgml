<!doctype ssn public "-//Starlink//DTD Starlink SSN//EN" [
  <!entity bookmarks 'http://www.astro.gla.ac.uk/users/norman/bookmarks'>
  <!entity sun188.summary system "sun188.summary" subdoc>
  <!entity sl.stylesheet system '../../dsssl/sl/html/sl.dsl' subdoc>
  <!entity sl.lib.stylesheet system '../../dsssl/sl/lib/sllib.dsl' subdoc>
  <!entity sl.common.stylesheet system '../../dsssl/sl/common/slcommon.dsl' subdoc>
  <!entity % single.file 'ignore'>
  <![ %single.file; [
    <!entity % single.file.ref 'ignore'>
  ]]>
  <!entity % single.file.ref 'include'>
  <!entity % Feature.Routinelist 'include'>
]>

<title>Starlink SGML system

<author	email='norman@astro.gla.ac.uk'
	webpage='http://www.astro.gla.ac.uk/users/norman/'
	affiliation='University of Glasgow'
	id=ng
	>Norman Gray

<keyword>SGML
<keyword>DSSSL

<docnumber unassigned>

<history>
<version number=0 date="10-JAN-1999">Initial release
<distribution string='1' date="14-JAN-1999" versionid=initial author=ng
	>Initial draft version  
<distribution string='2' date="29-JAN-1999">Substantial
revisions, updating progress since the last release of this document,
and discussing next steps. 
<change date="30-JAN-1999" versionid=draft.r2 author=ng>Assorted rewrites.
<change date="09-FEB-1999" >Tweaks to bring it up to date, prior to
programmers' meeting.
</history>


<abstract>My notes on the current state of the Starlink DTD.  These
notes should be regarded as a draft, until this system is released as
a package.
</abstract>

<p>My notion
of the immediate point of this project is twofold: supplant 
the combination of LaTeX and Star2HTML for the production of current
Starlink documentation; and support the continued usefulness of the
current collection of legacy documents.  In this restricted form, it
is simply another way of doing what we can do at present.  However,
such a system would lay the foundation for the developments I sketch
out in <ref id=nextver>.

<![ %single.file.ref; [
<p>This document also exists as a <webref url='Notes.single.html'
	>single file</webref>, for easier printing.
]]>

<p>The source to this document is <webref url='Notes.sgml' >available</webref>.

<sect>Developments to date

<p>I've developed a <webref
url="http://www.astro.gla.ac.uk/users/norman/star/sgml/starlink.dtd"
>master modular DTD</webref>, which is invoked by specialised DTDs for
SUNs, SSNs and other Starlink document types.  It is able to describe
the overall structure of Starlink documents, plus intra- and
inter-document cross references, plus various details not yet fully
supported in the down-converter.  Adding further structure will be
relatively easy, and can be done incrementally, if we decide that the
current structure is broadly OK.

<p>The DTD which authors actually use is not this one, but one or
other small DTD which sets configuration parameters and includes this
master.

<p>The system now supports inter-document cross-references.  See <ref
id=docxref>. 

<p>I've produced a DSSSL stylesheet (ie, down-converter) for producing
HTML, drawing quite heavily on <webref
url="http://nwalsh.com/docbook/dsssl/index.html" >Norm Walsh's DocBook
stylesheets</webref>.

<p>I worked quite hard to understand HyTime (see <ref id=hytime>),
and to use it within the DTD.  The DTD isn't an elaborate HyTime
application, but the different types of links do have appropriate
HyTime declarations defining their respective functions.  There's a certain
documentation aspect to this, but the main effect is that if a
document conforming to this DTD were processed by a HyTime-aware
system, then that system would know what to do with these elements ("I
don't know what a P element is, but I see that REF is what this DTD
calls HyTime's CLINK element, and I know what to do with
that&ellip;.").  Jade, the DSSSL processor I'm using (see <ref
id=tools>), has only rather minor HyTime awareness, so that this work
does not pay off immediately, but is instead building in capabilities
for the future.

<p>I haven't yet produced a stylesheet for printed text.  This
shouldn't be a big task, since the hard bits of the DSSSL are quite
general things to do with sectioning or cross referencing.  Plus, the
HTML stylesheet has to deal with things like splitting the document
into separate HTML files, which aren't issues for the paper version.
I'd like to develop the HTML stylesheet quite a lot before adapting it
to a paper version.  

<p>There is an outstanding implementation decision to make here: I can
either produce a printed version using the standard DSSSL mechanism,
which is general but potentially clumsy, or else use DSSSL to emit
LaTeX.  The latter is more limited, but pushes the formatting to
LaTeX, which is more natural, where there is more expertise, and which
allows me better control.  I'm coming round to thinking this is a
better solution, but I haven't decided finally.

<p>There is a release of the system as it currently stands in <webref
url="http://www.astro.gla.ac.uk/users/norman/star/sgml/project/sgml-0.1.tar.gz"
>star-0.1.tar.gz</webref>.  This is a devlopers' release only -- the
structure and documentation are still rather haphazard.  This release
includes DTDs, DSSSL stylesheets, a Makefile template, and a perl
script for abstracting Star2HTML files.

<subsect id=docxref>Inter-document cross-references

<p>We can now link successfully to other documents, both documents
marked up using this DTD, and other documents, such as Star2HTML
documents, once they have been appropriately abstracted.

<p>The abstraction is done via a `DocumentSummary' DTD
(<code>dtd/summary-0.1.dtd</code>).  This is an `architecture' (see
<ref id=hytime>) which mirrors the structure of the General DTD, and
it is an instance of this architecture which is read in by the main
parse of a document, to obtain the information required for the cross
reference.  The script <code>lib/abstract-star2html.pl</code> takes a
Star2HTML document plus the HTX index corresponding to it (see
<docxref doc=sun188.summary loc="index_files">), and produces a
summary as an instance of the <code>documentsummary</code> DTD.  The
parsing here isn't perfect (it doesn't deal with markup in section
headings), but it should require only minimal editing.

<p>At present, such a summary is also generated for documents marked
up in the General DTD (see the target for <code>%.summary</code> in
<code>lib/Makefile</code>).  In future, it should be possible to have
this summary obtained on-the-fly, by asking the parser to extract the
DocumentSummary `architectural instance' from the target document.
This needs a DSSSL extension which already exists in beta.

<subsect>Including routine code documentation

<p>I've developed a `programcode' DTD, which will allow us to
incorporate code documentation directly from the Fortran, C, Perl
source code prologue.  As long as the code prologue is marked up
appropriately, the file can be regarded as an SGML source file, and
incorporated on those terms.  The markup uses SGML's minimisation
features extensively.  This makes it easy and unobtrusive to do, but
at the potential cost of being fiddly to recover from, if you get the
markup wrong -- the error messages which will result from errors will,
I'd guess, be rather difficult to relate to the error, unless you
understand a little about what's happening.

<sect>Next steps

<p>A first version of this system will require the following
developments.  These would satisfy the requirements of the restricted
version of this project, without being particularly exciting in
themselves.

<ul>
<li>Produce printable output, as well as HTML.  The format of this
output will include at least LaTeX, and possibly other formats as well.

<li>System-wide aspects: developing and maintaining a central database
of entities (ie, locating the text of the documents, and parts of
documents, parsed and cross-referenced by the down-conversion).  The
design of this is done, in one sense -- this is called `entity management' in
SGML terms -- but the implementation will probably need some careful
thought.  I expect it will draw on the design of HTX.

<li>Make some enhancements to the DTD, and support them in the
stylesheets.  These additions would include the following (asterisked
items are already in the DTD but not in the stylesheets): tables and
figures, versioning* and maths.  If there is time, we could include
support for (foot)notes*, indexing* and bibliographies*.

<li>There is some work to be done improving the usability of the HTML output,
putting in tweaks such as improving the decisions about when to
produce a new HTML page.  This, however, is work that be done almost
in passing, responding to suggestions.

<li>Packaging: user support in editors and documentation.

</ul>

<subsect>Outstanding tasks
<p>Specific tasks, with timings in weeks:
<ul>
<li>Integration of routinecode into documents (see <ref id=routinecode>) (1)
<li>Maths (1)
<li>Tables and figures (0.5)
<li>Print stylesheets (1.5)
<li>Indexes, notes, bibliographic support (0.5)
<li>Tidying code and documenting system (1.5)
</ul>

<subsubsect id=routinecode>Documenting code
<p>The DTD design part of this has been completed, and I now have a
DTD which documents routines, specialised to Fortran and DSSSL code.

<p>This is supported in a stylesheet, and I've gained experience of
actually <em/using/ the headers by (partially) documenting the DSSSL
stylesheet code this way.


<subsect id=nextver>For the future

<p>On top of the limited tasks for the immediate project is the much harder
task of finding an 
imaginative application for the technology we're suddenly expert in.
There are one or two <webref url="&bookmarks/lists-sgmlbooks.html"
>SGML books</webref> which give case-studies, which we should
investigate.  See <ref id=hytime> for a mention of the
<cite/HyTime Application Development Guide/.

<p>I suggest postponing the following tasks to a later version:

<ul>

<li>Produce XML versions of documents.  In once sense this is very
easy, since Jade can produce XML as easily as HTML, and it would be
simple to produce an XML version of the DTD.  However, there's
not a great deal of point in this, until we have a clear idea of how
we can best exploit XML.  This would involve finding out more about
<webref url="http://www.w3.org/Style/XSL/" >XSL</webref>, which is the
style language for XML, which allows a certain amount of
processing to be done on the client side.  I think there are very
exciting possibilities here, but they constitute a distinct project.

<li>Linking to source code.  Mark's Source Code Browser has shown the
possibilities here.  It might be relatively simple to specify the
integration of documentation and code (using HyTime, of course), and
with the experience gained from the cross-references it
might even be easy to implement it.  However, like the
XML version, I think this constitutes a separate mini-project.

<li>We should investigate new ways
of getting to the Starlink documents, using SGML-aware server 
software.  There will be several potential tools here -- a promising
one to investigate is <webref
url="http://info.ox.ac.uk/bnc/sara/" >SARA</webref>, though this might
be both specific to the BNC, and specific to its windows client.

</ul>

<sect>Background

<p>I have a collection of SGML materials in my <webref
url="&bookmarks/lists-sgml.html">list of bookmarks</webref>.  These
are fairly miscellaneous.  The central resource for SGML is the
SGML/XML Web Page at
<url>http://www.oasis-open.org/cover/sgml-xml.html</url>.  The
<code/comp.text.sgml/ Usenet group is very high quality.

<subsect>SGML 

<p>SGML is ISO 8879:1986.  There's no online access to ISO standards,
because the ISO subsidises its work from the sale of the standards
texts.  Texts of the HyTime and DSSSL standards <em>are</em> available
online, but only as late committee drafts.

<p>The <webref url="http://sable.ox.ac.uk/ota/teip3sg/" ><cite/Gentle
Introduction to SGML/</webref> from the TEI is a famously good
introduction to SGML.

<p><cite/The Concise SGML Companion/ is a paper book (with a
supporting page at <url>http://www.bradley.co.uk</url>).  It doesn't
look very pretty, but it <em/is/ concise and clear.  It has a brief
description of HyTime, but this is now rather out of date, as it
describes version 1.
The Bradley book gave me all the background, and its concision is
a great virtue, but it wimped out when I needed to find out about LPDs.

<p>Charles Goldfarb's <cite>The SGML Handbook</cite> (0-19-853737-9) is
60 pounds.  This is an annotation of the text of the Standard.  It's
very good, but rather heavy going.

<p>I think the Gentle Introduction, then Bradley, then Goldfarb, is a
suitable path for anyone rather techie, who needs to do more than the
basics.  Bradley's probably omissable if you're feeling strong, but the
size of Goldfarb makes it difficult to negotiate, so I've tended to use
Goldfarb to find out about something, but Bradley to refresh my memory
about it.  I <em>think</em> the conclusion of that is, if you're going to buy
just one of the books, it had probably better be Goldfarb.


<p>I have notes for a talk called <webref
url="http://www.astro.gla.ac.uk/users/norman/docs/beyond-html/"
><cite/SGML on the desktop/</webref>, which I at least think is quite
good.  It describes the components of an SGML system, and discusses
free and non-free SGML tools.

<subsect>DSSSL

<p>DSSSL is the down-conversion language used for formatting SGML
documents.  I have a collection of
<webref url="&bookmarks/lists-dsssl.html" >DSSSL links</webref>.  This
includes (a draft of) the text of the standard.

<p>The <webref
url="http://itrc.uwaterloo.ca/~papresco/dsssl/tutorial.html" >Paul
Prescod tutorial</webref> is very good.

<p>DSSSL is based on Scheme (a dialect of Lisp), and the <cite/Revised^5
Report on the Algorithmic Language Scheme/, at the <webref
url="http://www-swiss.ai.mit.edu/scheme-home.html" >Scheme home page</webref>,
is a good compact introduction.

<subsect>XML

<p>The <webref url="http://www.w3.org/TR/REC-xml" >XML spec</webref> is
now a W3C Recommendation.  The spec can be digested by itself, but
given an outline knowledge of SGML, it's most efficient just to
examine <webref url="http://www.w3.org/TR/NOTE-sgml-xml-971215" >W3C
Technical Note 15-December-1997</webref> (referred to in 
Appendix C of the XML spec), which is James Clark's discussion of the
differences between XML and SGML.

<p>The <webref url="http://www.ucc.ie/xml/" >XML FAQ</webref> is quite good.

<subsect id=tools>Tools

<p><webref url="http://www.jclark.com/jade/" >Jade</webref> is
<em/the/ DSSSL tool (there are others, but you pay an awful lot for
more than we need right now).  It's a DSSSL engine, which goes with
the SGML parser <webref url="http://www.jclark.com/sp/" >SP</webref>
from the same author.

<p>I haven't investigated XML tools in any detail.

<subsect id=hytime export>HyTime and architectures.

<p>HyTime depends on an extension to SGML, defined in the HyTime
standard, called `architectural forms'.  An architecture is a DTD
(they were at one time known as `meta-DTDs') for which a mapping
exists from the DTD a document is manifestly an instance of, to the
architectural DTD.  That is, a document is an instance of both its
declared DTD and the architectue.  For example, the Starlink General
DTD is declared as a client DTD of the DocumentSummary architecture
(<ref id=docxref>).  

<p>The HyTime standard defined the syntax and semantics of the HyTime
architecture, and the General DTD attaches itself to these semantics
by declaring itself to be a client DTD of (part of) the HyTime
architecture.

<p>I'd avoid getting into HyTime too much at this stage, but Isogen's
<webref url="http://www.isogen.com/papers/archintro.html"
><cite>Tutorial Introduction to SGML architectures</cite></webref> is
an excellent introduction to architectures in general, and hence
HyTime in particular.

<p>More generally, the <webref url='http://www.techno.com/hadg/html/'
><cite/HyTime Application Development Guide/</webref> is useful.  This
is rather hard going, but detailed and pretty clear, and the final
section describes the specification for a system for man-pages.  Note
that this refers to the <em/first/ version of the HyTime standard, so
it's valuable for ideas and some sort of motivation for HyTime, rather
than specific details.

<p>I have a collection of <webref url="&bookmarks/lists-hytime.html"
>HyTime links</webref>.

<appendices>
<routinelist>
<codecollection doc=sl.stylesheet>
<codecollection doc=sl.lib.stylesheet>
<codecollection doc=sl.common.stylesheet>
</routinelist>
