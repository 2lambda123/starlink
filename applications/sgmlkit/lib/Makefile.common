# Starlink SGML Common Makefile
#
# This is included within the makefiles used to process documents.
# For example, a document which included some maths might have a makefile
# as follows:
#
#    include $(STARLINK_SGML_DIR)/lib/Makefile.common
#    mydoc.html.stamp:       mydoc.sgml mydoc.imgeq.list.stamp
#    mydoc.imgeq.list.stamp: mydoc.sgml
#    mydoc.latex.stamp:      mydoc.sgml
#
# $Id$

LIBDIR=${STARLINK_SGML_DIR}/lib
DECL=${STARLINK_SGML_DIR}/dtd/starlink.decl
STYLESHEET=${STARLINK_SGML_DIR}/dsssl/sl
SGMLPARSE=nsgmls

JADE=jade
JADEFLAGS=
IMGEQ=$(LIBDIR)/img-eqlist.pl
PSTOPNM=$(LIBDIR)/pstopnm-s
DVI2BITMAP=dvi2bitmap

# The HTML stylesheet does not output the generated HTML to standard
# output, but instead generates a filename.  It needs to do this so
# that it can link back and forth between different generated files
# effectively.  At the bottom of each HTML page, furthermore, the
# stylesheet makes a link to a printable version of the page, again by
# generating the filename root.  To help you tie these names together,
# the stylesheet chucks out a single line of the form:
#
#  root:ext1 ext2 ...
#
# where `root' is the root of the filename which it has generated, and
# ext? are the extensions it has created links to in the page footer
# (in fact, as of March 1999, the stylesheet _doesn't_ generate these links,
# but it will as soon as I start generating something to link to!)
%.html.stamp: %.sgml
	$(JADE) -t sgml -iHTML.entities -iOnly.web $(JADEFLAGS) \
		-d $(STYLESHEET)/html/sl.dsl#html $< > $@

%.single.html: %.sgml
	$(JADE) -t sgml -isingle.file -iHTML.entities -iOnly.web \
		-V stream-output -V suppress-manifest $(JADEFLAGS) \
		-d $(STYLESHEET)/html/sl.dsl#html $< > $@

%.parse: %.sgml
	$(SGMLPARSE) -wall -ru $(DECL) $< >$@

%.summary: %.sgml
	 sgmlnorm -A documentsummary -d $< > $@

%.fot: %.sgml
	$(JADE) -t fot -d $(STYLESHEET)/html/sl.dsl $< >$@

# The target %.tth-maths.stamp is satisfied when the maths has been
# extracted from a document, and tth has been used to convert it to
# HTML.  Note that, although it's feasible, maths is _not_ routinely
# re-extracted by each run of the main stylesheet - the model is that
# the maths will be converted to HTML once, and then reused on
# subsequent production of the main document.  The justification for
# this is that, in the typical case, this system won't be used for
# drafting, but for generating a final document in one run.
%.tth-maths.stamp: %.sgml
	$(JADE) -t sgml -iOnly.web $(JADEFLAGS) \
		-d $(STYLESHEET)/html/slmaths.dsl#maths.main $< > $@
	ROOT=`awk -F: '{print $$1}' $@`; \
	$(MAKE) $$ROOT.tth-html

%.tth-html: %.tth-eqlist
	tth -r < $< > $@

%.imgeq.list.stamp: %.sgml
	# generate $$ROOT.imgeq.list
	$(JADE) -t sgml -iOnly.web $(JADEFLAGS) \
		-d $(STYLESHEET)/html/slmaths.dsl#maths.main $< \
		> tmp-make.stamp
	ROOT=`awk -F: '{print $$1}' tmp-make.stamp`	; \
	$(IMGEQ) $$ROOT.imgeq.list 			; \
	$(MAKE)  $$ROOT.imgeq.d2b.stamp
	mv tmp-make.stamp $@	# ...only when successful

#%.imgeq.sgml %.imgeq.tex: %.imgeq.list.stamp
#	ROOT=`awk -F: '{print $$1}' $<`; \
#	$(IMGEQ) $$ROOT.imgeq.list

### Do not invoke the %.imgeq.ps.stamp target directly (in another makefile)
### It's here to be invoked in a recursive make by the %.imgeq.list.stamp
### rule.  Use the %.imgeq.list.stamp target instead.
# processing chain is something like
#   pnmcrop t001.ppm |pnmgamma 1.0|ppmdim 0.7| \
#     ppmtogif -interlace -transparent rgb:b2/b2/b2 >t001.gif
#
# See notes in the script texttogif at
# http://www.fourmilab.ch/webtools/textogif/textogif.html
%.imgeq.ps.stamp: %.imgeq.ps
	$(PSTOPNM) -resolution 144 $<
	for f in `ls $(<:.imgeq.ps=)*.ppm | sed 's/\.[^.]*$$//'`; do \
		echo $$f; \
		pnmcrop $$f.ppm |\
		pnmgamma 1.0 |\
		ppmdim 0.7 |\
		ppmtogif -interlace -transparent rgb:b2/b2/b2 \
		>$$f.gif ;\
	done
	touch $@

# Should we have something in here to check whether all fonts are available?
# Eg, `-q 2>>missing-fonts'.  Or pre-test with -n
%.imgeq.d2b.stamp: %.imgeq.dvi
	$(DVI2BITMAP) -r 110 -m 2 -s 2 -Pt -t gif $<
	touch $@

# The LaTeX stylesheet, like the HTML stylesheet, outputs a stamp.
%.latex.stamp: %.sgml
	$(JADE) -t latex -iLaTeX.entities -iOnly.paper $(JADEFLAGS) \
		-d $(STYLESHEET)/latex/sl.dsl#latex $< > $@

# The HTML back-matter stamp.
# Filenames must match those in .../html/slback.dsl
%.htmlback.stamp: %.sgml
	$(JADE) -t sgml -d $(STYLESHEET)/html/slback.dsl#back.main $< > $@
	ROOT=`awk -F: '{print $$1}' $@`; \
	if [ -r $$ROOT.htmlbib.aux ]; then \
		BSTINPUTS=$(LIBDIR) \
		bibtex $$ROOT.htmlbib; \
		sed -f $(LIBDIR)/postprocess-bbl.sed \
			$$ROOT.htmlbib.bbl > t.bbl; \
		mv t.bbl $$ROOT.htmlbib.bbl; \
	fi

# The LaTeX backmatter stamp.
# Filenames must match those in .../latex/slback.dsl
%.latexback.stamp: %.sgml
	$(JADE) -t sgml -d $(STYLESHEET)/latex/slback.dsl#back.main $< > $@
	ROOT=`awk -F: '{print $$1}' $@`; \
	if [ -r $$ROOT.latexbib.aux ]; then \
		BSTINPUTS=$(LIBDIR) \
		bibtex $$ROOT.latexbib; \
	fi

# The XML stylesheet, like the HTML stylesheet, outputs a stamp.
%.xml.stamp: %.sgml
	$(JADE) -t xml $(JADEFLAGS) \
		-d $(STYLESHEET)/xml/sl.dsl#xml $< > $@

%.ps: %.dvi
	dvips $< -o

%.dvi: %.tex
	latex $<

%.gz: %
	gzip -9 $<

%.data: %.sgml
	$(SGMLPARSE) $(DECL) $< | \
	sed -n '/^-/{;s/^-//;s/\\n/ /g;p;};' \
	> $@

%.count: %.data
	wc $<


all: index.html

tidy:
	rm -f *.parse *~

# If the makefile which invokes this has a localclean target, make that too.
# Don't fail if that target isn't there.
clean:	tidy
	if ls *.html.stamp >/dev/null 2>&1 ; then \
		for f in *.html.stamp; do \
			rm -f `awk -F: '{print $$1}' $$f`* ; \
		done ; \
	fi
	if ls *.latex.stamp >/dev/null 2>&1 ; then \
		for f in *.latex.stamp; do \
			rm -f `awk -F: '{print $$1}' $$f`* ; \
		done ; \
	fi
	rm -f *.stamp *.single.html *.manifest
	- $(MAKE) localclean

checkhtml:
	for i in *.html; do echo $$i; $(SGMLPARSE) -s $(DECL) $$i; done
