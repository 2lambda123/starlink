#! /bin/sh -

RCSID='$Id$'
ident_string='Starlink SGML Kit, release ((PKG_VERS))'

#+
#  <routinename id=sgml2docs>
#     sgml2docs
#
#  <moduletype>
#     Shell script
#
#  <purpose>
#     Generate HTML or LaTeX files from an SGML source file, marked up using
#     one of the Starlink DTDs.
#
#  <description>
#     Given a single argument, specifying an SGML source file, this
#     uses the Starlink DSSSL stylesheets to process this into a
#     collection of HTML files and GIFs, or LaTeX and EPS files
#     places them in a subdirectory named after the source file, and
#     then creates a tarball in the source directory holding the
#     generated files.
#
#  <argumentlist>
#     <parameter>arg1
#     <type>filename
#     <description>SGML file to be processed.
#
#  <diytopic>Options
#     <dl>
#     <dt>--html<dd>generate HTML (the default).
#     <dt>--htmlsingle<dd>generate HTML in a single file.
#     <dt>--latex<dd>generate LaTeX.
#     <dt>--packagedir my-dir<dd>package up the generated files into a
#           directory called `my-dir'.
#     <dt>--tarball my.tar<dd>bundle the package-dir into a tarball
#           named `my.tar'
#     <dt>--jadeflags flags<dd>add the given flags to the invocation of Jade.
#     <dt>--ignore-manifest<dd>Do not use the generated manifest when
#           bundling up files, but instead just bundle everything in
#           sight.  You will need to use this only if there is some
#           bug in the mechanism which generates the manifest.
#     <dt>--quiet<dd>Don't chatter (not completely silent, since it
#           doesn't suppress output from TeX).
#     <dt>--options opt,opt,...<dd>set format-specific options.
#	    <p>With <code>--latex</code>: options are
#	    <code>cts-sect</> and <code>cts-appx</>, which suppresses
#	    any page-break between sections in the main text and
#	    appendices; and <code>onepass-latex</>, which generates
#	    LaTeX which should need only a single pass to produce a
#	    table of contents.
#	    <p>With <code>--html</>: options are <code>nonorm</>,
#	    <code>simplenorm</> and <code>sgmlnorm</>.  These control
#	    how much the generated HTML files are normalised.  In the
#	    first case, no normalisation is done: this is fine if you
#	    simply want to display the resulting HTML, but the
#	    resulting output confuses the HTX system something
#	    rotten.  The simple normalisation (done using sed) should
#	    be enough for HTX, but isn't bulletproof; the full
#	    normalisation, using the <code>sgmlnorm</> application
#	    should indeed be bulletproof, but is also rather slow.
#	    the default is currently <code>nonorm</>, but might well
#	    change in future.
#     <dt>--help<dd>display usage and exit.
#     <dt>--version<dd>display version and exit.
#     <dt>--debug<dd>do some debugging.  Specifically, don't tidy up at end.
#     <dt>-n<dd>don't actually run anything, just show what would happen.
#     </dl>
#
#
#  <examplelist>
#     <example>
#       sgml2docs --html --tarball mydocs.tar docfile.sgml
#     <examplenote>
#       This converts the document <code>docfile.sgml</> to a set of
#       HTML files, bundling the result into a tarball
#       <code>mydocs.tar</>, rather than the default based on the
#       source file's document class and number.
#     <example>
#       sgml2docs --latex --options cts-sect,cts-appx docfile.sgml
#     <examplenote>
#       Converts the document to a bundle of files which may be
#       LaTeXed.  The page breaks between sections are suppressed.
#       
#  <diytopic>Environment
#     <p>Requires that the environment variable <code>STARLINK_SGML_DIR</> is
#     properly set, pointing to the root of the Starlink SGML kit.  It
#     also requires that dvi2bitmap is in the <code>PATH</>.
#
#     <p>The script creates a work directory and does its processing
#     there.  If it is necessary to run BibTeX, it will be done with
#     that temporary directory as the current directory, so that it
#     might be necessary to set <code>BIBINPUTS</> (for example) to let the
#     system find the bibliography database.
#
#  <authorlist>
#  <author id=ng email='norman@astro.gla.ac.uk' affiliation='Starlink, Glasgow'>
#     Norman Gray
#
#  <history>
#     <change author=ng date='29-SEP-1999'>Initial version.
#-

LIBDIR=${STARLINK_SGML_DIR}/lib
DECL=${STARLINK_SGML_DIR}/dtd/starlink.decl
ICONTARBALL=${STARLINK_SGML_DIR}/lib/icons.tar
STYLESHEET=${STARLINK_SGML_DIR}/dsssl/sl

# Binaries
# Allow the names of the jade and sgmlnorm binaries to be overridden
# (mostly for testing, though I can imagine _some_ production use of
# this feature).
test -n "$JADE"       || JADE=jade
test -n "$SGMLNORM"   || SGMLNORM=sgmlnorm
JADEFLAGS=
test -n "$IMGEQ"      || IMGEQ=$LIBDIR/img-eqlist.pl
test -n "$DVI2BITMAP" || DVI2BITMAP='dvi2bitmap'
test -n "$LATEX"      || LATEX=latex
test -n "$BIBTEX"     || BIBTEX=bibtex

TARGETFORMAT=0			# html
OPTIONS=

DEBUGGING=false
USEMANIFEST=true
VERBOSE=true
NORMTYPE=nonorm  # no normalisation by default
run=
runn=
tempdest=tmp.stamp

PROGNAME=`basename $0`

tidy-up ()
{
    if $DEBUGGING; then
	echo "$PROGNAME:I: Work directory $WORKDIR not deleted"
    else
	if [ -w "$WORKDIR" ]; then
	    rm -Rf $WORKDIR
	fi
	if [ -d "$WORKDIR" ]; then
	    echo "$PROGNAME:W: Couldn't delete work directory $WORKDIR"
	fi
    fi
}
trap tidy-up 0

# Start parsing the arguments

USAGE="Usage: $0 [--latex] [--html] [--htmlsingle]\
	[--packagedir directory] [--tarball file.tar] [--jadeflags flags]\
	[--ignore-manifest] [--quiet]\
	[--help] [--debug] [--version] [-n]\
	[--options]\
	sgml-file\
    (--latex options: cts-sect, cts-appx, onepass)\
    (--html options: sgmlnorm,simplenorm,nonorm)"

while [ $# -gt 0 ]; do
    case $1 in
	--html) TARGETFORMAT=0 ;;
	--latex) TARGETFORMAT=1 ;;
	--htmlsingle) TARGETFORMAT=0; 
	    JADEFLAGS="$JADEFLAGS -V nochunks -isingle.file" ;;
	--packagedir) PACKAGEDIR=$2; shift ;;
	--tarball) TARNAME=$2; shift ;;
	--jadeflags) JADEFLAGS="$JADEFLAGS $2"; shift ;;
	--debug) DEBUGGING=true ;;
	--options) OPTIONS=$2; shift ;;
	--ignore-manifest) USEMANIFEST=false ;;
	--quiet) VERBOSE=false; DVI2BITMAP="$DVI2BITMAP -q" ;;
	--help) echo $USAGE; exit 0;;
	--version) echo "$PROGNAME:I:" $ident_string; echo "$PROGNAME:I:" $RCSID; exit 0;;
	-n) run=echo; runn=: ; tempdest=/dev/stdout; ;;
	-*) echo $USAGE; exit 1 ;;
	*) SGMLSRC=$1 ;;
    esac
    shift
done

# Check that the SGMLSRC argument is present, and prepend `pwd` if it isn't
# an absolute file name.
case $SGMLSRC in
	'') echo $USAGE; exit 1 ;;
	/*) ;;
	*) SGMLSRC=$PWD/$SGMLSRC ;;
esac

$VERBOSE && echo "$PROGNAME:I: Processing $SGMLSRC..."
case $TARGETFORMAT in
    0)  $VERBOSE && echo "$PROGNAME:I: Target HTML...";
	PACKAGEEXT='.htx' ;;
    1)  $VERBOSE && echo "$PROGNAME:I: Target LaTeX...";
	PACKAGEEXT='.latex' ;;
    *) echo $USAGE; exit 1 ;;
esac

# Set the PACKAGEDIR and TARNAME variables, unless they've already
# been set by options above.
SRCDIR=`dirname $SGMLSRC`
test -n "$PACKAGEDIR" \
    || PACKAGEDIR=`basename $SGMLSRC | sed 's/\(\.sgml\)\?$/'$PACKAGEEXT/`

# Make sure the TARNAME variable has been set, and make sure it's
# an abosulte pathname
test -n "$TARNAME" \
    || TARNAME=`echo $SGMLSRC | sed 's/\(\.sgml\)\?$/.tar/'`
TARNAME=`expr $TARNAME : '\(/.*\)' \| $PWD/$TARNAME`


# Make a work directory.  Can't use mktemp, as that only creates files.
# Fail if the directory already exists.
WORKDIR=/tmp/$PROGNAME.$$
if [ -d $WORKDIR -o -f $WORKDIR ]; then
	echo "$PROGNAME:W: temp dir $WORKDIR already exists - not overwriting"
	exit 1
fi

mkdir -p $WORKDIR
if [ $? -ne 0 ]; then
    echo "$PROGNAME:E: Can't make temp dir $WORKDIR"
    exit 1
fi

cd $WORKDIR
if [ $? -ne 0 ]; then
    echo "$PROGNAME:E: Can't cd to temp dir $WORKDIR"
    exit 1
fi

# We'll package up the generated files into a tarball, after moving them into
# a subdirectory.

# Before we do anything else, create the package directory.
mkdir $PACKAGEDIR
if [ ! -d $PACKAGEDIR ]; then
    echo "$PROGNAME:E: Can't create subdir $WORKDIR/$PACKAGEDIR"
    exit 1
fi

if $DEBUGGING; then
    echo "$PROGNAME:I: JADE=$JADE"
    echo "$PROGNAME:I: SGMLNORM=$SGMLNORM"
    echo "$PROGNAME:I: LIBDIR=$LIBDIR"
    echo "$PROGNAME:I: DVI2BITMAP=$DVI2BITMAP"
    echo "$PROGNAME:I: LATEX=$LATEX"
    echo "$PROGNAME:I: BIBTEX=$BIBTEX"
    echo "$PROGNAME:I: WORKDIR=$WORKDIR"
    echo "$PROGNAME:I: JADEFLAGS=$JADEFLAGS"
    echo "$PROGNAME:I: TARGETFORMAT=$TARGETFORMAT"
    echo "$PROGNAME:I: NORMTYPE=$NORMTYPE"
fi



# Start processing

if [ $TARGETFORMAT -eq 0 ]; then
    # Generate HTML

    if [ -n "$OPTIONS" ]; then
	for o in `echo $OPTIONS | sed 's/,/ /g'`; do
	    case $o in
		nonorm|simplenorm|sgmlnorm) NORMTYPE=$o;;
		*)  echo "$PROGNAME:E: HTML options (nonorm|simplenorm|sgmlnorm)";
		    exit 1;;
	    esac
	done
	if $DEBUGGING; then
	    echo "$PROGNAME:I: NORMTYPE (post-options)=$NORMTYPE"
	fi
    fi

    if $VERBOSE; then
	OUTPUTDEST=''
    else
	OUTPUTDEST='>> output.log'
    fi

    # Generate $ROOT.imgeq.list and convert it to a set of bitmaps.
    # Also extract citations ready for BibTeX.
    $VERBOSE && echo "$PROGNAME:I: Pre-processing..."
    $run $JADE -t sgml -iOnly.web $JADEFLAGS \
	    -d $STYLESHEET/html/slpreprocess.dsl#preprocess.main \
	    $DECL $SGMLSRC \
	    > $tempdest
    test -f tmp.stamp && ROOT=`awk -F: '{print $1}' tmp.stamp`

    # If there are no maths-mode elements, there's no list file generated.
    # Test if the file is of non-zero size, since <codecollection> is
    # listed in `maths-element-list' even though it'll produce no
    # output if there's no maths in the codecollection.  Same goes for
    # element <mdefs>.
    if [ -s "$ROOT.imgeq.list" ]; then
	# Find dvi2bitmap's default format
	# Default to gif if the dvi2bitmap version doesn't have the -Qt option
	#imgfmt=`($DVI2BITMAP -Qt 2>/dev/null || echo gif) | awk '{print $1}'`
	# Force the image format to be gif -- PNG transparency isn't
	# yet well-enough supported in browsers.
	imgfmt='gif'
	$VERBOSE && echo "$PROGNAME:I: $IMGEQ --imgformat $imgfmt $ROOT.imgeq.list"
	$run $IMGEQ --imgformat $imgfmt $ROOT.imgeq.list

	$VERBOSE && echo "$PROGNAME:I: $LATEX $ROOT.imgeq.tex"
	$run $LATEX $ROOT.imgeq.tex $OUTPUTDEST

	$VERBOSE && echo "$PROGNAME:I: $DVI2BITMAP -m 2 -s 2 -Pt $ROOT.imgeq.dvi"
	$run $DVI2BITMAP -m 2 -s 2 -Pt $ROOT.imgeq.dvi $OUTPUTDEST
    else
	$VERBOSE && echo "$PROGNAME:I: no maths in document"
    fi

    # Generate backmatter.  Don't fail if no .aux file was generated
    if [ -r "$ROOT.htmlbib.aux" ]; then
	$VERBOSE && echo "$PROGNAME:I: Backmatter..."
	# BSTINPUTS set here; require the user to do any setting of BIBINPUTS
	BSTINPUTS=$LIBDIR $run $BIBTEX $ROOT.htmlbib
	$runn sed -f $LIBDIR/postprocess-bbl.sed $ROOT.htmlbib.bbl > t.bbl
	$runn mv t.bbl $ROOT.htmlbib.bbl
    fi

    # Generate the destination file
    $VERBOSE && echo "$PROGNAME:I: Generating output..."
    $run $JADE -t sgml -iHTML.entities -iOnly.web $JADEFLAGS \
	    -d $STYLESHEET/html/sl.dsl#html \
	    $DECL $SGMLSRC \
	    > $tempdest

    # create the file named MANIFEST, removing duplicates (ie, some gifs)
    # from generated manifest file
    if $USEMANIFEST; then
	test -r HTML.manifest && sort HTML.manifest | uniq > MANIFEST
    else
	# just scoop everything up
	find . -maxdepth 1 -type f ! -name MANIFEST > MANIFEST
    fi
	

elif [ $TARGETFORMAT -eq 1 ]; then
    # Generate LaTeX

    if [ -n "$OPTIONS" ]; then
	for o in `echo $OPTIONS | sed 's/,/ /g'`; do
	    case $o in
		cts-sect) JADEFLAGS="$JADEFLAGS -V section-samepage" ;;
		cts-appx) JADEFLAGS="$JADEFLAGS -V appendix-samepage" ;;
		onepass)  JADEFLAGS="$JADEFLAGS -V onepass-latex" ;;
		*) echo "$PROGNAME:E: LaTeX options (cts-sect|cts-appx|onepass)" ;
		   exit 1 ;;
	    esac
	done
	if $DEBUGGING; then
	    echo "$PROGNAME:I: JADEFLAGS (post-options)=$JADEFLAGS"
	fi
    fi

    $run $JADE -t sgml -iLaTeX.entities -iOnly.paper $JADEFLAGS \
	-d $STYLESHEET/latex/slback.dsl#back.main \
	$DECL $SGMLSRC \
	> $tempdest
    test -f tmp.stamp && ROOT=`awk -F: '{print $1}' tmp.stamp`

    # If there was no backmatter, then don't invoke BibTeX
    if [ -r $ROOT.latexbib.aux ]; then
	BSTINPUTS=$LIBDIR $run $BIBTEX $ROOT.latexbib
    fi

    # Generate the final file
    $run $JADE -t latex -iLaTeX.entities -iOnly.paper $JADEFLAGS \
	    -d $STYLESHEET/latex/sl.dsl#latex \
	    $DECL $SGMLSRC \
	    > $tempdest

    if $USEMANIFEST; then
	test -r LaTeX.manifest && ln -s LaTeX.manifest MANIFEST
    else
	find . -maxdepth 1 -type f ! -name MANIFEST > MANIFEST
    fi

else

    echo "$PROGNAME:E: Illegal TARGETFORMAT=$TARGETFORMAT !"
    exit 1

fi

# Package up the generated files into a tarball named after the source
# file.  There are either one or two fields on each line of the
# manifest (see file .../{html,latex}/sl.dsl).  If there is only one field,
# then this is a generated file.  If there are two fields, then
# the first is the sysid of the figure as referred to by the
# generated material, which will have no path, and the second is the sysid as
# declared in the entity, which may have a path.
#
# hlink and showme/findme get confused by Jade's way of generating elements.
# To help out, run the files through sgmlnorm.
if [ -r MANIFEST -o -n "$run" ]; then
    #mv `awk 'NF==1 {print $1}' MANIFEST` $PACKAGEDIR
    for f in `awk 'NF==1 {print $1}' MANIFEST`; do
	case $f in
	*.html)
	    case $NORMTYPE in
		nonorm) 
		    cp $f $PACKAGEDIR/$f ;;
		simplenorm)
		    sed '/<[aA] *$/{:a;N;s/\n>/ >/;t;s/\n/ /;b a;}' $f >$PACKAGEDIR/$f ;;
		sgmlnorm)
		    $run $SGMLNORM -d $DECL $f >$PACKAGEDIR/$f \
			2>>$PACKAGEDIR/sgmlnorm.errors ;;
		*)
		    echo "$PROGNAME:W: Impossible normtype=$NORMTYPE.  Doing simple copy"
		    cp $f $PACKAGEDIR/$f ;;
	    esac		    
	    ;;
	*)
	    $run mv $f $PACKAGEDIR
	    ;;
	esac
    done
    # Now process the list of entities which have to be renamed --
    # those with two fields in the manifest file.
    # Use awk to send a stack of cp commands into a new shell (use
    # this technique rather than eval, so that we avoid
    # any potential problem with maximum line lengths.  Harmless if
    # there are no two-entry lines in the file.
    awk "BEGIN {print \"cd $SRCDIR\"}; NF==2 {printf \"$run cp %s $WORKDIR/$PACKAGEDIR/%s\n\","'$2,$1}' $WORKDIR/MANIFEST | sh
    $run cp MANIFEST $PACKAGEDIR

    if [ $TARGETFORMAT -eq 0 ]; then
	# Generating HTML:
	# At this point append the contents of the icons tarball to the
	# MANIFEST.  Don't do this earlier, since these files weren't
	# present to be copied.
	(cd $PACKAGEDIR; \
	    tar tf $ICONTARBALL | sed '/\/$/d' >> MANIFEST)
    fi
else
    # It's not clear what to do here, since _something_ has clearly
    # gone wrong if we don't have a manifest.  However, package up all
    # (?) the generated files and hope for the best.
    $VERBOSE && echo "$PROGNAME:W: Can't find manifest -- something's gone wrong:  I'm tarring up everything and hoping for the best!"
    $run mv * $PACKAGEDIR
fi

if [ $TARGETFORMAT -eq 0 ]; then
    # Unpack the icons into the target directory, to match the manifest.
    (cd $PACKAGEDIR; tar xf $ICONTARBALL)
fi

$run tar cf $TARNAME $PACKAGEDIR


# No need to remove the workdir, as that'll be done through the exit trap

$VERBOSE && echo "$PROGNAME:I: Created $TARNAME"

exit 0

