#! /bin/sh -
#
RCSID='$Id$'
#
#+
#  <routinename id=sgml2docs>
#     sgml2docs
#
#  <moduletype>
#     Shell script
#
#  <purpose>
#     Generate HTML or LaTeX files from an SGML source file, marked up using
#     one of the Starlink DTDs.
#
#  <description>
#     Given a single argument, specifying an SGML source file, this
#     uses the Starlink DSSSL stylesheets to process this into a
#     collection of HTML files and GIFs, or LaTeX and EPS files
#     places them in a subdirectory named after the source file, and
#     then creates a tarball in the source directory holding the
#     generated files.
#
#  <diytopic>Environment
#     <p>Requires that the environment variable STARLINK_SGML_DIR is
#     properly set, pointing to the root of the Starlink SGML kit.  It
#     also requires that dvi2bitmap is in the PATH.
#
#     <p>The script creates a work directory and does its processing
#     there.  If it is necessary to run BibTeX, it will be done with
#     that temporary directory as the current directory, so that it
#     might be necessary to set BIBINPUTS (for example) to let the
#     system find the bibliography database.
#
#  <argumentlist>
#     <parameter>arg1
#     <type>filename
#     <description>SGML file to be processed.
#
#  <diytopic>Options
#     <dl>
#     --html: generate HTML (the default).
#     --htmlsingle: generate HTML in a single file.
#     --latex: generate LaTeX.
#     --packagedir my-dir: package up the generated files into a
#           directory called `my-dir'.
#     --tarball my.tar: bundle the package-dir into a tarball named `my.tar'
#     --jadeflags flags: add the given flags to the invocation of Jade.
#     --options opt,opt,...: set format-specific options.
#     --help: display usage and exit.
#     --version: display version and exit.
#     --debug: do some debugging.  Specifically, don't tidy up at end.
#     -n: don't actually run anything, just show what would happen.
#     </dl>
#
#  <authorlist>
#  <authorref id=ng>
#     Norman Gray (Starlink, Glasgow)
#
#  <history>
#     <change author=ng date='29-SEP-1999'>Initial version.
#-

LIBDIR=${STARLINK_SGML_DIR}/lib
DECL=${STARLINK_SGML_DIR}/dtd/starlink.decl
STYLESHEET=${STARLINK_SGML_DIR}/dsssl/sl

# Binaries
# Allow the names of the jade and sgmlnorm binaries to be overridden
# (mostly for testing, though I can imagine _some_ production use of
# this feature).
test -n "$JADE"       || JADE=jade
test -n "$SGMLNORM"   || SGMLNORM=sgmlnorm
JADEFLAGS=
test -n "$IMGEQ"      || IMGEQ=$LIBDIR/img-eqlist.pl
test -n "$DVI2BITMAP" || DVI2BITMAP='dvi2bitmap'
test -n "$LATEX"      || LATEX=latex
test -n "$BIBTEX"     || BIBTEX=bibtex

TARGETFORMAT=0			# html
OPTIONS=

DEBUGGING=false
run=
runn=
tempdest=tmp.stamp

tidy-up ()
{
    if $DEBUGGING; then
	echo "Work directory $WORKDIR not deleted"
    else
	if [ -w "$WORKDIR" ]; then
	    rm -Rf $WORKDIR
	fi
	if [ -d "$WORKDIR" ]; then
	    echo "Couldn't delete work directory $WORKDIR"
	fi
    fi
}
trap tidy-up 0

# Start parsing the arguments

USAGE="Usage: $0 [--latex] [--html] [--htmlsingle]\
	[--packagedir directory] [--tarball file.tar] [--jadeflags flags]\
	[--help] [--debug] [--version] [-n]\
	[--options]\
	sgml-file\
    (--latex options: cts-sect, cts-appx, onepass)"

PROGNAME=`basename $0`
while [ $# -gt 0 ]; do
    case $1 in
	--html) TARGETFORMAT=0 ;;
	--latex) TARGETFORMAT=1 ;;
	--htmlsingle) TARGETFORMAT=0; 
	    JADEFLAGS="$JADEFLAGS -V nochunks -isingle.file" ;;
	--packagedir) PACKAGEDIR=$2; shift ;;
	--tarball) TARNAME=$2; shift ;;
	--jadeflags) JADEFLAGS="$JADEFLAGS $2"; shift ;;
	--debug) DEBUGGING=true ;;
	--options) OPTIONS=$2; shift ;;
	--help) echo $USAGE; exit 0;;
	--version) echo $RCSID; exit 0;;
	-n) run=echo; runn=: ; tempdest=/dev/stdout; ;;
	-*) echo $USAGE; exit 1 ;;
	*) SGMLSRC=$1 ;;
    esac
    shift
done

# Check that the SGMLSRC argument is present, and prepend `pwd` if it isn't
# an absolute file name.
case $SGMLSRC in
	'') echo $USAGE; exit 1 ;;
	/*) ;;
	*) SGMLSRC=$PWD/$SGMLSRC ;;
esac

echo "Processing $SGMLSRC..."
case $TARGETFORMAT in
    0)  echo "Target HTML...";
	PACKAGEEXT='.htx' ;;
    1)  echo "Target LaTeX...";
	PACKAGEEXT='.latex' ;;
    *) echo $USAGE; exit 1 ;;
esac

# Set the PACKAGEDIR and TARNAME variables, unless they've already
# been set by options above.
SRCDIR=`dirname $SGMLSRC`
test -n "$PACKAGEDIR" \
    || PACKAGEDIR=`basename $SGMLSRC | sed 's/\(\.sgml\)\?$/'$PACKAGEEXT/`

# Make sure the TARNAME variable has been set, and make sure it's
# an abosulte pathname
test -n "$TARNAME" \
    || TARNAME=`echo $SGMLSRC | sed 's/\(\.sgml\)\?$/.tar/'`
TARNAME=`expr $TARNAME : '\(/.*\)' \| $PWD/$TARNAME`


# Make a work directory.  Can't use mktemp, as that only creates files.
# Fail if the directory already exists.
WORKDIR=/tmp/$PROGNAME.$$
if [ -d $WORKDIR -o -f $WORKDIR ]; then
	echo "$0: temp dir $WORKDIR already exists - not overwriting"
	exit 1
fi

mkdir -p $WORKDIR
if [ $? -ne 0 ]; then
    echo "$0: Can't make temp dir $WORKDIR"
    exit 1
fi

cd $WORKDIR
if [ $? -ne 0 ]; then
    echo "$0: Can't cd to temp dir $WORKDIR"
    exit 1
fi

# We'll package up the generated files into a tarball, after moving them into
# a subdirectory.

# Before we do anything else, create the package directory.
mkdir $PACKAGEDIR
if [ ! -d $PACKAGEDIR ]; then
    echo "$0: Can't create subdir $WORKDIR/$PACKAGEDIR"
    exit 1
fi

if $DEBUGGING; then
    echo "JADE=$JADE"
    echo "SGMLNORM=$SGMLNORM"
    echo "LIBDIR=$LIBDIR"
    echo "DVI2BITMAP=$DVI2BITMAP"
    echo "LATEX=$LATEX"
    echo "BIBTEX=$BIBTEX"
    echo ""
    echo "WORKDIR=$WORKDIR"
    echo "JADEFLAGS=$JADEFLAGS"
    echo "TARGETFORMAT=$TARGETFORMAT"
fi



# Start processing

if [ $TARGETFORMAT -eq 0 ]; then
    # Generate HTML
    # generate $ROOT.imgeq.list and convert it to a set of bitmaps
    echo "Pre-processing..."
    $run $JADE -t sgml -iOnly.web $JADEFLAGS \
	    -d $STYLESHEET/html/slpreprocess.dsl#preprocess.main \
	    $DECL $SGMLSRC \
	    > $tempdest
    test -f tmp.stamp && ROOT=`awk -F: '{print $1}' tmp.stamp`

    # If there are no maths-mode elements, there's no list file generated
    if [ -r "$ROOT.imgeq.list" ]; then
	# find dvi2bitmap's default format
	imgfmt=`$DVI2BITMAP -Qt | awk '{print $1}'`
	$run $IMGEQ --imgformat $imgfmt $ROOT.imgeq.list

	echo "LaTeXing maths..."
	$run $LATEX $ROOT.imgeq.tex

	echo "dvi2bitmap..."
	$run $DVI2BITMAP -m 2 -s 2 -Pt $ROOT.imgeq.dvi
    fi

    # Generate backmatter.  Don't fail if no .aux file was generated
    if [ -r "$ROOT.htmlbib.aux" ]; then
	echo "Backmatter..."
	# BSTINPUTS set here; require the user to do any setting of BIBINPUTS
	BSTINPUTS=$LIBDIR $run $BIBTEX $ROOT.htmlbib
	$runn sed -f $LIBDIR/postprocess-bbl.sed $ROOT.htmlbib.bbl > t.bbl
	$runn mv t.bbl $ROOT.htmlbib.bbl
    fi

    # Generate the destination file
    echo "Generating output..."
    $run $JADE -t sgml -iHTML.entities -iOnly.web $JADEFLAGS \
	    -d $STYLESHEET/html/sl.dsl#html \
	    $DECL $SGMLSRC \
	    > $tempdest

    # create the file named MANIFEST, removing duplicates (ie, some gifs)
    # from generated manifest file
    test -r HTML.manifest && sort HTML.manifest | uniq > MANIFEST

elif [ $TARGETFORMAT -eq 1 ]; then
    # Generate LaTeX

    if [ -n "$OPTIONS" ]; then
	for o in `echo $OPTIONS | sed 's/,/ /g'`; do
	    case $o in
		cts-sect) JADEFLAGS="$JADEFLAGS -V section-samepage" ;;
		cts-appx) JADEFLAGS="$JADEFLAGS -V appendix-samepage" ;;
		onepass)  JADEFLAGS="$JADEFLAGS -V onepass-latex" ;;
		*) echo "$0: LaTeX options (cts-sect|cts-appx|onepass)" ;
		   exit 1 ;;
	    esac
	done
	if $DEBUGGING; then
	    echo "JADEFLAGS (post-options)=$JADEFLAGS"
	fi
    fi

    $run $JADE -t sgml -iLaTeX.entities -iOnly.paper $JADEFLAGS \
	-d $STYLESHEET/latex/slback.dsl#back.main \
	$DECL $SGMLSRC \
	> $tempdest
    test -f tmp.stamp && ROOT=`awk -F: '{print $1}' tmp.stamp`

    # If there was no backmatter, then don't invoke BibTeX
    if [ -r $ROOT.latexbib.aux ]; then
	BSTINPUTS=$LIBDIR $run $BIBTEX $ROOT.latexbib
    fi

    # Generate the final file
    $run $JADE -t latex -iLaTeX.entities -iOnly.paper $JADEFLAGS \
	    -d $STYLESHEET/latex/sl.dsl#latex \
	    $DECL $SGMLSRC \
	    > $tempdest

    test -r LaTeX.manifest && ln -s LaTeX.manifest MANIFEST

else

    echo "Illegal TARGETFORMAT=$TARGETFORMAT !"
    exit 1

fi

# Package up the generated files into a tarball named after the source
# file.  There are either one or two fields on each line of the
# manifest (see file .../{html,latex}/sl.dsl).  If there is only one field,
# then this is a generated file.  If there are two fields, then
# the first is the sysid of the figure as referred to by the
# generated material, which will have no path, and the second is the sysid as
# declared in the entity, which may have a path.
#
# hlink and showme/findme get confused by Jade's way of generating elements.
# To help out, run the files through sgmlnorm.
if [ -r MANIFEST -o -n "$run" ]; then
    #mv `awk 'NF==1 {print $1}' MANIFEST` $PACKAGEDIR
    for f in `awk 'NF==1 {print $1}' MANIFEST`; do
	case $f in
	*.html)
	    #sed '/<[aA] *$/{:a;N;s/\n>/ >/;t;s/\n/ /;b a;}' $f >$PACKAGEDIR/$f
	    $run $SGMLNORM -d $DECL $f >$PACKAGEDIR/$f \
		2>>$PACKAGEDIR/sgmlnorm.errors
	    ;;
	*)
	    $run mv $f $PACKAGEDIR
	    ;;
	esac
    done
    (cd $SRCDIR; \
	eval `awk "NF==2 {printf \"$run cp %s $WORKDIR/$PACKAGEDIR/%s\n\","'$2,$1}' $WORKDIR/MANIFEST`)
    $run cp MANIFEST $PACKAGEDIR
else
    # It's not clear what to do here, since _something_ has clearly
    # gone wrong.  However, package up all (?) the generated files and
    # hope for the best.
    echo "$0: Can't find manifest -- something's gone wrong:  I'm tarring up everything and hoping for the best!"
    $run mv * $PACKAGEDIR
fi
$run tar cf $TARNAME $PACKAGEDIR


# No need to remove the workdir, as that'll be done through the exit trap

echo "Created $TARNAME"

exit 0

