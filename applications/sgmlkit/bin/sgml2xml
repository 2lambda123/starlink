#! /usr/bin/perl -w
#    Copyright 2000, 2001, Council of the Central
#    Laboratory of the Research Councils.  See
#    http://www.starlink.ac.uk/store/conditions.html for
#    conditions.

$RCSID='$Id$';
$ident_string = 'Starlink SGML Kit, release ((PKG_VERS))';

#+
#  <routinename id=sgml2xml>
#    sgml2xml
#
#  <moduletype>
#    Perl script.
#
#  <purpose>
#    Convert an SGML file to XML, using sx for the body, but
#    additionally converting entity declarations in the original
#    file's declaration subset.
#
#  <description>
#
#    <p>Essentially a wrapper for <code>sx</code>, but since that doesn't
#    rewrite the DTD subset, this script does that, trying to find
#    XML-compatible ways of rewriting what it finds, and spitting out
#    warnings whenever it sees anything it thinks is dodgy.
#
#    <p>Output is to stdout.
#
#    <p>Notes:
#    <ul>
#    <li> No parsing of any declaration -- uses RCS only.
#
#    <li> Limited error recovery (the input is supposed to be valid already),
#    so most errors are fatal.
#
#    <li> Only processes entity declarations in subset -- element
#    declarations, etc, are discarded with warnings.
#
#    <li> No automatic rewriting of public identifiers -- if the input
#    document is a valid instance of the given DTD, the output document
#    will be, also.
#
#    <li> Generates system identifiers for external entities which have only
#    public ones.  At present, this generates a reference to the
#    catalogue server -- should it try to do a catalogue lookup and
#    replace it by what it finds there?  That starts to get
#    complicated, and requires command-line queries of the catalogue,
#    which either requires OpenSP, or that I resurrect my
#    catalogue-parser.  XML's requirement for system identifiers is a pig.
#
#    <li> Entities which can't be easily translated are discarded with
#    warnings. 
#
#    <li> It's not clear what one should do with SUBDOC entities.  This
#    translates them to <code>NDATA XML</code> entities, and warns that it's done
#    this, but the referenced document might well be SGML rather than
#    XML.
#
#    </ul>
#
#  <argumentlist>
#    <parameter>arg1
#    <type>Filename
#    <description>SGML file to be processed (required)
#
#  <diytopic>Options
#    <dl>
#
#    <dt>--pubid public-identifier
#        <dd>Specify the public identifier which is to be used to identify
#        the DTD in the output XML file.  If not specified, the public
#        identifier in the input file is reused, which will almost
#        certainly be wrong, but should nonetheless give broadly sensible
#        error messages when it's parsed, and do no harm if it's not.
#
#    <dt>--sysid system-identifier
#        <dd>Specify the system identifier which is to be used to identify
#        the DTD in the output XML file.  If not specified, either the
#        input file's system identifier is reused, if one exists, or
#        else the public identifier in the input file is converted to
#        a system identifier, and that is used.
#
#    <dt>--declaration decl
#        <dd>The declaration which is appropriate to the input file.  Note
#        that this is specified for the benefit of sx -- this script
#        pays no attention to it.
#
#    <dt>--version
#        <dd>Print version information and exit.
#    </dl>
#
#  <diytopic>Environment
#    <p>If the environment variable <code>SX</code> is defined, then this is
#    used as the command to invoke <code>sx</code>, otherwise a default value
#    is used.
#
#  <authorlist>
#  <author id=ng
#          webpage='http://www.astro.gla.ac.uk/users/norman/'
#	   affiliation='Starlink, Glasgow University'>
#     Norman Gray
#
#  <copyright>
#    <p>Copyright 2000, 2001, Council of the Central
#    Laboratory of the Research Councils.  See
#    <url>http://www.starlink.ac.uk/store/conditions.html</url> for
#    conditions.
#
#  <history>
#    <change author=ng date='26-APR-2000'>Initial version.
#    <change author=ng date='16-Jan-2001'>Added explicit (rather
#      than defaulted) copyright statement.
#
#  <diytopic>Notes
#
#    <p><code>sx</code> is available as part of James Clark's <webref
#    url='http://www.jclark.com/sp/' >SP</webref> package.
#
#    <p>References to `productions' are to the productions of the 
#    SGML standard.
#    See <url>http://www.tiac.net/users/bingham/sgmlsyn/sgmlsyn.htm</url> for a
#    well-linked version, or
#    <url>http://www.oreilly.com/people/staff/crism/sgmldefs.html</url>, or
#    <url>ftp://ftp.ifi.uio.no/pub/SGML/productions</url>.
#
#-

$infile = undef;		# input file
$docpubid = undef;		# overriding publicid for output document
$docsysid = undef;		# overriding systemid for output document
$docdecl  = undef;		# SGML declaration to be passed to sx



$SX = defined($ENV{SX}) ? $ENV{SX} : 'sx -xempty -xcomment';

$catalogue_server = 'http://dummy.catalogue.server/catalogue/public';
#$catalogue_server = 'http://goedel.astro.gla.ac.uk/catalogue/public';
$found_subdoc = 0;		# used/set in parse_entitydef

$declaration_subset = 0;	# flag: in declaration subset
$at_end_of_declaration = 0;	# flag: finished declaration -- exit loop

$token_line = '';		# used by subroutine gettoken
$token_lineno = 0;
@token_array = ();
@comment_buffer = ();


while ($#ARGV >= 0) {
    if ($ARGV[0] eq '--pubid') {
	shift (@ARGV);
	$#ARGV >= 0 || Usage();
	$docpubid = $ARGV[0];
    } elsif ($ARGV[0] eq '--sysid') {
	shift (@ARGV);
	$#ARGV >= 0 || Usage();
	$docsysid = $ARGV[0];
    } elsif ($ARGV[0] eq '--declaration') {
	shift (@ARGV);
	$#ARGV >= 0 || Usage();
	$docdecl = $ARGV[0];
    } elsif ($ARGV[0] eq '--version') {
	print "$ident_string\n$RCSID\n";
	exit 0;
    } elsif ($ARGV[0] =~ /^-/) {
	Usage();
    } else {
	if (defined($infile)) {
	    Usage();
	} else {
	    $infile = $ARGV[0];
	}
    }
    shift (@ARGV);
}

# Open the input file.
defined ($infile) || Usage();

open (INFILE, $infile) || die "Can't open file $infile to read\n";


# Read the doctype declaration, including any internal declaration subset
while (!$at_end_of_declaration && defined($token = gettoken())) {

    #print ": $token\n";

    if ($token eq '<!') {
	if ($declaration_subset) {
	    $token = gettoken();
	    if ($token =~ /entity/i) { # entity declaration
		# process it...
		parse_entitydef();
	    } elsif ($token eq '>') { # empty declaration -- ie, comment
		# do nothing -- comments swept up at end
	    } else {
		print STDERR "Warning:$token_lineno: declaration of $token discarded\n";
		# flush tokens to the end of the declaration
		while ($token ne '>') {
		    $token = gettoken();
		}
	    }
	} else {
	    # the next token had better be `doctype'.  See production [110].
	    $token = gettoken();
	    if ($token !~ /doctype/i) {
		print STDERR "Error:$token_lineno: instance doesn't start with `<!DOCTYPE'\n";
		exit 1;		# BOMB OUT
	    }

	    # whew...
	    print "<?xml version=\"1.0\"?>\n<!DOCTYPE " . gettoken();

	    # Is this an `external identifier[73]'?
	    $token = gettoken();
	    if ($token =~ /public|system/i) {
		my $pubid;
		my $sysid;
		ungettoken ($token);
		($pubid,$sysid) =
		    process_external_identifier ($docpubid, $docsysid);
		if (defined($pubid)) {
		    print "\n\tPUBLIC '$pubid'";
		} else {
		    print "\n\tSYSTEM";
		}
		print "\n\t'$sysid' " if (defined($sysid));
	    }
	}
    } elsif ($token eq '[') {
	if ($declaration_subset) {
	    # this shouldn't happen
	    print STDERR "Error:$token_lineno: unexpected token '['\n";
	    exit 1;		# BOMB OUT
	} else {
	    $declaration_subset = 1;
	    print "\n\t[\n";
	}
    } elsif ($token eq ']') {
	if ($declaration_subset) {
	    $declaration_subset = 0;
	    print "\n]";
	} else {
	    # this shouldn't happen
	    print STDERR "Error:$token_lineno: unexpected token ']'\n";
	    exit 1;		# BOMB OUT
	}
    } elsif ($token eq '>') {
	if ($declaration_subset) {
	    # this shouldn't happen
	    print STDERR "Error:$token_lineno: unexpected token '>'\n";
	    exit 1;		# BOMB OUT
	} else {
	    print ">\n";
	    $at_end_of_declaration = 1;
	}
    } else {
	print STDERR "Warning:$token_lineno: unexpected token $token (ignored)\n";
    }

    # Process any left-over comments
    while ($#comment_buffer >= 0) {
	print "<!" . shift(@comment_buffer) . ">\n";
    }
}

# flush output before exec
$| = 1;
print "\n";

# Now exec sx with the original input file, and discaring all its
# various warnings.  Remove the <?xml?> PI from the sx output, since
# we've already output such a PI above.

if (defined($docdecl)) {
    $infile = "$docdecl $infile";
}
exec "$SX $infile 2>/dev/null | sed '/<\?xml/d'";

exit 1;




# Tokenise stdin, and return one token per call.
#
# This isn't exactly the same as the tokenisation which a real SGML parser
# would do, but it's close enough for our purposes.
sub gettoken {
    # siphon off any leading comments into @comment_buffer
    while ($#token_array >= 0 && $token_array[0] =~ /^--/) {
	push (@comment_buffer, shift(@token_array));
    }

    while ($#token_array < 0) {
	#my @t;
	# [A-Za-z] are the characters in production `name start character[53]',
	# and [A-Za-z0-9.-] the characters in production `name character[52]'
	# (in the SGML RCS).
	# Also recognise tokens starting with RNI (`#').
	# Also add PERO (`%').
	while ($token_line !~ /<!|[\[\]>%]|#?[A-Za-z][A-Za-z0-9.-]*|'.*?'|".*?"|--.*?--/s) {
	    my $l = <INFILE>;
	    $token_lineno++;
	    if (defined($l)) {
		$token_line .= $l;
	    } else {
		# This logic will fail if a syntactically correct file 
		# does not have a final newline.  That'll only be a
		# problem if the file ends within or immediately after
		# the internal declaration subset.
		return $l;	# return undefined -- EOF
	    }
	}
	push (@token_array,
	      ($token_line =~ /\s*(<!|[\[\]>%]|#?[A-Za-z][A-Za-z0-9.-]*|'.*?'|".*?"|--.*?--)\s*/sg));
	$token_line = '';

	# again siphon off any leading comments into @comment_buffer
	while ($#token_array >= 0 && $token_array[0] =~ /^--/) {
	    push (@comment_buffer, shift(@token_array));
	}
    }

    #print "($token_array[0])\n";

    return shift(@token_array);
}

# Push a token back on the input.  No attempt to maintain token_lineno here,
# so this could be off if you push back the last token on the previous line.
sub ungettoken {
    unshift (@token_array, $_[0]);
}


# Process an `external identifier[73]', returning a public and a
# system id as a two-element array.  Takes two optional arguments.  If
# these are defined, they are respectively an overriding public and
# system identifier.
sub process_external_identifier {
    my $pubid;
    my $sysid;
    my $t = gettoken ();
    if ($t =~ /^public/i) {
	$t = gettoken();
	($pubid = $t) =~ s/[\'\"]//g;
    }
    $t = gettoken();		# system identifier
    if ($t =~ /^[\'\"]/) {	# system id
	($sysid = $t) =~ s/[\'\"]//g;
    } else {
	ungettoken ($t);	# it wasn't a sysid -- put it back
    }

    if ($#_ >= 0 && defined($_[0])) {
	$pubid = $_[0];
    }

    if ($#_ >= 1 && defined($_[1])) {
	$sysid = $_[1];
    }

    if (defined($pubid) && !defined($sysid)) {
	$sysid = $catalogue_server . '/' . $pubid;
	$sysid =~ s/ /%20/g;
    }
    return ($pubid,$sysid);
}


#  Parse an entity definition, reading tokens using gettoken().
#  Gobbles the entire entity declaration.
sub parse_entitydef {
    #
    #  A selection of relevant productions are as follows
    #
    #  What we want to do here is to parse the entity, and reexpress
    #  it in an XML-conformant fashion.  See James Clark's SGML-XML
    #  notes at http://www.w3.org/TR/NOTE-sgml-xml-971215, section on
    #  entity declarations.
    #
    #  We do some basic sanity-checking of the validity of the entity, but
    #  don't bust a gut -- the input is supposed to be valid SGML.  We
    #  produce output which is valid XML as described in Clark's
    #  notes, but don't check the last two points, requiring that the
    #  replacement text be well-formed and that entity references are
    #  syntactically correct.
    #
    #  We convert entity definitions where the entity text is a
    #  `parameter literal' or `external entity specification', with
    #  the exception that SUBDOC entities are converted to NDATA XML
    #  entities, and SDATA or CDATA external entities are converted to
    #  NDATA entities (is this sensible).  We reject bracketed text
    #  entities with a warning.  We do the same for data text entities
    #  -- could we convert these to parameter literal definitions
    #  (don't think so)?
    #
    #
    #  
    #  [66] parameter literal (10.1.2, 373:1) =
    #          ( ( lit ("\""),
    #              replaceable parameter data [67],
    #              lit ("\"") )
    #          | ( lita ("'"),
    #              replaceable parameter data [67],
    #              lita ("'") ) )
    #  
    #  [73] external identifier (10.1.6, 379:1) =
    #          ( ( "SYSTEM"
    #            | ( "PUBLIC",
    #                +ps [65],
    #                public identifier [74] ) ),
    #            ?( +ps [65],
    #               system identifier [75] ) )
    #  
    #  [101] entity declaration (10.5, 394:18) =
    #          ( mdo ("<!"),
    #            "ENTITY",
    #            +ps [65],
    #            entity name [102],
    #            +ps [65],
    #            entity text [105],
    #            *ps [65],
    #            mdc (">") )
    #  
    #  [102] entity name (10.5.1, 395:1) =
    #          ( general entity name [103]
    #          | parameter entity name [104] )
    #  
    #  [105] entity text (10.5.2, 396:18) =
    #          ( parameter literal [66]
    #          | data text [106]
    #          | bracketed text [107]
    #          | external entity specification [108] )
    #  
    #  [106] data text (10.5.3, 397:14) =
    #          ( ( "CDATA"
    #            | "SDATA"
    #            | "PI" ),
    #            +ps [65],
    #            parameter literal [66] )
    #  
    #  [107] bracketed text (10.5.4, 399:1) =
    #          ( ( "STARTTAG"
    #            | "ENDTAG"
    #            | "MS"
    #            | "MD" ),
    #            +ps [65],
    #            parameter literal [66] )
    #  
    #  [108] external entity specification (10.5.5, 400:1) =
    #          ( external identifier [73],
    #            ?( +ps [65],
    #               entity type [109] ) )
    #  
    #  [109] entity type (10.5.5, 400:5) =
    #          ( "SUBDOC"
    #          | ( ( "CDATA"
    #              | "NDATA"
    #              | "SDATA" ),
    #              +ps [65],
    #              notation name [41],
    #              ?data attribute specification [149.2] ) )

    my $token;

    my $name = gettoken();
    if ($name eq '%') {
	$name = "% " . gettoken();
    }

    $token = gettoken();

    if ($name =~ /#default/i) {
	# default entity[103]
	print STDERR "Warning:$token_lineno: no #DEFAULT entity in XML (ignored)\n";

    } elsif ($token =~ /^[\'\"]/) {
	# parameter literal[66]
	print "<!ENTITY $name $token>\n";
	$token = gettoken();
	if ($token ne '>') {
	    print STDERR "Warning:$token_lineno: extra tokens in entity declaration (ignored)\n";
	}

    } elsif ($token =~ /^(cdata|sdata|pi)/i) {
	# data text[106]
	print STDERR "Warning:$token_lineno: no data entities in XML (ignored)\n";

    } elsif ($token =~ /^(starttag|endtag|ms|md)/i) {
	# bracketed text[107]
	print STDERR "Warning:$token_lineno: no bracketed text entities in XML (ignored)\n";

    } elsif ($token =~ /^(public|system)/i) {
	# external entity specification[108]
	# is...
	# external identifier[73]
	my $pubid;
	my $sysid;
	ungettoken ($token);
	($pubid,$sysid) = process_external_identifier();
	$token = gettoken();
	if ($token ne '>') {
	    # ...followed by entity type[109]
	    if ($token =~ /^subdoc/i) {
		if (! $found_subdoc) {
		    print "<!NOTATION XML 'http://www.w3.org/TR/1998/REC-xml-19980210'>\n";
		    $found_subdoc = 1;
		}
		$entitytype = 'NDATA XML';
		$token = gettoken();
		if ($token ne '>') {
		    print STDERR "Warning:$token_lineno: extra tokens after SUBDOC (ignored)\n";
		}
		print STDERR "Warning:$token_lineno: redeclaring SUBDOC $name as NDATA XML\n";
	    } else {
		if ($token =~ /^[cs]data/i) {
		    print STDERR "Warning:$token_lineno: external CDATA and SDATA entities not allowed in XML (taken to be NDATA)\n";
		}
		$token = gettoken();
		$entitytype = "NDATA $token";
		$token = gettoken();
		if ($token eq '[') {
		    # data attribute specification[149.2]
		    print STDERR "Warning:$token_lineno: no data attribute specifications in XML (ignored)\n";
		}
	    }
	}
	print "<!ENTITY $name ";
	if (defined($pubid)) {
	    print "\n\tPUBLIC '$pubid'";
	} else {
	    print "\n\tSYSTEM ";
	}
	print "\n\t'$sysid'\n\t" if (defined($sysid));
	print "$entitytype\n\t" if ($entitytype ne '');
	print ">\n";
    } else {
	print STDERR "Warning:$token_lineno: unrecognised entity declaration\n";
    }

    # Read to end of declaration (necessary only if there's been
    # some error warned about above).
    while ($token ne '>') {
	$token = gettoken();
    }
}	




sub Usage {
    print STDERR "$0 [--pubid public-identifier] [--sysid system-identifier] [--declaration decl] filename\n";
    exit 1;
}

