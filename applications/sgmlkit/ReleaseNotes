<!-- 
  Starlink SGML system, release notes
  $Id$
-->

<subsect id=release-0.3 export>Release Notes, version 0.3

<p>This is developers' release 0.3.

<subsubsect>New in this release

<p>This release consists of the SGML DTDs, down-converters, and other
miscellaneous software.

<p>The system relies on the DSSSL engine Jade, but
it does <em/not/ contain a pre-built version of Jade.  Jade turns out
to be a real hassle to build with a compiler other than gcc.  The
author, James Clark, is a fine programmer, but apparently a bit of a
standards purist (he was involved with writing the DSSSL standard, and
with the development of XML/XSL): he seems to take the position that a
standards document is an adequate C++ user manual, and doesn't appear
to believe that porting software to non-conforming compilers should be
high on his priority list.  Jade builds
perfectly happily on gcc, but I've been struggling away for ages
trying to get it to build using Sun's and Digital's C++ compilers.  I
will distribute a runnable version of Jade eventually, but for the
moment, you'll have to build Jade yourself.  If <em/you/ manage to
build it using one of those, could you tell me what you had to do....

<p>Get Jade from Clark's <webref
url='http://www.jclark.com/jade/' >Jade pages</webref>.  Before you
build it, you need to patch it to a Starlink-specific version, using
the patch at
<url>http://www.astro.gla.ac.uk/users/norman/distrib/jade.html</url>.
The configuration you'll need is:
<verbatim>
% mkdir -p /my/star/bin/sgml/bin /my/star/bin/sgml/lib
% ./configure --enable-latex --prefix=/my/star/bin/sgml
% make
% make install
</verbatim>

<subsubsect>Outstanding issues

<p>This is the to-do list.  It still contains several small items from
the last programmers' meeting.  These are important, but not
show-stopping.

<dl>
<dt>Bundle Jade with the system
<dd>At present, the distribution consists only of the SGML library stuff.
I need to work out the magic to get Jade to build on Suns and Alphas,
and then distribute them together.

<dt>Finish documentation
<dd>This should be considered a first draft of the documentation -- it
needs a proper read-through, plus additions concerned with installing
the software, plus more detailed developer/maintainer notes.

<dt>Output of HTML down-converter should be compatible with HTX.
<dd>Should need nothing more than a quick check that this is true

<dt>Use of FPI: should we use <code>-//Starlink//...</code> or
<code>+//IDN star.rl.ac.uk...</code>? 
<dd>The second is a standard `registered prefix' built up from a DNS
domain name.  Is there any prospect of a <code>starlink.ac.uk</code>
domain name?

<dt>Coverpage image in DTD
<dd>Coming...

<dt>Dealing with exported labels: do not export by default, but warn very
        visibly (or fail) if policy not followed; emit a TOC of
        exported IDs at end, with links both ways; produce appropriate
        comments in HTML.
<dd>The `link policy' is expressed in DTD.  The exported-id list will
be little work.

<dt>Include some facility for dealing with obsolete exported IDs.
<dd>One
possibility (discussed at the programmers' meeting) was <code>&lt;sect
id=newid>Intro&lt;oldid id=oldid></code>, but that's not very flexible
-- it'd only apply to sections.  I thought instead of
<verbatim><![cdata[
<!element oldidlist o o (oldid+)>
<!element oldid     - o EMPTY>
<!attlist oldid
	id	id	#required	-- the now-obsolete id --
	newid	idref	#requred	-- replacement --
	-- resolve a reference to this element as if it were a
           reference to the element pointed to by newid, but
	   warn or issue an error about a deprecation --
	export	(export) #fixed export	-- for compat/consistency? --
	>
]]></verbatim>
This means that at the top of the document (probably), you could
include a list of elements:
<verbatim>
&lt;oldidlist>
&lt;oldid id=old.id newid=replacement.id>
&lt;oldid id=another.id newid=another.replacement>
&lt;/oldidlist>
</verbatim>
This is both perfectly generic, and usefully visible.

<dt>Include a print button in the generated HTML.
<dd>Easy

<dt>Sectioning: the references to CODECOLLECTION sections within
ROUTINECODE elements come out with the wrong numbers.
<dd>This probably needs some detailed fixing of
the code in (make-section-reference), but nothing too taxing.

<dt>BOS support
<dd>Support extraction of the BOS (the `bounded object set', a
formally-definable list of the entities required in a `complete'
source document set) from a source document.  This is
related to, but distinct from, the issue of generating a manifest of
generated files for packaging and 
distribution.  The latter isn't completely resolved, as
it's not transparently clear what to do with the entity declared
values of the codecollection and docxref elements.  Needs thought.
<p>Also, the manifest generated by the HTML stylesheet hoovers
<em/all/ the files which can be referenced, including &latex;-only
ones, and there's no corresponding manifest for the &latex; document.

<dt>Include elements for Examples, Notes, Warnings?
<dd>I think that examples should go within %body.content, and
contain paragraphs.  Notes and warnings should be in p.content?  I'm
not sure how necessary it is to support these so explicitly.

<dt>CSS?
<dd>INteraction with XML.

<dt>Link colouring
<dd>Dependent on type of link

</dl>
