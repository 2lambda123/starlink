<![ IGNORE [
  DTD for fortran code.

  Calls general programcode DTD (qv)

  Invoke with

    <!DOCTYPE programcode 
	PUBLIC "-//Starlink//DTD Fortran Source Code 0.7//EN">

  Author: 
    NG: Norman Gray (Glasgow)

  History: March 1999 (NG):
    Original version

  Copyright 1999, Particle Physics and Astronomy Research Council.

  $Id$
]]>

<!ENTITY % DTD.Version "DTD Starlink Fortrancode 0.7">

<!--============================== Notation ==============================
  The Fortran notation is declared in the PROGRAMCODE DTD which this
  INCLUDEs at the end.
-->
<!ENTITY % language.attr	-- language attribute declaration --
	 "language NOTATION (fortran77) #FIXED fortran77">

<!--============================== Architectures ==============================

  Declare the PROGRAMCODE DTD to be an architecture.

  This doesn't have a huge impact, but as well as being The Right HyTime
  Thing To Do, it allows us to impose the PROGRAMCODE structure even
  on (admittedly rare) files which do whizzy things in their internal
  DTD subset.
-->
<?IS10744 ArcBase programcode>
<!NOTATION 
	programcode
		-- A base architecture used in conformance with the
		   Architectural Form Definition Requirements of
		   International Standard ISO/IEC 10744 --
	SYSTEM ''>
<!ENTITY % generalcode.dtd
	PUBLIC "-//Starlink//DTD Program Source Code 0.7//EN">
<!ATTLIST #NOTATION programcode
	ArcFormA
		NAME #FIXED programcode
	ArcDTD
		CDATA "%generalcode.dtd"
	ArcDocF
		CDATA #FIXED programcode
	>


<!--============================== Maps ==============================

  Set up maps, to make typing prologues easier.

  Collect a suitable set of starttag and cdata entities.

  First, arrange that ^*+ and ^*- begin and end the prologue, and that
  ^* is IGNOREd while within the prologue.
-->
<!ENTITY startprologue.ref	STARTTAG "routineprologue">
<!ENTITY endprologue.ref	STARTTAG "codebody">
<!ENTITY nullentity.ref		CDATA "">
<!ENTITY partype.ref		STARTTAG "type"	>
<!ENTITY pardesc.ref		STARTTAG "description">

<!ENTITY % Additional.Char.Ents
	PUBLIC "-//Starlink//ENTITIES Additional entities//EN//LATEX"
	>
<!ENTITY % ISOents
	PUBLIC  "ISO 8879:1986//ENTITIES Added Latin 1//EN//LATEX"
	>
%Additional.Char.Ents;
%ISOents;


<!SHORTREF	generalmap	"&#RS;*+"	startprologue.ref
						>
<!SHORTREF	prologuemap	"&#RS;*-"	endprologue.ref
				"&#RS;*"	nullentity.ref
				>
<!SHORTREF	textmap		"&#RS;*-"	endprologue.ref
				"&#RS;*"	nullentity.ref
				"--"		endash
				"_"		underscore
				'"'		quot
				"~"		nbsp
				>

<!--
  Now some tricksier stuff for documenting routine parameters.
  Structure is

     <!ELEMENT parameter - O (name, type, description)>

  Within PARAMETER element, have `=' be a shortref for TYPE (don't
  have it within NAME, since that element is also used within the
  ROUTINENAME element) and discard &#RS;* as usual.  Within TYPE, have
  both `:' and &#RE be shortrefs for DESCRIPTION.  Within the
  DESCRIPTION, merely discard &#RS;*

  This means that

    <parameter given>
      <name>Blah
      <type>float
      <description>This is a variable

  is contractable to

    <parameter given>
      Blah = float
      This is a variable

  Note that this scheme means that we can't have `textmap' enabled
  within element <name>, because within the <name> enclosed by
  <parameter> we need `=' to be a shortref for partype.ref (which maps
  to <type>).  We can't reasonably have `=' included in `textmap', as
  this would cause chaos whenever anyone used an `=' sign in normal
  text.  If we could have different maps for `name inside parameter'
  and `name everywhere else', there would be no problem; but we can't,
  so there.  We could get round this by having <parameter> consist of
  elements (parametername, type, description).

-->
<!SHORTREF	parametermap	"="		partype.ref
				"&#RS;*"	nullentity.ref
				>
<!SHORTREF	partypemap	"&#RE;"		pardesc.ref
				":"		pardesc.ref
						>

<!USEMAP	generalmap	programcode	>
<!USEMAP	prologuemap	routine		>
<!USEMAP	parametermap	parameter	>
<!USEMAP	partypemap	type		>
<!USEMAP	textmap		(p | px | title | tabular)>



<!--============================== DTD Body ==============================

  Finally, INCLUDE the text of the general DTD
-->
%generalcode.dtd;
