<!--
  This is the Starlink General DTD.  It should not be used
  independently, but invoked from another DTD via:

    <!entity % Starlink.general
	public "-//Starlink//DTD Starlink General 0.1//EN">
    %Starlink.general;

  The DTD should define the following parameter entities:

    DocClass       : as SUN, SGP, etc
    req.abstract   : see below
    DTD.Version    : version of the calling DTD

  Defaults for these (except DTD.Version) are given below.
-->

<!entity % DTD.General.Version "DTD Starlink General 0.1">


<!--========== HyTime ==========-->
<!--
  The HyTime standard is ISO 10744:1997, referred to as simply
  `HyTime' below.
-->

<!--
  See Hytime A.3 for AFDR definition.

  The PI here is that described in HyTime A.3.3.  In, examples posted
  to comp.text.sgml by, eg, Kimber, I've seen the PI as simply
  <?ArcBase blah>, but that might simply be a hangover from an earlier
  version - it doesn't appear to be blessed by the standard.  It seems
  to be the form of the PI which SP once recognised - no longer true.
-->
<?IS10744 ArcBase HyTime documentsummary>
<!-- <?IS10744 ArcBase HyTime> -->

<!-- Define the AFDRMeta and HyTime notations -->
<!NOTATION AFDRMeta PUBLIC 
	"ISO/IEC 10744:1997//NOTATION AFDR Meta-DTD Notation//EN">

<!NOTATION
	HyTime	-- A base architecture used in conformance with the
		   Architectural Form Definition Requirements of
		   International Standard ISO/IEC 10744. --

	PUBLIC 'ISO/IEC 10744:1997//NOTATION
                Hypermedia/Time-based Structuring Language (HyTime)//EN'
	>

<!--
  I'm slightly confused about _precisely_ how to declare this.  HyTime
  A.3.4.3 gives several templates; I'm not completely sure which one
  is correct, because I don't deeply follow the distinctions, but this
  one appears to work!  One Kimber example (also on c.t.s) declares
  this as <!...ndata afdrmeta>, but that is plausibly a mistyping, as
  NDATA is specifically for data the parser isn't supposed to examine.
-->
<!ENTITY HyTime.DTD 
	public 'ISO/IEC 10744:1997//DTD AFDR Meta-DTD
                Hypermedia/Time-based Structuring Language (HyTime)//EN'
	CDATA AFDRMeta
>


<!ATTLIST #NOTATION HyTime	
	-- cf. 10744:1997 11.1.1, Basic hyperlinking HyTime document --
	ArcFormA	NAME	HyTime
	ArcNamrA	NAME	HyNames
	ArcSuprA	NAME	sHyTime
	ArcIgnDA	NAME	HyIgnD
	ArcDocF		NAME	#fixed	HyDoc
	ArcDTD		CDATA	"HyTime.DTD"
	ArcQuant	CDATA	#fixed	"NAMELEN 9"
	ArcDataF	NAME	#fixed	HyBridN
	ArcBridF	name	#fixed	HyBrid
	ArcAuto		(ArcAuto|nArcAuto)	nArcAuto
	ArcOptSA	NAMES	"GenArc base links locs rend sched"

	-- Support attributes for HyTime only --
	hyqcnt		NUMBER	32
	GenArc		CDATA	"altreps included superdcn"
	base		CDATA	"bos"
	locs		CDATA	
			"nmsploc multloc refctl referatt refloc queryloc"
	links		CDATA	#fixed	"hylink clink agglink traverse"
	exrefs		NAME	exrefs
	manyanch	NUMBER	2
>

<![ include [
<!--
    The declaration for the DocumentSummary architecture is simple.
    Since all the elements in the AF have matching names in this DTD,
    the automatic mapping takes care of all of it.  See HyTime
    A.3.6.2, `Architectural markup minimisation'.
-->
<!NOTATION documentsummary SYSTEM ''>
<!ENTITY documentsummary.dtd
	public "-//Starlink//DTD Document Summary 0.1//EN"
	cdata AFDRMeta
	>
<!ATTLIST #NOTATION documentsummary
	ArcFormA
		name
		documentsummary
	ArcDTD
		cdata
		"documentsummary.dtd"
	ArcNamrA
		cdata
		#fixed "docsumma"
	>
]]>


<!--========== Parameter entities for configuration ==========-->
<!entity % DocClass "SUN">

<!--
  The calling DTD may define %req.abstract to be one of the following,
  to make an abstract mandatory, optional or forbidden.  
-->
<!entity % req.abstract "abstract?,"	-- optional abstract -->
<!entity % req.abstract "abstract,"	-- required abstract -->
<!entity % req.abstract ""		-- forbidden abstract -->


<!--=========== Feature Switches ==========-->
<!--
  Use %Only.paper and %Only.web in source documents to distinguish
  variant texts for paper and hypertext versions.  More
  meta-information than the ones above, which concern themselves with
  the output format, and which are intended to be used only within
  this DTD.  Some documents may be invalid unless one of these is defined.
-->
<!entity % Only.paper	"IGNORE">
<!entity % Only.web	"IGNORE">

<!--
  The entity %Feature.Versioning controls whether the HISTORY and UPDATE
  elements are permitted in the document.  It may be turned off by
  declaring it as 'ignore' in the including DTD or possibly by the
  document instance in a declaration subset (though the latter should
  probably be discouraged other than for MUDs).

  Default: present.
-->
<!entity % Feature.Versioning	'include'>

<!--
  The entity %Feature.Dateonly controls whether we have a simple DATE
  element in place of the HISTORY one.  It is NOT intended to be
  set outside this DTD - if you want this, then set
  %Feature.Versioning to be 'ignore'.  

  ONE OR THE OTHER, BUT NOT BOTH, of %Feature.Versioning and
  %Feature.Dateonly must be set to include.  If both are set, chaos
  will probably ensue, but I can't work out how to report such an
  error from the DTD.
-->
<![ %Feature.Versioning [
  <!-- If %Feature.Versioning is 'include', then ignore %Feature.Dateonly -->
  <!entity % Feature.Dateonly	'ignore'>
]]>
<!entity % Feature.Dateonly	'include'>

<!--
  The entity %Feature.Docnumber controls whether the DOCNUMBER element
  is required in the head, or forbidden

  Default: present
-->
<!entity % Feature.Docnumber	'include'>

<!--
  The entity %Feature.Routinelist controls whether the ROUTINELIST
  element is permitted in the backmatter.

  Default: absent
-->
<!entity % Feature.Routinelist 'ignore'>


<!--========== Entities for special symbols ==========-->
<!entity % CharEnts public
	"-//Starlink//ENTITIES Character entity collections//EN">
%CharEnts;


<!--======== Shortrefs ==========-->
<!entity openQ starttag "quote">
<!entity closeQ endtag "quote">

<!shortref textabbrevsmap	"--"	endash
				"~"	nbsp
				'"'	openQ>
<!shortref Qmap 		'"'	closeQ>

<!usemap textabbrevsmap (p | px)>
<!usemap Qmap           quote>

<!--========== Abbreviations ==========-->

<!-- none? -->


<!--========== Overall document structure ==========-->

<!entity % gversion.attr "generalversion cdata #fixed '%DTD.General.Version;'">
<!entity % version.attr "version cdata #fixed '%DTD.Version;'">

<!element %DocClass o o (docinfo, docbody)>
<!attlist %DocClass
	%gversion.attr;
	%version.attr;
	urllinkpolicy		-- Declare the URL policy for the
				   DocumentSummary architecture.  The
				   architectural instance has the same
				   structure as this document, so that
				   URLs for link targets may be
				   generated automatically.  See the
				   DocumentSummary architecture DTD
				   for discussion.  --
		cdata
		#fixed automatic
	>

<!--========== Document head ==========-->
<![ %Feature.Versioning [
    <!entity % history ',history'>
    <!entity % update 'update*,'>
]]>
<!entity % history ',docdate' -- %Feature.Dateonly must have been set -->
<!entity % update ''>
<!-- either HISTORY or DOCDATE elements will be present in DTD -->

<![ %Feature.Docnumber [
    <!entity % docnumber ',docnumber'>
]]>
<!entity % docnumber ''>


<!--
  Fix the order of the elements in docinfo.model.  There's no real
  reason why we need the order to be arbitrary (and it can always be
  loosened up later on), and using the `,' connector rather than `&'
  makes the DTD more nearly conformant with XML.  Also, 
  having the order fixed means that the AUTHORLIST start tag can be
  made omissable.
-->
<!entity % docinfo.model 'title , authorlist , keyword* %docnumber %history'>
<!element DOCINFO o o (%docinfo.model)>

<!element TITLE		o o (#pcdata)	
			-- contains document title.  This is marked as
			   omissable: it typically won't be, in the
			   document head, but the same element is used
			   as the first subelement of SUBHEAD, and
			   both have to be omissable if we're to be
			   able to write section headings as
			   `<sect>title...' -->
<!element AUTHORLIST	o o (author+, otherauthors?)
					-- contains author names -->
<!element OTHERAUTHORS	- o (author+)	-- other contributors -->
<!element AUTHOR	- o (#pcdata)	-- contains author's name -->
<!element KEYWORD	- o (#pcdata)	-- contains a keyword for document -->

<!attlist author
	email		-- author's email address	--
		cdata	#implied
	webpage		-- author's home page		--
		cdata	#implied
	affiliation	-- author's physical address/affiliation, etc --
		cdata	#implied
	role		-- editor, maintainer, etc	--
		cdata	#implied	
	id		-- eg, initials, referred to in element UPDATE --
		id	#required
--
	status
		(current|past)	current
		Remove this: this information is better in the
		OTHERAUTHORS element.
--
	>

<![ %Feature.Docnumber [
    <!element DOCNUMBER - o (#pcdata)	-- document number in series -->
    <!attlist docnumber
	unassigned	-- indicates that no number has (yet?) been assigned
			   to this document, and so that any content should be
			   ignored --
		(unassigned)
		#implied
	documenttype	-- Declare the type of the document element.
			   This is redundant for processing of _this_
			   DTD (but might make it more convenient),
			   but is needed for the DocumentSummary 
			   DTD, which doesn't otherwise know what the
			   original document type was. --
		cdata
		#fixed %DocClass
	-- Remap the DOCUMENTTYPE attribute to the
			   TYPE element of the DocumentSummary's
			   DOCNUMBER element --
	-- Not necessary, since now the General DTD has an attribute
	   of the same name on its DOCNUMBER element --
--
	docsumma
		cdata
		#fixed "type documenttype"
--
	>
]]>

<![ %Feature.Versioning [
<!--
  The history consists of a series of versions, each of which contains
  a series of releases.  There must be at least one release, so the
  first will typically have no `release number'.  The versions and releases
  must be in chronological order, with the latest last.
-->
<!element HISTORY	- o (version+)>
<!element VERSION	- o (release+)>
<!element RELEASE	- o (px+)	
			-- contains free-text notes on the release -->

<!attlist release
	date
		number	#required	
		-- The date this release was made. Format: yyyymmdd --
	versionid
		id	#required	
		-- An id to allow UPDATE elements to refer to a
		   specific version.  It can be anything, but a
		   sensible format is v10-5, for example (it can't
		   start with a number) --
	>
<!-- end of %Feature.Versioning -->
]]>

<![ %Feature.Dateonly [
<!-- Instead of the elaborate history mechanism, we can have just a
  plain document date -->
<!element DOCDATE - o (#pcdata)>
]]>

<!--========== Document body ==========-->
<!entity % body.content '%update (p | verbatim)*'>

<!--
  I'm don't think we need to have the bibliography, indexcontents
  and notecontents as elements.  Their existence should instead be
  inferred whenever there are references to material in the body of
  the document.
-->
<![ %Feature.Routinelist [
  <!entity % backmatter	
	"routinelist?, (bibliography? & indexcontents? & notecontents?)">
]]>
<!entity % backmatter	"bibliography? & indexcontents? & notecontents?">

<!-- 
  Content model for element DOCBODY.  Presence or absence of abstract
  is controlled by definition of %req.abstract.  Instead of the sect*
  clause of the content model, we could have `(sect+ | part+)?', and
  include either a sequence of SECTs or a sequence of PARTs, but I
  don't see the need for this extra complication right now.

  As for appendices, I considered <!element appendix - o (...)> with
  the same content model as for SECT, but this way (with <!element
  appendices - o (sect+)> ) we have the same structure within
  appendices as outside, and it seems simply neater.  The only
  drawback is that we no longer have `<appendix>appendix title'
  reminding us we're in an appendix, and searching for something in an
  appendix's title (within an SGML aware search engine, for example)
  will need a further level of qualification.  But these both seem
  disposable.
-->
<!entity % docbody.model 
	       '%req.abstract 
		%body.content,
		sect*,
		appendices?, 
		(%backmatter)'>

<!element DOCBODY o o (%docbody.model)>

<!--========== Sectioning ==========-->

<!entity % section 
	"sect | subsect | subsubsect | subsubsubsect">

<!--
<!element PART          - o (subhead, %body.content, sect*)>
...and add `part|' to the %section list
-->
<!element SECT          - o (subhead, %body.content, subsect*)>
<!element SUBSECT       - o (subhead, %body.content, subsubsect*)>
<!element SUBSUBSECT    - o (subhead, %body.content, subsubsubsect*)>
<!element SUBSUBSUBSECT - o (subhead, %body.content)>

<!element APPENDICES	- o (sect+)>

<!--
  The attributes listed here for %section are a minimal set.  Other
  possibilities, which were used in the HYPAPER DTD which was a
  precursor to this one, are
	extname	cdata		#implied
	- External name, which can be used to refer to this
	place reliably from elsewhere.  It'll almost
	certainly be a filename root!  This is, I hope, redundant, as
	I expect to use something like HyTime to provide
	inter-document cross references.

	number	(nonumber)	#implied
	- numbering can be explicitly turned off for certain
	elements.  This is creeping presentationalism, and probably
	best avoided, as my experience with HYPAPER suggests that I
	only ever used it in a hacky way, to suggest some structure
	which should be otherwise present in the DTD.

	size	%body.sizes	#implied
	- This controlled the number of subsections which were broken
	off into separate pages, depending on whether
	size=(vshort|thispage|short|onepage|long|vlong)
	Calling it `size' is better than the explicit presentation
	hint of a subpages=n attribute, but it's still seems to be a
	presentational relic.  Depite that, there might still be some
	need for something like this, bearing in mind the likely (HTML)
	destination of the material.
-->
<!attlist (%section)
	id			-- unique ID for this section --
		id
		#implied
	indexkey 		-- contains the text of an index entry
				   which points to this section -- 
		cdata
		#implied
	export			-- if present, the document commits
				   itself to maintaining this ID in
				   future: that is, it can safely be
				   linked to from outside --
		(export)
		#implied
	>

<!-- Subhead and title are the header and title for (sub*)sections -->
<!element SUBHEAD o o (title)>

<!--
  UPDATE elements can appear in several places.  They are intended to
  tie in closely with the releases appearing in the HISTORY element,
  and the authors listed at the top.
-->

<![ %Feature.Versioning [
<!element UPDATE - o (px+)>

<!--
  It might be worth including a modification-type attribute, such
  as `added', `deleted' or `changed'.  Or is that becoming unduly
  cumbersome?   Do we need `date' when `version' is already required?
-->
<!attlist update
	version
		idref	#required
		-- version/release when the alteration was made --
		-- id matches one RELEASE element --
	author
		idref	#required
		-- author of modification.  id matches author element --
  	>
<!-- end of %Feature.Versioning -->
]]>

<!element ABSTRACT - - (px)+>

<!--========== Paragraphs, and the flow of text ==========-->

<!entity % simplephrase	"em | strong | quote | code | kbd | cite">
<!entity % references	"xref | docxref | webref | url">
<!entity % special	"index | note | draftnote | citation">
<!--
<!entity % structuring	"blockquote | table | figure | dl | ul | ol">
-->
<!entity % structuring	"blockquote | dl | ul | ol">

<!entity % phrase	"%simplephrase | %references">
<!--
  I think this is too general a definition for simpletext:
  <!entity % simpletext	"(#pcdata | %phrase | %special)*">
-->
<!entity % simpletext	"(#pcdata | %simplephrase )*">

<!--
  %phrase: different types of phrase display within text.
  distinction between %simplephrase and %otherphrase is that
  %otherphrase couldn't sensibly be included within %phrase elements.

  %structuring: larger things, which can appear within a paragraph, but which
  contain more text, or more complication, than the phrase markup.
  Includes the three different types of lists.

  %special: miscellanea.  The main distinction is that %special aren't
  allowed in PX
-->

<!--
  Make the paragraph start tag omissable.  It won't often be possible
  to omit it, but if we make it omissable, then we can have (p+)
  content for things like the abstract and  list items, writable in a
  natural way, without requiring the author to put in the P start tag
  by hand.

  The id attribute is a bit of a pain to implement, but useful.
-->
<!entity % p.model 
    '%update (#pcdata | %phrase | %special | %structuring)*'>
<!element P o o (%p.model)>
<!attlist p
	id	id	#implied	-- id for this paragraph --
	>

<!--
  The PX element is identical to the P paragraph (and should probably
  be treated the same by the application), but is more restrictive,
  and so can be used within NOTEs, for example, without clumsy
  exclusions.  It'll also help find `missing end tag' errors.
-->
<!entity % px.model '%update (#pcdata | %phrase | %structuring)*'>
<!element PX o o (%px.model)>

<!element (EM | STRONG | CITE) - - (#pcdata|%simplephrase)*>

<!--
  CODE is part of %phrase markup, and is for inline text such as
  pathnames which needs to be shown in a distinctive font.  KBD is
  much the same, except that it is for text a user should type.  That
  is, these are identical at the DTD level.
-->
<!element (CODE|KBD) - - (#pcdata)	-- literal text -->

<!--
  VERBATIM is part of %block, and is for extended blocks of verbatim
  text.  It should be set in a fixed-width font, and preserve line
  ends.  The contents of VERBATIM will possibly need to be enclosed in
  <![ cdata [...]]>
-->
<!element VERBATIM - - (#pcdata)	-- verbatim text -->

<!element BLOCKQUOTE - - (attribution?, px+)	-- extended quotation -->
<!element QUOTE - - (attribution?, (#pcdata|%phrase)+)	
					-- simple quotation  -->
<!element ATTRIBUTION - - (#pcdata)	-- source of quotation -->

<!element DRAFTNOTE - - (#pcdata)	-- Notes during drafting -->

<!--========== Cross references, bibliography, indexing and notes ==========-->

<!element CITATION - - (#pcdata)	-- bibliography reference -->
<!attlist citation
	noref	(noref)	#implied
		-- noref means don't make any reference in the text: --
		-- just include an entry in the bibliography --
	>

<!element BIBLIOGRAPHY - o empty	-- bib contents, in
					   back-matter only -->
<!attlist bibliography
	bib	cdata	#required	-- name of bibliography --
	all	(all)	#implied	-- list all of bib, not just citns --
	>
<!--
  How about an alternative bibliography, with elements in place?  Or
  make bibliography non-empty, and have its contents supplement those
  in the database.
-->

<!element NOTE - - (px)+		-- foot/endnotes -->
<!element NOTECONTENTS - o empty	-- body of footnotes, in
					   back-matter only --> 

<!--
  We perhaps need to think carefully about how INDEX interrelates with
  the A element.  It's tricky, because index might be given the source
  or target of a link in a down-converted document
-->
<!element INDEX - - (#pcdata)>
<!element INDEXCONTENTS - o empty	-- the index, in back-matter only -->

<!attlist index
	key	cdata	#implied	-- key, if not element contents --
	>

<!--========== Routine list ==========-->
<![ %Feature.Routinelist [

<!element ROUTINELIST - - (p*,routine+) 
	-- routines optionally prefaced by text-->
<!element ROUTINE - o (routinename, summary, description, usage,
  parameterlist, examples, routinenotes?)>
<!element ROUTINENAME	- o (#pcdata)>
<!element SUMMARY 	- o (#pcdata)>
<!element DESCRIPTION	- o (p+)>
<!element USAGE		- o (#pcdata)>
<!element PARAMETERLIST	- o (parameter,paramdesc)+>
<!element EXAMPLES	- o (p+)>
<!element ROUTINENOTES	- o (p+)>

<!element PARAMETER	- o (#pcdata)>
<!element PARAMDESC	- o (#pcdata)>

<!attlist parameter
	type	(real,integer,char,logical,ndf)	#required
	access	(r,w,rw)	#required
	>
]]>

<!--========== Links and cross references ==========-->
<!--
  There are several distinct types of links:

  * Internal to the document
    Element XREF: empty.  Can refer to sections, tables, and possibly
    to paragraphs.

  * To other Starlink documents
    Element DOCXREF: empty.

  * To URLs
    Element WEBREF: contains self anchor, just like HTML A element.
    Also element URL, containing URL.

  * To graphics, and other transclusion targets>
    Element GRAPHIC: empty.
-->

<!--
  First declare the DSSSL notation, so we can refer to SDQL queries.
  (this comes from dsssl/style-sheet.dtd
-->
<!NOTATION DSSSL   PUBLIC "ISO/IEC 10179:1996//NOTATION
                   DSSSL Architecture Definition Document//EN"
                -- A document architecture conforming to the
                   Architectural Form Definition Requirements of
                   ISO/IEC 10744.     --
>

<![ ignore [
<!-- Also define the XPointer notation -->
<!NOTATION XPointer SYSTEM "http://www.w3.org/TR/WD-xptr" >
]]>


<!--
  XREF element is for internal cross-references.  It's empty.
  For a detailed discussion of how to implement this, see Eliot
  Kimber's 9 March 1998 posting to comp.text.sgml.  The implementation
  here has only a dummy SDQL query at present.  In future, I want this
  to use SDQL to include an element 
  title if present, but otherwise simply construct the link from the
  referent's section number, or construct some other self-link text.  The
  element's syntax will not change when I make this improvement.
-->
<!element XREF - o empty 
				-- Internal cross reference, with
				   effective content to be title of
				   target -- 
> 
<!attlist XREF
	id			-- internal target of link --
		idref
		#required

	-- following are HyTime attributes --
	ref-title		-- pointer to title of reference target --
		cdata
		#fixed "SDQL query..."
	loctype			-- declare addressing method --
		cdata
		#fixed "ref-title queryloc DSSSL"
	rflocsrc		-- bind the ref-title attribute to the
				   ID attribute, which specifies the
				   source of the ref-title query --
		cdata
		#fixed "ref-title id"
	valueref		-- make the effective content of this
				   element the resource pointed to by
				   ref-title --
		cdata
		#fixed "#CONTENT ref-title"
	HyTime			-- bind to HyTime clink form --
		name
		#fixed "clink"
	HyNames			-- bind id attribute to clink's linkend --
		cdata
		#fixed "linkend id"
	>


<!--
  DOCXREF cross-references elements and data within other Starlink documents,
  ie ones which have a number of the format SUN/123, or whatever.  Refer to
  the document using a rflocsrc of this format, and further discriminate using
  an (`exported') ID within that document.  I considered using XPointers to
  refer to IDs or other content within that document, but confined it, for the
  moment, just to IDs.  This can be extended in the future to full XPointer
  queries, without invalidating anything which is valid under this more
  restrictive declaration (a bare ID is a valid XPointer (check!)).  XLL isn't
  a solution here, because we don't want to be confined to referring to the
  other document through a URI.  XPointers should be more generally
  implemented in future, so this notation will fit naturally into a future
  development of this format, into XML, for example.

  This is all more intricate than it might at first appear: see HyTime clause
  7.8.

  The following is very closely related to the example in HyTime note
  176, except that the equivalent of LOC there has an incorrect value
  prescription of IDREFS, which is corrected in the first TC.  In an
  earlier version of this (never implemented), the DOC attribute had a
  value prescription of CDATA, and was interpreted as a queryloc for a
  Starlink document.  This might seem more straightforward, but I
  think it's probably less good.  The current scheme, with the DOC
  declared as an entity, means that we have to predeclare all the
  entities we might want to refer to.  That doesn't seem like a good
  thing, but it means that they can all be declared in one catalogue,
  specific to a site, and that intelligence about where documents are
  (local or through a URL?) can be encoded there, specific to each
  site where the documents are used.

  The link's effective content should be whatever corresponds to the title of
  the object addressed by LOC.  I'm not sure quite how to make this more
  precise or, equivalently, how to express this within HyTime
  declarations (Xpointers?).
-->
<!element DOCXREF - O empty
				-- References to elements and data within other
				   Starlink documents -- 
	>
<!attlist DOCXREF
	doc			-- Starlink document which holds the target --
		entity
		#required
	loc			-- location within document, or whole document
				   if this is missing --
		cdata
		#implied

	-- following are the HyTime attributes --
	loctype			-- declare addressing method --
		cdata
		#fixed "loc idloc"
	rflocsrc		-- declare that the LOC is a reference
				   relative to the document addressed by
				   DOC --
		cdata
		#fixed "loc doc"
	HyTime			-- bind to HyTime clink form --
		name
		#fixed "clink"
	HyNames			-- bind id attribute to clink's linkend --
		cdata
		#fixed "linkend loc"
	>

<!--
  WEBREFs.  The WEBREF is just like the HTML A element, and
  its declaration here is lifted more-or-less directly from HyTime
  note 177.  Note, however, that there's no NAME defined here, and the
  URL is required.
-->

<!notation URL 
	public '-//IETF/RFC1738//NOTATION Uniform Resource Locator//EN'
	-- see also RFC1808, Relative URLs --
	>

<!element WEBREF - - (%simpletext)*>
<!attlist WEBREF
	url		-- URL --
		cdata	#required

	-- following are HyTime declarations --
	HyTime
		name	#fixed clink
	HyNames		-- make the clink linkend the url --
		cdata	#fixed "linkend url"
	anchcstr	-- this element is a source anchor, and the
			   target anchor URL must be specified --
		names	#fixed "self required"
	linktrav	-- link traversal options: we can do anything at the
			   current anchor, but traversal is one-way (as far as
			   this declarations is concerned; browsers, of
			   course, can and do support other behaviour) --
		names	#fixed "A D"
	loctype		-- declare that URL is a URL query --
		cdata	#fixed "url QUERYLOC URL"
	>


<!--
  URL provides a way of embedding URLs in the document.  The element
  is made a link anchor, with its content acting as the address.

  There's a case for giving this element a HREF attribute, to provide a usable
  URL, if the one specified is abbreviated for some reason. However, this is
  probably a bad idea, as one would expect that an element named URL would
  contain something you could just type into a web browser.
-->
<!element URL - - (#pcdata)>
<!attlist URL
	nolink		-- suppress actually making the URL `live': if this
			   attribute is present, the URL is presented, but not
			   made active as a link --
		(nolink)	#implied

	-- following are HyTime attributes --
	HyTime
		name
		#fixed "clink"
	HyNames		-- the linkend attribute is given as the content of
			   the element (see HyTime A.3.5.2) --
		cdata
		#fixed "linkend #content"
	anchcstr
		names
		#fixed "self required"
	linktrav
		names
		#fixed "A D"
	loctype
		cdata
		#fixed "#content QUERYLOC URL"
	>

<!--========== Lists ==========-->
<!entity % dl.model '%update (dt,dd)+'>
<!element DL - - (%dl.model)>
<!element DT - o (#pcdata | %phrase)+>
<!element DD - o (p)+>

<!entity % oul.model '%update (li)+'>
<!element (OL|UL) - - (%oul.model)>
<!element LI - o (p)+>


<![ ignore [
<!-- Ignore the TABLE and FIGURE stuff for the moment -->
<!--========== Tables ==========-->
<!-- 
  This is basically the Wilbur tables DTD, with some extensions
  from the HTML 3 DTD <http://www.w3.org/pub/WWW/TR/WD-tables.html>
  and some deletions.  It adds the COL element
  and removes ROWSPAN (because it's murder to implement!).

  Not all the attributes in here are interpreted by the down-converters.
-->

<!entity % cell.halign
        "halign  (left|center|right) #IMPLIED"
	-- horizontal alignment attributes for cell contents --
        >

<!entity % cell.valign
        "valign  (top|middle|bottom|baseline)  #IMPLIED"
	-- vertical alignment attributes for cell contents --
        >

<!entity % table.model 
	'%update caption?, (colgroup*,col*), thead?, tfoot?, tbody+'>
<!element TABLE - - (%table.model)>

<!element CAPTION - - %simpletext	-- table or figure caption -->

<!element COLGROUP - O (col*)>
<!element COL - o empty>

<!element (THEAD|TFOOT) - O (tr+)	-- table header and footer -->
<!element TBODY O O (tr+)		-- repeatable table body -->

<!element TR - O (th | td)+>
<!element (TH|TD) - O %simpletext>

<!attlist table				-- table element --
	id	id	#implied
	wide	(wide | narrow) narrow	-- formatting hint --
        frame   (void | border) #implied
					-- what edges to draw --
        rules   (none | groups | rows | cols | all) #implied
					-- rules between entries --
        float	(float | nofloat) nofloat -- should it be allowed to float? --
        >

<!attlist tr 				-- table row --
        %cell.halign;			-- horizontal alignment in cells --
        %cell.valign;			-- vertical alignment in cells --
        >

<!attlist (th|td)			-- header or data cell --
        nowrap	(nowrap)  #IMPLIED	-- suppress word wrap --
        colspan	NUMBER   1		-- number of cols spanned by cell --
        %cell.halign;			-- horizontal alignment in cells --
        %cell.valign;			-- vertical alignment in cells --
        width	cdata	#implied	-- width specification --
        >

<!attlist col
        width	cdata	#implied	-- width specification --
        %cell.halign;			-- horizontal alignment in cells --
        %cell.valign;			-- vertical alignment in cells --
        >


<!--========== Figures ==========-->
<!entity % figure.model '%update caption?, (figuresrc+ | figurecontent)'>
<!element FIGURE - - (%figure.model)>
<!element FIGURESRC - o empty>
<!element FIGURECONTENT - - (px)+>

<!--
  The figure element has one or more figuresrc elements within it,
  each of which has a URL and a MIME type associated with it.  The
  down-converter should pick a source based on the MIME types it
  can deal with, or else use the alt attribute for the figure. 

  Alternatively, figurecontent is arbitrary text which is to be taken
  as the figure's content.
-->
<!attlist figure
	id	id		#implied
        alt     cdata    	#required   
		-- for (HTML) display in place of image --
	wide	(wide|narrow)	narrow	-- formatting hint --
        float    (float|nofloat) nofloat -- should it be allowed to float? --
        >

<!attlist figuresrc
	src	cdata		#required
	mime	cdata		#required
	>


]]>
