<![ IGNORE [
  DTD for program source code structure.

  This DTD was not designed to be used on its own, but instead
  INCLUDEd at the end of a language-specific DTD, which defines a
  notation, and sets up shortref maps to make inputting the source
  file easier - for example, the Fortran DTD makes `^*+' a shortref
  for the CODEPROLOGUE start tag, and IGNOREs `^*' within the
  CODEPROLOGUE.  However, since it _is_ intended to be used as an
  architecture, it _could_ be used on its own, if you have an
  application which can benefit from that.  I would recommend not
  doing that, however, until there's a clear benefit: the present
  practice of making different `editions' of this for different
  languages forces me to think a little about the different languages'
  requirements, and which features might need to be restricted or expanded.

  Additions to the list of supported languages requires at least
  modifying the %notationlist ENTITY, and adding appropriate notation
  definitions.

  Invoke with something like:

    <!ENTITY % DTD.Version "DTD Starlink Fortrancode 0.7">
    <!ENTITY % language.attr	-- language name --
	 "language NOTATION (fortran77) #FIXED fortran77">
    <!ENTITY % generalcode.dtd
	PUBLIC "-//Starlink//DTD Program Source Code 0.7//EN">
    %generalcode.dtd;

  The definition of the %language.attr ENTITY is required.
  The %direction.attr ENTITY may also be predefined, and if the DTD
  which calls this one wishes to do other architectural remapping
  (only the DSSSL one does at present), then it can define further
  attributes as noted below.

  Author: 
    NG: Norman Gray (Glasgow)

  History: 
    March 1999 (NG):
      Original version

  Copyright 1999, Particle Physics and Astronomy Research Council.

  $Id$
]]>

<!ENTITY % DTD.Programcode.Version "DTD Programcode 0.7">
<!ENTITY % DTD.Version "UNKNOWN"	-- client DTD should specify this -->


<!--========== Special entity ==========-->
<!-- I need to be able to refer to the SGML declaration which is
     appropriate for this DTD, from within the stylesheets.  Since
     DSSSL doesn't have access to the entity manager (I don't think),
     and since I can't work out how to declare entities in the catalog
     (the ENTITY declaration seems not to work as I'd expect it to),
     the only way round seems to be to declare an entity here which
     points to the declaration's public-id.  This is available to the
     stylesheets, and the catalog can resolve it ok.  I think....

     I don't believe this is the best way to go about this, but I
     _cannot_ work out a better one.

     This is a copy of the corresponding declaration in the Starlink
     General DTD.
     -->
<!ENTITY starlink.decl 
	PUBLIC "-//Starlink//TEXT Starlink Declaration//EN"
	>
<!ENTITY xml.decl
	PUBLIC "-//Starlink//TEXT XML Declaration//EN"
	>


<!--============================== Entities ==============================
  Collect parameter entities here.  These could be overridden by the
  invoking DTD.
-->

<!-- The %direction.attr ENTITY is attached to function arguments, and
     indicates which direction the argument is moving.  Calling DTDs may
     modify this as appropriate, as long as the modified version is a
     subset of this list.  

     Once included `givenandreturned', but this was removed, and the
     default changed, after the SGML meeting on 19991019.
     -->
<!ENTITY % direction.attr
	"given (given) #IMPLIED
	 returned (returned) #IMPLIED"
	-- input or output to function -->
<!--ENTITY % direction.attr 
	"direction (given|returned|givenandreturned) #REQUIRED"
	-->

<!-- %language.attr ENTITY must be declared by the DTD which includes
     this one.  That DTD should declare the ENTITY as something like

       <!ENTITY % language.attr
	 "language NOTATION (fortran77) #FIXED fortran77">

     using one of the notations declared here.
     -->
<!ENTITY % notationlist "fortran77 | DSSSL">
<!ENTITY % language.attr
        "language NOTATION (%notationlist;) #IMPLIED">

<!-- Just for convenience, also define &lt, &gt and &amp entities -->
<!--
<!ENTITY lt "<">
<!ENTITY gt ">">
<!ENTITY amp "&">
<!ENTITY quot '"'>
-->

<!--========== Entities for special symbols ==========-->
<!ENTITY % LaTeX.entities 'IGNORE'>
<!ENTITY % HTML.entities 'IGNORE'>

<!ENTITY % Full.SGML.Only 'INCLUDE'>

<![ %Full.SGML.Only; [
<![ %LaTeX.entities; [
<!ENTITY % Additional.Char.Ents
	PUBLIC "-//Starlink//ENTITIES Additional entities//EN//LATEX"
	>
<!ENTITY % ISOents
	PUBLIC  "ISO 8879:1986//ENTITIES Added Latin 1//EN//LATEX"
	>
]]>
<![ %HTML.entities; [
<!ENTITY % Additional.Char.Ents
	PUBLIC "-//Starlink//ENTITIES Additional entities//EN//HTML"
	>
<!ENTITY % ISOents
	PUBLIC  "ISO 8879:1986//ENTITIES Added Latin 1//EN//HTML"
	>
]]>
<!ENTITY % Additional.Char.Ents
	PUBLIC "-//Starlink//ENTITIES Additional entities//EN//PLAIN"
	>
<!ENTITY % ISOents
	PUBLIC  "ISO 8879:1986//ENTITIES Added Latin 1//EN//PLAIN"
	>
]]>

<!-- Finally, the XML versions -->
<!ENTITY % ISOents
	PUBLIC	"ISO 8879:1986//ENTITIES Added Latin 1//EN//Unicode"
	"ISOent/xml/iso-lat1.ent"
	>
<!-- Most of these `additional' entities are selections from the ISO set. -->
<!ENTITY % Additional.Char.Ents
	PUBLIC "-//Starlink//ENTITIES Additional entities//EN//Unicode"
	"entities-unicode.ent"
	>

%Additional.Char.Ents;
%ISOents;

<![ IGNORE [
<!-- Omit these shortrefs, since they cause trouble.  The
     language-specific DTDs which include this use short reference
     maps to skip comments and the like.  If we try to enable the
     following maps within <p> elements, we get trouble, because (in
     the case of the Fortran DTD, for example) "^*" is no longer
     ignored, and, more seriously, "^*-" is no longer recognised as
     the end of the prologue, unless the previous paragraph element is
     explicitly closed.
     -->

<!--======== Shortrefs ==========-->
<!-- Have double-dash as a shortref for &endash, but don't define a
     separate shortref for emdash.  This way, we could switch between
     endash and emdash by changing this declaration. 
     -->
<!SHORTREF textabbrevsmap	"--"	endash
				"_"	underscore
				'"'	quot
				"~"	nbsp>
<!-- Enable this map in the following elements.  This means it's
     enabled in all (?) of the places where text naturally goes,
     like the abstract, plus section and other titles
     -->
<!USEMAP textabbrevsmap (p | px | tabular | title)>
<!-- ...but suspend it where it's liable to cause trouble (thanks Mark!) -->
<!USEMAP #EMPTY (m|mequation|meqnarray|verbatim|code|kbd)>
]]>

<!-- Language notations are declared here.  The DTDs which INCLUDE
     this one may declare attributes to these notations (for example, the
     DSSSLCODE DTD uses the DSSSL notation to declare the DSSSL DTD as an
     architecture).  See ``ISO/IEC JTC1/WG4 N1958, Information technology
     - Text and office SYSTEMs - Using SGML Public Identifiers for
     Specifying Data Notations''
     <http://www.ornl.gov/sgml/wg4/document/1958.htm>.

     Note that the DSSSL notation declaration mentioned in the above
     document is different from this (unimportantly, I believe).

     Note also that I've changed the name of the Fortran notation to
     Fortran77, to support a future distinction of this from Fortran 90.
     -->
<!NOTATION DSSSL      PUBLIC 
                      "ISO/IEC 10179:1996//NOTATION
                         DSSSL Architecture Definition Document//EN"
                      -- A document architecture conforming to the
                         Architectural Form Definition Requirements of
                         ISO/IEC 10744.     --
	>
<!NOTATION fortran77  PUBLIC 
                      "ISO/IEC 1539:1991//NOTATION
                         Information technology - Programming languages -
                         FORTRAN//EN"
	>
<!NOTATION c		PUBLIC 
			"ISO/IEC 9899:1990//NOTATION
                         Programming languages - C//EN"
	>

<!NOTATION perl		PUBLIC
			"+//IDN www.perl.org//NOTATION Perl Scripting language//EN"
	>

<!NOTATION shell	PUBLIC
			"-//Starlink//NOTATION Shell script - sh or csh//EN"
	>

<!NOTATION script	PUBLIC
			"-//Starlink//NOTATION Other language script//EN"
	>

<!-- Add the other notations.  We tend not to have figures in
     programcode prologues, but we _can_ have maths, so we need the
     latexmaths notation.
     -->
<!ENTITY % notations-subset 
	PUBLIC "-//Starlink//ELEMENTS Starlink Notation Declarations//EN"
	>
%notations-subset;

<!--==================== Element structure ====================-->
<!ELEMENT programcode	O O (docblock, routine*, (codegroup | codereference)*)
		-- Document element -->
<!ELEMENT codegroup	- O (docblock, routine+)
		-- A codegroup is a collection of functions or other
		   code which can sensibly be grouped together.
		   There's no particular semantics implied by the
		   grouping, as far as this DTD is (currently)
		   concerned. -->
<!ELEMENT codereference	- O (docblock)
		-- A codereference is a rather vague thing, at
		   present.  It's intended to document some
		   relationship with code in another document.  The
		   only use I've put it to so far is to have the
		   DSSSLCODE DTD make this architectural, and map to
		   the EXTERNAL-SPECIFICATION element in DSSSL.
		   However, it could sensibly also document the fact
		   that a fortran file might depend on an INCLUDE
		   file.

		   The document referred to should be marked up using
		   the programcode DTD. -->

<!ELEMENT docblock	O O (title, description?,
 			     authorlist?,
			     userkeywords?, softwarekeywords?,
			     copyright?, history?,
			     mdefs?)
	>

<!ELEMENT routine	O O (codeopener?, routineprologue, codebody)
		-- The specification of one function, or procedure or
		   other code.  At one time, we distinguished
		   functions from `miscellaneous' code, but the only
		   difference was that the `func' had a longish list
		   of required elements, while the `misccode' element
		   didn't.  Now that most of these elements are
		   optional, the distinction is unnecessary. -->
<![ IGNORE [
<!ELEMENT misccode	O O (miscprologue, codebody)
		-- Other code, not reasonably
		   categorised as a function -->
]]>
<!ELEMENT codeopener	O O (#PCDATA)
		-- Contains any program code between the <routine>
		   start-tag and the routineprologue.  This
		   accomodates the usual Starlink way of laying out
		   source files, with a one-line function declaration
		   preceding the function documentation, which in turn
		   precedes the function body. -->
<!ELEMENT codebody	O O (#PCDATA)
		-- The actual code -->

<!ATTLIST routine
	id	ID	#IMPLIED
	>
	<!-- attributes:
		id		ID indentifying this function
	-->

<!ENTITY % gversion.attr 
	"generalversion CDATA #FIXED '%DTD.Programcode.Version;'">
<!ENTITY % version.attr
	"version CDATA #FIXED '%DTD.Version;'">

<!-- Attributes for programcode codegroup and codebody.  Add
     architectural control attributes here.  If they are defined
     before this, the %....arch.atts must be set to something
     sensible.  This isn't terribly flexible as it stands, but that's
     OK, since it's really only used by the DSSSL programcode DTD.
     -->

<!ENTITY % codegroup.arch.atts '' >
<!ENTITY % codebody.arch.atts '' >
<!ENTITY % codereference.arch.atts ''>
<!ENTITY % programcode.arch.atts ''>

<!ATTLIST programcode
	%gversion.attr;
	%version.attr;
	%programcode.arch.atts;
	>

<!ATTLIST codegroup
	%language.attr;
	%codegroup.arch.atts;
	>
<!ATTLIST codereference
	doc	 	-- the document containing the code being
			   referred to --
		ENTITY #REQUIRED
	docid		-- an ID within the above document, if needed
			   to further distinguish the target --
		NAME #IMPLIED
	%codereference.arch.atts;
	>
<!ATTLIST codebody
	EMPTY		-- Is element empty?  The application
			   _currently_ IGNOREs the element content,
			   but if something generates a document
			   conforming to this DTD directly (as opposed
			   to one of its clients), then this attribute
			   should be present (for neatness if nothing
			   else) if the body doesn't actually contain
			   anything. --
		(empty) #IMPLIED
	%codebody.arch.atts;
	>

<!--========== Paragraph content ==========-->
<!-- This inclusion declares the P and PX elements, and their content.
     We do want cross-references, but only the WEBREF and URL ones,
     and not the DOCXREF or REF ones.  So set this feature to IGNORE,
     copy the declarations of URL and WEBREF from the paracontent DTD,
     and add them to the simplephrase entity.
     -->
<!--
<!ENTITY % Feature.Paracontent.References 'IGNORE'>
<!ENTITY % additional.simplephrase '| funcname | webref | url'>
-->
<!ENTITY % Feature.Paracontent.References 'INCLUDE'>
<!ENTITY % additional.simplephrase '| funcname'>

<!ENTITY % paragraph.elements 
	PUBLIC "-//Starlink//ELEMENTS Starlink Paragraph Elements 0.7//EN">
%paragraph.elements;

<![ IGNORE [
<!-- The elements in %para.markup are as follows
       code     : verbatim program code
       em       : emphasis
       url      : a URL - the stylesheet might make a link here
       funcname : the name of a function, presumably in the same broad
                  collection of code.  The stylesheet may make a link
                  here, if there's some clever way of finding the
                  referenced function.
     -->
<!ENTITY % para.markup 'code | em | url | funcname'>
<!ENTITY % para.content '(#PCDATA | %para.markup | ul)*'>
]]>

<!ENTITY % paralist 'p, (p | tabular)*'>

<!-- The code prologue is the documentation of the routine.  I'd consider
     making the connectors here into `&'; that can be done in future if
     we decide that's necessary.

     Make these AND connectors rather than SEQ (,), even though this
     probably makes some tags (argumentlist?) non-omissable.

     The list of elements here is related to the list of SST elements
     which were used by the (now more-or-less defunct) SST tool (see
     SUN/110).  The mapping is:

	routinename	sstroutine
	moduletype	[none]
	purpose		[none]
	description	sstdescription
	returnvalue	sstreturnedvalue
	argumentlist	sstarguments/sstparameters
	authorlist	[none]
	history		[none]
	usage		sstusage
	invocation	sstinvocation
	examplelist	sstexamples
	[none]		sstnotes	(subsumed within notelist)
	diytopic	sstdiytopic
	implementationstatus	sstimplementationstatus
	bugs		sstbugs

     This content model is UGLY, but is forced by the demand that
     diytopics be allowed ad lib within the prologue, while still
     imposing restrictions on the number and order of the other
     elements.  This is partly looking forward to an XML version of
     the DTD.

     It's not obvious that the routineprologue element needs a
     copyright element as well as the docblock, but the
     routineprologue elements will (typically?) come from separate
     files, and it's appropriate that these files have copyright
     notices of their own.
     -->
<!ELEMENT routineprologue O O (
				(routinename,	diytopic*)? &
				(moduletype,	diytopic*)? &
				(purpose,	diytopic*)? &
				(description,	diytopic*)  &
				(returnvalue,	diytopic*)? &
				(argumentlist,	diytopic*)? &
				(parameterlist,	diytopic*)? &
				(authorlist,	diytopic*)? &
				(copyright,	diytopic*)? &
				(history,	diytopic*)? &
				(usage,		diytopic*)? & 
				(invocation,	diytopic*)? & 
				(examplelist,	diytopic*)? &
				(implementationstatus,	diytopic*)? & 
				(bugs,		diytopic*)?
				)>
<![ IGNORE [
<!ELEMENT miscprologue	O O (description, history?)
				-- content model needs future expansion? -->
]]>

<!ELEMENT routinename	- O (name, othernames?)
				-- some routines have a generic name
				   like `proc_<type>', plus other
				   names like `proc_real'. -->
<!ELEMENT moduletype	- O (#PCDATA)>
<!ELEMENT name		O O (#PCDATA)>
<!ELEMENT othernames	- O (name+)>

<!ELEMENT purpose	- O (%p.model)
				-- brief (one line?) description -->
<!ELEMENT title		O O (#PCDATA)>
<!ELEMENT description	- O (%paralist;)
				-- longer discursive description -->
<!ELEMENT (userkeywords | softwarekeywords)
			- O (#PCDATA)
				-- keywords for users, and denoting
				   software group -->
<!ELEMENT returnvalue	- O (%paralist;)
				-- If there's no return value, there
				   needn't be any explanatory text -->
<!ELEMENT (argumentlist | parameterlist)
			- O (parameter*)
				-- In Starlink usage, `arguments' are
				   the things passed to functions, and are
				   distinct from `parameters', which
				   are the arguments for ADAM
				   applications. -->
<!ELEMENT examplelist	- O ((example,examplenote)+)>
<!ELEMENT example	- O (#PCDATA) 
				-- text of the example, set in tt font -->
<!ELEMENT examplenote	- O (%paralist;)
				-- discussion of the example -->
<!ELEMENT funcname - - (#PCDATA)
			-- funcname : the name of a function,
			   presumably in the same broad collection of
			   code.  The stylesheet may make a link here,
			   if there's some clever way of finding the
			   referenced function. -->


<!ATTLIST routinename
	id	ID	#IMPLIED
	>
	<!-- attributes:
		id		ID identifying this routine.  This is
				_equivalent_ to having this same ID on
				the routine element, and is included
				as an alternative since it might be
				more convenient in some circumstances
				for the ID to be mentioned here rather
				than on <routine>.
	-->

<!ATTLIST argumentlist
	none		-- Attribute present if there are no
			   arguments.  There shouldn't be any
			   PARAMETER content in this case. --
		(none)
		#IMPLIED
	>
<!ATTLIST returnvalue
	none		-- Attribute present if there is no
			   return value. --
		(none)
		#IMPLIED
	type		-- Type of returned value --
		CDATA
		#IMPLIED
	>


<!-- The AUTHOR element collects information about an author.  There
     is no central location for this information, but it is instead
     gathered from the scattered AUTHOR elements.  The `id' for each
     author is not an SGML ID, but is a keyword which is supposed to
     be distinct for different authors.  The problem is that the
     routine elements are typically maintained in _separate_ source
     files, but also have to be standalone as human-readable files.
     That means (a) the information will typically be duplicated, and
     (b), the ids couldn't be SGML IDs, since there's only one of each
     of those in a document.  A design in which the author elements in
     the routines _do_ have IDs which link to some other repository of
     details is attractive, but turns out to be impractical, since
     that forces the author of the skeleton document which collects
     all these files to collect all the author information together.
     On balance, it seems adequate to have in-principle distinct
     author elements scattered amongst the program source files,
     rather loosely linked by the non-ID ids.

     For completeness (and comparison), here's the documentation of
     the old design: The AUTHOR element includes full details about an
     author and has a required ID attribute, the AUTHORREF element
     simply refers to an AUTHOR element elsewhere using an IDREF.  We
     need the distinction since it follows that a document can have
     only one AUTHOR element per author.  If the actual text of a
     document is scattered amongst several source-code files, then it
     would be appropriate for the scattered files to have AUTHORREF
     elements, and for the corresponding AUTHOR element to be in a
     CODEGROUPHEAD element in a `master' file which collects together
     the source-code files for documentation purposes.  It might be
     appropriate to let the AUTHORREF element have some content, so
     that a suitable note can go in the source-code file, to make it
     more nearly standalone.  -->
<!ELEMENT authorlist	- O (author+, otherauthors?)>
<!ELEMENT otherauthors	- O (author+)
				-- other authors who have contributed -->
<!ELEMENT history	- O (change+)
				-- the changes should be in
				   chronological order, with newest last -->
<!ELEMENT copyright	- O (%paralist;)
				-- Copyright message -->

<!ELEMENT author	- O (name, authornote?)
				-- name child contains the author name -->
<!ELEMENT authornote	- O (%paralist;)
				-- Other information/notes about this
				   author -->
<!ELEMENT change	- O (%paralist;)>
<!ELEMENT parameter	- O (name, type, description)>
<!ELEMENT type		- O (#PCDATA)>

<!ELEMENT (usage | invocation | implementationstatus | bugs)
			- O (%paralist;)>
<!--ELEMENT notelist	O O (othernote+)-->
<!ELEMENT diytopic	- O (title, %paralist;)>


<!ATTLIST parameter
	optional 	-- is the parameter optional?  Optional means that
			   the parameter will be defaulted if omitted,
			   and keyword means that the parameter is
			   specified with a keyword.  Both mechanisms
			   are used in both DSSSL and IDL (for
			   example). --
		(optional|keyword) #IMPLIED
	default		-- The default value of an optional parameter,
			   if omitted --
		CDATA #IMPLIED
	%direction.attr;
	>

<!ATTLIST author
	id		-- identify author --
		CDATA
		#REQUIRED
	affiliation	-- where based --
		CDATA
		#IMPLIED
	email		-- author's email address --
		CDATA
		#IMPLIED
	webpage		-- author's URL --
		CDATA
		#IMPLIED
	-- etc... add further author details --
	>
<!ATTLIST change
	author		-- who made this mod? --
		CDATA
		#REQUIRED
	date		-- ... and when? --
		CDATA
		#REQUIRED
	>

<![ IGNORE [
<!-- Copy the declarations of the WEBREF and URL elements from the
     paracontent DTD.  See note above with `paragraph content', and
     see the paracontent DTD for documentation.
     -->
<!NOTATION URL PUBLIC '-//IETF/RFC1738//NOTATION Uniform Resource Locator//EN'>
<!ELEMENT webref - - (%simpletext)+>
<!ATTLIST webref
	url		CDATA	#REQUIRED
	HyTime		NAME	#FIXED clink
	HyNames		CDATA	#FIXED "linkend url"
	anchcstr	NAMES	#FIXED "self required"
	linktrav	NAMES	#FIXED "A D"
	loctype		CDATA	#FIXED "url QUERYLOC URL"
	>
<!ELEMENT url - - (#PCDATA)>
<!ATTLIST url
	nolink		(nolink)	#IMPLIED
	HyTime		NAME	#FIXED "clink"
	HyNames		CDATA	#FIXED "linkend #CONTENT"
	anchcstr	NAMES	#FIXED "self required"
	linktrav	NAMES	#FIXED "A D"
	loctype		CDATA	#FIXED "#CONTENT QUERYLOC URL"
	>

]]>

<!--========== Maths definitions ==========-->
<!-- The contents of the mdefs element are processed as maths, in the
     sense that they are included in the same output stream as the
     other maths elements.  It is intended to contain
     definitions/newcommands to help with the writing of maths
     elements elsewhere in the document.  It's obviously possible to
     put other LaTeX in here (ie, it's impossible to stop folk from
     doing this), but they should be heavily discouraged from this, as
     it could wreak havoc with different down-converters.
     -->
<!ELEMENT mdefs			%MXX; (#PCDATA)>
<!ATTLIST mdefs
	notation
	NOTATION(latexmaths) #FIXED latexmaths
	>



<!--========== Tables ==========-->
<!-- Use the OASIS Exchange Table Model subset of the CALS table model.
     See http://www.oasis-open.org/html/a503.htm for discussion, and
     http://www.oasis-open.org/html/publtext.htm for PUBLIC texts.

     The Exchange Table Model can be customised.  Adjust the table entry
     model, and remove the %titles ENTITY

     Also rename the table element to `tabular'.  This fits in well with
     the LaTeX model folk will be familiar with, and allows us to
     separate the floating plus captioning plus ID stuff from the
     lining-it-up-in-columns of tabular layouts.

     This Programcode DTD uses the same TABULAR element as the General
     DTD, but does not use the TABLE element.
     -->
<!ENTITY % tbl.table.name 'tabular'>
<!ENTITY % tbl.table-titles.mdl ''>
<!ENTITY % tbl.entry.mdl '(%phrase)*'>
<!ENTITY % calstbls 
	PUBLIC "-//OASIS//DTD Exchange Table Model 19960430//EN">
%calstbls;
