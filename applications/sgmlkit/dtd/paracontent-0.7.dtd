<!-- These are the body content elements used in the Starlink
     General DTD, split off into a separate file so they can also be used
     by the Programcode DTD.

     This DTD fragment defines a P and PX element, and suitable
     content for each of them.  It also defines %p.model and
     %px.model, which are (obviously) the corresponding content models.

     Usage:

       <!ENTITY % paragraph.elements 
	 public "-//Starlink//ELEMENTS Starlink Paragraph Elements 0.7//EN">
       %paragraph.elements;

     Author:
       NG: Norman Gray (Glasgow)

     History: September 1999 (NG):
       Original version
       $Id$

     Copyright 1999, Particle Physics and Astronomy Research Council.
     -->

<!-- This paragraph-content DTD has been modified so that it can be
     used as part of either an SGML or an XML DTD.  Part of this
     modification was parameterising the tag-omission specifiers so
     that they could be defined away when used within an XML DTD.  We
     therefore have to define these here, in such a way that this acts
     as an SGML DTD by default, in case they haven't been
     defined already.  This means that this DTD can be used from
     within an SGML DTD without modifying that DTD (eg, the
     programcode DTD).
     -->
<!ENTITY % MXX "- -">
<!ENTITY % MXO "- O">
<!ENTITY % MOO "O O">

<!-- Can predefine %update.or to more useful content.  See
     starlink-general DTD for details. -->
<!ENTITY % update.or ''>
<!ENTITY % update.fc ''>


<!--========== Features ==========-->
<!-- Use %Feature.Paracontent.References to include the reference
     elements defined here.  If you wish to add to the list of
     elements in the %references entity, you can define
     %additional.references (which is ignored if this feature is not set).
     -->
<!ENTITY % Feature.Paracontent.References 'INCLUDE'>


<!-- The lists below can be added to by declaring these entities.  You
     can add to the element contents by defining any of the entities
     %additional...., to be a list of elements, defined elsewhere,
     starting with an OR connector.

     %additional.special: miscellanea in P model.  The main distinction is that
     %additional.special aren't allowed in PX.
     -->
<!ENTITY % additional.special		"">
<!ENTITY % additional.structuring	"">
<!ENTITY % additional.simplephrase	"">
<!-- also %additional.references: see Feature.Bodycontent.References below -->

<!--========== Element classes ==========-->
<!-- %phrase: different types of phrase display within text.
     distinction between %simplephrase and %phrase is that
     %simplephrase elements can go more-or-less anywhere, whereas %phrase
     includes all of the non-structuring elements.  In order that this
     DTD can be used as an XML DTD as well as an SGML one, content
     models which include #PCDATA must be restricted to OR connectors,
     with #PCDATA coming _first_.  This means that the entities
     %phrase and %simpletext must come first in any content models in
     which they appear.

     updates: the original SGML version of para.content had
     (update*,(%phrase)*), so that all updates were neatly clustered
     at the beginning of the content.  This isn't possible in XML, so
     update must be demoted to %structuring, and it can appear anywhere.

     %structuring: larger things, which can appear within a paragraph,
     but which contain more text, or more complication, than the
     phrase markup.  Includes the three different types of lists.

     %maths: the two `display' maths elements, with M in %simplephrase
     -->

<![ %Feature.Paracontent.References; [
  <!ENTITY % additional.references	"">
  <!ENTITY % references	"| ref | docxref | webref | url 
			%additional.references;">
]]>
<!ENTITY % references	"">

<!ENTITY % simplephrase	"| em | strong | quote | code | kbd | cite | m
			 | angle | foreign
			%additional.simplephrase;">
<!ENTITY % structuring	"| blockquote | dl | ul | ol | verbatim | linespecific 
			%update.or;
			%additional.structuring;">
<!ENTITY % maths	"| mequation | meqnarray">
<!ENTITY % simpletext	"#PCDATA %simplephrase;">
<!ENTITY % phrase	"%simpletext; %references; %maths;">


<!--========== Paragraphs, and the flow of text ==========-->

<!-- Make the paragraph start tag omissable.  It won't often be possible
     to omit it, but if we make it omissable, then we can have (p+)
     content for things like the abstract and  list items, writable in a
     natural way, without requiring the author to put in the P start tag
     by hand.

     The id attribute is a bit of a pain to implement, but useful.
     -->
<!ENTITY % p.model '(%phrase; %structuring; %additional.special; )*'>
<!ELEMENT p %MOO; %p.model;>
<!ATTLIST p
	id	ID	#IMPLIED
	>
	<!-- attributes:
		id		id for this paragraph
		-->

<!-- The PX element is identical to the P paragraph (and should probably
     be treated the same by the application), but is more restrictive,
     and so can be used within NOTEs, for example, without clumsy
     exclusions.  It'll also help find `missing end tag' errors.
     -->
<!ENTITY % px.model '(%phrase; %structuring;)*'>
<!ELEMENT px %MOO; %px.model;>

<!ELEMENT em		%MXX; (%phrase;)*>
<!ELEMENT strong	%MXX; (%phrase;)*>
<!ELEMENT cite		%MXX; (%phrase;)*>
<!ELEMENT foreign	%MXX; (%phrase;)*>

<!-- CODE is part of %phrase markup, and is for inline text such as
     pathnames which needs to be shown in a distinctive font.  KBD is
     much the same, except that it is for text a user should type.  That
     is, these are identical at the DTD level.

     Allow %references within CODE: see verbatim below.
     -->
<!ENTITY % code.model '(#PCDATA %references;)*'>
<!ELEMENT code	%MXX; %code.model;>
<!ELEMENT kbd	%MXX; %code.model;>
			<!-- literal text -->
<!ATTLIST code
	type	(fspath)	#IMPLIED
	>
	<!-- attributes:
		type		what type of thing is it?  Used for
				formatting hints.  Types are fspath:
				filesystem path.
		-->

<!-- VERBATIM is part of %structuring, and is for extended blocks of verbatim
     text.  It should be set in a fixed-width font, and preserve line
     ends.  The contents of VERBATIM will possibly need to be enclosed in
     <![ cdata [...]]>.

     Allow %references within verbatim text, allowing us to include
     <webref> and <ref id=... text=...> within verbatim examples, making
     the corresponding text `live' in electronic versions of documents.

     Also allow %simplephrase: the intention is to allow KBD in there,
     to display examples, but there might be legitimate applications of
     the other elements, too.
     -->
<!ENTITY % verbatim.model '(#PCDATA %simplephrase; %references;)*'>
<!ELEMENT verbatim %MXX; %verbatim.model;>
				<!-- verbatim text -->
<!ELEMENT blockquote %MXX; (attribution?, px+)>
				<!-- extended quotation -->
<!ELEMENT quote %MXX; (%phrase;)*>
				<!-- simple quotation  -->
<!ELEMENT attribution %MXX; (%phrase;)*>
				<!-- source of quotation -->

<!ELEMENT linespecific %MXX; (line+)>
				<!-- sequence of lines which should
				     have line-breaks recognised (the name
				     comes from the similarly-named
				     notation in the DocBook DTD.
				     --> 
<!ELEMENT line %MXO; (%phrase;)*>

<!--========== Maths ==========-->
<!-- The M element corresponds to $...$ in TeX.  MEQUATION in text
     corresponds to the equation environment.  MEQNARRAY corresponds to
     the eqnarray environment, but with each line of the alignment
     specified in a MLINE element.  The content of that element should be raw
     LaTeX appropriate to the context, so that the content of MLINE
     within MEQNARRAY should have two & characters in it.

     In principle there are no restrictions on what LaTeX goes in here,
     other than that it be valid, but in practice, I expect that the
     author might need some slight awareness of any restrictions of the
     actual implementation.

     The actual equation number, and the id which allows you to refer to
     it, attach to the MLABEL element, one of which can be freely placed
     within both the MLINE and MEQUATION elements.  This is not as
     attractive, from the DTD point of view, as having the id attached to
     the parent element.  However, that turns out (perfectly
     unexpectedly) to be murder to implement in DSSSL (you have to work
     out the position of the current element in a sequence composed of
     those elements of two element types which have a particular
     attribute present).  The content model which includes MLABEL
     allows arbitrarily many labels in an equation.  This isn't too
     bad, but a model like (#PCDATA, (mlabel, #PCDATA)?) would
     probably be better, but XML has very tight restrictions on mixed
     content.

     Note that I'm declaring this as PCDATA content, accepting the force
     of the overwhelmingly negative discussion of CDATA/RCDATA at
     http://www.oasis-open.org/cover/topics.html#CDATA.  Note also that
     this means that & _is_ interpreted as an entity reference - there's
     a list of ways to get round that in one of the postings at that URL,
     but the simplest seem to be either AT&amp;T or <![cdata[ AT&T ]]>.
     -->
<!ELEMENT meqnarray	%MXX; (mline+)>
<!ELEMENT mline		%MXO; (#PCDATA | mlabel)*>
<!ELEMENT mequation	%MXO; (#PCDATA | mlabel)*>
<!ELEMENT mlabel	%MXO; EMPTY>
<!ATTLIST mlabel
	id	ID	#IMPLIED
	>
	<!-- attributes:
		id		unique ID for this equation
		-->

<!ELEMENT m		%MXX; (#PCDATA)>
<!ATTLIST m		notation	NOTATION(latexmaths) #FIXED latexmaths>
<!ATTLIST mline		notation	NOTATION(latexmaths) #FIXED latexmaths>
<!ATTLIST mequation	notation	NOTATION(latexmaths) #FIXED latexmaths>
	<!-- attributes:
		notation	the notation: fixed as LaTeX
		-->




<![ %Feature.Paracontent.References; [
<!--========== Links and cross references ==========-->
<!--
  There are several distinct types of links:

  * Internal to the document
    Element REF: EMPTY.  Can refer to sections, tables, and possibly
    to paragraphs.

  * To other Starlink documents
    Element DOCXREF: EMPTY.

  * To URLs
    Element WEBREF: contains self anchor, just like HTML A element.
    Also element URL, containing URL.
-->


<!-- REF element is for internal cross-references.  It's EMPTY.
     For a detailed discussion of how to implement this, see Eliot
     Kimber's 9 March 1998 posting to comp.text.sgml.

     The HyTime shenannigans below says that the element's effective
     content should be the title of the object it points to, or the
     caption in the case of figures and tables.  I'm not going to
     guarantee that this is precisely what the stylesheets do (check
     them), but this at least documents the intent.
     -->
<!ELEMENT ref %MXO; EMPTY>
		<!-- Internal cross reference, with effective content
		     to be title of target --> 
<!ATTLIST ref
	id		IDREF		#REQUIRED
	text		CDATA		#IMPLIED

	ref-title	CDATA
		#FIXED
		'(case (gi)
		   (("table" "figure")
		      (select-elements (children (current-node))
				       (list "caption")))
		   (else (select-elements (descendants (current-node))
					  (list "subhead" "title")))) '
	loctype		CDATA		#FIXED "ref-title queryloc DSSSL"
	rflocsrc	CDATA		#FIXED "ref-title id"
	valueref	CDATA		#FIXED "#CONTENT ref-title"
	HyTime		CDATA		#FIXED "clink"
	HyNames		CDATA		#FIXED "linkend id"
	>
	<!-- attributes:
		id		internal target of link

		text		optional overriding link text

		(following are HyTime attributes)
		ref-title	pointer to title of reference target

		loctype		declare addressing method

		rflocsrc	bind the ref-title attribute to the
				ID attribute, which specifies the
				source of the ref-title query

		valueref	make the effective content of this
				element the resource pointed to by
				ref-title
		HyTime		bind to HyTime clink form

		HyNames		bind id attribute to clink's linkend
		-->


<!-- DOCXREF cross-references elements and data within other Starlink
     documents, ie ones which have a number of the format SUN/123, or
     whatever.  Refer to the document using a rflocsrc of this format,
     and further discriminate using an (`exported') ID within that
     document.  I considered using XPointers to refer to IDs or other
     content within that document, but confined it, for the moment,
     just to IDs.  This can be extended in the future to full XPointer
     queries, without invalidating anything which is valid under this
     more restrictive declaration (a bare ID is a valid XPointer
     (check!)).  XLL isn't a solution here, because we don't want to
     be confined to referring to the other document through a URI.
     XPointers should be more generally implemented in future, so this
     notation will fit naturally into a future development of this
     format, into XML, for example.

     This is all more intricate than it might at first appear: see
     HyTime clause 7.8.

     The following is very closely related to the example in HyTime
     note 176, except that the equivalent of LOC there has an
     incorrect value prescription of IDREFS, which is corrected in the
     first TC.  In an earlier version of this (never implemented), the
     DOC attribute had a value prescription of CDATA, and was
     interpreted as a queryloc for a Starlink document.  This might
     seem more straightforward, but I think it's probably less good.
     The current scheme, with the DOC declared as an entity, means
     that we have to predeclare all the entities we might want to
     refer to.  That doesn't seem like a good thing, but it means that
     they can all be declared in one catalogue, specific to a site,
     and that intelligence about where documents are (local or through
     a URL?) can be encoded there, specific to each site where the
     documents are used.

     The link's effective content should be whatever corresponds to
     the title of the object addressed by LOC.  
     -->
<!ELEMENT docxref %MXO; EMPTY>
			<!-- References to elements and data within other
			     Starlink documents -->
<!ATTLIST docxref
	doc		ENTITY	#REQUIRED
	loc		CDATA	#IMPLIED
	text		CDATA	#IMPLIED

	loctype		CDATA	#FIXED "loc idloc ref-title queryloc DSSSL"
	ref-title	CDATA	
			#FIXED	'(node-list-first (children (current-node)))'
	rflocsrc	CDATA	#FIXED "loc doc ref-title loc"
	valueref	CDATA	#FIXED "#CONTENT ref-title"
	HyTime		CDATA	#FIXED "clink"
	HyNames		CDATA	#FIXED "linkend loc"
	>
	<!-- attributes:
		doc		Starlink document which holds the target.

		loc		location within document, or whole document
				if this is missing.

		text		optional overriding link text.  I'm
				slightly, concerned about this, as
				it seems to open up the possibility
				of abuse, but as long as authors
				are sensible....

		(following are the HyTime attributes)
		loctype		declare addressing method.

		ref-title	pointer to title of reference
				target: extract first child (TITLE)
				of element

		rflocsrc	declare that the LOC is a reference
				relative to the document addressed by
				DOC.

		valueref	make the effective content of this
				element the resource pointed to by
				ref-title.

		HyTime		bind to HyTime clink form.

		HyNames		bind id attribute to clink's linkend.
		-->

<!-- WEBREFs.  The WEBREF is just like the HTML A element, and
     its declaration here is lifted more-or-less directly from HyTime
     note 177.  Note, however, that there's no NAME defined here, and the
     URL is required.  See also RFC1808, Relative URLs
     -->

<!ELEMENT webref %MXX; (%simpletext;)*>
<!ATTLIST webref
	url		CDATA	#REQUIRED

	HyTime		CDATA	#FIXED clink
	HyNames		CDATA	#FIXED "linkend url"
	anchcstr	CDATA	#FIXED "self required"
	linktrav	CDATA	#FIXED "A D"
	loctype		CDATA	#FIXED "url QUERYLOC URL"
	>
	<!-- attributes:
		url		URL

		(following are HyTime declarations)
		HyTime		This is a HyTime form

		HyNames		make the clink linkend the url

		anchcstr	this element is a source anchor, and the
				target anchor URL must be specified

		linktrav	link traversal options: we can do
				anything at the current anchor, but
				traversal is one-way (as far as this
				declarations is concerned; browsers,
				of course, can and do support other
				behaviour).

		loctype		declare that URL is a URL query
		-->


<!-- URL provides a way of embedding URLs in the document.  The element
     is made a link anchor, with its content acting as the address.

     There's a case for giving this element a HREF attribute, to
     provide a usable URL, if the one specified is abbreviated for
     some reason. However, this is probably a bad idea, as one would
     expect that an element named URL would contain something you
     could just type into a web browser.
     -->
<!ELEMENT url %MXX; (#PCDATA)>
<!ATTLIST url
	nolink		(nolink)	#IMPLIED

	HyTime		CDATA		#FIXED "clink"
	HyNames		CDATA		#FIXED "linkend #CONTENT"
	anchcstr	CDATA		#FIXED "self required"
	linktrav	CDATA		#FIXED "A D"
	loctype		CDATA		#FIXED "#CONTENT QUERYLOC URL"
	>
	<!-- attributes:
		nolink		suppress actually making the URL
				`live': if this attribute is present,
				the URL is presented, but not made
				active as a link. 

		(following are HyTime attributes)
		HyTime		This is a HyTime form

		HyNames		The linkend attribute is given as the
				content of the element (see HyTime
				A.3.5.2). 

		anchcstr	Anchor constraint.

		linktrav	Link traversal rule.

		loctype		Query type.
		-->
]]>	<!-- %Feature.Paracontent.References; -->

<!--========== Lists ==========-->
<!ENTITY % dl.model '%update.fc; (dt,dd)+'>
<!ELEMENT dl %MXX; (%dl.model;)>
<!ELEMENT dt %MXO; (%phrase;)*>
<!ELEMENT dd %MXO; (p)+>

<!ENTITY % oul.model '%update.fc; (li)+'>
<!ELEMENT ol %MXX; (%oul.model;)>
<!ELEMENT ul %MXX; (%oul.model;)>
<!ELEMENT li %MXO; (p)+>

<!ATTLIST dl	compact		(compact) #IMPLIED>
<!ATTLIST ol	compact		(compact) #IMPLIED>
<!ATTLIST ul	compact		(compact) #IMPLIED>
	<!-- attributes:
		compact		contents would benefit from a more
				compact representation (formatting
				hint).
		-->

<!--========== Astronomical angles ==========-->
<!ELEMENT angle %MXO EMPTY>
<!ATTLIST angle
	unit
		(hours | degrees)	degrees
	angle
		CDATA			#IMPLIED
	minutes
		CDATA			#IMPLIED
	seconds
		CDATA			#IMPLIED
	fraction
		CDATA			#IMPLIED
	>
	<!-- attributes:
		unit		is the following angle in hours or degrees?
		angle		number or hours or degrees as appropriate
		minutes		number of minutes
		seconds		number of seconds
		fraction	fraction of a second

		Allowable specifications are a, a+m, a+m+s, a+m+s+f,
		m, m+s, m+s+f, s, s+f.
		-->
