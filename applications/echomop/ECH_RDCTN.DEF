*+
*  Name:
*     ECH_RDCTN.DEF

*  Description:
*     This file is used as input to data structure creation routines and
*     defines the format of the Echelle reduction specific data structure.
*     
*     The actual container file created is a Starlink ndf.
*     
*     This file is read by ECH_INIT_OBJ_PATHS to determine the
*     pathways to each primitive object in the reduction data structure.

*     Author  :       Dave Mills (UCL)
*     Date    :       07-June-1989
*     Version :       1.0     7-JUN-89
*                             Created prototype
*                     1.1     Temporary change to avoid as yet unsupported
*                             structure arrays
*                     1.3     Added registered paths
*     
*     Updates :       1.1     24-JUN-89
*                             Structure arrays with dimensions of
*                             'num_objects' reduced to dimension 1.
*                             Structure arrays with dimensions of
*                             'num_orders' reduced to dimension one, and
*                             all contined primitives extended to have
*                             additional dimension of 'num_orders'. The
*                             original structure will be restored when
*                             DSA support is available for structure arrays
*     
*                     1.2     5-JUL-89
*                             Added **REGISTERED... comments to be processed
*                             by ECH_INIT_OBJ_PATHS routine. Added array of
*                             initial order y-positions , and a dimension
*                             variable to force access to full array even
*                             when num_orders is indicating a specific order.
*     
*                     1.3     30-AUG-89
*                             Added **REGISTERED... comments for pathway
*                             definitions. Processed by ECH_INIT_OBJ_PATHS
*                             routine, allow greater flexibility in assigning
*                             pathnames.

*  Structure parameters:
*     These parameters must be set up by the environment specific subroutines
*     when performing data structure creation. They are used to specify
*     the maximum dimensions of the data structures, and also to allow
*     selective enabling/disabling of optional structure elements.
*     
*             NX              (Integer) X dimension of input images. REQUIRED.
*             tune_maxbin             (Integer) Twice X dimension of input images. REQUIRED.
*     
*             NY              (Integer) Y dimension of input images. REQUIRED.
*     
*             MAX_LINES       (Integer) Maximum number of arc lines per order
*                                       Defaults to NX / 4.
*     
*             NUM_ORDERS      (Integer) Number of echelle orders. REQUIRED
*     
*             NUM_OBJECTS     (Integer) Number of object spectra. Defaults to 1.
*     
*             OUTPUT_SIZE     (Integer) Maximum number of bins in output spectra
*                                       Defaults to NX * NUM_ORDERS * 2.
*     
*             DISTORTION      (Logical) TRUE if a 2D distortion fitting is
*                                       to be performed. Defaults to FALSE.
*     
*             DATA_QUALITY    (Logical) TRUE if a data quality 'image' is
*                                       to be produced. Defaults to FALSE.
*     
*             SKY_INFO        (Logical) TRUE is data on the 'sky' is to be included
*                                       Default is TRUE.
*     
*             COSMIC_INFO     (Logical) TRUE if data on the cosmic rays are to be
*                                       included. Default is TRUE.
*     
*             CHAR_DEFAULT    (Integer) Size of character fields. Default is 80.
*     
*     !       HIST_BINS       (Integer) No of bins in histograms of raw objects
*     
*     !       MAX_SKY_LINES   (Integer) Maximum number of sky lines per echellogram
*     
*     !       tune_pfsamp     (Integer) Max number of elements used to sample
*                                          profiles (spatial direction)
*     
*     !       tune_maxpoly    (Integer) Maximum order used when doing polynomial
*                                       fitting.
*     
*     !       tune_max2dply   (Integer) Maximum coefficients used when doing 2Dpolynomial
*                                       fitting.
*     
*     !       tune_max2dpnts  (Integer) Maximum number of 2D points used to do the
*                                       2D chebyshev distortion fitting
*     
*     For parameters marked with a ! , the default values are defined at compile
*     time. It is unlikely that these values will need to be changed very often.
*     To change them edit the ECH_DIMEN_PARS.INC file and recompile
*     the ECH package.
*     
*     Associated with these parameters are the following set of comment
*     lines which are recognised by ECH_INIT_OBJ_PATHS. The lines have
*     a rigid format which must be adhered to if any parameters are added.
*     Any parameters specified will NOT be evaluated at runtime when
*     the reduction package is accessing the reduction data structure.
*     In general ECHOMOP will attempt to translate any array/structure index
*     contained in a path, for example:
*
*        MAIN.ORDER_YPOS[num_objects,num_orders]
*
*     would cause the parameters 'num_orders' and 'num_objects' to be
*     evaluated and then the relevent element of the array would be mapped.
*     
*     To prevent the evaluation, a parameter is 'registered' as shown
*     below.  Whenever such parameters appear in a path, they are
*     replaced with the value 1.

*-

**REGISTERED INDEX VARIABLE => nx
**REGISTERED INDEX VARIABLE => ny
**REGISTERED INDEX VARIABLE => tune_maxrfln
**REGISTERED INDEX VARIABLE => no_of_bins
**REGISTERED INDEX VARIABLE => nx_rebin
**REGISTERED INDEX VARIABLE => tune_maxpoly
**REGISTERED INDEX VARIABLE => tune_max2dply
**REGISTERED INDEX VARIABLE => tune_max2dpnts

*       The following comment lines are recognised by ECH_INIT_OBJ_PATHS
*       and cause the relevant path-ways to be associated with reference 
*       names.
*       The format is:
*
*          **REGISTERED PATH => ref-name path-way

**REGISTERED PATH => ENVIR ENVIR
**REGISTERED PATH => DATA_QUALITY  DATA_QUALITY[NX,NY]
**REGISTERED PATH => COMMENT  COMMENT
**REGISTERED PATH => ARC  ARC[NREF_FRAME]
**REGISTERED PATH => CR_HIST  CR_HIST[HIST_BINS]
**REGISTERED PATH => CR_HIST_SCALE  CR_HIST_SCALE[HIST_BINS]
**REGISTERED PATH => SSKY_SPECTRUM  SSKY_SPECTRUM[NX_REBIN,NUM_ORDERS]
**REGISTERED PATH => SSKY_VARIANCE  SSKY_VARIANCE[NX_REBIN,NUM_ORDERS]
**REGISTERED PATH => SKY_SPECTRUM  SKY_SPECTRUM[NX,NUM_ORDERS]
**REGISTERED PATH => SKY_VARIANCE  SKY_VARIANCE[NX,NUM_ORDERS]
**REGISTERED PATH => SKY_LINES  SKY_LINES[tune_mxrfln]
**REGISTERED PATH => SKY_MASK  SKY_MASK[tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => FITTED_PFL  FIT_PFL[tune_maxpoly,tune_pflssamp,NUM_ORDERS]
**REGISTERED PATH => FITTED_SKY  FIT_SKY[nx,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => FSKY_ERRORS  FIT_ERR[nx,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => FITTED_SSKY  FIT_SSKY[nx_rebin,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => FSSKY_ERRORS  FIT_SERR[nx_rebin,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => OBJ_MASK  OBJ_MASK[tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => CALSKY_MASK  CALSKY_MASK[tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => CALOBJ_MASK  CALOBJ_MASK[tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => NX_PIXELS  NX_PIXELS
**REGISTERED PATH => NY_PIXELS  NY_PIXELS
**REGISTERED PATH => NO_OF_BINS  NO_OF_BINS
**REGISTERED PATH => NREF_FRAME  NO_OF_ARCS
**REGISTERED PATH => NX_REBIN  NX_REBIN
**REGISTERED PATH => ORDER_SLOPE  ORDER_SLOPE
**REGISTERED PATH => NO_OF_ORDERS  NO_OF_ORDERS
**REGISTERED PATH => TRACE_WIDTH  TRACE_WIDTH
**REGISTERED PATH => CENTRAL_ORDNUM  CENTRAL_ORDNUM
**REGISTERED PATH => ORDER_YPOS  ORDER_YPOS[NUM_ORDERS]
**REGISTERED PATH => DEK_BELOW  DEK_BELOW[NUM_ORDERS]
**REGISTERED PATH => DEK_ABOVE  DEK_ABOVE[NUM_ORDERS]
**REGISTERED PATH => CONTIN_PROFILE  CONTIN_PROFILE[tune_pflssamp,NUM_ORDERS]
**REGISTERED PATH => MODEL_PROFILE  MODEL_PROFILE[tune_pflssamp,NUM_ORDERS]
**REGISTERED PATH => STAR_BELOW  STAR_BELOW
**REGISTERED PATH => STAR_ABOVE  STAR_ABOVE
**REGISTERED PATH => STAR_PROFILE  STAR_PROFILE[tune_pflssamp,NUM_ORDERS]
**REGISTERED PATH => OBJ_BELOW  OBJ_BELOW
**REGISTERED PATH => OBJ_ABOVE  OBJ_ABOVE
**REGISTERED PATH => OBJECT_PROFILE  OBJECT_PROFILE[tune_pflssamp,NUM_ORDERS]
**REGISTERED PATH => OBJ_SKY_GAP  OBJ_SKY_GAP
**REGISTERED PATH => EXTRACTION_TYPE  EXTRACTION_TYPE
**REGISTERED PATH => EXTRACTED_ARC  EXTRACTED_ARC[NX,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => EXTR_ARC_VAR  EXTR_ARC_VAR[NX,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => EXTRACTED_STAR  EXTRACTED_STAR[NX,NUM_ORDERS]
**REGISTERED PATH => BLAZE_SPECT  BLAZE_SPECT[NX,NUM_ORDERS]
**REGISTERED PATH => BLAZE_MEDIANS  BLAZE_MEDIANS[NUM_ORDERS]
**REGISTERED PATH => EXTR_STAR_VAR  EXTR_STAR_VAR[NX,NUM_ORDERS]
**REGISTERED PATH => EXTRACTED_OBJ  EXTRACTED_OBJ[NX,NUM_ORDERS]
**REGISTERED PATH => EXTR_OBJ_VAR  EXTR_OBJ_VAR[NX,NUM_ORDERS]
**REGISTERED PATH => SCRNCHD_WAVES  SCRNCHD_WAVES[nx_rebin,NUM_ORDERS]
**REGISTERED PATH => SCRNCHD_ARC  SCRNCHD_ARC[nx_rebin,NUM_ORDERS]
**REGISTERED PATH => SCRNCHD_STAR  SCRNCHD_STAR[nx_rebin,NUM_ORDERS]
**REGISTERED PATH => SCRNCHD_OBJ  SCRNCHD_OBJ[nx_rebin,NUM_ORDERS]
**REGISTERED PATH => SCRNCHD_ARCV  SCRNCHD_ARCV[nx_rebin,NUM_ORDERS]
**REGISTERED PATH => SCRNCHD_STRV  SCRNCHD_STRV[nx_rebin,NUM_ORDERS]
**REGISTERED PATH => SCRNCHD_OBJV  SCRNCHD_OBJV[nx_rebin,NUM_ORDERS]
**REGISTERED PATH => FLUX_TABLE  FLUX_TABLE
**REGISTERED PATH => STAR_EXPOSURE  STAR_EXPOSURE
**REGISTERED PATH => OBJECT_EXPOSURE  OBJECT_EXPOSURE
**REGISTERED PATH => CALIBRATION  CALIBRATION[NX,NUM_ORDERS]
**REGISTERED PATH => CALIBRATED  CALIBRATED[NX,NUM_ORDERS]
**REGISTERED PATH => 1D_SPECTRUM  1D_SPECTRUM[NO_OF_BINS]
**REGISTERED PATH => ERR_SPECTRUM  ERR_SPECTRUM[NO_OF_BINS]
**REGISTERED PATH => STD_SPECTRUM  ERR_STDSPECTRUM[NO_OF_BINS]
**REGISTERED PATH => ERR_STDSPECTRUM  STD_SPECTRUM[NO_OF_BINS]
**REGISTERED PATH => WAVELENGTH  WAVELENGTH[NO_OF_BINS]
**REGISTERED PATH => HISTORY  HISTORY
**REGISTERED PATH => TRACE  TRACE[NX,NUM_ORDERS]
**REGISTERED PATH => TRC_IN_DEV  TRC_IN_DEV[NX,NUM_ORDERS]
**REGISTERED PATH => TRC_OUT_DEV  TRC_OUT_DEV[NX,NUM_ORDERS]
**REGISTERED PATH => TRC_CLIPPED  TRC_CLIPPED[NUM_ORDERS]
**REGISTERED PATH => TRC_POLY  TRC_POLY[tune_maxpoly,NUM_ORDERS]
**REGISTERED PATH => ARC_LINE_FWHM  ARC_LINE_FWHM
**REGISTERED PATH => MIN_DISPERSION  MIN_DISPERSION[NUM_ORDERS]
**REGISTERED PATH => MAX_DISPERSION  MAX_DISPERSION[NUM_ORDERS]
**REGISTERED PATH => LOW_SCH_LAMBDA  LOW_SCH_LAMBDA[NUM_ORDERS]
**REGISTERED PATH => HI_SCH_LAMBDA  HI_SCH_LAMBDA[NUM_ORDERS]
**REGISTERED PATH => FITTED_WAVES  FITTED_WAVES[NX,NUM_ORDERS]
**REGISTERED PATH => W_NPOLY  W_NPOLY
**REGISTERED PATH => ORDER_IDNUM  ORDER_IDNUM[NUM_ORDERS]
**REGISTERED PATH => WSEAR_START  WSEAR_START[NUM_ORDERS]
**REGISTERED PATH => WSEAR_END  WSEAR_END[NUM_ORDERS]

**REGISTERED PATH => REF_LINE_FWHM  REF_LINE_FWHM[NREF_FRAME]
**REGISTERED PATH => OBS_LINES  OBS_LINES[tune_maxrfln,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => OBS_INTEN  OBS_INTEN[tune_maxrfln,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => W_IN_DEV  W_IN_DEV[tune_maxrfln,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => W_OUT_DEV  W_OUT_DEV[tune_maxrfln,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => RMS_ERROR  RMS_ERROR[NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => W_POLY  W_POLY[tune_maxpoly,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => WID_POLY  WID_POLY[tune_maxpoly,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => ID_COUNT  ID_COUNT[NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => ID_LINES  ID_LINES[tune_maxrfln,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => ID_WIDTHS  ID_WIDTHS[tune_maxrfln,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => ID_STATUS  ID_STATUS[tune_maxrfln,NUM_ORDERS,NREF_FRAME]
**REGISTERED PATH => ID_WAVES  ID_WAVES[tune_maxrfln,NUM_ORDERS,NREF_FRAME]

**REGISTERED PATH => W2_NX_POLY  W2_NX_POLY
**REGISTERED PATH => W2_NY_POLY  W2_NY_POLY
**REGISTERED PATH => IN_USE  IN_USE[NUM_ORDERS]
**REGISTERED PATH => W2_IN_DEV  W2_IN_DEV[tune_max2dpnts,NUM_ORDERS]
**REGISTERED PATH => W2_OUT_DEV W2_OUT_DEV[tune_max2dpnts,NUM_ORDERS]
**REGISTERED PATH => W2_CLIPPED  W2_CLIPPED[NUM_ORDERS]
**REGISTERED PATH => W_POLY_2D  W_POLY_2D[tune_maxpoly,tune_maxpoly,NUM_ORDERS]
**REGISTERED PATH => FITTED_FLAT  FF_SPECS[nx,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => FLAT_ERRORS  FF_ERR[nx,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => REBIN_ORDER  RBN_OBJ[nx_rebin,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => REBIN_QUALITY  RBN_QTY[nx_rebin,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => REBIN_ARC  RBN_ARC[nx_rebin,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => REBIN_EORDER  RBN_EOBJ[nx_rebin,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => REBIN_EARC  RBN_EARC[nx_rebin,tune_mxskypix,NUM_ORDERS]
**REGISTERED PATH => SO_FAR  SO_FAR
**REGISTERED PATH => RDCTN_TRACIM  TRACIM
**REGISTERED PATH => RDCTN_INPTIM  INPTIM
**REGISTERED PATH => RDCTN_SLITIM  SLITIM
**REGISTERED PATH => RDCTN_FFIELD  FFIELD
**REGISTERED PATH => RDCTN_ARC  ARC
**REGISTERED PATH => RDCTN_STAR  STAR
**REGISTERED PATH => RDCTN_OBJECT  OBJECT

