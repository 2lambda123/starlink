0 HDSTOOLS
Some generally useful HDS object editing and display tools.

HCOPY    - Copy HDS data objects.
HCREATE  - Create an HDS data object of specified type and dimensions.
HDELETE  - Delete an HDS object.
HDIR     - Produce a simple summary of an HDS object.
HDISPLAY - Display the contents of a primitive HDS object.
HFILL    - Fill an HDS data object with a specified value.
HGET     - Return information about an object.
HHELP    - Obtain HELP on the HDSTOOLS package.
HMODIFY  - Modify the value of an HDS object.
HREAD    - Read a file into an HDS object.
HRENAME  - Rename an HDS data object.
HRESET   - Change state of a primitive HDS object to undefined.
HRESHAPE - Reshape an HDS object.
HRETYPE  - Change the type of an HDS structure object.
HTAB     - Display one or more vector objects in table form.
HWRITE   - Write an HDS object into formatted/unformatted file.

1 HCOPY
Copy HDS data objects.

Usage:

   hcopy in out

Description:

   Copies a data object from one place to another. The copy is
   recursive, so if a structure is specified as input then
   everything below that level will be copied to the output
   destination.

   A suitable output object will be created if necessary (replacing
   any existing unsuitable one of the same name) but any structure
   above the specified object must already exist. Any content of an
   existing component is lost.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP=UNIV (Read)
   Object being copied from, structured or primitive.
3 OUT
OUT=CHAR (Read)
   Object being copied to - takes shape and type of input.
2 Examples
% hcopy file1 file2
   Copy complete container file.

% hcopy file.more.asterix.grafix.coltab tab1
   Extract an object into its own container file.

% hcopy file1.data_array file2.data_array
   Copy the component DATA_ARRAY in file1
   to DATA_ARRAY in file2. The DATA_ARRAY component of file2
   will be created, but file2 must already exist.

% hcopy '[1 2 3 4 5]' file.array
   Copy the explicit values given into a component ARRAY within file.

% hcopy '"Counts/sec"' 'file.axis(2).units'
   A more practical example of the above.

% hcopy 'file.axis(1)' 'file.axis(2)'
   Copy the first element of the AXIS array to the second - works for
   structure or primitive arrays.
2 Deficiencies
   Error reporting could be more helpful.
2 Authors
JCMP: Jim Peden (Birmingham University)

RJV:  R J Vallance (Birmingham University)

DJA:  D J Allan (Birmingham University)

AJC:  A J Chipperfield (Starlink, RAL)
2 History
 19-JAN-1984 (JCMP):
    Original

 27-JAN-1986 (JCMP):
    V0.4-1 ADAM version

 25-SEP-1986 (JCMP):
    V0.5-1 Copies primitives too

 04-MAY-1989 (RJV):
    V1.0-1 Major rewrite

 09-JUL-1991 (DJA):
    V1.5-0 Copies elements of structure arrays ok now. Also
           writes files to directories specs containing DOT

 22-JUN-1992 (DJA):
    V1.6-0 DAT_PAR included explicitly

 14-APR-1993 (DJA):
    V1.7-0 Incorrect DAT_ANNUL replaced with HDS_CLOSE

 11-JUN-1993 (DJA):
    V1.7-1 Fixed bug in copy to container file with length > 15
           characters

 24-NOV-1994 (DJA):
    V1.8-0 Now use USI for user interface

 30-NOV1994 (DJA):
    V1.8-1 Allow primitive to primitive slice copying

 09-FEB-1995 (DJA):
    V1.8-2 Changed definition of array same sizeness to allow
           images to be copied into planes of cubes

 16-AUG-1995 (DJA):
    V1.8-3 Changed above definition again, this time to cope
           with slices whose dims=1 precede the real dimensions

 16-NOV-2001 (AJC):
    V3.0-0 Complete re-write
1 HCREATE
Create an HDS data object of specified type and dimensions.

Usage:

   hcreate inp type [dims]

Description:

   Creates an HDS data object of specified type and dimensions.  It
   will either create a completely new container file or a new object
   within an existing structure. An existing container file will be
   overwritten but an existing component within a file will not.

   By default the object created will be a scalar (dimension 0). If
   you want to create an object of different shape then either
   supply the dimensions on the command line or force prompting with
   the PROMPT keyword.

   Primitives are not given values and this action must be
   performed subsequently by HMODIFY, HFILL or HCOPY.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP  = UNIV (Read)
   Name of object.  GLOBAL.HDSOBJ>
3 TYPE
TYPE = CHAR (Read)
   Type of object to be created.
3 DIMS*
DIMS*(*) = INTEGER (Read)
   Dimensions of object, comma or space separated and enclosed in [ ]
   if more than one ([ ] optional in response to a prompt). [0]
2 Examples
% hcreate file1 _integer '[10,25]'
   Creates an HDS container file, file1, containing a 10x25 _INTEGER
   array. (Note that the square brackets have to be protected from the
   shell.)

% hcreate file1 struc
   Creates an HDS container file, file1, containing a structure of
   type STRUC.

% hcreate file1.array _real '[10,25]'
   Creates a 10x25 array named ARRAY of type _REAL in the HDS
   structure created in the previous example
2 Valid_Types
   HDS divides objects into two classes, primitive and structured.
   The former contain simple data such as numbers or characters,
   whereas the latter contain collections of other objects, structured
   or primitive.
   The valid primitive types recognised by HDS are:

   
   Type          Equiv Fortran      Range 
   
   _LOGICAL      LOGICAL*4          .TRUE., .FALSE. 
   _UBYTE        not supported      0..255 
   _BYTE         BYTE               -128..127 
   _UWORD        not supported      0..65535 
   _WORD         INTEGER*2          -32768..32767 
   _INTEGER      INTEGER*4 
   _REAL         REAL*4 
   _DOUBLE       DOUBLE PRECISION 
   _CHAR*n       CHARACTER*(n)
   

   Any type not in the above list will be assumed to be a structured
   type.
2 Authors
RJV: R.J. Vallance (BHVAD::RJV)

DJA: D.J. Allan (BHVAD::DJA)

AJC: A.J.Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
    Original Version

 24-NOV-1994 (DJA):
    V1.8-0 Now use USI for user interface

 06-SEP-2001 (AJC):
    V3.0-0 Remove Asterix stuff
    Improve prologue
1 HDELETE
Delete an HDS object.

Usage:

   hdelete inp

Description:

   Deletes a named HDS data object.  Everything below the level
   of the object specified is also deleted.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP = UNIV (Read)
   Name of object to be deleted.
2 Examples
% hdelete file1.data
   Deletes component 'data' from the container file's top-level
   structure.

% hdelete file1
   Deletes container file file1.sdf
2 Authors
RJV: R.J. Vallance (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
    Original Version

 24-NOV-1994 (DJA):
    V1.8-0 Now use USI for user interface

 06-SEP-2001 (AJC):
    V3.0-0 Remove Asterix stuff
    Improve prologue
1 HDIR
Produce a simple summary of an HDS object.

Usage:

   hdir inp [dev]

Description:

   Produces a simple summary of a named HDS data object to a selected
   output. For a primitive object the name, type and value are given if
   scalar, or dimensions if non-scalar.  For a structure the components
   are listed.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP = UNIV (Read)
   HDS data object object to be summarized. <GLOBAL.HDSOBJ>
3 DEV
DEV = _CHAR (Read)
   Output device (TERMINAL, PRINTER, OLDFILE, NEWFILE etc.).
   [TERMINAL]
2 Examples
% hdir file1
   Produces a summary of file1.sdf on the terminal.

% hdir file1 summary.lis
   Produces a summary of file1.sdf in text file summary.lis.

% hdir file2 '"O=summary.lis"'
   Appends a summary of file2.sdf to text file summary.lis.

% hdir file1.array O
   Appends a summary of component ARRAY of file1.sdf to text file
   ast_print.lis, assuming environment variable OLDFILE is not set.
2 Authors
RJV: R.J.Vallance (Birmingham University)

DJA: D.J.Allan (Birmingham University)

AJC: A.J.Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
    V1.0-0 Original

 08-MAY-1992 (DJA):
    V1.6-1 Tidied up. Device name lengthed.

 04-MAY-1994 (DJA):
    V1.7-0 Use AIO for proper UNIX output

 24-NOV-1994 (DJA):
    V1.8-0 Now use USI for user interface

 28-FEB-1997 (RJV):
    V2.1-0 Make seperator line correct length

 06-SEP-2001 (AJC):
    V3.0-0 Remove Asterix stuff
           Improve prologue
1 HDISPLAY
Display the contents of a primitive HDS object.

Usage:

   hdisplay inp [dev] [slice=] [fmt=] [width=]

Description:

   This application outputs the contents of a specified primitive HDS
   data object of up to 7 dimensions, to a selected output.

   A subset of the object (which may itself be a subset) may be specified.
   For integer data hex, octal or decimal formats may be chosen.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP = UNIV
   HDS data object to be displayed. <GLOBAL.HDSOBJ>
3 DEV
DEV = _CHAR (Read)
   Output device (TERMINAL, PRINTER, OLDFILE, NEWFILE etc.).
   [TERMINAL]
3 SLICE
SLICE = _CHAR
   Description of data subset (range in 1st dimension {,range in 2nd
   dimension},{...}) eg. 5:10,1:5 for 2-D, 10:20 for 1-D. The range
   specifier for each dimension follows the same convention as the
   FORTRAN substring specifier so ":50" "20:" "5:10,:" are all valid.
   [* (whole object)]
3 FMT
FMT = _CHAR
   A Fortran FORMAT string to be used for formatting numbers.
   [! (use an appropriate general format for the type)]
3 WIDTH
WIDTH = _INTEGER
   Output page width.
   [! (Use width appropriate for device)]
2 Examples
% hdisplay file.data_array
   Display whole of specified array on terminal with default format.

% hdisplay img.quality dev=p slice=`"100:120,250:300"' fmt=z1
   Outputs the specified slice of a quality array in hex format to the
   printer.

% hdisplay accept width=132
   Outputs the current HDS object to the terminal with page width 132.
2 Authors
RJV: R.J.Vallance (Birmingham University)

DJA: D.J.Allan (Birmingham University)

AJC: A.J.Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
    V1.0   Original version

 05-MAY-1989 (RJV):
    V1.0-1 Optional format for all types

 15-MAY-1989 (DJA):
    V1.0-2 Fixed bug where program crashed with scalars

 05-DEC-1990 (DJA):
    V1.3-0 Allows full 80 char for device name

 28-MAY-1991 (DJA):
    V1.4-0 Full 7D treatment

 29-AUG-1991 (DJA):
    V1.5-0 Use PRS_GETSLICE to parse slice spec

 08-MAY-1992 (DJA):
    V1.6-0 Bug fix when displaying _DOUBLEs

 22-MAY-1992 (DJA):
    V1.6-1 Fixed probelm with display of _CHAR*81 objects

 01-JUN-1992 (DJA):
    V1.6-2 And cured problem with wid=132 caused by above

 04-MAY-1994 (DJA):
    V1.7-0 Fixed UNIX character problems by using AIO

 24-NOV-1994 (DJA):
    V1.8-0 Now use USI for user interface

 05-MAY-1995 (DJA):
    V1.8-1 Fixed bug in display of non _INTEGER integer types

 06-SEP-2001 (AJC):
    V3.0-0 Remove Asterix stuff
           Improve prologue
1 HFILL
Fill an HDS data object with a specified value.

Usage:

   % hfill inp value

Description:

   This application allows primitive data object of any shape and size to
   be filled with a single specified value.

   Every effort is made to convert the value to the required type,
   using HDS rules. Error DAT__CONER is reported if this is not possible.

   The defined object may be a slice of a larger array. If the array was
   previously undefined, it becomes defined - other elements are initialised
   to zero (or blank for type _CHAR).
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP = UNIV (Read)
   Name of object. <GLOBAL.HDSOBJ>
3 VALUE
VALUE = UNIV (Read)
   The value to be used.
2 Examples
% hfill cfile.real 0
   Puts the value 0.0 into every element of component REAL of
   container file cfile.sdf.

% hfill 'cfile.real(2,1:)' 5.5
   Puts value 5.5 in each element of the specified slice of OBJECT
   (assuming the slice specification is valid for OBJECT).

% hfill cfile.real '"a"'
   Fails as the value 'a' cannot be converted to _REAL.

% hfill cfile.chars '" "'
   Writes a blank string into every element of component CHARS
   of container file cont.sdf
2 Deficiencies
   There is a limit of 80 characters on the size of a character value which
   may be given. A value larger than this will cause a DAT__TRUNC error.
   A smaller value too large to fit in the specified object's elements will
   be silently truncated.
2 Authors
RJV: R.J. Vallance (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
      V1.0-0  Original Version
    6-JAN-1993 (DJA):
      V1.7-0  Use ARR_ routines to fill arrays

 24-NOV-1994 (DJA)
    V1.8-0 Now use USI for user interface

 17-JAN-1996 V2.0-0 (DJA):
      Updated use of USI
    6-SEP-2001 (AJC):
      V3.0-0 Remove Asterix stuff
      Improve prologue
      Get it working for CHAR values
      Get value before mapping to avoid corrupting files on error
1 HGET
Return information about an object.

Usage:

   hget inp item [attr] [index] [echo=] [version=]

Description:

   This application returns many different pieces of information
   depending on the value of the ITEM parameter.

   
     Item code    Returned type   Description 
     
     PRIMITIVE    _LOGICAL        True if Object primitive 
     STRUCTURED   _LOGICAL        True if Object structured 
     NDIM         _INTEGER        Dimensionality 
     DIMS         _CHAR           Dimensions separated by commas 
     NELM         _INTEGER        Total number of elements 
     TYPE         _CHAR           Object type 
     VALUE        Object type     Object value (primitive scalar only) 
     MIN, MAX     _REAL           Min,max values in numeric array
   

   The 'internal' parameter ATTR is set to the requested value and, if
   ECHO is TRUE, the value is displayed on the user's terminal.

   For items MIN and MAX, internal parameter INDEX is also set (but not
   displayed).

   The application is particularly useful from ICL, where the values of
   the ATTR and INDEX parameters can be returned into ICL variables and
   thus used to control applications. Note however that a character value
   cannot be returned into a variable that has already been defined as
   a numeric type.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP = UNIV (Read)
   Object to be interrogated. <GLOBAL.HDSOBJ>
3 ITEM
ITEM = _CHAR (Read)
   Item wanted (see Description). Case is not significant and the
   value may be abbreviated. <VALUE>
3 ATTR
ATTR = UNIV (Write)
   Attribute value.
3 INDEX
INDEX = _INTEGER (Write)
   The index position of the max or min value (treating arrays as
   vectors).
3 ECHO
ECHO = _LOGICAL (Read)
   Echo attribute value to standard output stream? [TRUE]
3 VERSION
VERSION = _LOGICAL (Read)
   Whether application version number is to be output. If the MSG_FILTER
   environment variable is set to 1, output will not occur anyway.
   [FALSE]
2 Examples
% hget 'numvec(2)' value
   Displays the value of the second element of object numvec

% hget file.data_array.data max attr=@info.max noecho
   Writes the maximum value of the DATA component of the DATA_ARRAY
   component of file into the MAX component of file info. The value
   will not be displayed.

ICL> hget numvec min (minval) (index) echo=f

ICL> =index
   Sets the ICL variable minval to the minimum value in vector numvec,
   and variable index to the position of the minimum value within
   numvec. The minimum value will not be displayed but the second
   ICL command will display the index.
2 Notes
Internal parameters (ATTR and INDEX) are not saved in the task's
parameter file. Their values can be written to HDS objects by
specifying the name of an existing object of a suitable type on the
command line. The object name must be preceded by @ for the ATTR
parameter but this is not necessary for INDEX (see Example 2).
2 Authors
DJA: David J. Allan (Birmingham University)

RB: Richard Beard (ROSAT, University of Birmingham)

AJC: Alan J. Chipperfield (Starlink, RAL)

History :
   21-APR-1991 (DJA):
      V1.4-0  Original
   14-OCT-1992 (RDS):
      V1.4-1  Outputs index of min or max value
    6-JUL-1993 (DJA):
      V1.7-0  Added ECHO keyword
   24-NOV-1994 (DJA):
      V1.8-0  Now use USI for user interface
    9-MAY-1997 (RB):
      V2.1-0  Get VALUE as correct type and convert to string
    6-SEP-2001 (AJC):
      V3.0-0 Remove Asterix stuff
1 HHELP
Gives help about HDSTOOLS.

Usage:

   hhelp [topic] [subtopic] [subsubtopic] [subsubsubtopic]

Description:

   Displays help about HDSTOOLS.  It describes individual commands in
   detail.

   See the Section "Navigating the Help Library" for details how to
   move around the help information, and to select the topics you
   want to view.
2 Parameters
For information on individual parameters, select from the list below:
3 TOPIC
TOPIC = LITERAL (Read)
   Topic for which help is to be given. [" "]
3 SUBTOPIC
SUBTOPIC = LITERAL (Read)
   Subtopic for which help is to be given. [" "]
3 SUBSUBTOPIC
SUBSUBTOPIC = LITERAL (Read)
   Subsubtopic for which help is to be given. [" "]
3 SUBSUBSUBTOPIC
SUBSUBSUBTOPIC = LITERAL (Read)
   Subsubsubtopic for which help is to be given. [" "]
2 Examples
hhelp
   No parameter is given so the introduction and the top-level
   help index is displayed.

hhelp application
   This gives help about the specified application.

hhelp application subtopic
   This lists help about a subtopic of the specified
   application or topic. The hierarchy of topics has a maximum
   of four levels.
2 Navigating_the_Help_Library
   The help information is arranged hierarchically.  You can move
   around the help information whenever HHELP prompts.  This
   occurs when it has either presented a screen's worth of text or
   has completed displaying the previously requested help.  The
   information displayed by HHELP on a particular topic includes a
   description of the topic and a list of subtopics that further
   describe the topic.

   At a prompt you may enter:

      -  a topic and/or subtopic name(s) to display the help for that
         topic or subtopic, so for example, "hdisplay parameters dev"
         gives help on DEV, which is a subtopic of Parameters, which
         in turn is a subtopic of HDISPLAY;

      -  a <RETURN> to see more text at a "Press RETURN to continue ..."
         request;

      -  a <RETURN> at topic and subtopic prompts to move up one level
         in the hierarchy, and if you are at the top level it will
         terminate the help session;

      -  a CTRL/D (pressing the CTRL and D keys simultaneously) in
         response to any prompt will terminate the help session;

      -  a question mark "?" to redisplay the text for the current
         topic, including the list of topic or subtopic names; or

      -  an ellipsis "..." to display all the text below the
         current point in the hierarchy.  For example, "HDISPLAY..."
         displays information on the HDISPLAY topic as well as
         information on all the subtopics under HDISPLAY.

   You can abbreviate any topic or subtopic using the following
   rules.

      -  Just give the first few characters, e.g. "PARA" for
         Parameters.

      -  Some topics are composed of several words separated by
         underscores.  Each word of the keyword may be abbreviated,
         e.g. "Colour_Set" can be shortened to "C_S".

      -  The characters "%" and "*" act as wildcards, where the
         percent sign matches any single character, and asterisk
         matches any sequence of characters.  Thus to display
         information on all available topics, type an asterisk in
         reply to a prompt.

      -  If a word contains, but does end with an asterisk wildcard,
         it must not be truncated.

      -  The entered string must not contain leading or embedded
         spaces.

   Ambiguous abbreviations result in all matches being displayed.
2 Authors
MJC: Malcolm J. Currie (STARLINK)

AJC: Alan J. Chipperfield (STARLINK)
2 History
 1986 November 14 (MJC):
    Original.

 1988 October 11 (MJC):
    Fixed bug to enable subtopics to be accessed from the command
    line.

 1991 September 25 (MJC):
    Corrected the description for the new layout in the new help
    library, KAPPA.

 1992 June 17 (MJC):
    UNIX version using portable HELP.

 1992 August 19 (MJC):
    Rewrote the description, added usage and implementation status.

 1995 November 9 (MJC):
    Modified for UNIX and added the Topic on Navigation.

 2001 January 2 (AJC):
    Stolen and modified for HDSTOOLS
2 Implementation_Status
   -  Uses the portable help system.
1 HMODIFY
Modify the value of an HDS object.

Usage:

   hmodify inp value

Description:

   Allows the value of an HDS primitive data object to be changed.
   The new value(s) may be entered directly at the terminal or may
   be taken from another HDS object. Information about the object is
   displayed.

   Every effort is made to convert the value(s) to the required type,
   using HDS rules. Error DAT__CONER is reported if this is not possible.

   For _CHAR values, the character length of the value object need not
   match that of the object to be updated. If the used length of any
   element of the given value exceeds that of the output object, it will
   be truncated and a warning message displayed, trailing spaces will be
   silently truncated.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP=UNIV (Read)
   Name of object to be modified - must be primitive.
   <GLOBAL.HDSOBJ>
3 VAL
VAL=UNIV (Read)
   Value to be given to object - this can be an explicit value
   (including an array) entered at at the terminal or the name of
   another object. The value must be of the same size and shape as the
   object to be modified but will be converted to the correct type
   if possible. Character values must be quoted.
2 Examples
% hmodify spectrum.data.temp 20000
   Writes the value 20000 into the specified component

% hmodify 'ds.axis(1).units' '"Counts/s"'
   Writes the value "Counts/s" into the UNITS component of first element
   of the AXIS array of structures in container file ds.sdf.

% hmodify 'ds.data_array(1:5)' '[1 2 3 4 5]'
   Writes the given values into the specified slice of component
   DATA_ARRAY in container file ds.sdf.

% hmodify ds.data_array  ds2.data_array
   Replace the values of the first DATA_ARRAY with those in the second.
   They must be the same size.
2 Authors
RJV: R.J. Vallance (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 ??-???-19?? (RJV):
      V1.0-0  Original
    7-JAN-1993 (DJA):
      V1.7-0  Move data with MAP_ routines
    6-AUG-1993 (DJA):
      V1.7-1  Change to ARR_COP routines.

 14-JAN-1994 (DJA):
    V1.7-2  Use COP1B for character strings as ARR_COP1C
    doesn't work this way on UNIX

 24-NOV-1994 (DJA):
      V1.8-0 Now use USI for user interface
    6-SEP-2001 (AJC):
      V3.0-0 Remove Asterix stuff
      Get it working for _CHAR values
      Switch order of mapping to minimise chance of corrupting object
       due to having mapped WRITE.
      Allow HDS to decide if it can convert different types
1 HREAD
Read a file into an HDS object.

Usage:

   hread file out [binary=]

Description:

   Values are read, one per record, from the file and written to the
   specified HDS object. The number of values to be read is calculated
   from the size of the HDS object. If fewer values are found in the file,
   an error is reported but the given values will have been written, with
   the remainder unspecified.
   If the file is ASCII, it is read using a general format appropriate
   for the type of the specified object. The HDS object must exist and be
   primitive - it is written as if it were a vector.
2 Parameters
For information on individual parameters, select from the list below:
3 FILE
FILE = _CHAR (Read)
   Name of file to be read.
3 OUT
OUT = UNIV (Read)
   HDS object to receive data. <GLOBAL.HDSOBJ>
3 BINARY
BINARY = _LOGICAL (Read)
   Whether file is binary. [NO]
2 Examples
% hread values.dat cfile.structure.data
   Reads values from ASCII file values.dat and writes them to object
   STRUCTURE.DATA in file cfile.sdf.

% hread values.dat cfile.structure.data binary
   Reads values from binary file values.dat and writes them to object
   STRUCTURE.DATA in file cfile.sdf.
2 Authors
RCF: R.J. Forbes (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 02-JUN-1987 (RCF):
    Original

 12-APR-1989 (RJV):
    Modified for ASTERIX88 (BHVAD::RJV)

 24-NOV-1994 (DJA):
      V1.8-0 Now use USI for user interface (DJA)
    6-SEP-2001 (AJC):
      V3.0-0 Remove Asterix stuff
      Add proper prologue
1 HRENAME
Rename an HDS data object.

Usage:

   hrename inp to

Description:

   The object is renamed.

   Note that if INP is specified only as a container filename, the name of
   the top-level object contained will be changed but not the name of the
   file.

   If the new name is too long, DAT__TRUNC is reported and a new value
   requested.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP = UNIV (Read)
   The object to be renamed.
3 TO
TO = _CHAR (Read)
   The new name - must be a valid HDS component name (not a pathname).
2 Examples
% rename cfile.structure.data array
   Component STRUCTURE.DATA becomes STRUCTURE.ARRAY

% rename cfile container
   The top-level component of container file cfile.sdf (probably named
   CFILE) is renamed to CONTAINER
2 Method
   Uses subroutine DAT_RENAME.
2 Authors
RJV: R.J. Vallance (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
    V1.0-0  Original

 24-NOV-1994 (DJA):
      V1.8-0 Now use USI for user interface
    6-SEP-2001 (AJC):
      V3.0-0 Remove Asterix stuff
      Improve error reporting
1 HRESET
Change state of a primitive HDS object to undefined.

Usage:

   hreset inp

Description:

   The state of the specified object is set to 'undefined'. All subsequent
   read operations will fail until the object is written to (re-defined).
   An attempt to reset a slice of an object will reset the whole object,
   an attempt to reset a structure object will have no effect.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP  = UNIV (Read)
   The name of a primitive object.
2 Examples
% hreset cfile.data_array.data
   Resets the DATA component of structure DATA_ARRAY in file cfile.

% hreset 'cfile.data_array.data(1:10,1:10)'
   Resets the whole of object cfile.data_array.data

% hreset cfile.data_array
   No effect if DATA_ARRAY is a structure
2 Method
   Calls HDS subroutine DAT_RESET
2 Authors
RJV: R.J. Vallance (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
      V1.0-0  Original Version
    24-NOV-1994 (DJA):
      V1.8-0 Now use USI for user interface
     6-SEP-2001 (AJC):
      V3.0-0 Remove Asterix stuff
1 HRESHAPE
Reshape an HDS object.

Usage:

   hreshape inp dims

Description:

   Changes the dimensions of the specified object. The number of dimensions
   may be decreased but the total number of elements must remain the same
   unless only the length of the last (or only) dimension is changed. If
   the size is decreased, elements will be discarded; if it is increased,
   the value of additional elements is not defined. The operation will fail
   if the object is a structure array and any truncated elements contain
   components.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP = CHAR  (Read)
   The name of the object to be re-shaped. <GLOBAL.HDSOBJ>
3 DIMS*
DIMS*(*) = INTEGER (Read)
   New dimensions of object, comma or space separated and enclosed in [ ]
   if more than one ([ ] optional in response to a prompt).
2 Examples
Assuming numarr is a 50x100 array of numbers:

% hreshape numarr 5000
   Changes  numvarr to a 5000 element vector.

% hreshape numarr '[50,50]'
   Produces a 50x50 array of numbers. Elements [:50-100] are discarded.

% hreshape numarr '[50,100]'
   After the last example this would restore the original shape of
   numarr but the previously discarded values may be lost.
2 Method
   Uses HDS subroutines DAT_ALTER or DAT_MOULD as appropriate.
2 Authors
RJV: R.J. Vallance (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
    V1.0-0  Original

 24-NOV-1994 (DJA):
    V1.8-0 Now use USI for user interface

 14-SEP-2001 (AJC):
    V3.0-0 Remove Asterix stuff
    Improve prologue
1 HRETYPE
Change the type of an HDS structure object.

Usage:

   hretype inp newtype

Description:

   Changes the type of an HDS structure object - the type of a primitive
   object cannot be changed.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP  = UNIV (Read)
   The name of the object. <GLOBAL.HDSOBJ>
3 TYPE
TYPE = CHAR (Read)
   New type - a valid HDS non-primitive type.
2 Examples
% hretype cfile.structure data_array
   Sets the type of cfile.structure to DATA_ARRAY

% hretype cfile.structure.data _REAL
   Error - cannot change the type of a primitive object.
2 Method
   CALLS DAT_RETYPE
2 Authors
RJV: R.J. Vallance (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 ??-???-???? (RJV):
      V1.0-0  Original Version
    12-JUN-1989 (RJV):
       V1.0-1 Now checks for primitive input
    24-NOV-1994 (DJA):
       V1.8-0 Now use USI for user interface
    18-JAN-1996 (DJA):
       V2.0-0 New USI routine
    13-SEP-2001 (AJC):
       V3.0-0 Remove Asterix stuff
1 HTAB
Display one or more vector objects in table form.

Usage:

   htab in1 in2 ... [dev=] [slice=] [width=]

Description:

   Provides the facility to display vector HDS data objects
   simultaneously in a tabular form on a selected output. The range
   to be output is selectable but by default the whole of each object
   is output.

   Note that the input object names must either be given on the
   command line or the PROMPT keyword must be used.
2 Parameters
For information on individual parameters, select from the list below:
3 INPn
INPn = UNIV (Read)
   nth object in table. Up to six objects may be specified,
   <GLOBAL.HDSOBJ> for INP1, [! (no more objects)] for INP2 - 6.
3 DEV
DEV = _CHAR (Read)
   Output device (TERMINAL, PRINTER, OLDFILE, NEWFILE etc.).
   [TERMINAL]
3 SLICE
SLICE = _CHAR (Read)
   Range of data to be output in form "n1:n2" ":n2" or "n1:".
   [* (whole object)]
3 WIDTH
WIDTH = _INTEGER (Read)
   Output page width. A null (!) will result in a width appropriate
   for the chosen text output device. [!]
2 Examples
% htab vec1 vec2 vec3 dev=n=vec.lis
   Tabulate the three vectors to file vec.lis

% htab vec1 vec2 vec3 dev=printer slice=1:10
   Tabulate the first ten elements of the given vectors on printer,

% htab vec1 vec2 vec3 vec4 vec5 vec6 width=132
   Tabulate six vectors to terminal in 132 column mode
2 Authors
RJV: R.J. Vallance (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J.Chipperfield (Starlink, RAL)
2 History
 ?-???-???? (RJV):
    Original Version

 5-DEC-1990 (DJA):
    V1.0-0 Allows full 80 character device name

 15-APR-1991 (DJA):
    V1.4-0 6 digit array index rather than 5

 22-MAY-1992 (DJA):
    V1.6-0 ERR_ANNULs inserted.
    Uses PRS_GETSLICE for slice parsing.
    Use USI for object association

 24-NOV-1994 (DJA):
    V1.8-0 Now use USI for user interface

 18-JAN-1996 (DJA):
      V2.0-0 Updated USI routines
    6-SEP-2001 (AJC):
      V3.0-0 Remove Asterix stuff
      Improve prologue
1 HWRITE
Write an HDS object into formatted/unformatted file.

Usage:

   hwrite inp file [binary=] [fmt=]

Description:

   Writes values from an HDS primitive object into an ASCII (default)
   or binary file. One value is written per record.

   For ASCII file output a default format is used unless explicitly
   overridden.
2 Parameters
For information on individual parameters, select from the list below:
3 INP
INP = UNIV (Read)
   Object to be input and read. <GLOBAL.HDSOBJ>
3 FILE
FILE = _CHAR (Read)
   Output filename.
3 BINARY
BINARY = _LOGICAL (Read)
   Whether file to be binary (Fortran unformatted). [NO]
3 FMT
FMT = _CHAR (Read)
   Output format for ASCII file. If null (!) is specified, a default
   format is used for each different data type. [!]
2 Examples
% hwrite cfile.structure.data values.dat
   Write component DATA to ASCII file values.dat with default format

% hwrite cfile.structure.data values.dat fmt=F12.6
   As above but with specified format

% hwrite cfile.structure.data values.dat binary
   Write component DATA in binary form into sequential, unformatted
   file.
2 Authors
RF:  Ray Forbes (Birmingham University)

DJA: D.J. Allan (Birmingham University)

AJC: A.J. Chipperfield (Starlink, RAL)
2 History
 ??-??-???? (RF):
      Original Version
    3-JUN-1992 (DJA):
      Use ERR_ANNUL

 24-NOV-1994 (DJA):
      V1.8-0 Now use USI for user interface
    6-SEP-2001 (AJC):
      V3.0-0 Remove Asterix stuff
      Add proper prologue
