#!/usr/bin/env starperl
#
#+
#  Name:
#     star2html

#  Purpose:
#     Converts standard Starlink documents to HTML (using TeX4HT).

#  Type of Module:
#     Perl script

#  Description: This routine runs the htlatex script from TeX4HT
#     document. It requires a document that is using the 'starlink.cls'
#     latex class file from the Starlink application 'latexsupport'.
#
#     The final products of the conversion are entered into a directory
#     "docname.htx", in accordance with the naming convention needed by
#     the hypertext linker (sun188).

#  Invocation:
#     star2html [-splitlevel level] document

#  Parameters:
#     -hcserver URL (optional)
#        A URL pointing to the hardcopy server to be used for the document.
#        Should be an copy of the "hcserver" script from the HTX package.
#        Also see the HTX_HCSERVER variable.
#     -splitlevel level (optional)
#        An optional argument to send htlatex to trigger splitting on the
#        given command level. 1 indicates don't split, 2 is split at the
#	 first level of sectioning command in the document, etc.
#     document
#        The name of the document to be translated into HTML
#        (the file type .tex is optional).

#  Environment Variables Used:
#     HTX_HCSERVER
#       If set then the hardcopy server part of a document will be modified
#       to use this value. Requires that the document uses the standard
#       template so that the required part can be identified. This can be
#       overridden by the command parameter -hcserver.

#  Examples:
#      star2html sun109.tex
#         This converts the Starlink document sun109.tex into HTML.
#

#  Authors:
#     PDRAPER: P.W.Draper (Starlink - Durham University)
#     AJC: A.J.Chipperfield (Starlink - RAL)
#     TIMJ: Tim Jenness (JACH)
#     {enter_new_authors_here}

#  History:
#     24-FEB-1995 (PDRAPER):
#        Original version.
#     26-APR-1995 (PDRAPER):
#        Modified xlabel command to use internal subroutine anchor_label.
#        This correctly propagates and makes an entry into labels.
#     28-APR-1995 (PDRAPER):
#        Modified to generate title from \stardoctitle command. Now
#        performs edits in "docname.htx" directory rather than the
#        initial default directory. Now able to process names whose
#        full paths are given.
#     2-MAY-1995 (PDRAPER):
#        Modified to check for HTX_EMAIL environment variable, add
#        ".tex" extension to input file (if needed) and change
#        document footer to also include the document type and number
#        as well as its title.
#     5-MAY-1995 (PDRAPER):
#        Added aux switch.
#     6-JUN-1995 (PDRAPER):
#        Added htmlonly, rawhtml and comment environments to dummy
#        html.sty file (these are removed by pre-processing stage).
#     7-JUN-1995 (PDRAPER):
#        Added support for LaTeX2E documentclass.
#     9-JUN-1995 (PDRAPER):
#        Now deals with links to the latex2html command and finds the
#        real directory of the actual script. This is necessary for
#        the location of the icons.
#     26-JUN-1995 (PDRAPER):
#        Changes to strings for perl5. Added directory information to
#        commands located via softlinks.
#     7-JUL-1995 (PDRAPER):
#        Added navigation panel defaults as suggested by Dave Terrett.
#        This gives more words per text description and a newline for
#        each description.
#     16-OCT-1995 (PDRAPER)
#        Correct problem with TEXINPUTS.
#     17-OCT-1995 (AJC)
#        Mods to create_initfile:
#           Set AUTO_NAVIGATION 0
#           Add TOP and BOTTOM_NAVIGATION 1
#           Remove redundant / from ICONSERVER
#     11-DEC-1995 (PDRAPER):
#        Added more messages to show star2html is running.
#     14-FEB-1996 (PDRAPER):
#        Added code to split up the input file by sections. This gives
#        a speed up in processing time.
#     21-MAY-1996 (AJC):
#        Adjustable length of underline of introductory message.
#     7-MAY-1997 (AJC):
#        Prevent multiple detection of \documentstyle and
#        \documentclass.  (Allows \documentstyle/class to appear as
#        text in the document without the additional lines but.)
#     3-JUN-1998 (PDRAPER):
#        Added copyright facility. Now version 1.3.
#     8-JUN-1998 (AJC):
#        Correct command removal and tidying of AUTHORS and DATE
#     9-JUN-1998 (PDRAPER):
#        Stopped the production of the index.html linked file. This
#        caused problems with HTX indices (multiple references to
#        the same _xref) and editting the same file twice as part
#        of a stream of files.
#     24-JUN-1998 (PDRAPER):
#        Updated for latex2html v98.1.
#     21-AUG-1998 (PDRAPER):
#        Modified to use the "latex2html" wrapper script now provided
#        by the Star2HTML package. LaTeX2HTML is now bundled in
#        Star2HTML as two versions, the previous one known as "old"
#        and the new one known as "current". Thus compatibility is
#        provided with old documentation. At present the only
#        documents that define the \latexhtml command use the "current"
#        version.
#     7-OCT-1998 (PDRAPER):
#        Converted copyright statement to use &copy; symbol.
#     31-JAN-2000 (AJC):
#        Correct date to current year in default copyright statement
#        Change default statement to "Council for the ..."
#        Default to produce copyright statement and inform user.
#        Add -c none and HTX_COPYRIGHT = none option.
#        Make get_item ignore comment lines
#        Prevent unwanted output from source_icon on Solaris and Linux.
#     29-OCT-2000 (TIMJ):
#        Use gmtime rather than running the shell date command
#        Use perl5 Cwd module rather than perl4 getcwd library
#     31-OCT-2000 (PDRAPER):
#        Incorporated TIMJ changes into repository code base. Changed
#        to use the Starlink release of Perl, rather than the one
#        found on the PATH or in /star/local/bin/perl.
#     13-AUG-2004 (TIMJ):
#        Replace generate_icon code with perl code in order to
#        remove dependency on external uudecode and gunzip.
#     16-JAN-2008 (PDRAPER):
#        Add obsolete document handling.
#     17-MAR-2008 (PDRAPER):
#        Moved back to a single version of latex2html, 2002.2, and
#        made associated changes.
#     20-MAY-2008 (PDRAPER):
#        Parse stardocopyright to convert \newline into <BR>.
#     26-JAN-2009 (PDRAPER):
#        add HTX_HCSERVER support to move server to JAC.
#     24-FEB-2009 (TIMJ):
#        Use perl5
#        - use strict and warnings
#        - lexical filehandles
#        - remove $* usage (not supported in perl5.10)
#        - fix \n problem with `pwd` call
#        - use multi-arg system() and 3-arg open()
#        - use File::Spec and Getopt::Long
#     31-MAR-2009 (TIMJ):
#        - $' and $` no longer used (use @- and @+ instead)
#        - Fix warning with undef TEXINPUTS
#        - Handle multiple \copyrights in copyright section
#        - Fix logic in edit_main so that filehandles close automatically
#          on exit
#     31-AUG-2013 (TIMJ):
#        - Convert PDF images to EPS
#     2013-10-02 (TIMJ):
#        - Use autoconf to find pdftops
#     11-FEB-2015 (SFG):
#        - Remove all latex2html specific code and only leave htlatex
#          aspects.

#  Bugs:
#     {note_any_bugs_here}

#-

use strict;
use warnings;
use Cwd;
use File::Spec;
use Pod::Usage;
use Getopt::Long;

#  Print introductory message.
my $announce = "Star2HTML V@PACKAGE_VERSION@";
my $underline = $announce;
$underline =~ s/./=/g;
print( "\n$announce\n$underline\n" );

#  Initialisation of variables used during cleanup.
my $keep_style = 1;       # Keep existing style files
my $have_texfile = 0;     # Have a copy of tex file
my $have_auxfile = 1;     # have a copy of aux file


# The clear up routine can exit
my $CANEXIT = 1;

# Document is not obsolete by default.
my $OBSOLETE = 0;

#  Sort out how we are going to get the current directory name.
my $DEFAULTDIR = getcwd();


#  Pick up HCSERVER for hardcopy downloads from environment, overridden by
#  command-line.
my $HCSERVER = $ENV{'HTX_HCSERVER'} || "0";

#  Substring to match HCSERVER line and pattern for actual replacement.
my $HCSERVER_SUBSTRING = 'cgi-bin/htxserver';
my $HCSERVER_PATTERN = 'http:\/\/[^\\ ]*\/cgi-bin\/hcserver';

#  Parse the command line extracting the document name and recording
#  the status of the optional parameters.
my $splitlevel="";
my $help;
my $status = GetOptions(
    "hcserver=s" => \$HCSERVER,
    "help"=> \$help,
    "splitlevel=s"=> \$splitlevel,
    );

if ($help) {
      print( 'Usage: star2html [-aux] [-splitlevel <level>] '.
             'starlink_document[.tex]'. "\n");
      exit(0);
}

# Prevent double toc if splitting
if ($splitlevel ne ""){
  $splitlevel .= ",notoc*,nominitoc";
  print "splitlevel is $splitlevel\n\n";
}



#  Last element should be the name of the file. Add a file extension
#  if required and split into the full directory and a filename. Note
#  we need an absolute directory for the original file.
my $TEXFILE = pop(@ARGV);
if ( $TEXFILE !~ /.tex$/ ) { $TEXFILE .= '.tex'; }
my ($TEXDIR, $TEXNAME) = &get_filename_and_directory( $TEXFILE );
$TEXDIR = File::Spec->rel2abs( $TEXDIR );
$TEXFILE = File::Spec->catfile($TEXDIR, $TEXNAME);
$TEXNAME =~ s/.tex$//;

#  The output from conversion will be placed into a subdirectory of
#  the directory containing the input file. This will be called the
#  same as the document except with an extension of "_htx". After
#  creation this directory will then be moved to ".htx" (98.1 needs
#  this slight of hand as it isn't #possible to create images in a
#  subdirectory with a "." in the name).
my $DESTDIR = File::Spec->catdir($TEXDIR, $TEXNAME. '_htx');
my $REALDESTDIR = File::Spec->catdir($TEXDIR, $TEXNAME. '.htx');
my $DESTFILE = File::Spec->catfile($DESTDIR, $TEXNAME . '.tex');
my $FILE;

#  Check file exists and is a text file we can write to.
if ( ( -T $TEXFILE ) && ( -r $TEXFILE ) ) {
   print( "Processing file: $TEXFILE\n" );

#  Create the target directory. Note if ".htx" form already exists
#  then we move this into place.
   if ( -d $REALDESTDIR ) {

     #  Need to strip trailing / from destination of rename.
     my $FROMDIR = File::Spec->catdir($TEXDIR, $TEXNAME. '.htx');
     my $TODIR = File::Spec->catdir($TEXDIR, $TEXNAME. '_htx');
     rename( $FROMDIR, $TODIR )
       || &clear_up( "Star2HTML fatal: cannot rename directory $FROMDIR to $TODIR\n" );
   } else {
     if ( ! -d $DESTDIR ) {
         mkdir( $DESTDIR, oct(755) )
             || &clear_up( "Star2HTML fatal: cannot create directory $DESTDIR\n" );
     }
   }

#  Change the default into the destination directory.
   chdir( $DESTDIR )
     or &clear_up( "Star2HTML fatal: cannot chdir to $DESTDIR\n" );

#  Edit the necessary corrections to the tex file. This makes a copy
#  in $DESTDIR.
   &edit_main_htlatex;


   $have_texfile = 1;


#  Append tex file directory to TEXINPUTS to get /specials etc.
#  Note that an empty string should be defaulted for $ENV{TEXINPUTS} if it does
#  not exist in the environment.  ":$dir" is a valid form of the variable.
   $ENV{'TEXINPUTS'} = join( ':',  (defined $ENV{TEXINPUTS} ? $ENV{TEXINPUTS} : ""),
       $DEFAULTDIR );

#  Open main file for use in the following sections (could be more efficient
#  I guess).
   open( $FILE, $TEXFILE )
      || &clear_up( "Star2HTML fatal: Failed to open file\n" );

} else {
   &clear_up( "Star2HTML fatal: Cannot read text file: $TEXFILE\n" );
}

#------------------------------------------------------------------------------
#  Invoke tex4ht (via htlatex) on the temporary file.


print ("Preparations finished - now starting TeX4HT htlatex\n\n");
my $TEX4HTENV = "";
my $TEX4HTHTF = "";
my $TEXINPUTS = "";
if (defined $ENV{TEXINPUTS}) {
  $TEXINPUTS = $ENV{TEXINPUTS};
}

if (defined $ENV{STARLINK_DIR}) {
  $TEX4HTENV = "TEX4HTENV=" . $ENV{STARLINK_DIR} . '/share/latexsupport/tex4ht.env';
  $TEX4HTHTF = "TEX4HTHTF=" . ':' . $ENV{STARLINK_DIR} . '/share/latexsupport:';
  $TEXINPUTS = join(':', $TEXINPUTS, $ENV{STARLINK_DIR} . '/share/latexsupport//:');
}
my $tex4htcommand =  "TEXINPUTS=$TEXINPUTS $TEX4HTENV $TEX4HTHTF htlatex $DESTFILE \"starlinkxhtml.cfg,$splitlevel,charset=\"utf-8\",fn-in\" ' -cvalidate -cstarfont' \"\" '-interaction=batchmode'";
print $tex4htcommand . "\n";
system($tex4htcommand);
if ($? ) {
  print( "Star2HTML fatal: Translation of document $TEXFILE failed.\n" );
}

#  If obsolete do the marking.
&make_obsolete;

#  Clear up all temporary files etc.
$CANEXIT = 0;
&clear_up;

#  Move back to correct directory.
chdir( $DEFAULTDIR ) or warn "Failed to change back to directory $DEFAULTDIR\n";

#  Move the working directory to ".htx" instead of "_htx". We need
#  to defer this so that image creation works (98.1 fix).
my $TODIR = File::Spec->catdir($TEXDIR, $TEXNAME. '.htx');
my $FROMDIR = File::Spec->catdir($TEXDIR, $TEXNAME. '_htx');
rename( $FROMDIR, $TODIR ) || print( "Star2HTML warning: failed to move $FROMDIR to $TODIR.\n" );

#  Exit.
exit(0);

#  End of star2html.


#------------------------------------------------------------------------------
sub copy_included_graphics{
#+
# subroutine to find includegraphics lines in a .tex file

#  To support PNG and PDF embedded graphics we need to do two things
#  1. Copy the PNG file to the temporary directory so that htlatex
#     will discover it
#  We have to work out which .pdf and .png files are relevant. We could copy them
#  all or we could scan through the tex file for includegraphics directives.
#  Try the scanning approach

# Argument 1 is the name of the texfile.
# Argument 2 is the output directory
#-

  my $TEXFILE = $_[0];
  my $DESTDIR = $_[1];
  my %tocopy;
  my %outpath;
  open my $TFH, "<", $TEXFILE
    or &clear_up("Could not open file $TEXFILE");
  while (defined (my $texline = <$TFH>) ) {
    # remove comments
    $texline =~ s/\%.*$//;
    if ($texline =~ /includegraphics
		     (?:\[.*\])?   # Non-capturing parens for the optional options
                        \{(.*?)\}     # File name is inside curly braces but non-greedy on final brace
			# So that \myfunc{\includegraphics{file}} matches "file" not "file}"
		    /x ) {
      my $found = $1;

      # Complain if this is explicitly a pdf
      if ( $found =~ /\.pdf/ ) {
	&clear_up( "Please remove explicit PDF suffix from TEX file for $found includegraphics entry" );
      }

      # if there is a directory path we have to remember it for the output
      my $dirname;
      if ( $found =~ /\// ) {
	use File::Basename qw/ dirname /;
	$dirname = dirname($found);
      }

      if (-e File::Spec->catfile( $TEXDIR, $found) ) {
	# full name already
	my $path = File::Spec->catfile( $TEXDIR, $found );
	$tocopy{$path}++;
	$outpath{$path} = $dirname if defined $dirname;
      } else {
	# We do not have to worry about EPS files
	# and if we find a PNG version we can stop
	for my $s (qw/ png pdf / ) {
	  my $check = File::Spec->catfile( $TEXDIR, $found . "." . $s);
	  if (-e $check) {
	    $tocopy{$check}++;
	    $outpath{$check} = $dirname if defined $dirname;
	    last;
	  }
	}
      }
    }
  }
  for my $file (keys %tocopy) {
    use File::Basename qw/ fileparse /;
    next if $file =~ /\.(eps|ps)$/;
    my ($name, $path, $suffix) = fileparse($file, qr/.pdf|.png/ );

    # Output directory may have an extra path in it if we found that in latex
    my $destdir = $DESTDIR;

    # if we need the extra path, make sure it is there and create if it isn't
    if (exists $outpath{$file}) {
      $destdir = File::Spec->catdir( $destdir, $outpath{$file} );
      if (!-d $destdir) {
	mkdir($destdir) or &clear_up("Could not create temp dir $destdir: $!");
      }
    }

    # If using htlatex, just copy the file in and assume that
    # htlatex will convert it.
    system ( "cp $file $destdir") and
      &clear_up("Star2HTML fatal: cannot copy $file into $destdir\n");
  }
}


sub edit_main_htlatex {
#+
#  Subroutine to edit the main file when using htlatex
#
#  Copies the input texfile to the DESTDIR, and replaces any \input commands
#  with a version of the line that looks for the file in the working directory
#  and copies the file into the working directory.


#  Also copies any images found in a \includegraphics line in either
#  the main text or in any \input file.
#-

  # Copy any images referenced in the main file.
  copy_included_graphics($TEXFILE, $DESTDIR);
  #  Open the the main file for readonly.
  open( my $FILE, $TEXFILE )
    || &clear_up( "Star2HTML fatal: Failed to open main tex file ($TEXFILE).\n" );

  #  Open the "copy".
  open( my $EDIT, ">", $DESTFILE )
    || &clear_up( "Star2HTML fatal: Cannot open new file for editing.\n" );

  #  Now start copying the main file to the edited version.

  my $fileIO = $EDIT;
  my $SECTION;
  my $need_styles = 1;
  my $comment_out = 0;
  while (defined (my $texline = <$FILE>)) {

    # Look for an input line
    if ($texline =~ /input\{(.*?)\} /x) {

      my $inputfile = $1;

      # Copy this file into output directory and copy any graphics
      # included in it.
      # Turn it into an absolute path
      my $abs_path = File::Spec->rel2abs( $inputfile, $TEXDIR ) ;

      if (-e $abs_path){
	system("cp $abs_path $DESTDIR");
	copy_included_graphics($abs_path, $DESTDIR);
      } elsif (-e "$abs_path.tex"){
	system("cp $abs_path.tex $DESTDIR");
	copy_included_graphics("$abs_path.tex", $DESTDIR);
      } else {
	print "Can't find input $inputfile or $abs_path. \n";
      }


      # Change the texline to have the new basename for the file.
      use File::Basename;
      my $basename = basename($inputfile);
      $texline =~ s/\Q$inputfile\E/$basename/g;
    }

    # I have no idea what this line does, but it looks like it could
    # be important.

    # Check for hcserver line, if changing and if found change.
      if ( $HCSERVER ne "0" and index( $texline, $HCSERVER_SUBSTRING ) != -1 ) {
         s/$HCSERVER_PATTERN/$HCSERVER/;
      }

      # Write line back to output file.
      print ( $EDIT $texline );
  }

  #  Files close automatically on exit
}


#------------------------------------------------------------------------------
sub clear_up {
#+
#  Subroutine to clear up when exiting.
#
#  This routine should be called whenever the routine is exiting. It relies
#  on the variables $keep_style, $have_texfile and $have_auxfile and
#  the existence of certain files to determine what actions it takes.
#
#  The argument to this routine (if given) is a message to print to the user.
#-
   my $file;

#  Print informational message
   if ( @_ ) { print( "@_ \n") };

#  Now remove the copy of the main file if appropriate to the current
#  situation.
   if ( $have_texfile ) {
      unlink( $DESTFILE );
   }
   if ( $have_auxfile ) {
      $file = $DESTDIR . $TEXNAME . '.aux';
      unlink( $file ) if ( -f $file );
      $file = $DESTDIR . $TEXNAME . '.lof';
      unlink( $file ) if ( -f $file );
      $file = $DESTDIR . $TEXNAME . '.lot';
      unlink( $file ) if ( -f $file );
   }

#  Remove the style files if we've created them.
   if ( ! $keep_style ) {
      $file = $DESTDIR . 'star2html.perl';
      unlink( $file );
   }
   $file = $DESTDIR . 'star2html.sty';
   if ( -T $file ) {
      unlink( $file );
   }
   $file = $DESTDIR . 'html.sty';
   if ( -T $file ) {
      unlink( $file );
   }

#  Remove initialisation file if it exists.
   $file = $DESTDIR . '.star2html-init';
   if ( -T $file ) {
      unlink( $file );
   }


#  And die.
   if ( $CANEXIT ) {
     exit(0);
   }
}

#------------------------------------------------------------------------------
sub get_filename_and_directory {
#+
#   Subroutine to convert a filename to an absolute directory and filename.
#   The input file specification may be a relative or absolute file
#   or directory name. If the input is a directory name then no
#   filename is returned.
#-
   my $file = File::Spec->rel2abs(shift);
   my $directory;
   if ( -d $file ) {           # $file is a directory
      $directory = $file;
      $file = '';
   }
   else {
       (my $vol, $directory, $file) = File::Spec->splitpath( $file );
   }
   return ($directory, $file);
}

#------------------------------------------------------------------------------

sub make_obsolete {
#+
#   Subroutine to make the document "obsolete" if required. This is done
#   by displaying a image in the background and is requested by the
#   -obsolete argument.
#-
  if ( $OBSOLETE ) {
    my $CSSFILE = File::Spec->catfile($DESTDIR, $TEXNAME . ".css");
    # Look for the CSS file and append the background image to that.
    if ( -f $CSSFILE ) {
      open( my $CSS, ">>","${TEXNAME}.css" );
      print( $CSS "\nBODY   {background-image: url('obsolete.jpg')}\n" );
      close( $CSS );
    }
  }
}


#------------------------------------------------------------------------------
