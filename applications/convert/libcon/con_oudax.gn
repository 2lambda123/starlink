      SUBROUTINE CON_OUDA<T>( FD, EL, A, NOVPRE, STATUS )
*+
*  Name:
*     CON_OUDAx

*  Purpose:
*     Writes an array to a unformatted direct-access file.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL CON_OUDAx( FD, EL, A, NOVPRE, STATUS )

*  Description:
*     This routine writes a numeric array to an output unformatted
*     direct-access file.

*  Arguments:
*     FD = INTEGER (Given)
*        File descriptor of the output unformatted file.
*     EL = INTEGER (Given)
*        Number of array elements to process.
*     A( EL ) = ? (Given)
*        Input array.
*     NOVPRE = INTEGER (Given)
*        The number of data values per record of the output file.
*        The resulting number of longwords per record must not exceed
*        8191.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate. The
*     array supplied to the routine must have the data type specified.

*  Prior Requirements:
*     The unformatted file must be open for write access.

*  Copyright:
*     Copyright (C) 1996 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either Version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful, but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
*     02111-1307, USA.

*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1996 October 20 (MJC):
*        Original version.
*     {enter_changes_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'PRM_PAR'          ! Data-storage constants

*  Arguments Given:
      INTEGER FD
      INTEGER EL
      <TYPE> A( EL )
      INTEGER NOVPRE

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER FIOSTA             ! Fortran I/O status
      INTEGER I                  ! Loop counter for file records
      INTEGER J                  ! Loop counter for values per record
      INTEGER K                  ! Index of the array element
      INTEGER LUN                ! Logical unit number
      INTEGER NREC               ! Number of records

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Obtain the logical unit number of the file.
      CALL FIO_UNIT( FD, LUN, STATUS )

*  Copy the values.
*  ================

*  Find the number of records to write.
      NREC = ( EL - 1 ) / NOVPRE + 1

*  Loop for each record.
      K = 0
      DO I = 1, NREC

*  Write a record of the values.
         WRITE( LUN, REC=I, IOSTAT=FIOSTA ) ( A( J ), J = K + 1,
     :     MIN( EL, K + NOVPRE ) )

*  Watch for an error.  Make an informative report, setting status to
*  bad, and exit.
         IF ( FIOSTA .NE. 0 ) THEN
            CALL MSG_SETI( 'I', I )
            CALL FIO_REP( LUN, ' ', FIOSTA,
     :        'Error writing data record number ^I to file ^FNAME.  '/
     :        /'Reason was ^IOSTAT.', STATUS )
            GOTO 999
         END IF

*  Increment the array index. 
         K = K + NOVPRE
      END DO

  999 CONTINUE

      END
