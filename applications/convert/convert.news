1 CONVERT_Version_1.5-19

 NDF2FITS now recognises the modified data type of the SMURF 
 extension. It also handles component names that are too long to
 fit in a single EXTNAME header by creating an EXTNAMEF keyword 
 that uses the Long-string convention.

 Added support for the SMURF_EXT type for the SMURF extension, 
 and for extensions within the SMURF extension's NDFs.

 Propagate LABEL keyword to NDF label in FITS2NDF.

1 CONVERT_Version_1.5-18

 FITS2NDF recognises the new "Group:" heading in HISTORY headers
 that originally came from an exported NDF.  [This lists all the
 NDFs stored within a GRP group used in an application.]  Thus the
 original paragraph and indentation may be preserved after an
 NDF->FITS->NDF cycle.

 Removed default history recording in FITS2NDF's output NDF since 
 a user can control automatic history creation via the 
 NDF_AUTO_HISTORY environment variable.

 NDF2FITS allows three-letter permutations for Parameter COMP.
 There is now no automatic quality masking of data and variance
 whenever the quality array is exported to the FITS file too.
 A new section of the NDF2FITS reference documentation explains
 this in more detail.

1 CONVERT_Version_1.5-17

 The bash CONVERT initialisation script has been changed so that it
 now works from any Bourne-compatible shell.

 FITS2NDF now adds a default History record to the output NDF if the 
 FITS file contains no NDF2FITS history information.

1 CONVERT_Version_1.5-16

 The FITS converters use the new NDG provenance system that inherits
 history records too.  NDF2FITS also ignores hidden ancestors.

 NDF2FITS can now handle files names with multiple fullstops in the 
 path.

 The formatting of history records written by FITSNDF has been
 improved, in particular the indentation after the first line.
 This preserves the formatting after an NDF->FITS->NDF cycle.

1 CONVERT_Version_1.5-15

 The CADC provenance processing now also modifies the PRODUCT 
 keyword's value in FITS extensions to the original PRODUCT string
 followed by underscore and the extension name in lowercase.  Also
 the CADC provenance now only records unique OBSIDD values.

1 CONVERT_Version_1.5-14

 The creation of AXIS structures by SPECX2NDF can now be suppressed 
 using its new AXIS parameter.

 NDF2FITS is now much quicker when writing out WCS information that
 includes a large table of values.

1 CONVERT_Version_1.5-13

 NDF2FITS supports the propagation of provenance information to FITS
 headers.  There is a choice of generic propagation that attempts to
 propagate all the information, or to write CADC-specific headers,
 or to exclude provenance (the default), governed by the new
 PROVENANCE parameter.

 NDF2FITS now handles extensions containing only NDFs by adding a
 dummy FITS sub-file that retains the name and type of the wrapper
 structure.
 
 FITS2NDF processes SMURF-package data better, permitting a
 roundtrip via FITS, perserving the original data structures, save
 for some additional FITS headers.

1 CONVERT_Version_1.5-12

 NDF2FITS now makes special provision for the JCMT SMURF-package
 extension.  It treats the extension contents as NDFs rather than
 arbitrary HDS structures.

1 CONVERT_Version_1.5-11

 NDF2FITS writes the correct BUNIT keyword value in the IMAGE
 extension storing the VARIANCE component.  The BUNIT keyword is
 absent for a QUALITY array.

 There is a new DUPLEX parameter.  When set TRUE (and PROFITS is
 also TRUE), it permits the FITS airlock headers to appear also in
 the IMAGE extensions for the VARIANCE and QUALITY arrays.

1 CONVERT_Version_1.5-10

 FITS2NDF supports externally and internally compressed FITS files.

 NDF2FITS writes integrity check keywords CHECKSUM and DATASUM at
 the end of each header if new Parameter CHECKSUMS is TRUE.

1 CONVERT_Version_1.5-9

 NDF2FITS Parameter ENCODING has a new allowed value of 
 "FITS-WCS(CD)". This is the same as "FITS-WCS" except that it uses
 the old CD matrix formalism to describe the data array's rotation
 and scaling.

1 CONVERT_Version_1.5-8

 FITS2NDF Parameter FMTCNV has a new allowed value of "Native"
 requesting that there is no format conversion, and the array of
 numbers stored in the FITS file are copied to a scaled array within
 the NDF.  This preserves the data compression.  Parameter TYPE
 continues to control the data type of the true unscaled values.

 NDF2FITS Parameter BITPIX has a new allowed value of "Native".  This
 requests that should any scaled-form arrays be converted, then the
 data type of the corresponding output FITS array is set to the
 scaled-form array's data type, and that the scale and offset
 coefficients for the format conversion are taken from the NDF's
 scaled array too.  This new facility preserves the data compression
 of large files.  In the absence of a scaled array, the application
 behaves as if BITPIX=-1 were specified.

1 CONVERT_Version_1.5-7

 FITS2NDF has a new TYPE group parameter to set the data type of 
 the NDF, overriding the value propagated from the FITS BITPIX, or
 BSCALE and BZERO precision when FMTCNV is TRUE.

 NDF2FITS now supports multi-NDFs HDS container files through the
 new CONTAINER and MERGE parameters.

1 CONVERT_Version_1.5-6

 FITSGZ is a new on-the-fly conversion format for GZIP-compressed FITS
 files.  The recognised extensions are fits.gz, fit.gz, and fts.gz.

 FITS2NDF supports the new AAO Instruments (AAOMEGA and FMOS) that use 
 the 2dF data structures.
  
1 CONVERT_Version_1.5-5

 Added FITS-AIPS++ and FITS-CLASS encodings to FITS2NDF and NDF2FITS.

 Clarified the description of UNF2NDF Parameter TYPE so that it
 is clear that the type given should also be of the input data, not 
 just the output NDF.

 SPECX2NDF now creates NDF files using the new double-sideband 
 SpecFrame.  See the AST documentation for more details on 
 double-sideband spectra. 

1 CONVERT_Version_1.5-4

 Added IRAF compatibility libs for Linux systems.  CONVERT should now
 build on any ix86 Linux platform. 


1 CONVERT_Version_1.5

 SPECX2NDF has been revamped so that it now uses the new AST SpecFrame
 functionality allowing translation between spectral frames without
 re-running SPECX2NDF.  The SPECTRUM Parameter (and associated
 parameters SOR, DOPPLER) are no longer required since they can be
 changed after conversion using the KAPPA:WCSATTRIB application. 
 **Scripts using SPECX2NDF may therefore need modification.**  In
 addition to dealing with map files, SPECX2NDF has now been extended
 to deal with SPECX data files; each spectrum in the file is
 translated to an NDF spectrum in the output HDS container file.

 FITS2NDF converts INES archive IUE spectra.

 Improved propagation of existing world co-ordinate system (WCS)
 headers in NDF2FITS partially from improvements to the AST
 subroutine library.  For example, long-slit spectra with a
 three-dimensional WCS, but stored in a two-dimensional image, retain
 their three-dimensional WCS headers.  Comments are preserved where
 values have not changed significantly.

1 CONVERT_Version_1.4-4
 Fixed a bug in FITS2NDF caused by a missing END card on a merged header.
  
1 CONVERT_Version_1.4-3
 Fixed a problem in NDF2FITS caused by a mismatch of conventions used in the
 TFORMn and TDIMn header cards for multi-dimensional character arrays.
 A corresponding fix was required for FITS2NDF.
 
1 CONVERT_Version_1.4-2
 Parameter WCSATTRS is added to FITS2NDF. This enables users to modify 
 the way WCS information is extracted from the FITS headers. This can
 be useful when the headers do not conform to conventions. 

1 CONVERT_Version_1.4-1
 Updated the IDL converters to work with IDL 5.5. Fix a problem causing a
 crash on Linux and document the fact that the Starlink IDL converters
 cannot be used with the 64-bit Solaris version of IDL - terminate gracefully
 where possible.

 Corrected an error in the section of this document describing the easy
 way to do IDL/NDF conversions. WRITE_NDF was described as if it were a
 function rather than a procedure.  

1 CONVERT_Version_1.4
 MTFITS2NDF added - a tcsh script to convert FITS tapes to NDF using FITS2NDF.

1 CONVERT_Version_1.3-8
 Corrects bugs in ASCII2NDF which caused segmentation violation.

1 CONVERT_Version_1.3-7
 NDF2FITS Corrects inappropriate axis symbols being used for CTYPE keywords.

1 CONVERT_Version_1.3-6
 FITS2NDF:
  o Improve error reporting if no WCS encoding can be used.

  o Don't handle WCS if NDIM less than or = 0.

  o Correct handling of NDF history records in the FITS header.

  
1 CONVERT_Version_1.3-5
 FITS2NDF creates a component of type FITS_HEADER, not NDF, in a container
 file for multi-extension FITS files if the FITS extension does not contain
 a data array.

1 CONVERT_Version_1.3-4

 Corrects a bug in FITS2NDF so that NAXIS > 0 and NAXISn = 0 is equivalent
 to NAXIS = 0.

 Corrects a bug in NDF2PGM which causes the image to be offset by 3 bytes.

1 CONVERT_Version_1.3-3

 Corrects a problem with NDF2FITS if there is garbage beyond the END header
 record in the NDF's FITS airlock, and stops a second ORIGIN header being
 output (copied from the airlock) if the ORIGIN parameter has been used to
 specify a non-default ORIGIN.
 
1 CONVERT_Version_1.3-2
  
 Two new converters, HDS2IDL and IDL2HDS, are provided for IDL users. They
 handle complete structures, unlike READ_NDF and WRITE_NDF which only handle
 the main arrays of NDFs. 

 NDF2FITS and FITS2NDF have been enhanced by the addition of FITS-AIPS and
 FITS-PC encodings. Also, appropriate messages are  output if there are no
 valid input files.

 FITS2NDF has also been enhanced to allow more flexibility over the handling
 of multi-extension FITS files. Syntax such as filename.fit[1] or 
 "filename.fit[extname=im2]" can be used to specify a single FITS extension
 to be converted, and additional parameters EXTABLE and CONTAINER allow FITS
 extensions to be combined to produce a single NDF or a series of components
 of a top-level HDS container file.

 The scripts associated with the NDF on-the-fly conversion system have been
 modified to allow a single extension from a multi-extension FITS file to be
 specified This feature requires applications to have been built with NDF 
 V1.5-6 or later.

 Different numbers of axes in the BaseFrames of the NDF and FitsChan FrameSets
 are now allowed when creating the NDF's WCS component.

 NDF2FITS now uses the NDG library to allow conversion of NDFs stored as
 sub-components within an HDS container file (eg scuba data, etc).

 Libraries from IRAF release V2.11.3 are used in this release for building
 NDF2IRAF and IRAF2NDF.

 SUN/55 has been updated to describe the new applications and enhancements,
 and to include the 'IRAF Versions' section. Early release-note sections have
 been removed. On installation, only a link to the installed LaTeX document
 is now retained in the source directory.

2 CONVERT_Version_1.2-4
 All the converters which are ADAM tasks have been combined into a 
 monolith to save disk space.

 The FITS converters now use the CFITSIO library.

 FITS2NDF will now report an error but continue to create the output
 NDF if an error occurs in creating history records.  It will also
 display  warnings if it finds projections which include unsupported
 IRAF extensions.

 A problem causing error
   "!! FTPSCL: Error defining the scale and offset."
 when running NDF2FITS has been corrected.

 Libraries from IRAF release V2.11.3 are used in this release for
 building NDF2IRAF and IRAF2NDF.

 SUN/55 has been updated to include these release notes and a
 copyright statement, and to correct some bugs in the HTML version
 header.

2 CONVERT_Version_1.2
  New applications to run in IDL:
  READ_NDF An IDL functionn to read an NDF component into an IDL array.

  WRITE_NDF An IDL procedure to write an IDL array to an  NDF component.

  Changed Applications:
  NDF2TIFF Various alternative methods of scaling the NDF data are 
    provided.

  NDF2GIF Various alternative methods of scaling the NDF data are 
    provided (the scaling is performed by NDF2TIFF).

  NDF2FITS Now has an additional parameter, ENCODING, to control the
    way WCS information is encoded within the FITS header.

  Documentation:
  SUN/55 and CONVERT help have been updated to describe the changes.

2 CONVERT_Version_1.1-3
  NDF2FITS  Corrected failure to propagate an extension containing a 
    character array.

  FITS2NDF
    Correct action if FMTCNV is TRUE and there is no BSCALE or BZERO
    in the FITS file.

    The number of characters in the NDF\_CLASS string is increased
    from 8 to 10.

2 CONVERT_Version_1.1-2
  FITS2NDF and NDF2FITS now allow the FITS-IRAF encoding. 

  NDF2FITS will no longer produce 'native' encoding by default. To this
    end, Parameter ENCODINGS has been replaced by Parameter NATIVE.

  TIFF2NDF, GIF2NDF and NDF2GIF have been altered to use a common release
  of Netpbm on all platforms, rather than a mixture of PBMPLUS and Netpbm.
  The relevant utilities of Netpbm must appear on your PATH if these
  CONVERT applications are to be used.

  SUN/55 and CONVERT help has been modified to reflect these changes and
  to improve the description of FITS2NDF's handling of Binary tables.

2 CONVERT_Version_1.1-1
  This fixes some bugs including NDF2FITS handling of UWORD and BYTE format
  to correct scaling and prevent overflows.

  It also outputs warning messages on header record errors and prevents
  overwriting of the final record.

  The automatic NDF conversion system has been altered so that the
  production of 'error' messages, preceded by !, by the conversion program
  will no longer be taken to mean that the conversion has failed.
  
2 CONVERT_Version_1.1

3 New_applications
There are two new applications:

  o AST2NDF -- This converts an Asterix data-cube to a standard NDF.

  o SPECX2NDF -- This converts a SPECX map to a standard NDF.

3 Changed_applications

  o ASCII2NDF Added MAXLEN parameter to permit long input records 
    without impacting the efficiency of processing short records.

  o FITS2NDF
    - Propagates the NDF WCS component. 
    - Filters out NDF-style history from the FITS airlock.  
    - Fixed bug which prevented the creation of NDF extensions which
      are arrays of structures.  
    - Processes the revised 2dF formats, and allows arbitrary additional 
      extensions; all 2dF extensions can now be an arbitrary order.  
    - Fixed bug which occurred when replacing negative errors in IUE 
      MXLO data. 
    - It now recognises logical binary-table columns.
    - Corrected validating Log file by record length on Solaris.
    - Processes IUE MXHI format.
    - Changed the scheme for naming multiple IUE MXLO NDFs within the 
      output container file; previously the row number was used, but 
      NDF names cannot start with numeric characters and an error was 
      consequently reported. The names LARGE and SMALL are now used.


  o IRAF2NDF
    - Sets the bounds of the NDF according to LBOUNDn keywords, 
      if present.
    - It no longer crashes when closing the IRAF file, if there
      was a problem opening the IRAF file.  
    - Propagates all IRAF history records (including blanks) to the
      FITS airlock when PROFITS=TRUE.  
    - IRAF HISTORY lines which are too long for a FITS header are 
      truncated with an ellipsis.

  o NDF2FITS
    - Creates a WCS component within the output NDFs (if possible), 
      based on FITS-WCS keywords (CRVAL, CRPIX, etc.), DSS keywords 
      (PLTRAH, PLTRAM, etc.), or AST Native keywords (see SUN/210).
    - Modified to propagate the revised 2dF extensions.  Thus the 
      OBJECT extension generates wider binary tables (from 210 to 
      224 bytes).  
    - Now propagates primitive NDF extensions to binary tables.  
    - Does not transfer the LBOUNDn headers in the FITS airlock.
    - Correct handling of null values.
    - Added TDISPn cards for better formatting of tables.
    - Handle ORIGIN as intended.

  o NDF2IRAF Does not transfer the LBOUNDn headers in the FITS
    airlock.
3 IRAF_Versions
  The CONVERT utilities NDF2IRAF and IRAF2NDF are built using copies of
  relevant IRAF libraries (which are included in the CONVERT release) 
  so they exhibit the same behaviour as the IRAF version from which the
  libraries were extracted. There are also some IRAF dependencies in the 
  so-called SPP routines of CONVERT. (These originate written in the 
  IRAF SPP language and include header files defining the layout of the
  IRAF image.) The versions of IRAF2NDF and NDF2IRAF which you use must 
  therefore be compatible with the version of IRAF which you are using.

  A new version of the IRAF image format has been developed for IRAF
  Version 2.11 onwards but at the time of writing this is not available 
  for all platforms.
  IRAF Version 2.11 will read either the old or new image formats but 
  will produce the new format by default. (It can be made to produce
  old-format images by setting environment variable oifversion=1.)
  Appropriate versions of the IRAF libraries and the SPP routines are 
  required for IRAF2NDF and NDF2IRAF to handle the new image format.

  CONVERT Version 1.1 contains IRAF V2.11 compatible versions of the
  SPP routines and the IRAF libraries Version 2.11.1. If you are still
  running IRAF V2.10, set environment variable oifversion=1 before 
  running NDF2IRAF. (This includes when running Starlink programs from 
  IRAF cl if an output image is produced by `on-the-fly' conversion.)

3 Documentation
  HELP and SUN/55 have been updated to include the new applications
  and to reflect the changes in behaviour listed above.

2 CONVERT_Version_1.0

3 New_applications

  o  DA2NDF -- This converts an unformatted stream file to
     an NDF.  Such files will originate from C or Pascal unformatted
     output (data streams), or from Fortran unformatted direct-access.

  o  FITS2NDF -- This is a much improved reader compared with
     KAPPA's FITSDIN.  It has support for binary table and image
     extensions in the FITS file.  It recognises many special data
     products too.  FITS2NDF can regenerate most NDFs from
     files made by its sister application, NDF2FITS.

  o  NDF2DA -- This provides the inverse operation to DA2NDF.
     It permits you to process such files wuth standard packages
     through the automatic-conversion system.

3 Global_changes

  o  Automatic Conversion -- There are two new formats defined that
     operate within the NDF automatic format-conversion system.
     GZIP is similar to COMPRESSED, as it operates on gzip-compressed
     NDFs with extension .sdf.gz.  STREAM operates on Fortran
     unformatted direct-access files or C unformatted data whose file
     extension is .das.  FITS2NDF is used for the forward conversion
     of FITS data instead of KAPPA's FITSDIN.  There are several
     file-extension synonyms, mostly for FITS, and .str for STREAM
     data.  The priority order in environment variables
     NDF_FORMATS_IN and NDF_FORMATS_OUT has changed, with GASP
     appearing later, and STREAM taking GASP's place.

  o  Documentation -- The documentation has been updated to match this
     version of the software.  Additional hyperlinks are introduced,
     including ones for the related applications.  There are
     additional notes in SUN/55 Appendix C.1 on how to process BDF
     files on STADAT.  The messages in the startup scripts mention
     how to obtain the hypertext documentation.  Several application
     modules missing from the online help are now present.

  o  FITS keywords -- In several places, the CRTYPEn and CTYPEn
     keywords were confused.  Likewise, a BUNITS keywords was
     erroneously recognised instead of BUNIT.  The standard header
     names are now used.  A new CUNITn keyword is added to store axis
     units.  Some tasks omitted to write CRPIXn for linear axis centres
     when the reference position was at the centre of the first
     element.  The origin information is exported through LBOUNDn
     keywords.

  o  Linearity of axes -- The improved and more-robust KAPPA
     subroutine is now used to test whether or not the elements of
     axis-centre arrays are equally spaced.

3 Changed_Applications

  o  ASCII2NDF -- Made far more efficient, mostly due to a change in
     the CHR library, but also because the maximum record length is
     now reduced to 512 bytes.  The default RECLEN is 132.

  o  DST2NDF -- Allows for non-standard .FITS structures.

  o  GIF2NDF -- Removed the KAPPA dependency.  It uses one less
     conversion stage, so is more efficient.  The documentation has
     been improved .

  o  IRAF2NDF --  This has undergone a major upgrade with support for
     axis propagation from eleven variants, control of the
     creation of NDF HISTORY records and FITS extension from the
     headers in the file.  The pixel origin is transferred from
     LBOUNDn headers.  The NDF label and units are created from
     OBJECT and BUNIT headers.  The documentation has been
     corrected and improved.

  o  NDF2ASCII --  Reduced the maximum record length to 512 bytes.
     The default RECLEN is 132.

  o  NDF2DST --  Moves imaginary component of a complex array to
     .Z.IMAGINARY.  There is a simplified error message when the
     FITS file already exists.

     There was a bug, now fixed, which could result in .OBS and .Z
     structures of the FIGARO extension being lost.  This occurred
     when FIGARO extension components SECZ or TIME (for OBS), and
     MAGFLAG or RANGE (for Z) were present and were physically
     stored following their respective structure.

  o  NDF2FITS -- BITPIX=-1 is allowed to enable the original FITS
     data type to be restored during automatic conversion.  NDF2FITS
     use a better algorithm to decide the required precision of
     floating-point header values.

     Sensible defaults are used for the scale and offset when
     converting a constant floating-point array to an integer array
     in the FITS file.

     Extensions within 2dF NDFs are recognised, and appropriate
     binary tables are created in the FITS file.

  o  NDF2GIF -- It is now available for alpha_OSF1.

  o  NDF2IRAF --  This has undergone a major upgrade with support for
     axis propagation including a multispec format for non-linear
     axis centres.  There is control of the export of NDF HISTORY
     records and FITS extension information to the headers in the
     IRAF file.  Header duplication is prevented.  The documentation
     has been corrected and improved.  Parameter FILLBAD defaults to
     0.  IRAF filenames are no longer converted to lowercase.
     The pixel origin is transferred from LBOUNDn headers.  The NDF
     label and units are progagated to OBJECT and BUNIT headers. 

  o  TIFF2NDF --  Removed KAPPA dependency.  It uses one less
     conversion stage, so is more efficient.  It is now available for
     alpha_OSF1.  Improved the documentation.

2 CONVERT_Version_0.6

3 New_applications
There are six new applications.
  o  NDF2FITS -- Converts an NDF to FITS format.

                 Conversion from FITS to NDF format can be done with
                 the FITS readers in the KAPPA package.

  o  GIF2NDF and NDF2GIF -- Convert between GIF files and NDFs.

  o  TIFF2NDF and NDF2TIFF -- Convert between TIF files and NDFs.

  o  NDF2PGM  -- Converts an NDF into a PBMPLUS PGM file.

In addition, SUN/55 now describes how to convert NDFs to IDL format.

3 Withdrawn_Applications

  BDF2NDF, NDF2BDF, DIPSO2NDF, and NDF2DIPSO.  See topic 
  "VMS_differences".

3 Changed_Applications
  o  IRAF2NDF and NDF2IRAF utilities are now available for alpha
     OSF/1 and sun4 Solaris platforms.  The libraries necessary to
     build them for sunOS and Ultrix are no longer distributed. 
     The availability on different systems is now documented.

  o  ASCII2NDF, NDF2ASCII, NDF2UNF, and UNF2NDF have no upper-limit
     restriction on Parameter NOPEREC.

  o  Fixed bugs in DST2NDF.  A Figaro n-dimensional array of axis
     centres is now placed into AXIS.MORE.FIGARO.DATA_ARRAY.
     The component name was previously called DATA.  DST2NDF now
     allows the axis width to be a scalar in the DST file, expanding
     it to a vector in the NDF.  Missing axes in the DST are always
     created in the NDF; formerly this step would be omitted if
     there were no FITS extension to write.

  o  Fixed bugs in NDF2DST.  An n-dimensional axis now uses the
     component name DATA rather than DATA_ARRAY for the pixel
     centres.  If AXIS().MORE.FIGARO.DATA_ARRAY is primitive, its
     DATA component becomes the new n-dimensional axis array in the
     Figaro file.  It was previously renamed from DATA_ARRAY to DATA.
     NDF2DST now also checks whether or not AXIS().MORE.FIGARO.WIDTH
     is primitive, and if it is, its DATA component becomes the new
     n-dimnensional axis-width array in the Figaro file.

3 Global_changes
  o  NDF Support -- CONVERT startup will now define sensible default
           values for the environment variables associated with the
           format-conversion facilities of the NDF library, so that
           NDF library calls may do `on the fly' conversion of
           `foreign' formats using the CONVERT utilities.

  o  Documentation -- SUN/55 now describes the use of CONVERT on UNIX
           platforms.  There is some residual reference to VMS,
           particularly in application specifications, and an appendix
           which points the reader at further information on the
           VMS release.

           A hypertext version of this document is available.

  o  Platform Support -- CONVERT is no longer supported on sunOS or
           Ultrix.  The VMS release is frozen at version 0.5.


2 CONVERT_Version_0.5

This the first release where CONVERT is available on UNIX platforms.
There are four new commands.

3 Global_changes

  o  CONVERT is available on UNIX platforms SUN/SunOS, SUN/Solaris,
     DEC/Ultrix, Alpha/OSF1 with the following exceptions:

     - BDF2NDF and NDF2BDF are not available because the Interim
       library is not being ported.

     - DIPSO2NDF and NDF2DIPSO are not required because UNIX DIPSO
       processes NDFs.

     - IRAF2NDF and NDF2IRAF are currently not available under OSF/1
       and Solaris, because at the time of development there were no
       IRAF IMFORT libraries available for these platforms.  However,
       the SunOS versions are provided for use in the compatibility
       mode of Solaris 2.3.

  o  CONHELP runs an application on UNIX platforms and accesses a
     portable-help library.

  o  The documentation is revised to reflect the lowercase usage and
     examples under UNIX.

  o  Special handling of some pathological datafiles have been made,
     mostly in BDF2NDF.


3 New_applications

There are four new applications.

   GASP2NDF converts an image in GASP format to an NDF.
   IRAF2NDF converts an IRAF image to an NDF.
   IRCAM2NDF converts an IRCAM data file to a series of NDFs.
   NDF2GASP converts a two-dimensional NDF into a GASP image.

3 Extended_and_corrected_applications
  
Here is a summary of the main modifications.

  o  BDF2NDF now ignores deleted descriptors rather than propagating
     them to the NDF's FITS extension.

  o  DST2NDF has a FORM parameter to select the NDF storage form of
     the output NDF.  It defaults to the simple form.  Previously,
     the quality and bad-pixel values decided.

  o  DST2NDF permits the output NDF to be placed inside an arbitrary
     HDS structure, rather than just being the sole top-level
     structure in the HDS container file.

  o  DST2NDF has had a number of bug fixes applied.  In V0.4 it was
     possible for an axis data array to have the wrong number of
     elements in certain circumstances; the FLAGGED value could have
     been set incorrectly when the FITS structure preceded the .Z
     structure within the DST file.

  o  DST2NDF and NDF2DST now handle quotes in FITS character values.

  o  NDF2ASCII and NDF2UNF ensure that a SIMPLE card appears first in
     the FITS header.

  o  NDF2BDF has better handling of rotated axes.  These are restored
     from the FITS extension, by overwriting the descriptors derived
     from the NDF AXIS.  (An NDF AXIS does not support rotated axes,
     so BDF2NDF makes a default axis with pixel co-ordinates.  A
     subsequent invocation of the old NDF2BDF would lose the original
     axis information from the destination NDF.  This change prevents
     that hysteresis.)

  o  NDF2BDF has had a number of bug fixes applied.  It is now not
     possible to generate erroneous CRTYPEn and CTYPEn values, when
     the NDF AXIS does not contain LABEL or UNITS.  The application
     reprompts if an invalid Interim type is given.  Lowercase types
     may now be entered.  An NDF with a FITS extension containing
     only the mandatory BDF descriptors (NAXIS,NAXISn) will now
     produce a valid IMAGE BDF, i.e. NAXIS, NAXISn derived from the
     NDF's shape are no longer missing from the BDF descriptors.

  o  NDF2DST has improved handling of FITS headers, particularly
     character strings.  Duplicated keywords are ignored.  HISTORY
     and COMMENT cards are processed correctly.

  o  NDF2IRAF can now convert one- and three-dimensional NDFs.

  o  NDF2IRAF has a FILLBAD parameter to allow NDF bad values to
     be replaced.  FILLBAD defaults to null, meaning do not perform
     bad-value substitution.

  o  NDF2IRAF can produce a signed-word IRAF image.  The output data
     type depends on the data type of the NDF's data array.

2 CONVERT_Version_0.4

The original purpose of this release was to fix bugs, however, it
was convenient to include some new applications for handling ordinary
files. There are five new commands.

3 Global_changes

  o  The documentation has largely been rewritten.  Application
     descriptions are expanded, and standardised; they include
     examples and usage.

  o  Online help is provided.

  o  From DCL, CONVERT commands must be enabled by entering 
     CONVERTSTART.

  o  Compiled interface files are provided for efficiency.

  o  The parameter names are consistent.  IN is used for the input
     file, OUT for the output file, and the data type is TYPE.
     In the previous version there was a mismatch between the
     application, which used Parameter FORMAT, and the documentation.

  o  The global parameter GLOBAL.DATA_ARRAY (current NDF) is used to
     suggest a default for the name of an input NDF, and it is
     updated when an output NDF is created.

  o  NDF sections may be used when converting from an NDF.

  o  Many bugs have been fixed, particularly in the area of FITS
     headers, and descriptors.

  o  Corrected the error reporting to adhere to Starlink standards.


3 New_applications

There are five new applications.

   ASCII2NDF converts an ASCII file to an NDF. 
   NDF2ASCII converts an NDF to an ASCII file. 
   NDF2IRAF converts an NDF to an IRAF (OIF) image. 
   NDF2UNF converts an NDF to a sequential unformatted file. 
   UNF2NDF converts a sequential unformatted file to an NDF.

3 Extended_and_corrected_applications
  
Here is a summary of the main modifications.

  o BDF2NDF and NDF2BDF can handle La Palma ING-style FITS headers.
    They process NDF units, and axis labels.

  o BDF2NDF and NDF2BDF Parameter TYPE has a dynamic default
    equivalent to the data type of the input BDF or NDF, rather than
    being defaulted to R or _REAL respectively.

  o The NDF axis structure will now always be valid when made by
    BDF2NDF.  Missing axis centres are filled with pixel co-ordinates.

  o NDF2BDF prevents special keywords from being copied from the FITS
    header when there are overriding objects present in the
    NDF; these objects are formatted into FITS-like descriptors.

  o BDF2NDF and DST2NDF will now generate card images in the FITS
    extension that conform to the FITS standard.  Long strings
    (>18 characters) are only truncated at the end of the card.
    NDF2DST correctly processes character-valued card-images in the
    FITS extension; it searches for the comment delimiter rather
    than assuming where the comment is located.  NDF2DST does not
    propagate FITS header cards with blank keywords.

  o DST2NDF and NDF2DST will process axis arrays with greater than
    one dimension.  They are situated in the axis Figaro extension.
    Both applications can process axis variance.

  o In DST2NDF certain objects in the DST are relocated in the NDF
    to be where the Figaro DSA_ library expects them.  NDF2DST moves
    them from their new locations.  The objects are .OBS.SECZ,
    .OBS.TIME, .Z.MAGFLAG, .Z.RANGE and they now reside in the
    top-level Figaro extension of an NDF.

  o DST2NDF preserves the type of the OBS structure within the NDF.
    It can process up to 7 dimensions.  Axis width is processed as
    a numeric array, rather than a character scalar.

  o The DST2NDF no longer creates a phantom two-dimensional FITS
    structure when there is an empty FITS structure within the DST
    file.

  o The bad-pixel processing has changed in DST2NDF.  Quality is
    only copied if the bad-pixel flag is false or absent.  In this
    case a simple NDF is made with its bad-pixel flag likewise set
    to false.

  o NDF2DST preserves the type of extensions in the FIGARO.MORE
    structure.  It writes the FLAGGED value to the DST file, as
    Figaro (DSA_) makes the opposite assumption, compared with
    the NDF, about the presence of bad pixels when the bad-pixel
    flag is absent.

  o NDF2DST propagates axis-variance and width arrays, and the
    contents of any axis Figaro extension.  If there is only one
    object in the Figaro extension, it is now copied to the DST.


