1 Changes_to_CONVERT

2 V0.4

The original purpose of this release was to fix bugs, however, it
was convenient to include some new applications for handling ordinary
files. There are five new commands.

3 Global_changes

  o  The documentation has largely been rewritten.  Application
     descriptions are expanded, and standardised; they include
     examples and usage.

  o  Online help is provided.

  o  From DCL, CONVERT commands must be enabled by entering 
     CONVERTSTART.

  o  Compiled interface files are provided for efficiency.

  o  The parameter names are consistent.  IN is used for the input
     file, OUT for the output file, and the data type is TYPE.
     In the previous version there was a mismatch between the
     application, which used parameter FORMAT, and the documentation.

  o  The global parameter GLOBAL.DATA_ARRAY (current NDF) is used to
     suggest a default for the name of an input NDF, and it is
     updated when an output NDF is created.

  o  NDF sections may be used when converting from an NDF.

  o  Many bugs have been fixed, particularly in the area of FITS
     headers, and descriptors.

  o  Corrected the error reporting to adhere to Starlink standards.


3 New_applications

There are five new applications.

   ASCII2NDF converts an ASCII file to an NDF. 
   NDF2ASCII converts an NDF to an ASCII file. 
   NDF2IRAF converts an NDF to an IRAF (OIF) image. 
   NDF2UNF converts an NDF to a sequential unformatted file. 
   UNF2NDF converts a sequential unformatted file to an NDF.

3 Extended_and_corrected_applications
  
Here is a summary of the main modifications.

  o BDF2NDF and NDF2BDF can handle La Palma ING-style FITS headers.
    They process NDF units, and axis labels.

  o BDF2NDF and NDF2BDF parameter TYPE has a dynamic default
    equivalent to the data type of the input BDF or NDF, rather than
    being defaulted to R or _REAL respectively.

  o The NDF axis structure will now always be valid when made by
    BDF2NDF.  Missing axis centres are filled with pixel co-ordinates.

  o NDF2BDF prevents special keywords from being copied from the FITS
    header when there are overriding objects present in the
    NDF; these objects are formatted into FITS-like descriptors.

  o BDF2NDF and DST2NDF will now generate card images in the FITS
    extension that conform to the FITS standard.  Long strings
    (>18 characters) are only truncated at the end of the card.
    NDF2DST correctly processes character-valued card-images in the
    FITS extension; it searches for the comment delimiter rather
    than assuming where the comment is located.  NDF2DST does not
    propagate FITS header cards with blank keywords.

  o DST2NDF and NDF2DST will process axis arrays with greater than
    one dimension.  They are situated in the axis Figaro extension.
    Both applications can process axis variance.

  o In DST2NDF certain objects in the DST are relocated in the NDF
    to be where the Figaro DSA_ library expects them.  NDF2DST moves
    them from their new locations.  The objects are .OBS.SECZ,
    .OBS.TIME, .Z.MAGFLAG, .Z.RANGE and they now reside in the
    top-level Figaro extension of an NDF.

  o DST2NDF preserves the type of the OBS structure within the NDF.
    It can process up to 7 dimensions.  Axis width is processed as
    a numeric array, rather than a character scalar.

  o The DST2NDF no longer creates a phantom two-dimensional FITS
    structure when there is an empty FITS structure within the DST
    file.

  o The bad-pixel processing has changed in DST2NDF.  Quality is
    only copied if the bad-pixel flag is false or absent.  In this
    case a simple NDF is made with its bad-pixel flag likewise set
    to false.

  o NDF2DST preserves the type of extensions in the FIGARO.MORE
    structure.  It writes the FLAGGED value to the DST file, as
    Figaro (DSA_) makes the opposite assumption, compared with
    the NDF, about the presence of bad pixels when the bad-pixel
    flag is absent.

  o NDF2DST propagates axis-variance and width arrays, and the
    contents of any axis Figaro extension.  If there is only one
    object in the Figaro extension, it is now copied to the DST.


2 V0.5

This the first release where CONVERT is available on UNIX platforms.
There are four new commands.

3 Global_changes

  o  CONVERT is available on UNIX platforms SUN/SunOS, SUN/Solaris,
     DEC/Ultrix, Alpha/OSF1 with the following exceptions:

     - BDF2NDF and NDF2BDF are not available because the Interim
       library is not being ported.

     - DIPSO2NDF and NDF2DIPSO are not required because UNIX DIPSO
       processes NDFs.

     - IRAF2NDF and NDF2IRAF are currently not available under OSF/1
       and Solaris, because at the time of development there were no
       IRAF IMFORT libraries available for these platforms.  However,
       the SunOS versions are provided for use in the compatibility
       mode of Solaris 2.3.

  o  CONHELP runs an application on UNIX platforms and accesses a
     portable-help library.

  o  The documentation is revised to reflect the lowercase usage and
     examples under UNIX.

  o  Special handling of some pathological datafiles have been made,
     mostly in BDF2NDF.


3 New_applications

There are four new applications.

   GASP2NDF converts an image in GASP format to an NDF.
   IRAF2NDF converts an IRAF image to an NDF.
   IRCAM2NDF converts an IRCAM data file to a series of NDFs.
   NDF2GASP converts a two-dimensional NDF into a GASP image.

3 Extended_and_corrected_applications
  
Here is a summary of the main modifications.

  o  BDF2NDF now ignores deleted descriptors rather than propagating
     them to the NDF's FITS extension.

  o  DST2NDF has a FORM parameter to select the NDF storage form of
     the output NDF.  It defaults to the simple form.  Previously,
     the quality and bad-pixel values decided.

  o  DST2NDF permits the output NDF to be placed inside an arbitrary
     HDS structure, rather than just being the sole top-level
     structure in the HDS container file.

  o  DST2NDF has had a number of bug fixes applied.  In V0.4 it was
     possible for an axis data array to have the wrong number of
     elements in certain circumstances; the FLAGGED value could have
     been set incorrectly when the FITS structure preceded the .Z
     structure within the DST file.

  o  DST2NDF and NDF2DST now handle quotes in FITS character values.

  o  NDF2ASCII and NDF2UNF ensure that a SIMPLE card appears first in
     the FITS header.

  o  NDF2BDF has better handling of rotated axes.  These are restored
     from the FITS extension, by overwriting the descriptors derived
     from the NDF AXIS.  (An NDF AXIS does not support rotated axes,
     so BDF2NDF makes a default axis with pixel co-ordinates.  A
     subsequent invocation of the old NDF2BDF would lose the original
     axis information from the destination NDF.  This change prevents
     that hysteresis.)

  o  NDF2BDF has had a number of bug fixes applied.  It is now not
     possible to generate erroneous CRTYPEn and CTYPEn values, when
     the NDF AXIS does not contain LABEL or UNITS.  The application
     reprompts if an invalid Interim type is given.  Lowercase types
     may now be entered.  An NDF with a FITS extension containing
     only the mandatory BDF descriptors (NAXIS,NAXISn) will now
     produce a valid IMAGE BDF, i.e. NAXIS, NAXISn derived from the
     NDF's shape are no longer missing from the BDF descriptors.

  o  NDF2DST has improved handling of FITS headers, particularly
     character strings.  Duplicated keywords are ignored.  HISTORY
     and COMMENT cards are processed correctly.

  o  NDF2IRAF can now convert one- and three-dimensional NDFs.

  o  NDF2IRAF has a FILLBAD parameter to allow NDF bad values to
     be replaced.  FILLBAD defaults to null, meaning do not perform
     bad-value substitution.

  o  NDF2IRAF can produce a signed-word IRAF image.  The output data
     type depends on the data type of the NDF's data array.

2 V0.6

3 New_applications
There are six new applications.
  o  NDF2FITS -- Converts an NDF to FITS format.

                 Conversion from FITS to NDF format can be done with
                 the FITS readers in the KAPPA package.

  o  GIF2NDF and NDF2GIF -- Convert between GIF files and NDFs.

  o  TIFF2NDF and NDF2TIFF -- Convert between TIF files and NDFs.

  o  NDF2PGM  -- Converts an NDF into a PBMPLUS PGM file.

In addition, SUN/55 now describes how to convert NDFs to IDL format.

3 Withdrawn_Applications

  BDF2NDF, NDF2BDF, DIPSO2NDF, and NDF2DIPSO.  See topic 
  "VMS_differences".

3 Changed_Applications
  o  IRAF2NDF and NDF2IRAF utilities are now available for alpha
     OSF/1 and sun4 Solaris platforms.  The libraries necessary to
     build them for sunOS and Ultrix are no longer distributed. 
     The availability on different systems is now documented.

  o  ASCII2NDF, NDF2ASCII, NDF2UNF, and UNF2NDF have no upper-limit
     restriction on parameter NOPEREC.

  o  Fixed bugs in DST2NDF.  A Figaro n-dimensional array of axis
     centres is now placed into AXIS.MORE.FIGARO.DATA_ARRAY.
     The component name was previously called DATA.  DST2NDF now
     allows the axis width to be a scalar in the DST file, expanding
     it to a vector in the NDF.  Missing axes in the DST are always
     created in the NDF; formerly this step would be omitted if
     there were no FITS extension to write.

  o  Fixed bugs in NDF2DST.  An n-dimensional axis now uses the
     component name DATA rather than DATA_ARRAY for the pixel
     centres.  If AXIS().MORE.FIGARO.DATA_ARRAY is primitive, its
     DATA component becomes the new n-dimensional axis array in the
     Figaro file.  It was previously renamed from DATA_ARRAY to DATA.
     NDF2DST now also checks whether or not AXIS().MORE.FIGARO.WIDTH
     is primitive, and if it is, its DATA component becomes the new
     n-dimnensional axis-width array in the Figaro file.

3 Global_changes
  o  NDF Support -- CONVERT startup will now define sensible default
           values for the environment variables associated with the
           format-conversion facilities of the NDF library, so that
           NDF library calls may do `on the fly' conversion of
           `foreign' formats using the CONVERT utilities.

  o  Documentation -- SUN/55 now describes the use of CONVERT on UNIX
           platforms.  There is some residual reference to VMS,
           particularly in application specifications, and an appendix
           which points the reader at further information on the
           VMS release.

           A hypertext version of this document is available.

  o  Platform Support -- CONVERT is no longer supported on sunOS or
           Ultrix.  The VMS release is frozen at version 0.5.


2 V1.0

3 New_applications

  o  DA2NDF -- This converts an unformatted stream file to
     an NDF.  Such files will originate from C or Pascal unformatted
     output (data streams), or from Fortran unformatted direct-access.

  o  FITS2NDF -- This is a much improved reader compared with
     KAPPA's FITSDIN.  It has support for binary table and image
     extensions in the FITS file.  It recognises many special data
     products too.  FITS2NDF can regenerate most NDFs from
     files made by its sister application, NDF2FITS.

  o  NDF2DA -- This provides the inverse operation to DA2NDF.
     It permits you to process such files with standard packages
     through the automatic-conversion system.

3 Global_changes

  o  Automatic Conversion -- There are two new formats defined that
     operate within the NDF automatic format-conversion system.
     GZIP is similar to COMPRESSED, as it operates on gzip-compressed
     NDFs with extension .sdf.gz.  STREAM operates on Fortran
     unformatted direct-access files or C unformatted data whose file
     extension is .das.  FITS2NDF is used for the forward conversion
     of FITS data instead of KAPPA's FITSDIN.  There are several
     file-extension synonyms, mostly for FITS, and .str for STREAM
     data.  The priority order in environment variables
     NDF_FORMATS_IN and NDF_FORMATS_OUT has changed, with GASP
     appearing later, and STREAM taking GASP's place.

  o  Documentation -- The documentation has been updated to match this
     version of the software.  Additional hyperlinks are introduced,
     including ones for the related applications.  There are
     additional notes in SUN/55 Appendix C.1 on how to process BDF
     files on STADAT.  The messages in the startup scripts mention
     how to obtain the hypertext documentation.  Several application
     modules missing from the online help are now present.

  o  FITS keywords -- In several places, the CRTYPEn and CTYPEn
     keywords were confused.  Likewise, a BUNITS keywords was
     erroneously recognised instead of BUNIT.  The standard header
     names are now used.  A new CUNITn keyword is added to store axis
     units.  Some tasks omitted to write CRPIXn for linear axis centres
     when the reference position was at the centre of the first
     element.  The origin information is exported through LBOUNDn
     keywords.

  o  Linearity of axes -- The improved and more-robust KAPPA
     subroutine is now used to test whether or not the elements of
     axis-centre arrays are equally spaced.

3 Changed_Applications

  o  ASCII2NDF -- Made far more efficient, mostly due to a change in
     the CHR library, but also because the maximum record length is
     now reduced to 512 bytes.  The default RECLEN is 132.

  o  DST2NDF -- Allows for non-standard .FITS structures.

  o  GIF2NDF -- Removed the KAPPA dependency.  It uses one less
     conversion stage, so is more efficient.  The documentation has
     been improved .

  o  IRAF2NDF --  This has undergone a major upgrade with support
     for axis propagation from eleven variants, control of the
     creation of NDF HISTORY records and FITS extension from the
     headers in the file.  The pixel origin is transferred from
     LBOUNDn headers.  The NDF label and units are created from
     OBJECT and BUNIT headers.  The documentation has been
     corrected and improved.

  o  NDF2ASCII --  Reduced the maximum record length to 512 bytes.
     The default RECLEN is 132.

  o  NDF2DST --  Moves imaginary component of a complex array to
     .Z.IMAGINARY.  There is a simplified error message when the
     FITS file already exists.

     There was a bug, now fixed, which could result in .OBS and .Z
     structures of the FIGARO extension being lost.  This occurred
     when FIGARO extension components SECZ or TIME (for OBS), and
     MAGFLAG or RANGE (for Z) were present and were physically
     stored following their respective structure.

  o  NDF2FITS -- BITPIX=-1 is allowed to enable the original FITS
     data type to be restored during automatic conversion.  NDF2FITS
     use a better algorithm to decide the required precision of
     floating-point header values.

     Sensible defaults are used for the scale and offset when
     converting a constant floating-point array to an integer array
     in the FITS file.

     Extensions within 2dF NDFs are recognised, and appropriate
     binary tables are created in the FITS file.

  o  NDF2GIF -- It is now available for alpha_OSF1.

  o  NDF2IRAF --  This has undergone a major upgrade with support for
     axis propagation including a multispec format for non-linear
     axis centres.  There is control of the export of NDF HISTORY
     records and FITS extension information to the headers in the
     IRAF file.  Header duplication is prevented.  The documentation
     has been corrected and improved.  Parameter FILLBAD defaults to
     0.  IRAF filenames are no longer converted to lowercase.
     The pixel origin is transferred from LBOUNDn headers.  The NDF
     label and units are progagated to OBJECT and BUNIT headers. 

  o  TIFF2NDF --  Removed KAPPA dependency.  It uses one less
     conversion stage, so is more efficient.  It is now available for
     alpha_OSF1.  Improved the documentation.

