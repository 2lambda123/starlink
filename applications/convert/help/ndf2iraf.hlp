1 NDF2IRAF
Converts an NDF to an IRAF image.

Usage:

   ndf2iraf in out [fillbad]

Description:

   This application converts an NDF to an IRAF image.  See the Notes
   for details of the conversion.
2 Parameters
For information on individual parameters, select from the list below:
3 IN
IN = NDF (Read)
   The input NDF data structure.  The suggested default is the
   current NDF if one exists, otherwise it is the current value.
3 FILLBAD
FILLBAD = _REAL (Read)
   The value used to replace bad pixels in the NDF's data array
   before it is copied to the IRAF file.  A null value (!) means
   no replacements are to be made.  This parameter is ignored if
   there are no bad values.  [!]
3 OUT
OUT = LITERAL (Write)
   The name of the output IRAF image.  Two files are produced
   with the same name but different extensions. The ".pix" file
   contains the data array, and ".imh" is the associated header
   file that may contain a copy of the NDF's FITS extension.
   The suggested default is the current value.
2 Examples
ndf2iraf abell119 a119
   Converts an NDF called abell119 into the IRAF image comprising
   the pixel file a119.pix and the header file a119.imh.  If there
   are any bad values present they are copied verbatim to the IRAF
   image.

ndf2iraf qsospe qsospe fillbad=0
   Converts the NDF called QSOSPE to an IRAF image comprising the
   pixel file qsospe.imh and the header file qsospe.pix.  Any bad
   values in the data array are replaced by zero.
2 Notes
The rules for the conversion are as follows:

-  The NDF data array is copied to the ".pix" file.

-  The NDF title is written to the header object i_title in
the ".imh" header file. There is a limit of twenty characters.

-  If there is a FITS extension in the NDF, then the elements up
to the first END keyword of this are added to the `user area' of
the IRAF header file.

-  A HISTORY record is added to the IRAF header file indicating
that it originated in the named NDF and was converted by
NDF2IRAF.

-  All other NDF components are ignored.
2 Related_Applications
   IRAF2NDF
2 Pitfalls
   The IMFORT routines refuse to overwrite an IRAF image if an image
   with the same name exists.  The application then aborts.

   Some of the routines required for accessing the IRAF header image
   are written in SPP. Macros are used to find the start of the
   header line section, this constitutes an `Interface violation' as
   these macros are not part of the IMFORT interface specification.
   It is possible that these may be changed in the future, so
   beware.
2 Prior_Requirements
   This routine can only be linked on a machine which has the IRAF
   system installed, or access to the object libraries required.
2 Keywords
   CONVERT, IRAF
2 Authors
RAHM: Rhys Morris (STARLINK, University of Wales, Cardiff)

MJC: Malcolm J. Currie (STARLINK)
2 History
 21-AUG-1992 (RAHM):
    Original version.

 1992 September 29 (MJC):
    Standardised the prologue.  Corrected the error reporting and
    closedown.  Made the data copying more efficient.  Corrected
    some minor bugs.

 1993 July 21 (MJC):
    Added FILLBAD option, full support for one-dimensional NDFs,
    allow conversion of cubes, and able to make a signed-word IRAF
    image.
2 Implementation_Status
   -  Only handles one-, two-, and three-dimensional NDFs.

   -  Of the NDF's array components only the data array may be
   copied.

   -  The IRAF image produced has type SIGNED WORD or REAL dependent
   of the type of the NDF's data array.  (The IRAF imfort FORTRAN
   subroutine library only supports these data types.)  For _BYTE,
   _UBYTE, and _WORD data arrays the IRAF image will have type
   SIGNED WORD; for all other data types of the NDF data array a
   REAL IRAF image is made.  The pixel type of the image can be
   changed from within IRAF using the 'chpixtype' task in the
   'images' package.

   -  Bad values may arise due to type conversion.  These too are
   substituted by the (non-null) value of FILLBAD.
