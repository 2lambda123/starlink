1 NDF2ASCII
Writes an NDF to an ASCII file.

Usage:

   NDF2ASCII IN OUT [COMP] [RECLEN] NOPEREC=?

Description:

   This application converts an NDF to an ASCII file.  Only one of
   the array components may be copied to the output file.  Preceding
   the data there is an optional header consisting of either the
   FITS extension with the values of certain keywords replaced by
   information derived from the NDF, or a minimal FITS header also
   derived from the NDF.  The output file uses LIST carriagecontrol.
2 Parameters
For information on individual parameters, select from the list below:
3 COMP
COMP = LITERAL (Read)
   The NDF component to be copied.  It may be "Data", "Quality"
   or "Variance". ["Data"]
3 FITS
FITS = _LOGICAL (Read)
   If true, any FITS extension is written to start of the output
   file, unless there is no extension whereupon a minimal FITS
   header is written to the ASCII file. [FALSE]
3 FIXED
FIXED = _LOGICAL (Read)
   If true, the output file allocates a fixed number of
   characters per data value.  The number of characters chosen is
   the minimum that prevents any loss of precision, and hence is
   dependent on the data type of the NDF array.  When FIXED is
   FALSE, data values are packed as efficiently as possible within
   each record. [FALSE]
3 IN
IN = NDF (Read)
   Input NDF data structure. The suggested default is the current
   NDF if one exists, otherwise it is the current value.
3 NOPEREC
NOPEREC = _INTEGER (Read)
   The number of data values per record of the output file, when
   FIXED is TRUE.  It should be in the range 1 to 16383.
   The suggested default is the current value, or 8 when there
   is not one.
3 OUT
OUT = FILENAME (Write)
   Name of the output formatted Fortran file.  The file will
   normally have variable-length records when there is a header,
   but always fixed-length records when there is no header.  It
   has a default file extension of ".DAT".
3 RECLEN
RECLEN = _INTEGER (Write)
   The maximum record length in bytes of the output file.  This
   must be between 32 and 32766.  The lower limit is further
   increased to 80 when there is a FITS header to be copied.  It
   is only used when FIXED is FALSE and will default to the
   current value, or 512 if there is no current value.  When
   FIXED is TRUE the application creates data records whose
   length is the product of the number of bytes per value plus
   one (for the space), times the number of values per record. []
2 Examples
NDF2ASCII CLUSTER CLUSTER.DAT
   This copies the data array of the NDF called CLUSTER to an
   ASCII file called CLUSTER.DAT.  The maximum recordlength of
   CLUSTER.DAT is 512 bytes, and the data values are packed into
   these records as efficiently as possible.

NDF2ASCII CLUSTER CLUSTER.DAT V
   This copies the variance of the NDF called CLUSTER to an
   ASCII file called CLUSTER.DAT.  The maximum recordlength of
   CLUSTER.DAT is 512 bytes, and the variance values are packed
   into these records as efficiently as possible.

NDF2ASCII CLUSTER CLUSTER.DAT FIXED NOPEREC=12
   This copies the data array of the NDF called CLUSTER to an
   ASCII file called CLUSTER.DAT.  There are twelve data values
   per record in CLUSTER.DAT.

NDF2ASCII OUT=NDF234.DAT FITS RECLEN=128 IN=@234
   This copies the data array of the NDF called 234 to an
   ASCII file called NDF234.DAT.  The maximum recordlength of
   CLUSTER.DAT is 128 bytes, and the data values are packed into
   these records as efficiently as possible.  If there is a FITS
   extension, it is copied to NDF234.DAT with substitution of
   certain keywords, otherwise a minimal FITS header is produced.
2 Notes
The details of the conversion are as follows:

   -  the NDF array as selected by COMP is written to the ASCII
   file in records following an optional header.  When FIXED is
   FALSE all records are padded out to the recordlength.

   -  HISTORY is not propagated.

   -  ORIGIN information is lost.

When a header is to be made, it is composed of FITS-like card
images as follows:

   -  The number of dimensions of the data array is written
   to the keyword NAXIS, and the actual dimensions to NAXIS1,
   NAXIS2 etc. as appropriate.

   -  If the NDF contains any linear axis structures the
   information necessary to generate these structures is
   written to the FITS-like headers. For example, if a linear
   AXIS(1) structure exists in the input NDF the value of the
   first data point is stored with the keyword CRVAL1,
   and the incremental value between successive axis data is
   stored in keyword CDELT1. If there is an axis label it is
   written to keyword CRTYPE1, and axis unit is written to CTYPE1.
   (Similarly for AXIS(2) structures etc.) FITS does not have a
   standard method of storing axis widths and variances, so these
   NDF components will not be propagated to the header.
   Non-linear axis data arrays cannot be represented by CRVALn
   and CDELTn, and must be ignored.

   -  If the input NDF contains TITLE, LABEL or UNITS components
   these are stored with the keywords TITLE, LABEL or BUNITS
   respectively.

   -  If the input NDF contains a FITS extension, the FITS items
   may be written to the FITS-like header, with the following
   exceptions:
      o  BITPIX is derived from the type of the NDF data array,
      and so it is not copied from the NDF FITS extension.
      o  NAXIS, and NAXISn are derived from the dimensions of the
      NDF data array as described above, so these items are not
      copied from the NDF FITS extension.
      o  The TITLE, LABEL, and BUNITS descriptors are only copied
      if no TITLE, LABEL, and UNITS NDF components respectively
      have already been copied into these headers.
      o  The CDELTn, CRVALn, CTYPEn, and CRTYPEn descriptors in
      the FITS extension are only copied if the input NDF
      contained no linear axis structures.
      o  The standard order of the FITS keywords is preserved,
      thus BITPIX, NAXIS and NAXISn appear immediately after the
      first card image, which should be SIMPLE.
      o  BSCALE and BZERO in a FITS extension are copied when
      BITPIX is positive, i.e. the array is not floating-point.

   -  An extra header record with keyword UNSIGNED and logical
   value T is added when the array data type is one of the HDS
   unsigned integer types.  This is done because standard FITS
   does not support unsigned integers, and allows (in conjunction
   with BITPIX) applications reading the ASCII file to determine
   the data type of the array.

   -  The last header record card will be the standard FITS END.

   -  Other extensions are not propagated.
2 Related_Applications
   CONVERT: ASCII2NDF; KAPPA: TRANDAT; SPECDRE: ASCIN and ASCOUT.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1991 January 28 (MJC):
    Original version.

 1992 September 15 (MJC):
    Added more control of the formatting of the output file.
2 Implementation_Status
   -  The value of bad pixels is not written to a FITS-like header
   record with keyword BLANK.
