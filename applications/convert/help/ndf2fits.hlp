1 NDF2FITS
Converts NDFs into FITS files.

Usage:

   ndf2fits in out [comp] [bitpix] [origin]

Description:

   This application converts one or more NDF files into files in the
   FITS format.  It uses the IMAGE extension to store VARIANCE and
   QUALITY, and binary tables to store NDF extensions, except for
   the FITS extension, which may be merged into the output FITS
   file's headers.
2 Parameters
For information on individual parameters, select from the list below:
3 BITPIX
BITPIX = GROUP (Read)
   The FITS bits-per-pixel (BITPIX) value for each conversion.
   This specifies the data type of the output FITS file.
   Permitted values are: 8 for unsigned byte, 16 for signed word,
   32 for integer, -32 for real, -64 for double precision.  0
   will cause the output file to have the data type equivalent to
   that of the input NDF.

   BITPIX must be enclosed in double quotes and may be a list of
   comma-separated values to be applied to each conversion in turn.
   An error results if more values than the number of input NDFs
   are supplied.  If too few are given, the last value in the list
   applied to all the conversions.  The given values must be in the
   file may be used.  If more than one line is required to enter the
   information at a prompt then place a "-" at the end of each line
   where a continuation line is desired.
   [0]
3 COMP
COMP = GROUP (Read)
   The list of array components to attempt to transfer to each
   FITS file.  The acceptable values are "D" for the main data
   array "V" for variance, "Q" for quality, or any permutation
   thereof.  The special value "A" means all components, i.e.
   COMP="DVQ".  Thus COMP="VD" requests that both the data array
   and variance are to be converted if present.  During
   processing at least one, if not all, of the requested
   components must be present, otherwise an error is reported and
   processing turns to the next input NDF.  If the data component
   is in the list, it will always be processed first into the
   FITS primary array.  The order of the variance and quality
   in COMP decides the order they will appear in the FITS file.

   COMP may be a list of comma-separated values to be applied to
   each conversion in turn.  The list must be enclosed in double
   quotes.  An error results if more values than the number of
   input NDFs are supplied.  If too few are given, the last value
   in the list is applied to the remainder of the NDFs; thus a
   single value is applied to all the conversions.  The given
   values must be in the same order as that of the input NDFs.
   Indirection through a text file may be used.  If more than one
   line is required to enter the information at a prompt then
   place a "-" at the end of each line where a continuation line
   is desired.
   ["A"]
3 IN
IN = GROUP (Read)
   The names of the NDFs to be converted into FITS format.  It
   may be a list of NDF names or direction specifications
   separated by commas and enclosed in double quotes.  NDF names
   may include the regular expressions ("*", "?", "[a-z]" etc.)
   on UNIX systems.  Indirection may occur through text files
   (nested up to seven deep).  The indirection character is "^".
   If extra prompt lines are required, append the continuation
   character "-" to the end of the line.
   Comments in the indirection file begin with the character "#".
3 OUT
OUT = GROUP (Write)
   The names for the output FITS files.  These may be enclosed in
   double quotes and specified as a list of comma-separated names,
   OR, using modification elements to specify output filenames
   based on the input filenames.  Indirection may be used if
   required.
   The simplest modification element is the asterisk "*", which
   means call the output FITS files the same
   name (without any directory specification) as the corresponding
   input NDF, but with file extension ".fit" instead of the NDF's
   extension of ".sdf".
   Other types of modification can also occur so OUT = "x*.fit"
   would mean that the output files would have the same name
   as the input NDFs except for an "x" prefix, and the file
   extension of ".fit".  You can also replace a specified string
   in the output filename, for example OUT="x*.fit/cal/Starlink/"
   replaces the string "cal" with "Starlink" in any of the output
   names "x*.fit".
3 ORIGIN
ORIGIN = LITERAL (Read)
   The origin of the FITS files.  This becomes the value of the
   ORIGIN keyword in the FITS headers.  If a null value is given
   it defaults to "Starlink Project, U.K.".
   [!]
3 PROEXTS
PROEXTS = _LOGICAL (Read)
   If true, the NDF extensions (other than the FITS extension)
   are propagated to the FITS files as FITS binary-table
   extensions, one per structure of the hierarchy. [FALSE]
3 PROFITS
PROFITS = _LOGICAL (Read)
   If true, the contents of the FITS extension of the NDF are
   merged with the header information derived from the standard
   NDF components.  See the Notes for details of the merger.
   [TRUE]
2 Examples
ndf2fits horse logo.fit d
   This converts the NDF called horse to the FITS file called
   logo.fit.  The data type of the FITS primary data array matches
   that of the NDF's data array.  The FITS extension in the NDF
   is merged into the FITS header of logo.fit.

ndf2fits horse logo.fit d proexts
   This converts the NDF called horse to the FITS file called
   logo.fit.  The data type of the FITS primary data array matches
   that of the NDF's data array.  The FITS extension in the NDF
   is merged into the FITS header of logo.fit.  In addition any
   NDF extensions (apart from FITS) are turned into binary tables.
   that follow the primary header and data unit.

ndf2fits horse logo.fit
   This converts the NDF called horse to the FITS file called
   logo.fit.  The data type of the FITS primary data array matches
   that of the NDF's data array.  The FITS extension in the NDF
   is merged into the FITS header of logo.fit.  Should horse
   contain variance and quality arrays, these are written in IMAGE
   extensions.

ndf2fits "data/a*z" "*" comp=v noprofits bitpix="-32"
   This converts the NDFs with names beginning with "a" and ending
   in "z" in the directory called data into FITS files of the same
   name and with a file extension called .fits.  The variance
   array becomes the data array of each FITS file.  The data type
   of the FITS primary data array single-precision floating
   point.  Any FITS extension in the NDF is ignored.

ndf2fits "abc,def" "jvp1.fit,jvp2.fit" comp=d  bitpix="16,-64"
   This converts the NDFs called abc and def into FITS files
   called jvp1.fit and jvp2.fit respectively.  The data type of
   the FITS primary data array is signed integer words in
   jvp1.fit, and double-precision floating point in jvp2.fit. The
   FITS extension in each NDFs is merged into the FITS header of
   the corresponding FITS file.
2 Notes
The rules for the conversion are as follows:

-  The NDF main data array becomes the primary data array of the
FITS file if it is in value of parameter COMP, otherwise the first
array defined by parameter COMP will become the primary data
array.  A conversion from floating point to integer or to a
shorter integer type will cause the output array to be scaled and
offset, the values being recorded in keywords BSCALE and BZERO.
There is an offset (keyword BZERO) applied to signed byte and
unsigned word types to make them unsigned-byte and signed-word
values respectively in the FITS array (this is because FITS does
not support these data types).

-  The FITS keyword BLANK records the bad values for integer
output types.  Bad values in floating-point output arrays are
denoted by IEEE not-a-number values.

-  The NDF's quality and variance arrays appear in individual
FITS IMAGE extensions immediately following the primary header
and data unit, unless that component already appears as the
primary data array.  The quality array will always be written as
an unsigned-byte array in the FITS file, regardless of the value
of the parameter BITPIX.

-  Here are details of the processing of standard items from the
NDF into the FITS header, listed by FITS keyword.
   SIMPLE, EXTEND, PCOUNT, GCOUNT --- all take their default
     values.
   BITPIX, NAXIS, NAXISn --- are derived directly from the NDF
     data array;
   CRVALn, CDELTn, CRPIXn, CRTYPEn, CTYPEn --- are derived from
     the NDF axis structures if possible.  If no linear NDF axis
     structures are present, the values in the NDF FITS extension
     are copied (when parameter PROFITS is true).  If any axes
     are non-linear, all FITS axis information is lost.
   OBJECT, LABEL, BUNITS --- the values held in the NDF's title,
     label, and units components respectively are used if
     they are defined; otherwise any values found in the FITS
     extension are used (provided parameter PROFITS is true).
   ORIGIN and DATE --- are created automatically.  However the
     former may be overridden by an ORIGIN card in the NDF
     extension.
   EXTNAME --- is the component name of the object from the COMP
     argument.
   HDUCLAS1, HDUCLASn --- "NDF" and the value of COMP
     respectively.
   LBOUNDn --- is the pixel origin for the nth dimension when
     any of the pixel origins is not equal to 1.  (This is not a
     standard FITS keyword.)
   XTENSION, BSCALE, BZERO, BLANK and END --- are not propagated
     from the NDF's FITS extension.  XTENSION will be set for
     any extension.  BSCALE and BZERO will be defined based on
     the chosen output data type in comparison with the NDF
     array's type, but cards with values 1.0 and 0.0 respectively
     are written to reserve places in the header section.  These
     `reservation' cards are for efficiency and they can always
     be deleted later.  BLANK is set to the Starlink standard bad
     value corresponding to the type specified by BITPIX, but only
     for integer types and not for the quality array.  It appears
     regardless of whether or not there are bad values actually
     present in the array; this is for the same efficiency reasons
     as before.  The END card terminates the FITS header.
2 Authors
MJC: Malcolm J. Currie (STARLINK)
2 History
 1994 June 3 (MJC):
    Original version.
2 Implementation_Status
   - All NDF data types are supported.
