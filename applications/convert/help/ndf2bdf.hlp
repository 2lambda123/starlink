1 NDF2BDF
Converts an NDF to a Starlink Interim BDF file.

Usage:

   NDF2BDF IN OUT [TYPE] [DESCRIP]

Description:

   This application converts an NDF (see SUN/33) to the Bulk Data
   Frame (BDF) format used by the INTERIM Environment (see SUN/4).
   Type conversion may be performed at the same time.
2 Parameters
For information on individual parameters, select from the list below:
3 IN
IN = NDF (Read)
   The NDF to be converted to a BDF.  The suggested default is
   the current NDF if one exists, otherwise it is the current
   value.
3 OUT
OUT = BDF (Write)
   The name of BDF converted from the NDF.  No file extension
   should be given, as the application will automatically give
   extension ".BDF".
3 TYPE
TYPE = LITERAL (Read)
   The data type of the output BDF.  It must be one of the
   following Interim types: "SB", "SW", "R", "SL", "DP", "UB",
   "UW" corresponding to signed byte, signed word, real, signed
   longword, double precision, unsigned byte, unsigned word.
   See SUN/4 for further details.  The default is the type
   corresponding to that of the NDF.  []
3 DESCRIP
DESCRIP = _LOGICAL (Read)
   If true the keyword and values in a FITS extension are copied
   to the BDF's descriptors with a number of exceptions listed
   in the Notes.  [FALSE]
3 CONNECT
CONNECT = FILENAME (Write)
   The Interim connection file.  It is deleted when the
   application terminates.  [NDF2BDF.TMP]
3 COMMAND
COMMAND = FILENAME (Write)
   The Interim command file.  It is deleted when the application
   terminates.  [USERCOM.TMP]
2 Examples
NDF2BDF NEW OLD
   This converts the NDF called NEW (in file NEW.SDF) to the
   BDF called OLD (in file OLD.BDF).  OLD's data array will have
   the same data type as that of NEW.  The FITS header within
   NEW is converted to descriptors within OLD.

NDF2BDF NEW OLD DESCRIP
   This converts the NDF called NEW (in file NEW.SDF) to the
   BDF called OLD (in file OLD.BDF).  OLD's data array will have
   the same data type as that of NEW.  The FITS header within
   NEW is converted to descriptors within OLD, and are reported
   to the user.

NDF2BDF HORSE HORSE TYPE=R
   This converts the NDF called HORSE (in file HORSE.SDF) to the
   BDF also called HORSE (in file HORSE.BDF).  The BDF's data
   array will contain 4-byte floating-point numbers.  The FITS
   header within HORSE is converted to descriptors within
   HORSE.BDF.
2 Notes
The details of the conversion are as follows:

   -  the NDF main data array is written to the BDF data array.

   -  QUALITY, and VARIANCE have no counterparts in the BDF, and
   so cannot be propagated.

   -  HISTORY is not propagated.

   -  UNITS is written to descriptor BUNITS.

   -  The number of dimensions of the data array is written
   to the BDF descriptor NAXIS, and the actual dimensions to
   NAXIS1, NAXIS2 etc. as appropriate.

   -  If the NDF contains any linear axis structures the
   information necessary to generate these structures is written
   to the BDF descriptors (except when there is a non-zero value
   of CROTAn in the FITS extension).  For example, if a linear
   AXIS(1) structure exists in the input NDF the value of the
   first data point is stored in the BDF descriptor CRVAL1,
   and the incremental value between successive axis data is
   stored in CDELT1. If there is an axis label it is written to
   descriptor CRTYPE1, and axis unit is written to CTYPE1.
   (Similarly for AXIS(2) structures etc.) FITS does not have a
   standard method of storing axis widths and variances, so these
   NDF components will not be propagated.  Non-linear axis data
   arrays cannot be represented by CRVALn and CDELTn, and must be
   ignored.

   -  If the input NDF contains TITLE and LABEL components these
   are stored in the BDF descriptors TITLE and LABEL.

   -  If the input NDF contains a FITS extension, the FITS items
   may be written to the BDF descriptors, with the following
   exceptions:
      o  NAXIS, and NAXISn are derived from the dimensions of
      the NDF data array as described above, so these items
      are not copied from the NDF FITS extension.
      o  The TITLE, LABEL, and BUNITS descriptors are only copied
      if no TITLE, LABEL, and UNITS NDF components have already
      been copied into these descriptors.
      o  The CDELTn, CRVALn, CRPIXn, CTYPEn, and CRTYPEn
      descriptors in the FITS extension are only copied if the
      input NDF contained no linear axis structures or there is a
      non-zero CROTAn descriptor.
      o  The standard order of the FITS keywords is preserved,
      thus NAXIS and NAXISn appear immediately after the second
      card image, which should be BITPIX.  No FITS comments are
      written following the values of the above exceptions for
      compatibility with certain INTERIM applications.
      FITS-header lines with blank keywords are not copied.

   -  Other extensions have no BDF counterparts and therefore are
   not propagated.

   -  All character objects longer than 70 characters are
   truncated in a BDF descriptor.
2 Related_Applications
   CONVERT: BDF2NDF.
2 Authors
JM: Jo Murray (STARLINK)

MJC: Malcolm J. Currie (STARLINK)
2 History
 1991 March 5th (JM):
    Adapted from STAROUT.

 1991 October 30 (MJC):
    Changed FORMAT parameter to TYPE for consistency with the paper
    documentation.  Also gave TYPE a dynamic default of the type of
    the NDF.  Added the ADAM parameters and Usage sections to the
    prologue.  Tidied the prologue.

 1992 January 30 (MJC):
    Renamed the parameters for the NDF and BDF to IN and OUT
    respectively to agree with SUN/55 and consistency.  Added
    examples.  Processes UNITS and AXIS.LABEL components of the
    NDF.

 1992 September 5 (MJC):
    Prevented special keywords from being copied from the FITS
    header when there are overriding objects present in the
    NDF; these are formatted into FITS-like descriptors.

 1992 November 16 (MJC):
    Made more robust for the case when there are duplicated
    standard FITS headers at the start of the FITS extension.
    Allowed for non-zero axis rotation so that axis information is
    not lost when converting a BDF to an NDF and then back to a
    BDF.

 1993 January 4 (MJC):
    Fixed a bug that made it was possible not to write mandatory
    descriptors to the BDF.  Allowed lowercase Interim types.
2 Implementation_Status
   -  Primitive NDFs are created.

   -  The value of bad pixels is not written to the descriptor BLANK.

   -  Only available on VMS platforms.
