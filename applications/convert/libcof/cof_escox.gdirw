      SUBROUTINE COF_ESCO<T>( BAD, EL, ARRAY, MINVAL, MAXVAL, SCALE,
     :                        OFFSET, STATUS )
*+
*  Name:
*     COF_ESCOx

*  Purpose:
*     Computes the block floating-point scale and offset between limits.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL COF_ESCOx( BAD, EL, ARRAY, MINVAL, MAXVAL, SCALE, OFFSET,
*                      STATUS )

*  Description:
*     This routine computes the scale and offset required to convert the
*     full dynamic range of an array to lie between the supplied upper
*     and lower limits.

*  Arguments:
*     BAD = LOGICAL (Given)
*        If true there may be bad pixels present in the array.  If false
*        it is safe not to check for bad values.
*     EL = INTEGER (Given)
*        The number of elements in the array.
*     ARRAY( EL ) = ? (Given)
*        The array for which the scale and offset are to be computed.
*     MINVAL = DOUBLE PRECISION (Given)
*        The minimum scaling limit.
*     MAXVAL = DOUBLE PRECISION (Given)
*        The maximum scaling limit.
*     SCALE = DOUBLE PRECISION (Returned)
*        The scale needed to convert values in the input array to lie
*        between the supplied limits.
*     OFFSET = DOUBLE PRECISION (Returned)
*        The offset needed to convert values in the input array to lie
*        between the supplied limits.
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Notes:
*     -  There is a routine for each numeric data type: replace "x" in
*     the routine name by D, R, I, W, UW, B or UB as appropriate. The
*     array supplied to the routine must have the data type specified.

*  [optional_subroutine_items]...
*  Authors:
*     MJC: Malcolm J. Currie (STARLINK)
*     {enter_new_authors_here}

*  History:
*     1994 June 2 (MJC):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
      
*  Type Definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants

*  Arguments Given:
      LOGICAL BAD
      INTEGER EL
      <TYPE> ARRAY( EL )
      DOUBLE PRECISION MINVAL
      DOUBLE PRECISION MAXVAL

*  Arguments Returned:
      DOUBLE PRECISION SCALE
      DOUBLE PRECISION OFFSET

*  Status:
      INTEGER STATUS             ! Global status

*  Local Variables:
      INTEGER NINVAL             ! Number of bad values in the array
      INTEGER MAXPOS             ! Index of the maximum value
      <LTYPE> MAXV               ! Maximum value in the array
      INTEGER MINPOS             ! Index of the minimum value
      <LTYPE> MINV               ! Minimum value in the array

*  Internal References:
      INCLUDE 'NUM_DEC_CVT'      ! NUM declarations for conversions
      INCLUDE 'NUM_DEF_CVT'      ! NUM definitions for conversions

*.

*  Check the inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Find the range of values in the input array.
      CALL COF_MXMN<T>( BAD, EL, ARRAY, NINVAL, MAXV, MINV, MAXPOS,
     :                   MINPOS, STATUS )

      IF ( MAXV .NE. MINV ) THEN

*  Derive the scale factor by differencing the simultaneous equations.
*  Note the halving is done to prevent overflows.  Try to defeat the
*  optimiser too.
         SCALE = 0.5D0 * ( NUM_<T>TOD( MAXV ) - NUM_<T>TOD( MINV ) )
         SCALE = SCALE / ( ( 0.5D0 * MAXVAL ) - ( 0.5D0 * MINVAL ) )

*  Derive the offset.
         OFFSET = NUM_<T>TOD( MAXV ) - SCALE * MAXVAL

*  Assign sensible values for a constant image.
      ELSE
         SCALE = 1.0D0
         OFFSET = 0.0D0
      END IF

      END
