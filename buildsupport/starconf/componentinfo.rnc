# Converted from componentinfo.dtd revision 1.13 by Norman, using Trang
# http://www.thaiopensource.com/relaxng/trang.html
#
# One change: at the end, the 'start' symbol was changed to componentset|component

# This DTD is designed so that each of the elements <componentset>, 
# <component> and <manifest> may be used as a top-level element.
# The intention is that each component maintains an XML file which
# is a valid instance of the <component> element; these can be
# simply concatenated into the content of a valid instance of the
# <componentset> element; and when components are installed, they
# will additionally install an XML file which is a valid instance
# of this DTD with the <manifest> element at the top level.

# A list of components

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

componentset =
  element componentset { attlist.componentset, component+, manifest* }
attlist.componentset &= empty
# One component.  The ID attribute is a unique identifier for this
# component, used in, for example, <dependencies> elements of other
# components.  The ID should be the same as the package variable
# declared as the first argument of the configure.ac AC_INIT macro.
component =
  element component {
    attlist.component,
    version,
    path,
    description,
    abstract?,
    dependencies,
    developers?,
    documentation?,
    tests?,
    bugreports?,
    copyright*,
    notes?
  }
# The component's id attribute is the name of this component, and
# should generally match the package name as declared in
# configure.ac.  The BUILDSUPPORT attribute is "yes" if this component
# is configured and built during bootstrapping, or "noauto" if it
# should be optionally configured and built during bootstrapping;
# if so, it might need special handling in the top-level bootstrap
# file.  The STATUS should be marked obsolete when appropriate, as
# this allows us to check if any component depends on an obsolete
# one.  The SUPPORT attribute can be one of the codes "S",
# meaning currently supported by Starlink, or "U" meaning that it
# is unsupported, or supported by others.
attlist.component &=
  attribute id { xsd:ID },
  [ a:defaultValue = "no" ]
  attribute buildsupport { "yes" | "no" | "noauto" }?,
  [ a:defaultValue = "current" ]
  attribute status { "current" | "obsolete" }?,
  attribute support { "S" | "U" }?
# Version number of this component, which should be the same as the
# version declared in configure.ac AC_INIT
version = element version { attlist.version, text }
attlist.version &= empty
# Brief description of this component
description = element description { attlist.description, text }
attlist.description &= empty
# The copyright owner or owners.  The name of the copyright owner,
# as it might appear on a copyright statement, should appear in the
# NAME child element, followed by optional notes, for example
# describing which portions of the component are covered.  If
# different portions of the component are owned by different
# entities, then there should be more than one copyright element,
# with some description in the notes.
copyright = element copyright { attlist.copyright, year, name, notes? }
attlist.copyright &= empty
# The copyright year, as a list of years, or year ranges.  This
# should include each year when some work was done on the
# component.  For example, it might take the form
# <year>1995-2000, 2004</year>.  This element must be present, even
# if it is empty (or indeed approximate!).
year = element year { attlist.year, text }
attlist.year &= empty
# Optional longer description of the component's functionality
abstract = element abstract { attlist.abstract, p+ }
attlist.abstract &= empty
# Path to this component in CVS tree, for example libraries/ast
path = element path { attlist.path, text }
attlist.path &= empty
# Declare the dependencies of this component on others.  These are
# of four types.
# 
# * Sourceset dependencies are those components which must be
# installed in order to build the complete set of sources, either
# for building or for distribution.  This includes documentation,
# so it would include star2html as well as messgen.
# 
# * Build dependencies are those which are required in order
# to build this component.  This typically means include files, but
# if part of the component is an executable file (such as compifl
# within the parsecon component), then that's a build dependence
# also (but see the discussion of `option', below).  You may not
# have two components which have a build dependency on each other,
# since that would mean that each would have to be built before the
# other, which is impossible.
# 
# * Link dependencies are those required to link against the
# libraries in a component.  That means all the libraries that this
# component's libraries use.  These are not necessarily build
# dependencies, since if you are building a library, any called
# libraries don't have to be present in order to build this
# library; you can have two components which have mutual link
# dependencies.  If you are building an application, however, then
# all its link dependencies will actually be build dependencies and
# should be declared as such.  In other words, the distinction
# between build and link dependencies is important only for library
# components.
# 
# * Use dependencies are those which are required in order for the
# component to be used by something else, after it has been built
# and installed.  For example a library which called another
# application as part of its functionality would have only a use
# dependency on the component which contained that application.
# 
# The point of this is that different dependencies are required at
# different times.  The set of dependencies in the master makefile
# is composed of all the `sourceset' and `build' dependencies, but
# not `link' or `use' dependencies, and since the core Starlink
# libraries are closely interdependent, the set of `build'
# dependencies needs to be kept as small as possible in order to
# avoid circularities.
# 
# All these relationships are transitive: if A has a build
# dependency on B, and B has one on C, then A has a build
# dependency on C.  You can augment this by using the `option'
# attribute on the elements: if, in component A's <component>
# element you say <build option='link'>B</build>, then you declare
# that A has a build-time dependency on B, but that (presumably
# because you are building an application within a component which
# is mostly libraries) you need to link against B, so component A
# has a dependency on all of B's _link_ dependencies, not just its
# build dependencies.  This is (I believe) the only case where this
# `option' attribute is useful, though it is legal on all the
# elements within <dependencies>.
#
dependencies =
  element dependencies {
    attlist.dependencies,
    (sourceset | build | link | use | test | configure)*
  }
attlist.dependencies &= empty
sourceset = element sourceset { attlist.sourceset, text }
build = element build { attlist.build, text }
link = element link { attlist.link, text }
use = element use { attlist.use, text }
test = element test { attlist.test, text }
configure = element configure { attlist.configure, text }
attlist.sourceset &= attribute option { text }?
attlist.build &= attribute option { text }?
attlist.link &= attribute option { text }?
attlist.use &= attribute option { text }?
attlist.test &= attribute option { text }?
attlist.configure &= attribute option { text }?
# A list of developers with an interest in this component.  If the
# uname and email address are unknown, omit the corresponding element.
developers = element developers { attlist.developers, person+ }
attlist.developers &= empty
person = element person { attlist.person, name, uname?, email?, role? }
attlist.person &= empty
# A developer's name
name = element name { attlist.name, text }
attlist.name &= empty
# A username on the repository machine, as appears in CVS commit
# messages and Id lines
uname = element uname { attlist.uname, text }
attlist.uname &= empty
# An email address
email = element email { attlist.email, text }
attlist.email &= empty
# A role.  This isn't specified yet, but it might include strings
# like `owner' for the codeline owner, `noinform' to be omitted
# from mailings about commits, and so on.
role = element role { attlist.role, text }
attlist.role &= empty
# A list of document numbers, such as sun123, which describe this
# component
documentation = element documentation { attlist.documentation, text }
attlist.documentation &= empty
# An indication of whether there are tests in this component, so
# that a 'make check' of the configured Makefile should work.  The
# STATUS attribute must have one of the values NO, meaning that
# there are no tests, USER, meaning that there are some tests which
# should pass, but which require some simple user input, or YES,
# meaning that there are some tests, which should pass, and which require
# no user input, so that they may be run unattended.  If there are
# test which aren't working (that is, they are known to fail), you
# should put this as NO (ought we to have a separate NOTWORKING
# status?).
tests = element tests { attlist.tests, empty }
attlist.tests &= attribute status { "yes" | "no" | "user" }
# An email address where bug reports should be sent
bugreports = element bugreports { attlist.bugreports, text }
attlist.bugreports &= empty
# Any other notes
notes = element notes { attlist.notes, p+ }
attlist.notes &= empty
p = element p { attlist.p, text }
attlist.p &= empty
# The installation manifest for one component.  The component ID
# must be the ID attribute of a <component> element.  However it is
# not declared as an IDREF below, as the <manifest> element is
# sometimes used as a top-level document type.  The <files> element
# may be missing _or_ empty, if for some reason no files were installed.
manifest =
  element manifest { attlist.manifest, version, notes*, files? }
attlist.manifest &= attribute component { text }
# The list of installed files.  A whitespace-separated list; in
# fact, the files should be separated by newlines, for easy
# subsequent processing, though this is unenforceable here.
files = element files { attlist.files, text }
attlist.files &= empty
start = componentset | component
