#! /bin/sh -
#
# Create a starconf script which packages current versions of important files
#
# Usage:
#    make-starconf file...
#
# The input files may be either a plain filename or a
# "genfile:sourcefile" pair, in which case the file `sourcefile' is
# packaged up, but unpacked as `genfile': this allows us to say
# "acinclude.m4:starconf.m4", so that the starconf.m4 file in the
# current directory doesn't have to be called acinclude.m4, which
# would confuse things.
#
# This script generates a starconf script which has the specified
# files contained within it.  When the (generated) starconf script is
# run in a development directory, it scans configure.ac (objecting
# if it isn't there), and builds a list of files to extract.  It
# extracts these into a script, `starconf.status', which does nothing
# other than unpack the files, and then execs the script; the user may
# also run the `starconf.status' script to regenerate them, and it is
# this script which can be checked into a repository.
#
# Yes, we are indeed more cunning than a nest of monkeys.
#
#
# Dependency: the starconf.m4.in file defines a macro
# STAR_DEFAULTS: that macro relies on us including
# install-with-manifest.in here.



# Check we have at least one argument
if test $# -eq 0; then
    echo "Usage: $0 chunkname [chunkname...]"
    exit 1
fi
allconfchunks="$@"

# Start generating the output -- open FD 3 for the generated script
outputscript=starconf
exec 3>$outputscript

cat >&3 <<\_STARCONF_EOD
#! /bin/sh -
#
# This is starconf, version @PACKAGE_VERSION@

# Configuration
datadir=@datadir@
ln_s="@LN_S@"

# Always include the following files:
#   acinclude.m4: to add Starlink autoconf macros;
#   install-with-manifest.in: since the STAR_DEFAULTS macro depends on it;
#   component.xml: every starconf directory should have a component.xml
defaultchunks="acinclude.m4 install-with-manifest.in component.xml "
# Extra chunks should be added to this variable
extrachunks=""

# Make sure we have a configure.ac in the current directory
if test -r configure.ac; then
    : OK
else
    echo "$0: can't find readable configure.ac"
    exit 1
fi

# Scan configure.ac, getting all the used macros into a string
starmacros=`sed -n 's/^\(STAR[_A-Z]*\).*/\1/p' configure.ac | sed '{:a;N;s/\n/ /;t a;}'`

# Certain macros depend on certain additional files.  Scan the list of
# used macros, and add the required files to $extrachunks.  There are
# currently no macros in starconf.m4.in which require such files, but
# if they are added, the dependencies should be documented here.
found_star_defaults=false
for foundmacro in $starmacros dummy
do
    case $foundmacro in
        STAR_DEFAULTS)
            found_star_defaults=true
            ;;
        *) ;;
    esac
done

# Check that we did find a STAR_DEFAULTS macro in the configure.ac,
# and object if we didn't.
if $found_star_default; then
    : OK
else
    echo "$0: configure.ac has no STAR_DEFAULTS macro"
    exit 1
fi

# We now know what files we're going to include in the generated
# starconf.status
filelist=" $defaultchunks $extrachunks "

# Make sure there's a link to the installed componentinfo.dtd
test -e componentinfo.dtd || $ln_s $datadir/componentinfo.dtd componentinfo.dtd

# Start writing the starconf.status file; send output to FD 4
exec 4>starconf.status
cat >&4 <<EOF
#! /bin/sh -
#
# This is starconf.status: generated by starconf, version @PACKAGE_VERSION@
# DO NOT EDIT: your changes will be overwritten next time starconf is run
#
# Re-run this file to regenerate the files listed below:
EOF
for f in $filelist
do
    echo "#    $f" >&4
done
echo "" >&4
_STARCONF_EOD

for ch in $allconfchunks
do
    eval `echo $ch | sed 's/\([^:]*\)\(:\(.*\)\)*/filename=\1; filesource=\3/'`
    test -n "$filesource" || filesource=$filename
    echo "Including $filename from $filesource"
    # Don't just cat to &3 here -- we need to be careful about quoting
    echo ""                                                              >&3
    echo "# -------------------- $filename --------------------"         >&3
    echo "if test \`expr \"\$filelist\" : '.* $filename '\` -gt 0; then" >&3
    echo "echo \"Creating $filename\""                                   >&3
    echo "echo '# ---------- $filename ----------'   >&4"                >&3
    echo "echo 'cat >$filename <<\_STARCONF_EOD'     >&4"                >&3
    echo 'cat >&4 <<\_STARCONF_EOD'                                      >&3
    cat $filesource                                                      >&3
    echo '_STARCONF_EOD'                                                 >&3
    echo 'echo _STARCONF_EOD >&4'                                        >&3
    echo 'fi'                                                            >&3
done

cat >&3 <<\_STARCONF_EOD
echo "exit 0" >&4
# Close the starconf.status file
exec 4>&-
# ...and make it executable
chmod +x starconf.status
# Finally, exec the new script
exec ./starconf.status
_STARCONF_EOD

echo "exit 0" >&3

# Close FD 3; the starconf file
exec 3>&-
# ...and make it executable
chmod +x $outputscript

exit 0
