#! /bin/sh -
#
# Create a starconf script which packages current versions of important files
#
# Usage:
#    make-starconf file...
#
# `file' has the format '[<option>*]<file>[:<sourcefile>].
#
# The file <sourcefile> is packaged up and unpacked as <file>.  If
# [:<sourcefile>] is omitted, then <sourcefile>=<file>.  This allows us to say
# "acinclude.m4:starconf.m4", so that the starconf.m4 file in the
# current directory doesn't have to be called acinclude.m4, which
# would confuse things.
#
# The <option> characters are `?' and `!'.  If the files start with a
# `?' then they are optionally unpacked, depending on logic contained
# within this script, which is kept consistent with the requirements
# of macros in starconf.m4.in.  That is, files which do not have a `?' 
# <option> are always unpacked.  If the <option> includes `!' then the
# file is will overwrite any file of the same name in the directory in
# which the `starconf' script is run; if the <option> `!' is not
# present, then the script will not overwrite a file named <file> if
# one exists in the directory.  Thus files which the starconf package
# `owns' (such as the `acinclude.m4' file) should be given with a `!' 
# option, and ones which it merely provides if they are not present
# (such as the `component.xml.in' file) should not have a `!' option.
#
# This script generates a starconf script which has the specified
# files contained within it.  When the (generated) starconf script is
# run in a development directory, it scans configure.ac (objecting
# if it isn't there), and builds a list of files to extract.  It
# extracts these into a script, `starconf.status', which does nothing
# other than unpack the files, and then execs the script; the user may
# also run the `starconf.status' script to regenerate them, and it is
# this script which can be checked into a repository.
#
# Yes, we are indeed more cunning than a nest of monkeys.
#
#
# Dependency: the starconf.m4.in file defines a macro
# STAR_DEFAULTS: that macro relies on us including
# install-with-manifest.in here.



# Check we have at least one argument
if test $# -eq 0; then
    echo "Usage: $0 chunkname [chunkname...]"
    exit 1
fi
allconfchunks="$@"

# The list of option characters
optchars="?!"

# Find all the files which are always extracted -- that is, all the
# files which do not have a `?' <option>
defaultchunklist=
for c in $allconfchunks
do
    if expr $c : "[$optchars]*?" >/dev/null; then
        : skip it
    else
        defaultchunklist="$defaultchunklist $c"
    fi
done


# Start generating the output -- open FD 3 for the generated script
outputscript=starconf
exec 3>$outputscript

cat >&3 <<\_STARCONF_EOD
#! /bin/sh -
#
# This is starconf, version @PACKAGE_VERSION@

# Configuration
bindir=@bindir@
datadir=@datadir@
ln_s="@LN_S@"

# Always include the following files:
_STARCONF_EOD
echo "defaultchunks=\"$defaultchunklist\"" >&3
cat >&3 <<\_STARCONF_EOD
# Extra chunks should be added to this variable, according to logic below
extrachunks=""

# Make sure we have a configure.ac in the current directory
if test -r configure.ac; then
    : OK
else
    echo "$0: can't find readable configure.ac"
    exit 1
fi

# If we can find a starconf-validate script (that is, if we're on a build
# system (which has starconf installed) rather than a distribution system)
# then run starconf-validate to make sure everything's OK
if test -x $bindir/starconf-validate; then
    if $bindir/starconf-validate .; then
        : OK
    else
        echo "$0: Configuration not valid -- fix above errors first"
        exit 1
    fi
fi

# Scan configure.ac, getting all the used macros into a string
starmacros=`sed -n 's/^\(STAR[_A-Z]*\).*/\1/p' configure.ac | sed '{:a;N;s/\n/ /;t a;}'`

# Certain macros depend on certain additional files.  Scan the list of
# used macros, and add the required files to $extrachunks.  There are
# currently no macros in starconf.m4.in which require such files, but
# if they are added, the dependencies should be documented here.
found_star_defaults=false
for foundmacro in $starmacros dummy
do
    case $foundmacro in
        STAR_DEFAULTS)
            found_star_defaults=true
            ;;
        *) ;;
    esac
done

# Check that we did find a STAR_DEFAULTS macro in the configure.ac,
# and object if we didn't.
if $found_star_default; then
    : OK
else
    echo "$0: configure.ac has no STAR_DEFAULTS macro"
    exit 1
fi

# Similarly, scan Makefile.am and check that there it includes
# Makefile.starconf
if grep 'include .*Makefile.starconf' Makefile.am >/dev/null; then
    : OK -- found it
else
    echo "$0: Makefile.am does not include \$(srcdir)/Makefile.starconf"
    exit 1
fi

# We now know what files we're going to include in the generated
# starconf.status
filelist=" $defaultchunks $extrachunks "

# Make sure there's a link to the installed componentinfo.dtd
test -e componentinfo.dtd || $ln_s $datadir/componentinfo.dtd componentinfo.dtd

# Start writing the starconf.status file; send output to FD 4
exec 4>starconf.status
cat >&4 <<EOF
#! /bin/sh -
#
# This is starconf.status: generated by starconf, version @PACKAGE_VERSION@
# DO NOT EDIT: your changes will be overwritten next time starconf is run
#
# Re-run this file to regenerate the files listed below:
EOF
for f in $filelist
do
_STARCONF_EOD
echo "    echo \$f | sed \"s/^[$optchars]*\([^:]*\).*/#    \1/\" >&4"    >&3
echo 'done'                                            	                >&3
echo 'echo "" >&4'                                                      >&3

for ch in $allconfchunks
do
    # extract the options, destination and source filenames
    eval `echo $ch | sed 's/\(['$optchars']*\)\([^:]*\)\(:\(.*\)\)*/opts=\1;filename=\2; filesource=\4/'`
    test -n "$filesource" || filesource=$filename
    echo "Including $filename from $filesource (opts=$opts)"

    # Don't just cat to &3 here -- we need to be careful about quoting
    echo ""                                                              >&3
    echo "# -------------------- $filename --------------------"         >&3
    echo "if test \`expr \"\$filelist\" : '.* [$optchars]*$filename'\` -gt 0; then" >&3
    echo "echo '# ---------- $filename ----------'       >&4"            >&3

    # if the `!' <option> is present, ...
    if expr "$opts" : '.*!' >/dev/null; then
        # ...then just unpack the file (stomp away!)
        echo "echo 'unpack_this=true'                    >&4"            >&3
    else
        # ...but if not, then only unpack the file if there's no such 
        # file in the current directory (ie, don't stomp on modified files)
        echo "echo 'if test -e $filename; then unpack_this=false; else unpack_this=true;fi' >&4" >&3
    fi
    echo "echo 'if \$unpack_this; then'                  >&4"            >&3
    echo "echo '    echo \"Creating $filename\"'         >&4"            >&3
    echo "echo '    cat >$filename <<\_STARCONF_EOD'     >&4"            >&3
    echo 'cat >&4 <<\_STARCONF_EOD'                                      >&3
    cat $filesource                                                      >&3
    echo '_STARCONF_EOD'                                                 >&3
    echo 'echo _STARCONF_EOD                             >&4'            >&3
    echo "echo 'else'                                    >&4"            >&3
    echo "echo '    echo \"File $filename already exists, not overwriting\"'>&4 ">&3
    echo "echo 'fi'                                      >&4"            >&3
    echo 'fi'                                                            >&3
done

cat >&3 <<\_STARCONF_EOD
echo "exit 0" >&4
# Close the starconf.status file
exec 4>&-
# ...and make it executable
chmod +x starconf.status
# Finally, exec the new script
exec ./starconf.status
_STARCONF_EOD

echo "exit 0" >&3

# Close FD 3; the starconf file
exec 3>&-
# ...and make it executable
chmod +x $outputscript

exit 0
