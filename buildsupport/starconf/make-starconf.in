#! /bin/sh -
# @configure_input@
#
# Create a starconf script which packages current versions of important files
#
# Usage:
#    make-starconf file...
#
# `file' has the format '[<option>*]<file>[:<sourcefile>].
#
# The file <sourcefile> is packaged up and unpacked as <file>.  If
# [:<sourcefile>] is omitted, then <sourcefile>=<file>.  This allows us to say
# "acinclude.m4:starconf.m4", so that the starconf.m4 file in the
# current directory doesn't have to be called acinclude.m4, which
# would confuse things.
#
# The <option> characters are `?', `!' and `*'.
#
#     If the files start with a `?' then they are optionally unpacked,
#     depending on logic contained within this script, which is kept
#     consistent with the requirements of macros in starconf.m4.in.
#     That is, files which do not have a `?' <option> are always
#     unpacked. 
#
#     If the <option> includes `!' then the file is will overwrite any
#     file of the same name in the directory in which the `starconf'
#     script is run; if the <option> `!' is not present, then the
#     script will not overwrite a file named <file> if one exists in
#     the directory.  Thus files which the starconf package `owns'
#     (such as the `acinclude.m4' file) should be given with a `!'
#     option, and ones which it merely provides if they are not
#     present (such as the `component.xml.in' file) should not have a
#     `!' option. 
#
#     If the <option> includes `*', then the corresponding file is
#     made executable after it is extracted.
#
# This script generates a starconf script which has the specified
# files contained within it.  When the (generated) starconf script is
# run in a development directory, it runs starconf-validate to check
# that the configuration is OK, and builds a list of files to extract.  It
# extracts these into a script, `starconf.status', which does nothing
# other than unpack the files, and then execs the script; the user may
# also run the `starconf.status' script to regenerate them, and it is
# this script which can be checked into a repository.
#
# Yes, we are indeed more cunning than a nest of monkeys.
#
#
# The starconf.status file that results from the above gymnastics
# contains configuration files that are required for the build, but
# since it is checked in, it MUST NOT CONTAIN ANY CONFIGURATION
# PATHS.  Therefore after it unpacks the files, starconf.status
# configures the unpacked files by substituting variables indicated by
# !!variable_name!!, using values which are edited in to the installed
# starconf script when it is configured prior to its installation, and
# which may be overridden either on the starconf.status command line
# or in the environment.
#
#
# Dependencies:
#   Currently none




# Check we have at least one argument
if test $# -eq 0; then
    echo "Usage: $0 chunkname [chunkname...]"
    exit 1
fi
allconfchunks="$@"

# The list of option characters
optchars="?!\*"

# Find all the files which are always extracted -- that is, all the
# files which do not have a `?' <option>
defaultchunklist=
for c in $allconfchunks
do
    if expr $c : "[$optchars]*?" >/dev/null; then
        : skip it
    else
        defaultchunklist="$defaultchunklist $c"
    fi
done


# Start generating the output -- open FD 3 for the generated script
outputscript=starconf
exec 3>$outputscript

cat >&3 <<\_STARCONF3_EOD
#! /bin/sh -
#
# This is starconf, version @PACKAGE_VERSION@
#
# Usage:
#    starconf
#    starconf --show variable [...]
#
# The first form configures the current directory.  The second form shows
# the default values of the given variables, _without_ any defaulting
# from the environment.

# Configuration
buildsupport=@prefix@
buildsupportbin=@bindir@
buildsupportdata=@datadir@
ln_s="@LN_S@"
versionint="@PACKAGE_VERSIONINT@"
version="@PACKAGE_VERSION@"
finder=@bindir@/starconf-finder

# Default all the variables which are to be substituted into !!variable!!
# It would probably be desirable to grep the input files for !!...!!
# variables, but that doesn't seem necessary at the moment
# (and would add complication).
#
# The set of variables here should all be listed in the `edit' command
# within starconf's Makefile.am
allconfsubs=" STARCONF_DEFAULT_STARLINK STARCONF_DEFAULT_PREFIX "
: ${STARCONF_DEFAULT_STARLINK=@STARCONF_DEFAULT_STARLINK@}
: ${STARCONF_DEFAULT_PREFIX=@STARCONF_DEFAULT_PREFIX@}

showvars=" buildsupport buildsupportbin buildsupportdata finder version versionint "
allshowvars="$allconfsubs $showvars "

if test $# -gt 0; then
    case $1 in
    --show)
        shift
        while test $# -gt 0
        do
            if test "$1" = "--all"; then
                for v in $allshowvars
                do
                    eval echo "$v="'${'$v'}'
                done
            else
                expr "x$allshowvars" : "x.* $1 " >/dev/null ||
                    { echo "Unrecognised variable $1" >&2; exit 1; }
                eval echo '${'$1'}'
            fi
            shift
        done
        exit 0
        ;;
    --version)
        echo "starconf @PACKAGE_VERSION@"
        exit 0
        ;;
    --help)
        echo "starconf @PACKAGE_VERSION@: configure Starlink build directories"
        echo "Usage:"
        echo "    $0"
        echo "        Configure directory"
        echo "    $0 --show [--all | variable ...]"
        echo "        List configuration information:"
        echo "        [variables:$allshowvars]"
        echo "    $0 [--help | --version]"
        echo "        Show help/version"
        exit 0
        ;;
    *)  echo "Usage: $0 [--show variable...]"
        exit 1
        ;;
    esac
fi


# Always include the following files:
_STARCONF3_EOD
echo "defaultchunks=\"$defaultchunklist\"" >&3
cat >&3 <<\_STARCONF3_EOD
# Extra chunks should be added to this variable, according to logic below
extrachunks=""

# Make sure we have a configure.ac in the current directory
if test -r configure.ac -a Makefile.am; then
    : OK
else
    echo "$0: can't find readable configure.ac and Makefile.am"
    echo "    ...see $buildsupportdata for templates"
    exit 1
fi

# If we can find a starconf-validate script (that is, if we're on a build
# system, which has starconf installed, rather than a distribution system)
# then run starconf-validate to make sure everything's OK.  Call it
# with the --force option, so that this will succeed, albeit with
# warnings, the very first time that starconf is run in a directory,
# before the user has had the chance to check in Makefile.in and friends.
if test -x $buildsupportbin/starconf-validate; then
    if $buildsupportbin/starconf-validate --force .; then
        : OK
    else
        echo "$0: Configuration not valid -- fix above errors first"
        exit 1
    fi
fi

if test -e bootstrap; then
    # Check the `bootstrap' file, to see if the first word on the second line
    # is `original'.  If it is, then unpack the bootstrap file, overwriting
    # any bootstrap file that's already there.
    eval `sed -e '1d' -e '2{s/^[^a-z]*\([a-z]*\).*rnum=\([0-9]*\)/original=\1; bootstrap_version=\2;/;q;}' bootstrap`
    # echo "XXX original=$original  rnum=$bootstrap_version curr=$versionint"
    if test "X$original" != Xoriginal; then
        : do nothing -- file has been modified
    elif test $bootstrap_version -lt $versionint; then
        extrachunks="$extrachunks !*bootstrap"
    else
        : do nothing -- file is up to date
    fi
else
    # No `bootstrap' file, so unpack one
    extrachunks="$extrachunks bootstrap"
fi

# Scan configure.ac, getting all the used STAR_* macros into a string
starmacros=`sed -n 's/^\(STAR[_A-Z]*\).*/\1/p' configure.ac | sed '{:a;N;s/\n/ /;t a;}'`

# Certain macros depend on certain additional files.  Scan the list of
# used macros, and add the required files to $extrachunks.  There are
# currently no macros in starconf.m4.in which require such files, but
# if they are added, the dependencies should be documented here.
found_star_defaults=false
for foundmacro in $starmacros dummy
do
    case $foundmacro in
        STAR_DEFAULTS)
            found_star_defaults=true
            ;;
        *) ;;
    esac
done

# Check that we did find a STAR_DEFAULTS macro in the configure.ac,
# and object if we didn't.
if $found_star_default; then
    : OK
else
    echo "$0: configure.ac has no STAR_DEFAULTS macro"
    exit 1
fi

# Similarly, scan Makefile.am and check that there it NO LONGER includes
# Makefile.starconf
if grep 'include .*Makefile.starconf' Makefile.am >/dev/null; then
    echo "$0: Makefile.am still includes \$(srcdir)/Makefile.starconf"
    exit 1
else
    : OK -- should not be there
fi
# if grep 'include .*Makefile.starconf' Makefile.am >/dev/null; then
#     : OK -- found it
# else
#     echo "$0: Makefile.am does not include \$(srcdir)/Makefile.starconf"
#     exit 1
# fi

# We now know what files we're going to include in the generated
# starconf.status
filelist=" $defaultchunks $extrachunks "
# echo "XXX filelist=$filelist"

# Make sure there's a link to the installed componentinfo.dtd
test -e componentinfo.dtd || $ln_s $buildsupportdata/componentinfo.dtd componentinfo.dtd

# Start writing the starconf.status file; send output to FD 4
exec 4>starconf.status
cat >&4 <<EOF
#! /bin/sh -
#
# This is starconf.status: generated by starconf, version @PACKAGE_VERSION@
# DO NOT EDIT: your changes will be overwritten next time starconf is run
#
# Usage:
#     ./starconf.status [variable=value ...]
# where VARIABLE is one of the variables
#     $allconfsubs
# This substitutes instances of !!variable!! in the file(s) below,
# when they are unpacked.  The variables may be specified on the command line
# as shown, or else they are defaulted from the environment.
#
# This file has no explicit configuration paths in it, and it should be checked
# into CVS.
#
# Re-run this file to regenerate the files listed below:
EOF
for f in $filelist
do
_STARCONF3_EOD
echo "    echo \$f | sed \"s/^[$optchars]*\([^:]*\).*/#    \1/\" >&4"    >&3
echo 'done'                                                              >&3
echo 'echo "" >&4'                                                       >&3

cat >&3 <<\_STARCONF3_EOD

# Pass allconfsubs and showvars into the starconf.status script
echo "allconfsubs=\"$allconfsubs\"" >&4
echo "showvars=\"$showvars\"" >&4

# Write local configuration information into ./starconf.status.local
exec 5>./starconf.status.local
echo "# Cache of starconf configuration variables"                       >&5
echo "# Query these with './starconf.status --show varname...',"         >&5
echo "# NOT by grepping or sourcing this file."                          >&5
echo "# See './starconf.status --help' for details."                     >&5
# Following can be overridden by the environment or command line
for v in $allconfsubs
do
    eval echo ': \${'$v='${'$v'}}'                                       >&5
done
# Following cannot be overridden, and are for display only
for v in $showvars
do
    eval echo "starconf_$v="'${'$v'}'                                    >&5
done
exec 5>&-

echo ""                                                                  >&4
echo "# showonevar var [prefix] shows one variable, with optional prefix">&4
echo "showonevar () {"                                                   >&4
echo "    case \"\$1\" in"                                               >&4
for v in $allconfsubs
do
    echo "    $v) echo \$2\$$v ;;"                                       >&4
done
for v in $showvars
do
    echo "    $v) echo \$2\$starconf_$v ;;"                              >&4
done
echo "    *) { echo \"Unrecognised variable \$1\" >&2; exit 1; } ;;"     >&4
echo "    esac"                                                          >&4
echo "}"                                                                 >&4

cat >&4 <<\_STARCONF4_EOD

# Read settings in from ./starconf.status.local if that file exists
test -r ./starconf.status.local && . ./starconf.status.local
# Each of the $allconfsubs variables _must_ have a value;
# the following are last-ditch defaults.
: ${STARCONF_DEFAULT_STARLINK=/star}
: ${STARCONF_DEFAULT_PREFIX=/star}

if test $# -gt 0 -a `expr x$1 : x-` -gt 0; then
    case $1 in
    --show)
        shift
        while test $# -gt 0
        do
            if test "$1" = "--all"; then
                for v in $allconfsubs $showvars
                do
                    showonevar $v "$v="
                done
            else
                showonevar $1
            fi
            shift
        done
        exit 0
        ;;
    --version)
        echo "starconf @PACKAGE_VERSION@"
        exit 0
        ;;
    --help)
        echo "starconf.status: configure one Starlink build directory"
        echo "Usage:"
        echo "    $0 [variable=value]..."
        echo "        Reconfigure directory, optionally changing one of"
        echo "        the 'sticky variables'"
        echo "    $0 --show [--all | variable ...]"
        echo "        List configuration information:"
        echo "        [Sticky variables:$allconfsubs]"
        echo "        [Fixed variables: $showvars]"
        echo "    $0 [--help | --version]"
        echo "        Show help/version"
        exit 0
        ;;
    *)
        echo "$0: unrecognised option.  $0 --help for usage"
        exit 1
        ;;
    esac
fi

while test $# -gt 0
do
    # Check that the argument is just 'variable=value'
    expr "x$1" : 'x[a-zA-Z0-9_]*=[^ ]*$' >/dev/null || \
        { echo "Usage: $0 [variable=value...]" >&2; exit 1; }
    # Extract the variable name, and check it's in $allconfsubs
    # (we can't portably do this in one expr -- see autoconf 'limitations'
    # notes).
    varname=`expr x$1 : 'x\(.*\)='`
    expr "x$allconfsubs" : "x.*$varname" >/dev/null || \
        { echo "$0: $varname is not a sticky variable" >&2; exit 1; }
    eval "$1"
    shift
done

# Write the values back out to starconf.status.local, since they will
# have changed if they were set in the environment, or on the command line.
exec 5>./starconf.status.local
echo "# Cache of starconf configuration variables"                       >&5
echo "# Query these with './starconf.status --show varname...',"         >&5
echo "# NOT by grepping or sourcing this file."                          >&5
echo "# See './starconf.status --help' for details."                     >&5
for v in $allconfsubs
do
    eval echo ': \${'$v='${'$v'}}'                                       >&5
done
for v in $showvars
do
    # NB: following line is different from version above
    eval echo "starconf_$v="'${'starconf_$v'}'                           >&5
done
exec 5>&-

sedsubsts='sed '
for x in $allconfsubs
do
    eval t='${'$x'}'
    echo "Configuring with $x=$t"
    sedsubsts="$sedsubsts -e s,!!$x!!,$t,"
done

_STARCONF4_EOD
_STARCONF3_EOD

# Start the extraction of the files
echo 'echo "allm4=" >&4'                                                 >&3
echo 'echo "allextracted=" >&4'                                          >&3
  
for ch in $allconfchunks
do
    # extract the options, destination and source filenames
    eval `echo $ch | sed 's/\(['$optchars']*\)\([^:]*\)\(:\(.*\)\)*/opts=\1;filename=\2; filesource=\4/'`
    test -n "$filename" || { echo "Impossible: null filename"; exit 1; }
    test -n "$filesource" || filesource=$filename
    echo "Including $filename from $filesource (opts=$opts)"

    # Don't just cat to &3 here -- we need to be careful about quoting
    echo ""                                                              >&3
    echo "# -------------------- $filename --------------------"         >&3
    echo "echo '# ---------- $filename ----------'       >&4"            >&3

    # Handle the ! option
    echo 't=`expr "x $filelist" : "x .* \(['$optchars']*\)'$filename'"`' >&3
    echo '# If the ! option is present, ...'                             >&3
    echo 'if expr "x$t" : "x.*\(!\)" >/dev/null; then'                   >&3
    echo '    # ...then just unpack the file (stomp stomp stomp)'        >&3
    echo '    echo unpack_this=true                      >&4'            >&3
    echo 'else'                                                          >&3
    echo '    # ...but if not, then only unpack the file if'             >&3
    echo '    # there is no such file in the current directory'          >&3
    echo '    # (ie, avoid stomping on modified files)'                  >&3
    echo "    echo 'if test -e $filename; then unpack_this=false; else unpack_this=true;fi' >&4" >&3
    echo 'fi'                                                            >&3

    # do the unpacking
    echo "echo 'if \$unpack_this; then'                  >&4"            >&3
    echo "echo '    echo \"Creating $filename\"'         >&4"            >&3
    echo "echo '    cat >$filename <<\_STARCONF_EOD'     >&4"            >&3
    echo 'cat >&4 <<\_STARCONF_EOD'                                      >&3
    cat $filesource                                                      >&3
    echo '_STARCONF_EOD'                                                 >&3
    echo 'echo _STARCONF_EOD                             >&4'            >&3
    # Is this file to be made executable (* option present)?
    if expr "$opts" : '.*\*' >/dev/null; then
        echo "echo '    chmod +x $filename'              >&4"            >&3
    fi
    echo "echo 'else'                                    >&4"            >&3
    echo "echo '    echo \"File $filename already exists, not overwriting\"'>&4 ">&3
    echo "echo 'fi'                                      >&4"            >&3
    echo "echo 'expr $filename : \".*m4\$\" >/dev/null && allm4=\"\$allm4 $filename\"' >&4" >&3
    echo "echo 'allextracted=\"\$allextracted $filename\"' >&4"          >&3
done

cat >&3 <<\_STARCONF3_EOD
cat >&4 <<\_STARCONF4_EOD

# -------------------- Tidy up and finish -------------------- 
if test -n "$allextracted"; then
    # There were at least some files extracted
    if test -n "$sedsubsts"; then
        for f in $allextracted
        do
            rm -f $f.tmp
            $sedsubsts $f >$f.tmp
            # retain any execute bit
            test -x $f && chmod +x $f.tmp
            mv $f.tmp $f
        done
    fi
fi
if test -n "$allm4"; then
    echo "Creating acinclude.m4 from$allm4"
    cat $allm4 >acinclude.m4
fi
exit 0
_STARCONF4_EOD

# Close the starconf.status file
exec 4>&-
# ...and make it executable
chmod +x starconf.status

# Finally, exec the new script
exec ./starconf.status

# Shouldn't get here!
echo "starconf failed to exec ./starconf.status !!!" >&2
exit 1
_STARCONF3_EOD

# Close FD 3; the starconf file
exec 3>&-
# ...and make it executable
chmod +x $outputscript

exit 0
