#! @PERL@ -w
# @configure_input@
#
# This is part of starconv, version @PACKAGE_VERSION@
#
# Usage:
#    starconf-validate [srcdir]
#
# This checks the build files (Makefile.am and configure.ac) in the
# specified directory (which defaults to .) and confirms that they
# abide by the rules.
#
# If anything breaks the rules, it prints a warning message, and exits
# non-zero.
#
# To be extended....

($progname = $0) =~ s+.*/++;
$srcdir = ($#ARGV >= 0 ? $ARGV[0] : '.');

# Do not include in this list files which are required but generated, 
# such as Makefile.in
@required_files = qw{ Makefile.am
                      bootstrap
                      component.xml.in
                      configure.ac
                    };
@extra_checkins = qw{ Makefile.in
                      component.xml
                      configure 
                      starconf.status
                    };
# The first three below are extracted from starconf.status;
# aclocal.m4 is generated by aclocal;
# others are generated by configure/automake
@non_checkins =   qw{ install-with-manifest.in
                      acinclude.m4
                      Makefile.starconf
                      aclocal.m4
                      install-with-manifest
                      config.status
                      config.guess
                      config.log
                      config.sub
                      install-sh
                      ltmain.sh
                      missing
                      mkinstalldirs
                    };

$nerrs = 0;

foreach $r (@required_files) {
    if ( ! -e $r ) {
        print "$progname: required file $r does not exist\n";
        $nerrs++;
    }
}

# Checkins.  First get the list of entries
if ( -d "CVS" && -f "CVS/Entries" ) {
    open (ENT, "<CVS/Entries") || die "Can't open CVS/Entries\n";
    @allent = ();
    while (<ENT>) {
        if (m{^/}) {
            my @entline = split(m{/});
            push(@allent, $entline[1]);
        }
    }
    close(ENT);
    push (@required_files, @extra_checkins);
    foreach $f (@required_files) {
        if (! grep (m{$f}, @allent)) {
            print "$progname: file $f is not checked in, but should be\n";
            $nerrs++;
        }
    }
    foreach $f (@non_checkins) {
        if (grep (m{$f}, @allent)) {
            print "$progname: file $f is checked in, but shouldn't be\n";
            $nerrs++;
        }
    }
} else {
    print "$progname: no CVS directory, or no Entries file\n";
    $nerrs++;
}


# Now check the contents of configure.ac and Makefile.am.  No need to check
# they exist, since that's checked above.
if (-e "$srcdir/configure.ac") {
    $nerrs += check_configure("$srcdir/configure.ac");
}

if (-e "$srcdir/Makefile.am") {
    $nerrs += check_makefile("$srcdir/Makefile.am");
}

exit $nerrs;


sub check_configure {
    my $fn = shift;
    my $nerrors = 0;

    open (CF, "<$fn") || die "Can't open file $fn to read";

    $has_star_default = 0;
    while (<CF>) {
        /^ *STAR_DEFAULT/ && do {
            if ($has_star_default) {
                # been here already
                print_error ($fn, $.,
                             "more than one STAR_DEFAULT");
                $nerrors++;
            }
            $has_star_default++;
        };
    }

    close (CF);

    if ($has_star_default == 0) {
        print_error ($fn, $., "has no STAR_DEFAULT");
        $nerrors++;
    }

    return $nerrors;
}

sub check_makefile {
    my $fn = shift;
    my $nerrors = 0;

    open (CF, "<$fn") || die "Can't open file $fn to read";

    $includes_std_makefile = 0;
    while (<CF>) {
        /include.*Makefile\.starconf/ && do {
            if ($includes_std_makefile) {
                # been here already
                print_error ($fn, $.,
                             "includes Makefile.starconf multiple times");
                $nerrors++;
            }
            $includes_std_makefile++;
        };

        /^ *EXTRA_DIST *=/ && do {
            if ($_ !~ /\@EXTRA_DIST\@/) {
                print_error ($fn, $.,
                             "declares EXTRA_DIST but line does not include \@EXTRA_DIST\@");
                $nerrors++;
            }
        };

        /^ *BUILT_SOURCES *=/ && do {
            if ($_ !~ /\@BUILT_SOURCES\@/) {
                print_error ($fn, $.,
                             "declares BUILT_SOURCES but line does not include \@BUILT_SOURCES\@");
                $nerrors++;
            }
        };

    }

    if ($includes_std_makefile == 0) {
        print_error ($fn, 0, "Makefile.starconf not included");
        $nerrors++;
    }

    close (CF);

    return $nerrors;
}

sub print_error {
    my $fn = shift;
    my $lineno = shift;
    my $text = shift;

    print "$progname ERROR: $fn:$lineno: $text\n";
}
