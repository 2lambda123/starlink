#! @PERL@ -w
# @configure_input@
#
# This is part of starconv, version @PACKAGE_VERSION@
#
# Usage:
#    starconf-validate [--force] [srcdir]
#
# This checks the build files (Makefile.am and configure.ac) in the
# specified directory (which defaults to .) and confirms that they
# abide by the rules.
#
# If anything breaks the rules, it prints a warning message, and exits
# non-zero.
#
# However if --force is given, then warnings are still printed, but do
# not cause the program to exit with an error status.  This means that
# the starconf bootstrap script can run the very first time, before
# Makefile.in (for example) has been generated for the first time.
# Problems with the format of Makefile.am and configure.ac are still
# reported as fatal errors, even with --force is present.
#

($progname = $0) =~ s+.*/++;
$force = 0;
$srcdir = undef;

while ($#ARGV >= 0) {
    my $arg = shift(@ARGV);
    $arg eq '--force' && do {
        $force = 1;
        next;
    };

    $arg =~ /^-/ && do {
        Usage();
        next;
    };

    if (defined($srcdir)) {
        Usage();
    } else {
        $srcdir = $arg;
    }
}

defined($srcdir) || do { $srcdir = '.'; };



# The `definitely_required' files must exist, or else we exit with a
# non-zero status.  The `required_files' must exist, or we give a
# warning and, if $force is not true, exit non-zero.  The
# `extra_checkins' are like the `required_files' in that they must
# exist; they are distinguished by being generated files rather than
# source ones.
@definitely_required =  qw{ Makefile.am
                            configure.ac
                          };
@required_files =       qw{ bootstrap
                            component.xml.in
                          };
@extra_checkins =       qw{ Makefile.in
                            component.xml
                            configure 
                            starconf.status
                          };
# The first three below are extracted from starconf.status;
# aclocal.m4 is generated by aclocal;
# others are generated by configure/automake
@non_checkins =         qw{ acinclude.m4
                            aclocal.m4
                            config.status
                            config.guess
                            config.log
                            config.sub
                            install-sh
                            ltmain.sh
                            missing
                            mkinstalldirs
                          };
$nwarnings = 0;
$nerrors = 0;

@list_err_missing_required = ();
@list_err_not_checked_in = ();
@list_err_checked_in = ();

foreach $r (@definitely_required) {
    if ( ! -e $r ) {
        #print "$progname: required file $r does not exist\n";
        push(@list_err_missing_required, $r);
        $nerrors++;
    }
}

foreach $r (@required_files) {
    if ( ! -e $r ) {
        # print "$progname: required file $r does not exist\n";
        push(@list_err_missing_required, $r);
        $nwarnings++;
    }
}

# Checkins.  First get the list of entries
if ( -d "CVS" && -f "CVS/Entries" ) {
    open (ENT, "<CVS/Entries") || die "Can't open CVS/Entries\n";
    @allent = ();
    while (<ENT>) {
        if (m{^/}) {
            my @entline = split(m{/});
            push(@allent, $entline[1]);
        }
    }
    close(ENT);
    @allcvsfiles = ();
    push(@allcvsfiles, @definitely_required);
    push(@allcvsfiles, @required_files);
    push(@allcvsfiles, @extra_checkins);
    foreach $f (@allcvsfiles) {
        if (! grep (m{^$f$}, @allent)) {
            #print "$progname: file $f is not checked in, but should be\n";
            push(@list_err_not_checked_in, $f);
            $nwarnings++;
        }
    }
    foreach $f (@non_checkins) {
        if (grep (m{^$f$}, @allent)) {
            #print "$progname: file $f is checked in, but shouldn't be\n";
            push(@list_err_checked_in, $f);
            $nwarnings++;
        }
    }
} else {
    print "$progname: no CVS directory, or no Entries file\n";
    $nwarnings++;
}


# Now check the contents of configure.ac and Makefile.am.  No need to check
# they exist, since that's checked above.
if (-e "$srcdir/configure.ac") {
    $nerrors += check_configure("$srcdir/configure.ac");
}

if (-e "$srcdir/Makefile.am") {
    $nerrors += check_makefile("$srcdir/Makefile.am");
}

$#list_err_missing_required < 0 ||
  print "$progname: the following files are required but do not exist:\n\t", 
    "@list_err_missing_required\n";
$#list_err_not_checked_in < 0 ||
  print "$progname: the following files should be checked in, but aren't\n\t",
    "@list_err_not_checked_in\n";
$#list_err_checked_in < 0 ||
  print "$progname: the following files should not be checked in, but are\n\t",
    "@list_err_checked_in\n";

exit ($force ? $nerrors : $nerrors+$nwarnings);



sub check_configure {
    my $fn = shift;
    my $nerrors = 0;

    open (CF, "<$fn") || die "Can't open file $fn to read";

    $has_star_default = 0;
    while (<CF>) {
        /^ *STAR_DEFAULT/ && do {
            if ($has_star_default) {
                # been here already
                print_error ($fn, $.,
                             "more than one STAR_DEFAULT");
                $nerrors++;
            }
            $has_star_default++;
        };
    }

    close (CF);

    if ($has_star_default == 0) {
        print_error ($fn, $., "has no STAR_DEFAULT");
        $nerrors++;
    }

    return $nerrors;
}

sub check_makefile {
    my $fn = shift;
    my $nerrors = 0;

    open (CF, "<$fn") || die "Can't open file $fn to read";

#     $includes_std_makefile = 0;
    while (<CF>) {
        /include *\$\(srcdir\)\/Makefile\.starconf/ && do {
            print_error ($fn, $., "includes Makefile.starconf -- obsolete");
            $nerrors++;
#             if ($includes_std_makefile) {
#                 # been here already
#                 print_error ($fn, $.,
#                              "includes Makefile.starconf multiple times");
#                 $nerrors++;
#             }
#             $includes_std_makefile++;
        };

        /^ *EXTRA_DIST *=.*\@EXTRA_DIST\@/ && do {
            print_error ($fn, $.,
                         "still declares EXTRA_DIST...\@EXTRA_DIST\@");
            $nerrors++;
        };
#         /^ *EXTRA_DIST *=/ && do {
#             if ($_ !~ /\@EXTRA_DIST\@/) {
#                 print_error ($fn, $.,
#                              "declares EXTRA_DIST but line does not include \@EXTRA_DIST\@");
#                 $nerrors++;
#             }
#         };

        /^ *BUILT_SOURCES *=.*\@BUILT_SOURCES\@/ && do {
            print_error ($fn, $.,
                         "still declares BUILT_SOURCES...\@BUILT_SOURCES\@");
            $nerrors++;
        };
#         /^ *BUILT_SOURCES *=/ && do {
#             if ($_ !~ /\@BUILT_SOURCES\@/) {
#                 print_error ($fn, $.,
#                              "declares BUILT_SOURCES but line does not include \@BUILT_SOURCES\@");
#                 $nerrors++;
#             }
#         };

    }

#     if ($includes_std_makefile == 0) {
#         print_error ($fn, 0, "Makefile.starconf not included");
#         $nerrors++;
#     }

    close (CF);

    return $nerrors;
}

sub print_error {
    my $fn = shift;
    my $lineno = shift;
    my $text = shift;

    print "$progname ERROR: $fn:$lineno: $text\n";
}

sub Usage {
    die "Usage: $progname [--force] [srcdir]\n";
}
