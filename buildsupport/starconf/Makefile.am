## Process this file with automake to produce Makefile.in

bin_SCRIPTS = starconf starconf-validate starconf-finder
pkgdata_DATA = \
	componentinfo.dtd \
	template-Makefile.am \
	template-configure.ac \
	template-component.xml.in


# The above files aren't automatically included in clean targets.
# Files starconf and starconf.m4 should be, however, since they're both
# files generated by make.
# True?
# CLEANFILES=starconf

aclocal_DATA = starconf.m4

# The edits of replacement variables (prefix and co) in
# starlink.m4.in and starconf.in must be done at `make' time rather
# than configure time (ie, not using AC_OUTPUT).  Do these by hand.
# See the `Installation Directory Variables' section of the autoconf
# manual for discussion.
#
# We substitute LN_S, DEFAULT_STARLINK... at the same time.  These
# could legitimately be done at configure time -- it does not have to
# be done this late -- but that would require us to have more than one
# substitution step, which would be too confusing and messy.
edit = @PERL@ -p \
	-e 's,\@bindir\@,$(bindir),g;' \
	-e 's,\@pkgdatadir\@,$(pkgdatadir),g;' \
	-e 's,\@prefix\@,$(prefix),g;' \
	-e 's,\@LN_S\@,$(LN_S),g;' \
	-e 's,\@STARCONF_DEFAULT_STARLINK\@,@STARCONF_DEFAULT_STARLINK@,g;' \
	-e 's,\@STARCONF_DEFAULT_PREFIX\@,@STARCONF_DEFAULT_PREFIX@,g;' \
	-e 's,\@PACKAGE_VERSION\@,@PACKAGE_VERSION@,g;' \
	-e 's,\@PACKAGE_VERSIONINT\@,@PACKAGE_VERSIONINT@,g;'\
	-e 's,\@aclocaldir\@,$(aclocaldir),g;' \
	-e '/^XXXINCLUDE *(\S*)/ && do { open (F, "<$$1") || die "Unable to open $$1"; while(<F>) { print; } close (F); };'
starconf: starconf.in bootstrap.installed config.status
	rm -f starconf starconf.tmp
	$(edit) $(srcdir)/starconf.in >starconf.tmp
	mv starconf.tmp starconf
	chmod +x starconf

# Magic: In the normal case (as controlled by <top>/bootstrap), the
# installation directory for this component is
# STARCONF_DEFAULT_PREFIX/../buildsupport/bin.  In this case, add a
# relative soft link from STARCONF_DEFAULT_PREFIX/bin to bindir for
# each of the scripts installed in bindir.  This will generally _not_
# be the case, however, if the --buildsupport=xxx option was given to
# <top>/bootstrap (since in that case we are deliberately installing
# the buildsupport tools in a different place from the default prefix
# location, which might be /usr/local, for example): in this case
# we want to install nothing in that location, so we carefully do
# nothing here.
install-exec-local:
## If the directory exists...
	if test -d @STARCONF_DEFAULT_PREFIX@/bin; then \
	  (cd @STARCONF_DEFAULT_PREFIX@/bin && \
	    thisdir=`pwd`; \
	    parent=`cd ..; pwd`; \
	    bdgrandparent=`cd @bindir@/../..; pwd`; \
	    if test "$$parent" = "$$bdgrandparent"; then \
## ...and these are the same directory, then make a link.  Be
## general, just in case we decide to change the string `buildsupport'.
	      pathback=`echo @bindir@ | sed 's,.*\(/[^/]*/[^/]*\)$$,..\1,'`; \
	      for f in $(bin_SCRIPTS); do \
	        rm -f $$f; \
		echo @LN_S@ $$pathback/$$f $$f; \
		@LN_S@ $$pathback/$$f $$f; \
		test -n "$$MANIFEST_FD" && echo $$thisdir/$$f >&$${MANIFEST_FD-0}; \
	      done; \
	    fi ); \
	fi; true

## It would be good to include making GenerateDependencies.class in
## here, but that would require finessing automake, which demands that
## Java files be guilt with gcj.  At least, it would be good to
## install the build class files from subdirectory java/.
