## Process this file with automake to produce Makefile.in
bin_SCRIPTS = starconf starconf-validate starconf-finder
pkgdata_DATA = \
	componentinfo.dtd \
	template-Makefile.am \
	template-configure.ac \
	template-component.xml.in


# The above files aren't automatically included in clean targets.
# Files starconf and starconf.m4 should be, however, since they're both
# files generated by make.
CLEANFILES=starconf make-starconf starconf.m4

# Include (possibly) required files in the starconf script.
#     starconf.m4               to add Starlink autoconf macros;
#     bootstrap                 standardised bootstrap script
#
# make-starconf allows filenames to be preceded by options `-xxx'.
# Option q: files which are _not_ thus prefixed are always unpacked; files
# with the `q' are unpacked only if starconf detects certain features
# in the configure.ac.
#
# Filenames preceded with `f' are always unpacked, overwriting any more
# recent file in the directory; those without are only
# unpacked if there is no file present (again, this is now an empty set).
starconf: make-starconf \
		starconf.m4 \
		bootstrap.installed
	./make-starconf \
		-f:starconf.m4 \
		-xq:bootstrap:bootstrap.installed

# The edits of replacement variables (prefix and co) in
# starlink.m4.in and starconf.in must be done at `make' time rather
# than configure time (ie, not using AC_OUTPUT).  Do these by hand.
# See the `Installation Directory Variables' section of the autoconf
# manual for discussion.
#
# We substitute LN_S, DEFAULT_STARLINK... at the same time.  These
# could legitimately be done at configure time -- it does not have to
# be done this late -- but that would require us to have more than one
# substitution step, which would be too confusing and messy.
#
# The set of !!...!!-substituted variables should be consistent with those in 
# make-starconf.in
edit = sed \
	-e 's,@bindir\@,$(bindir),g' \
	-e 's,@pkgdatadir\@,$(pkgdatadir),g' \
	-e 's,@prefix\@,$(prefix),g' \
	-e 's,@LN_S\@,$(LN_S),g' \
	-e 's,@STARCONF_DEFAULT_STARLINK\@,@STARCONF_DEFAULT_STARLINK@,g' \
	-e 's,@STARCONF_DEFAULT_PREFIX\@,@STARCONF_DEFAULT_PREFIX@,g' \
	-e 's,@PACKAGE_VERSION\@,@PACKAGE_VERSION@,g' \
	-e 's,@PACKAGE_VERSIONINT\@,@PACKAGE_VERSIONINT@,g'
make-starconf: make-starconf.in configure.ac
	rm -f make-starconf.tmp make-starconf
	$(edit) $(srcdir)/make-starconf.in >make-starconf.tmp
	mv make-starconf.tmp make-starconf
	chmod +x make-starconf

# Magic: If there exists a bin directory at
# @STARCONF_DEFAULT_PREFIX@/bin, then install links to the starconf
# tools there; if not, do nothing.  Since the starconf tools are
# typically but not necessarily installed in a different directory,
# (usually $STARLINK/bin/../buildsupport/bin), this ends up putting
# these in the main Starlink bin directory, but avoids losing if the
# installation paths are in some way unexpected.  If the two
# directories share a prefix, then make the link path relative, so
# that we're free to move the tree later, if we want.
install-exec-local:
## If the directory exists...
	if test -d @STARCONF_DEFAULT_PREFIX@/bin; then \
	  (cd @STARCONF_DEFAULT_PREFIX@/bin && \
	    thisdir=`pwd`; \
	    parent=`cd ..; pwd`; \
	    starconfbindir=`cd @bindir@; pwd`; \
	    if test $$thisdir != $$starconfbindir; then \
## ...and it's not the same directory, then make a link
	      pathback=`echo $$starconfbindir | sed -n "s,$$parent,..,p"`; \
	      test -n "$$pathback" || pathback=$$starconfbindir; \
	      for f in starconf starconf-validate starconf-finder; do \
	        rm -f $$f; \
		@LN_S@ $$pathback/$$f $$f; \
		test -n "$$MANIFEST_FILE" && echo $$thisdir/$$f >>$$MANIFEST_FILE; \
	      done; \
	    fi ); \
	fi; true

## It would be good to include making GenerateDependencies.class in
## here, but that would require finessing automake, which demands that
## Java files be guilt with gcj.  At least, it would be good to
## install the build class files from subdirectory java/.
