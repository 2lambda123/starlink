# Starlink M4 macros for autoconf
# This file is part of starconf version @PACKAGE_VERSION@
# DO NOT EDIT: it may be overwritten when starconf is next run

# _STAR_BOILERPLATE
# -----------------------
# Utility macro.  If the variable STAR_BOILERPLATE is not already defined,
# define it to be a file which will contain boilerplate fragments of
# makefile, which will be appended to the Makefile at the end of the
# configuration run.
# 
# Any macros which need to write boilerplate should [AC_REQUIRE] this
# macro, then write their boilerplate to the file $STAR_BOILERPLATE
AC_DEFUN([_STAR_BOILERPLATE],
[if test -z "$STAR_BOILERPLATE"; then
  STAR_BOILERPLATE=Makefile.boilerplate.$$
  echo "# Starlink boilerplate additions to Makefile"   >$STAR_BOILERPLATE
  echo "# Generated by ./configure and starconf"        >>$STAR_BOILERPLATE
  echo "# Do not distribute this file separately"       >>$STAR_BOILERPLATE
  echo "#"                                              >>$STAR_BOILERPLATE
  AC_CONFIG_COMMANDS([_star_boilerplate],
                     [#
    if test -n "$_star_boilerplate" -a -e "$_star_boilerplate"; then
        echo ""                                         >>Makefile
        cat $_star_boilerplate                          >>Makefile
        rm -f $_star_boilerplate
    else
        : This is possibly an error, but worry not
    fi], [_star_boilerplate=$STAR_BOILERPLATE])
fi])# _STAR_BOILERPLATE

# STAR_FACILITY_CODE(code, [msgfile=$PACKAGE_err.msg])
# ----------------------------------------------------
# Declare the facility code corresponding to this package.
# Arg 1 is numeric facility code, set to ERR_FACILITY_CODE and AC_SUBSTed
# Arg 2 is .msg file, which defaults to $PACKAGE_err.msg
AC_DEFUN([STAR_FACILITY_CODE],
[AC_REQUIRE([_STAR_BOILERPLATE])dnl
m4_ifval([$1], [], [AC_FATAL([$0: called with no code!])])dnl
ERR_FACILITY_CODE=$1
AC_SUBST(ERR_FACILITY_CODE)dnl
ERR_FACILITY_FILES="${PACKAGE}_err ${PACKAGE}_err.h fac_$1_err"
AC_SUBST(ERR_FACILITY_FILES)dnl
_star_tmp=m4_ifval([$2], [$2], [${PACKAGE}_err.msg])
cat >>$STAR_BOILERPLATE <<EOD
#  Rules for generating files built by the error message system.
#  ------------------------------------------------------------
${PACKAGE}_err:   $_star_tmp; messgen -f $_star_tmp
${PACKAGE}_err.h: $_star_tmp; messgen -c $_star_tmp
fac_$1_err:       $_star_tmp; messgen -e $_star_tmp
EOD
])# STAR_FACILITY_CODE

AC_SUBST_FILE([STAR_BOILERPLATE])

# STAR_DEFAULTS
# -------------
# Defaults for Starlink configure.ac files
AC_DEFUN([STAR_DEFAULTS],
[AC_REQUIRE([_STAR_BOILERPLATE])dnl
# Everything depends on where /star is.  Declare STARLINK as a
# `precious variable'.  Amongst other things, this will make
# ./configure squeal if the package is re-configured with an
# inconsistent value of this variable.
AC_ARG_VAR(STARLINK, [Where all the Starlink software lives])dnl

# Ensure that STARLINK has a value, defaulting to @DEFAULT_STARLINK@.  
# Note that this directory will be different from /star, if the
# `starconf' component was configured with a non-default value of STARLINK
test -n "$STARLINK" || STARLINK=@DEFAULT_STARLINK@

# Install software in @DEFAULT_STARLINK@ by default
AC_PREFIX_DEFAULT(@DEFAULT_STARLINK@)dnl

# Include a dependency of acinclude.m4 on this file
cat >>$STAR_BOILERPLATE <<EOD
# Rule for updating acinclude.m4
acinclude.m4: @bindir@/starconf; @bindir@/starconf ${srcdir}
EOD
])# STAR_DEFAULTS

# STAR_MAKE_MANIFEST
# ------------------
# At install time, also make a manifest.  This wraps the
# autodiscovered install command using the script
# install-with-manifest.  Refuse to do this if the install script
# discovered by INSTALL is not a variant of `install', since the
# install-with-manifest script can't cope with that (can it? XXX)
#
# This isn't completely satisfactory, since the install-with-manifest
# script (currently) simply appends names to a file called MANIFEST,
# and we have no way of either clearing that file before the
# installation starts or renaming it away after it completes (automake
# has install hooks, but the configuration work here is being done on
# the Makefile.in _after_ automake completes).
#
# As a separate problem, there's nothing to stop a parallelised make
# setting off two copies of the script, so that two processes try to
# append to the file simultaneously.  A fix to this would probably
# need to be sophisticated enough that it could fix the other problem
# as well.
AC_DEFUN([STAR_MAKE_MANIFEST],
[#
if test `expr "$INSTALL" : '.*install'` = 0; then
    echo "Installation program ($INSTALL) is not install -- cannot make manifest"
else
    AC_CONFIG_COMMANDS_PRE([INSTALL="@bindir@/install-with-manifest"])
fi])# STAR_MAKE_MANIFEST
