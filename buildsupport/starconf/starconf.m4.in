# Starlink M4 macros for autoconf
# This file is part of starconf version @PACKAGE_VERSION@
# DO NOT EDIT: it may be overwritten when starconf is next run

# _STAR_BOILERPLATE
# -----------------------
# Utility macro.  If the variable STAR_BOILERPLATE is not already defined,
# define it to be a file which will contain boilerplate fragments of
# makefile, which will be appended to the Makefile at the end of the
# configuration run.
# 
# Any macros which need to write boilerplate should [AC_REQUIRE] this
# macro, then write their boilerplate to the file $STAR_BOILERPLATE
AC_DEFUN([_STAR_BOILERPLATE],
[if test -z "$STAR_BOILERPLATE"; then
  STAR_BOILERPLATE=Makefile.boilerplate.$$
  echo "# Starlink boilerplate additions to Makefile"   >$STAR_BOILERPLATE
  echo "# Generated by ./configure and starconf"        >>$STAR_BOILERPLATE
  echo "#"                                              >>$STAR_BOILERPLATE
  AC_CONFIG_COMMANDS([_star_boilerplate],
                     [#
    if test -n "$_star_boilerplate" -a -e "$_star_boilerplate"; then
        echo ""                                         >>Makefile
        cat $_star_boilerplate                          >>Makefile
        rm -f $_star_boilerplate
    else
        : This is possibly an error, but worry not
    fi], [_star_boilerplate=$STAR_BOILERPLATE])
fi])# _STAR_BOILERPLATE

# STAR_DEFAULTS
# -------------
# Defaults for Starlink configure.ac files
AC_DEFUN([STAR_DEFAULTS],
[AC_REQUIRE([_STAR_BOILERPLATE])dnl
# Everything depends on where /star is.  Declare STARLINK as a
# `precious variable'.  Amongst other things, this will make
# ./configure squeal if the package is re-configured with an
# inconsistent value of this variable.
AC_ARG_VAR(STARLINK, [Where all the Starlink software lives])dnl

# AC_SUBST the STARLINK variable.  Macro AC_ARG_VAR does this anyway,
# but automake doesn't know that (in 1.6 at least): however any
# variable that automake finds has been AC_SUBSTed, it includes in
# Makefile.in, and that is useful to us.
AC_SUBST(STARLINK)

# Ensure that STARLINK has a value, defaulting to @DEFAULT_STARLINK@.  
# Note that this directory will be different from /star, if the
# `starconf' component was configured with a non-default value of STARLINK
test -n "$STARLINK" || STARLINK=@DEFAULT_STARLINK@

# Install software in @DEFAULT_STARLINK@ by default
AC_PREFIX_DEFAULT(@DEFAULT_STARLINK@)dnl
dnl    Don't include a dependency of acinclude.m4 on this .m4 file, or on
dnl    starconf.status: we can't have it depending on starconf.status,
dnl    since that isn't distributed (only its products are
dnl    distributed), and we can't just have an empty dependency with
dnl    ./starconf.status as the rule, since this file must exist
dnl    before any Makefile is run.  Another way of putting this is
dnl    that, in order for this rule to be discovered and included in a
dnl    Makefile, we must _already_ have an up-to-date acinclude.m4,
dnl    which means that the rule is completely redundant.
#
# Always create a manifest-install target
_STAR_MAKE_MANIFEST

# Dependencies declarations and checks (see macros
# [STAR_DECLARE_BUILD_DEPENDENCIES] and [STAR_DECLARE_USE_DEPENDENCIES])
STAR_BUILD_DEPENDENCIES='starconf'
AC_SUBST(STAR_BUILD_DEPENDENCIES)dnl
STAR_USE_DEPENDENCIES=''
AC_SUBST(STAR_USE_DEPENDENCIES)dnl

# List of documentation.  See [STAR_LATEX_DOCUMENTATION].
# STAR_DOCUMENTATION is a list of document codes,
# STAR_DOCUMENTATION_TARGETS is a list of targets which may be
# included in a Makefile.am EXTRA_DIST line
STAR_DOCUMENTATION=
AC_SUBST([STAR_DOCUMENTATION])
STAR_DOCUMENTATION_TARGETS=
AC_SUBST([STAR_DOCUMENTATION_TARGETS])
])# STAR_DEFAULTS

# STAR_FACILITY_CODE(code, [msgfile=$PACKAGE_err.msg])
# ----------------------------------------------------
# Declare the facility code corresponding to this package.
# Arg 1 is numeric facility code, set to ERR_FACILITY_CODE and AC_SUBSTed
# Arg 2 is .msg file, which defaults to $PACKAGE_err.msg
AC_DEFUN([STAR_FACILITY_CODE],
[AC_REQUIRE([_STAR_BOILERPLATE])dnl
m4_ifval([$1], [], [AC_FATAL([$0: called with no code!])])dnl
ERR_FACILITY_CODE=$1
AC_SUBST(ERR_FACILITY_CODE)dnl
ERR_FACILITY_FILES="${PACKAGE}_err ${PACKAGE}_err.h fac_$1_err"
AC_SUBST(ERR_FACILITY_FILES)dnl
_star_tmp=m4_ifval([$2], [$2], [${PACKAGE}_err.msg])
cat >>$STAR_BOILERPLATE <<EOD
#  Rules for generating files built by the error message system.
#  ------------------------------------------------------------
${PACKAGE}_err:   $_star_tmp; \$(STARLINK)/bin/messgen -f $_star_tmp
${PACKAGE}_err.h: $_star_tmp; \$(STARLINK)/bin/messgen -c $_star_tmp
fac_$1_err:       $_star_tmp; \$(STARLINK)/bin/messgen -e $_star_tmp
EOD
STAR_DECLARE_BUILD_DEPENDENCIES(messgen)
])# STAR_FACILITY_CODE


# _STAR_MAKE_MANIFEST
# ------------------
#
# At install time, also make a manifest, by adding the install target
# `manifest-install'.  This wraps the autodiscovered install command
# using the script install-with-manifest.  Internal macro, called from
# within STAR_DEFAULTS.
#
# This isn't completely satisfactory, since the install-with-manifest
# script (currently) simply appends names to a file called MANIFEST,
# and it has no way of either clearing that file before the
# installation starts or renaming it away after it completes (automake
# has install hooks, but the configuration work here is being done on
# the Makefile.in _after_ automake completes).  This problem is dealt
# with to some extent by creating the `manifest-install' target.
#
# As a separate problem, there's nothing to stop a parallelised make
# setting off two copies of the script, so that two processes try to
# append to the file simultaneously.  A fix to this would probably
# need to be sophisticated enough that it could fix the other problem
# as well.
#
# Dependency: the makefile fragment below relies on starconf correctly
# including install-with-manifest.in
AC_DEFUN([_STAR_MAKE_MANIFEST],
[#
AC_REQUIRE([_STAR_BOILERPLATE])
# Declare where the manifests should live.  This is slightly
# complicated: we want to use this at configure time to check that
# dependencies have in fact been installed, but it ought to depend on
# $(prefix), since the user has the freedom to install things
# elsewhere, and will expect the manifests to go in the same place.
# We can't do anything other than accept, and document, that the user
# can confuse things here.  It doesn't matter too much, really, as the
# dependency check isn't crucial.  XXX revisit this.
current_MANIFESTS="$prefix/manifests"
MANIFESTS='$(prefix)/manifests'
AC_SUBST(MANIFESTS)
dnl   The $[]@ quoting below is because $@ means rest-of-args to m4
cat >>$STAR_BOILERPLATE <<\_EOD
# Create an install manifest, and install it in the required manifest location
# Create install-manifest.xml file, using the MANIFEST file generated
# by install-with-manifest
install-manifest.xml: install-with-manifest
	rm -f MANIFEST; touch MANIFEST
	$(MAKE) INSTALL=./install-with-manifest install
	rm -f $[]@
	echo "<?xml version='1.0'?>"                     >$[]@
	echo "<!DOCTYPE manifest SYSTEM 'componentinfo.dtd'>" >>$[]@
	echo "<manifest component='$(PACKAGE)'>"         >>$[]@
	echo "<version>$(PACKAGE_VERSION)</version>"     >>$[]@
	echo "<files>"                                   >>$[]@
	cat MANIFEST                                     >>$[]@
	echo "</files>"                                  >>$[]@
	echo "</manifest>"                               >>$[]@
	rm -f MANIFEST
# Install the install-manifest.xml into the $(MANIFESTS) directory.
# We should respect $(DESTDIR), but needn't worry about $(srcdir),
# since we know that the file was created in the current directory.
install-manifest: install-manifest.xml
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(MANIFESTS)
	$(INSTALL_DATA) install-manifest.xml $(DESTDIR)$(MANIFESTS)/$(PACKAGE)
# The following rule is redundant (install-with-manifest.in must exist
# in order for ./configure to run without error), but leave it in for
# its documentation value.
install-with-manifest.in:
	./starconf.status
_EOD
AC_CONFIG_FILES(install-with-manifest, [chmod +x install-with-manifest])
])# _STAR_MAKE_MANIFEST



# STAR_LATEX_DOCUMENTATION(documentcode, [targets])
# -------------------------------------------------
# Generate the standard makefile targets to handle LaTeX documentation
# source.  The parameter documentcode should be something like
# `sun123' -- it should not include any .tex extension.
#
# The second, optional, argument gives an explicit list of the targets
# which are build.  If this is _not_ specified, then a standard list
# is used (.tex, .ps and .tar_htx) and corresponding rules added to
# the generated makefile.  If it is specified (to any value, including
# ''), then its value is added to the STAR_DOCUMENTATION_TARGETS
# variable, and no extra Makefile rules are added.  Thus if users need
# anything complicated done, they should use this second argument and
# provide rules for satisfying the given targets.
#
# Adds to the substituted variable @STAR_DOCUMENTATION_TARGETS@; thus
# one can use $(STAR_DOCUMENTATION_TARGETS) as a Makefile variable,
# for example in an EXTRA_DIST Makefile.am line.
AC_DEFUN([STAR_LATEX_DOCUMENTATION],
[AC_REQUIRE([_STAR_BOILERPLATE])dnl
m4_ifval([$1], [], [AC_FATAL([$0: called with no documentcode])])dnl
STAR_DOCUMENTATION="$STAR_DOCUMENTATION $1"
m4_ifval([$2],
         [dnl non-empty second argument -- just add to variable
	  STAR_DOCUMENTATION_TARGETS="$STAR_DOCUMENTATION_TARGETS $2"],
	 [dnl second arg empty -- use defaults
	  for d in $1; do
              docno=`basename $d .tex`
              cat >>$STAR_BOILERPLATE <<EOD
$docno.dvi: $docno.tex
	latex $docno
$docno.ps: $docno.dvi
	dvips -o $docno.ps $docno.dvi
$docno.htx: $docno.tex
	star2html $docno.tex
$docno.htx_tar: $docno.htx
	tar cf $docno.htx_tar $docno.htx
EOD
	  done
          STAR_DOCUMENTATION_TARGETS="$STAR_DOCUMENTATION_TARGETS $docno.tex $docno.ps $docno.htx_tar"
	  STAR_DECLARE_BUILD_DEPENDENCIES(star2html)
])dnl
])# STAR_LATEX_DOCUMENTATION

# STAR_DECLARE_BUILD_DEPENDENCIES(packagelist)
# --------------------------------------------
#
# Declare a space-separated list of packages/components which the
# build of this package depends on.  The packages here are tested to
# ensure thay do exist (XXX not yet), and the list is available for
# substitution in the AC_SUBST-ed variable [@STAR_BUILD_DEPENDENCIES@].
# The macro may be called several times.
AC_DEFUN([STAR_DECLARE_BUILD_DEPENDENCIES],
[#
m4_ifval([$1], [], [AC_FATAL([$0: called with empty packagelist])])dnl
STAR_BUILD_DEPENDENCIES="$STAR_BUILD_DEPENDENCIES $1"
])# STAR_DECLARE_BUILD_DEPENDENCIES

# STAR_DECLARE_USE_DEPENDENCIES(packagelist)
# ------------------------------------------
#
# Declare a space-separated list of packages/components which the use
# of this package depends on.  The packages here are tested to ensure
# thay do exist (XXX not yet), and the list is available for
# substitution in the [AC_SUBST]-ed variable [@STAR_USE_DEPENDENCIES@].
# The macro may be called several times.
AC_DEFUN([STAR_DECLARE_USE_DEPENDENCIES],
[#
m4_ifval([$1], [], [AC_FATAL([$0: called with empty packagelist])])dnl
STAR_USE_DEPENDENCIES="$STAR_USE_DEPENDENCIES $1"
])# STAR_DECLARE_USE_DEPENDENCIES
