# Starlink M4 macros for autoconf
# original starconf.m4, installed by starconf @PACKAGE_VERSION@, rnum=@PACKAGE_VERSIONINT@
# DO NOT EDIT: it may be overwritten when starconf is next run


# STAR_DEFAULTS(options='')
# -------------------------
# Defaults for Starlink configure.ac files.  The optional OPTIONS
# argument holds a space-separated list of option keywords, of which
# the only ones at present are `per-package-dirs', which causes
# applications and help to be installed in a package-specific
# directory, and 'docs-only', which indicates that the component contains
# only documentation.
#
# Certain features of this macro are documented in SSN/78, in particular
#   - Sets STARLINK
#   - Sets FCFLAGS, FFLAGS, CFLAGS, LDFLAGS to appropriate values
#   - Sets PACKAGE_VERSION_{MAJOR,MINOR,RELEASE,INTEGER}
# The behaviour of these should not be changed without changing the
# documentation, or without due consideration of the package which use
# the earlier behaviour.  Everything else is, in principle, private
# (not that that's going to stop folk).
AC_DEFUN([STAR_DEFAULTS],
[##
## Options must be parsed at autoconf time, so that we define
## _poss_STAR_RESTFP_FIX as a macro.  That must be defined exactly once
## during this option processing.
m4_ifval([$1],
         [AC_FOREACH([Option], [$1],
                     [m4_case(Option,
                              [per-package-dirs], [_star_per_package_dirs=:],
                              [docs-only], [m4_define([_poss_STAR_RESTFP_FIX],
                                                      [])dnl
                                           _star_docs_only=:],
                              [AC_FATAL([$0: unrecognised option $1])])
                      ])],
         [])
m4_ifdef([_poss_STAR_RESTFP_FIX],
         [],
         [m4_define([_poss_STAR_RESTFP_FIX], [_STAR_RESTFP_FIX])])

test -n "$_star_per_package_dirs" || _star_per_package_dirs=false
test -n "$_star_docs_only"        || _star_docs_only=false


# Ensure that STARLINK has a value, defaulting to
# @STARCONF_DEFAULT_STARLINK@.  Note that this directory may be
# different from /star, and reflects the value of
# STARCONF_DEFAULT_STARLINK that the `starconf' package was configured
# with before its installation. 
#
# We use $STARLINK as the location of any other Starlink tools we need
# to use during the building of our packages, and for the location of
# any manifests we need to check.  It is permissable for it to be
# different from $(prefix): this is partly because we have no way of
# enforcing that the two be the same, since the user can set
# prefix=xxx on the `make install' command line, and partly so that it
# is possible to make a test version of a new package, using tools
# from an old installation, but installing in a new place.
#
# However, we install software in @STARCONF_DEFAULT_PREFIX@ by
# default.  This is so even if $STARLINK and STARCONF_DEFAULT_STARLINK
# are different, because in this case we are planning to use a
# previous installation in $STARLINK or $STARCONF_DEFAULT_STARLINK,
# but install the newly built tool elsewhere. 
#
# In most cases, including the most important case where we are
# building the tree from scratch, in a checked out directory,
# STARLINK, STARCONF_DEFAULT_STARLINK and STARCONF_DEFAULT_PREFIX will
# all be the same.  That's OK because a separate aspect of the build
# process, respecting the various dependencies expresses in source
# directories, ensures that we don't use (and install) any Starlink
# tools in one component before that component has been build and
# installed. 

AC_PREFIX_DEFAULT(@STARCONF_DEFAULT_PREFIX@)dnl

test -n "$STARLINK" || STARLINK=@STARCONF_DEFAULT_STARLINK@

# Handle the --with-starlink option.  If --with-starlink is present
# with no argument (the default), we do nothing as this simply
# indicates that this is part of a Starlink tree.  If it has an
# argument, then this overrides the location of the Starlink tree.
# Option --without-starlink or --with-starlink=no indicates that this
# is being built _not_ as part of a Starlink build (that is, it's
# being distributed as something other than a Starlink package).  In
# this case, the variable STARLINK is unset.
AC_ARG_WITH(starlink,
            AS_HELP_STRING([--with-starlink],
                           [Starlink tree to use (default ${STARLINK:=@STARCONF_DEFAULT_STARLINK@})]),
            [if test -z "$withval" -o "$withval" = yes; then
                 : nothing needs to be done
             elif test "X$withval" = Xno; then
                 unset STARLINK
             elif test -d "$withval"; then
                 STARLINK="$withval"
             else
                 AC_MSG_WARN([--with-starlink given nonexistent directory; ignored: using default $STARLINK instead])
             fi])
if test -n "$STARLINK"; then
    AC_MSG_NOTICE([Starlink tree located at $STARLINK])
else
    AC_MSG_NOTICE([Not being built as part of the Starlink tree])
fi

# Handle --without-stardocs.  Don't build and install documentation.
# Default is --with-stardocs.
_star_build_docs=:
AC_ARG_WITH(stardocs,
            AS_HELP_STRING([--without-stardocs],
                           [Do not install built documentation (default --with)]),
            [if test -z "$withval"; then
                 _star_build_docs=: # default
             elif test "X$withval" = Xno; then
                 _star_build_docs=false
             elif test "X$withval" = Xyes; then
                 _star_build_docs=:
             else
                 AC_MSG_WARN([bad arg to --with-stardocs: using yes])
                 _star_build_docs=:
             fi])

if $_star_docs_only; then
    if $_star_build_docs; then
        : OK
    else
        AC_MSG_WARN([Building without documentation in a docs-only directory])
    fi
fi

# Everything depends on where /star is.  Declare STARLINK as a
# `precious variable'.  Amongst other things, this will make
# ./configure squeal if the package is re-configured with an
# inconsistent value of this variable.
AC_ARG_VAR(STARLINK, [Location of a current Starlink tree (used if necessary)])dnl

# AC_SUBST the STARLINK variable.  Macro AC_ARG_VAR does this anyway,
# but automake doesn't know that (in 1.6 at least): however any
# variable that automake finds has been AC_SUBSTed, it includes in
# Makefile.in, and we need that.
AC_SUBST(STARLINK)

# Use the above information: $STARLINK indicates a preexisting
# Starlink tree.  Note that we are using FCFLAGS rather than FFLAGS --
# we prefer the FC macros to the F77 ones, and have modified automake
# to generate these.  However, we maintain FFLAGS also, so that we
# allow both.  Avoid doing anything if $STARLINK was unset above.
if test -n "$STARLINK"; then
    if test "$STARLINK" != "@STARCONF_DEFAULT_PREFIX@"; then
        FCFLAGS="$FCFLAGS -I@STARCONF_DEFAULT_PREFIX@/include"
        FFLAGS="$FFLAGS -I@STARCONF_DEFAULT_PREFIX@/include"
        CFLAGS="$CFLAGS -I@STARCONF_DEFAULT_PREFIX@/include"
        LDFLAGS="$LDFLAGS -L@STARCONF_DEFAULT_PREFIX@/lib"
    fi
    FCFLAGS="$FCFLAGS -I$STARLINK/include"
    FFLAGS="$FFLAGS -I$STARLINK/include"
    CFLAGS="$CFLAGS -I$STARLINK/include"
    LDFLAGS="$LDFLAGS -L$STARLINK/lib"
fi

## If the docs-only option was given, this expands to nothing,
## else to the _STAR_RESTFP_FIX macro. 
_poss_STAR_RESTFP_FIX

# Installation directory options (these are no longer handled
# by _STAR_EXTRADIR_COMMON).  There should be an entry here for each of
# Starlink's special installation locations.
AC_SUBST([stardocsdir],     ['${prefix}/docs'])dnl
AC_SUBST([starhelpdir],     ['${prefix}/help'])dnl
AC_SUBST([staretcdir],      ['${prefix}/etc'])dnl
AC_SUBST([starexamplesdir], ['${prefix}/examples'])dnl

# Certain directories are affected by the $_star_per_package_dir variable;
# if it's true, then add the $PACKAGE_NAME to the directory.
# The directories currently adjusted by this are bin and help;
# there are others: see PWD's message of 2004-02-16
# <http://www.jiscmail.ac.uk/cgi-bin/wa.exe?A2=ind0402&L=stardev&T=0&F=&S=&P=5153>
if $_star_per_package_dirs; then
    bindir="$bindir/$PACKAGE_NAME"
    starhelpdir="$starhelpdir/$PACKAGE_NAME"
    staretcdir="$staretcdir/$PACKAGE_NAME"
    AC_MSG_NOTICE([[STAR_DEFAULTS] has option per-package-dirs:])
    AC_MSG_NOTICE([    bindir=$bindir starhelpdir=$starhelpdir staretcdir=$staretcdir])
fi

# Dependency declarations and checks.
# Everything is dependent on starconf, so we don't have to declare that 
# for each package separately.
# STAR_DEPENDENCIES_ATTRIBUTES is currently not used.
STAR_DEPENDENCIES_ATTRIBUTES=''
STAR_DEPENDENCIES_CHILDREN=''
AC_SUBST(STAR_DEPENDENCIES_ATTRIBUTES)
AC_SUBST(STAR_DEPENDENCIES_CHILDREN)

# List of documentation.  See [STAR_LATEX_DOCUMENTATION].
# STAR_DOCUMENTATION is a list of document codes,
STAR_DOCUMENTATION=
AC_SUBST([STAR_DOCUMENTATION])

# Create a PACKAGE_VERSION_INTEGER variable, which contains the
# package's version number as an integer major*1e6+minor*1e3+release.
eval [`echo $VERSION | sed -e 's/\([0-9]*\)[^0-9]*\([0-9]*\)[^0-9]*\([0-9]*\).*/PACKAGE_VERSION_MAJOR=\1; PACKAGE_VERSION_MINOR=\2; PACKAGE_VERSION_RELEASE=\3;/'`]
test -n "$PACKAGE_VERSION_MAJOR"   || PACKAGE_VERSION_MAJOR=0
test -n "$PACKAGE_VERSION_MINOR"   || PACKAGE_VERSION_MINOR=0
test -n "$PACKAGE_VERSION_RELEASE" || PACKAGE_VERSION_RELEASE=0
PACKAGE_VERSION_INTEGER=`expr $PACKAGE_VERSION_MAJOR \* 1000000 + $PACKAGE_VERSION_MINOR \* 1000 + $PACKAGE_VERSION_RELEASE`
AC_SUBST(PACKAGE_VERSION_MAJOR)
AC_SUBST(PACKAGE_VERSION_MINOR)
AC_SUBST(PACKAGE_VERSION_RELEASE)
AC_SUBST(PACKAGE_VERSION_INTEGER)
dnl Don't put this into config.h -- subst a .h file if required.
dnl May change this in future
dnl AC_DEFINE_UNQUOTED([PACKAGE_VERSION_INTEGER], $PACKAGE_VERSION_INTEGER,
dnl                    [Integer version number, in the form major*1e6+minor*1e3+release])

# When we do dependency checking, using the dependencies declared in
# the package's configure.ac, we do so by looking at what tools have
# already been installed in the Starlink tree.  The tree in question
# is to be found under $STARLINK (see above), so we check that a
# package is installed by checking that its manifest can be found in
# $STARLINK/manifests.  We don't AC_SUBST this.
current_MANIFESTS=$STARLINK/manifests

# When we install manifests, however, they should go in the
# installation directory.  Allow this to be defaulted from the environment.
# In particular, if it is set to null in the environment, this will
# suppress the installation of manifests.
: ${STAR_MANIFEST_DIR='$(prefix)/manifests'}
AC_SUBST(STAR_MANIFEST_DIR)

# Although PACKAGE_VERSION is a default output variable, it isn't
# added as a Makefile variable by default.  We need it below, however,
# so add it now.
AC_SUBST(PACKAGE_VERSION)

# Initialise state of predist/postdist flags (see STAR_PREDIST_SOURCES)
_star_predist_status=unknown
PREDIST='#'
AC_SUBST(PREDIST)

# And immediately use it, by asserting that starconf.status must not
# be distributed.  This is (a) true, but also (b) necessary,
# since it guarantees that we do make the predist-or-not test at some
# point.  If we don't do this, and the user doesn't call
# STAR_PREDIST_SOURCES themself (possibly implicitly in STAR_MESSGEN),
# then important targets might be commented out by mistake.
STAR_PREDIST_SOURCES(starconf.status)

# pax and/or tar are used in some install targets.
# Note: value-if-not-found should be blank, so this can be tested for.
AC_PATH_PROG(PAX, pax)
AC_PATH_PROGS(TAR, [gnutar tar])

# Default $prefix.  This is done by the standard autoconf configure, but at
# a slightly later stage than this.  Doing it here, as part of STAR_[]DEFAULTS
# means that the defaulted value of $prefix can be used within the body of
# the configure.ac, for example to pass it to a ./configure in a subdirectory.
test "x$prefix" = xNONE && prefix=$ac_default_prefix
# Let make expand exec_prefix.
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'
])# STAR_DEFAULTS



# STAR_MESSGEN([msgfile-list])
# ----------------------------
#
# Handle generating message, error, and facility files.
#
# Declare that we will need to use the messgen utility.  This macro
# does not by itself cause the messgen rules to be included in the
# makefile -- that is done by automake, when it sees a
# 'include_MESSAGES' or 'noinst_MESSAGES' variable.
#
# The optional argument is a space-separated list of files, each of
# which has a set of message declarations in it, in the format
# prescribed by the messgen utility.  If this is present, then the
# named files are declared as pre-distribution files (the macro calls
# STAR_PREDIST_SOURCES on them), and so the resulting configure script
# should expect not to find them in an unpacked distribution.  This is
# useful as documentation or as a shortcut for calling the latter
# macro, but recall that it is the presence of the automake
# 'include_MESSAGES' variable which does the work.
#
# The macro may be called more than once if you have more than one
# .msg file in the directory.
#
# The files listed in the '_MESSAGES' variable will often have to be 
# declared as `BUILT_SOURCES'.  
#
# The macro also implicitly declares a `sourceset' dependency on the
# messgen package.
AC_DEFUN([STAR_MESSGEN],
   [#
    $_star_docs_only &&
        AC_MSG_ERROR([STAR[]_MESSGEN in docs-only directory])
    STAR_DECLARE_DEPENDENCIES([sourceset], [messgen])
    m4_ifval([$1], [STAR_PREDIST_SOURCES($1)])
    STAR_CHECK_PROGS(messgen)
])# STAR_MESSGEN


# STAR_PREDIST_SOURCES(source-files)
# ----------------------------------
#
# Give a (space-separated) list of files which should exist only in
# the pre-distribution (ie, repository checkout) state.  If one of
# these is found, then the substitution variable PREDIST is set to a
# blank.  We should find either all of the marker files or none of
# them; if only some of the marker files are found, this is probably
# an error of some type, so warn about it.  This means, by the way,
# that it is the presence or absence of the first marker file which
# determines whether we are in the predist or postdist state, with the
# rest providing consistency checks.
#
# The macro may be called more than once.  Multiple calls are
# equivalent to a single call with all the marker files in the list.
# Automake checks that the files listed here are not in the list of
# distributed files, and issues a warning if they are.
AC_DEFUN([STAR_PREDIST_SOURCES],
[m4_ifval([$1], [], [AC_FATAL([$0: called with no stamp file])])dnl
for marker in $1
do
    if test -f $marker; then
        _star_predist_marker_present=:
        AC_MSG_NOTICE([found predist marker file $marker])
    else
        _star_predist_marker_present=false
    fi
    case $_star_predist_status in
        unknown)
            if $_star_predist_marker_present; then
                # we do want to build sourceset files
                _star_predist_status=predist
                PREDIST=
                echo "In predistribution state"
            else
                # leave default PREDIST='#'
                _star_predist_status=postdist
            fi
            ;;
        predist)
            if $_star_predist_marker_present; then
                : OK
            else
                AC_MSG_WARN([Building predist, but marker file $marker is not present])
            fi
            ;;
        postdist)
            if $_star_predist_marker_present; then
                AC_MSG_WARN([In postdistribution state, but predist marker file $marker is present])
            fi
            ;;
        *)
            AC_MSG_ERROR([impossible predist status $_star_predist_status])
            ;;
    esac
done
])# STAR_PREDIST_SOURCES


# STAR_CNF_COMPATIBLE_SYMBOLS
# ---------------------------
#
# Work out what is required to have the Fortran compiler produce
# library symbols which are compatible with those expected by the CNF
# package.  If you are building a library which includes Fortran code,
# then you should call this macro, which possibly adjusts the FCFLAGS
# variable.
#
# At present, all this macro has to do is simply work out whether it
# needs to stop g77 adding a second underscore to generated symbol
# names (it adds a single underscore to most Fortran symbols, but by
# default adds two when the symbol name already contains an
# underscore); the other Fortran compilers we use don't need any extra
# options, as it happens.  However this could potentially be much more
# complicated.  The autoconf AC_F77_WRAPPERS macro detects more
# possibilities, but probably not a completely exhaustive set.  In
# future it might be necessary to extend the CNF macros, by somehow
# merging the results of AC_F77_WRAPPERS into it, and at that point it
# might be necessary to extend this macro.
#
# This macro is designed to work with CNF, however it does _not_
# require the cnf.h headers to be installed, because it should remain
# callable at configuration time before _anything_ has been installed.
# Instead we fake the functionality of the definition
# F77_EXTERNAL_NAME in cnf.h, which appends an underscore (just one)
# to the end of C symbols.
#
AC_DEFUN([STAR_CNF_COMPATIBLE_SYMBOLS],
         [$_star_docs_only &&
              AC_MSG_ERROR([STAR[]_CNF_COMPATIBLE_SYMBOLS in docs-only dir])
          AC_CACHE_CHECK([how to make Fortran and C play nicely],
                         [star_cv_cnf_compatible_symbols],
                         [AC_REQUIRE([AC_PROG_FC])dnl
                          AC_REQUIRE([AC_PROG_CC])dnl
                          AC_LANG_PUSH([C])
                          AC_LANG_CONFTEST([AC_LANG_PROGRAM([
void funcone_(); 
void func_two_();
],[
funcone_();
func_two_();
])])
                          if (eval $ac_compile) 2>&5; then
                              mv conftest.$ac_objext c-conftest.$ac_objext
                          else
                              AC_MSG_ERROR([cannot compile a C program!])
                          fi
                          AC_LANG_POP(C)
                          AC_LANG_PUSH([Fortran])
                          AC_LANG_CONFTEST([AC_LANG_SOURCE([
      SUBROUTINE funcone
      END
      SUBROUTINE func_two
      END
])])
                          star_cv_cnf_compatible_symbols=X
                          for opt in "" "-fno-second-underscore"

                          do
                              if $FC $opt -o conftest conftest.f c-conftest.$ac_objext 2>&5; then
                                  star_cv_cnf_compatible_symbols=$opt
                                  break
                              fi
                          done
                          AC_LANG_POP([Fortran])
                          rm -f conftest* c-conftest*
                          ])
          if test "$star_cv_cnf_compatible_symbols" = X; then
              AC_MSG_ERROR([cannot work out how])
          else
              FCFLAGS="$FCFLAGS $star_cv_cnf_compatible_symbols"
              FFLAGS="$FFLAGS $star_cv_cnf_compatible_symbols"
          fi
])# STAR_CNF_COMPATIBLE_SYMBOLS


# STAR_PATH_TCLTK([minversion=0], [options=''])
# ---------------------------------------------
#
# Finds a tclsh and wish, and the associated libraries.  Sets output
# variable TCL_CFLAGS to the C compiler flags necessary to compile
# with Tcl, TCL_LIBS to the required library flags, and TCLSH to the
# full path of the tclsh executable; if Tk is requested, it similarly
# sets TK_CFLAGS, TK_LIBS and WISH.  Define the cpp variable
# TCL_MISSING to 1 if Tcl is not available.  Similar to macro
# AC_PATH_XTRA.
#
# If argument MINVERSION is present, it specifies the minimum Tcl/Tk
# version number required.
#
# The macro searches first in the path, and
# then in a selection of platform-specific standard locations.  The
# configure option --with-tcl allows you to provide a path to a tclsh
# binary, which is put at the head of the list of locations to search.
# Option --without-tcl suppresses the search, and results in no
# variables being substituted.
#
# If the argument OPTIONS is present, it is a space-separated list of
# the words 'tk' or 'itcl'.  If one or both of these is present, then
# the macro will find a Tcl location which also has Tk or itcl
# installed (note that the itcl test doesn't do anything at present).
AC_DEFUN([STAR_PATH_TCLTK],
    [_star_use_tcl=:
     AC_ARG_WITH([tcl],
                 AS_HELP_STRING([--with-tcl],
                                [give path to tclsh (dir which contains binary)]),
                 [if test "X$withval" = Xno; then
                      _star_use_tcl=false
                  elif test "X$withval" = Xyes; then
                      _star_use_tcl=:
                  else
                      _star_use_tcl=:
                      _star_try_tcldir=$withval
                  fi])
     if $_star_use_tcl; then
         _star_searchfor=Tcl
         if expr "x m4_ifval([$2], [$2], []) " : 'x.* tk ' >/dev/null; then
             search_tk=:
             _star_searchfor="$_star_searchfor/Tk"
         else
             search_tk=false
         fi
         if expr "x m4_ifval([$2], [$2], []) " : 'x.* itcl ' >/dev/null; then
             search_itcl=:
             _star_searchfor="$_star_searchfor/itcl"
             echo "Searching for itcl does nothing so far!"
         else
             search_itcl=false
         fi
         AC_MSG_CHECKING([where to find $_star_searchfor m4_ifval([$1], [$1+], [(any version)])])
         AC_CACHE_VAL([star_cv_settcldir],
             [star_cv_settcldir=unknown
              reqversint=`echo m4_ifval([$1], [$1], 0.0)-0-0 | [sed 's/\([0-9]*\)[^0-9]*\([0-9]*\)[^0-9]*\([0-9]*\).*/10000 \1* 100 \2*+ \3+p/']|dc`
              tclsources=`echo $PATH | sed "s/$PATH_SEPARATOR/ /g"`
              stdsources='
dnl  Search in /usr and /usr/local at least
/usr/bin
/usr/local/bin
dnl  /opt/local and /sw are the default installation locations for OpenDarwin
dnl  and Fink on OSX
/opt/local/bin
/sw/bin'
              for d in $_star_try_tcldir $STARCONF_DEFAULT_STARLINK/bin $tclsources $stdsources
              do
                  locok=:
                  if test -d $d; then
                      tcldir=`cd $d/..; pwd`
                      test -f $d/tclsh -a -f $tcldir/include/tcl.h || locok=false
                  else
                      locok=false
                  fi
                  if $locok && $search_tk; then
                      test -f $d/wish -a -f $tcldir/include/tk.h || locok=false
                  fi
                  if $locok && $search_itcl; then
                      test -f $tcldir/lib/libitcl.aXXX || locok=false
                  fi
                  if $locok; then
                       if test ! -f $tcldir/lib/tclConfig.sh; then
                           echo "$tcldir/lib/tclConfig.sh unexpectedly missing"
                           break
                       fi
                       if $search_tk && test ! -f $tcldir/lib/tkConfig.sh; then
                           echo "$tcldir/lib/tkConfig.sh unexpectedly missing"
                           break
                       fi
                       rm -f conftest.results
                       # Run in a subshell, to isolate settings in tclConfig.sh
                       # Send output to conftest.results, and return
                       # 0 if all is ok
                       (
    . $tcldir/lib/tclConfig.sh
    if $search_tk; then
        . $tcldir/lib/tkConfig.sh
    fi
    tclversint=`[echo $TCL_VERSION$TCL_PATCH_LEVEL-0-0 | sed 's/\([0-9]*\)[^0-9]*\([0-9]*\)[^0-9]*\([0-9]*\).*/10000 \1* 100 \2*+ \3+p/'|dc]`
    if test $tclversint -gt $reqversint; then
        # New enough version.

        # Dereference the tclsh and wish links -- the "->" _is_ standard,
        # mandated by POSIX.
        lslink=`ls -l $tcldir/bin/tclsh`
        tclsh_loc=`expr "x$lslink" : "x.*-> *\(.*\)"`
        if test -n "$tclsh_loc" -a -x "$tclsh_loc"; then
           : OK
        elif test -x "$tcldir/bin/tclsh"; then
            # Odd: either .../bin/tclsh isn't a link, or it doesn't point to an
            # executable.  But .../bin/tclsh is OK, so use that.
            tclsh_loc="$tcldir/bin/tclsh"
        else
            # This really shouldn't happen, since we checked above that
            # $d/tclsh was executable.  Still, it clearly has happened,
            # so don't go mad.
            echo "Warning: found Tcl libraries, but not tclsh!" >&2
            tclsh_loc=
        fi

        res="_star_tcldir=$tcldir;"

        # Make the TCL version number available.
        res="$res TCL_VERSION=\"$TCL_VERSION\";"

        # These envs include $TCL_DBGX -- expand this out.
        eval "I=\"$TCL_INCLUDE_SPEC\"; L=\"$TCL_LIB_SPEC\""
        res="$res TCL_CFLAGS=\"$I\"; TCL_LIBS=\"$L\"; TCLSH=\"$tclsh_loc\";"

        if $search_tk; then
            # Same for wish
            lslink=`ls -l $tcldir/bin/wish`
            wish_loc=`expr "x$lslink" : "x.*-> *\(.*\)"`
            if test -n "$wish_loc" -a -x "$wish_loc"; then
                : OK
            elif test -x "$tcldir/bin/wish"; then
                wish_loc="$tcldir/bin/wish"
            else
                echo "Warning: found Tk libraries, but not wish!" >&2
                wish_loc=
            fi
            # These envs potentially include $TK_DBGX -- expand this out.
            eval "I=\"$TK_XINCLUDES\"; L=\"$TK_LIB_SPEC\""
            res="$res TK_CFLAGS=\"$I\"; TK_LIBS=\"$L\"; WISH=\"$wish_loc\";"
        fi

        # similarly for $search_itcl

        echo $res >conftest.results
        status=0
    else
        msg="$tcldir: found Tcl-$TCL_VERSION$TCL_PATCH_LEVEL"
        if $search_tk; then
            msg="$msg, Tk-$TK_VERSION$TK_PATCH_LEVEL"
        fi
        echo "$msg: older than required" >&2
        status=1
    fi
    exit $status
                       )
                       teststat=$?
                       if test $teststat = 0; then
                           star_cv_settcldir=`cat conftest.results`
                       fi
                       if test "$star_cv_settcldir" != unknown; then
                           break
                       fi
                  fi # $locok
              done])

        if test "$star_cv_settcldir" = unknown; then
            AC_MSG_RESULT(unknown)
        else
            eval $star_cv_settcldir
            AC_MSG_RESULT($_star_tcldir)
        fi
    else # $_star_use_tcl
        AC_MSG_WARN(Compiling without Tcl/Tk)
    fi # $_star_use_tcl

    if $_star_use_tcl && test "$star_cv_settcldir" != unknown; then
        :
    else
        AC_DEFINE(TCL_MISSING, 1,
                  [Define to 1 if no Tcl/Tk libraries can be found])
    fi

    AC_SUBST(TCL_VERSION)

    AC_SUBST(TCL_CFLAGS)
    AC_SUBST(TCL_LIBS)
    AC_SUBST(TCLSH)

    AC_SUBST(TK_CFLAGS)
    AC_SUBST(TK_LIBS)
    AC_SUBST(WISH)

    # add itcl variables here

])# STAR_PATH_TCLTK


# STAR_LATEX_DOCUMENTATION(documentcode, [targets])
# -------------------------------------------------
# Generate the standard makefile targets to handle LaTeX documentation
# source.  The parameter documentcode should be something like
# `sun123' -- it should not include any .tex extension.
#
# The second, optional, argument gives an explicit list of the targets
# which are build.  If this is _not_ specified, then a standard list
# is used (.tex, .ps and .tar_htx) and corresponding rules added to
# the generated makefile.  If it is specified, it must be non-null,
# and its value is a list of files which are to be added to the
# distribution, and no extra Makefile rules are added.  Thus if users need
# anything complicated done, they should use this second argument and
# provide rules for satisfying the given targets.
#
# In the latter case, the .tex -> htx_tar rule is still emitted, so
# you can use it, but it requires the substitution variable
# @STAR[]2HTML@, and so if you _do_ use it, you will have to make that
# available, either through [STAR_CHECK_PROGS(star2html)] or otherwise.
AC_DEFUN([STAR_LATEX_DOCUMENTATION],
   [m4_ifval([$1], [], [AC_FATAL([$0: called with no documentcode])])dnl
    STAR_DOCUMENTATION="$STAR_DOCUMENTATION $1"
    m4_ifval([$2],
       [dnl non-empty second argument -- just add to variable
        if $_star_build_docs; then
            STAR@&t@_LATEX_DOCUMENTATION="$2"
            : ${LATEX2DVI='$$LATEX $<; $$LATEX $<'}
            AC_SUBST(LATEX2DVI)
        else
            AC_MSG_WARN([not installing docs $1])
        fi
        ],
       [dnl second arg empty -- use defaults
        if $_star_build_docs; then
            _star_tmp=
            for d in $1
            do
                _star_tmp="$_star_tmp $d.tex $d.ps $d.htx_tar"
            done
            STAR@&t@_LATEX_DOCUMENTATION="$_star_tmp"
            : ${LATEX2DVI='$$LATEX $<; $$LATEX $<'}
            AC_SUBST(LATEX2DVI)
        else
            AC_MSG_WARN([not installing docs $1])
        fi
        STAR_DECLARE_DEPENDENCIES([sourceset], [star2html])
        STAR_CHECK_PROGS([star2html])
       ])
    AC_SUBST([STAR@&t@_LATEX_DOCUMENTATION])dnl
])# STAR_LATEX_DOCUMENTATION

# STAR_XML_DOCUMENTATION(documentcode, [targets])
# -----------------------------------------------
# Generate the standard makefile targets to handle XML documentation
# source.  The parameter documentcode should be something like
# `sun123' -- it should not include any .xml extension.
#
# The second, optional, argument gives an explicit list of the targets
# which are build.  If this is _not_ specified, then a standard list
# is used (.tex, .ps and .tar_htx) and corresponding rules added to
# the generated makefile.  If it is specified, it must be non-null,
# and its value is a list of files which are to be added to the
# distribution, and no extra Makefile rules are added.  Thus if users need
# anything complicated done, they should use this second argument and
# provide rules for satisfying the given targets.
#
# In the latter case, the .tex -> htx_tar rule is still emitted, so
# you can use it, but it requires the substitution variables JADE, SGMLNORM,
# and SGMLKIT_HOME.  This is rather inconvenient, and it is fortunate that
# you almost certainly won't need to use this.
AC_DEFUN([STAR_XML_DOCUMENTATION],
   [m4_ifval([$1], [], [AC_FATAL([$0: called with no documentcode])])dnl
    STAR_DOCUMENTATION="$STAR_DOCUMENTATION $1"
    m4_ifval([$2],
       [dnl non-empty second argument -- just add to variable
        if $_star_build_docs; then
            STAR@&t@_XML_DOCUMENTATION="$2"
        else
            AC_MSG_WARN([not installing docs $1])
        fi
        ],
       [dnl second arg empty -- use defaults
        if $_star_build_docs; then
            AC_PATH_PROGS(JADE, [openjade jade], NOJADE)
            AC_PATH_PROGS(SGMLNORM, [osgmlnorm sgmlnorm], NOSGMLNORM)
            if test "$JADE" = NOJADE -o "$SGMLNORM" = NOSGMLNORM; then
                AC_MSG_WARN([can't find (open)jade + (o)sgmlnorm -- skipping XML documentation $1])
            else
                _star_tmp=
                for d in $1
                do
                    _star_tmp="$_star_tmp $d.tex $d.ps $d.htx_tar"
                done
                STAR@&t@_XML_DOCUMENTATION="$_star_tmp"
                STAR_CHECK_PROGS([sgml2docs sgmlnorm])
                SGMLKIT_HOME=$prefix/lib/sgmlkit
                AC_SUBST(SGMLKIT_HOME)
                : ${LATEX2DVI='$$LATEX $$[]1; $$LATEX $$[]1'}
                AC_SUBST(LATEX2DVI)
            fi
        else
            AC_MSG_WARN([not installing docs $1])
        fi
        STAR_DECLARE_DEPENDENCIES([sourceset], [sgmlkit])
       ])
    AC_SUBST([STAR@&t@_XML_DOCUMENTATION])dnl
])# STAR_XML_DOCUMENTATION
            


# STAR_CHECK_PROGS(progs-to-check-for, [component=''])
# --------------------------------------------------
#
# For each of the programs in PROGS-TO-CHECK-FOR, define a variable
# whose name is the upcased version of the program name, and whose
# value is the full path to that program, or the expected installation
# location of that program if no absolute path can be found.  Because
# of this default behaviour, this macro should _only_ be used for
# locating Starlink programs such as messgen or alink, and not as a
# general replacement for AC_CHECK_PROG.  Any characters in the
# program outside of the set of alphanumerics and underscores are
# normalised to underscores.
#
# The optional second argument gives the name of the component containing
# the program in question.  Some packages install their binaries in
# package-specific directories, and this argument allows this macro to
# look there as well.
#
# For example:
#     STAR_CHECK_PROGS(messgen)
# would define the variable MESSGEN to have the full path to the
# messgen application, and 
#     STAR_CHECK_PROGS(prolat, sst)
# would define the variable PROLAT to have the path to the prolat
# application within the sst component.
#
# Calls AC_SUBST and AC_ARG_VAR on the generated variable name.  This
# macro does _not_ automatically declares a configure dependency on any
# component specified in the second argument.  These dependencies should
# be kept to an absolute minimum, and therefore any such dependencies
# must be declared obviously and explicitly, with rationale.
#
# The behaviour described below, for the result when the required program
# is not found, is not final, and may change.  The documentation below is
# contradictory, and should be regarded merely as a rather confused
# discussion of the issues.  The current behaviour is that when the progam
# is not found, the variable is defined to be the program's name without
# any path at all.
#
# This is the analogue of AC_CHECK_PROG, except that: (1) the variable
# name defaults to the program name, (2) the variable value if the
# program is not found is the path to the anticipated installation
# location of the program, so that the macro does not fail in this
# case.  This is useful for locating Starlink programs, as it means we
# can use this macro to produce absolute paths to programs, even
# before they have been installed (in this case we are presumably
# doing a top-level configure of the Starlink tree, and the Makefile
# will ensure that the required files are installed before the current
# package actually uses it.  NB: (2) is not true at present.
#
# The current value of the PATH variable is augmented by the location
# of the binary installation directory, using the current default
# value of the prefix (not ideal, since this may in principle change
# when the component being configured is installed, but it's the best
# we can do at configure time); and by the $STARLINK/bin directory.
#
# The default, if the program isn't in the augmented path, is the path
# to the starconf-finder program if that's available, and the bare
# program-name otherwise.  Is this the best default?  Would just 
# program-name be better?  The program may not be in the augmented
# path for two reasons: (1) we are doing the global configuration done
# during bootstrapping, and noting has been installed yet; or (2) the
# program is one of those installed in a subdirectory of the
# `bindir'.  In case (2), there's not a lot we can do, short of
# grubbing round manifest files at some point, but the
# starconf-finder, which is the eventual default, knows about this
# case, and could take care of it.
#
# No, I've changed my mind again.  If the program isn't found, then
# simply have the AC_PATH_PROG default to bare ProgramName.  This is
# probably adequate, and if so probably more robust than relying on
# more and more layers of indirection.  We probably will need to
# revisit this.  Again.
AC_DEFUN([STAR_CHECK_PROGS],
         [eval default_bindir=`echo $bindir | sed 's,\${exec_prefix},$ac_default_prefix,'`
          AC_FOREACH([ProgramName], [$1],
                     [m4_define([star_prog],
                                _STAR_UPCASE(m4_bpatsubst(ProgramName,
                                                          [[^0-9a-zA-Z_]], 
                                                          [_])))
                      AC_PATH_PROG(star_prog,
                                   ProgramName,
                                   ProgramName,
                                   [$default_bindir:]m4_ifval([$2],
                                                              [$default_bindir/$2:],
                                   )[$STARLINK/bin:]m4_ifval([$2],
                                                              [$STARLINK/bin/$2:],
                                   )[$PATH])
##                      if test -z "$star_prog"; then
##                          if test -x $STARLINK/bin/starconf-finder; then
##                              star_prog="$STARLINK/bin/starconf-finder ProgramName"
##                          else
##                              star_prog=ProgramName
##                          fi
##                      fi
                      AC_ARG_VAR(star_prog,
                                 [Location of the ]ProgramName[ application])])
])# STAR_CHECK_PROGS


# STAR_SPECIAL_INSTALL_COMMAND(cmd)
# ---------------------------------
# Declare a special install command.  Note that we do not examine the
# actual command here -- that is done by automake.  All we do is find
# a way of copying a directory tree, preserving symlinks, as used by
# the install targets in automake/lib/am/install.am.  Try 'cp -R'
# then pax, and if both fail, collapse.
AC_DEFUN([STAR_SPECIAL_INSTALL_COMMAND],
   [AC_REQUIRE([AC_PROG_LN_S])dnl
    AC_PATH_PROG(CP, cp)dnl
dnl    AC_PATH_PROG(PAX, pax)dnl
    AC_CACHE_CHECK([how to do a recursive directory copy],
                   [star_cv_cp_r],
                   [rm -Rf conftest*
                    mkdir conftest-d1 conftest-d2
                    mkdir conftest-d1/d
                    date >conftest-d1/d/f
                    (cd conftest-d1/d; $LN_S f l)
                    if test ! -h conftest-d1/d/l; then
                        # We don't have links!  So plain cp -R will do
                        star_cv_cp_r="$CP -R"
                    else
                        star_cv_cp_r=
                        for try in "$CP -R -P -p" "$CP -R -p" "${PAX-false} -r -w -p e"
                        do
                            rm -Rf conftest-d2/*
                            if (cd conftest-d1; $try . ../conftest-d2 2>/dev/null); then
                                if test -h conftest-d2/d/l; then
                                    star_cv_cp_r="$try"
                                    break
                                fi
                            fi
                        done
                    fi
                    rm -Rf conftest*])
    if test -z "$star_cv_cp_r"; then
        AC_MSG_ERROR([unable to find working cp or pax])
    fi
    AC_SUBST(CP_RECURSIVE, $star_cv_cp_r)dnl
])# STAR_SPECIAL_INSTALL_COMMAND
    

# STAR_MONOLITHS
# --------------
# Declare that we will be creating monoliths.  This does whatever
# configuration is necessary to handle these.
#
# Note that the declarations done in the Makefile.am, declaring the
# name of the monolith and the names and source files of the tasks,
# are slightly redundant inasmuch as some of that information could be
# implied.  However, this is required to be explicit for clarity and
# consistency, and so accomodate the (currently unexploited)
# possibility that the tasks and .ifl files longer have the
# one-task-per-file relationship they have now.
AC_DEFUN([STAR_MONOLITHS],
         [$_star_docs_only &&
             AC_MSG_ERROR([STAR[]_MONOLITHS in docs-only directory])
          dnl Installation in monoliths.am uses $(LN_S)
          AC_REQUIRE([AC_PROG_LN_S])dnl

          # To build monoliths, we need both compifl to build the .ifc
          # files (in the parsecon component), and alink
          # to link the monoliths (in dtask).
          STAR_DECLARE_DEPENDENCIES(build, [parsecon dtask])

          # So try to find alink and compifl.
          STAR_CHECK_PROGS([compifl alink])

          # When we're building monoliths, we will almost certainly be
          # using Fortran, and so we might as well include this,
          # partly in case the user forgets, but also because this is
          # reasonably part of the default setup required for monoliths.
          STAR_CNF_COMPATIBLE_SYMBOLS
])# STAR_MONOLITHS


# STAR_HELP_FILES(helpfiles)
# --------------------------
# Declare a list of files to be installed into the Starlink help
# directory.  This can be used both internally and in user
# configure.ac files.
AC_DEFUN([STAR_HELP_FILES],
	 [_STAR_EXTRADIR_COMMON([help], [$1])])


# STAR_ETC_FILES(etcfiles)
# ------------------------
# Declare a list of files to be installed into the Starlink etc
# directory.  This can be used both internally and in user
# configure.ac files.
AC_DEFUN([STAR_ETC_FILES],
         [_STAR_EXTRADIR_COMMON([etc], [$1])])


# STAR_DOCS_FILES(docfiles)
# -------------------------
# Declare a list of files to be installed into the Starlink
# documentation directory.  This can be used both internally and in
# user configure.ac files.
AC_DEFUN([STAR_DOCS_FILES],
         [_STAR_EXTRADIR_COMMON([docs], [$1])])


# STAR_EXAMPLES_FILES(examplesfiles)
# ----------------------------------
# Declare a list of files to be installed into the Starlink
# examples directory.  This can be used both internally and in
# user configure.ac files.
AC_DEFUN([STAR_EXAMPLES_FILES],
         [_STAR_EXTRADIR_COMMON([examples], [$1])])


# STAR_DECLARE_DEPENDENCIES(type, deplist, option='')
# ---------------------------------------------------
#
# Declare dependencies of this component.  The TYPE is one of
# `sourceset', `build', `link', `use', `test' or `configure', and the
# DEPLIST is a space separated list of component names, which this
# component depends on in the given way.
#
# -- Sourceset dependencies are those components which must be
# installed in order to build the complete set of sources, either for
# building or for distribution.  This includes documentation, so it
# would include star2html as well as messgen.
#
# -- Build dependencies are those which are required in order to build
# this component.  This typically means include files, but if part of
# the component is an executable file (such as compifl within the
# parsecon component), then that's a build dependence also (but see
# the discussion of `option', below).  You may not have two components
# which have a build dependency on each other, since that would mean
# that each would have to be built before the other, which is
# impossible.
#
# -- Link dependencies are those required to link against the
# libraries in a component.  That means all the libraries that this
# component's libraries use.  These are not necessarily build
# dependencies, since if you are building a library, any called
# libraries don't have to be present in order to build this library;
# you can have two components which have mutual link dependencies.  If
# you are building an application, however, then all its link
# dependencies will actually be build dependencies and should be
# declared as such.  In other words, the distinction between build and
# link dependencies is important only for library components.
#
# -- Use dependencies are those which are required in order for the
# component to be used by something else, after it has been built and
# installed.  For example a library which called another application
# as part of its functionality would have only a use dependency on the
# component which contained that application.  If no use dependencies
# are declared, we take the use dependencies to be the same as the
# link dependencies.
#
# -- Test dependencies are those which are required in order to run
# any regression tests which come with the component.  It's generally
# a good idea to avoid making this a larger set than the use
# dependencies, but sometimes this is unavoidable.  If no test
# dependencies are declared, we take the test dependencies to be the
# same as the use dependencies.
#
# -- Configure dependencies are those which must be satisfied before
# this component can be successfully configured.
#
# The point of this is that different dependencies are required at
# different times.  The set of dependencies in the master makefile is
# composed of all the `sourceset' and `build' dependencies, but not
# `link' or `use' dependencies, and since the core Starlink libraries
# are closely interdependent, the set of `build' dependencies needs to
# be kept as small as possible in order to avoid circularities (that
# is, A depending on B, which depends, possibly indirectly, on A).
#
# All these relationships are transitive: if A has a build dependency
# on B, and B has one on C, then A has a build dependency on C.  You
# can augment this by using the final `option' argument: if, in
# component A's declaration element you say
# STAR_DECLARE_DEPENDENCIES(build, B, link), then you declare that A
# has a build-time dependency on B, but that (presumably because you
# are building an application within a component which is mostly
# libraries) you need to link against B, so component A has a
# dependency on all of B's _link_ dependencies, not just its build
# dependencies.  This is (I believe) the only case where this `option'
# attribute is useful, though it is legal for each of the dependency types.
#
# You need only declare direct dependencies.  If package A depends on
# package B, which depends in turn on package C, then package A need
# not declare a dependency on C.
#
# The macro may be called more than once.  The results of this macro
# are expressed in the file component.xml in the component directory.
AC_DEFUN([STAR_DECLARE_DEPENDENCIES],
         [m4_ifval([$1], [], [AC_FATAL([$0: no type given])])dnl
          m4_if(m4_bregexp([$1], 
                           [^\(sourceset\|build\|link\|use\|test\|configure\)$]),
                [0],
                [],
                [AC_FATAL([$0: unrecognised dependency type: $1])])dnl
          m4_ifval([$2], [], [AC_FATAL([$0: no deplist given])])dnl
          for _star_tmp in $2
          do
              STAR_DEPENDENCIES_CHILDREN="$STAR_DEPENDENCIES_CHILDREN<[$1]m4_ifval([$3], [ option='$3'], [])>$_star_tmp</$1>"
          done
])# STAR_DECLARE_DEPENDENCIES


# STAR_PLATFORM_SOURCES(target-file-list, platform-list)
# ------------------------------------------------------
#
# Generate the given target-file for each of the files in the list
# TARGET-FILE-LIST, by selecting the appropriate element of the
# PLATFORM-LIST based on the value of [AC_CANONICAL_BUILD].  Both
# lists are space-separated lists.
#
# For each of the platforms, <p>, in platform-list, there should be a
# file `<target-file><p>'.  There should always be a file
# `<target-file>default', and if none of the platform-list strings
# matches, this is the file which is used.  If the `default' file is
# listed in the `platform-list', then it is matched in the normal run
# of things; if it is not listed, it still matches, but a warning is
# issued.
#
# If you wish no match _not_ to be an error -- perhaps because there
# is a platform-dependent file which is redundant on unlisted platforms
# -- then end the platform-list with `NONE'.  In this case, if no file
# matches, then no link is made, with no error or warning.
#
# This macro uses the results of ./config.guess to determine the
# current platform.  That returns a triple consisting of
# cpu-vendor-os, such as `i686-pc-linux-gnu' (OS=linux-gnu),
# `sparc-sun-solaris2.9', or `alphaev6-dec-osf5.1'
#
# The extensions <p> in platform-list should all have the form
# `cpu_vendor[_os]', where each of the components `cpu', `vendor' and
# `os' may be blank.  If not blank, they are matched as a prefix of
# the corresponding part of the config.guess value.  Thus
# `_sun_solaris' would match `sparc-sun-solaris2.9' but not
# `sparc-sun-sunos', and `_sun' would match both.  For a <target-file>
# file foo.c, this would result in `ln -s foo.c_sun foo.c'
#
# Calls AC_LIBSOURCE for each of the implied platform-specific files.
#
AC_DEFUN([STAR_PLATFORM_SOURCES],
         [
$_star_docs_only && AC_MSG_ERROR([STAR_[]PLATFORM_SOURCES in docs-only dir])
AC_REQUIRE([AC_CANONICAL_BUILD])dnl
AC_REQUIRE([AC_PROG_LN_S])dnl
m4_ifval([$1], [], [AC_FATAL([$0: no target-file-list given])])dnl
m4_ifval([$2], [], [AC_FATAL([$0: no platform-list given])])dnl
AC_FOREACH([TargetFile], [$1],
  [AC_FOREACH([Ext], [$2], 
    [m4_if(Ext, [NONE], , [AC_LIBSOURCE(TargetFile[]Ext)])])])dnl
AC_MSG_CHECKING([platform-specific source for file(s) $1])
_star_tmp=
for platform in $2
do
    if test $platform = NONE; then
        # Special case -- no file required
        _star_tmp=NONE
        break;
    fi
    if test $platform = default; then
        _star_tmp=default
        break;
    fi
    if expr $build : `echo $platform | sed 's/_/.*-/g'` >/dev/null; then
        _star_tmp=$platform
        break;
    fi
done
if test -z "$_star_tmp"; then
    # Use default, but it wasn't listed in the platform-list
    # (though it should have been)
    AC_MSG_WARN([build platform $build does not match any of ($2): using `default'])
    _star_tmp=default
fi    
if test $_star_tmp = NONE; then
    AC_MSG_RESULT([none required])
else
    AC_MSG_RESULT([using $_star_tmp])
    for _t in $1
    do
        if test -f $srcdir/$_t$_star_tmp; then
            (cd $srcdir; rm -f $_t; $LN_S $_t$_star_tmp $_t)
        else
            AC_MSG_ERROR([platform $_star_tmp matched, but no file $_t$_star_tmp found])
        fi
    done
fi
])# STAR_PLATFORM_SOURCES



# starconf internal macros


# _STAR_UPCASE(string)
# --------------------
# Expands to STRING with all letters translated to uppercase.
AC_DEFUN([_STAR_UPCASE],
         [m4_translit([$1], [a-z], [A-Z])])


# _STAR_EXTRADIR_COMMON(dir-type, file-list)
# ------------------------------------------
#
# Common handler for STAR_HELP_FILES, etc.  DIR-TYPE is one of
#
#    help, etc, docs, examples
#
# and `FILE-LIST' is a list of files to be installed in
# the directory STAR_[DIR-TYPE]_DIR.  This works by defining and
# AC_SUBSTing the variables `starX_DATA for X=dir-type (eg, `stardocs_DATA').
#
# This is now obsolete -- components should use star<dir-type>_DATA in
# the Makefile.am file instead.  Don't use AC_[]DIAGNOSE([obsolete],...),
# since those warnings aren't turned on by default.
AC_DEFUN([_STAR_EXTRADIR_COMMON],
   [AC_FATAL([Macro STAR_]_STAR_UPCASE($1)[_FILES($2) is obsolete -- use star$1_DATA in Makefile.am instead])
    AC_FATAL([For STAR@&t@_LATEX_DOCUMENTATION, use stardocs_DATA=@STAR@&t@_LATEX_DOCUMENTATION@ instead])]
)# _STAR_EXTRADIR_COMMON


# _STAR_RESTFP_FIX
# ----------------
# Determines if we need to make any library fixes to get things to link 
# properly.  In fact, there's only a problem on OSX/Darwin, since the
# GCC installation which provides g77 and the (system) GCC which provides
# gcc can generate slightly incompatible object code.  The following test
# is therefore pretty specific to OSX/Darwin.
#
# If there are any libraries that need to be added to the path, this adds
# them to LIBS.  Compare AC_FC_LIBRARY_LDFLAGS.
#
# See the thread: http://lists.apple.com/mhonarc/fortran-dev/msg00768.html
AC_DEFUN([_STAR_RESTFP_FIX],
   [AC_CACHE_CHECK([whether we need any library fixups],
       [star_cv_restfp_fixup],
       [AC_REQUIRE([AC_CANONICAL_BUILD])
        AC_REQUIRE([AC_PROG_CC])
        AC_REQUIRE([AC_PROG_FC])
        if expr $build_os : 'darwin7' >/dev/null; then
dnl Only affects OSX/Darwin
            # Following uses undocumented (but probably fairly stable)
            # autoconf internal variable.
            if test "$ac_cv_fc_compiler_gnu" = yes; then
dnl The problem only affects g77/gcc, so we know we're dealing with these below
                AC_LANG_PUSH(C)
                rm -f conftest*
                star_cv_restfp_fixup=unknown
                AC_LANG_CONFTEST(AC_LANG_PROGRAM([], restFP()))
                { AC_TRY_COMMAND($CC -o conftest.x -S conftest.c)
                  test $ac_status = 0
                } &&
                sed 's/_restFP/restFP/g' conftest.x>conftest.s &&
                { AC_TRY_COMMAND($CC -c -o conftest.$ac_objext conftest.s)
                  test $ac_status = 0
                } || star_cv_restfp_fixup=broken
                AC_LANG_POP(C)
                if test $star_cv_restfp_fixup = broken; then
                    AC_MSG_WARN([unable to assemble restFP test])
                else
                    # Link this with the C compiler
                    AC_TRY_COMMAND($CC -o conftest conftest.$ac_objext)
                    _s_cstatus=$ac_status
                    # Link this with the Fortran compiler
                    AC_TRY_COMMAND($FC -o conftest conftest.$ac_objext)
                    if test $_s_cstatus = 0 -a $ac_status = 0; then
                        # both compilers can compile it
                        star_cv_restfp_fixup=no
                    elif test $_s_cstatus != 0 -a $ac_status != 0; then
                        # neither compiler can compile it
                        star_cv_restfp_fixup=no
                    elif test $_s_cstatus = 0; then
                        # The C compiler can, but the Fortran cannot
                        star_cv_restfp_fixup=yes
                    else
                        # The C compiler can't compile, but the Fortran can.
                        # Haven't heard of this case!  Don't know what to do.
                        star_cv_restfp_fixup=broken
                    fi
                fi
                # Don't even try linking with -lcc_dynamic.  It may work, but
                # will be unpredictable: 
                # http://lists.apple.com/mhonarc/fortran-dev/msg00769.html
                if test $star_cv_restfp_fixup = yes; then
                    AC_TRY_COMMAND($FC -o conftest conftest.$ac_objext -L/usr/lib -lgcc)
                    if test $ac_status = 0; then
                        star_cv_restfp_fixup=lgcc
                    fi
                fi
                if test $star_cv_restfp_fixup = yes; then
                    # ooops
                    AC_MSG_WARN([unable to solve restFP problem])
                    star_cv_restfp_fixup=broken
                fi
                rm -f conftest*
            elif test -z "$FC"; then
                # not g77, and indeed no Fortran at all
                star_cv_restfp_fixup=nofortran
            else
                # There is a Fortran, but it's not g77, so either there's no
                # problem, or it's a mixed-compiler problem that's harder
                # than we know how to deal with.  But presumably the user
                # has worked this out.
                star_cv_restfp_fixup=no
            fi
        else # !Darwin
            star_cv_restfp_fixup=no
        fi
        ])
   case $star_cv_restfp_fixup in
     lgcc)
       # Add the required libraries to LIBS, so that the fixup happens
       # invisibly, rather than requiring extra substitution tokens in
       # the sources.  AC_FC_LIBRARY_LDFLAGS (which defines FCLIBS) does
       # things differently, because there the user knows they want these
       # extra libraries.
       LIBS="$LIBS -L/usr/lib -lgcc"
       ;;
     nofortran)
       AC_MSG_NOTICE([No Fortran in path, so presumably no g77/gcc library problems])
       ;;
     *) ;;
   esac
])# _STAR_RESTFP_FIX

# Obsolete macros
# ===============

# STAR_HAVE_FC_OPEN_READONLY
# ---------------------------
#
# Tests if the Fortran compiler supports the READONLY option on the
# OPEN command.  If it does, it defines HAVE_FC_OPEN_READONLY to 1.
AC_DEFUN([STAR_HAVE_FC_OPEN_READONLY],
   [AC_FATAL([Macro STAR_HAVE_FC_OPEN_READONLY is obsolete; use AC_FC_OPEN_SPECIFIERS(readonly) instead])])


# STAR_FC_LIBRARY_LDFLAGS
# -----------------------
#
# This was once a wrapper for AC_[]FC_LIBRARY_LDFLAGS which added
# functionality.  That functionality is now incorporated into STAR_[]DEFAULTS,
# using the helper macro _STAR_[]RESTFP_FIXUP.  Configure.ac files should use
# use AC_[]FC_LIBRARY_LDFLAGS instead.
AC_DEFUN([STAR_FC_LIBRARY_LDFLAGS],
   [AC_FATAL([Macro STAR_FC_LIBRARY_LDFLAGS is obsolete: if necessary, use standard AC_FC_LIBRARY_LDFLAGS instead])])


# end of starconf macros
