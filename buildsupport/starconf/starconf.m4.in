# Starlink M4 macros for autoconf
# This file is part of starconf version @PACKAGE_VERSION@
# DO NOT EDIT: it may be overwritten when starconf is next run



# STAR_DEFAULTS
# -------------
# Defaults for Starlink configure.ac files
AC_DEFUN([STAR_DEFAULTS],
[#
# Ensure that STARLINK has a value, defaulting to
# !!STARCONF_DEFAULT_STARLINK!!.  Note that this directory may be
# different from /star, and reflects the value of
# STARCONF_DEFAULT_STARLINK that the `starconf' package was configured
# with before its installation. 
#
# We use $STARLINK as the location of any other Starlink tools we need
# to use during the building of our packages, and for the location of
# any manifests we need to check.  It is permissable for it to be
# different from $(prefix): this is partly because we have no way of
# enforcing that the two be the same, since the user can set
# prefix=xxx on the `make install' command line, and partly so that it
# is possible to make a test version of a new package, using tools
# from an old installation, but installing in a new place.
#
# However, we install software in !!STARCONF_DEFAULT_PREFIX!! by
# default.  This is so even if $STARLINK and STARCONF_DEFAULT_STARLINK
# are different, because in this case we are planning to use a
# previous installation in $STARLINK or $STARCONF_DEFAULT_STARLINK,
# but install the newly built tool elsewhere. 
#
# In most cases, including the most important case where we are
# building the tree from scratch, in a checked out directory,
# STARLINK, STARCONF_DEFAULT_STARLINK and STARCONF_DEFAULT_PREFIX will
# all be the same.  That's OK because a separate aspect of the build
# process, respecting the various dependencies expresses in source
# directories, ensures that we don't use (and install) any Starlink
# tools in one component before that component has been build and
# installed. 

test -n "$STARLINK" || STARLINK=!!STARCONF_DEFAULT_STARLINK!!
AC_PREFIX_DEFAULT(!!STARCONF_DEFAULT_PREFIX!!)dnl

# Everything depends on where /star is.  Declare STARLINK as a
# `precious variable'.  Amongst other things, this will make
# ./configure squeal if the package is re-configured with an
# inconsistent value of this variable.
AC_ARG_VAR(STARLINK, [Where all the Starlink software lives])dnl

# AC_SUBST the STARLINK variable.  Macro AC_ARG_VAR does this anyway,
# but automake doesn't know that (in 1.6 at least): however any
# variable that automake finds has been AC_SUBSTed, it includes in
# Makefile.in, and we need that.
AC_SUBST(STARLINK)

# Use the above information: $STARLINK indicates a preexisting
# Starlink tree.
FFLAGS="$FFLAGS -I$STARLINK/include"
CFLAGS="$CFLAGS -I$STARLINK/include"
LDFLAGS="$LDFLAGS -L$STARLINK/lib"
# Note that the following imply that we are expecting to find
# pre-installed versions of includes and libraries in the same
# locations we plan to install new ones.  That is, I think, what we
# expect.
#FFLAGS="$FFLAGS -I$STARLINK/include${includedir}"
#CFLAGS="$CFLAGS -I${includedir}"
#LDFLAGS="$LDFLAGS -L${libdir}"

# Dependency declarations and checks (see macros
# [STAR_DECLARE_BUILD_DEPENDENCIES] and [STAR_DECLARE_USE_DEPENDENCIES])
# Everything is dependent on starconf, so we don't have to declare that 
# for each package separately.
STAR_BUILD_DEPENDENCIES=''
AC_SUBST(STAR_BUILD_DEPENDENCIES)dnl
STAR_USE_DEPENDENCIES=''
AC_SUBST(STAR_USE_DEPENDENCIES)dnl

# List of message files.  Used to signal to automake
STAR_MESSGEN_SOURCES=
AC_SUBST(STAR_MESSGEN_SOURCES)

# List of documentation.  See [STAR_LATEX_DOCUMENTATION].
# STAR_DOCUMENTATION is a list of document codes,
STAR_DOCUMENTATION=
AC_SUBST([STAR_DOCUMENTATION])

# Extra files to be distributed.  This is for files added to the
# distribution list by starconf; files which the user wishes to add
# should be specified in the usual way, through the automake
# EXTRA_DIST variable.
STAR_EXTRA_DIST=
AC_SUBST(STAR_EXTRA_DIST)

# Create a PACKAGE_VERSIONINT variable, which contains the
# package's version number as an integer major*1e6+minor*1e3+release.
## NB hairy quoting: quadrigraph @S|@ is replaced by $ after m4 has run.
PACKAGE_VERSIONINT=[`echo $PACKAGE_VERSION | sed 's/[^0-9][^0-9]*/ /g' | awk '{print @S|@1*1000000+@S|@2*1000+(NF>2 ? @S|@3 : 0)}'`]
AC_SUBST(PACKAGE_VERSIONINT)

# When we do dependency checking, using the dependencies declared in
# the package's configure.ac, we do so by looking at what tools have
# already been installed in the Starlink tree.  The tree in question
# is to be found under $STARLINK (see above), so we check that a
# package is installed by checking that its manifest can be found in
# $STARLINK/manifests.  We don't AC_SUBST this.
current_MANIFESTS=$STARLINK/manifests

# When we install manifests, however, they should go in the
# installation directory.
STAR_MANIFEST_DIR='$(prefix)/manifests'
AC_SUBST(STAR_MANIFEST_DIR)

# Although PACKAGE_VERSION is a default output variable, it isn't
# added as a Makefile variable by default.  We need it below, however,
# so add it now.
AC_SUBST(PACKAGE_VERSION)
])# STAR_DEFAULTS



# STAR_MESSGEN(msgfile-list)
# ----------------------------------------
#
# Handle generating message, error, and facility files.
#
# The argument is a space-separated list of files, each of which has a
# set of message declarations in it, in the format prescribed by the
# messgen utility.  There is no default, though the usual name for
# this file is ${PACKAGE}_err.msg.  The macro may be called more than
# once if you have more than one .msg file in the directory.
#
# This adds Makefile rules to create the appropriate _err, _ERR,
# _err.h and fac_nnn_err files, and handles installing the latter file
# to the help directory, and including it in the distribution.
#
# The files which this generates should be declared as sources in
# the Makefile.am if they are to be used in code, or are to be
# installed.  If they are used in building the package, you will
# probably need to declare them additionally as `BUILT_SOURCES'.  The
# package also implicitly declares a build-time dependency on the
# messgen package.
#
## Note that, apart from declaring the dependency on messgen, this is
## a configure-time no-op.  All the configuration work is done within
## (the Starlink additions to) automake, and a complete set of make
## rules is emitted into Makefile.in.
## NOAC_DEFUN([STAR_MESSGEN],
##         [STAR_DECLARE_BUILD_DEPENDENCIES(messgen)])dnl


AC_DEFUN([STAR_MESSGEN],
         [#
          m4_ifval([$1], [], [AC_FATAL([$0: called with no message file])])dnl
          for infile in $1
          do
              expr "x$infile" : 'x.*\.msg$' >/dev/null || \
                { echo "ERROR: facility file $infile does not end in .msg";
                  exit 1; }
              if test -r $infile; then
                  : OK
              else
                  echo "Facility file $infile missing or not readable"
                  exit 1
              fi
              # Extract the facility name and code from the .msg file
              # Format is `.FACILITY name,code/PREFIX=xxx'
              AC_MSG_CHECKING([facility and code in $infile])
              eval [`sed -n '/\.FACILITY/{s/.*\.FACILITY[ 	]*\([a-zA-Z]*\) *, *\([0-9]*\).*/_s_facname=\1; _s_faccode=\2;/p;q;}' $infile`]
              _s_facname=[`echo $_s_facname | tr '[A-Z]' '[a-z]'`]
              AC_MSG_RESULT([$_s_facname/$_s_faccode])
              STAR_HELP_FILES(fac_${_s_faccode}_err)
              _STAR_EXTRA_DIST(fac_${_s_faccode}_err)
          done
          STAR_DECLARE_BUILD_DEPENDENCIES(messgen)
])# STAR_MESSGEN


## NOAC_DEFUN([STAR_MESSGEN],
##          [#
##           _s_facfile="m4_ifval([$1], [$1], [${PACKAGE}_err.msg])"
##           AC_SUBST(MESSGEN_DEPENDENCIES)
##           for infile in $_s_facfile
##           do
##               expr "x$infile" : 'x.*\.msg$' >/dev/null || \
##                 { echo "ERROR: facility file $infile does not end in .msg";
##                   exit 1; }
##               if test -r $infile; then
##                   : OK
##               else
##                   echo "Facility file $infile missing or not readable"
##                   exit 1
##               fi
##               # Extract the facility name and code from the .msg file
##               # Format is `.FACILITY name,code/PREFIX=xxx'
##               AC_MSG_CHECKING([facility and code in $infile])
##               eval [`sed -n '/\.FACILITY/{s/.*\.FACILITY[ 	]*\([a-zA-Z]*\) *, *\([0-9]*\).*/_s_facname=\1; _s_faccode=\2;/p;q;}' $infile`]
##               _s_facname=[`echo $_s_facname | tr '[A-Z]' '[a-z]'`]
##               _s_FACNAME=[`echo $_s_facname | tr '[a-z]' '[A-Z]'`]
##               AC_MSG_RESULT([$_s_facname/$_s_faccode])
##               # Note quoting below: doubly escaped newline
##               MESSGEN_DEPENDENCIES="${MESSGEN_DEPENDENCIES}${_s_FACNAME}_ERR ${_s_facname}_err ${_s_facname}_err.h fac_${_s_faccode}_err: ${infile}_stamp\\
## "
##               STAR_HELP_FILES(fac_${_s_faccode}_err)
##               _STAR_EXTRA_DIST(fac_${_s_faccode}_err)
##           done
##           STAR_DECLARE_BUILD_DEPENDENCIES(messgen)
## ])# STAR_MESSGEN



# STAR_HAVE_F77_OPEN_READONLY
# ---------------------------
#
# Tests if the Fortran compiler supports the READONLY option on the
# OPEN command.
AC_DEFUN([STAR_HAVE_F77_OPEN_READONLY],
         [AC_REQUIRE([AC_PROG_F77])dnl
          AC_CACHE_CHECK([whether OPEN has the READONLY specifier],
                         [star_cv_have_f77_open_readonly],
                         [AC_LANG_PUSH([Fortran 77])dnl
                          AC_COMPILE_IFELSE(AC_LANG_PROGRAM([],
                                              [      OPEN(UNIT=99,READONLY)]),
                                            [star_cv_have_f77_open_readonly=yes],
                                            [star_cv_have_f77_open_readonly=no])
                          AC_LANG_POP(Fortran 77)])
          if test $star_cv_have_f77_open_readonly = yes; then
              AC_DEFINE([HAVE_F77_OPEN_READONLY], 1,
                        [Define to 1 if F77 OPEN has the READONLY specifier])
          fi
])


## # STAR_F77_C_SYMBOLS
## # ------------------
## NOTAC_DEFUN([STAR_F77_C_SYMBOLS],
## 	 [AC_REQUIRE([AC_PROG_F77])dnl
##           AC_REQUIRE([AC_PROG_CC])dnl
## AC_MSG_CHECKING([how to make Fortran produce C-compatible symbols])
## AC_LANG_PUSH([C])
## AC_LANG_CONFTEST(
##   [AC_LANG_SOURCE([void testfunc() {}])])
## if (eval $ac_compile) 2>&5; then
##   mv conftest.$ac_objext c-conftest.$ac_objext
## else
##   AC_MSG_ERROR([cannot compile a C program!])
## fi
## AC_LANG_POP([C])
## AC_LANG_PUSH([Fortran 77])
## AC_LANG_CONFTEST(
##   [AC_LANG_PROGRAM([], [      CALL testfunc])])
## star_f77_c_symbols=X
## for opt in "" "-fno-second-underscore"
## do
##   echo "Trying opt=$opt"
##   if $F77 $opt -o conftest conftest.f c-conftest.$ac_objext 2>&5; then
##     star_f77_c_symbols=$opt
##     break
##   else
##     echo "opt=$opt didn't work"
##   fi
## done
## if test "$star_f77_c_symbols" = X; then
##         for x in conftest*; do cp $x saved-$x;done
##   AC_MSG_ERROR([cannot work out how])
## else
##   AC_MSG_RESULT([option <$star_f77_c_symbols>])
## fi
## AC_LANG_POP([Fortran 77])
## ])# STAR_F77_C_SYMBOLS


# STAR_LATEX_DOCUMENTATION(documentcode, [targets])
# -------------------------------------------------
# Generate the standard makefile targets to handle LaTeX documentation
# source.  The parameter documentcode should be something like
# `sun123' -- it should not include any .tex extension.
#
# The second, optional, argument gives an explicit list of the targets
# which are build.  If this is _not_ specified, then a standard list
# is used (.tex, .ps and .tar_htx) and corresponding rules added to
# the generated makefile.  If it is specified (to any value, including
# ''), then its value is a list of files which are to be added to the
# distribution, and no extra Makefile rules are added.  Thus if users need
# anything complicated done, they should use this second argument and
# provide rules for satisfying the given targets.
AC_DEFUN([STAR_LATEX_DOCUMENTATION],
         [m4_ifval([$1], [], [AC_FATAL([$0: called with no documentcode])])dnl
          STAR_DOCUMENTATION="$STAR_DOCUMENTATION $1"
          m4_ifval([$2],
                   [dnl non-empty second argument -- just add to variable
                    _STAR_EXTRA_DIST($2)
                    STAR_DOC_FILES($2)],
                   [dnl second arg empty -- use defaults
                    for d in $1
                    do
                        docno=[`basename $d .tex`]
                        _STAR_EXTRA_DIST(${docno}.tex ${docno}.ps ${docno}.htx_tar)
                        STAR_DOC_FILES(${docno}.tex ${docno}.ps ${docno}.htx_tar)
                    done
                    dnl STAR_DECLARE_BUILD_DEPENDENCIES(star2html)
                   ])dnl
])# STAR_LATEX_DOCUMENTATION



# STAR_HELP_FILES(helpfiles)
# --------------------------
# Declare a list of files to be installed into the Starlink help
# directory.  This can be used both internally and in user
# configure.ac files.
AC_DEFUN([STAR_HELP_FILES],
	 [_STAR_EXTRADIR_COMMON([help], [$1])])


# STAR_ETC_FILES(etcfiles)
# ------------------------
# Declare a list of files to be installed into the Starlink etc
# directory.  This can be used both internally and in user
# configure.ac files.
AC_DEFUN([STAR_ETC_FILES],
         [_STAR_EXTRADIR_COMMON([etc], [$1])])


# STAR_DOC_FILES(docfiles)
# ------------------------
# Declare a list of files to be installed into the Starlink
# documentation directory.  This can be used both internally and in
# user configure.ac files.
AC_DEFUN([STAR_DOC_FILES],
         [_STAR_EXTRADIR_COMMON([docs], [$1])])


# STAR_DECLARE_BUILD_DEPENDENCIES(packagelist)
# --------------------------------------------
#
# Declare a space-separated list of packages/components which the
# build of this package depends on.  The packages here are tested to
# ensure thay do exist, and the list is available for substitution in
# the AC_SUBST-ed variable [@STAR_BUILD_DEPENDENCIES@]. 
#
# For libraries, this refers to packages which provide include files
# which must be present for this package to compile, or libraries
# which are linked in to the current package in some way.  It should
# not include libraries which this library calls.  Thus a Fortran
# library might require the `sae' package in order to read the SAE_PAR
# include file, but it will not typically require the `ems' package to
# be installed, if it only refers to EMS_* routines from its own
# code.  In this case, `sae' is a build dependency, but `ems' is a use
# dependency.
#
# In contrast, an analogous C library would generally require the
# `ems' package to be installed before the library can be built, since
# it needs to include the header
# files which would be installed with the library.  An application
# needs to link in all the libraries it calls, so they all have to be
# installed before the application will build, and so they are build
# dependencies.
#
# You need only declare direct dependencies.  If package A depends on
# package B, which depends in turn on package C, then package A need
# not declare a dependency on C.
#
# In fact it doesn't really matter all that much, since the worst that
# happens if you declare a use dependency as a build dependency is
# that the package gets built later in the sequence than is absolutely
# necessary.
#
# The macro may be called several times.
AC_DEFUN([STAR_DECLARE_BUILD_DEPENDENCIES],
         [#
          m4_ifval([$1], [],
                         [AC_FATAL([$0: called with empty packagelist])])dnl
          STAR_BUILD_DEPENDENCIES="$STAR_BUILD_DEPENDENCIES $1"
          for p in $1
          do
              test -e $current_MANIFESTS/$p || \
                  echo "Package $PACKAGE depends on $p, but that doesn't appear to be installed"
          done
])# STAR_DECLARE_BUILD_DEPENDENCIES



# STAR_DECLARE_USE_DEPENDENCIES(packagelist)
# ------------------------------------------
#
# Declare a space-separated list of packages/components which the use
# of this package depends on.  The packages here are tested to ensure
# thay do exist (XXX not yet), and the list is available for
# substitution in the [AC_SUBST]-ed variable [@STAR_USE_DEPENDENCIES@].
#
# The macro may be called several times.
AC_DEFUN([STAR_DECLARE_USE_DEPENDENCIES],
         [#
          m4_ifval([$1], [],
                         [AC_FATAL([$0: called with empty packagelist])])dnl
         STAR_USE_DEPENDENCIES="$STAR_USE_DEPENDENCIES $1"
])# STAR_DECLARE_USE_DEPENDENCIES



# STAR_PLATFORM_SOURCES(target-file-list, platform-list)
# ------------------------------------------------------
#
# Generate the given target-file for each of the files in the list
# TARGET-FILE-LIST, by selecting the appropriate element of the
# PLATFORM-LIST based on the value of [AC_CANONICAL_BUILD].  Both
# lists are space-separated lists.
#
# For each of the platforms, <p>, in platform-list, there should be a
# file `<target-file><p>'.  There should always be a file
# `<target-file>default', and if none of the platform-list strings
# matches, this is the file which is used.  If the `default' file is
# listed in the `platform-list', then it is matched in the normal run
# of things; if it is not listed, it still matches, but a warning is
# issued.
#
# If you wish no match _not_ to be an error -- perhaps because there
# is a platform-dependent file which is redundant on unlisted platforms
# -- then end the platform-list with `NONE'.  In this case, if no file
# matches, then no link is made, with no error or warning.
#
# This macro uses the results of ./config.guess to determine the
# current platform.  That returns a triple consisting of
# cpu-vendor-os, such as `i686-pc-linux-gnu' (OS=linux-gnu),
# `sparc-sun-solaris2.9', or `alphaev6-dec-osf5.1'
#
# The extensions <p> in platform-list should all have the form
# `cpu_vendor[_os]', where each of the components `cpu', `vendor' and
# `os' may be blank.  If not blank, they are matched as a prefix of
# the corresponding part of the config.guess value.  Thus
# `_sun_solaris' would match `sparc-sun-solaris2.9' but not
# `sparc-sun-sunos', and `_sun' would match both.  For a <target-file>
# file foo.c, this would result in `ln -s foo.c_sun foo.c'
#
# Calls AC_LIBSOURCE for each of the implied platform-specific files.
#
AC_DEFUN([STAR_PLATFORM_SOURCES],
         [
AC_REQUIRE([AC_CANONICAL_BUILD])dnl
AC_REQUIRE([AC_PROG_LN_S])dnl
m4_ifval([$1], [], [AC_FATAL([$0: no target-file-list given])])dnl
m4_ifval([$2], [], [AC_FATAL([$0: no platform-list given])])dnl
AC_FOREACH([TargetFile], [$1],
  [AC_FOREACH([Ext], [$2], 
    [m4_if(Ext, [NONE], , [AC_LIBSOURCE(TargetFile[]Ext)])])])dnl
AC_MSG_CHECKING([platform-specific source for file(s) $1])
_star_tmp=
for platform in $2
do
    if test $platform = NONE; then
        # Special case -- no file required
        _star_tmp=NONE
        break;
    fi
    if test $platform = default; then
        _star_tmp=default
        break;
    fi
    if expr $build : `echo $platform | sed 's/_/.*-/g'` >/dev/null; then
        _star_tmp=$platform
        break;
    fi
done
if test -z "$_star_tmp"; then
    # Use default, but it wasn't listed in the platform-list
    # (though it should have been)
    AC_MSG_WARN([build platform $build does not match any of ($2): using `default'])
    _star_tmp=default
fi    
if test $_star_tmp = NONE; then
    AC_MSG_RESULT([none required])
else
    AC_MSG_RESULT([using $_star_tmp])
    for _t in $1
    do
        if test -e $srcdir/$_t$_star_tmp; then
            (cd $srcdir; rm -f $_t; $LN_S $_t$_star_tmp $_t)
        else
            AC_MSG_ERROR([platform $_star_tmp matched, but no file $_t$_star_tmp found])
        fi
    done
fi
])# STAR_PLATFORM_SOURCES



# starconf internal macros


# _STAR_UPCASE(string)
# --------------------
# Expands to STRING with all letters translated to uppercase
AC_DEFUN([_STAR_UPCASE],
         [m4_translit([$1],
                      [abcdefghijklmnopqrstuvwxyz],
                      [ABCDEFGHIJKLMNOPQRSTUVWXYZ])])


# _STAR_EXTRADIR_COMMON(dir-type, file-list)
# ------------------------------------------
#
# Common handler for STAR_HELP_FILES, etc.  DIR-TYPE is one of `help',
# `etc', `docs', and `FILE-LIST' is a list of files to be installed in
# the directory STAR_[DIR-TYPE]_DIR.  This works by defining and
# AC_SUBSTing the variables `starX_STARDATA and
# starXdir for X=dir-type (eg, `stardocs_STARDATA' and `stardocdir').
# The form of these variables is governed by the data.am template in automake.
# Starlink-automake recognises the `primary' STARDATA and handles it
# appropriately.
AC_DEFUN([_STAR_EXTRADIR_COMMON],
         [m4_ifval([$1], [], [AC_FATAL([$0: called with zero args])])dnl
          m4_ifval([$2], [], [AC_FATAL([$0: called with only one arg])])dnl
          if test "X[$]star$1_STARDATA" = X; then
              # First time
##              [STAR_]_STAR_UPCASE($1)[_DIR]='$(prefix)/$1'
##              AC_SUBST([STAR_]_STAR_UPCASE($1)[_DIR])dnl
              AC_SUBST(star$1_STARDATA)dnl
              AC_SUBST(star$1[]dir, '$(prefix)/$1')dnl
          fi
          star$1_STARDATA="[$]star$1_STARDATA $2"
])# _STAR_EXTRADIR_COMMON


# _STAR_EXTRA_DIST(filelist)
# --------------------------
#
# Declare a space-separated list of files which should be included in
# the distribution.  This has the same function as automake's
# EXTRA_DIST rule, and the way it should be used is as follows
#
# #If there is no EXTRA_DIST variable set in the Makefile.am, then a
# #variable is created in Makefile.in, of the form `EXTRA_DIST =
# #@EXTRA_DIST@', and it is the accumulated value of EXTRA_DIST which
# #is substituted in.  If you use EXTRA_DIST in the Makefile.am, you
# #should use it as `EXTRA_DIST = xxx @EXTRA_DIST@', so that the values
# #here will be appended to it
#
AC_DEFUN([_STAR_EXTRA_DIST],
	 [m4_ifval([$1], [], 
                         [AC_FATAL([$0: called with empty filelist])])dnl
          STAR_EXTRA_DIST="$STAR_EXTRA_DIST $1"
])# _STAR_EXTRA_DIST


# end of starconf macros
