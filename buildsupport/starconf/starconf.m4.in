# Starlink M4 macros for autoconf
# This file is part of starconf version @PACKAGE_VERSION@
# DO NOT EDIT: it may be overwritten when starconf is next run



# STAR_DEFAULTS(options='')
# -------------------------
# Defaults for Starlink configure.ac files.  The optional OPTIONS
# argument holds a space-separated list of option keywords, of which
# the only one at present is `per-package-dirs', which causes
# applications and help to be installed in a package-specific
# directory.
#
AC_DEFUN([STAR_DEFAULTS],
[#
_star_per_package_dirs=false
for opt in $1 NONE
do
    case $opt in
        per-package-dirs)
            _star_per_package_dirs=true
            ;;
        NONE)
            ;;
        *)
            echo "Unrecognised [STAR_DEFAULTS] option $1 ignored"
            ;;
    esac
done

# Ensure that STARLINK has a value, defaulting to
# !!STARCONF_DEFAULT_STARLINK!!.  Note that this directory may be
# different from /star, and reflects the value of
# STARCONF_DEFAULT_STARLINK that the `starconf' package was configured
# with before its installation. 
#
# We use $STARLINK as the location of any other Starlink tools we need
# to use during the building of our packages, and for the location of
# any manifests we need to check.  It is permissable for it to be
# different from $(prefix): this is partly because we have no way of
# enforcing that the two be the same, since the user can set
# prefix=xxx on the `make install' command line, and partly so that it
# is possible to make a test version of a new package, using tools
# from an old installation, but installing in a new place.
#
# However, we install software in !!STARCONF_DEFAULT_PREFIX!! by
# default.  This is so even if $STARLINK and STARCONF_DEFAULT_STARLINK
# are different, because in this case we are planning to use a
# previous installation in $STARLINK or $STARCONF_DEFAULT_STARLINK,
# but install the newly built tool elsewhere. 
#
# In most cases, including the most important case where we are
# building the tree from scratch, in a checked out directory,
# STARLINK, STARCONF_DEFAULT_STARLINK and STARCONF_DEFAULT_PREFIX will
# all be the same.  That's OK because a separate aspect of the build
# process, respecting the various dependencies expresses in source
# directories, ensures that we don't use (and install) any Starlink
# tools in one component before that component has been build and
# installed. 

test -n "$STARLINK" || STARLINK=!!STARCONF_DEFAULT_STARLINK!!
AC_PREFIX_DEFAULT(!!STARCONF_DEFAULT_PREFIX!!)dnl

if $_star_per_package_dirs; then
    bindir="$bindir/$PACKAGE_NAME"
    AC_MSG_NOTICE([STAR_DEFAULTS has per-package-dirs option: bindir=$bindir])
fi

# Everything depends on where /star is.  Declare STARLINK as a
# `precious variable'.  Amongst other things, this will make
# ./configure squeal if the package is re-configured with an
# inconsistent value of this variable.
AC_ARG_VAR(STARLINK, [Location of a current Starlink tree (used if necessary)])dnl

# AC_SUBST the STARLINK variable.  Macro AC_ARG_VAR does this anyway,
# but automake doesn't know that (in 1.6 at least): however any
# variable that automake finds has been AC_SUBSTed, it includes in
# Makefile.in, and we need that.
AC_SUBST(STARLINK)

# Use the above information: $STARLINK indicates a preexisting
# Starlink tree.  Note that we are using FCFLAGS rather than FFLAGS --
# we prefer the FC macros to the F77 ones, and have modified automake
# to generate these.  However, we maintain FFLAGS also, so that we
# allow both.
if test "$STARLINK" != "!!STARCONF_DEFAULT_PREFIX!!"; then
    FCFLAGS="$FCFLAGS -I!!STARCONF_DEFAULT_PREFIX!!/include"
    FFLAGS="$FFLAGS -I!!STARCONF_DEFAULT_PREFIX!!/include"
    CFLAGS="$CFLAGS -I!!STARCONF_DEFAULT_PREFIX!!/include"
    LDFLAGS="$LDFLAGS -L!!STARCONF_DEFAULT_PREFIX!!/lib"
fi
FCFLAGS="$FCFLAGS -I$STARLINK/include"
FFLAGS="$FFLAGS -I$STARLINK/include"
CFLAGS="$CFLAGS -I$STARLINK/include"
LDFLAGS="$LDFLAGS -L$STARLINK/lib"


# Dependency declarations and checks.
# Everything is dependent on starconf, so we don't have to declare that 
# for each package separately.
# STAR_DEPENDENCIES_ATTRIBUTES is currently not used.
STAR_DEPENDENCIES_ATTRIBUTES=''
STAR_DEPENDENCIES_CHILDREN=''
AC_SUBST(STAR_DEPENDENCIES_ATTRIBUTES)
AC_SUBST(STAR_DEPENDENCIES_CHILDREN)

# List of message files.  Used to signal to automake.
STAR_MESSGEN_SOURCES=
AC_SUBST(STAR_MESSGEN_SOURCES)

# List of documentation.  See [STAR_LATEX_DOCUMENTATION].
# STAR_DOCUMENTATION is a list of document codes,
STAR_DOCUMENTATION=
AC_SUBST([STAR_DOCUMENTATION])

# Extra files to be distributed.  This is for files added to the
# distribution list by starconf; files which the user wishes to add
# should be specified in the usual way, through the automake
# EXTRA_DIST variable.
STAR_EXTRA_DIST=
AC_SUBST(STAR_EXTRA_DIST)

# Create a PACKAGE_VERSIONINT variable, which contains the
# package's version number as an integer major*1e6+minor*1e3+release.
## NB hairy quoting: quadrigraph @S|@ is replaced by $ after m4 has run.
PACKAGE_VERSIONINT=[`echo $PACKAGE_VERSION | sed 's/[^0-9][^0-9]*/ /g' | awk '{print @S|@1*1000000+@S|@2*1000+(NF>2 ? @S|@3 : 0)}'`]
AC_SUBST(PACKAGE_VERSIONINT)

# When we do dependency checking, using the dependencies declared in
# the package's configure.ac, we do so by looking at what tools have
# already been installed in the Starlink tree.  The tree in question
# is to be found under $STARLINK (see above), so we check that a
# package is installed by checking that its manifest can be found in
# $STARLINK/manifests.  We don't AC_SUBST this.
current_MANIFESTS=$STARLINK/manifests

# When we install manifests, however, they should go in the
# installation directory.
STAR_MANIFEST_DIR='$(prefix)/manifests'
AC_SUBST(STAR_MANIFEST_DIR)

# Although PACKAGE_VERSION is a default output variable, it isn't
# added as a Makefile variable by default.  We need it below, however,
# so add it now.
AC_SUBST(PACKAGE_VERSION)
])# STAR_DEFAULTS



# STAR_MESSGEN(msgfile-list)
# --------------------------
#
# Handle generating message, error, and facility files.
#
# The argument is a space-separated list of files, each of which has a
# set of message declarations in it, in the format prescribed by the
# messgen utility.  There is no default, though the usual name for
# this file is ${PACKAGE}_err.msg.  The macro may be called more than
# once if you have more than one .msg file in the directory.
#
# This adds Makefile rules to create the appropriate _err, _ERR,
# _err.h and fac_nnn_err files, and handles installing the latter file
# to the help directory, and including it in the distribution.
#
# The files which this generates should be declared as sources in
# the Makefile.am if they are to be used in code, or are to be
# installed.  If they are used in building the package, you will
# probably need to declare them additionally as `BUILT_SOURCES'.  The
# package also implicitly declares a `sourceset' dependency on the
# messgen package.
#
AC_DEFUN([STAR_MESSGEN],
         [#
          m4_ifval([$1], [], [AC_FATAL([$0: called with no message file])])dnl
          for infile in $1
          do
              expr "x$infile" : 'x.*\.msg$' >/dev/null || \
                { echo "ERROR: facility file $infile does not end in .msg";
                  exit 1; }
              if test -r $infile; then
                  : OK
              else
                  echo "Facility file $infile missing or not readable"
                  exit 1
              fi
              # Extract the facility name and code from the .msg file
              # Format is `.FACILITY name,code/PREFIX=xxx'
              AC_MSG_CHECKING([facility and code in $infile])
              eval [`sed -n '/\.FACILITY/{s/.*\.FACILITY[ 	]*\([a-zA-Z]*\) *, *\([0-9]*\).*/_s_facname=\1; _s_faccode=\2;/p;q;}' $infile`]
              _s_facname=[`echo $_s_facname | tr '[A-Z]' '[a-z]'`]
              AC_MSG_RESULT([$_s_facname/$_s_faccode])
              STAR_HELP_FILES(fac_${_s_faccode}_err)
              _STAR_EXTRA_DIST(fac_${_s_faccode}_err)
          done
          STAR_DECLARE_DEPENDENCIES([sourceset], [messgen])
          STAR_CHECK_PROGS(messgen)
])# STAR_MESSGEN


# STAR_HAVE_FC_OPEN_READONLY
# ---------------------------
#
# Tests if the Fortran compiler supports the READONLY option on the
# OPEN command.
AC_DEFUN([STAR_HAVE_FC_OPEN_READONLY],
         [AC_REQUIRE([AC_PROG_FC])dnl
          AC_CACHE_CHECK([whether OPEN has the READONLY specifier],
                         [star_cv_have_fc_open_readonly],
                         [AC_LANG_PUSH([Fortran])dnl
                          AC_COMPILE_IFELSE(
                              AC_LANG_PROGRAM([],
                                              [      OPEN(UNIT=99,READONLY)]),
                              [star_cv_have_fc_open_readonly=yes],
                              [star_cv_have_fc_open_readonly=no])
                          AC_LANG_POP(Fortran)])
          if test $star_cv_have_fc_open_readonly = yes; then
              AC_DEFINE([HAVE_FC_OPEN_READONLY], 1,
                        [Define to 1 if f77 OPEN has the READONLY specifier])
          fi
])


# STAR_CNF_COMPATIBLE_SYMBOLS
# ---------------------------
#
# Work out what is required to have the Fortran compiler produce
# library symbols which are compatible with those expected by the CNF
# package.  If you are building a library which includes Fortran code,
# then you should call this macro, which possibly adjusts the FCFLAGS
# variable.
#
# At present, all this macro has to do is simply work out whether it
# needs to stop g77 adding a second underscore to generated symbol
# names (it adds a single underscore to most Fortran symbols, but by
# default adds two when the symbol name already contains an
# underscore); the other Fortran compilers we use don't need any extra
# options, as it happens.  However this could potentially be much more
# complicated.  The autoconf AC_F77_WRAPPERS macro detects more
# possibilities, but probably not a completely exhaustive set.  In
# future it might be necessary to extend the CNF macros, by somehow
# merging the results of AC_F77_WRAPPERS into it, and at that point it
# might be necessary to extend this macro.
#
# This macro is designed to work with CNF, however it does _not_
# require the cnf.h headers to be installed, because it should remain
# callable at configuration time before _anything_ has been installed.
# Instead we fake the functionality of the definition
# F77_EXTERNAL_NAME in cnf.h, which appends an underscore (just one)
# to the end of C symbols.
#
AC_DEFUN([STAR_CNF_COMPATIBLE_SYMBOLS],
         [AC_CACHE_CHECK([how to make Fortran and C play nicely],
                         [star_cv_cnf_compatible_symbols],
                         [AC_REQUIRE([AC_PROG_FC])dnl
                          AC_REQUIRE([AC_PROG_CC])dnl
                          AC_LANG_PUSH([C])
                          AC_LANG_CONFTEST([AC_LANG_PROGRAM([
void funcone_(); 
void func_two_();
],[
funcone_();
func_two_();
])])
                          if (eval $ac_compile) 2>&5; then
                              mv conftest.$ac_objext c-conftest.$ac_objext
                          else
                              AC_MSG_ERROR([cannot compile a C program!])
                          fi
                          AC_LANG_POP(C)
                          AC_LANG_PUSH([Fortran])
                          AC_LANG_CONFTEST([AC_LANG_SOURCE([
      SUBROUTINE funcone
      END
      SUBROUTINE func_two
      END
])])
                          star_cv_cnf_compatible_symbols=X
                          for opt in "" "-fno-second-underscore"

                          do
                              if $FC $opt -o conftest conftest.f c-conftest.$ac_objext 2>&5; then
                                  star_cv_cnf_compatible_symbols=$opt
                                  break
                              fi
                          done
                          AC_LANG_POP([Fortran])
                          rm -f conftest* c-conftest*
                          ])
          if test "$star_cv_cnf_compatible_symbols" = X; then
              AC_MSG_ERROR([cannot work out how])
          else
              FCFLAGS="$FCFLAGS $star_cv_cnf_compatible_symbols"
              FFLAGS="$FFLAGS $star_cv_cnf_compatible_symbols"
          fi
])# STAR_CNF_COMPATIBLE_SYMBOLS


# STAR_LATEX_DOCUMENTATION(documentcode, [targets])
# -------------------------------------------------
# Generate the standard makefile targets to handle LaTeX documentation
# source.  The parameter documentcode should be something like
# `sun123' -- it should not include any .tex extension.
#
# The second, optional, argument gives an explicit list of the targets
# which are build.  If this is _not_ specified, then a standard list
# is used (.tex, .ps and .tar_htx) and corresponding rules added to
# the generated makefile.  If it is specified, it must be non-null,
# and its value is a list of files which are to be added to the
# distribution, and no extra Makefile rules are added.  Thus if users need
# anything complicated done, they should use this second argument and
# provide rules for satisfying the given targets.
AC_DEFUN([STAR_LATEX_DOCUMENTATION],
         [m4_ifval([$1], [], [AC_FATAL([$0: called with no documentcode])])dnl
          STAR_DOCUMENTATION="$STAR_DOCUMENTATION $1"
          m4_ifval([$2],
                   [dnl non-empty second argument -- just add to variable
                    _STAR_EXTRA_DIST($2)
                    STAR_DOC_FILES($2)],
                   [dnl second arg empty -- use defaults
                    for d in $1
                    do
                        docno=[`basename $d .tex`]
                        _STAR_EXTRA_DIST(${docno}.tex ${docno}.ps ${docno}.htx_tar)
                        STAR_DOC_FILES(${docno}.tex ${docno}.ps ${docno}.htx_tar)
                    done
                    dnl STAR_DECLARE_DEPENDENCIES([sourceset], [star2html])
                    STAR_CHECK_PROGS([star2html])
                   ])dnl
])# STAR_LATEX_DOCUMENTATION


# STAR_CHECK_PROGS(progs-to-check-for)
# ------------------------------------
#
# For each of the programs in PROGS-TO-CHECK-FOR, define a variable
# whose name is the upcased version of the program name, and whose
# value is the full path to that program, or the expected installation
# location of that program if no absolute path can be found.  Because
# of this default behaviour, this macro should _only_ be used for
# locating Starlink programs such as messgen or alink, and not as a
# general replacement for AC_CHECK_PROG.  Any characters in the
# program outside of the set of alphanumerics and underscores are
# normalised to underscores.
#
# For example:
#     STAR_CHECK_PROGS(messgen)
# would define the variable MESSGEN to have the full path to the
# messgen application.
#
# Calls AC_SUBST and AC_ARG_VAR on the generated variable name.
#
# This is the analogue of AC_CHECK_PROG, except that: (1) the variable
# name defaults to the program name, (2) the variable value if the
# program is not found is the path to the anticipated installation
# location of the program, so that the macro does not fail in this
# case.  This is useful for locating Starlink programs, as it means we
# can use this macro to produce absolute paths to programs, even
# before they have been installed (in this case we are presumably
# doing a top-level configure of the Starlink tree, and the Makefile
# will ensure that the required files are installed before the current
# package actually uses it.
#
# The current value of the PATH variable is augmented by the location
# of the binary installation directory, using the current default
# value of the prefix, and by the $STARLINK/bin directory.
AC_DEFUN([STAR_CHECK_PROGS],
         [eval default_bindir=`echo $bindir | sed 's,\${exec_prefix},$ac_default_prefix,'`
          AC_FOREACH([ProgramName], [$1],
                     [AC_PATH_PROG(_STAR_UPCASE(m4_bpatsubst(ProgramName,
                                                             [[^0-9a-zA-Z_]], 
                                                             [_])),
                                   ProgramName,
                                   [\$(bindir)/ProgramName],
                                   [$default_bindir:$STARLINK/bin:$PATH])
                      AC_ARG_VAR(_STAR_UPCASE(m4_bpatsubst(ProgramName,
                                                           [[^0-9a-zA-Z_]], 
                                                           [_])),
                                 [Location of the ]ProgramName[ application])])
])# STAR_CHECK_PROGS
          


# STAR_MONOLITHS
# --------------
# Declare that we will be creating monoliths.  This does whatever
# configuration is necessary to handle these.
#
# Note that the declarations done in the Makefile.am, declaring the
# name of the monolith and the names and source files of the tasks,
# are slightly redundant inasmuch as some of that information could be
# implied.  However, this is required to be explicit for clarity and
# consistency, and so accomodate the (currently unexploited)
# possibility that the tasks and .ifl files longer have the
# one-task-per-file relationship they have now.
AC_DEFUN([STAR_MONOLITHS],
         [dnl Installation in monoliths.am uses $(LN_S)
          AC_REQUIRE([AC_PROG_LN_S])dnl

          # To build monoliths, we need both compifl to build the .ifc
          # files (in the parsecon component), and alink
          # to link the monoliths (in dtask).
          STAR_DECLARE_DEPENDENCIES(build, [parsecon dtask])

          # So try to find alink and compifl.
          STAR_CHECK_PROGS([compifl alink])

          # When we're building monoliths, we will almost certainly be
          # using Fortran, and so we might as well include this,
          # partly in case the user forgets, but also because this is
          # reasonably part of the default setup required for monoliths.
          STAR_CNF_COMPATIBLE_SYMBOLS
])# STAR_MONOLITHS


# STAR_HELP_FILES(helpfiles)
# --------------------------
# Declare a list of files to be installed into the Starlink help
# directory.  This can be used both internally and in user
# configure.ac files.
AC_DEFUN([STAR_HELP_FILES],
	 [_STAR_EXTRADIR_COMMON([help], [$1])])


# STAR_ETC_FILES(etcfiles)
# ------------------------
# Declare a list of files to be installed into the Starlink etc
# directory.  This can be used both internally and in user
# configure.ac files.
AC_DEFUN([STAR_ETC_FILES],
         [_STAR_EXTRADIR_COMMON([etc], [$1])])


# STAR_DOC_FILES(docfiles)
# ------------------------
# Declare a list of files to be installed into the Starlink
# documentation directory.  This can be used both internally and in
# user configure.ac files.
AC_DEFUN([STAR_DOC_FILES],
         [_STAR_EXTRADIR_COMMON([docs], [$1])])


# STAR_DECLARE_DEPENDENCIES(type, deplist, option='')
# ---------------------------------------------------
#
# Declare dependencies of this component.  The TYPE is one of
# `sourceset', `build', `link' or `use', and the DEPLIST is a space
# separated list of component names, which this component depends on in
# the given way.
#
# -- Sourceset dependencies are those components which must be
# installed in order to build the complete set of sources, either for
# building or for distribution.  This includes documentation, so it
# would include star2html as well as messgen.
#
# -- Build dependencies are those which are required in order to build
# this component.  This typically means include files, but if part of
# the component is an executable file (such as compifl within the
# parsecon component), then that's a build dependence also (but see
# the discussion of `option', below).  You may not have two components
# which have a build dependency on each other, since that would mean
# that each would have to be built before the other, which is
# impossible.
#
# -- Link dependencies are those required to link against the
# libraries in a component.  That means all the libraries that this
# component's libraries use.  These are not necessarily build
# dependencies, since if you are building a library, any called
# libraries don't have to be present in order to build this library;
# you can have two components which have mutual link dependencies.  If
# you are building an application, however, then all its link
# dependencies will actually be build dependencies and should be
# declared as such.  In other words, the distinction between build and
# link dependencies is important only for library components.
#
# -- Use dependencies are those which are required in order for the
# component to be used by something else, after it has been built and
# installed.  For example a library which called another application
# as part of its functionality would have only a use dependency on the
# component which contained that application.
#
# The point of this is that different dependencies are required at
# different times.  The set of dependencies in the master makefile is
# composed of all the `sourceset' and `build' dependencies, but not
# `link' or `use' dependencies, and since the core Starlink libraries
# are closely interdependent, the set of `build' dependencies needs to
# be kept as small as possible in order to avoid circularities (that
# is, A depending on B, which depends, possibly indirectly, on A).
#
# All these relationships are transitive: if A has a build dependency
# on B, and B has one on C, then A has a build dependency on C.  You
# can augment this by using the final `option' argument: if, in
# component A's declaration element you say
# STAR_DECLARE_DEPENDENCIES(build, B, link), then you declare that A
# has a build-time dependency on B, but that (presumably because you
# are building an application within a component which is mostly
# libraries) you need to link against B, so component A has a
# dependency on all of B's _link_ dependencies, not just its build
# dependencies.  This is (I believe) the only case where this `option'
# attribute is useful, though it is legal for each of the dependency types.
#
# You need only declare direct dependencies.  If package A depends on
# package B, which depends in turn on package C, then package A need
# not declare a dependency on C.
#
# The macro may be called more than once.  The results of this macro
# are expressed in the file component.xml in the component directory.
AC_DEFUN([STAR_DECLARE_DEPENDENCIES],
         [m4_ifval([$1], [], [AC_FATAL([$0: no type given])])dnl
          m4_if(m4_bregexp([$1], 
                           [^\(sourceset\|build\|link\|use\)$]),
                [0],
                [],
                [AC_FATAL([$0: unrecognised type $1])])dnl
          m4_ifval([$2], [], [AC_FATAL([$0: no deplist given])])dnl
          for _star_tmp in $2
          do
              STAR_DEPENDENCIES_CHILDREN="$STAR_DEPENDENCIES_CHILDREN<[$1]m4_ifval([$3], [ option='$3'], [])>$_star_tmp</$1>"
          done
])# STAR_DECLARE_DEPENDENCIES


# STAR_PLATFORM_SOURCES(target-file-list, platform-list)
# ------------------------------------------------------
#
# Generate the given target-file for each of the files in the list
# TARGET-FILE-LIST, by selecting the appropriate element of the
# PLATFORM-LIST based on the value of [AC_CANONICAL_BUILD].  Both
# lists are space-separated lists.
#
# For each of the platforms, <p>, in platform-list, there should be a
# file `<target-file><p>'.  There should always be a file
# `<target-file>default', and if none of the platform-list strings
# matches, this is the file which is used.  If the `default' file is
# listed in the `platform-list', then it is matched in the normal run
# of things; if it is not listed, it still matches, but a warning is
# issued.
#
# If you wish no match _not_ to be an error -- perhaps because there
# is a platform-dependent file which is redundant on unlisted platforms
# -- then end the platform-list with `NONE'.  In this case, if no file
# matches, then no link is made, with no error or warning.
#
# This macro uses the results of ./config.guess to determine the
# current platform.  That returns a triple consisting of
# cpu-vendor-os, such as `i686-pc-linux-gnu' (OS=linux-gnu),
# `sparc-sun-solaris2.9', or `alphaev6-dec-osf5.1'
#
# The extensions <p> in platform-list should all have the form
# `cpu_vendor[_os]', where each of the components `cpu', `vendor' and
# `os' may be blank.  If not blank, they are matched as a prefix of
# the corresponding part of the config.guess value.  Thus
# `_sun_solaris' would match `sparc-sun-solaris2.9' but not
# `sparc-sun-sunos', and `_sun' would match both.  For a <target-file>
# file foo.c, this would result in `ln -s foo.c_sun foo.c'
#
# Calls AC_LIBSOURCE for each of the implied platform-specific files.
#
AC_DEFUN([STAR_PLATFORM_SOURCES],
         [
AC_REQUIRE([AC_CANONICAL_BUILD])dnl
AC_REQUIRE([AC_PROG_LN_S])dnl
m4_ifval([$1], [], [AC_FATAL([$0: no target-file-list given])])dnl
m4_ifval([$2], [], [AC_FATAL([$0: no platform-list given])])dnl
AC_FOREACH([TargetFile], [$1],
  [AC_FOREACH([Ext], [$2], 
    [m4_if(Ext, [NONE], , [AC_LIBSOURCE(TargetFile[]Ext)])])])dnl
AC_MSG_CHECKING([platform-specific source for file(s) $1])
_star_tmp=
for platform in $2
do
    if test $platform = NONE; then
        # Special case -- no file required
        _star_tmp=NONE
        break;
    fi
    if test $platform = default; then
        _star_tmp=default
        break;
    fi
    if expr $build : `echo $platform | sed 's/_/.*-/g'` >/dev/null; then
        _star_tmp=$platform
        break;
    fi
done
if test -z "$_star_tmp"; then
    # Use default, but it wasn't listed in the platform-list
    # (though it should have been)
    AC_MSG_WARN([build platform $build does not match any of ($2): using `default'])
    _star_tmp=default
fi    
if test $_star_tmp = NONE; then
    AC_MSG_RESULT([none required])
else
    AC_MSG_RESULT([using $_star_tmp])
    for _t in $1
    do
        if test -e $srcdir/$_t$_star_tmp; then
            (cd $srcdir; rm -f $_t; $LN_S $_t$_star_tmp $_t)
        else
            AC_MSG_ERROR([platform $_star_tmp matched, but no file $_t$_star_tmp found])
        fi
    done
fi
])# STAR_PLATFORM_SOURCES



# starconf internal macros


# _STAR_UPCASE(string)
# --------------------
# Expands to STRING with all letters translated to uppercase.
AC_DEFUN([_STAR_UPCASE],
         [m4_translit([$1], [a-z], [A-Z])])
##         [m4_translit(m4_bpatsubst([$1], [[^0-9a-zA-Z_]], [_]), [a-z], [A-Z])])


# _STAR_EXTRADIR_COMMON(dir-type, file-list)
# ------------------------------------------
#
# Common handler for STAR_HELP_FILES, etc.  DIR-TYPE is one of `help',
# `etc', `docs', and `FILE-LIST' is a list of files to be installed in
# the directory STAR_[DIR-TYPE]_DIR.  This works by defining and
# AC_SUBSTing the variables `starX_STARDATA and
# starXdir for X=dir-type (eg, `stardocs_STARDATA' and `stardocsdir').
# The form of these variables is governed by the data.am template in automake.
# Starlink-automake recognises the `primary' STARDATA and handles it
# appropriately.
#
# Specialcase 'help': help is one of the directories (the other is bin)
# which is affected by the $_star_per_package_dir variable; if it's
# true, then add the $PACKAGE_NAME to the starhelpdir.  There are
# others: see PWD's message of 2004-02-16:
# <http://www.jiscmail.ac.uk/cgi-bin/wa.exe?A2=ind0402&L=stardev&T=0&F=&S=&P=5153>
AC_DEFUN([_STAR_EXTRADIR_COMMON],
         [m4_ifval([$1], [], [AC_FATAL([$0: called with zero args])])dnl
          m4_ifval([$2], [], [AC_FATAL([$0: called with only one arg])])dnl
          if test "X[$]star$1_STARDATA" = X; then
              # First time
              AC_SUBST(star$1_STARDATA)dnl
              star$1[]dir='$(prefix)/$1'
              m4_if([$1], [help],
                    [if $_star_per_package_dirs; then
                         star$1[]dir=star$1[]dir/$PACKAGE_NAME
                     fi])
              AC_SUBST(star$1[]dir)
          fi
          star$1_STARDATA="[$]star$1_STARDATA $2"
])# _STAR_EXTRADIR_COMMON


# _STAR_EXTRA_DIST(filelist)
# --------------------------
#
# Declare a space-separated list of files which should be included in
# the distribution.  This has the same function as automake's
# EXTRA_DIST rule, and the way it should be used is as follows
#
# #If there is no EXTRA_DIST variable set in the Makefile.am, then a
# #variable is created in Makefile.in, of the form `EXTRA_DIST =
# #@EXTRA_DIST@', and it is the accumulated value of EXTRA_DIST which
# #is substituted in.  If you use EXTRA_DIST in the Makefile.am, you
# #should use it as `EXTRA_DIST = xxx @EXTRA_DIST@', so that the values
# #here will be appended to it
#
AC_DEFUN([_STAR_EXTRA_DIST],
	 [m4_ifval([$1], [], 
                         [AC_FATAL([$0: called with empty filelist])])dnl
          STAR_EXTRA_DIST="$STAR_EXTRA_DIST $1"
])# _STAR_EXTRA_DIST


# end of starconf macros
