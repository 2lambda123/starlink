#! /bin/sh -
#
# This is starconf, version @PACKAGE_VERSION@
# DO NOT EDIT: it will be overwritten
#
# Usage:
#    starconf
#    starconf --show variable [...]
#
# The first form configures the current directory.  The second form shows
# the default values of the given variables, _without_ any defaulting
# from the environment.

# Configuration
buildsupport=@prefix@
buildsupportbin=@bindir@
buildsupportdata=@pkgdatadir@
ln_s="@LN_S@"
versionint="@PACKAGE_VERSIONINT@"
version="@PACKAGE_VERSION@"
finder=@bindir@/starconf-finder

progname=$0

# Default all the variables which can be inherited from the environment.
: ${STARCONF_DEFAULT_STARLINK=@STARCONF_DEFAULT_STARLINK@}
: ${STARCONF_DEFAULT_PREFIX=@STARCONF_DEFAULT_PREFIX@}

# List all the variables which can be displayed with --show
showvars="STARCONF_DEFAULT_STARLINK STARCONF_DEFAULT_PREFIX buildsupport buildsupportbin buildsupportdata finder version versionint "

# Argument parsing
if test $# -gt 0; then
    case $1 in
    --show)
        shift
        while test $# -gt 0
        do
            if test "$1" = "--all"; then
                for v in $showvars
                do
                    eval echo "$v=\${$v}"
                done
            else
                expr "x $showvars" : "x.* $1 " >/dev/null ||
                    { echo "Unrecognised variable $1" >&2; exit 1; }
                eval echo "\${$1}"
            fi
            shift
        done
        exit 0
        ;;
    --version)
        echo "starconf @PACKAGE_VERSION@"
        exit 0
        ;;
    --help)
        echo "starconf @PACKAGE_VERSION@: configure Starlink build directories"
        echo "Usage:"
        echo "    $progname"
        echo "        Configure directory"
        echo "    $progname --show [--all | variable ...]"
        echo "        List configuration information:"
        echo "        [variables:$allshowvars]"
        echo "    $progname [--help | --version]"
        echo "        Show help/version"
        exit 0
        ;;
    *)  echo "Usage: $progname [--show variable...]"
        exit 1
        ;;
    esac
fi


#
# Consistency and sanity checks
#

# Make sure we have a configure.ac in the current directory
if test -r configure.ac -a Makefile.am; then
    : OK
else
    echo "$progname: can't find readable configure.ac and Makefile.am"
    echo "    ...see $buildsupportdata for templates"
    exit 1
fi

# If we can find a starconf-validate script (that is, if we're on a build
# system, which has starconf installed, rather than a distribution system)
# then run starconf-validate to make sure everything's OK.  Call it
# with the --force option, so that this will succeed, albeit with
# warnings, the very first time that starconf is run in a directory,
# before the user has had the chance to check in Makefile.in and friends.
if test -x $buildsupportbin/starconf-validate; then
    if $buildsupportbin/starconf-validate --force .; then
        : OK
    else
        echo "$progname: Configuration not valid -- fix above errors first"
        exit 1
    fi
fi

# Scan configure.ac, examining all the used STAR_* macros
found_star_defaults=false
for macro in `sed -n 's/^\(STAR[_A-Z]*\).*/\1/p' configure.ac`
do
    # Certain macros depend on certain additional files.  Scan the list of
    # used macros, and add the required files to $extrachunks.  There are
    # currently no macros in starconf.m4.in which require such files, but
    # if they are added, the dependencies should be documented here.
    case $macro in
        STAR_DEFAULTS)
            found_star_defaults=:
            ;;
        *) ;;
    esac
done

# Check that we did find a STAR_DEFAULTS macro in the configure.ac,
# and object if we didn't.
if $found_star_defaults; then
    : OK
else
    echo "$progname: configure.ac has no STAR_DEFAULTS macro"
    exit 1
fi

# Similarly, scan Makefile.am and check that it NO LONGER includes
# Makefile.starconf
if grep 'include .*Makefile.starconf' Makefile.am >/dev/null; then
    echo "$progname: Makefile.am still includes \$(srcdir)/Makefile.starconf"
    exit 1
else
    : OK -- should not be there
fi

# Make sure there's a link to the installed componentinfo.dtd.
# 'test -f' returns false if the link exists but points to a non-existent
# file, so delete any link first.
test -f componentinfo.dtd || {
    rm -f componentinfo.dtd
    $ln_s $buildsupportdata/componentinfo.dtd componentinfo.dtd
}

# Find aclocal, and confirm that "aclocal --print-ac-dir" is the same
# directory in which starconf.m4 was installed (@aclocaldir@).
#
# The user can still subvert this, by changing their aclocal path
# afterwards, but we can check that nothing is outrageously wrong here.
# Either starconf-validate or a separate starconf-status script could
# probably do better.
set `IFS=:; echo $PATH`
aclocalpath=
for bindir
do
    if test -x "$bindir/aclocal"; then
        aclocalpath="$bindir/aclocal"
        break
    fi
done
if test -z "$aclocalpath"; then
    echo "Error: I can't find aclocal in the path!" >&2
    exit 1
elif test "`$aclocalpath --print-ac-dir`" != "@aclocaldir@"; then
    echo "Error: The \$PATH aclocal ($aclocalpath)" >&2
    echo "  looks for extension macros in" >&2
    echo "  "`$aclocalpath --print-ac-dir` >&2
    echo "  but the starconf extensions were installed in" >&2
    echo "  @aclocaldir@" >&2
    echo "  You need to fix your path and rerun starconf" >&2
    exit 1
fi


# Start writing the starconf.status file; send output to FD 4
rm -f starconf.status
exec 4>starconf.status
cat >&4 <<\STARCONF4_EOD
#! /bin/sh -
#
# This is starconf.status: generated by starconf, version @PACKAGE_VERSION@
# DO NOT EDIT: your changes will be overwritten next time starconf is
# run.
#
# Do not depend on the format of this file -- use the interface below
# to query it.
#
# Usage:
#     ./starconf.status --show variable
#     ./starconf.status --version
#     ./starconf.status --help
# where VARIABLE is one of the following variables
STARCONF4_EOD
echo "showvars=\"$showvars\"" >&4
echo >&4
for v in $showvars
do
    eval echo "v_$v=\${$v}" >&4
done

cat >&4 <<\STARCONF4_EOD
if test $# -gt 0 -a `expr x$1 : x-` -gt 0; then
    case $1 in
    --show)
        shift
        while test $# -gt 0
        do
            if test "$1" = "--all"; then
                for v in $showvars
                do
                    eval echo "$v=\${v_$v}"
                done
            else
                if expr " $showvars " : ".* $1 " >/dev/null; then
                    eval echo "$1=\${v_$1}"
                else
                    echo "Unrecognised variable $1"
                    exit 1
                fi
            fi
            shift
        done
        exit 0
        ;;
    --version)
        echo "starconf @PACKAGE_VERSION@"
        exit 0
        ;;
    --help)
        echo "starconf.status: show configuration of directory"
        echo "Usage:"
        echo "    $0 --show [--all | variable ...]"
        echo "        List configuration information:"
        echo "        [one of: $showvars]"
        echo "    $0 [--help | --version]"
        echo "        Show help/version"
        exit 0
        ;;
    *)
        echo "$0: unrecognised option.  $0 --help for usage"
        exit 1
        ;;
    esac
fi
STARCONF4_EOD

# Close the starconf.status file
exec 4>&-
# ...and make it executable
chmod +x starconf.status

#
# Now start unpacking the file(s).  Only one at present.
#

# -------------------- bootstrap --------------------
if test -f bootstrap; then
    # Extract the first word on the second line, and the value of rnum
    eval `sed -n -e '2s/^[^a-z]*\([a-z]*\).*rnum=\([0-9]*\).*/original=\1; file_version=\2;/p' -e 3q bootstrap`
    if test "X$original" != Xoriginal; then
        # do nothing -- file has been modified
        unpack_this=false
    elif test -n "$file_version" -a "$file_version" -lt @PACKAGE_VERSIONINT@; then
        unpack_this=:
    else
        # no need to do anything
        unpack_this=false
    fi
else
    # file doesn't exist, so unpack it
    unpack_this=:
fi
if $unpack_this; then
    echo "Creating bootstrap"
    cat >bootstrap <<\_STARCONF_EOD
XXXINCLUDE bootstrap.installed
_STARCONF_EOD
    chmod +x bootstrap
else
    echo "Bootstrap already up to date -- not overwriting"
fi


exit 0
