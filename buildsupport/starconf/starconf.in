#! /bin/sh -
#
# This is starconf, version @PACKAGE_VERSION@
# DO NOT EDIT: it will be overwritten
#
# Usage:
#    starconf
#    starconf --show variable [...]
#
# The first form configures the current directory.  The second form shows
# the default values of the given variables, _without_ any defaulting
# from the environment.

# Configuration
buildsupport=@prefix@
buildsupportbin=@bindir@
buildsupportdata=@pkgdatadir@
ln_s="@LN_S@"
versionint="@PACKAGE_VERSIONINT@"
version="@PACKAGE_VERSION@"
finder=@bindir@/starconf-finder
autoconf_aclocal=@ACLOCAL@

# Default all the variables which can be inherited from the environment.
: ${STARCONF_DEFAULT_STARLINK=@STARCONF_DEFAULT_STARLINK@}
: ${STARCONF_DEFAULT_PREFIX=@STARCONF_DEFAULT_PREFIX@}

# List all the variables which can be displayed with --show
showvars="STARCONF_DEFAULT_STARLINK STARCONF_DEFAULT_PREFIX buildsupport buildsupportbin buildsupportdata finder version versionint "

# Argument parsing
if test $# -gt 0; then
    case $1 in
    --show)
        shift
        while test $# -gt 0
        do
            if test "$1" = "--all"; then
                for v in $showvars
                do
                    eval echo "$v=\${$v}"
                done
            else
                expr "x $showvars" : "x.* $1 " >/dev/null ||
                    { echo "Unrecognised variable $1" >&2; exit 1; }
                eval echo "\${$1}"
            fi
            shift
        done
        exit 0
        ;;
    --version)
        echo "starconf @PACKAGE_VERSION@"
        exit 0
        ;;
    --help)
        echo "starconf @PACKAGE_VERSION@: configure Starlink build directories"
        echo "Usage:"
        echo "    $0"
        echo "        Configure directory"
        echo "    $0 --show [--all | variable ...]"
        echo "        List configuration information:"
        echo "        [variables:$allshowvars]"
        echo "    $0 [--help | --version]"
        echo "        Show help/version"
        exit 0
        ;;
    *)  echo "Usage: $0 [--show variable...]"
        exit 1
        ;;
    esac
fi


#
# Consistency and sanity checks
#

# Make sure we have a configure.ac in the current directory
if test -r configure.ac -a Makefile.am; then
    : OK
else
    echo "$0: can't find readable configure.ac and Makefile.am"
    echo "    ...see $buildsupportdata for templates"
    exit 1
fi

# If we can find a starconf-validate script (that is, if we're on a build
# system, which has starconf installed, rather than a distribution system)
# then run starconf-validate to make sure everything's OK.  Call it
# with the --force option, so that this will succeed, albeit with
# warnings, the very first time that starconf is run in a directory,
# before the user has had the chance to check in Makefile.in and friends.
if test -x $buildsupportbin/starconf-validate; then
    if $buildsupportbin/starconf-validate --force .; then
        : OK
    else
        echo "$0: Configuration not valid -- fix above errors first"
        exit 1
    fi
fi

# Scan configure.ac, examining all the used STAR_* macros
found_star_defaults=false
sed -n 's/^\(STAR[_A-Z]*\).*/\1/p' configure.ac | \
    while read macro
    do
        # Certain macros depend on certain additional files.  Scan the list of
        # used macros, and add the required files to $extrachunks.  There are
        # currently no macros in starconf.m4.in which require such files, but
        # if they are added, the dependencies should be documented here.
        case $macro in
            STAR_DEFAULTS)
                found_star_defaults=true
                ;;
            *) ;;
        esac
    done

# Check that we did find a STAR_DEFAULTS macro in the configure.ac,
# and object if we didn't.
if $found_star_default; then
    : OK
else
    echo "$0: configure.ac has no STAR_DEFAULTS macro"
    exit 1
fi

# Similarly, scan Makefile.am and check that it NO LONGER includes
# Makefile.starconf
if grep 'include .*Makefile.starconf' Makefile.am >/dev/null; then
    echo "$0: Makefile.am still includes \$(srcdir)/Makefile.starconf"
    exit 1
else
    : OK -- should not be there
fi

# Make sure there's a link to the installed componentinfo.dtd.
# 'test -e' returns false if the link exists but points to a non-existent
# file, so delete any link first.
test -e componentinfo.dtd || {
    rm -f componentinfo.dtd
    $ln_s $buildsupportdata/componentinfo.dtd componentinfo.dtd
}



# We would like to check here that the default prefix/starlink which
# autoconf will configure in (because of the starconf.m4 macro set
# that aclocal has included) matches the prefix/starlink corresponding
# to this installation of starconf.  However, there's no realistic way
# to do this, since the user could always subvert it by deliberately
# or accidentally using a completely different autoconf; thus avoid
# trying, on the grounds that this is preferable to the false security
# of reporting a wrong result.  This is a job for a separate
# starconf-validate or starconf-status tool, which reports this sort
# of stuff by inspection of the configured files in a directory.



# Start writing the starconf.status file; send output to FD 4
rm -f starconf.status
exec 4>starconf.status
cat >&4 <<\STARCONF4_EOD
#! /bin/sh -
#
# This is starconf.status: generated by starconf, version @PACKAGE_VERSION@
# DO NOT EDIT: your changes will be overwritten next time starconf is
# run.
#
# Do not depend on the format of this file -- use the interface below
# to query it.
#
# Usage:
#     ./starconf.status --show variable
#     ./starconf.status --version
#     ./starconf.status --help
# where VARIABLE is one of the following variables
STARCONF4_EOD
echo "showvars=\"$showvars\"" >&4
echo >&4
for v in $showvars
do
    eval echo "v_$v=\${$v}" >&4
done

cat >&4 <<\STARCONF4_EOD
if test $# -gt 0 -a `expr x$1 : x-` -gt 0; then
    case $1 in
    --show)
        shift
        while test $# -gt 0
        do
            if test "$1" = "--all"; then
                for v in $showvars
                do
                    eval echo "$v=\${v_$v}"
                done
            else
                if expr " $showvars " : ".* $1 " >/dev/null; then
                    eval echo "$1=\${v_$1}"
                else
                    echo "Unrecognised variable $1"
                    exit 1
                fi
            fi
            shift
        done
        exit 0
        ;;
    --version)
        echo "starconf @PACKAGE_VERSION@"
        exit 0
        ;;
    --help)
        echo "starconf.status: show configuration of directory"
        echo "Usage:"
        echo "    $0 --show [--all | variable ...]"
        echo "        List configuration information:"
        echo "        [one of: $showvars]"
        echo "    $0 [--help | --version]"
        echo "        Show help/version"
        exit 0
        ;;
    *)
        echo "$0: unrecognised option.  $0 --help for usage"
        exit 1
        ;;
    esac
fi
STARCONF4_EOD

# Close the starconf.status file
exec 4>&-
# ...and make it executable
chmod +x starconf.status

#
# Now start unpacking the file(s).  Only one at present.
#

# -------------------- bootstrap --------------------
if test -e bootstrap; then
    # Extract the first word on the second line, and the value of rnum
    eval `sed -n -e '2s/^[^a-z]*\([a-z]*\).*rnum=\([0-9]*\).*/original=\1; file_version=\2;/p' -e 3q bootstrap`
    if test "X$original" != Xoriginal; then
        # do nothing -- file has been modified
        unpack_this=false
    elif test -n "$file_version" -a "$file_version" -lt @PACKAGE_VERSIONINT@; then
        unpack_this=true
    else
        # no need to do anything
        unpack_this=false
    fi
else
    # file doesn't exist, so unpack it
    unpack_this=true
fi
if $unpack_this; then
    echo "Creating bootstrap"
    cat >bootstrap <<\_STARCONF_EOD
##INCLUDE bootstrap.installed
_STARCONF_EOD
    chmod +x bootstrap
else
    echo "Bootstrap already up to date -- not overwriting"
fi


exit 0
