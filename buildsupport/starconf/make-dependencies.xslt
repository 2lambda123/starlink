<?xml version="1.0"?>
<!DOCTYPE xsl:stylesheet SYSTEM "xslt.dtd">

<xsl:stylesheet
  version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:output method="text"/>

  <xsl:template match="/">
    <xsl:apply-templates/>
    <xsl:apply-templates mode="getbuildsupport"/>
  </xsl:template>

  <xsl:template match="componentset">
    <xsl:text># This file is generated by make-dependencies.xslt.
# It must be included into another makefile, and that file should
# define the variable MANIFEST to point to the directory which
# contains the collection of manifest files, typically /star/manifests

</xsl:text>
    <xsl:apply-templates select="component"/>
  </xsl:template>

  <xsl:template match="component">
    <xsl:text>$(MANIFEST)/</xsl:text>
    <xsl:value-of select="@id"/>
    <xsl:text>: </xsl:text>
    <xsl:if test="dependencies/build">
      <xsl:apply-templates select="dependencies/build">
        <!-- It would be nice to sort these dependencies and remove
             duplicates.  However it's hard to do this, since the
             result of the processing of the tokens is a single
             multi-line string, rather than a sequence of nodes.  It
             would probably be possible to do this, using some
             extreme for-each cleverness, but it doesn't seem worth
             the insane complication, since Make doesn't really
             mind.  It would be somewhat easier using an XSLT v2
             stylesheet. -->
      </xsl:apply-templates>
    </xsl:if>
    <xsl:text>
	cd </xsl:text>
    <xsl:apply-templates select="path"/>
    <xsl:if test='@buildsupport[.="yes"]'>
     <!--  The buildsupport attribute is "yes" if this component
           is configured and built during bootstrapping; if so, it needs
           special handling.  Specifically, have it configured at this
           point, rather than waiting to be configured as a result of
           the ./configure at the top level. -->
      <xsl:text> \
		&amp;&amp; ./configure --prefix=$${BUILDSUPPORT_PREFIX=/star/buildsupport} &gt;configure-output.log</xsl:text>
    </xsl:if>
    <xsl:text> \
		&amp;&amp; make&gt;make.log &amp;&amp; make install-manifest&gt;&gt;make.log

</xsl:text>
  </xsl:template>

  <xsl:template match="dependencies/build">
    <xsl:call-template name="process-tokens">
      <xsl:with-param name="toks" select="normalize-space()"/>
    </xsl:call-template>
  </xsl:template>

  <xsl:template match="dependencies/use">
    <xsl:call-template name="process-tokens">
      <xsl:with-param name="toks" select="normalize-space()"/>
      <xsl:with-param name="processuse" select="0"/>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="process-tokens">
    <xsl:param name="toks"/>
    <xsl:param name="processuse" select="2"/>
    <xsl:choose>
      <xsl:when test="contains($toks, ' ')">
        <xsl:call-template name="process-one-dependency">
          <xsl:with-param name="tok" select="substring-before($toks, ' ')"/>
          <xsl:with-param name="processuse" select="$processuse"/>
        </xsl:call-template>
        <xsl:call-template name="process-tokens">
          <xsl:with-param name="toks" select="substring-after($toks, ' ')"/>
          <xsl:with-param name="processuse" select="$processuse"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:when test="$toks">
        <!-- just one token left -->
        <xsl:call-template name="process-one-dependency">
          <xsl:with-param name="tok" select="$toks"/>
          <xsl:with-param name="processuse" select="$processuse"/>
        </xsl:call-template>
      </xsl:when>
      <!-- Otherwise: empty string, do nothing -->
    </xsl:choose>
  </xsl:template>

  <xsl:template name="process-one-dependency">
    <xsl:param name="tok"/>
    <xsl:param name="processuse" select="1"/>
    <xsl:text> \
		$(MANIFEST)/</xsl:text>
    <xsl:value-of select="$tok"/>
    <xsl:if test="id($tok)/dependencies/use and $processuse">
      <xsl:apply-templates select="id($tok)/dependencies/use"/>
    </xsl:if>
  </xsl:template>

  <xsl:template match="componentset" mode="getbuildsupport">
    <xsl:text>buildsupport:</xsl:text>
    <xsl:apply-templates 
      select='component[@buildsupport="yes"]'
      mode="getbuildsupport"/>
  </xsl:template>

  <xsl:template match="component" mode="getbuildsupport">
    <xsl:text> \
		$(MANIFEST)/</xsl:text>
    <xsl:value-of select="@id"/>
  </xsl:template>

</xsl:stylesheet>
