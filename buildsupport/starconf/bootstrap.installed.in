#! /bin/sh -

use_autoheader=false
use_libtool=false
for feature in `sed -n -e 's/^ *\(A[CM]_[A-Z_]*\).*/\1/p' configure.ac`
do
    case $feature in
    AC_CONFIG_HEADER*)
        use_autoheader=true
        ;;
    AM_CONFIG_HEADER*)
        use_autoheader=true
        ;;
    AC_PROG_LIBTOOL)
        use_libtool=true
        ;;
    esac
done

echo "use_autoheader=$use_autoheader"
echo "use_libtool=$use_libtool"

sed -e '1,/^ENDCONFIG/d' \
    -e "s,!run_libtool!,$use_libtool," \
    -e "s,!run_autoheader!,$use_autoheader," \
    $0 >$0.tmp
mv $0.tmp $0
chmod +x $0
exec $0

ENDCONFIG
#! /bin/sh -
# original bootstrap file, installed by starconf @PACKAGE_VERSION@, rnum=@PACKAGE_VERSIONINT@
# If you _need_ to change this file, delete or replace `original' above
# or else starconf may overwrite it with an updated version

# Run this script in a freshly checked-out directory to bring the
# system to the point where you can just type ./configure;make
#
# The configuration script here works with automake versions 1.6.3 and
# 1.7.5, and autoconf 2.57, and probably not much that's significantly
# older than those.

run_libtool=!run_libtool!
run_autoheader=!run_autoheader!

# Echo a command then run it.
echorun() { echo $*; eval $* || exit 1; }

# Execute ./starconf.status if it exists, to bring the configuration
# up-to-date.  This test is possibly temporary, and we may decide to
# mandate a working starconf in future.
if test -x $STARLINK/buildsupport/bin/starconf; then
    echorun $STARLINK/buildsupport/bin/starconf
elif test -x ./starconf.status; then
    echorun ./starconf.status
else
    echo "No starconf found anywhere"
    exit 1
fi
#echorun $STARLINK/buildsupport/bin/starconf

echorun aclocal

# If there is an AC_CONFIG_HEADERS line in configure.ac, then we need
# to run autoheader to do its magic.  If there is no such macro in
# configure.ac, then we must not invoke autoheader here.
$run_autoheader && echorun autoheader

# We need to explicitly run libtoolize only if ltmain.sh is not present
# (it won't be, in the case when we really are bootstrapping, but it might
# be if we're running bootstrap redundantly, which ought to be OK).
# Generally, it's (re)run implicitly by automake.
if $run_libtool; then
    if test ! -e ltmain.sh; then
        echorun libtoolize
    fi
fi

# Generate Makefile.in, and add links to standard tools such as
# install-sh, missing and friends.
#
# Use --foreign so automake doesn't check strict adherence
# to GNU coding standards
echorun automake --add-missing --foreign

# Generate configure from configure.ac
echorun autoconf

exit 0
